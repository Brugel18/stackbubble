2820:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let\'s assume that $\\mathsf{P} \\neq \\mathsf{NP}$. $\\mathsf{NPI}$ is the class of problems in $\\mathsf{NP}$ which are neither in $\\mathsf{P}$ nor in $\\mathsf{NP}$-hard. You can find a list of problems conjectured to be $\\mathsf{NPI}$ <a href="http://cstheory.stackexchange.com/questions/79/problems-between-p-and-npc/">here</a>. </p>\n\n<p><a href="http://cstheory.stackexchange.com/questions/799/generalized-ladners-theorem">Ladner\'s theorem</a> tells us that if $\\mathsf{NP}\\neq\\mathsf{P}$ then there is an infinite hierarchy of $\\mathsf{NPI}$ problems, i.e. there are $\\mathsf{NPI}$ problems which are harder than other $\\mathsf{NPI}$ problems.</p>\n\n<blockquote>\n  <p>I am looking for candidates of such problems, i.e. I am interested in pairs of problems<br>\n  - $A,B \\in \\mathsf{NP}$,<br>\n  - $A$ and $B$ are conjectured to be $\\mathsf{NPI}$,<br>\n  - $A$ is known to reduce to $B$,<br>\n  - but there are no known reductions from $B$ to $A$.</p>\n</blockquote>\n\n<p>Even better if there are arguments for supporting these, e.g. there are results that $B$ does not reduce to $A$ assuming some conjectures in complexity theory or cryptography.</p>\n\n<p>Are there any <em>natural</em> examples of such problems?</p>\n\n<p>Example: Graph Isomorphism problem and Integer Factorization problem are conjectured to be in $\\mathsf{NPI}$ and there are argument supporting these conjectures. Are there any decision problems harder than these two but not known to be $\\mathsf{NP}$-hard?</p>\n', 'ViewCount': '833', 'Title': 'Natural candidates for the hierarchy inside NPI', 'LastEditorUserId': '41', 'LastActivityDate': '2013-01-27T05:50:00.267', 'LastEditDate': '2013-01-27T05:50:00.267', 'AnswerCount': '1', 'CommentCount': '18', 'Score': '16', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-03-07T07:33:15.413', 'Id': '78'},2821:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There is a reduction in Sipser\'s book "Introduction to the theory of computation" on page 286 from 3SAT to Hamiltonian path problem. </p>\n\n<blockquote>\n  <p>Is there a simpler reduction?</p>\n</blockquote>\n\n<p>By simpler I mean a reduction that would be easier to understand (for students).</p>\n\n<blockquote>\n  <p>Is there a reduction that uses linear number of variables?</p>\n</blockquote>\n\n<p>The reduction in Sipser uses $O(kn)$ variables where $k$ is the number of clauses and $n$ is the number of variables. In other words, it is possible for the reduction to blow the size from $s$ to $O(s^2)$. Is there a simple reduction where the size of the output of the reduction is linear in the size of its input? </p>\n\n<p>If it is not possible, is there a reason? Would that imply an unknown result in complexity/algorithms?</p>\n', 'ViewCount': '1482', 'Title': 'Easy reduction from 3SAT to Hamiltonian path problem', 'LastActivityDate': '2012-07-12T03:26:42.550', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '2701', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-03-11T20:22:28.390', 'FavoriteCount': '3', 'Id': '222'},2822:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2078', 'Title': "Why hasn't there been an encryption algorithm that is based on the known NP-Hard problems?", 'LastEditDate': '2012-03-15T07:04:19.330', 'AnswerCount': '4', 'Score': '51', 'PostTypeId': '1', 'OwnerUserId': '5', 'FavoriteCount': '8', 'Body': "<p>Most of today's encryption, such as the RSA, relies on the integer factorization, which is not believed to be a NP-hard problem, but it belongs to BQP, which makes it vulnerable to quantum computers. I wonder, why has there not been an encryption algorithm which is based on an known NP-hard problem. It sounds (at least in theory) like it would make a better encryption algorithm than a one which is not proven to be NP-hard.</p>\n", 'Tags': '<complexity-theory><np-hard><encryption><cryptography>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-22T00:58:17.060', 'CommentCount': '1', 'AcceptedAnswerId': '364', 'CreationDate': '2012-03-14T08:02:26.627', 'Id': '356'},2823:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Minimum bandwidth problem is to a find an ordering of graph nodes on integer line that minimizes the largest distance between any two adjacent nodes. </p>\n\n<p>The decision problem is NP-complete even for binary trees. <a href="http://www.jstor.org/stable/10.2307/2100947" rel="nofollow">Complexity Results for Bandwidth Minimization. Garey, Graham, Johnson and Knuth, SIAM J. Appl. Math., Vol. 34, No.3, 1978</a>.</p>\n\n<p>What is the best known efficient approximability result for computing minimum bandwidth on binary trees? What is best known conditional hardness of approximation result? </p>\n', 'ViewCount': '174', 'Title': 'Approximation of minimum bandwidth on binary trees', 'LastEditorUserId': '472', 'LastActivityDate': '2012-05-24T21:14:57.037', 'LastEditDate': '2012-04-02T11:58:13.790', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '988', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-complete><reference-request><approximation>', 'CreationDate': '2012-03-15T14:56:56.453', 'Id': '416'},2824:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '754', 'Title': 'Decision problems vs "real" problems that aren\'t yes-or-no', 'LastEditDate': '2012-04-02T21:58:54.973', 'AnswerCount': '3', 'Score': '22', 'PostTypeId': '1', 'OwnerUserId': '157', 'FavoriteCount': '6', 'Body': '<p>I read in many places that some problems are difficult to approximate (it is  <a href="https://en.wikipedia.org/wiki/Hardness_of_approximation"><strong>NP-hard</strong> to approximate</a>  them). But approximation is not a decision problem: the answer is a real number and not Yes or No. Also for each desired approximation factor, there are many answers that are correct and many that are wrong, and this changes with the desired approximation factor!</p>\n\n<p>So how can one say that this problem is NP-hard?</p>\n\n<p><em>(inspired by the second bullet in <a href="http://cs.stackexchange.com/q/423/157">How hard is counting the number of simple paths between two nodes in a directed graph?</a>)</em></p>\n', 'Tags': '<complexity-theory><time-complexity><np-hard><approximation>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-29T16:31:13.863', 'CommentCount': '0', 'AcceptedAnswerId': '476', 'CreationDate': '2012-03-17T18:28:41.347', 'Id': '473'},2825:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The 3-Partition problem asks whether a set of $3n$ integers can be partitioned into $n$ sets of three integers such that each set sums up to some given integer $B$. The Balanced Partition problem asks whether $2n$ integers can be partitioned into two equal cardinality sets such that both sets have the same sum. Both problems are known to be NP-complete. However, 3-Partition is strongly NP-complete. I haven't seen in the literature any reduction from 3-Partition to Balanced Partition.</p>\n\n<p>I'm looking for (simple) reduction from the 3-Partition to the Balanced Partition problem.</p>\n", 'ViewCount': '661', 'Title': 'Reduction from 3-Partition problem to Balanced Partition problem', 'LastEditorUserId': '157', 'LastActivityDate': '2012-11-15T08:51:52.980', 'LastEditDate': '2012-03-31T06:46:55.977', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><reductions><np-complete>', 'CreationDate': '2012-03-25T23:50:10.927', 'FavoriteCount': '2', 'Id': '783'},2826:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1006', 'Title': 'NP completeness proof of a spanning tree problem', 'LastEditDate': '2012-03-31T06:45:44.153', 'AnswerCount': '1', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '763', 'FavoriteCount': '3', 'Body': '<p>I am looking for some hints in a question asked by my instructor.</p>\n\n<p>So I just figured out this decision problem is $\\sf{NP\\text{-}complete}$:</p>\n\n<p>In a graph $G$, is there a spanning tree in $G$ that contain an exact set of $S=\\{x_1, x_2,\\ldots, x_n\\}$ as leafs. I figured out we can prove that it is $\\sf{NP\\text{-}complete}$ by reducing Hamiltonian path to this decisions problem.</p>\n\n<p>But my instructor also asked us in class:</p>\n\n<blockquote>\n  <p>would it also be $\\sf{NP\\text{-}complete}$ if instead of "exact set of $S$", we do </p>\n  \n  <p>"include the whole set of $S$ and possibly other leafs" or \n     "subset of $S$"</p>\n</blockquote>\n\n<p>I think "subset of S" would be $\\sf{NP\\text{-}complete}$, but I just can\'t prove it, I don\'t know what problem I can reduce it to this. As for "include the set of $S$..." I think it can be solved in polynomial time.</p>\n', 'Tags': '<complexity-theory><graphs><np-complete>', 'LastEditorUserId': '157', 'LastActivityDate': '2012-03-31T06:45:44.153', 'CommentCount': '2', 'AcceptedAnswerId': '822', 'CreationDate': '2012-03-27T03:43:11.057', 'Id': '808'},2827:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '382', 'Title': 'Proving that directed graph diagnosis is NP-hard', 'LastEditDate': '2012-03-27T13:53:00.233', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '766', 'FavoriteCount': '1', 'Body': "<p>I have a homework assignment that I've been bashing my head against for some time, and I'd appreciate any hints. It is about choosing a known problem, the NP-completeness of which is proven, and constructing a reduction from that problem to the following problem I'll call DGD (directed graph diagnosis).</p>\n\n<h3>Problem</h3>\n\n<blockquote>\n  <p>An instance of DGD $(V,E,k)$ consist of vertices $V = I \\overset{.}{\\cup} O \\overset{.}{\\cup} B$, directed edges $E$ and a positive integer $k$. There are three types of vertices: vertices with only incoming edges $I$, vertices with only outgoing edges $O$ and vertices with both incoming and outgoing edges $B$. Let furthermore $D=O\\times I$. </p>\n  \n  <p>Now, the problem is whether we can cover all nodes with at most $k$ elements of $D$, i.e.</p>\n  \n  <p>$\\qquad \\displaystyle \\exists\\,S\\subseteq D, |S|\\leq k.\\ \\forall\\, v\\in V.\\ \\exists\\,(v_1,v_2) \\in S.\\ v_1 \\to^* v \\to^* v_2 $</p>\n  \n  <p>where $a\\to^* b$ means that there is a directed path from $a$ to $b$.</p>\n</blockquote>\n\n<hr>\n\n<p>I think that the Dominating Set problem is the one I should be reducing from, because this too is concerned about covering a subset of nodes with another subset. I tried creating a DGD instance by first creating two nodes for each element of the dominating set, copying all edges, and then setting the $k$ of the DGD instance equal to that of the DS instance.</p>\n\n<p>Suppose a simple DS-instance with nodes $1$, $2$ and $3$ and edges $(1,2)$ and $(1,3)$. This is a yes-instance with $k = 1$; the dominating set in this case consists of only node $1$. Reducing with the method just described, this would lead to a DGD instance with two paths $(1 \\to 2 \\to 1&#39;)$ and $(1 \\to 3 \\to 1&#39;)$; to cover all nodes, just one pair $(1, 1&#39;)$ would be sufficient. This would have worked perfectly, were it not for the fact that the dominating set of the DS-instance cannot, of course, be determined in polynomial time, which is a requirement here.</p>\n\n<p>I have found that there are many good-looking ways to transform the edges and vertices when reducing, but my problem is somehow expressing DGD's $k$ in terms of DS's $k$. Dominating Set seemed a fitting problem to reduce from, but because of this I think that maybe I should try to reduce from a problem that has no such $k$?</p>\n", 'Tags': '<complexity-theory><np-hard><graph-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-25T16:54:54.900', 'CommentCount': '2', 'AcceptedAnswerId': '812', 'CreationDate': '2012-03-27T07:03:35.207', 'Id': '811'},2828:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '603', 'Title': 'Reducing directed hamiltonian cycle to graph coloring', 'LastEditDate': '2012-03-31T06:51:22.663', 'AnswerCount': '1', 'Score': '5', 'OwnerDisplayName': 'Johan Sannemo', 'PostTypeId': '1', 'OwnerUserId': '1276', 'FavoriteCount': '1', 'Body': '<p>The 3-SAT problem can be reduced to both the graph coloring and the directed hamiltonian cycle problem, but is there any chain of reductions which reduce directed hamiltonian cycle to graph coloring in polynomial time?</p>\n', 'Tags': '<complexity-theory><np-complete><reductions>', 'LastEditorUserId': '157', 'LastActivityDate': '2012-03-31T06:51:22.663', 'CommentCount': '9', 'AcceptedAnswerId': '886', 'CreationDate': '2012-03-26T21:01:13.650', 'Id': '864'},2829:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '3631', 'Title': 'Knapsack problem -- NP-complete despite dynamic programming solution?', 'LastEditDate': '2012-03-31T07:11:40.927', 'AnswerCount': '3', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '848', 'FavoriteCount': '5', 'Body': '<p>Knapsack problems are easily solved by dynamic programming. Dynamic programming runs in polynomial time; that is why we do it, right?</p>\n\n<p>I have read it is actually an NP-complete problem, though, which would mean that solving the problem in polynomial problem is probably impossible.</p>\n\n<p>Where is my mistake?</p>\n', 'Tags': '<complexity-theory><np-complete><dynamic-programming>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-18T16:50:46.083', 'CommentCount': '1', 'AcceptedAnswerId': '910', 'CreationDate': '2012-03-31T05:44:11.187', 'Id': '909'},28210:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '983', 'Title': '"NP-complete" optimization problems', 'LastEditDate': '2012-04-22T16:14:12.770', 'AnswerCount': '1', 'Score': '12', 'OwnerDisplayName': 'Aniket Schneider', 'PostTypeId': '1', 'OwnerUserId': '890', 'FavoriteCount': '3', 'Body': '<p>I am slightly confused by some terminology I have encountered regarding the complexity of optimization problems.  In an algorithms class, I had the <a href="http://en.wikipedia.org/wiki/Maximum_parsimony_%28phylogenetics%29#Problems_with_maximum_parsimony_phylogeny_estimation">large parsimony</a> problem described as NP-complete.  However, I am not exactly sure what the term NP-complete means in the context of an optimization problem.  Does this just mean that the corresponding decision problem is NP-complete?  And does that mean that the optimization problem may in fact be harder (perhaps outside of NP)?</p>\n\n<p>In particular, I am concerned about the fact that while an NP-complete decision problem is polynomial time verifiable, a solution to a corresponding optimization problem does not appear to be polynomial time verifiable.  Does that mean that the problem is not really in NP, or is polynomial time verifiability only a characteristic of NP decision problems?</p>\n', 'Tags': '<complexity-theory><np-complete><terminology>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:14:12.770', 'CommentCount': '6', 'AcceptedAnswerId': '989', 'CreationDate': '2012-04-02T04:39:45.650', 'Id': '982'},28211:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Two things (this may be naive):</p>\n\n<ol>\n<li><p>Does anyone believe there is a sub-exponential time algorithm for the <a href="http://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow">Subset-sum problem</a>? It seems obvious to me that you would have to look through all possible subsets to prove (the negation of) an existential statement. It seems obvious in the same way that if somebody asked you "Is $x$ in this list of $n$ numbers?", it\'s obvious that you would have to look through all $n$ numbers.</p></li>\n<li><p>If Subset-sum can be polynomial time reduced to <a href="http://en.wikipedia.org/wiki/K-SAT#3-satisfiability" rel="nofollow">3SAT</a> and we agree on (1), then doesn\'t that mean $NP \\neq P$?</p></li>\n</ol>\n', 'ViewCount': '503', 'Title': 'Subset-sum and 3SAT', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-08T16:41:26.820', 'LastEditDate': '2012-04-08T06:35:06.860', 'AnswerCount': '3', 'CommentCount': '7', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '959', 'Tags': '<complexity-theory><time-complexity><np-complete><reductions>', 'CreationDate': '2012-04-07T21:28:36.573', 'Id': '1118'},28212:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '299', 'Title': 'A continuous optimization problem that reduces to TSP', 'LastEditDate': '2012-04-09T03:13:54.610', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '898', 'FavoriteCount': '0', 'Body': '<p>Suppose I am given a  finite set of points $p_1,p_2,..p_n$ in the plane, and asked to draw a twice-differentiable curve $C(P)$ through the $p_i$\'s, such that its perimeter is as small as possible. Assuming $p_i=(x_i,y_i)$ and $x_i&lt;x_{i+1}$, I can formalize this problem as:</p>\n\n<p><i> Problem 1 (edited in response to Suresh\'s comments) </i>Determine  $C^2$ functions $x(t),y(t)$ of a parameter $t$ such that the arclength $ L = \\int_{[t \\in 0,1]} \\sqrt{x&#39;^2+y&#39;^2}dt$  is minimized, with $x(0) = x_1, x(1) = x_n$ and for all $t_i: x(t_i) = x_i$, we have $y(t_i)=y_i)$. </p>\n\n<blockquote>\n  <p>How do I prove (or perhaps refute) that Problem 1 is NP-hard?</p>\n</blockquote>\n\n<p><i> Why I suspect NP-hardness </i>   Suppose the $C^2$ assumption is relaxed. Evidently, the function of minimal arclength is the Travelling Salesman tour of the $p_i$\'s.  Perhaps the $C^2$ constraint only makes the problem much harder?</p>\n\n<p><i> Context </i> A variant of this problem was posted on <a href="http://math.stackexchange.com/questions/23181/extremal-curve-passing-through-a-set-of-points">MSE</a>. It didn\'t receive an answer both there and on <a href="http://mathoverflow.net/questions/58885/extremal-curves-with-a-should-pass-through-constraint" rel="nofollow">MO</a>. Given that it\'s nontrivial to solve the problem, I want to establish how hard it is. </p>\n', 'Tags': '<complexity-theory><np-hard><optimization><computable-analysis>', 'LastEditorUserId': '898', 'LastActivityDate': '2012-04-10T00:58:18.347', 'CommentCount': '19', 'AcceptedAnswerId': '1185', 'CreationDate': '2012-04-08T20:08:11.753', 'Id': '1142'},28213:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let me start off by noting <strong>this is a homework problem, please provide only advice and related observations, NO DIRECT ANSWERS please</strong>.  With that said, here is the problem I am looking at:</p>\n\n<blockquote>\n  <p>Let HALF-CLIQUE = { $\\langle G \\rangle$ | $G$ is an undirected graph having a complete\n  subgraph with at least $n/2$ nodes, where n is the number of nodes in $G$\n  }. Show that HALF-CLIQUE is NP-complete.</p>\n</blockquote>\n\n<p>Also, I know the following:</p>\n\n<ul>\n<li>In terms of this problem a <em>clique</em>, is defined as an undirected subgraph of the input graph, wherein every two nodes are connected by an edge.  A <em>$k$-clique</em> is a clique that contains $k$ nodes.</li>\n<li>According to our textbook, Michael Sipser\'s "<em>Introduction to the Theory of Computation</em>", pg 268, that the problem CLIQUE = {$\\langle G,k\\rangle$ | $G$ is an undirected graph with a $k$-clique} is in NP</li>\n<li>Furthermore, according to the same source (on pg 283) notes that CLIQUE is in NP-Complpete (thus also obviously in NP).</li>\n</ul>\n\n<p>I think I have the kernel of an answer here, however I could use <em>some indication of what is wrong with it or any related points that might be relevant to an answer</em>.  This is the general idea I have so far,</p>\n\n<blockquote>\n  <p>Ok, I\'d first note that a certificate would simply be a HALF-QLIQUE of $\\text{size} \\geq n/2$.  Now it appears that what I would need to do is to create a verifier that is a polynomial time reduction from CLIQUE (which we know is NP-Complete) to HALF-CLIQUE.  My idea would be that this would be done by creating a Turing machine which runs the turing machine verifier in the book for CLIQUE with the additional constraint for HALF-CLIQUE.</p>\n</blockquote>\n\n<p>This sounds correct to me, but I don\'t really trust myself yet in this subject. Once again, I would like to remind everyone <strong>this is a HOMEWORK PROBLEM</strong> so please try to avoid answering the question.  Any guidance which falls short of this would be most welcome!   </p>\n', 'ViewCount': '1464', 'Title': 'HALF CLIQUE - NP Complete Problem', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-10T03:18:31.263', 'LastEditDate': '2012-04-10T03:18:31.263', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '1184', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '603', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-04-09T20:30:50.973', 'Id': '1176'},28214:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am taking a complexity course and I am having trouble with coming up with reductions between NPC problems. How can I find reductions between problems? Is there a general trick that I can use? How should I approach a problem that asks me to prove a problem is NPC?</p>\n', 'ViewCount': '417', 'Title': 'Finding reductions', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:05:26.590', 'LastEditDate': '2012-04-22T16:05:26.590', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1068', 'Tags': '<complexity-theory><np-complete><proof-techniques><reductions>', 'CreationDate': '2012-04-13T01:29:02.757', 'FavoriteCount': '8', 'Id': '1240'},28215:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '638', 'Title': 'NP-completeness of a spanning tree problem', 'LastEditDate': '2012-05-18T16:16:57.077', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1108', 'FavoriteCount': '0', 'Body': '<p>I was reviewing some NP-complete problems on this site, and I meet one interesting problem from </p>\n\n<p><a href="http://cs.stackexchange.com/questions/808/np-completeness-proof-of-a-spanning-tree-problem">NP completeness proof of a spanning tree problem</a></p>\n\n<p>In this problem, I am interested in the original problem, which the leaf set is precisely $S$. The author said that he can prove this by reducing it to the Hamiltonian path. However, I still cannot figure it out. Could anybody help me with this in details?</p>\n', 'Tags': '<complexity-theory><np-complete><graph-theory><spanning-trees>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-18T16:49:04.167', 'CommentCount': '3', 'AcceptedAnswerId': '1912', 'CreationDate': '2012-04-16T03:30:50.807', 'Id': '1299'},28216:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '665', 'Title': 'Dealing with intractability: NP-complete problems', 'LastEditDate': '2013-06-06T14:11:05.583', 'AnswerCount': '6', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '1219', 'FavoriteCount': '8', 'Body': '<p>Assume that I am a programmer and I have an NP-complete problem that I need to solve it. What methods are available to deal with NPC problems? Is there a survey or something similar on this topic?</p>\n', 'Tags': '<algorithms><reference-request><np-complete><efficiency><reference-question>', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-06-06T14:11:05.583', 'CommentCount': '4', 'AcceptedAnswerId': '1481', 'CreationDate': '2012-04-24T03:28:23.417', 'Id': '1477'},28217:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I know that the 2D and 3D Knapsack problems are NPC, but is there any way to solve them in reasonable time if the instances are not very complicated? Would dynamic programming work?</p>\n\n<p>By 2D (3D) Knapsack I mean I have a square (cube) and a I have list of objects, all data are in centimeters and are at most 20m.</p>\n', 'ViewCount': '1006', 'Title': 'Algorithms for two and three dimensional Knapsack', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-29T10:36:33.367', 'LastEditDate': '2012-04-24T05:50:51.137', 'AnswerCount': '2', 'CommentCount': '9', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1219', 'Tags': '<algorithms><complexity-theory><np-complete><computational-geometry><knapsack-problems>', 'CreationDate': '2012-04-24T03:35:25.657', 'FavoriteCount': '1', 'Id': '1478'},28218:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>My book states this</p>\n\n<blockquote>\n  <ul>\n  <li>If a decision problem B is in P and\n  A reduces to B,\n  then decision problem A is in P.</li>\n  <li>A decision problem B is NP-complete if\n  B is in NP and\n  for every problem in A in NP, A reduces to B.</li>\n  <li>A decision problem C is NP-complete if\n  C is in NP and\n  for some NP-complete problem B, B reduces to C.</li>\n  </ul>\n</blockquote>\n\n<p>So my questions are</p>\n\n<blockquote>\n  <ol>\n  <li>If B or C is in NP-complete, and all problems in NP reduce to an NP-complete problem, using the first rule, how can any NP problem not be NP complete?</li>\n  <li>If A reduces to B, does B reduce to A?</li>\n  </ol>\n</blockquote>\n', 'ViewCount': '628', 'Title': 'All NP problems reduce to NP-complete problems: so how can NP problems not be NP-complete?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-03T16:24:01.647', 'LastEditDate': '2012-04-27T18:38:48.000', 'AnswerCount': '3', 'CommentCount': '3', 'Score': '6', 'OwnerDisplayName': 'rubixibuc', 'PostTypeId': '1', 'OwnerUserId': '4772', 'Tags': '<complexity-theory><np-complete><decision-problem>', 'CreationDate': '2012-02-29T21:07:18.197', 'Id': '1526'},28219:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to solve a problem for class that is stated like so:</p>\n\n<blockquote>\n  <p>A bipartite graph is an undirected graph in which every cycle has even\n  length.  We attempt to show that the Hamiltonian cycle (a cycle that\n  passes through each node exactly once) problem polynomially reduces to\n  the Hamiltonian cycle problem in bipartite graphs. We need a function\n  $T:  \\{\\text{graphs}\\} \\to \\{\\text{bipartite graphs}\\}$ such that $T$ can be computed in\n  polynomial time and for any graph $G$, $G$ has Hamiltonian cycle iff $T(G)$\n  has a Hamiltonian cycle. Let $T(G)$ be the bipartite graph obtained by\n  inserting a new vertex on every edge. What is wrong with this\n  transformation?</p>\n</blockquote>\n\n<p>I think the problem with the transformation is that for $T(G)$ you need to insert an edge between each pair of vertices and not just insert a new vertex on every edge. I'm actually a bit stumped by this one. Any advice would be much appreciated! </p>\n", 'ViewCount': '355', 'Title': 'Finding the flaw in a reduction from Hamiltonian cycle to Hamiltonian cycle on bipartitie graphs', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-27T22:10:39.560', 'LastEditDate': '2012-04-27T22:10:39.560', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '2', 'OwnerDisplayName': 'thomascirca', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-04-24T00:09:38.290', 'Id': '1527'},28220:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '554', 'Title': 'Is Logical Min-Cut NP-Complete?', 'LastEditDate': '2012-04-28T09:50:58.277', 'AnswerCount': '1', 'Score': '17', 'OwnerDisplayName': 'amirv', 'PostTypeId': '1', 'OwnerUserId': '1280', 'FavoriteCount': '5', 'Body': "<h3>Logical Min Cut (LMC) problem definition</h3>\n\n<p>Suppose that $G = (V, E)$ is an unweighted digraph, $s$ and $t$ are two vertices of $V$, and $t$ is reachable from $s$. The LMC Problem studies how we can make $t$ unreachable from $s$ by the removal of some edges of $G$ following the following constraints:</p>\n\n<ol>\n<li>The number of the removed edges must be minimal.</li>\n<li>We cannot remove every exit edge of any vertex of $G$.</li>\n</ol>\n\n<p>This second constraint is called logical removal. So we look for a <em>logical, minimal removal</em> of some edges of $G$ such that $t$ would be unreachable from $s$.</p>\n\n<h3>Solutions attempts</h3>\n\n<p>If we ignore the logical removal constraint of LMC problem, it will be the min-cut problem in the unweighted digraph $G$, so it will be solvable polynomially (max-flow min-cut theorem). Furthermore, if we ignore the minimal removal constraint of the LMC problem, it will be again solvable polynomially because it is sufficient to find the vertex $k$ such that $k$ is reachable from $s$ and $t$ is not reachable from $k$. Then consider a path $p$ which is an arbitrary path from $s$ to $k$. Now consider the path $p$ as a subgraph of $G$: the answer will be every exit edge of the subgraph $p$. It is obvious that the vertex $k$ can be found by some DFS in $G$ in polynomial time. Hence, by considering just one of the constraints of LMC problem, it will be solvable polynomially.</p>\n\n<p>I tried to solve the LMC problem by a dynamic programming technique but the number of required states for solving the problem became exponential. Moreover, I tried to reduce some NP-Complete problems such as 3-SAT, max2Sat, max-cut, and clique to the LMC problem I didn't manage to find a reduction.</p>\n\n<p>I personally think that the LMC problem is NP-Complete even if $G$ is a binary DAG.</p>\n\n<h3>Questions</h3>\n\n<ol>\n<li>Is the LMC problem NP-Complete in an arbitrary digraph $G$? (main question)</li>\n<li>Is the LMC problem NP-Complete in an arbitrary DAG $G$?</li>\n<li>Is the LMC problem NP-Complete in an arbitrary binary DAG $G$?</li>\n</ol>\n", 'Tags': '<complexity-theory><graph-theory><np-complete>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-16T14:07:05.917', 'CommentCount': '23', 'CreationDate': '2012-04-26T07:52:24.317', 'Id': '1531'},28221:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '148', 'Title': 'From FACTOR To KNAPSACK', 'LastEditDate': '2012-05-14T15:16:37.660', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '956', 'FavoriteCount': '1', 'Body': '<ol>\n<li><p>If there were an algorithm that factored in polynomial time by means of examining each possible factor of a complex number efficiently, could one not also use this algorithm to solve unbounded knapsack problems since two factors can be viewed as one value, say within the set for the knapsack problem, and the other being the number of copies of the first factor?</p>\n\n<p>FACTOR 15; 3, 5</p>\n\n<p>Unbounded KNAPSACK with value of 15 and the set of all integers; {5,5,5} andor {3,3,3,3,3}</p></li>\n<li><p>Would this mean FACTOR was NP-Complete?</p></li>\n<li><p>Would solving unbounded knapsack problems in polynomial time in this way prove P=NP?</p></li>\n</ol>\n', 'Tags': '<complexity-theory><np-complete><integers><knapsack-problems>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-14T15:31:43.257', 'CommentCount': '0', 'AcceptedAnswerId': '1808', 'CreationDate': '2012-05-12T09:26:26.863', 'Id': '1801'},28222:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2317', 'Title': 'Are there NP problems, not in P and not NP Complete?', 'LastEditDate': '2012-05-12T23:47:17.100', 'AnswerCount': '4', 'Score': '14', 'OwnerDisplayName': 'vpiTriumph', 'PostTypeId': '1', 'OwnerUserId': '1472', 'FavoriteCount': '9', 'Body': "<p>Are there any known problems in $\\mathsf{NP}$ (and not in $\\mathsf{P}$) that aren't $\\mathsf{NP}$ Complete?  My understanding is that there are no currently known problems where this is the case, but it hasn't been ruled out as a possibility.  </p>\n\n<p>If there is a problem that is $\\mathsf{NP}$ (and not $\\mathsf{P}$) but not $\\mathsf{NP\\text{-}complete}$, would this be a result of no existing  isomorphism between instances of that problem and the $\\mathsf{NP\\text{-}complete}$ set?  If this case, how would we know that the $\\mathsf{NP}$ problem isn't 'harder' than what we currently identify as the $\\mathsf{NP\\text{-}complete}$ set?</p>\n", 'Tags': '<complexity-theory><np-complete><p-vs-np>', 'LastEditorUserId': '55', 'LastActivityDate': '2012-05-12T23:47:17.100', 'CommentCount': '5', 'AcceptedAnswerId': '1813', 'CreationDate': '2012-05-12T19:54:22.680', 'Id': '1810'},28223:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I think I heard in somewhere that it has been proven that $\\mathsf{NP}$ is strictly contained in $\\mathsf{EXP}$, that is $\\mathsf{NP} \\subsetneq \\mathsf{EXP}$. Is this right? Wikipedia and book resources do not seem to bring me an answer..</p>\n\n<p>I just found a post similar to this, but I am not sure whether $\\mathsf{NP}$ is <em>strictly</em> contained in $\\mathsf{EXP}$.</p>\n', 'ViewCount': '634', 'Title': 'NP $\\subsetneq$ EXP?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-23T08:44:26.817', 'LastEditDate': '2013-05-24T08:03:36.003', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1412', 'Tags': '<complexity-theory><complexity-classes><np>', 'CreationDate': '2012-05-15T15:36:25.137', 'FavoriteCount': '1', 'Id': '1853'},28224:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '783', 'Title': 'Rule of thumb to know if a problem could be NP-complete', 'LastEditDate': '2012-05-16T01:26:33.580', 'AnswerCount': '2', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '851', 'FavoriteCount': '3', 'Body': '<p>This question was inspired by <a href="http://stackoverflow.com/questions/10589995/algorithm-have-a-set-of-points-g-that-can-see-other-points-c-need-an-al/10590173#comment13716914_10590173">a comment on StackOverflow</a>.</p>\n\n<p>Apart from knowing NP-complete problems of the Garey Johnson book, and many others; is there a rule of thumb to know if a problem looks like an NP-complete one?</p>\n\n<p>I am not looking for something rigorous, but to something that works in most cases.</p>\n\n<p>Of course, every time we have to prove that  a problem is NP-complete, or a slight variant of an NP-complete one; but before rushing to the proof it would be great to have certain confidence in the positive result of the proof.</p>\n', 'Tags': '<complexity-theory><np-complete><intuition>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-17T17:15:47.970', 'CommentCount': '4', 'AcceptedAnswerId': '1863', 'CreationDate': '2012-05-15T18:27:59.127', 'Id': '1859'},28225:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Since Integer Linear Programming is NP-complete, there is a Karp reduction from any problem in NP to it. I thought this implied that there is always a polynomial-sized ILP formulation for any problem in NP.</p>\n\n<p>But I\'ve seen papers on specific NP problems where people write things like "this is the first poly-sized formulation" or "there is no known poly-sized formulation". That\'s why I\'m puzzled.</p>\n', 'ViewCount': '246', 'Title': 'Does every NP problem have a poly-sized ILP formulation?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-11-18T22:33:09.293', 'LastEditDate': '2012-05-18T16:13:07.690', 'AnswerCount': '1', 'CommentCount': '12', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1504', 'Tags': '<complexity-theory><np-complete><reductions><linear-programming>', 'CreationDate': '2012-05-15T19:21:47.390', 'FavoriteCount': '1', 'Id': '1860'},28226:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There are lots of attempts at proving either $\\mathsf{P} = \\mathsf{NP} $ or $\\mathsf{P} \\neq \\mathsf{NP}$, and naturally many people think about the question, having ideas for proving either direction.</p>\n\n<p>I know that there are approaches that have been proven to not work, and there are probably more that have a history of failing. There also seem to be so-called <em>barriers</em> that many proof attemps fail to overcome. </p>\n\n<p>We want to avoid investigating into dead-ends, so what are they?</p>\n', 'ViewCount': '6113', 'Title': 'How not to solve P=NP?', 'LastEditorUserId': '6716', 'LastActivityDate': '2014-03-26T03:42:53.937', 'LastEditDate': '2013-06-06T14:08:25.930', 'AnswerCount': '5', 'CommentCount': '5', 'Score': '41', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<complexity-theory><reference-request><history><p-vs-np><reference-question>', 'CreationDate': '2012-05-17T01:24:29.327', 'FavoriteCount': '24', 'Id': '1877'},28227:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '630', 'Title': 'NP-Completeness of a Graph Coloring Problem', 'LastEditDate': '2012-06-26T21:18:06.560', 'AnswerCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1672', 'FavoriteCount': '3', 'Body': '<p><strong>Alternative Formulation</strong></p>\n\n<p>I came up with an alternative formulation to the below problem. The alternative formulation is actually a special case of the problem bellow and uses bipartite graphs to describe the problem. However, I believe that the alternative formulation is still NP-hard. The alternative formulation uses a disjoint set of incoming and outgoing nodes that simplifies the problem definition.</p>\n\n<p>Given $n$ outgoing and $n$ incoming nodes (the red and blue nodes in the figure respectively), and a set $w_{ij}$\'s of size $n \\times n$ of edge weights between the outgoing and incoming vertices. The goal of the problem is to color the thick edges in the figure so that for every incoming node, a condition holds.</p>\n\n<p><img src="http://i.stack.imgur.com/CsXJr.png" alt="Bipartite graph of the problem"></p>\n\n<blockquote>\n  <p>Given a set $\\{ O_i \\; | \\; i=1 \\dots n \\}$ of output vertices, a set $\\{ I_i\\; | \\; i=1 \\dots n \\}$ of input vertices, $n \\times n$ weights\n  $w_{ij} \\ge 0$ between $O_i$\'s and $I_j$\'s for $i,j=1 \\dots n$, and a positive\n  constant $\\beta$, find the minimum number of colors for the edges\n  $e_{ii}$ (thick edges in the above figure) such that for all $j=1 \\dots n$,</p>\n  \n  <p>$$ \\frac{w_{jj}}{1+\\sum_{c(i)=c(j),i \\neq j} w_{ij}} \\ge \\beta $$</p>\n  \n  <p>where $c(i)$ shows the color of the edge $e_{ii}$.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Old Formulation</strong></p>\n\n<p>The following problem looks NP-hard to me, but I couldn\'t show it. Any proof/comment to show the hardness or easiness of it is appreciated.</p>\n\n<blockquote>\n  <p>Assume $K_n=\\langle V,E \\rangle$ is a complete weighted directed graph\n  with $n$ nodes and $n(n-1)$ edges. Let $w_{ij} \\ge 0$ show the weight\n  of the edge $ij$ and $c(ij)$ shows the color of edge $ij$. Given a subset\n  of the edges $T \\subseteq E$ and a positive constant $\\beta$ the goal is:\n  find the minimum number of colors such that for each $e_{ij} \\in T$:</p>\n  \n  <p>$$ \\frac{w_{ij}}{1+\\sum_{c(kl)=c(ij),kl \\neq ij} w_{kj}} \\ge \\beta. $$\n  and\n  $$ c(ij) \\neq c(ik) \\quad for \\quad j \\neq k $$</p>\n</blockquote>\n\n<p>Please note that in the above problem, only the edges in $T$ needs to be colored. That is the problem can be solved in $\\mathcal{O}(|T|!)$.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>After Tsuyoshi Ito\'s comment I updated the problem. The denominator is changed from $1+\\sum_{c(kj)=c(ij),k \\neq i,e_{kj} \\in T} w_{kj}$ to $1+\\sum_{c(kl)=c(ij),kl \\neq ij} w_{kj}$. Therefore, the denominator contains the weights outside $T$ as well. That\'s actually why I mentioned the complete graph in the definition.</p>\n\n<p>I also added an additional constraint $c(ij) \\neq c(ik) \\quad for \\quad j \\neq k$. That means, the outgoing edges from a node must be of different colors (but the incoming colors can be the same as long as the inequality holds). This puts an intuitive lower bound on the number of colors, which is the maximum out-degree of the nodes in $T$.</p>\n\n<p>As Tsuyoshi mentioned, $w_{ij}$\'s, $T$, and $\\beta$ are inputs to the problem and the edge colors are the output.</p>\n\n<p><strong>Update 2:</strong></p>\n\n<p>Problem does not enforce the edges $e_{ij}$ and $e_{ji}$ be of a same color.</p>\n', 'Tags': '<complexity-theory><graphs><graph-theory><np-complete>', 'LastEditorUserId': '1672', 'LastActivityDate': '2012-07-10T23:58:44.517', 'CommentCount': '11', 'AcceptedAnswerId': '2687', 'CreationDate': '2012-05-29T08:27:39.603', 'Id': '2157'},28228:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem in my mind, I think it is a NPC problem but I don\'t know how to prove it.</p>\n\n<p>Here is the problem:</p>\n\n<p>There are <strong>k</strong> islands in a very big lake, and there are <strong>n</strong>  fan-shaped pontoons. Those pontoons are in the same size but have different initial directions and are in different original positions in the lake. The pontoons can rotate freely around its center of mass, and no cost associated with rotation.</p>\n\n<p>Now we need to move those pontoons so that all islands in the lake can be connected. We can guarantee the number of pontoons is enough to connect all the islands.</p>\n\n<p><strong>[Note]: We cannot reuse the pontoons!!</strong></p>\n\n<p>The task is to find the solution having the minimum total distance of the moving pontoons in order to make all islands connected. The distance of moving one pontoon can be calculated as the distance between the center of mass\'s original position and its deployed position.</p>\n\n<p>To make it clear, I have drawn such a figure. Suppose we have 3 islands A, B and C. They are located somewhere in the lake. And I have several fan-shaped pantoons. Now the solution is to find a minimum moving distance summation to connect A, B and C, shown in bottom part of the figure. Hope it help understand the problem. :)</p>\n\n<p><img src="http://i.stack.imgur.com/G6Hop.jpg" alt="enter image description here"></p>\n\n<p>It seems that the problem is a NPC one, but I don\'t know to prove it. Can anyone help me on this? </p>\n', 'ViewCount': '274', 'Title': 'Is connecting islands with pontoons NP-complete?', 'LastEditorUserId': '568', 'LastActivityDate': '2012-06-08T12:27:46.433', 'LastEditDate': '2012-06-08T12:27:46.433', 'AnswerCount': '3', 'CommentCount': '8', 'Score': '9', 'OwnerDisplayName': 'little-eyes', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2012-06-06T18:27:50.300', 'FavoriteCount': '1', 'Id': '2244'},28229:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am aware that for a problem to be considered NP-Hard, any problem in NP must be reduceable to your problem (problem which you are trying to prove is NP-Hard).</p>\n\n<p>Let's assume that you have proven that a problem <code>Y</code> is NP-Hard, and you have a problem <code>X</code> which you know is in NP, and you would like to solve.</p>\n\n<p>To solve <code>X</code>, which of the following reductions would be carried out?</p>\n\n<ol>\n<li>X -> Y</li>\n<li>Y -> X</li>\n</ol>\n\n<p>Which of the following? i.e. would you reduce <code>X</code> to <code>Y</code> or vice-versa, if you would like to solve <code>X</code> which is in NP, and <code>Y</code> which is NP-Hard?</p>\n", 'ViewCount': '222', 'Title': 'Solve a problem through reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-10T12:45:26.697', 'LastEditDate': '2012-06-10T11:29:36.043', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '1814', 'Tags': '<algorithms><complexity-theory><reductions><np-hard>', 'CreationDate': '2012-06-10T08:06:59.850', 'Id': '2312'},28230:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Maybe I am missing something obvious, but can it be that P = co-NP $\\subsetneq$ NP or vice versa? My feeling is that there must be some theorem that rules out this possibility.</p>\n', 'ViewCount': '193', 'Title': 'Can exactly one of NP and co-NP be equal to P?', 'LastActivityDate': '2012-06-12T22:12:12.280', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '2343', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '208', 'Tags': '<complexity-theory><p-vs-np>', 'CreationDate': '2012-06-12T16:45:58.787', 'FavoriteCount': '1', 'Id': '2341'},28231:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Equipartition Problem:</p>\n\n<p>Instance: $2n$ positive integers $x_1,\\dots,x_{2n}$ such that their sum is even. Let $B$ denote half their sum, so that $\\sum x_{i} = 2B$.</p>\n\n<p>Query: Is there a subset $I \\subseteq [2n]$ of size $|I| = n$ such that $\\sum_{i \\in I} x_{i} = B$?</p>\n\n<p>Can the <a href="http://en.wikipedia.org/wiki/Partition_problem" rel="nofollow">partition problem</a> - same as the above but without the restriction on $|I|$ -  be reduced to the above problem ?</p>\n', 'ViewCount': '375', 'Title': 'Reduction to equipartition problem from the partition problem?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-06-22T09:48:20.123', 'LastEditDate': '2012-06-12T18:36:52.223', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '5', 'OwnerDisplayName': 'Shalabh', 'PostTypeId': '1', 'OwnerUserId': '2882', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2012-03-23T16:58:13.290', 'Id': '2347'},28232:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am reading "Efficient Cryptographic Schemes Provably as Secure as Subset Sum" by R. Impagliazzo and M. Naor (<a href="http://www.stevens.edu/algebraic/Files/SubsetSum/impagliazzo96efficient.pdf" rel="nofollow">paper</a>) and came across the following statement in the proof of Theorem 3.1 (pages 10-11):</p>\n\n<blockquote>\n  <p>Let $\\  l(n) = (1-c)n \\ $ for $ \\ c &gt; 0  \\ $ ...</p>\n  \n  <p>Given $a_1, a_2, \\cdots, a_n \\in \\{0,1\\}^{l(n)}$ and a target sum $T$, we construct an input to the collision finding algorithm as follows:</p>\n  \n  <ol>\n  <li><p>Let the collision finding algorithm select a (non-empty) $ s_1 \\in \\{0,1\\}^n $</p></li>\n  <li><p>compute $T\' = \\sum_{i \\in s_1} a_i$.  Choose a random $j$ such that $j \\in s_1$ and define $a_j\' = a_j - T\' + T$.</p></li>\n  <li><p>Give the instance $a_1, a_2, \\cdots , a_j\', \\cdots, a_n$ and $s_1$ to the algorithm that finds collisions.  The algorithm attempts to find $s_2$ such that $f_{(a_1, a_2, \\cdots, a_j\', \\cdots, a_n)}(s_2) = T\'$.</p></li>\n  </ol>\n  \n  <p>If the algorithm returns $s_2$ that collides with $s_1$ and $j \\notin s_2$, then <strong>$s_2$ is a solution to our original problem</strong>, since swapping $a_j$ and $a_j\'$ does not affect the sum over $s_2$.</p>\n</blockquote>\n\n<p>Where the emphasis is mine.</p>\n\n<p>Where $f$ concatenates $\\stackrel{\\rightarrow}{a}$ with the sum of the $a_i$\'s:</p>\n\n<p>$$ f( \\stackrel{\\rightarrow}{ a } , S) = f_{(a_1, a_2, \\cdots, a_n)}(S) = \\ \\stackrel{\\rightarrow}{a}, \\sum_{i \\in S} a_i \\mod 2^{l(n)} $$</p>\n\n<p>(taken from the top of page 3 from the same paper).</p>\n\n<p>For the life of me, I don\'t understand how $s_2$ is a solution to the original instance.  Can someone elaborate on what they mean?  What am I missing?</p>\n\n<p>The above definition for the subset sum problem is, if I\'m not mistaken, just another form of the <a href="http://garden.irmacs.sfu.ca/?q=op/theoretical_computer_science/subset_sums_equality" rel="nofollow">pigeonhole subset sum problem</a> (i.e. $\\sum_j a_j &lt; 2^n -1$ ).  If I read the above right, they are claiming that, given an oracle that finds collisions, they can then construct a solution to the original (pigeonhole) subset sum problem but I do not see how this is done.  Any help would be appreciated.</p>\n', 'ViewCount': '138', 'Title': 'Does a collision oracle for the pigeonhole subset sum problem produce solutions?', 'LastEditorUserId': '67', 'LastActivityDate': '2013-12-04T13:14:36.753', 'LastEditDate': '2012-06-21T22:17:31.350', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '67', 'Tags': '<complexity-theory><computability><np-complete><reductions>', 'CreationDate': '2012-06-21T20:44:25.477', 'Id': '2442'},28233:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>If $L_1$ is NP-hard, $L_1 \\times L_2$ is NP-hard for every $L_2 \\neq \\emptyset$, where</p>\n\n<p>$\\qquad \\displaystyle L_1 \\times L_2 = \\{(w_1,w_2) \\mid w_1 \\in L_1, w_2 \\in L_2\\}$</p>\n\n<p>Is it true or false and why?</p>\n\n<p>I can't prove it but I also don't find counter example.</p>\n", 'ViewCount': '110', 'Title': 'Is NP-hard closed against cartesian product with arbitrary languages?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-04T12:39:56.033', 'LastEditDate': '2012-07-04T12:39:56.033', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'OwnerDisplayName': 'user9868', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-06-25T07:30:34.923', 'Id': '2489'},28234:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '110', 'Title': 'Proof of NP-completeness of graph isomorphism through edge contractions that reduce a metric', 'LastEditDate': '2013-10-08T10:13:01.373', 'AnswerCount': '0', 'Score': '4', 'OwnerDisplayName': 'Yinfang Zhuang', 'PostTypeId': '1', 'FavoriteCount': '0', 'Body': '<blockquote>\n  <p><strong>Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/2634/np-completeness-or-not">NP-completeness of graph isomorphism through edge contractions with an edge validity condition</a>  </p>\n</blockquote>\n\n\n\n<p>I know that graph contractability is $NP$-complete. To be specific given $G=(V_1,E_1)$ and $H=(V_2,E_2)$, can a graph isomorphic to H be obtained from G by a sequence of edge contractions ?</p>\n\n<p>However my problem is a little bit different from the traditional graph contractability. In the traditional graph contractability problem we contract the original graph by different sequences of edge mergings. However in my problem each node is associated with some metric. At each step only a subset of edges are candidates for contracting or merging. Contracting one edge may affect the subset of edges that are legal for contracting at next step. By contracting one edge, we also replace the metrics of the two endpoint nodes with a new smaller metric. We are trying to find an H such that the sum of the metrics of nodes in H is minimal. </p>\n\n<p>Any hint on whether this problem is $NP$-hard($NP$-complete) or not. If so any hint on how to prove it ?</p>\n\n<p><strong>Here are more descriptions: Each node has a 0/1-string label. We define a function to measure the similarity between two labels of the adjacent nodes(i.e. the length of the common prefix of the two labels). At each step only the two adjacent nodes with maximal similarity can be merged (there may be several of them). After we merge the two nodes we label the new node with the common prefix of the original two labels. We also have to preserve the uniqueness of the label. We do no merge if it violates uniqueness of labels. We add up the length of the label of each node in the final graph and try to find the minimum of this number. Or in a more abstract sense, Is labeled graph G contractible (while maintaining our needed invariants e.g. uniqueness of labels) to (given) labeled graph H ?</strong></p>\n', 'ClosedDate': '2012-07-09T09:29:20.120', 'Tags': '<graph-theory><graphs><np-complete>', 'LastEditorUserId': '917', 'LastActivityDate': '2013-10-08T10:13:01.373', 'CommentCount': '5', 'CreationDate': '2012-06-30T15:25:26.993', 'Id': '2573'},28235:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given Graphs $G=(V_1,E_1)$ and $H=(V_2,E_2)$. Can a graph isomorphic to $H$ be obtained from $G$ by a sequence of edge contractions ? We know this problem is NP-complete. What about if only a subset of edges are valid for contraction at each step of the sequence. For example when deciding the first edge for contraction, there are only a subset $E'\\subset E_1$ of edges eligible for contraction. If you pick $e\\in E'$ for contraction and get an intermediate graph then when deciding the second edge for contraction in this intermediate graph there are a subset $E''$ of edges eligible for contraction and so on. </p>\n\n<p>Does this problem stay NP-complete ? </p>\n", 'ViewCount': '267', 'Title': 'NP-completeness of graph isomorphism through edge contractions with an edge validity condition', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-09T09:35:13.907', 'LastEditDate': '2012-07-09T09:35:13.907', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2090', 'Tags': '<complexity-theory><computability><graphs><np-complete><np-hard>', 'CreationDate': '2012-07-06T02:40:35.660', 'Id': '2634'},28236:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I just learned that when we have a polynomial algorithm for NP-complete problems, it is possible to use that algorithm to solve all NP problems. </p>\n\n<p>So, the question is how we then distinguish non-NP-complete NP problems from NP-complete problems? It seems that all these problems will have a polynomial algorithm to convert into other problems...</p>\n', 'ViewCount': '146', 'Title': 'How do we distinguish NP-complete problems from other NP problems?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-17T13:41:22.427', 'LastEditDate': '2012-07-17T13:41:22.427', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '2659', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2114', 'Tags': '<complexity-theory><terminology><np-complete>', 'CreationDate': '2012-07-09T15:33:44.827', 'Id': '2655'},28237:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1096', 'Title': 'Is finding the longest path of a graph NP-complete?', 'LastEditDate': '2012-07-17T13:39:12.770', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2114', 'FavoriteCount': '1', 'Body': '<p>The problem of finding the largest subgraph of a graph that has a Hamiltonian path can be restated as finding the longest path of a graph. Is this NP-complete? Also, is finding the $k$-length path of a graph NP-complete? Is it still NP-complete if we require the path to visit a given vertex?</p>\n', 'Tags': '<complexity-theory><graph-theory><np-complete>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-17T13:39:12.770', 'CommentCount': '0', 'AcceptedAnswerId': '2662', 'CreationDate': '2012-07-09T22:48:06.693', 'Id': '2660'},28238:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given an undirected graph, I define a structure called <em>k-key</em> as a path containing $k$ vertices which are connected to a simple cycle which contains $k$ vertices as well.</p>\n\n<p>Here's the <em>k-key problem</em>: given an undirected graph $G$ and a number $k$, decide whether $G$ contains k $k$-key.</p>\n\n<p>I want to show that the k-key problem is a NP-complete.</p>\n\n<p>I want to make a reduction from the 'Undirected Hamiltonian Cycle' problem in which the input is a graph, and the problem is to decide whether it contains a Hamiltonian path. I already know that this problem is NP-complete. The input for the reduction would be an undirected graph $G$ and the output is $G'$ graph and $k$. Can you please help me understand what manipulation I should do to the original graph in order to show this reduction? And why should it work?</p>\n", 'ViewCount': '129', 'Title': 'The $\\text{k-key}$ problem', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-22T09:50:38.897', 'LastEditDate': '2012-07-17T05:56:17.920', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2678', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2126', 'Tags': '<complexity-theory><np-complete><reductions><np-hard>', 'CreationDate': '2012-07-10T18:16:52.777', 'Id': '2676'},28239:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the set of graphs in which the maximum degree of the vertices is a constant number $\\Delta$ independent of the number of vertices. Is the vertex coloring problem (that is, color the vertices with minimum number of colors such that no pair of adjacent nodes have the same color) on this set still NP-hard? Why?</p>\n', 'ViewCount': '92', 'Title': 'Vertex coloring with an upper bound on the degree of the nodes', 'LastActivityDate': '2012-07-17T14:39:49.543', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2692', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1672', 'Tags': '<algorithms><complexity-theory><graph-theory><graphs><np-complete>', 'CreationDate': '2012-07-11T10:26:02.150', 'Id': '2690'},28240:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '225', 'Title': 'Is SAT in P if there are exponentially many clauses in the number of variables?', 'LastEditDate': '2012-07-21T18:44:49.583', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1589', 'FavoriteCount': '1', 'Body': "<p>I define a <em>long CNF</em> to contain at least $2^\\frac{n}{2}$ clauses, where $n$ is the number of its variables. Let $\\text{Long-SAT}=\\{\\phi: \\phi$ is a satisfiable long CNF formula$\\}$. </p>\n\n<p>I'd like to know why $\\text{Long-SAT} \\in P$. First I thought it is $\\text{NPC}$ since I can do a polynomial-time reduction from $\\text{SAT}$ to $\\text{Long-SAT}$, no?</p>\n\n<p>But maybe I can reduce $\\text{2-SAT}$ to $\\text{Long-SAT}$? How do I do that?</p>\n", 'Tags': '<complexity-theory><np-complete><reductions><satisfiability><polynomial-time>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-21T19:06:47.027', 'CommentCount': '7', 'AcceptedAnswerId': '2705', 'CreationDate': '2012-07-12T08:19:40.860', 'Id': '2704'},28241:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a TSP instance $T$, decide whether changing the city coordinates by adding a vector of coordinates $v$ will change the optimal TSP objective by atleast $x$. The city coordinates are integers.</p>\n\n<p>The problem is in PSPACE but even the verification problem seems to be NP-hard. Is that true?</p>\n\n<p>If the verification problem is NP-hard, what exact complexity class does this problem belong to?</p>\n', 'ViewCount': '192', 'Title': 'What complexity class does this variation of traveling salesman problem belong to?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:04:38.777', 'LastEditDate': '2013-06-06T15:04:38.777', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2160', 'Tags': '<complexity-theory><reductions><np-hard><decision-problem><traveling-salesman>', 'CreationDate': '2012-07-13T23:45:51.823', 'Id': '2737'},28242:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '573', 'Title': 'A polynomial reduction from any NP-complete problem to bounded PCP', 'LastEditDate': '2012-07-22T09:53:07.957', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2188', 'FavoriteCount': '5', 'Body': '<p>Text books everywhere assume that the <a href="https://en.wikipedia.org/wiki/Post_correspondence_problem"><em>Bounded</em> Post Correspondence Problem</a> is NP-complete (no more than $N$ indexes allowed with repetitions). However, nowhere is one shown a simple (as in, something that an undergrad can understand) polynomial time reduction from another NP-complete problem.</p>\n\n<p>However every reduction I can think of is exponential (by $N$ or by the size of the series) in run-time. Perhaps it can be shown that it is reducible to SAT?</p>\n', 'Tags': '<complexity-theory><np-complete><reductions>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-21T22:52:57.200', 'CommentCount': '0', 'AcceptedAnswerId': '2860', 'CreationDate': '2012-07-17T07:20:37.133', 'Id': '2783'},28243:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '3016', 'Title': 'How can I verify a solution to Travelling Salesman Problem in polynomial time?', 'LastEditDate': '2013-06-06T15:04:45.980', 'AnswerCount': '4', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1558', 'FavoriteCount': '5', 'Body': '<p>So, <a href="http://en.wikipedia.org/wiki/Travelling_salesman_problem#Computational_complexity">TSP (Travelling salesman problem) decision problem is <strong>NP complete</strong></a>.</p>\n\n<p>But I do not understand how I can verify that a given solution to TSP is in fact optimal in polynomial time, given that there is no way to find the optimal solution in polynomial time (which is because the problem is not in P)?</p>\n\n<p>Anything that might help me see that the verification can in fact be done in polynomial time?</p>\n', 'Tags': '<complexity-theory><np-complete><traveling-salesman>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:04:45.980', 'CommentCount': '0', 'AcceptedAnswerId': '2835', 'CreationDate': '2012-07-20T07:25:47.367', 'Id': '2834'},28244:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am not sure I see it. From what I understand, edges and vertices are complements for each other and it is quite surprising that this difference exists.</p>\n\n<p>Is there a good / quick / easy way to see that in fact finding a Hamiltonian path should be much harder than finding a Euler path?</p>\n', 'ViewCount': '332', 'Title': 'Is it intuitive to see that finding a Hamiltonian path is not in P while finding Euler path is?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-24T06:14:09.933', 'LastEditDate': '2012-07-21T05:02:56.917', 'AnswerCount': '4', 'CommentCount': '1', 'AcceptedAnswerId': '2839', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1558', 'Tags': '<complexity-theory><graph-theory><np-complete><intuition>', 'CreationDate': '2012-07-20T08:16:19.113', 'Id': '2837'},28245:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider a sequence of $n$ positive real numbers $a_0,\\ldots,a_{n-1}$. Let $S_n$ be the set of permutations on $\\{0,\\ldots,n-1\\}$. </p>\n\n<p>We are interested to find</p>\n\n<p>$$\n\\max_{\\pi\\in S_n}\\left( \\min_{i=0}^{n-1}\\left( \\frac{a_{\\pi(i)}}{a_{\\pi(i-1)}} + \\frac{a_{\\pi(i)}}{a_{\\pi(i+1)}}\\right)\\right)\n$$</p>\n\n<p>The addition and subtraction in $\\pi$ is under mod n.</p>\n\n<p>It might be easier to consider the more general problem, where $b_0,\\ldots,b_{n-1}$ is a sequence of positive real numbers.</p>\n\n<p>$$\n\\max_{\\pi\\in S_n}\\left( \\min_{i=0}^{n-1}\\left( a_{\\pi(i)}(b_{\\pi(i-1)}+b_{\\pi(i+1)} )\\right)\\right)\n$$</p>\n\n<p>Is this problem $NP$-hard? I feel this problem is $NP$-Hard but I don't see any obvious reductions.</p>\n\n<p>The greedy approach: sort the numbers, then insert them one by one into the list such that it maximizes the minimum of the sum of quotients. Turns out to be not optimal.</p>\n\n<pre><code>Greedy Smallest First\n[5, 4, 4] 1.8\n[5, 5, 4, 4] 1.8\n[5, 5, 5, 4, 4] 1.8\n[5, 9, 5, 5, 4, 4] 1.5555555555555556\nGreedy: [5, 9, 5, 5, 4, 4] 1.5555555555555556\nBest: [4, 5, 4, 5, 9, 5] 1.6\n\nGreedy Largest First\n[5, 22, 20] 0.4772727272727273\n[4, 5, 22, 20] 1\n[4, 4, 5, 22, 20] 1.2\n[4, 3, 4, 5, 22, 20] 1.4772727272727273\n\nGreedy: [4, 3, 4, 5, 22, 20] 1.4772727272727273\nBest: [3, 4, 5, 20, 22, 4] 1.5\n</code></pre>\n", 'ViewCount': '114', 'Title': 'Find a permutation that maximize the minimum of $\\frac{a_n}{a_{n-1}} + \\frac{a_n}{a_{n+1}}$', 'LastEditorUserId': '220', 'LastActivityDate': '2012-08-02T20:31:07.420', 'LastEditDate': '2012-08-02T20:31:07.420', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2012-08-02T17:47:23.803', 'FavoriteCount': '3', 'Id': '3007'},28246:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'd like your help with proving that the language\n$$L=\\{\\langle M \\rangle \\mathrel| L(M) \\in \\mathrm{NP}\\smallsetminus \\mathrm{P} \\}$$\nis decidable iff $\\mathrm{P}=\\mathrm{NP}$.</p>\n\n<p>If $\\mathrm{P}=\\mathrm{NP}$, I get that it's the language of empty Turing machines. So $L$ is a $\\text{co-RE}$ problem &mdash; but that's not what's being asked, so I got confused.</p>\n\n<p>I know that in order to show $\\mathrm{P}=\\mathrm{NP}$, I need to show problem which it's $\\mathrm{NPC}$ and $\\mathrm{P}$ as well.</p>\n\n<p>Any help? \nThanks!</p>\n", 'ViewCount': '126', 'Title': 'How to show that the set of machines which accept languages in $\\mathrm{NP}\\smallsetminus\\mathrm P$, is decidable only if $\\mathrm P=\\mathrm{NP}$?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-09T21:03:07.123', 'LastEditDate': '2012-08-09T21:03:07.123', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1183', 'Tags': '<computability><undecidability><p-vs-np>', 'CreationDate': '2012-08-09T11:56:04.413', 'Id': '3103'},28247:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>After looking at other questions and my textbook, I seem to get some confusion. </p>\n\n<p>I do get that when there is a polynomial algorithm of NPC, there is a polynomial algorithm for a NP problem. </p>\n\n<p>But the statement describing reduction seems obscure to me at least in the beginning of my studies in computational complexity. </p>\n\n<p>So, can we transform an exponential algorithm for NPC (which we have) into an exponential algorithm for another non-NPC NP problem in polynomial time? </p>\n', 'ViewCount': '103', 'Title': 'Can an exponential algorithm for an NPC problem be transformed into an algorithm for other NP problems in polynomial time?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-16T11:55:20.967', 'LastEditDate': '2012-08-16T09:30:50.490', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2540', 'Tags': '<complexity-theory><terminology><np-complete><reductions>', 'CreationDate': '2012-08-16T08:49:13.167', 'Id': '3216'},28248:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m reading few proofs which prove a given problem is NP complete. The proof technique has following steps.</p>\n\n<ol>\n<li>Prove that current problem is NP, i.e., given a certificate, prove\nthat it can be verified in polynomial time.</li>\n<li>Take any known NP-complete problem (call "Easy") and reduce <strong>all</strong>\nof it\'s instances to <strong>few</strong> instances of given problem (call\n"Hard"). Note this is <strong>not</strong> necessarily an 1:1 mapping.</li>\n<li>Prove that above reduction can be done in polynomial time.</li>\n</ol>\n\n<p>All is well here. Is this knowledge right "if you can solve any NP-complete problem in polynomial time, then all NP-complete problems can be solved in polynomial time" ?</p>\n\n<p>If yes, then as per above proof technique, let\'s say "Easy" problem can be solved in polynomial time, how does that imply "hard" can be solved in polynomial time? What am I missing here? Or is this true, that "hard" problem can be reduced to the "easy" problem too?</p>\n', 'ViewCount': '391', 'Title': 'How are all NP Complete problems similar?', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-08-16T23:07:03.297', 'LastEditDate': '2012-08-16T19:50:19.087', 'AnswerCount': '4', 'CommentCount': '1', 'AcceptedAnswerId': '3232', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2375', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-08-16T18:21:21.570', 'Id': '3226'},28249:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In <a href="http://rads.stackoverflow.com/amzn/click/0072970545" rel="nofollow">Cormen\'s Algorithms book</a> on NP-completeness they prove various problems are NP-complete by reducing a previously proved NP-complete problem (call $K$) to current problem (call $L$). Each proof involves some clever construction which reduces all instances of $K$ to few instances of $L$. Here is the proof order they follow. <strong>CIRCUIT-SAT, SAT, 3 CNF-SAT, CLIQUE, VERTEX-COVER, HAM-CYCLE, TSP</strong>. e.g. in reducing <strong>VERTEX-COVER</strong> to <strong>HAM-CYCLE</strong> they use a <strong>widget</strong> which does the trick.</p>\n\n<p>After this <a href="http://cs.stackexchange.com/questions/3226/how-are-all-np-complete-problems-similar">previous question of mine</a>, I think one can reduce back. i.e. one can reduce <strong>HAM-CYCLE</strong> to <strong>VERTEX-COVER</strong> problem. I tried searching web for such reductions, but most of the link return the normal reduction order. I\'m interested to see if one can reduce in <strong>reverse order</strong>. i.e. TSP to HAM-CYCLE to VERTEX-COVER to CLIQUE to 3 CNF-SAT to SAT</p>\n\n<p>I\'m looking for reverse constructive proofs. I know all of these problems belong to NP-complete hence equivalent. </p>\n\n<p>You don\'t have to give complete proof as an answer. Proof sketches are fine too. If you can point me where these proofs are available online, that\'s completely fine too. I\'m just trying to lean how constructions are leveraged among problems that look so different on surface. Thanks!</p>\n', 'ViewCount': '744', 'Title': 'Reducing TSP to HAM-CYCLE to VERTEX-COVER to CLIQUE to 3 CNF-SAT to SAT', 'LastEditorUserId': '2375', 'LastActivityDate': '2012-09-18T03:26:11.287', 'LastEditDate': '2012-08-17T22:28:01.183', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2375', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-08-17T14:19:49.773', 'Id': '3239'},28250:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>If $L$ is an APX-hard language, doesn't the existence of a PTAS for $L$ trivially imply $\\mathsf{P} = \\mathsf{NP}$?</p>\n\n<p>Since for example metric-TSP is in APX, but it is not approximable within 220/219 of OPT [1] unless $\\mathsf{P} = \\mathsf{NP}$. Thus if there was a PTAS for $L$ we could reduce metric-TSP using a PTAS reduction to $L$ and thus can approximate OPT within arbitrary precision.</p>\n\n<p>Is my argument correct?</p>\n\n<hr>\n\n<p>[1] Christos H. Papadimitriou and Santosh Vempala. On the approximability Of the traveling salesman problem. Combinatorica, 26(1):101\u2013120, Feb. 2006. </p>\n", 'ViewCount': '206', 'Title': '$L$ APX-hard thus PTAS for $L$ implies $\\mathsf{P} = \\mathsf{NP}$', 'LastEditorUserId': '472', 'LastActivityDate': '2012-08-22T17:52:57.157', 'LastEditDate': '2012-08-20T09:00:14.813', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '3259', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2568', 'Tags': '<complexity-theory><np-complete><approximation>', 'CreationDate': '2012-08-17T21:15:08.610', 'Id': '3245'},28251:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '468', 'Title': 'Types of reductions and associated definitions of hardness', 'LastEditDate': '2012-08-22T10:33:50.667', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2250', 'FavoriteCount': '3', 'Body': '<p>Let A be reducible to B, i.e., $A \\leq B$. Hence, the Turing machine accepting $A$ has access to an oracle for $B$. Let the Turing machine accepting $A$ be $M_{A}$ and the oracle for $B$ be $O_{B}$. The types of reductions:</p>\n\n<ul>\n<li><p>Turing reduction: $M_{A}$ can make multiple queries to $O_{B}$.</p></li>\n<li><p>Karp reduction: Also called "polynomial time Turing reduction": The input to $O_{B}$ must be constructed in polytime. Moreover, the number of queries to $O_{B}$ must be bounded by a polynomial. In this case: $P^{A} = P^{B}$.</p></li>\n<li><p>Many-one Turing reduction: $M_{A}$ can make only one query to $O_{B}$, during its the last step. Hence the oracle response cannot be modified. However, the time taken to constructed the input to $O_{B}$ need not be bounded by a polynomial.\nEquivalently: ($\\leq_{m}$ denoting many-one reduction)</p>\n\n<blockquote>\n  <p>$A \\leq_{m} B$ if $\\exists$ a computable function $f: \\Sigma^{\\ast} \\to \\Sigma^{\\ast}$ such that $f(x) \\in B \\iff x\\in A$.</p>\n</blockquote></li>\n<li><p>Cook reduction: Also called "polynomial time many-one reduction": A many-one reduction where the time taken to construct an input to $O_{B}$ must be bounded by a polynomial.\nEquivalently: ($\\leq^{p}_{m}$ denoting many-one reduction)</p>\n\n<blockquote>\n  <p>$A \\leq^p_{m} B$ if $\\exists$ a <em>poly-time</em> computable function $f: \\Sigma^{\\ast} \\to \\Sigma^{\\ast}$ such that $f(x) \\in B \\iff x\\in A$.</p>\n</blockquote></li>\n<li><p>Parsimonious reduction: Also called "polynomial time one-one reduction": A Cook reduction where every instance of $A$ mapped to a unique instance of $B$.\nEquivalently: ($\\leq^{p}_{1}$ denoting parsimonious reduction)</p>\n\n<blockquote>\n  <p>$A \\leq^p_{1} B$ if $\\exists$ a <em>poly-time</em> computable bijection $f: \\Sigma^{\\ast} \\to \\Sigma^{\\ast}$ such that $f(x) \\in B \\iff x\\in A$.</p>\n</blockquote>\n\n<p>These reductions preserve the number of solutions. Hence $\\#M_{A} = \\#O_{B}$.</p></li>\n</ul>\n\n<p>We can define more types of reductions by bounding the number of oracle queries, but leaving those out, could someone kindly tell me if I have gotten the nomenclature for the different types of reductions used, correctly.\nAre NP-complete problems defined with respect Cook reduction or parsimonious reduction? Can anyone kindly give an example of a problem that is NP-complete under Cook and not under parsimonious reduction.</p>\n\n<p>If I am not wrong, the class #P-Complete is defined with respect to Karp reductions.</p>\n', 'Tags': '<complexity-theory><np-complete><reductions><complexity-classes>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-19T20:30:35.610', 'CommentCount': '0', 'AcceptedAnswerId': '3290', 'CreationDate': '2012-08-22T05:45:07.493', 'Id': '3286'},28252:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Say we're given $n$ sets and the size of their union is $m$. We would like to construct a small set which contains at least $k$ of the $n$ given sets. </p>\n\n<p>Lets assume that $m$ is less than some polynomial in $n$, i.e.: $m &lt; P(n)$. In this case is there an efficient (polynomial) algorithm for the optimization problem:</p>\n\n<p>Find the smallest set which contains at least $k$ of the $n$ given sets.</p>\n", 'ViewCount': '147', 'Title': 'Find small superset of at least k of n given sets', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:27:49.990', 'LastEditDate': '2013-05-24T03:27:49.990', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2610', 'Tags': '<complexity-theory><np-complete><np-hard><polynomial-time>', 'CreationDate': '2012-08-24T21:24:54.527', 'FavoriteCount': '1', 'Id': '3321'},28253:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Although the reduction from vertex cover problem to set cover problem is quite simple, I did not find anywhere the reduction in the opposite direction. From the similarity in the type of problems, I guess this reduction should be simple too. However, despite trying for some time, I could not develop this. So, any ideas how this reduction can be done?</p>\n', 'ViewCount': '902', 'Title': 'Reduction from set cover problem to vertex cover problem', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-30T15:54:51.960', 'LastEditDate': '2012-08-29T00:03:22.587', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2596', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-08-28T20:36:19.960', 'Id': '3354'},28254:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>For an assignment I have to program an application to schedule conversations. \nThere is an event where representatives of the elementary schools talks with the representatives of high schools. They will talk about the students that will be transferred to the highschool. There are approximately 200 elementary schools and 40 high schools that will be participating in this event. The schools already know which student is transferring to which high school. The conversations will only be between representatives of E and H from student that will be transferring to H.</p>\n\n<p>The rules are:</p>\n\n<ol>\n<li>The duration of each conversation is based on the amount of\nstudents per representatives.Each conversation last 5 minutes per student. If a group consist of 1 student, this conversation last 10 minutes.</li>\n<li>No timeclashes</li>\n<li>All the students of the same group will be scheduled together, so, a\nrepresentatives will only face the same representative once.</li>\n<li>Timespan is 13.00-19.00</li>\n<li>The waiting time of a representative is at most 20% of his time. A\nwaiting time is an empty timeslot between the 1st and last\nconversation.</li>\n<li>Schedules for 2 days</li>\n<li>Each representatives participate for 1 day.</li>\n</ol>\n\n<p>The problem is that I know that this is hard to solve, but I dont know if it's NP-hard. Right now I only know this problem is similar to a Job Shop Problem. What can I do to proof that my problem is NP-hard? I read that I need to reduce a known problem to my problem. But how do I do this? I have read different articles and books, but I still don't understand the steps to do it.</p>\n", 'ViewCount': '285', 'Title': 'How to reduce to an NP-hard problem?', 'LastEditorUserId': '2700', 'LastActivityDate': '2012-09-06T14:12:00.927', 'LastEditDate': '2012-09-06T14:12:00.927', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2700', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2012-09-05T15:53:58.833', 'FavoriteCount': '1', 'Id': '3439'},28255:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>My question is related to the <a href="http://en.wikipedia.org/wiki/Integer_relation_algorithm" rel="nofollow">Integer Relation Detection Problem</a> which can be formulated as:</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = 0$</p>\n\n<p>Where $\\forall i. a_i\\in\\mathbb{Z} \\land a_i&lt;c \\land x\\in \\mathbb{R}$, and $\\exists i. a_i\\neq 0$. $c$ and vector $\\mathbf{x}$ are given, and the problem is to find a valid vector $\\mathbf{a}$ that satisfies these constraints.</p>\n\n<p>There are a few algorithms to solve this problem, listed on the wikipedia page linked.</p>\n\n<p>My question: are there algorithms for a solution to the same problem with the modification that</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = 1$?</p>\n\n<p>Or equivalently (I believe),</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = b$?</p>\n\n<p>The constant $b\\in \\mathbb R$ is a given.</p>\n\n<p>On <a href="http://math.stackexchange.com/questions/191545/integer-relation-that-equals-one">math.se</a> I ask for a polynomial time algorithm or proof that none exist, with not much luck. Here I ask if a solution to this is equivalent to a solution the knapsack problem (can the knapsack problem be reduced to this), and this would thus be NP-hard.</p>\n', 'ViewCount': '145', 'Title': 'Reduction from knapsack problem to Integer relation that equals one', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-12T22:38:34.833', 'LastEditDate': '2012-09-12T22:38:34.833', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><complexity-theory><np-hard><number-theory><knapsack-problems>', 'CreationDate': '2012-09-11T02:29:27.720', 'FavoriteCount': '0', 'Id': '3503'},28256:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I am trying to understand this problem from <a href="https://docs.google.com/viewer?a=v&amp;q=cache%3azCRhhxjqT5cJ%3awww.cs.berkeley.edu/~vazirani/algorithms/chap8.pdf%20&amp;hl=en&amp;gl=us&amp;pid=bl&amp;srcid=ADGEEShy1bvJEehdocFNfXKJs7p_TSog4n_ktXYth1MI0n1aUBo_L5Wbd-gzn5OH3QMnAv8mHqNKXJ8t1CXv3rle7avzGFVFN7DliQEASoN2ikYTFglAz_PSPA9K1TW1nY9ybkd3w4OV&amp;sig=AHIEtbTJ6FYl_HzkdU7W-mDJO3BB27sKqw">Algorithms. by S. Dasgupta, C.H. Papadimitriou, and U.V. Vazirani, chapter8</a>, Pg281. Problem 8.19</p>\n\n<p>A <em>kite</em> is a graph on an even number of vertices, say $2n$, in which $n$ of the vertices form a clique\nand the remaining $n$ vertices are connected in a \u201ctail\u201d that consists of a path joined to one of the\nvertices of the clique. Given a graph $G$ and a goal $g$, the KITE problem asks for a subgraph which\nis a kite and which contains $2g$ nodes. Prove that KITE is NP-complete.</p>\n\n<p>Any pointers to start with this problem? I am completely lost with it.</p>\n', 'ViewCount': '675', 'Title': 'NP-complete proof from Dasgupta problem on Kite', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-12T10:58:38.283', 'LastEditDate': '2012-09-12T10:58:38.283', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '3511', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2120', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-09-12T07:23:42.460', 'Id': '3509'},28257:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>How can i prove that the conversion from CNF to DNF is NP-Hard. I'm not asking for an answer, just some suggestions about how to go about proving it.</p>\n", 'ViewCount': '646', 'Title': u'CNF to DNF \u2014 conversion is NP Hard', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-12T22:32:03.810', 'LastEditDate': '2012-09-12T22:32:03.810', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '7', 'OwnerDisplayName': 'jkjk', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-hard><satisfiability><sat-solvers>', 'CreationDate': '2011-12-14T15:46:55.587', 'FavoriteCount': '4', 'Id': '3513'},28258:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Stephen Cook's proof of the NP-completeness of SAT is constructive. Given a Turing machine $M$, one can create a logical formula that is satisfiable if and only if $M$'s computation halts in an accepting state. This suggests that we could take a logical formula and create a Turing machine $M'$ whose computation is described by that formula, thereby creating an artificial problem solved by $M'$. Is it possible to use existing NP-complete problems to create other NP-complete problems? Can this be automated?</p>\n", 'ViewCount': '151', 'Title': 'Creating artificial NP-Complete problems', 'LastActivityDate': '2012-12-15T13:54:32.517', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '7410', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<algorithms><np-complete>', 'CreationDate': '2012-09-17T13:43:44.447', 'FavoriteCount': '1', 'Id': '4592'},28259:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '292', 'Title': 'complexity of decision problems vs computing functions', 'LastEditDate': '2012-09-22T17:24:26.267', 'AnswerCount': '2', 'Score': '-8', 'PostTypeId': '1', 'OwnerUserId': '699', 'FavoriteCount': '1', 'Body': u'<p>this is an area that admittedly Ive always found subtle about CS and occasionally trips me up, and clearly others. recently on tcs.se a user asked an apparently innocuous question about <a href="http://cstheory.stackexchange.com/questions/12682/is-the-n-queens-problem-np-hard">N-Queens being NP hard</a>, but it got downvoted there &amp; goes unanswered because the audience felt it was poorly phrased. </p>\n\n<p>the issue seems to be that some questions in CS have to be phrased as decision problems to measure their complexity, and it is not always obvious how to do that. also other questions are studied from the pov of computing a function with integer or string inputs and outputs, in which case eg their time or space complexity can be studied. for some NP complete problems eg SAT its proven that the decision problem (eg determining whether an answer exists) is roughly equivalent in time/space complexity to solving the function problem (finding a satisfying assignment), but of course thats not always the case.</p>\n\n<p>moreover much of CS theory is focused on NP complete problems [esp that presented to undergraduates in textbooks], which are nec. decision problems, which might lead to a mistaken impression that other types of problem formats are not as central to the theory. also NP complete is sometimes shown in a hierarchy that includes other complexity classes such as PSpace which can be used to measure <em>function</em> complexity in addition to <em>decision</em> complexity. </p>\n\n<p>think that the N-Queens example question &amp; related comments also shows that a bunch of related questions about the same problem in this case N-Queens can vary widely/dramatically in their complexity depending on slight variations of the phrasing. eg in this case:</p>\n\n<ul>\n<li>is there a solution to the N-Queens problem on a $n \\times n$ chessboard? this problem turns out to have O(1) time complexity\u2014 the answer is always Y.</li>\n<li>what is the complexity of finding a solution to the N-Queens problem given $n$ as the input referring to a square $n \\times n$ chessboard? as that question notes in comments by Peter Shor, an advanced and subtle thm from CS called "mahaney\'s" thm applies because it might refer to a "sparse input". also JeffE found a paper that says its in P.</li>\n<li>there is an NP complete or NP hard version of this problem if the squares are <em>irregularly specified</em> as the input. ie some kind of input that specifies the square allowed/unallowed locations (havent looked up the details).</li>\n</ul>\n\n<p><hr>\nwhile advanced theorists may find all this verging on trivial, feel its a legitimate area of focus which sometimes gets glossed over in theoretical treatments. my question</p>\n\n<blockquote>\n  <p>is there a reference somewhere that points/sorts out these kinds of subtleties/difficulties in formulating CS problems?</p>\n</blockquote>\n\n<p>it would be helpful if it also talks about how the issue relates to the complexity hierarchy. know that this is covered in some textbooks, but even then havent seen a nice concise discussion of that and wonder if anyone has a favorite ref for this type of issue. (suppose Garey and Johnson might have some discussion of this although dont have a copy close to check.)</p>\n\n<p>am not specifically focused on the N-Queens problem with this question, but an answer that sketches out the distinctions wrt N-Queens might be helpful. [eg an expanded explanation of Shor\'s comment how Mahaneys thm applies, the irregular board construction input format, etc]</p>\n\n<p>fyi here are two other example problems Ive noticed that can vary widely in complexity depending on various restrictions on the input</p>\n\n<p>[1] <a href="http://cs.stackexchange.com/questions/701/decidable-restrictions-of-the-post-correspondence-problem/4638">Post correspondence problem.</a> it can go from undecidable to NP complete or even in P depending on various restrictions on the solution.</p>\n\n<p>[2] Finding whether a regular expression is equivalent to all strings over the alphabet. with squaring this was shown to be in ExpSpace by Stockmeyer/Meyer, but restrictions on length lead to it to being in NP complete or P. see eg Chee Yap, <a href="http://cs.nyu.edu/yap/book/complexity/" rel="nofollow">Intro to Complexity classes</a>, ch5 on complete problems.</p>\n', 'ClosedDate': '2014-04-29T11:56:36.853', 'Tags': '<algorithms><complexity-theory><reference-request><time-complexity><np-complete>', 'LastEditorUserId': '699', 'LastActivityDate': '2012-10-01T00:23:22.727', 'CommentCount': '7', 'AcceptedAnswerId': '4674', 'CreationDate': '2012-09-22T16:57:55.790', 'Id': '4667'},28260:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If there is someone can prove that the problem "is P equals to NP?" is a NP-COMPLETE problem, what we can conclude from this?</p>\n', 'ViewCount': '198', 'Title': u'If the \u201cis P equals to NP?\u201d is a NP-COMPLETE, what does it tell us?. Some conclusions?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-26T22:18:03.690', 'LastEditDate': '2012-09-22T19:13:41.907', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '-1', 'OwnerDisplayName': 'TesterNP', 'PostTypeId': '1', 'Tags': '<complexity-theory><p-vs-np>', 'CreationDate': '2012-09-21T18:41:33.697', 'Id': '4671'},28261:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's say $F$ is an oracle for a problem in  $\\mathbb{NP}$, but I cannot call this oracle with any input instance.  Instead, whenever I call $F$ I get returned a random instance and solution.  Thus, I know that $F$ is in fact capable of solving arbitrary $\\mathbb{NP}$-hard problems, I just can't specify which one I want it to solve.</p>\n\n<p>Is it possible to use such an oracle to solve an $\\mathbb{NP}$-complete problem faster?  My gut says no because the naive use of the oracle still requires $O(2^n)$ time by calling the oracle enough to check every solution.  I just can't think of a way to prove this.</p>\n", 'ViewCount': '124', 'Title': "Is an oracle ever useful if you can't control the input instances?", 'LastActivityDate': '2012-10-07T21:01:23.037', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '4934', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2911', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2012-09-24T15:34:17.920', 'FavoriteCount': '1', 'Id': '4717'},28262:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '634', 'Title': 'Planarity conditions for Planar 1-in-3 SAT', 'LastEditDate': '2012-10-01T18:24:10.170', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '140', 'FavoriteCount': '2', 'Body': '<p><strong>Planar 3SAT</strong> is NP-complete. A planar 3SAT instance is a 3SAT instance for which the graph built using the following rules is planar:</p>\n\n<ol>\n<li>add a vertex for every $x_i$ and $\\bar{x_i}$</li>\n<li>add a vertex for every clause $C_j$</li>\n<li>add an edge for every $(x_i,\\bar{x_i})$ pair</li>\n<li>add an edge from vertex $x_i$ (or $\\bar{x_i}$) to each vertex that represent a clause that contains it</li>\n<li>add edges between two consecutive variables  $(x_1,x_2),(x_2,x_3),...,(x_n,x_1)$</li>\n</ol>\n\n<p>In particular, rule 5 builds a "backbone" that splits the clauses in two distinct regions.</p>\n\n<p><strong><a href="http://en.wikipedia.org/wiki/One-in-three_3SAT">Planar 1-in-3 SAT</a></strong> is NP-complete, too.</p>\n\n<blockquote>\nBut for planar 1-in-3 SAT are the planarity conditions defined in the same way as in Planar 3SAT ? In particular, can we assume that there is a backbone that links the variables $(x_i,x_{i+1})$  ?\n</blockquote>\n', 'Tags': '<np-complete><reductions><satisfiability><3-sat>', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-10-01T18:24:10.170', 'CommentCount': '0', 'AcceptedAnswerId': '4832', 'CreationDate': '2012-10-01T10:44:10.560', 'Id': '4826'},28263:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '90', 'Title': 'Hardness and directions of reductions', 'LastEditDate': '2012-10-01T21:07:30.707', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2826', 'FavoriteCount': '1', 'Body': "<p>Let us say we know that problem A is hard, then we reduce A to the unknown problem B to prove B is also hard.</p>\n\n<p>As an example: we know 3-coloring is hard. Then we reduce 3-coloring to 4-coloring. By conflating one of the colors in the 3-coloring you have a 4-coloring, ergo 4-coloring is hard.</p>\n\n<p>That's the how. But why is this a proof that 4-coloring is hard? Is it that you can use the solution to the 4-coloring problem to solve the 3-coloring problem? If so, how? If not, why is it a valid proof?</p>\n\n<p>Bonus q: Must the polynomial reductions be able to go in both ways?</p>\n\n<p>Edit: if you would be able to explain why this is so by an example you would do the internet a favor. I couldn't find this explained in a concrete way anywhere.</p>\n", 'Tags': '<complexity-theory><np-complete><reductions>', 'LastEditorUserId': '2826', 'LastActivityDate': '2012-10-01T21:42:20.007', 'CommentCount': '2', 'AcceptedAnswerId': '4836', 'CreationDate': '2012-10-01T20:36:15.753', 'Id': '4835'},28264:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '815', 'Title': 'What is the relationship between NP/NP-Complete/NP-Hard to time complexity?', 'LastEditDate': '2012-10-11T07:36:39.490', 'AnswerCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2835', 'FavoriteCount': '3', 'Body': "<p>I'm familiar with a few problems of each class and even though the definitions are based on sets and polynomial reducibility, I see a pattern with time complexity. NP problems appear to be $O(2^n)$ (minus the P problems of course), and NP-hard problems seem to be worse: $n^n$ or $n!$ (Chess, TSP). Is this a misleading interpretation?</p>\n", 'Tags': '<complexity-theory><terminology><time-complexity><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-12T04:51:51.627', 'CommentCount': '2', 'AcceptedAnswerId': '5011', 'CreationDate': '2012-10-11T05:29:06.593', 'Id': '5009'},28265:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2996', 'Title': 'How can I reduce Subset Sum to Partition?', 'LastEditDate': '2012-10-16T18:57:03.110', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '3048', 'FavoriteCount': '4', 'Body': '<p>Maybe this is quite simple but I have some trouble to get this reduction. I want to reduce <a href="http://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow">Subset Sum</a> to  <a href="http://en.wikipedia.org/wiki/Partition_problem" rel="nofollow">Partition</a> but at this time I don\'t see the relation!</p>\n\n<p>Is it possible to reduce this problem using a Levin Reduction ?</p>\n\n<p>If you don\'t understand write for clarification!</p>\n', 'Tags': '<complexity-theory><np-complete><reductions>', 'LastEditorUserId': '3048', 'LastActivityDate': '2013-04-20T02:41:52.543', 'CommentCount': '0', 'AcceptedAnswerId': '6113', 'CreationDate': '2012-10-16T18:04:04.593', 'Id': '6111'},28266:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Suppose I have a formula, and a lying witness is attempting to make it evaluate to False.</p>\n\n<blockquote>\n  <p>Given a <a href="http://en.wikipedia.org/wiki/Truth_table" rel="nofollow">truth table</a> $c(F_1,\u2026, F_n)$, how could you force a lying\n   witness to contradict herself?</p>\n</blockquote>\n\n<p>A contradiction is simply when the witness\'s statements are logically impossible; i.e. that $x_1,x_2$ are each True, but $x_1 \\space AND\\space x_2$ is False.</p>\n\n<ul>\n<li>How can I characterize the set of all formula for which I force the witness to contradict herself?</li>\n<li>What complexity class does this problem fall in?</li>\n</ul>\n', 'ViewCount': '252', 'Title': 'Given a truth table, force a contradiction', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-12-26T07:32:37.003', 'LastEditDate': '2012-11-26T07:05:41.493', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4222', 'Tags': '<complexity-theory><computability><np-complete><closure-properties><decision-problem>', 'CreationDate': '2012-10-16T23:32:35.117', 'FavoriteCount': '1', 'Id': '6116'},28267:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2657', 'Title': 'Proving DOUBLE-SAT is NP-complete', 'LastEditDate': '2012-10-29T11:12:42.877', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4190', 'FavoriteCount': '0', 'Body': '<p>The well known SAT problem is defined <a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem">here</a> for reference sake. </p>\n\n<p>The DOUBLE-SAT problem is defined as</p>\n\n<p>$\\qquad \\mathsf{DOUBLE\\text{-}SAT} = \\{\\langle\\phi\\rangle \\mid \\phi \\text{ has at least two satisfying assignments}\\}$</p>\n\n<p>How do we prove it to be NP-complete? </p>\n\n<p>More than one way to prove will be appreciated. </p>\n', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-29T11:16:44.353', 'CommentCount': '0', 'AcceptedAnswerId': '6373', 'CreationDate': '2012-10-29T09:04:33.973', 'Id': '6371'},28268:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>We know that the clique problem is NP-complete. Is the restriction of the problem to bipartite graphs or planar graphs still NP-complete?</p>\n', 'ViewCount': '358', 'Title': 'Is the clique problem NP-complete also on bipartite or planar graphs?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-30T00:00:07.960', 'LastEditDate': '2012-10-29T21:57:01.987', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1402', 'Tags': '<complexity-theory><graph-theory><graphs><np-complete>', 'CreationDate': '2012-10-29T21:24:06.577', 'Id': '6375'},28269:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '199', 'Title': 'Modification of Hamilton Path', 'LastEditDate': '2012-11-03T04:47:29.347', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4436', 'FavoriteCount': '1', 'Body': '<p>Although I know that the <a href="http://en.wikipedia.org/wiki/Hamiltonian_path_problem" rel="nofollow">Hamilton Path problem</a> is ${\\sf NP}$-complete, I think the following variant can be solved in polynomial time:</p>\n\n<blockquote>\n  <p>Given a planar graph with vertex set $V$, edge set $E$, start node $S$ and target node $F$,\n  our task is to find the Hamiltonian path from $S$ to $F$ or write that the path doesn\'t exist.</p>\n  \n  <p><em>Last condition</em>: In the path, in addition to selecting the directly connected vertices, \n  we can also choose those connected to exactly one neighbor.</p>\n  \n  <p><strong>Edit</strong>: The degree of any vertex is at most four ($\\deg(v_i) \\le 4$).</p>\n</blockquote>\n\n<p>Does anyone have any ideas how to prove that this can be solved in polynomial time? </p>\n\n<p>It can be hard to understand, so I will give an example:  </p>\n\n<p><img src="http://i.stack.imgur.com/meTSp.png" alt="Examples"></p>\n\n<p>In the left example, for $S=1,F=12$, the solution is the path $1, 11, 8, 7, 5, 9, 2, 10, 4, 6, 3, 12$.  </p>\n\n<p>In the right example, for $S=1,F=15$, there is no Hamiltonian path.</p>\n', 'Tags': '<algorithms><complexity-theory><graph-theory><np-hard>', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-03T16:06:59.817', 'CommentCount': '9', 'AcceptedAnswerId': '6448', 'CreationDate': '2012-11-02T10:23:44.050', 'Id': '6446'},28270:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '244', 'Title': 'Reduce the following problem to SAT', 'LastEditDate': '2012-11-07T10:26:52.693', 'AnswerCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1718', 'FavoriteCount': '3', 'Body': "<p>Here is the problem. Given $k, n, T_1, \\ldots, T_m$, where each $T_i \\subseteq \\{1, \\ldots, n\\}$. Is there a subset $S \\subseteq \\{1, \\ldots, n\\}$ with size at most $k$ such that $S \\cap T_i \\neq \\emptyset$ for all $i$? I am trying to reduce this problem to SAT. My idea of a solution would be to have a variable $x_i$ for each of 1 to $n$. For each $T_i$, create a clause $(x_{i_1} \\vee \\cdots \\vee x_{i_k})$ if $T_i = \\{i_1, \\ldots, i_k\\}$. Then and all these clauses together. But this clearly isn't a complete solution as it does not represent the constraint that $S$ must have at most $k$ elements. I know that I must create more variables, but I'm simply not sure how. So I have two questions:</p>\n\n<ol>\n<li>Is my idea of solution on the right track?</li>\n<li>How should the new variables be created so that they can be used to represent the cardinality $k$ constraint?</li>\n</ol>\n", 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-07T16:44:49.113', 'CommentCount': '1', 'AcceptedAnswerId': '6522', 'CreationDate': '2012-11-07T02:59:38.507', 'Id': '6521'},28271:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '610', 'Title': 'NP-Completeness - Proof by Restriction', 'LastEditDate': '2012-11-07T21:45:31.310', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4481', 'FavoriteCount': '1', 'Body': '<p>I\'m reading Garey &amp; Johnsons <em>"Computers and Intractability"</em> and I\'m at the part <em>"Some techniques for solving NP-Completeness"</em>. Here\'s the text about Proof by Restriction:</p>\n\n<blockquote>\n  <p>Proof by restriction is the simplest, and perhaps most frequently\n  applicable, of our three proof types. An NP-completeness proof by\n  restriction for a given problem $L \\in NP$ consists simply of showing that\n  $L$ contains a known NP-complete problem $L\'$ as a special case. The heart\n  of such a proof lies in the specification of the additional\n  restrictions to be placed on the instances of $L$ so that the resulting\n  restricted problem will be identical to $L\'$. We do not require that the\n  restricted problem and the known NP-complete problem be exact\n  duplicates of one another, but rather that there be an "obvious"\n  one-to-one correspondence between their instances that preserves "yes"\n  and "no" answers."</p>\n</blockquote>\n\n<p>And I\'m trying to learn this technique by example, but need some help.</p>\n\n<p>(If you have the book, my example is on page 65, 27th printing)</p>\n\n<p>They prove that <em>Multiprocessor Scheduling</em> is NP-complete with the following proof:</p>\n\n<p>(Paraphrasing):</p>\n\n<blockquote>\n  <p>Restrict to PARTITION by allowing only instances in which $m = 2$ and $D$\n  $=$ half the total sum of the "lengths".</p>\n</blockquote>\n\n<p>Here $m$ is the number of processors and $D$ is the maximum allowed sum of "lengths" per processor. </p>\n\n<p>This is obviously a special case of multiprocessor scheduling which is solvable by solving the PARTITION problem, and there\'s no confusion there.</p>\n\n<p>But, I\'m not sure why this proof holds. </p>\n\n<p>Excerpt from above: <em>"The heart of such a proof lies in the specification of additional restrictions to be placed on the instances of $L$ so that the resulting restricted problem will be identical to $L\'$ ".</em></p>\n\n<p>The way I see it that means we have to find the special case, and then find restrictions that show us that this problem can always be reduced to the special case. What we\'re trying to do here is show that Problem $A$ (MS) is at least as hard as Problem $B$ (PARTITION), so why would a simple special case be enough here? Is it because there\'s an obvious way to map to this special case that I\'m missing? Or perhaps because $m = 1$ is trivial and we know that the problem will only get harder with a higher $m$, and that $D$ is always arbitrary, therefore $A$ must be at least as hard as $B$ (I feel like I\'m just guessing now :p)</p>\n\n<p>I hope it is clear where I get lost. </p>\n\n<p><strong>TLDR; Why is it enough to find a special case that is solvable by an NP-Complete problem? Don\'t we need some reduction to complete the proof?</strong></p>\n', 'Tags': '<complexity-theory><np-complete><proof-techniques>', 'LastEditorUserId': '4481', 'LastActivityDate': '2012-11-07T23:54:51.733', 'CommentCount': '2', 'AcceptedAnswerId': '6527', 'CreationDate': '2012-11-07T08:30:41.353', 'Id': '6525'},28272:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have encountered the following problem.</p>\n\n<p>We have $N$ points in discrete coordinates,distributed through a plane with vertical axis $[1..Y]$ and horizontal axis $[1..X]$.\nWe can perform the action of removing all points with vertical coordinate $y$, in short removing $y$.</p>\n\n<p><img src="http://i.stack.imgur.com/jcs9u.png" alt="example"></p>\n\n<p>What is the least number of $y$\'$s$ we must remove so that the number of $x$ that have points is less than $X/2$.\nFor example in the graph above removing 1 and 2 leaves points only in 1,3,6,9.</p>\n\n<p>This seems like a NP-complete problem to me so the only solution I have developed is removing all combinations of $y\'$s. I would be grateful if someone experienced in computation-theory could point me to a similar known problem (or maybe a problem this could be reduced to), any suggestion is welcome.</p>\n', 'ViewCount': '164', 'Title': 'Is the following NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-09T08:00:56.913', 'LastEditDate': '2012-11-09T08:00:56.913', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '5', 'OwnerDisplayName': 'manix', 'PostTypeId': '1', 'OwnerUserId': '4496', 'Tags': '<complexity-theory><np-complete><computational-geometry>', 'CreationDate': '2012-11-07T17:35:21.283', 'Id': '6542'},28273:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '456', 'Title': 'Reducing the integer factorization problem to an NP-Complete problem', 'LastEditDate': '2013-12-19T14:18:14.570', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '12230', 'FavoriteCount': '2', 'Body': "<p>I'm struggling to understand the relationship between NP-Intermediate and NP-Complete. I know that if P != NP based on Lander's Theorem there exists a class of languages in NP but not in P or in NP-Complete. Every problem in NP can be reduced to an NP-Complete problem, however I haven't seen any examples for reducing a suspected NPI problem (such as integer factorization) into an NP-Complete problem. Does anyone know of any example of this or another NPI->NPC reduction?</p>\n", 'Tags': '<np-complete><reductions><factoring>', 'LastEditorUserId': '12230', 'LastActivityDate': '2013-12-19T14:18:14.570', 'CommentCount': '2', 'AcceptedAnswerId': '6605', 'CreationDate': '2012-11-10T00:38:55.120', 'Id': '6588'},28274:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have difficulties understanding the definition of the class <a href="http://en.wikipedia.org/wiki/SNP_%28complexity%29" rel="nofollow">Max-SNP</a> (optimization variant of <strong>strict NP</strong>), thus I have to following basic question:</p>\n\n<pre><code>If a problem is known to be Max-SNP hard, does this imply NP-hardness of the problem?\n</code></pre>\n', 'ViewCount': '337', 'Title': 'Does Max-SNP hard imply NP-hard', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-10T08:26:30.693', 'LastEditDate': '2012-11-10T08:26:30.693', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6592', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4532', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-11-10T01:06:59.770', 'Id': '6589'},28275:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '527', 'Title': 'How can P =? NP enhance integer factorization', 'LastEditDate': '2012-11-13T20:01:21.107', 'AnswerCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '4365', 'FavoriteCount': '3', 'Body': '<p>If ${\\sf P}$ does in fact equal ${\\sf NP}$, how would this enhance our algorithms to factor integers faster. In other words, what kind of insight would this fact give us in understanding integer factorization better?</p>\n', 'Tags': '<complexity-theory><computability><np-complete><p-vs-np><factoring>', 'LastEditorUserId': '2755', 'LastActivityDate': '2012-11-18T19:44:37.800', 'CommentCount': '0', 'AcceptedAnswerId': '6652', 'CreationDate': '2012-11-13T19:13:56.870', 'Id': '6650'},28276:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '220', 'Title': 'Intuition behind Relativization', 'LastEditDate': '2012-11-15T09:19:53.543', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1379', 'FavoriteCount': '1', 'Body': '<p>I take course on Computational Complexity. My problem is I don\'t understand <strong>Relativization method</strong>. I tried to find a bit of intuition in many textbooks, unfortunately, so far with no success. I will appreciate if someone could shed the light on this topic so that I will be able to continue by myself.\nFew following sentences are questions and my thoughts about relativization, they will help to navigate the discussion. </p>\n\n<p>Very often relativization comes in comparison with diagonalization, which is a method that helps distinguish between countable set and uncountable set. It somehow comes from relativization that $P$ versus $NP$ question cannot be solved by diagonalization. I don\'t really see the idea why relativization show the useless of diagonalization, and if it\'s useless why is actually useless.</p>\n\n<p>The idea behind oracle Turing machine $M^A$ at first is very clear. However, when it comes to $NP^A$ and $P^A$ the intuition disappears. Oracle is a blackbox that is designed for special language and answers the question whether the string on the input of the oracle is in the language in time 1. As I understood TM that contains an oracle is just make some auxiliary operations and ask the oracle. So the core of the TM is the oracle, everything else is less important. What\'s the difference between $P^A$ and $NP^A$, even thought oracle in both of them works in time 1.</p>\n\n<p>The last  thing is the proving the existence of an oracle $B$ such that $P^B \\neq NP^B$. I found the proof in several textbooks and in all of them the proof seems very vague. I tried to use <strong>"Introduction to complexity" by Sipser, Chapter9. Intractability</strong>, and didn\'t get the idea of construction of a list of all polynomial time oracle TMs $M_i$. </p>\n\n<p>This is more or less everything what I know about relativization, I will appreciate if someonw would decide to share his/her thoughts on the topic.</p>\n\n<p><strong>Addendum</strong>: in one of the textbooks I found example of $NP^B$ language (Computational Complexity: A Modern Approach by Boaz Barak Sanjeev Arora. Theorem 3.7. Page 74). $U_B=\\left \\{ 1^n:some \\space string \\space of  \\space length \\space  n  \\space is \\space  in \\space B\\right \\} $ it\'s unary language. I believe that (1,11,111,1111,...) are all in $U_B$. Author affirms that such a language is in $NP^B$ which is I cannot understand why, hence oracle for B can resolve everything in time 1. Why do we need nondeterministic TM with oracle. If it\'s not good example of $NP^B$ please put yours such that to approve the existence of $NP^B$.</p>\n', 'Tags': '<complexity-theory><np-complete><complexity-classes><relativization><np>', 'LastEditorUserId': '1379', 'LastActivityDate': '2012-11-15T09:19:53.543', 'CommentCount': '6', 'AcceptedAnswerId': '6666', 'CreationDate': '2012-11-14T14:14:35.827', 'Id': '6665'},28277:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '271', 'Title': 'Proving that if $\\mathrm{NTime}(n^{100}) \\subseteq \\mathrm{DTime}(n^{1000})$ then $\\mathrm{P}=\\mathrm{NP}$', 'LastEditDate': '2012-12-13T02:35:05.343', 'AnswerCount': '3', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '2329', 'FavoriteCount': '3', 'Body': "<p>I'd really like your help with proving the following.</p>\n\n<p>If $\\mathrm{NTime}(n^{100}) \\subseteq \\mathrm{DTime}(n^{1000})$ then $\\mathrm{P}=\\mathrm{NP}$.</p>\n\n<p>Here, $\\mathrm{NTime}(n^{100})$ is the class of all languages which can be decided by nondeterministic Turing machine in polynomial time of $O(n^{100})$ and $\\mathrm{DTime}(n^{1000})$  is the class of all languages which can be decided by a deterministic Turing machine in polynomial time of $O(n^{1000})$.</p>\n\n<p>Any help/suggestions?</p>\n", 'Tags': '<time-complexity><complexity-classes><p-vs-np>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-13T02:35:05.343', 'CommentCount': '2', 'AcceptedAnswerId': '6730', 'CreationDate': '2012-11-16T12:57:46.333', 'Id': '6695'},28278:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I try to understand if someone can apply a <strong>NTM</strong> to recognize <strong>coNP</strong> language.</p>\n\n<p>From the definition we know that:</p>\n\n<p><strong>NP</strong> - set of languages that can be recognized by NTM in polynomial time.</p>\n\n<p><strong>coNP</strong> - set of all languages that are complement to NP language.</p>\n\n<p>as with P versus NP question, we have NP versus coNP question.</p>\n\n<p>Unfortunately, is not defined explicitly if can one recognize coNP language with NTM.</p>\n\n<p>However, if we take a look at few examples from the set of coNP languages, few questions emerge.</p>\n\n<p>TAUTOLOGY = {$\\varphi$:$\\varphi$ is satisfied by every assingment}</p>\n\n<p>$\\bar{SAT}$ = {$\\varphi$: $\\varphi$ is not satisfiable }</p>\n\n<p>These languages are known to be coNP language and intuitively it seems like one can construct NTM to recognize these languages. On the other hand, if one can construct NTM to recognize them why them not in NP class (by definition)? Maybe not all language of coNP can be solved by NTM just few of them, if yes, we will have intersection of NP class and coNP class. And if every language from coNP class cannot be solved by NTM, does it mean that limitation of NTM is located in coNP class. Is NTM is limited at all?</p>\n\n<p>I am a little bit confused, I will appreciate if someone will shed the light on this topic.</p>\n', 'ViewCount': '79', 'Title': 'coNP and limitation of NDTM', 'LastEditorUserId': '1379', 'LastActivityDate': '2012-11-17T23:36:10.440', 'LastEditDate': '2012-11-17T18:56:14.323', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<complexity-theory><np-complete><complexity-classes>', 'CreationDate': '2012-11-17T17:37:12.450', 'Id': '6718'},28279:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given that the <a href="http://en.wikipedia.org/wiki/Hamiltonian_path_problem" rel="nofollow">Hamiltonian cycle problem</a> is NP-complete, I want to prove that the following problem is NP-complete:</p>\n\n<blockquote>\n  <p>Given an undirected graph $G(V,E)$ and vertices $s,t\\in V$, does there\n  exist a path from $s$ to $t$ with at least $k$ edges such that all vertices\n  in the path are distinct?</p>\n</blockquote>\n\n<p>I thought of assigning a weight of $1$ to every edge and on similar grounds, but I am not able to compensate for the "at least $k$" edges part.</p>\n\n<p>It would be appreciated if somebody could help me with  the approach.</p>\n', 'ViewCount': '211', 'Title': 'Reduction to Hamiltonian cycle', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-18T23:50:01.033', 'LastEditDate': '2012-11-18T07:30:57.460', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4635', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2012-11-18T04:09:10.590', 'FavoriteCount': '1', 'Id': '6735'},28280:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a set $A=\\{a_{1},a_{2},a_{3},\\ldots,a_{n}\\}$, then construct  a set $P=\\{p_{1}, p_{2}, p_{3}, \\ldots , p_{n}\\}$ such that</p>\n\n<ol>\n<li><p>$|p_{i}|=a_{i}$, and </p></li>\n<li><p>$\\sum_{i = 1,}^{n}p_{i} = 0$.</p></li>\n</ol>\n\n<p>This problem is NP-complete, which I want to prove.</p>\n\n<p>How do I do it? </p>\n\n<p>I am thinking of a reduction from the subset sum problem. But the problem is that because of the mod.</p>\n', 'ViewCount': '248', 'Title': 'Showing a partition-like problem is NP-complete', 'LastEditorUserId': '472', 'LastActivityDate': '2012-11-22T03:37:17.053', 'LastEditDate': '2012-11-22T03:37:17.053', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4635', 'Tags': '<np-complete><reductions><partitions>', 'CreationDate': '2012-11-19T06:31:23.380', 'Id': '6757'},28281:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When I read about NP-completeness for the first time, I really wondered why is the concept of reductions given such high emphasis, after all we have been looking at concepts such as reductions and \'special case of one another problem\' in mathematics since elementary algebra. What I mean by reductions in algebra is the following.</p>\n\n<p>Problem 1: Find value of x such that $x^2+ax+b=0$</p>\n\n<p>Problem 2: Find value of x such that $(x+m/n)^2=0$</p>\n\n<p>We can go on proving both the problems are same and one solution can be translated to another.</p>\n\n<p>My question is that "Is the concept of reductions in computational intractability same as that in above algebraic theory?" If not, how are the reductions in CI theory different?</p>\n', 'ViewCount': '89', 'Title': 'Difference between reductions in algebraic problems versus reductions in computational intractability', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-04T00:56:09.023', 'LastEditDate': '2012-12-04T00:56:09.023', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4667', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2012-11-20T12:28:30.580', 'FavoriteCount': '2', 'Id': '6781'},28282:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Taking an NP-complete problem like vertex cover if we can find a reduction which is exponential and not polynomial and the reduction we do to a problem can be solved in polynomial time, then what would be it's implications?</p>\n\n<p>Based on Yuval's answer, I wanted to throw this scenario into the place also.</p>\n\n<p>If we have a problem in P which we can reduce in polynomial time to an NP-complete problem for e.g vertex cover, what happens then?</p>\n", 'ViewCount': '201', 'Title': 'What would an exponential reduction from an NP-complete problem to P signify?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:09:52.037', 'LastEditDate': '2013-05-24T03:09:52.037', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '366', 'Tags': '<complexity-theory><np-complete><p-vs-np>', 'CreationDate': '2012-11-20T15:03:43.400', 'Id': '6785'},28283:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In this Wikipedia article about the <a href="http://en.wikipedia.org/wiki/Clique_%28graph_theory%29">Clique problem in graph theory</a> it states in the beginning that the problem of finding a clique of size K, in a graph G is NP-complete:</p>\n\n<blockquote>\n  <p>Cliques have also been studied in computer science: finding whether there is a clique of a given size in a graph (the clique problem) is NP-complete, but despite this hardness result many algorithms for finding cliques have been studied.</p>\n</blockquote>\n\n<p>But in this other Wikipedia article about the <a href="http://en.wikipedia.org/wiki/Clique_problem">Clique problem in CS</a>\n it says it is solving the problem for a fixed size k is a problem in P, it can be brute forced in polynomial time.</p>\n\n<blockquote>\n  <p>A brute force algorithm to test whether a graph G contains a k-vertex clique, and to find any such clique that it contains, is to examine each subgraph with at least k vertices and check to see whether it forms a clique. This algorithm takes time O(n^k k^2): there are O(n^k) subgraphs to check, each of which has O(k^2) edges whose presence in G needs to be checked. Thus, the problem may be solved in polynomial time whenever k is a fixed constant. When k is part of the input to the problem, however, the time is exponential.</p>\n</blockquote>\n\n<p>Is there something I am missing here? Maybe a difference in the wording of the problem? And what does the last sentence mean, that "When k is part of the input to the problem, however, the time is exponential."? Why is there a difference when the k is part of the input to the problem?</p>\n\n<p>My idea is that to find a clique of size k in a graph G, is that we first choose a subset of size k of nodes from G, and test wether they are all related to the other k nodes, which can be done in constant time. And repeat this until we have a clique of size k. The number of sets of k nodes we can choose from G is n! / k!*(n-k)!. </p>\n', 'ViewCount': '1742', 'Title': 'Is the k-clique problem NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-24T15:19:38.560', 'LastEditDate': '2012-11-24T15:19:38.560', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6848', 'Score': '8', 'OwnerDisplayName': 'Eivind', 'PostTypeId': '1', 'Tags': '<complexity-theory><graph-theory><np-complete><complexity-classes>', 'CreationDate': '2012-11-22T08:52:36.760', 'Id': '6847'},28284:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p><strong>Subset-sum:</strong> Given a list of numbers, find if a non-empty sublist has sum 0 (there\'s a variation where we want sum=k instead of 0, but 0 is easier for analysis)</p>\n  \n  <p><strong>Partition:</strong> Given a list, can it be partitioned into two non-empty sublists with equal sum?</p>\n</blockquote>\n\n<p>I want to reduce subset-sum to partition. The reductions I found so far are same as <a href="http://cs.stackexchange.com/questions/6111/how-can-i-reduce-subset-sum-to-partition">this one</a> but it has following faults :</p>\n\n<ol>\n<li>For $B=0$, you can always partition $L\'$ into $\\{2S-0\\}$, $\\{S+0\\} U L$.</li>\n<li>It supposes $2S-B$ and $S+B$ have to go to different partitions! You could have both of them in same partition along with elements that sum to $-S$, hence total sum $= 2S$ as needed.</li>\n</ol>\n', 'ViewCount': '284', 'Title': 'reducing subset-sum to partition', 'LastEditorUserId': '4717', 'LastActivityDate': '2012-11-25T05:55:50.390', 'LastEditDate': '2012-11-24T20:21:14.430', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '6882', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4717', 'Tags': '<complexity-theory><np-complete><reductions><partitions>', 'CreationDate': '2012-11-24T20:06:48.693', 'Id': '6877'},28285:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<ol>\n<li><p>Is it always true that a problem which is ${\\sf NP}$-hard but not ${\\sf NP}$-complete is an optimization problem such as <strong>Minimum-Vertex-Cover</strong> and many others.</p></li>\n<li><p>Is it always true that a ${\\sf NP}$-complete problem is always a decision problem such as vertex cover of size $k$, independent set of size $k$ and many others.</p></li>\n</ol>\n', 'ViewCount': '154', 'Title': 'NP-Hard problems which are not NP-Complete', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-27T08:19:00.027', 'LastEditDate': '2012-11-27T08:19:00.027', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2556', 'Tags': '<complexity-theory><terminology><np-complete><np-hard><decision-problem>', 'CreationDate': '2012-11-26T07:02:31.070', 'FavoriteCount': '1', 'Id': '6910'},28286:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '146', 'Title': 'NP-complete reductions', 'LastEditDate': '2012-11-26T11:49:55.377', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4735', 'FavoriteCount': '1', 'Body': '<p>I\'ve read that "Every problem in NP can be reduced to every NP-complete problem". </p>\n\n<p>My question is on the choice of the word "reduce". If I were to "reduce" a polynomial problem in NP to an exponential problem in NP, I just plain feel weird about using the word "reduce" because I feel like I\'ve increased the problem, not reduced it. So, why do we use the word reduce?</p>\n\n<p>Also, why do we write "reduce A to B" as $A\\le_{p} B$. It seems backwards.</p>\n', 'Tags': '<complexity-theory><terminology><np-complete><reductions>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-05T22:56:51.973', 'CommentCount': '2', 'AcceptedAnswerId': '7200', 'CreationDate': '2012-11-26T08:29:17.163', 'Id': '6912'},28287:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I don\'t understand this definition of an "instance" of a problem.  Quoting from the CLRS book on page 1054 on abstract problems (Chapter 34.1):</p>\n\n<blockquote>\n  <p>We define an abstract problem $Q$ to be a binary relation on a set $I$ of problem <strong>instances</strong> and set $S$ of problem <strong>solutions</strong>.</p>\n</blockquote>\n', 'ViewCount': '379', 'Title': 'What is an instance of NP complete problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-29T17:42:14.317', 'LastEditDate': '2012-11-29T16:48:03.150', 'AnswerCount': '4', 'CommentCount': '0', 'AcceptedAnswerId': '7020', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<complexity-theory><terminology><np-complete>', 'CreationDate': '2012-11-29T02:18:20.670', 'Id': '7005'},28288:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>$\\newcommand{\\np}{\\mathsf{NP}}\\newcommand{\\cc}{\\textrm{Circuit-SAT}}$I am having difficulty understanding the $\\np$-hardness proof for $\\cc$ in <a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms" rel="nofollow">CLRS</a>.</p>\n\n<blockquote>\n  <p>$\\cc = \\{\\langle C \\rangle : C \\text{ is a satisfiable combinatorial boolean circuit} \\}$</p>\n  \n  <p><strong>Lemma:</strong> The $\\cc$ problem is $\\mathsf{NP}$-hard.</p>\n</blockquote>\n\n<p>Can anyone provide an easy-to-understand proof?</p>\n', 'ViewCount': '265', 'Title': 'Circuit Satisfiability problem is NP-Hard?', 'LastEditorUserId': '19', 'LastActivityDate': '2012-12-01T05:56:51.550', 'LastEditDate': '2012-12-01T05:56:51.550', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '7034', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<complexity-theory><np-hard><satisfiability><circuits>', 'CreationDate': '2012-11-30T02:16:14.930', 'Id': '7032'},28289:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '405', 'Title': 'Using coloring optimization or coloring decision to solve coloring search', 'LastEditDate': '2012-12-01T01:46:27.977', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4689', 'FavoriteCount': '1', 'Body': "<p>How can you show that <strong>coloring search</strong> can be solved by making a polynomial number of calls to the solution for <strong>coloring optimization</strong> or <strong>coloring decision</strong>? (<strong>Coloring search</strong> is the algorithm to color the vertices of a graph such that adjacent vertices have a different color.)</p>\n\n<p>I wasn't sure how to solve it, but here is what I attempted (I chose to use <strong>coloring optimization</strong>):</p>\n\n<blockquote>\n  <p><strong>Coloring search</strong> can be solved by calling <strong>coloring optimization</strong> and finding the value $m$, which is the amount of colors needed so\n  that no two adjacent vertices have the same color. Once $m$ is found,\n  <strong>coloring search</strong> can color the vertices of the graph by rotating through the $m$\n  different colors for each vertex.</p>\n</blockquote>\n\n<p>Am I on the right track?</p>\n", 'Tags': '<graph-theory><np>', 'LastEditorUserId': '4689', 'LastActivityDate': '2012-12-01T03:12:33.517', 'CommentCount': '1', 'AcceptedAnswerId': '7066', 'CreationDate': '2012-12-01T01:35:49.187', 'Id': '7064'},28290:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>To show that a NP problem is NP-complete, we also have to show that $L \\leq_{p} L'$  , where $L$ is proven NP-complete and you have to prove $L'$ also is. The thing I am confused is how in all NP-complete problems in CLRS they just state the reduction algorithm for $L$ to convert to $L'$ is polynomial. How can one prove it's polynomial time, provided an example such a clique or ham cycle kind of problem?</p>\n", 'ViewCount': '110', 'Title': 'How to determine the polynomial runtime of an NP reduction?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-01T14:06:20.573', 'LastEditDate': '2012-12-01T14:06:20.573', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7069', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<complexity-theory><np-complete><reductions><proof-techniques>', 'CreationDate': '2012-12-01T05:03:35.287', 'Id': '7068'},28291:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>It is well-known that 1-in-k SAT is NP-complete for k=3. What about for k > 3?</p>\n', 'ViewCount': '126', 'Title': 'Is 1-in-k SAT NP-complete for k > 3', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-02T11:41:55.400', 'LastEditDate': '2012-12-02T11:41:55.400', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'user12702', 'PostTypeId': '1', 'Tags': '<complexity-theory><reference-request><np-complete>', 'CreationDate': '2012-12-01T00:13:36.670', 'Id': '7098'},28292:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>The Clique problem takes a graph $G = (V,E)$ and an integer $k$ and asks if $G$ contains a clique of size $k$. (A clique is a set of vertices such that every pair of vertices in the set is adjacent.) The Independent-Set problem takes a graph $G\u2019 = (V\u2019,E\u2019)$ and an integer $k\u2019$ and asks if $G\u2019$ contains an independent set of size $k\u2019$. (An independent set is a set of vertices such that no pair of vertices in the set is adjacent.)</p>\n\n<ol>\n<li><p>Give a polynomial time algorithm that, given a graph $G$ and an integer $k$ produces a graph $G\u2019$ and an integer $k\u2019$ such that $G$ has a clique of size $k$ if and only if $G\u2019$ has an independent set of size $k\u2019$. Justify your answer.</p></li>\n<li><p>Use 1. to prove that the Independent-Set problem is NP-Complete given that the Clique problem is NP-Complete.</p></li>\n</ol>\n', 'ViewCount': '2074', 'Title': 'Reducing Clique to Independent Set', 'LastEditorUserId': '2826', 'LastActivityDate': '2012-12-03T19:13:11.427', 'LastEditDate': '2012-12-03T18:47:25.250', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4828', 'Tags': '<algorithms><complexity-theory><graph-theory><np-complete>', 'CreationDate': '2012-12-03T10:46:11.947', 'Id': '7120'},28293:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Provided that we have to compare it against the graph coloring problem which is NPC. So far,\nI can only think of connecting edges from a vertex in a provided graph to all the other edges it is not connected to then I separate the new graph g2, then I connect all the vertices that are not connected in the g2. And then I count the number of subsets. However it doesnt seem to work with a graph that requires four colors? </p>\n', 'ViewCount': '417', 'Title': 'Proving that the clique cover problem is in NPC by reducing from k-coloring', 'LastEditorUserId': '2826', 'LastActivityDate': '2013-01-08T12:48:32.413', 'LastEditDate': '2012-12-06T19:48:46.213', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<graph-theory><np-complete><reductions>', 'CreationDate': '2012-12-04T13:05:33.323', 'FavoriteCount': '2', 'Id': '7155'},28294:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am really confused about clique problem and clique cover problem. I tried googling it,but I don't see to be able to visualise the clique cover problem.</p>\n", 'ViewCount': '172', 'Title': 'What exactly is a clique cover problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-04T16:59:06.307', 'LastEditDate': '2012-12-04T16:59:06.307', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7157', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<complexity-theory><terminology><np-complete>', 'CreationDate': '2012-12-04T13:19:51.807', 'Id': '7156'},28295:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to find a polynomial time algorithm for finding the minimum vertex cover for a graph. I've written the algorithm below; I know this problem is $\\mathsf{NP}$-hard, which means there are probably some graphs for which this algorithm will not work.</p>\n\n<p>I need some help in finding the flaw in this algorithm and also, an indication for what restrictions should be imposed on graphs such that this algorithm works.</p>\n\n<p>In the algorithm below I have a graph $G=(V,E)$. I also define the $\\text{priority}(v)$ function; in rough terms, it is the number of edges that are covered by vertex $v$. The function has the property that</p>\n\n<p>$$\\sum_{v \\in V} \\text{priority}(v) = \\text{number of edges}.$$</p>\n\n<p>In other words, an edge is counted as covered by only one of its vertices, not both. </p>\n\n<pre><code>Define degree : V -&gt; NaturalNumbers\ndegree(v) = number of edges connected to v, for all v in V\n\nDefine priority : V -&gt; NaturalNumbers\nInitialize priority(v) = 0 for all v in V\n\nFor all (u, v) in E:\n    If degree(u) &gt;= degree(v):\n        priority(u) = priority(u) + 1\n    Else\n        priority(v) = priority(v) + 1\n\nDefine S as the solution to the vertex cover problem\nInitialize S to the empty set\n\nFor all v in V:\n    If priority(v) != 0:\n        Add v to the set S\n\nOutput S as the solution\n</code></pre>\n", 'ViewCount': '219', 'Title': 'For what special cases does this vertex cover algorithm fail or work?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-08-05T17:23:44.537', 'LastEditDate': '2013-03-23T17:44:07.647', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7401', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '5063', 'Tags': '<algorithms><graphs><np-complete><np-hard>', 'CreationDate': '2012-12-14T20:39:37.110', 'Id': '7400'},28296:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/6847/is-the-k-clique-problem-np-complete">Is the k-clique problem NP-complete?</a>  </p>\n</blockquote>\n\n\n\n<p>I\'ve been lately reading about the <a href="http://en.wikipedia.org/wiki/Clique_problem" rel="nofollow">clique problem</a>, specifically, the variety of the clique problem of deciding whether a given graph $G$ with $n$ nodes has a clique of at least size $k$.</p>\n\n<p>Why is this problem $NP$-complete? Could one solve this problem in polynomial time by trying out each possible group of $k$ nodes in the graph and checking if this group is a clique?</p>\n\n<p>Wouldn\'t this algorithm run in time $O(\\binom{n}{k})$ or $O(\\frac{n!}{(n-k)!k!})$ or $O(n^2)$?</p>\n', 'ViewCount': '1852', 'ClosedDate': '2012-12-16T08:35:36.670', 'Title': 'Why is the clique problem NP-complete?', 'LastActivityDate': '2012-12-16T06:39:09.937', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7427', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2860', 'Tags': '<np-complete>', 'CreationDate': '2012-12-15T21:17:53.523', 'Id': '7420'},28297:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m reviewing for finals and have a sample problem that I <strong>think</strong> I understand, but would like someone to bless my understanding or smack me and tell me why I\'m wrong.</p>\n\n<p>I\'m presented with a problem $\\Pi$  of unknown complexity class.  If I can transform $\\Pi$ to some problem $X$, where $X  \\in {\\sf P}$, what does that tell me about $\\Pi$?</p>\n\n<p>I think allows me to conclude that $\\Pi \\in {\\sf P}$, right? If I can reduce $\\Pi$ to another problem that\'s deterministically solvable in polynomial time, and the transformation itself can be done "easily" in polynomial time, then I can conclude that $\\Pi$ is deterministically solvable in polynomial time, and therefore that $\\Pi \\in {\\sf P}$ correct?</p>\n\n<p>Conversely, given the same input, transforming $X$ to $\\Pi$ in polynomial time allows me to conclude nothing meaningful, since nothing is known about  $\\Pi$ right?</p>\n', 'ViewCount': '110', 'Title': 'Implications of polynomial time reductions', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-16T19:03:45.837', 'LastEditDate': '2012-12-16T19:03:45.837', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '7439', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5084', 'Tags': '<complexity-theory><reductions><complexity-classes><p-vs-np>', 'CreationDate': '2012-12-16T15:28:34.083', 'Id': '7438'},28298:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Apparently, if ${\\sf P}={\\sf NP}$, all languages in ${\\sf P}$ except for $\\emptyset$ and $\\Sigma^*$ would be ${\\sf NP}$-complete.</p>\n\n<p>Why these two languages in particular? Can't we reduce any other language in ${\\sf P}$ to them by outputting them when accepting or not accepting?</p>\n", 'ViewCount': '485', 'Title': "If P = NP, why wouldn't $\\emptyset$ and $\\Sigma^*$ be NP-complete?", 'LastEditorUserId': '2205', 'LastActivityDate': '2012-12-17T13:35:57.770', 'LastEditDate': '2012-12-17T07:05:48.280', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2860', 'Tags': '<np-complete><reductions>', 'CreationDate': '2012-12-17T00:08:33.127', 'Id': '7453'},28299:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I received the following assignment:</p>\n\n<p>$\\text{EXACT-TRIPLE} = \\{ \\phi \\mid \\phi \\text{ is a boolean formula that has exactly 3 satisfying assignments} \\}$.</p>\n\n<p>I need to decide whether this problem belongs to NP or not. I assume it does not. How do I prove that?</p>\n', 'ViewCount': '160', 'Title': 'Prove that $\\text{EXACT-TRIPLE}$ is not in NP', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-25T21:52:14.667', 'LastEditDate': '2012-12-25T21:52:14.667', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '5187', 'Tags': '<complexity-theory><np-complete><satisfiability><np>', 'CreationDate': '2012-12-25T18:00:43.690', 'FavoriteCount': '1', 'Id': '7595'},282100:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is it possible that P != NP and the cardinality of P is the same as the cardinality of NP?  Or does P != NP mean that P and NP must have different cardinalities?</p>\n', 'ViewCount': '655', 'Title': 'Does P != NP imply that | NP | > | P |?', 'LastActivityDate': '2014-04-09T02:56:34.357', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '7', 'OwnerDisplayName': 'Jason Baker', 'PostTypeId': '1', 'OwnerUserId': '4849', 'Tags': '<complexity-classes><p-vs-np>', 'CreationDate': '2012-12-31T17:09:57.310', 'FavoriteCount': '5', 'Id': '7665'},282101:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>3-Coloring problem can be proved NP-Complete making use of the reduction from 3SAT <a href="http://www.ic.unicamp.br/~rezende/ensino/mo417/2010s2/notas/16-nphard.pdf" rel="nofollow">Graph Coloring (from 3SAT)</a>. As a consequence, 4-Coloring problem is NP-Complete using the reduction from 3-Coloring:</p>\n\n<blockquote>\n  <p>Reduction from 3-Coloring instance: adding an extra vertex to the graph of 3-Coloring problem, and making it adjacent to all the original vertices.</p>\n</blockquote>\n\n<p>Following the same reasoning, 5-Coloring, 6-Coloring, and even general $k$-Coloring problem can be proved NP-Complete easily. However, my problem comes out with the underlying mathematical induction:</p>\n\n<blockquote>\n  <p>My Problem: What if the induction goes on to $n-1$-Coloring and $n$-Coloring problem, where $n$ is the number of vertices in the graph? I certainly know that $n$-Coloring problem can be solved trivially. So, is there something wrong with the reasoning? How to understand the reduction from 3-Coloring problem to the general $k$-Coloring one?</p>\n</blockquote>\n\n<p>Thanks for any suggestions.</p>\n', 'ViewCount': '1559', 'Title': 'How to understand the reduction from 3-Coloring problem to general $k$-Coloring problem?', 'LastActivityDate': '2013-01-01T08:24:44.500', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '7672', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4911', 'Tags': '<complexity-theory><graph-theory><np-complete>', 'CreationDate': '2013-01-01T07:08:05.763', 'Id': '7671'},282102:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>This is my first post after being a passive user for some time now.\nI wish to ask some questions if I may.  I am not a mathematician but my question relates to the field of maths/computer science.  In particular, the P vs NP problem.  I am aware that this is a problem that elite professionals have not yet been able to solve ... </p>\n\n<p>Regardless, I would like to ask:</p>\n\n<p>If a person who is neither a mathematician nor a programmer were to come up with a flowchart or a series of steps written in basic English that allegedly provides a solution to one of the P vs NP problem, would that be counted as 'proving' that P = NP .. in order to claim the Clays Institute prize :) ? Or is it a must for one to write the solution as mathematical proofs / computer program?</p>\n\n<p>Thank you.</p>\n", 'ViewCount': '1273', 'Title': 'Proving P = NP without mathematical statements / computer program', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-23T18:41:59.157', 'LastEditDate': '2013-01-14T11:33:59.730', 'AnswerCount': '3', 'CommentCount': '4', 'AcceptedAnswerId': '7727', 'Score': '9', 'OwnerDisplayName': 'user5287', 'PostTypeId': '1', 'Tags': '<complexity-theory><p-vs-np>', 'CreationDate': '2013-01-03T10:32:51.870', 'Id': '7726'},282103:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If a language is defined such that<br>\n$L = (0+1)^{\\ast}$   if $\\mathsf{P} = \\mathsf{NP}$ and $\\emptyset$   otherwise</p>\n\n<p>Then $L$ is a regular language if $\\mathsf{P} = \\mathsf{NP}$, otherwise it is the empty langauge. \nTherefore $\\mathsf{P} = \\mathsf{NP}$ , $L$ is recursive (being regular), but is $L$ still recursive if $\\mathsf{P} \\neq \\mathsf{NP}$?</p>\n', 'ViewCount': '150', 'Title': 'Recusively Enumerable or Recursive dependent on whether P=NP', 'LastEditorUserId': '157', 'LastActivityDate': '2013-01-10T11:51:40.033', 'LastEditDate': '2013-01-10T06:57:26.673', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'Arjun J Rao', 'PostTypeId': '1', 'OwnerUserId': '5418', 'Tags': '<computability><regular-languages><p-vs-np>', 'CreationDate': '2013-01-10T01:41:26.263', 'Id': '7859'},282104:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Does the proof of the widely believed result P $\\neq$ NP depend on the proof of NP $\\neq$ Co-NP ?</p>\n', 'ViewCount': '201', 'Title': 'If NP $\\neq$ Co-NP then is P $\\neq$ NP', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-12T17:03:17.257', 'LastEditDate': '2013-01-12T17:03:17.257', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'Arjun J Rao', 'PostTypeId': '1', 'OwnerUserId': '5418', 'Tags': '<complexity-theory><complexity-classes><p-vs-np>', 'CreationDate': '2013-01-10T01:36:06.260', 'Id': '7861'},282105:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I have the set of weights $W = \\{w_1,w_2,\\ldots,w_{50}\\}$ where each $1 \\le w_i \\le 60$ is an integer.  I am interested in determining <strong>all</strong> subsets (not just one, and not just the number of them) of $W$ with a fixed sum $s$.  I realize this is obviously NP-hard, but are there some efficient ways (e.g. dynamic programming) to obtain this result for these relatively nice conditions (e.g. only 50 items, weights integer and bounded)?</p>\n', 'ViewCount': '1230', 'Title': 'Finding all solutions to subset sum for integers with bounded weights', 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-10T19:33:09.907', 'LastEditDate': '2013-02-10T19:33:09.907', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5376', 'Tags': '<dynamic-programming><np-hard>', 'CreationDate': '2013-01-10T19:57:34.920', 'Id': '7874'},282106:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The subset-sum problem is a classic NP-complete problem:</p>\n\n<blockquote>\n  <p>Given a list of numbers $L$ and a target $k$, is there a subset of numbers from $L$ that sums to $k$?</p>\n</blockquote>\n\n<p>A student asked me if this variant of the problem called the "subset product" problem is NP-complete:</p>\n\n<blockquote>\n  <p>Given a list of numbers $L$ and a target $k$, is there a subset of numbers from $L$ whose product is $k$?</p>\n</blockquote>\n\n<p>I did some searching and couldn\'t find any resources that talked about this problem, though perhaps I missed them.</p>\n\n<p>Is the subset product problem NP-complete?</p>\n', 'ViewCount': '722', 'Title': 'Is the "subset product" problem NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-14T11:05:59.723', 'LastEditDate': '2013-01-14T11:05:59.723', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2131', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-01-12T18:23:55.230', 'Id': '7907'},282107:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I was reading a few notes on Proof by Restriction and I am confused:</p>\n\n<p>A Valid Proof by Restriction is the following:</p>\n\n<p>Directed Hamiltonian Cycle Problem is NP Complete because if we look only at <em>instances</em> of DHC where For $G=(V,E)\\quad (u,v)\\in E \\leftrightarrow (v,u) \\in E$ then it reduces to Hamiltonian Cycle which we know is NP complete. </p>\n\n<p>A <em>wrong</em> proof is the following:</p>\n\n<blockquote>\n  <p><strong>Subset Sum problem</strong><br>\n  INSTANCE: Integers $a_1, a_2,\u2026,a_n$ and integer B.</p>\n  \n  <p>QUESTION: Is there a sequence of 0\u2019s and 1\u2019s, $x_1, x_2,\u2026,x_n$ such that:\n  $$\\sum_{i=1}^n a_ix_i \\leq B$$</p>\n</blockquote>\n\n<p>is a special case of </p>\n\n<blockquote>\n  <p><strong>Real Subset Problem</strong>\n  INSTANCE: Integers $a_1, a_2,\u2026,a_n$ and integer B.</p>\n  \n  <p>QUESTION: Is there a sequence of real numbers  $x_1, x_2,\u2026,x_n$  such that:\n  $$\\sum_{i=1}^n a_ix_i \\leq B$$</p>\n</blockquote>\n\n<p>so it is NP Complete. </p>\n\n<p>My notes say that the this proof is wrong since it restricts the question and not the instances but I don't seem to understand the difference. </p>\n\n<p>Further, I can't really understand how Proof by Restriction works; for all I know I could be restricting an NP Complete problem to a trivial case which can be solved in Polynomial time. </p>\n", 'ViewCount': '180', 'Title': 'Proof by restriction: when is it valid to restrict to a special case?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-14T19:50:05.860', 'LastEditDate': '2013-01-14T19:50:05.860', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '7934', 'Score': '3', 'OwnerDisplayName': 'user6422', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><proof-techniques>', 'CreationDate': '2013-01-13T22:00:32.870', 'Id': '7931'},282108:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider the following problem:  Given two graphs $G_1 = (V_1, E_1)$ and $G_2 = (V_2, E_2)$ and some non-negative integer $k \\in \\mathbb{N}$, is it possible to delete at most $k$ vertices from $G_1$ to obtain $G_1'$ such that $G_1' \\cong G_2$, i.e. the resulting graph is isomorphic to $G_2$.</p>\n\n<p>I have to show that this problem is NP-complete.</p>\n\n<p>Can somebody help me with this problem? It is school homework and I don't know how to solve it.</p>\n", 'ViewCount': '271', 'Title': 'How to prove this isomorphism-related graph problem is NP-complete?', 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-09T14:38:21.540', 'LastEditDate': '2014-01-09T14:38:21.540', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'OwnerDisplayName': 'Charlie', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-01-16T13:04:17.763', 'FavoriteCount': '1', 'Id': '8970'},282109:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '633', 'Title': 'NP-Hard that is not NP-Complete and not Undecidable', 'LastEditDate': '2013-01-21T10:57:39.683', 'AnswerCount': '2', 'Score': '16', 'PostTypeId': '1', 'OwnerUserId': '6495', 'FavoriteCount': '3', 'Body': '<p>I\'m wondering if there is a good example for an easy to understand <a href="http://en.wikipedia.org/wiki/NP-hard">NP-Hard</a> problem that is not <a href="http://en.wikipedia.org/wiki/NP-complete">NP-Complete</a> and not undecidable?</p>\n\n<p>For example, the <a href="http://en.wikipedia.org/wiki/Halting_problem">halting problem</a> is NP-Hard, not NP-Complete, but is undecidable.</p>\n\n<p>I believe that this means that it is a problem that a solution for can be verified but not in polynomial time. (Please, correct this statement if this is not the case).</p>\n', 'Tags': '<complexity-theory><np-complete><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-18T14:07:47.700', 'CommentCount': '0', 'AcceptedAnswerId': '9064', 'CreationDate': '2013-01-21T01:13:41.927', 'Id': '9063'},282110:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>SAT [5] can be solved with resolution definitively, i.e. if the formula has a true assignment, resolution can find it, and if it cant be satisfied, resolution can show that no assignment exists (at least in exponential time/space.). [4] </p>\n\n<blockquote>\n  <p>Is there a good fully-self contained description somewhere of solving SAT with resolution?</p>\n</blockquote>\n\n<p>The descriptions on Wikipedia of resolution are focused on a single logical operation, not how to use it in an algorithm to solve SAT, and the Davis Putnam algorithm is described mostly in terms of 1st order logic. I am looking for a description of solving SAT with resolution that does not refer to 1st order logic, just in terms of boolean input variables. Online description is preferred if possible. The connection with DPLL would be helpful also.</p>\n\n<hr>\n\n<p>[1] <a href="http://en.wikipedia.org/wiki/Davis-Putnam_algorithm" rel="nofollow">Davis Putnam algorithm</a>, Wikipedia</p>\n\n<p>[2] <a href="http://en.wikipedia.org/wiki/Resolution_%28logic%29" rel="nofollow">Resolution in logic</a>, Wikipedia</p>\n\n<p>[3] <a href="http://en.wikipedia.org/wiki/DPLL_algorithm" rel="nofollow">Davis Putnam Logemann Loveland algorithm</a>, Wikipedia</p>\n\n<p>[4] <a href="http://cs.stackexchange.com/questions/9095/is-resolution-complete-or-only-refutation-complete">Is resolution complete or only refutation-complete?</a></p>\n\n<p>[5] <a href="http://en.wikipedia.org/wiki/Propositional_satisfiability" rel="nofollow">The boolean satisfiability problem</a></p>\n', 'ViewCount': '118', 'Title': 'Description of resolution algorithm as it applies to SAT', 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-18T22:02:44.297', 'LastEditDate': '2013-02-18T22:02:44.297', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '9235', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '699', 'Tags': '<algorithms><complexity-theory><reference-request><logic><np-complete>', 'CreationDate': '2013-01-28T01:57:42.843', 'Id': '9233'},282111:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>We say that the language $J \\subseteq \\Sigma^{*}$ is <em>dense</em> if there exists a polynomial $p$ such that $$ |J^c \\cap \\Sigma^n| \\leq p(n)$$ for all $n \\in \\mathbb{N}.$ In other words, for any given lenght $n$ there exist only polynomially many words of length $n$ that are not in $J.$</p>\n\n<p>The problem I am currently studying asks to show the following</p>\n\n<blockquote>\n  <p>If there exist a dense $NP$-complete language then $P = NP$</p>\n</blockquote>\n\n<p>What the text suggest is to consider the polynomial reduction to $3$-$SAT$ and then construct an algorithm that tries to satisfy the given $CNF$ formula while also generating elements in $J^c.$</p>\n\n<p>What I am wondering is</p>\n\n<blockquote>\n  <p>Is there a more direct proof? Is this notion known in a more general setting?</p>\n</blockquote>\n', 'ViewCount': '262', 'Title': 'A dense NP complete language implies P=NP', 'LastActivityDate': '2013-02-05T23:51:20.210', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '9529', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '3092', 'Tags': '<complexity-theory><time-complexity><np-complete><satisfiability>', 'CreationDate': '2013-01-30T20:07:13.607', 'FavoriteCount': '1', 'Id': '9327'},282112:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am a bit confused. Somehow I have a problem connecting two problems together. The Closest String problem and the problem of matching with mismatches. They seam to be related but, I fail to see the connection. The Closest String problem is defined as :</p>\n\n<blockquote>\n  <p><em>Instance:</em> Strings $S_{1},S_{2}...S_{n}$ over alphabet $\\Sigma$ of length $L$ each and a non-negative integers $d$ and $n$.</p>\n  \n  <p><em>Parameters:</em> $n,d$</p>\n  \n  <p><em>Question:</em> Is there a string $s$ of length $L$ such that $\\delta(s,S_{i})\\leq d$ for all $i=1..n$?</p>\n</blockquote>\n\n<p>Note: $\\delta(x,y)\\leq d$ is the Hamming distance between $x$ and $y$.</p>\n\n<p>This problem is proven to be NP-complete.</p>\n\n<p>On the other hand we have a problem of matching with mismatches, which is described as:</p>\n\n<blockquote>\n  <p>The problem of string matching with $d$ mismatches consists of finding all occurrences of a pattern of length $m$ in a text of length $n$ such that in at most $d$ positions the text and the pattern have different symbols. In the following, we assume that $0 &lt; d &lt; m$ and $m\\leq n$. </p>\n</blockquote>\n\n<p>Landau and Vishkin gave the first (to my knowledge) efficient algorithm to solve this problem in $O(kn)$ time.</p>\n\n<p>Now my question is:</p>\n\n<p>Is matching with mismatches, or can it be seen, as a special parametrized case of the Closest String problem and how is this connection made?</p>\n', 'ViewCount': '42', 'Title': 'Is matching with mismatches a special(parametrized) case of Closest String problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-04T15:47:42.317', 'LastEditDate': '2013-02-04T15:47:42.317', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9468', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Tags': '<np-complete><decision-problem><matching>', 'CreationDate': '2013-02-04T09:54:26.547', 'Id': '9467'},282113:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am interested to know the complexity of the NAE-HORN-SAT problem\n(not all equal).  We know that HORNSAT is $\\mathsf{P}$-complete, but\non the other hand, NAE-SAT is $\\mathsf{NP}$-complete.  I want to know\nwhat can we say about NAE-HORN-SAT problem.  Let me define the problem\nformally:</p>\n\n<blockquote>\n  <p>Given: One Boolean formula $\\phi$ is given to us in CNF where each\n  clause has at most one positive literal (HORN-property).<br>\n  Question: Is there any assignment for the input variables of\n  $\\phi$ such that any clause has at least one False and at least one\n  True literal (NAE-property) ?</p>\n</blockquote>\n\n<p>N.B.:</p>\n\n<ul>\n<li>Positive literal: any variable directly,</li>\n<li>Negative literal: negation of any variable.</li>\n<li>True literal: literal is assigned to Boolean True by any assignment,</li>\n<li>False literal: literal is assigned to Boolean False by any assignment.</li>\n</ul>\n\n<p>According to <a href="http://en.wikipedia.org/wiki/Schaefer%27s_dichotomy_theorem" rel="nofollow">Schaefer\'s dichotomy theorem</a>, this problem must be either\nin $\\mathsf{P}$ or $\\mathsf{NP}$-complete.  I can just find one\npolynomial reduction from HORNSAT to this problem, which proves\nactually nothing.  Is there a polynomial time algorithm to solve this\nproblem?</p>\n\n<p>Or, is there any way to prove this problem to be $\\mathsf{NP}$-hard?\nAny thoughts about this ?</p>\n', 'ViewCount': '263', 'Title': 'Is NAE-HORN-SAT in P or NP-hard?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-05T13:20:20.817', 'LastEditDate': '2013-02-05T12:57:19.910', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '6', 'OwnerDisplayName': 'David', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'CreationDate': '2013-02-04T16:04:39.273', 'FavoriteCount': '1', 'Id': '9484'},282114:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '88', 'Title': 'Does reduction from an NP-complete problem to some problem $X$ imply that $X\\in NP$?', 'LastEditDate': '2013-02-06T14:52:09.737', 'AnswerCount': '2', 'Score': '3', 'OwnerDisplayName': 'user6697', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Body': '<p>I am having problems resolving the following question:</p>\n\n<blockquote>\n  <p>Given some problem $X$. If there exists a polynomial time reduction from (for example) $\\mbox{SAT}$ to $X$, $(\\mbox{SAT} \\leq_{p} X)$ and since we know that $\\mbox{SAT}$ is $\\mbox{NP-complete}$, to show that $X$ is $\\mbox{NP-complete}$ is it necessary to show that $X\\in \\mbox{NP}$ via some third party algorithm?</p>\n</blockquote>\n\n<p>If yes, then why?</p>\n', 'Tags': '<complexity-theory><terminology><reductions><np>', 'LastEditorUserId': '683', 'LastActivityDate': '2013-02-06T14:52:09.737', 'CommentCount': '1', 'AcceptedAnswerId': '9520', 'CreationDate': '2013-02-05T12:34:42.987', 'Id': '9519'},282115:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '11016', 'Title': 'In basic terms, what is the definition of P, NP, NP-Complete, and NP-Hard?', 'LastEditDate': '2013-06-06T14:06:56.640', 'AnswerCount': '5', 'Score': '56', 'PostTypeId': '1', 'OwnerUserId': '6569', 'FavoriteCount': '54', 'Body': "<p>I'm in a course about computing and complexity, and am unable to understand what these terms mean. All I know is that np is a subset of np complete which is a subset of np hard... but I have no idea what they actually mean. Wikipedia isn't much help either as the explanations are still a bit too high level.</p>\n", 'Tags': '<complexity-theory><terminology><p-vs-np><reference-question>', 'LastEditorUserId': '6716', 'LastActivityDate': '2014-04-16T09:27:50.623', 'CommentCount': '4', 'AcceptedAnswerId': '9566', 'CreationDate': '2013-02-06T20:38:08.297', 'Id': '9556'},282116:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I know that maximum independent set on cubic triangle-free graphs is NP-complete. </p>\n\n<p>Is it still NP-complete in case we require the independent set to be of size exactly $|V|/2$?</p>\n\n<p>Basiclly, YES instance of independent set problem on cubic triangle-free graphs problem must have exactly $|V|/2$ nodes. NO instance has an independent set of size less than $|V|/2$.</p>\n', 'ViewCount': '128', 'Title': 'Independent set on cubic triangle-free graphs', 'LastEditorUserId': '96', 'LastActivityDate': '2013-02-08T04:43:21.480', 'LastEditDate': '2013-02-07T17:45:15.193', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '9588', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-02-07T12:16:43.410', 'Id': '9572'},282117:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let $\\mathcal{A}$ be a problem in $\\text{NP} \\cap \\text{co}$-$\\text{NP}$.</p>\n\n<p>Now assume we can reduce another problem $\\mathcal{B}$ to it using Cook reduction.</p>\n\n<p>What conclusions can we draw about $\\mathcal{B}$? Does this question even make sense?</p>\n\n<p>I'm asking because from what I understand Cook reductions differ from Karp reductions (for example, $\\text{NP}$ cannot be distinguished from $\\text{co}$-$\\text{NP}$).\nI'm pretty confused and can't seem to really understand the properties of Cook reductions. Any good reference about the topic would also be appreciated!</p>\n\n<p>I hope this question is not too basic, but I was not able to find anything about it. </p>\n", 'ViewCount': '156', 'Title': 'Problems that are Cook-reducible to a problem in NP $\\cap$ co-NP', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-08T08:30:35.880', 'LastEditDate': '2013-02-08T08:30:35.880', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '9592', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '691', 'Tags': '<complexity-theory><reductions><np>', 'CreationDate': '2013-02-08T03:11:17.540', 'Id': '9586'},282118:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Professor Tim Roughgarden from Stanford University while teaching a <a href="https://class.coursera.org/algo2-2012-001/class/index" rel="nofollow">MOOC</a> said that solutions to problems in the class NP must be polynomial in length. But the <a href="https://en.wikipedia.org/wiki/NP_%28complexity%29" rel="nofollow">wikipedia article</a> says that NP problems are decision problems. So what type of problems are basically in the class NP ? And is it unnecessary to say that solutions to such problems have a polynomial length output(as decision problems necessarily output either 0 or 1) ? </p>\n', 'ViewCount': '83', 'Title': 'Is it necessary for NP problems to be decision problems?', 'LastActivityDate': '2013-02-11T06:23:11.520', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '9665', 'Score': '3', 'OwnerDisplayName': 'user189535', 'PostTypeId': '1', 'OwnerUserId': '6823', 'Tags': '<algorithms><np><p-vs-np>', 'CreationDate': '2013-02-10T16:30:58.997', 'FavoriteCount': '2', 'Id': '9664'},282119:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've seen a reduction that's done by adding another vertex to the graph and creating a path through that vertex.</p>\n\n<p>Why do I need to add a vertex? Cant I just remove an edge? Lets say the graph with the HamCycle is G,s,t when removing the edge between s and t dont I get a path the goes through all the vertexes that's qualified as a Hamiltonian path?</p>\n", 'ViewCount': '169', 'Title': 'HamCycle to HamPath reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-11T12:21:48.907', 'LastEditDate': '2013-02-11T12:08:05.400', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '9672', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6821', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-02-11T10:46:12.443', 'Id': '9669'},282120:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>What does a pseudo-polynomial algorithm tell us about the problem it solves? I don't see how running time improves if the algorithm is exponential in the input length and polynomial in the input value; so how do we explain this shift from exponential to polynomial?</p>\n", 'ViewCount': '229', 'Title': 'Weak and strong completeness', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-24T03:24:29.867', 'LastEditDate': '2013-02-12T06:27:18.567', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<algorithms><complexity-theory><np-complete><pseudo-polynomial>', 'CreationDate': '2013-02-11T18:23:44.420', 'FavoriteCount': '1', 'Id': '9686'},282121:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am looking for a good survey/study of experimental results of heuristics for Knapsack problem (or implemented libraries in java/c++). Any help is appreciated!</p>\n', 'ViewCount': '92', 'Title': 'Experimental Survey on Different Heuristics for Knapsack Problem', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-14T06:38:43.647', 'LastEditDate': '2013-02-14T06:38:43.647', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6550', 'Tags': '<reference-request><np-complete><optimization><heuristics>', 'CreationDate': '2013-02-13T16:57:46.143', 'Id': '9747'},282122:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm having a very hard time understanding what's what.</p>\n\n<p>$$L_{1}\\leq_{p}L_{2}$$</p>\n\n<p>If $L_2$ is stated to be in $\\textbf{NP}$, is it necessarily true that $L_1$ is $\\textbf{NP}$-Complete? I need to show the following for an assignment, but I'm having a dispute with a fellow student because he claims that I can't claim that $L_1$ is $\\textbf{NP}$-Complete...</p>\n\n<blockquote>\n  <p>Suppose that $L_1\\leq_p L_2\\leq_p L_3$. Also suppose that $L_3$ is in $\\textbf{NP}$. Explain how to solve $L_1$ deterministically in exponential time.</p>\n</blockquote>\n\n<p>I say (and I could be wrong - and that's a strong possiblity since I have very little understanding of this material) that since $L_3$ is in $\\textbf{NP}$, $L_2$ also has to be in $\\textbf{NP}$, and so therefore $L_1$ has to be in $\\textbf{NP}$. And if that's the case, then $L_1$ can easily be converted to a deterministic algorithm through a breadth first search through the non-deterministic computation tree. Is there something I'm missing?</p>\n", 'ViewCount': '70', 'Title': 'Polynomial time reductions', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-14T06:34:11.407', 'LastEditDate': '2013-02-14T06:34:11.407', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9759', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6569', 'Tags': '<complexity-theory><terminology><np-complete><reductions>', 'CreationDate': '2013-02-14T02:24:22.693', 'Id': '9758'},282123:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '160', 'Title': 'Is the open question NP=co-NP the same as P=NP?', 'LastEditDate': '2013-02-15T07:34:14.460', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6569', 'FavoriteCount': '1', 'Body': "<p>I'm wondering this based on several places online that call $\\sf NP=$ co-$\\sf NP$ a major open problem... but I can't find any indication as to whether or not this is the same as $\\sf P=NP$ problem...</p>\n", 'Tags': '<complexity-theory><complexity-classes><p-vs-np>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-15T10:57:56.617', 'CommentCount': '0', 'AcceptedAnswerId': '9798', 'CreationDate': '2013-02-15T01:38:55.790', 'Id': '9795'},282124:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am interested if there exists a following version of the travelling salesman problem:</p>\n\n<blockquote>\n  <p>INSTANCE: A finite set $C = \\{1,2,\\dots,k\\}$ of cities, a positive integer distance $\\delta(i,j)$ for each pair of cities, and two positive integers $d$ and $B$.</p>\n  \n  <p>QUESTION: Is there a tour that visits every city in $C$, includes exactly $d$ detours, and has total length no more then $B$?  In other words, suppose $OPT$ is the optimal permutation of the cities; that is, $OPT(i)$ is the next city after city $i$ in an optimal traveling salesman tour.  Is there an ordering $x(0), \\dots, x(k-1)$ of the cities such that $$\\sum_{i=1}^{k} \\delta(x(i), x((i+1) \\bmod k)) \\leq B$$ and there are exactly $d$ indices $i$ where $x((i+1) \\bmod k) \\ne OPT(x(i))$?</p>\n</blockquote>\n\n<p>The $d$ implies that if my shortest tour is $a\\rightarrow b \\rightarrow c\\rightarrow a$ but $d=1$ then what would be the shortest path if I had to first go to $c$, $ a \\rightarrow c \\rightarrow ...$. So $d$ tells me that I have to make $d$ number of wrong choices but I can choose these choices in any way I want to to minimize the length of the path.</p>\n\n<p>Is this a problem worthwhile describing? Or if it has been described where could I see an example? </p>\n', 'ViewCount': '90', 'Title': 'Travelling salesman problem with detours', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:05:07.807', 'LastEditDate': '2013-06-06T15:05:07.807', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Tags': '<complexity-theory><graph-theory><np-hard><decision-problem><traveling-salesman>', 'CreationDate': '2013-02-15T10:58:21.960', 'Id': '9802'},282125:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have as an assignment question to show that $QuadSat=\\{\\langle\\phi\\rangle\\mid\\phi$ is a satisfiable 3CNF formula with at least 4 satisfying assignments$\\}$ is $\\sf NP$-Complete.</p>\n\n<p>My solution is as follows, which is pretty much copied almost 100% from a textbook example with only an extra requirement for satisfiablity at the end...</p>\n\n<blockquote>\n  <p>$$QuadSat\\leq_{p} Clique$$\n  Let $\\phi$ be a formula with k clauses such as\n  $$\\phi=\\bigwedge_{1}^{k}(a_k\\vee b_k\\vee c_k)$$\n  The reduction $f$ generates the strong $\\langle G,k\\rangle$, where $G$ is an undirected graph defined as follows:</p>\n  \n  <p>The nodes in $G$ are organized into $k$ groups of three nodes each called the \\textbf{triples}, $t_1, \\dots, t_k$. Each triple corresponds to one of the clauses in $\\phi$, and each node in a triple corresponds to a literal in the associated clause. Label each node of $G$ with its corresponding literal in $\\phi$.</p>\n  \n  <p>The edges of $G$ connect all but two types of pairs of nodes in $G$: No edge is present between nodes in the same triple, and no edge is present between two nodes with contradictory labels. $QuadSat$ is satisfiable if and only if the resulting graph $G$ contains four or more $k$-$cliques$. Each unique $k$-$clique$ in $G$ represents a set of satisfying assignments to $QuadSat$.</p>\n  \n  <p>The reduction runs in polynomial time, because the construction of the graph is a polynomial function; one pass through all the triples to create all the vertices for $V$, and one pass through the same triples to create the edges.</p>\n</blockquote>\n\n<p>I feel like my explanation as to why my reduction is polynomial in time is severely weak, possibly bordering on wrong. How can I explain this better?</p>\n\n<p>And something else: I think this only proves that QuadSat is in NP, but not necessarily NP Complete. How can I prove this?</p>\n', 'ViewCount': '117', 'Title': 'How do I explain that a polynomial time reduction is in fact polynomial time?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-16T14:39:23.387', 'LastEditDate': '2013-02-16T14:39:23.387', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '9812', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6569', 'Tags': '<complexity-theory><np-complete><reductions><proof-techniques>', 'CreationDate': '2013-02-15T13:50:38.367', 'Id': '9806'},282126:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '90', 'Title': 'Hardness of Approximating 0-1 Integer Programs', 'LastEditDate': '2013-02-18T05:51:25.817', 'AnswerCount': '1', 'Score': '8', 'OwnerDisplayName': 'Jonas Anderson', 'PostTypeId': '1', 'OwnerUserId': '1439', 'Body': '<p>Given a $0,1$ (binary) integer program of the form:\n$$\n\\begin{array}{lll}\n\\text{min} &amp; f(x) &amp; \\\\\n\\text{s.t.} &amp;A\\vec{x} = \\vec{b} &amp; \\quad \\forall i\\\\\n &amp;x_i\\ge 0 &amp; \\quad \\forall i\\\\\n&amp;x_i \\in \\{0,1\\} &amp; \\quad \\forall i\n\\end{array}\n$$</p>\n\n<p>Note: the size of $A$ is not fixed in either dimension.</p>\n\n<p>I believe this problem has been shown to be hard to approximate (strongly ${\\sf NP}$-Complete) <a href="http://dl.acm.org/citation.cfm?id=322090">Garey &amp; Johnson</a>. </p>\n\n<p>If so, is this still the case when $A$, $\\vec{b}$ have binary entries and $f(x)$ is a linear function ( $f(x) = \\sum_i c_i x_i$ )?</p>\n', 'Tags': '<complexity-theory><np-complete><approximation><integer-programming>', 'LastEditorUserId': '683', 'LastActivityDate': '2013-02-18T05:51:25.817', 'CommentCount': '2', 'AcceptedAnswerId': '9887', 'CreationDate': '2013-02-14T01:13:24.667', 'Id': '9810'},282127:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1022', 'Title': 'Are there subexponential-time algorithms for NP-complete problems?', 'LastEditDate': '2013-04-04T12:17:10.723', 'AnswerCount': '2', 'Score': '18', 'OwnerDisplayName': 'ksb', 'PostTypeId': '1', 'OwnerUserId': '3134', 'FavoriteCount': '3', 'Body': '<p>Are there NP-complete problems which have proven subexponential-time algorithms? </p>\n\n<p>I am asking for the general case inputs, I am not talking about tractable special cases here. </p>\n\n<p>By sub-exponential, I mean an order of growth above polynomials, but less than exponential, for example $n^{\\log n}$.</p>\n', 'Tags': '<complexity-theory><np-complete><np>', 'LastEditorUserId': '39', 'LastActivityDate': '2014-03-13T11:20:22.313', 'CommentCount': '1', 'AcceptedAnswerId': '9814', 'CreationDate': '2013-02-15T15:42:36.863', 'Id': '9813'},282128:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '250', 'Title': 'Showing that minimal vertex deletion to a bipartite graph is NP-complete', 'LastEditDate': '2013-02-18T00:25:04.840', 'AnswerCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '3092', 'FavoriteCount': '1', 'Body': '<p>Consider the following problem whose input instance is a simple graph $G$ and a natural integer $k$.</p>\n\n<blockquote>\n  <p>Is there a set $S \\subseteq V(G)$ such that $G - S$ is bipartite and $|S| \\leq k$?</p>\n</blockquote>\n\n<p>I would like to show that this problem is $\\rm{NP}$-complete by reducing either 3-SAT, $k$-CLIQUE, $k$-DOMINATING SET or $k$-VERTEX COVER to it.</p>\n\n<p>I believe I can reduce the 3-COLORING problem to it so I would only need to see how to reduce one of the mentioned problems to it.  But since that would be rather messy I am wondering if someone sees an elegant reduction to the aforementioned problems.</p>\n\n<p>Also, is there a name for this decision problem?</p>\n', 'Tags': '<complexity-theory><np-complete><reductions>', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-02-18T10:57:25.470', 'CommentCount': '5', 'AcceptedAnswerId': '9865', 'CreationDate': '2013-02-17T17:54:20.413', 'Id': '9863'},282129:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Are all algorithms which have polynomial time complexity belong to P class ? And P class do not have any algorithm which does have not polynomial complexity ? </p>\n\n<p>Are all algorithms which have non polynomial complexity belong to NP or NP-Hard or both ?</p>\n\n<p>I am just trying to understand the basic relationship.</p>\n', 'ViewCount': '157', 'ClosedDate': '2013-02-19T03:39:35.053', 'Title': 'The exact relation between complexity classes and algorithm complexities', 'LastActivityDate': '2013-02-19T00:36:46.637', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '9910', 'Score': '2', 'OwnerDisplayName': 'avi', 'PostTypeId': '1', 'OwnerUserId': '6665', 'Tags': '<complexity-classes><np><polynomial-time>', 'CreationDate': '2013-02-18T15:56:37.437', 'Id': '9909'},282130:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to know whether the 2-DNF problem is NP-complete or not? If it is NP-complete, can anyone provide a proof?</p>\n', 'ViewCount': '256', 'Title': 'Is 2-DNF NP-complete?', 'LastEditorUserId': '10228', 'LastActivityDate': '2013-11-07T13:27:21.760', 'LastEditDate': '2013-11-07T13:27:21.760', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'OwnerDisplayName': 'user13821', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'CreationDate': '2013-02-19T07:28:39.307', 'Id': '9927'},282131:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>In 2009 Doron has published a paper stating "Using 3000 hours of CPU time on a CRAY machine, we settle the notorious P vs. NP problem in the affirmative, by presenting a \u201cpolynomial\u201d time algorithm for the NP-complete subset sum problem.". I\'ve been looking for other people\'s opinions on this but I haven\'t found anything significant. Has this problem been officially settled? is this a correct solution? I am not able to assess the paper because of my limited knowledge. What do you guys think ?</p>\n\n<p>Paper : <a href="http://www.math.rutgers.edu/~zeilberg/mamarim/mamarimPDF/pnp.pdf">http://www.math.rutgers.edu/~zeilberg/mamarim/mamarimPDF/pnp.pdf</a></p>\n', 'ViewCount': '262', 'Title': "Doron ZEILBERGER's P = NP computer proof", 'LastActivityDate': '2013-02-20T19:03:40.157', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '9953', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4365', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-02-20T04:59:33.830', 'Id': '9952'},282132:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '431', 'Title': 'Is there an efficient test for if an NFA accepts a subset of another NFA?', 'LastEditDate': '2014-04-03T11:58:31.807', 'AnswerCount': '3', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2253', 'FavoriteCount': '3', 'Body': "<p>So, I know that testing if a regular language $R$ is a subset of regular language $S$ is decidable, since we can convert them both to DFAs, compute $R \\cap \\bar{S}$, and then test if this language is empty.</p>\n\n<p>However, since this requires converting to DFAs, it's possible that the DFAs, and thus the testing algorithm, will be exponential in terms of the number of states in the input NFAs.</p>\n\n<p>Is there a known way to do this in polynomial time? Has this problem in general been proved Co-NP complete? </p>\n\n<p>Note that the problem is in Co-NP since a word accepted by $R$ but not by $S$ would be a polynomial certifier that $R \\not \\subseteq S $.</p>\n\n<p>EDIT: this is incorrect, as there is no guarantee that such a word would be polynomial in the number of states.</p>\n", 'Tags': '<algorithms><regular-languages><automata><np-complete><decision-problem>', 'LastEditorUserId': '15050', 'LastActivityDate': '2014-04-03T11:58:31.807', 'CommentCount': '5', 'AcceptedAnswerId': '9955', 'CreationDate': '2013-02-20T06:11:51.547', 'Id': '9954'},282133:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '157', 'Title': 'Why is MAX-2SAT in NP?', 'LastEditDate': '2013-02-26T07:47:05.793', 'AnswerCount': '1', 'Score': '2', 'OwnerDisplayName': 'simplicity', 'PostTypeId': '1', 'FavoriteCount': '1', 'Body': "<blockquote>\n  <p>Max-2-SAT is defined as follows. We are given a 2-CNF formula and a\n  bound k, and asked to find an assignment to the variables that\n  satisfies at least k of the clauses.</p>\n</blockquote>\n\n<p>I can understand the trick used to prove 2-SAT is in P. You use get a contradiction by using unit propagation. But, I was wondering why does MAX 2-SAT escape this.</p>\n\n<p>Also, I find it hard to believe this is NP-complete. Certainly, what is the problem that causes it to blow up.</p>\n\n<p>Why wouldn't an algorithm like this work. Given a 2-SAT expression. Find it's length, which we can do in P. Need to check if there is at least k of the clauses.</p>\n\n<p>So we just check $\\binom n k$ posibilities and run like Horn algorithm on each sub expression of the n 2-SAT expression. Surely, where is the problem as we are just running a P algorithm a polynomial amount of time. </p>\n\n<p>So I'm very confused. Sort of similar problem I have factorization and if that is in P or NP. </p>\n", 'Tags': '<complexity-theory><np-complete><satisfiability>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-26T07:47:05.793', 'CommentCount': '2', 'AcceptedAnswerId': '10099', 'CreationDate': '2013-02-23T11:09:50.640', 'Id': '10098'},282134:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a undirected graph with no edge costs. A subset of the nodes are labeled $c_1, c_2, ..., c_k$ and one node is labeled $K$. I want to find the minimum cut of the graph with the extra condition that all nodes $c_i$ are in the same half of the cut and the node K is in the other cut.</p>\n\n<p>My idea was to begin by doing a BFS from $K$ to all nodes $c_i$, saving predecessors and then finding all paths from $K$ to a node $c_i$ and finally picking the minimum set of edges from the paths so that at least one edge from each path was chosen. Unfortunately, if I understand this correctly, this is equivalent to the NP-complete <a href="http://en.wikipedia.org/wiki/Set_cover_problem" rel="nofollow">set cover problem</a>.</p>\n\n<p>Is there  anything sane with this approach? Do you have any hints to push me in the right direction?</p>\n\n<p>Note: this is homework so I\'d rather have some hints than a full solution.</p>\n', 'ViewCount': '87', 'Title': 'min-cut with extra condition', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-06T12:10:21.790', 'LastEditDate': '2013-03-05T07:03:20.143', 'AnswerCount': '1', 'CommentCount': '13', 'AcceptedAnswerId': '10316', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7139', 'Tags': '<algorithms><complexity-theory><np-complete>', 'CreationDate': '2013-03-04T10:58:21.523', 'Id': '10255'},282135:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am currently confused by the following situation: </p>\n\n<p>1) The metric $k$-center problem is inapproximable in polynomial time within $2-\\epsilon$ unless $P=NP$. <br>\n2) The metric $k$-center problem can approximated within $1+\\epsilon$ in time $O(k^{O(k/ \\epsilon)})$</p>\n\n<p>Did I just win a million dollars or why isn\'t this a contradiction?\nI guess my confusion comes from the unprecise statement  "in polynomial time" in 1).</p>\n', 'ViewCount': '151', 'Title': '$1+\\epsilon$ approximation for inapproximable problems', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:15:42.897', 'LastEditDate': '2013-05-10T12:15:42.897', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '10302', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7159', 'Tags': '<complexity-theory><np-complete><approximation><p-vs-np><parametrized-complexity>', 'CreationDate': '2013-03-05T19:27:39.220', 'Id': '10300'},282136:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following variant of the FACTORING problem (given N,M decide whether N has a prime factor less than M):</p>\n\n<blockquote>\nMULTIPLE-FACTORING: Given three integers $1 \\leq K \\leq M \\leq N$ decide if there are at least $K$ prime factors of $N$ less than $M$\n</blockquote>\n\n<p>FACTORING $\\leq_m$ MULTIPLE-FACTORING (just pick $K=1$) and</p>\n\n<p>MULTIPLE-FACTORING $\\leq_T$ FACTORING (find all factors of $N$ using FACTORING, and count if their number is $\\geq K$)</p>\n\n<p>But is MULTIPLE-FACTORING many one reducible to FACTORING?<br>\n(MULTIPLE-FACTORING $\\leq_m^?$ FACTORING)</p>\n', 'ViewCount': '62', 'Title': 'Karp reduction between FACTORING and a variant of it', 'LastEditorUserId': '140', 'LastActivityDate': '2013-03-11T07:46:28.627', 'LastEditDate': '2013-03-11T07:46:28.627', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '140', 'Tags': '<complexity-theory><reductions><factoring><np>', 'CreationDate': '2013-03-11T00:00:51.463', 'FavoriteCount': '1', 'Id': '10441'},282137:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1328', 'Title': 'Flaw in my NP = CoNP Proof?', 'LastEditDate': '2013-03-13T14:36:43.313', 'AnswerCount': '3', 'Score': '6', 'OwnerDisplayName': 'simpleton', 'PostTypeId': '1', 'OwnerUserId': '7253', 'FavoriteCount': '1', 'Body': '<p>I have this very simple "proof" for NP = CoNP and I think I did something wrongly somewhere, but I cannot find what is wrong. Can someone help me out?</p>\n\n<p>Let A be some problem in NP, and let M be the decider for A. Let B be the complement, i.e. B is in CoNP. Since M is a decider, you can use it to decide B as well (just flip the answer). Doesn\'t that mean that we solve both NP and CoNP problems with the same M?</p>\n\n<p>To put it more concretely.</p>\n\n<p>Let A be some NP-complete problem, and let M be decider for A. Consider any problem B in CoNP. We consider its complement not-B, which is in NP, and then get a polynomial reduction to A. Then we run our decider M and flip our answer. We thus obtain a decider for B. This implies B is in NP as well. </p>\n\n<p>May I know what is wrong with my reasoning?</p>\n', 'Tags': '<complexity-theory><p-vs-np><check-my-proof><np>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-13T14:36:43.313', 'CommentCount': '2', 'CreationDate': '2013-03-12T09:52:11.097', 'Id': '10485'},282138:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A decision problem is NP-complete if it is in NP and all other problems in NP can be reduced to it by a reduction that runs in polynomial time. Why it is important to require that the reduction runs in polynomial time, as opposed to accepting any computable reduction.</p>\n', 'ViewCount': '414', 'Title': 'NP-complete and polynomial time reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-15T11:05:07.020', 'LastEditDate': '2013-03-15T11:05:07.020', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'OwnerDisplayName': 'fudu', 'PostTypeId': '1', 'OwnerUserId': '7269', 'Tags': '<terminology><np-complete><reductions>', 'CreationDate': '2013-03-12T10:34:33.867', 'Id': '10488'},282139:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am wondering in general if it is correct to claim that <strong>if a special case of a problem is NP-Hard, the general case of that problem is NP-\nHard too?</strong></p>\n\n<p>For example: Min Set-Cover is NP-Hard does it imply without having to prove that Min Set-k-Cover where each element needs to be covered k times is NP-Hard too? </p>\n', 'ViewCount': '77', 'Title': 'Does hardness of a special case imply hardness of a general case?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-18T20:50:52.970', 'LastEditDate': '2013-03-14T07:39:17.577', 'AnswerCount': '3', 'CommentCount': '5', 'Score': '2', 'OwnerDisplayName': 'user14178', 'PostTypeId': '1', 'Tags': '<complexity-theory><terminology><np-hard>', 'CreationDate': '2013-03-13T14:11:38.093', 'Id': '10514'},282140:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '163', 'Title': 'A "natural" decidable problem not in $\\mathsf{NP}$?', 'LastEditDate': '2013-03-15T18:10:50.143', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2131', 'FavoriteCount': '1', 'Body': '<p>Are there any "natural" examples of decidable problems that are definitively known not to be in <strong>NP</strong>?  The decidable languages I know of that are not contained in <strong>NP</strong> are usually derived from the time hierarchy theorem, which produces "artificial" languages based on diagonalization.</p>\n', 'ClosedDate': '2013-03-17T18:04:57.407', 'Tags': '<np>', 'LastEditorUserId': '2152', 'LastActivityDate': '2013-03-19T14:09:22.943', 'CommentCount': '3', 'AcceptedAnswerId': '10540', 'CreationDate': '2013-03-15T18:06:03.050', 'Id': '10539'},282141:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Does the difficulty of a strongly NP-hard or NP-complete problem (as e.g. defined <a href="http://en.wikipedia.org/wiki/Strongly_NP-complete" rel="nofollow">here</a>) change when its input is unary instead of binary encoded?</p>\n\n<p>What difference does it make if the input of a strongly NP-hard problem is unary encoded? I mean, if I take for instance the weakly NP-complete Knapsack problem, it is NP-complete when binary encoded but can be solved in polynomial time by dynamic programming when unary encoded. Maybe it has some implications for hardness of higher levels of the polynomial time heirarchy?</p>\n\n<p>Does the notion of strongly ...-hard also hold for other complexity classes, e.g. higher classes of the polynomial time hierarchy?</p>\n\n<p>I previously asked this <a href="http://stackoverflow.com/q/15454532/1708806">question at stackoverflow.com</a> but it was pointed out that it is more appropriate here. </p>\n', 'ViewCount': '233', 'Title': 'Does the complexity of strongly NP-hard or -complete problems change when their input is unary encoded?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-17T18:18:32.653', 'LastEditDate': '2013-03-17T18:12:21.403', 'AnswerCount': '4', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<complexity-theory><time-complexity><np-complete>', 'CreationDate': '2013-03-16T22:59:58.783', 'Id': '10563'},282142:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>An undirected graph is a near clique if adding an additional edge would make it a clique. Formally, a graph $G = (V,E)$ contains a near clique of size $k$ where $k$ is a positive integer in $G$ if there exists $S \\subseteq V$ where $|S| = k$ and $u,v \\in S$ where $(u,v) \\not\\in E$, and $S$ forms a clique in $(V,E \\cup \\{(u,v)\\})$. How can I show finding a near clique of size $k$ in $G$ is NP-complete? </p>\n', 'ViewCount': '173', 'Title': 'Prove finding a near clique is NP-complete', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-17T18:21:40.813', 'LastEditDate': '2013-03-17T18:21:40.813', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '10583', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6723', 'Tags': '<complexity-theory><graph-theory><np-complete>', 'CreationDate': '2013-03-17T07:07:50.377', 'Id': '10573'},282143:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following problem. Given a $m \\times n$ integer matrix $A$ and a $p \\times q$ integer matrix $B$, do there exist one-to-one functions \n$$r:\\{1,2,...,m\\} \\rightarrow \\{1,2,...,p\\}$$\n$$c:\\{1,2,...,n\\} \\rightarrow \\{1,2,...,q\\}$$\nwhere for all $1 \\leq i \\leq m$ and $1 \\leq j \\leq n$, $A[i,j] \\leq B[r(i),c(j)]$? </p>\n\n<p>What is the best way to show this problem is NP-complete? I am currently considering reducing the clique problem to this problem.  </p>\n', 'ViewCount': '71', 'Title': 'Prove Matrix Correspondence is NP-complete', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-18T07:36:52.923', 'LastEditDate': '2013-03-18T07:36:52.923', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10596', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6723', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-03-18T02:57:18.987', 'Id': '10595'},282144:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '169', 'Title': 'How hard is a variant of Sudoku puzzle?', 'LastEditDate': '2013-03-21T02:23:06.343', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '96', 'FavoriteCount': '1', 'Body': '<p>Sudoku is well known puzzle which is known to be NP-complete and it is a special case of more general problem known as Latin squares. A correct solution of the $N \\times N$ square consists of filling every row and every column with numbers from $1$ to $N$ under the condition that every number appears exactly once in any row or any column.</p>\n\n<p>I define a new problem. The input is a correct solution of $N \\times N$ Sudoku puzzle (more generally Latin square problem). I would like to decide whether there is permutation of rows and permutation of columns such that no row and no column contains consecutive triples. </p>\n\n<p>An examples for a row without consecutive triple is 9 5 6 2 3 8 4 7 1. An example for a row with consecutive triple is 8 9 5 2 3 4 7 6 1. The triple is 2 3 4.</p>\n\n<p>I suspect the problem is NP-hard but I was not able to find a reduction.</p>\n\n<p>How hard is solving this variant of Sudoku puzzle? Is it NP-complete?</p>\n\n<p><strong>EDIT</strong> : To clarify, the same permutation must be applied to the columns and the rows.</p>\n', 'Tags': '<complexity-theory><np-complete>', 'LastEditorUserId': '96', 'LastActivityDate': '2013-03-21T03:50:34.153', 'CommentCount': '9', 'AcceptedAnswerId': '10671', 'CreationDate': '2013-03-20T13:41:08.940', 'Id': '10646'},282145:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Define the problem $W$:</p>\n\n<blockquote>\n  <p><strong>Input:</strong> A multi-set of numbers $S$, and a number $t$.</p>\n  \n  <p><strong>Question:</strong> What is the smallest subset $s \\subseteq S$ so that $\\sum_{k \\in s} k = t$, if there is one? (If not, return <code>none</code>.)</p>\n</blockquote>\n\n<p>I am trying to find some polytime equivalent decision problem $D$ and provide a polytime algorithm for the non-decision problem $W$ assuming the existence of a polytime algorithm for $D$.</p>\n\n<p>Here is my attempt at a related decision problem:</p>\n\n<blockquote>\n  <p>$\\mathrm{MIN\\text{-}W}$:</p>\n  \n  <p><strong>Input:</strong> A multi-set of numbers $S$, two numbers $t$ and $k$.</p>\n  \n  <p><strong>Question:</strong> Is there a subset $s \\subseteq S$ so that $\\sum_{k \\in s} k = t$ and $|s| \\leq k$?</p>\n</blockquote>\n\n<p>Proof of polytime equivalence:</p>\n\n<p>Assume $W \\in \\mathsf{P}$.</p>\n\n<pre><code>solveMIN-W(S, t, k):\n1. S = sort(S)\n2. Q = {}\n3. for i=1 to k:\n4.     Q.add(S_i)\n5.     res = solveW(Q, t)\n6.     if res != none and res = t: return Yes\n7. return No\n</code></pre>\n\n<p>I'm not sure about this algorithm though. Can anyone help please?</p>\n", 'ViewCount': '89', 'Title': 'How to prove polynomial time equivalence?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-22T13:44:52.263', 'LastEditDate': '2013-03-22T13:44:52.263', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '10692', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7168', 'Tags': '<complexity-theory><reductions><p-vs-np>', 'CreationDate': '2013-03-22T04:50:15.547', 'Id': '10690'},282146:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>So I\'m trying to understand P/NPC problems. The one I\'m trying to tackle now is subset sum (we have a collection of integers $S$ and a $k$ param: is there a subset of $S$ that sum of all it\'s elements is equal to $k$?) problem and the proof that ss is an NPC problem by reduction from 3SAT. </p>\n\n<p>I\'ve found two PDF\'s that attempt to solve that, but the problem is, I don\'t have the foggiest idea how to \'explain in in my own words\'. </p>\n\n<p>Okay, some links ahead and questions related to them: </p>\n\n<p><a href="http://people.clarkson.edu/~alexis/PCMI/Notes/lectureB07.pdf" rel="nofollow">Here</a>, on page 4th, there\'s a logic table for 3SAT clause that apparently proves why ss is NPC, but I don\'t get it - what exactly are those s and t values, and how does that table proves NPC\'ness? And how k is computed in that table? It\'s simply not clear to me :(</p>\n\n<p><a href="http://valis.cs.uiuc.edu/~sariel/teach/2004/b/webpage/lec/10_npc_notes.pdf" rel="nofollow">Another link</a>\non pages 5 and 6 there are another tables that appear out of nowhere with no explanation that I could understand.</p>\n\n<p>So, if anybody knows what I\'m talking about and could help me, please answer :). Or, if it\'s possible, can anybode give me a simple and straightforward proof why subset sum is NPC?</p>\n', 'ViewCount': '812', 'Title': 'Proving NP Completeness of a subset-sum problem - how?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-23T15:55:25.050', 'LastEditDate': '2013-03-23T15:55:25.050', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'user67311', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-03-18T16:01:15.190', 'Id': '10702'},282147:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '368', 'Title': 'How to prove NP-hardness of a longest-path problem?', 'LastEditDate': '2013-11-13T17:56:10.210', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7168', 'FavoriteCount': '1', 'Body': "<p>I have this question:</p>\n\n<pre><code>Input: \nG(V, E) = an undirected graph, V={v1, v2, ..., vn} (V = set of nodes, E = set of edges)\nwhere there is a path connecting from v1 to vn.\n\nQuestion: \nWhat is the maximum number of nodes you can visit when starting from v1 and ending at vn. \n(including v1 and vn) \nEach node can only be visited at most once.\n</code></pre>\n\n<p>I want to prove that this is NP-hard by reducing it from a known NP-complete problem, such as undirected Hamiltonian path or subset-sum.</p>\n\n<p>However I don't know exactly how to do this and this is where I need help.</p>\n\n<p>Can anyone help please?</p>\n", 'Tags': '<complexity-theory><reductions><proof-techniques><np-hard>', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-13T17:56:10.210', 'CommentCount': '1', 'AcceptedAnswerId': '10734', 'CreationDate': '2013-03-24T03:02:15.400', 'Id': '10732'},282148:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have this problem which is described as follows:</p>\n\n<p>Input:\n    You are given a multi-set $M$ (a set that can contain duplicates), and two numbers $P$ and $T$.\n    $M = {(x_1,y_1), (x_2,y_2), ..., (x_n,y_n)}$.\n    Each $x$ and $y$ is an integer $&gt;= 0$.\n    $P$ in an integer $&gt;= 0$.\n    $T$ is an integer $&gt; 0$.</p>\n\n<p>Question:\n    Is there a subset $G$ of $M$, such that the sum of every $x$ value of $G$ is $&gt; P$ and the sum of every $y$ value of $G$ is $&lt; T$?\n    (Note: You are basically taking from $M$. For example: if $M$ has two $(1,1)$'s then $G$ can contain at most two $(1, 1)$'s)</p>\n\n<p>I want to reduce it to from the subset sum problem, but I am not sure how because there's two conditions to solve for...</p>\n\n<p>Can anyone help with this problem?</p>\n", 'ViewCount': '144', 'Title': 'How to reduce from subset-sum problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-25T12:06:45.403', 'LastEditDate': '2013-03-25T12:06:45.403', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '10748', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7168', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-03-24T17:43:29.840', 'Id': '10747'},282149:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>There are many NP-complete decision problems that ask the question whether it holds for the optimal value that OPT=m (say bin packing asking whether all items of given sizes can fit into m bins of a given size).\nNow, I am interested in the problem whether OPT>m. Is this a decision problem or an optimization problem? It seems to be that it lies in NP (a NTM can guess a solution and it can be verified in polynomial time that the bound is met). Is it also NP-complete?</p>\n\n<p>I would have said yes, because having a polynomial algorithm, we could find a solution in polynomial time for the original problem (asking whether OPT=m) by using binary search and repeatedly using the polynomial algorithm to test if OPT larger than some bound.</p>\n\n<p>However when I try to construct a proper solution, I always see the complication that the oracle (that asks whether OPT>m') would need to be queried more than once, and this is forbidden in the polynomial time Karp reduction.</p>\n\n<p>Any solutions or remarks?\nWould it make a difference if I ask whether OPT>=m?</p>\n\n<p>Thanks in advance</p>\n", 'ViewCount': '136', 'Title': 'Polynomial time reductions using binary search', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-26T11:07:26.827', 'LastEditDate': '2013-03-25T15:20:47.793', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<complexity-theory><terminology><np-complete><optimization><decision-problem>', 'CreationDate': '2013-03-25T14:08:42.207', 'Id': '10774'},282150:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a problem where I am supposed to analyze the <code>Steiner tree problem</code> by doing the following 3 steps.</p>\n\n<p>1) Look up what the Steiner tree problem is.</p>\n\n<p>2) Find a polynomial time reduction to it from one of these 8 known NP-complete problems:</p>\n\n<ul>\n<li>3-col </li>\n<li>subset-sum </li>\n<li>clique </li>\n<li>hampath </li>\n<li>Uhampath </li>\n<li>sat </li>\n<li>3-sat </li>\n<li>vertex-cover.</li>\n</ul>\n\n<p>3) Prove that it is NP-complete.</p>\n\n<hr>\n\n<p>My first problem is that I don't understand what the Steiner tree problem is. I can't find the problem anywhere. Wikipedia has  a page on it, but doesn't really describe it in simple terms.</p>\n\n<p>Can anyone help me out on this, and also give me hints for number 1, 2 and 3?</p>\n", 'ViewCount': '202', 'Title': 'How to analyze the Steiner tree problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-26T11:23:15.850', 'LastEditDate': '2013-03-26T11:23:15.850', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7168', 'Tags': '<complexity-theory><graph-theory><np-complete><reductions><trees>', 'CreationDate': '2013-03-26T00:09:08.733', 'FavoriteCount': '2', 'Id': '10790'},282151:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/3-partition_problem" rel="nofollow">3-Partition</a> problem is $\\mathsf{NP}$-Complete in a strong sense meaning there is no pseudo-polynomial time algorithm for it unless $\\mathsf{P}=\\mathsf{NP}$. I\'m looking for the fastest known exact algorithm that solves 3-Partition. Is there a fast (e.g subexponential) algorithm for 3-Partition? Is it possible to solve it faster than using SAT solvers?</p>\n', 'ViewCount': '284', 'LastEditorDisplayName': 'user742', 'Title': 'Fastest known algorithm for 3-Partition problem', 'LastActivityDate': '2013-03-27T15:53:45.660', 'LastEditDate': '2013-03-27T15:53:45.660', 'AnswerCount': '0', 'CommentCount': '10', 'Score': '4', 'OwnerDisplayName': 'user742', 'PostTypeId': '1', 'Tags': '<algorithms><np-complete><partition-problem>', 'CreationDate': '2013-03-26T12:06:40.963', 'Id': '10805'},282152:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '296', 'Title': 'Subset Sum: reduce special to general case', 'LastEditDate': '2013-04-02T22:46:23.867', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '7549', 'FavoriteCount': '2', 'Body': '<p><a href="http://en.wikipedia.org/wiki/Subset_sum_problem">Wikipedia</a> states the subset sum problem as finding a subset of a given set of integers, whose sum is zero. Further it describes it as equivalent to finding a subset with sum $s$ for any given $s$.</p>\n\n<p>So I believe as they are equivalent, there must be a reduction in either side. The one from $s$ to zero is trivial by setting $s = 0$. But I had no luck finding a reduction from zero to $s$, i.e. given a set of integers $A$, construct a set of integers $B$ containing a subset with sum $s$ (for any $s$), if and only if there is as subset of $A$ with sum zero.</p>\n\n<p>Can you give me some pointers?</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '268', 'LastActivityDate': '2013-04-03T06:52:39.257', 'CommentCount': '0', 'AcceptedAnswerId': '10987', 'CreationDate': '2013-04-02T22:06:48.883', 'Id': '10981'},282153:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '357', 'Title': 'Do any decision problems exist outside NP and NP-Hard?', 'LastEditDate': '2013-04-04T07:16:45.770', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7572', 'FavoriteCount': '1', 'Body': '<p><a href="http://cs.stackexchange.com/questions/9063/np-hard-that-is-not-np-complete-and-not-undecidable">This question</a> asks about NP-hard problems that are not NP-complete. I\'m wondering if there exist any decision problems that are neither NP <em>nor</em> NP-hard.</p>\n\n<p>In order to be in NP, problems have to have a verifier that runs in polynomial time on a deterministic Turing machine. Obviously, all problems in P meet that criteria, but what about the problems with sub-exponential complexity? They do not belong to P and it\'s not obvious to me that they all have efficient deciders. And they certainly don\'t qualify for NP-complete.</p>\n\n<p>I\'m willing to believe that all decision problems are either NP or NP-hard or both, but nobody has actually <em>said</em> that (that I can find). I\'m also willing to believe that such problems do exist, even if they are very contrived. Maybe someone more knowledgeable can put this issue to rest for me. Thanks.</p>\n\n<p><strong>Edit</strong></p>\n\n<p>I abused the term \'subexponential\' in my question. In my mind it meant some problem with a complexity between exponential and polynomial like L-notation in <a href="http://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions" rel="nofollow">this table</a>. See the links in Raphael\'s answer for more details.</p>\n', 'Tags': '<complexity-theory><np-complete><np-hard><decision-problem><complexity-classes>', 'LastEditorUserId': '7572', 'LastActivityDate': '2013-04-04T13:33:02.737', 'CommentCount': '4', 'AcceptedAnswerId': '11012', 'CreationDate': '2013-04-04T04:53:18.070', 'Id': '11009'},282154:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>This question asks about a corner case of NP classes. From Wikipedia, NP is defined as:</p>\n\n<blockquote>\n  <p>the set of all decision problems for which the instances where the answer is "yes" have efficiently verifiable proofs of the fact that the answer is indeed "yes"</p>\n</blockquote>\n\n<p>NP-Hard is defined informally as the set of problems that are</p>\n\n<blockquote>\n  <p>at least as hard as the hardest problems in NP</p>\n</blockquote>\n\n<p>The hardest problems in NP are NP-complete, whose best known solutions run in exponential time. </p>\n\n<p>My question is, are there any decision problems that aren\'t as hard as NP-complete problems and do not have an efficient verifier?</p>\n\n<p>I know that it cannot be any problem in P, because P is entirely contained in NP. And it probably cannot have exponential complexity, because that would likely move it to NP-complete or NP-hard. I\'m thinking if such a problem exists, it would probably have to have sub-exponential complexity. Perhaps someone knows of a sub-exponential complexity problem that lacks an efficient verifiable proof. Either that or someone can tell me that it\'s been proven that there are no non-NP, non-NP-hard decision problems. Or that it hasn\'t been proven either way.</p>\n\n<p>Thanks.</p>\n', 'ViewCount': '43', 'ClosedDate': '2013-04-04T06:22:28.490', 'Title': 'Do any decision problems exist outside NP and NP-Hard?', 'LastActivityDate': '2013-04-04T05:36:04.593', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'OwnerDisplayName': 'Sebastian Goodman', 'PostTypeId': '1', 'OwnerUserId': '7572', 'Tags': '<np>', 'CreationDate': '2013-04-04T01:56:01.717', 'Id': '11011'},282155:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Prove if a oracle machine $K$ is given with $\\mathsf{P^k}=\\mathsf{NP}$ then $\\mathsf{NP}=\\mathsf{co\\text{-}NP}$.</p>\n\n<hr>\n\n<p>Lets assume that $\\mathsf{P^k}=\\mathsf{NP}$ then $\\mathsf{co\\text{-}P^k}=\\mathsf{co\\text{-}NP}$.  I am stuck here, I don't know how to prove this. Can someone help?</p>\n\n<p>I know that $\\mathsf{P}=\\mathsf{co\\text{-}P}$ but can I also say $\\mathsf{P^k}=\\mathsf{co\\text{-}P^k}$ or do I have to prove it ?</p>\n", 'ViewCount': '85', 'Title': 'Prove that if $\\mathsf{P^k}=\\mathsf{NP}$ then $\\mathsf{NP}=\\mathsf{co\\text{-}NP}$', 'LastEditorUserId': '472', 'LastActivityDate': '2013-04-06T04:17:56.190', 'LastEditDate': '2013-04-05T21:03:56.313', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '11071', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6672', 'Tags': '<complexity-theory><turing-machines><np>', 'CreationDate': '2013-04-05T20:59:08.920', 'Id': '11066'},282156:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>In the paper <a href="http://link.springer.com/content/pdf/10.1007/BF01300131">Complexity of the Frobenius Problem</a> by Ram\xedrez-Alfons\xedn, a problem was proved to be NP-complete using Turing reductions.\nIs that possible? How exactly? I thought this was only possible by a polynomial time many one reduction. Are there any references about this?</p>\n\n<p>Are there two different notions of NP-hardness, even NP-completeness? But then I am confused, because from a practical viewpoint, if I want to show that my problem is NP-hard, which do I use?</p>\n\n<p>They started the description as follows:</p>\n\n<blockquote>\n  <p>A  polynomial  time  Turing  reduction from  a problem $P_1$  to  another problem $P_2$  is  an  algorithm  A  which  solves  $P_1$  by  using  a  hypothetical  subroutine A\'  for  solving  $P_2$  such  that,  if  A\' were  a  polynomial  time  algorithm  for  $P_2$  then  A would  be  a  polynomial  time  algorithm  for  $P_1$.  We  say  that  $P_1$  can  be  Turing  reduced to  $P_2$. </p>\n  \n  <p>A  problem  $P_1$  is  called  (Turing)  NP-hard  if  there  is  an  NP-complete  decision \n  problem $P_2$  such  that  $P_2$  can  be  Turing  reduced  to  $P_1$.</p>\n</blockquote>\n\n<p>And then they use such a Turing reduction from an NP-complete problem to show NP-completeness of some other problem.</p>\n', 'ViewCount': '355', 'Title': 'Can one show NP-hardness by Turing reductions?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-08T14:48:09.817', 'LastEditDate': '2013-04-08T14:48:09.817', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<complexity-theory><time-complexity><np-complete><reductions>', 'CreationDate': '2013-04-08T00:05:59.537', 'FavoriteCount': '1', 'Id': '11120'},282157:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem which I suspect is NP-complete. It is easy to prove that it is NP. My current train of thought revolves around using a reduction from knapsack but it would result in instances of 0-1-Knapsack with the value of every item being equal to its weight.</p>\n\n<p>Is this still NP-complete? Or am I missing something?</p>\n', 'ViewCount': '367', 'Title': 'Is the 0-1 Knapsack problem where value equals weight NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-14T10:40:18.413', 'LastEditDate': '2013-04-14T10:40:18.413', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11245', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7139', 'Tags': '<complexity-theory><np-complete><decision-problem><packing>', 'CreationDate': '2013-04-11T22:41:16.210', 'Id': '11243'},282158:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In an exercise I have to show that minimizing a multivariate polynomial with $n$ variables over the hyper-cube $H = \\{ (x_1, \\ldots, x_n) : 0 \\leq x_i \\leq 1 \\}$ is NP-Hard. Formally, given $p(x_1, \\ldots, x_n)$ and $\\alpha$, does $\\min_{0 \\leq x_i \\leq 1} p(x_1, \\ldots, x_n) \\leq \\alpha$?</p>\n\n<p>My idea is to reduce it to MAX-SAT as follows. Suppose I am given the formula:</p>\n\n<p>$(x_1 \\vee \\overline{x_2} \\vee x_3) \\wedge (\\overline{x_1} \\vee \\overline{x_3}) \\wedge (\\overline{x_1} \\vee x_2 \\vee \\overline{x_3})$</p>\n\n<p>Then I consider:</p>\n\n<p>$p(y_1, y_2, y_3) = y_1 (1 - y_2) y_3 + (1 - y_1) (1 - y_3) + (1 - y_1) y_2 (1 - y_3)$</p>\n\n<p>If $p$ reaches a minimum at a corner of $H$ then the assignment:\n$$x_i = \\textit{true} \\ \\text{if} \\ y_i = 0 \\ \\text{and} \\ x_i = \\textit{false} \\ \\text{if} \\ y_i = 1$$\nis a solution for MAX-SAT value for the corresponding formula and since MAX-SAT is NP-Hard we are done. However, how do I proceed if $p$ reaches its minimum at an interior point? Or is it the case that it will always be a corner?</p>\n', 'ViewCount': '118', 'Title': 'Minimizing a multivariate polynomial over the hyper-cube is NP-Hard', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-12T03:01:45.210', 'LastEditDate': '2013-04-11T23:39:17.320', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'OwnerDisplayName': 'fran.aubry', 'PostTypeId': '1', 'OwnerUserId': '7697', 'Tags': '<complexity-theory><reductions><optimization><np-hard>', 'CreationDate': '2013-04-11T15:42:38.420', 'Id': '11246'},282159:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '211', 'Title': 'Is Hidoku NP complete?', 'LastEditDate': '2013-05-06T22:36:24.267', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '7549', 'FavoriteCount': '2', 'Body': u'<p>A Hidoku is a $n \\times n$ grid with some pre-filled integers from 1 to $n^2$. The goal is to find a path of successive integers (from 1 to $n^2$) in the grid. More concrete, each cell of the grid must contain a different integer from 1 to $n^2$ and each cell with value $z \u2260 n^{2}$ must have a neighbor cell with value $z + 1$ (can also be diagonally).</p>\n\n<p>Is it NP hard to decide whether a given Hidoku is solvable? What reduction could be used?</p>\n\n<p>Edit: according to the comments, I give a little clarification. Given is a grid of cells, some of them already contain values (integers from 1 to n\xb2). We must fill all remaining cells with integers from 1 to $n^2$, such that no two cells have the same value and that every cell with value $z \u2260 n\xb2$ has a neighbor with value $z + 1$. That is, after filling out the cells, we must find the path $1, 2, 3,\\cdots, n^2$. In the grid, which logically visits each cell.</p>\n\n<p>An example of a Hidoku woud be <a href="http://www.janko.at/Raetsel/Hidoku/018.c.gif" rel="nofollow">http://www.janko.at/Raetsel/Hidoku/018.c.gif</a>.\nAn already solved Hidoku is <a href="http://diepresse.com/images/uploads/3/f/7/586743/spectrumsommerraetsel_7august_hidoku_schwer_loesung20100810172340.gif" rel="nofollow">http://diepresse.com/images/uploads/3/f/7/586743/spectrumsommerraetsel_7august_hidoku_schwer_loesung20100810172340.gif</a>, where you can see the path I was refering to.</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-06T22:36:24.267', 'CommentCount': '8', 'AcceptedAnswerId': '11336', 'CreationDate': '2013-04-15T12:51:57.417', 'Id': '11330'},282160:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>In a directed graph, the indegree of a node is the number of incoming edges and\nthe outdegree is the number of outgoing edges. Show that the following problem\nis NP-complete. Given an undirected graph G and a designated subset C of G\u2019s\nnodes, is it possible to convert G to a directed graph by assigning directions to each\nof its edges so that every node in C has indegree 0 or outdegree 0, and every other\nnode in G has indegree at least 1?</p>\n\n<p>I need an idea how to prove it</p>\n', 'ViewCount': '339', 'Title': 'Can the edges of a graph be assigned directions such that all nodes in a given subset have in- or outdegree 0, and every other node indegree > 0?', 'LastEditorUserId': '917', 'LastActivityDate': '2013-10-08T10:57:13.280', 'LastEditDate': '2013-10-08T10:57:13.280', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7783', 'Tags': '<complexity-theory><graph-theory><np-complete><np-hard>', 'CreationDate': '2013-04-19T06:22:19.890', 'FavoriteCount': '1', 'Id': '11398'},282161:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<blockquote>\n  <p>Meeting rooms on university campuses may or may not contain coffee machines. We would\n  like to ensure that every meeting room either has a coffee machine or is close enough to a\n  meeting room that does have a coffee machine. (For any two meeting rooms, the architect\n  has told us whether or not they are close enough.) Our problem is to determine among all the\n  meeting rooms of any university campus, which ones should have coffee machines so that we\n  use as few coffee machines as possible. Specify this problem as an optimization problem on a\n  graph. Formulate the corresponding Coffee-machine Decision Problem (abbreviated Coffee).\n  Prove that the Coffee Machine Decision Problem is NP-complete.</p>\n  \n  <p>Hint: You could use Vertex Cover. For every edge, add two more edges and one more vertex.</p>\n</blockquote>\n\n<p>I'm confused at the hint given and why this problem isn't just a straight reduction from Vertex Cover.  What's the point of adding two more edges and a vertex for every edge?</p>\n", 'ViewCount': '126', 'Title': 'How does the problem of having a coffee-machine close relate to vertex cover?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T15:23:25.990', 'LastEditDate': '2013-04-21T15:23:25.990', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7787', 'Tags': '<complexity-theory><np-complete><reductions><decision-problem>', 'CreationDate': '2013-04-19T09:11:08.353', 'Id': '11402'},282162:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In the set cover problem we want to find in the $\\mathbb{S} \\subset 2^\\mathbb{U}$ the subset $\\{s_i\\}_{1..k}$, such that $\\cup s_i = \\mathbb{U}$ for given $K$, where $k \\le K$.\nBut how to reduce the set cover problem to the set covering decision problem (determining whether is there such cover or not)? The same with problems like a TSP is always easy enough: we exclude some elements, check if the needed condition is still met and know already, are these elements needed or not. But it doesn't work here and I am stuck. I would be appreciated if you could give me some hints for this problem.</p>\n", 'ViewCount': '77', 'Title': 'Set cover problem and the existence of such cover', 'LastEditorUserId': '7785', 'LastActivityDate': '2013-04-19T10:15:45.540', 'LastEditDate': '2013-04-19T09:59:40.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11406', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7785', 'Tags': '<np-complete><reductions>', 'CreationDate': '2013-04-19T09:38:40.953', 'Id': '11403'},282163:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A set is sparse if it contains polynomially bounded number of strings of any given string length $n$ otherwise it is dense. All known NP-complete sets are dense. It was proven that P=NP if and only if there is a sparse NP-complete set (under Karp reduction).</p>\n\n<p>I would like to find the density of uniquely satisfiable 3SAT formulas. Is it super-polynomially dense or exponentially dense? What is known about the asymptotic lower bound on the number of 3SAT formulas with unique solutions?</p>\n', 'ViewCount': '84', 'Title': 'Asymptotic bounds on number of 3SAT formulas with unique solutions', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-01T23:30:50.850', 'LastEditDate': '2013-04-21T14:12:11.020', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11745', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><reference-request><np-complete><satisfiability>', 'CreationDate': '2013-04-19T12:56:38.680', 'Id': '11408'},282164:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p>Pebbling is a solitaire game played on an undirected graph $G$ , where\n  each vertex has zero or more pebbles. A single pebbling move consists\n  of removing two pebbles from a vertex $v$ and adding one pebble to an\n  arbitrary neighbor of $v$ . (Obviously, the vertex v must have at\n  least two pebbles before the move.) The PebbleDestruction problem\n  asks, given a graph $G = ( V; E )$ and a pebble count $p ( v )$ for\n  each vertex $v$ , whether there is a sequence of pebbling moves that\n  removes all but one pebble. Prove that PebbleDestruction is\n  NP-complete.</p>\n</blockquote>\n\n<p>First, I show that it is in NP since I can verify the solution in polynomial time, tracing back the pebble count from just one pebble.</p>\n\n<p>Next, what are some ideas on which problems to use as the basis for a polynomial-time reduction?</p>\n\n<p>Would something like vertex cover work? Or a vertex cover of different sizes? </p>\n\n<p>If so, how can it handle the varying number of pebbles on each move?</p>\n\n<p>Thank You.</p>\n\n<p>From: <a href="http://courses.engr.illinois.edu/cs473/sp2011/hw/disc/disc_14.pdf" rel="nofollow">http://courses.engr.illinois.edu/cs473/sp2011/hw/disc/disc_14.pdf</a></p>\n', 'ViewCount': '199', 'Title': 'Pebbling Problem', 'LastEditorUserId': '903', 'LastActivityDate': '2013-07-09T16:23:27.433', 'LastEditDate': '2013-05-01T01:25:01.613', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '7812', 'Tags': '<algorithms><graph-theory><np-complete>', 'CreationDate': '2013-04-20T21:30:03.620', 'FavoriteCount': '2', 'Id': '11443'},282165:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's say I have a decision problem  $P$ on graphs for which I know that it is NP-hard on graphs with maximum degree $d$. Does this then imply that it is NP-hard on $d$-regular graphs? Although it might seem obviously true, maybe it is inherent in the reduction to show that $P$ is hard, that some vertices have degree less than $d$.</p>\n", 'ViewCount': '71', 'Title': 'NP hardness through Restriction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T14:43:50.053', 'LastEditDate': '2013-04-21T14:43:50.053', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11456', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7816', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-04-21T02:47:17.720', 'Id': '11453'},282166:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '66', 'Title': 'Prove NP-completeness of deciding whether there is an edge-tour of at most a given length', 'LastEditDate': '2013-04-21T15:43:16.887', 'AnswerCount': '1', 'Score': '1', 'OwnerDisplayName': 'Mariska', 'PostTypeId': '1', 'OwnerUserId': '7799', 'Body': "<p>We are given a graph G, integer b &lt; |E|, and subset F in E. The problem is to detect whether there is a cycle in the graph with length at most b and includes each edge in F. Prove that this is NP Complete. </p>\n\n<p>I'm thinking of reducing from Hamiltonian Path, but still can't think of the appropriate transformation function. </p>\n", 'Tags': '<complexity-theory><np-complete><reductions>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T15:43:16.887', 'CommentCount': '1', 'AcceptedAnswerId': '11464', 'CreationDate': '2013-04-21T13:16:30.233', 'Id': '11463'},282167:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can you help me with this problem ?</p>\n\n<blockquote>\n  <p>Given an undirected graph $G$ and an integer $n$, prove that determining whether the graph has wheel on $n$ vertices $W_{n}$ (a wheel $W_{i}$ is such that $i$ nodes form a cycle and a $i+1$st node is connected to all other nodes, resulting in $2i$ edges) is NP-complete.</p>\n</blockquote>\n', 'ViewCount': '187', 'Title': 'Proving that finding wheel subgraphs is NP-complete', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-24T06:56:08.333', 'LastEditDate': '2013-04-24T06:50:24.760', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '11508', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Tags': '<complexity-theory><graphs><np-complete>', 'CreationDate': '2013-04-23T01:42:26.310', 'Id': '11505'},282168:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a question, i was trying to reduce 3-SAT to a particular graph problem and i'm not quite sure about a thing i used in the reduction.\nIn fact the reduction build a bipartite graph, the edge $(x_1,c_1)$ exist if the variable $x_1$ is in the clause number 1, the costs on that edge are dependent on the truthfulness of the variable $x_1$, cost 1 if $x_1$ is true and 0 elsewhere. My question :is it permitted in a reduction or should i have the entire graph instance independent from values taken by the variables ?</p>\n\n<p>Thank you all!</p>\n", 'ViewCount': '110', 'Title': 'Reduction from 3-SAT to a graphe problem', 'LastEditorUserId': '7934', 'LastActivityDate': '2013-04-28T00:16:23.053', 'LastEditDate': '2013-04-28T00:16:23.053', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '11544', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7880', 'Tags': '<complexity-theory><graphs><np-complete><reductions><3-sat>', 'CreationDate': '2013-04-24T22:56:55.940', 'Id': '11541'},282169:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '451', 'Title': 'Prove NP-completeness of deciding satisfiability of monotone boolean formula', 'LastEditDate': '2013-04-26T09:54:06.637', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7901', 'FavoriteCount': '1', 'Body': "<p>I am trying to solve this problem and I am really struggling.</p>\n\n<p>A <em>monotone boolean formula</em> is a formula in propositional logic where all the literals are positive. For example, </p>\n\n<p>$\\qquad (x_1 \\lor x_2) \\land (x_1 \\lor x_3) \\land (x_3 \\lor x_4 \\lor x_5)$ </p>\n\n<p>is a monotone boolean function. On the other hand, something like</p>\n\n<p>$\\qquad (x_1 \\lor x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_3) \\land (\\neg x_1 \\lor x_5)$ </p>\n\n<p>is not a monotone boolean function.</p>\n\n<p>How can I prove NP-completeness for this problem: </p>\n\n<blockquote>\n  <p>Determine whether a monotone boolean function is satisfiable if $k$ variables or fewer are set to $1$? </p>\n</blockquote>\n\n<p>Clearly, all the variables could just be set to be positive, and that's trivial, so that is why there is the restraint of $k$ positively set variables.</p>\n\n<p>I have tried a reduction from SAT to monotone boolean formula. One thing I have tried is to substitute a dummy variable in for every negative literal. For example, I tried replacing $\\neg x_1$ with $z_1$, and then I tried forcing $x_1$ and $z_1$ to be different values. I haven't quite been able to get this to work though.</p>\n", 'Tags': '<complexity-theory><np-complete><satisfiability>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-26T09:54:06.637', 'CommentCount': '1', 'AcceptedAnswerId': '11559', 'CreationDate': '2013-04-25T23:58:57.687', 'Id': '11558'},282170:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose you are given a polynomial-time algorithm for the following problem related to INDEPENDENT SET:</p>\n\n<p>INDEPENDENT SET VALUE</p>\n\n<p>Input: An undirected graph G.</p>\n\n<p>Output:The size of the largest independent set in G (but not the set itself).</p>\n\n<p>Show how you can use this algorithm to solve the INDEPENDENT SET problem in polynomial time: given a graph G, return an independent set which is as large as possible.</p>\n\n<p>Any help would be really appreciated. I am pretty lost in this question</p>\n', 'ViewCount': '132', 'Title': 'How to reduce INDEPENDENT SET to INDEPENDENT SET SIZE?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-26T09:48:23.050', 'LastEditDate': '2013-04-26T09:48:23.050', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7909', 'Tags': '<complexity-theory><graph-theory><np-complete><reductions>', 'CreationDate': '2013-04-26T08:16:10.927', 'FavoriteCount': '1', 'Id': '11570'},282171:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's say I have an optimization problem called $k$-foo which asks for a solution of size $k$ minimizing some quality criterion.</p>\n\n<p>Now the corresponding decision problem $foo(M)$ would be: <br> Is there a solution to foo with quality at least $M$ of size $k$.</p>\n\n<p>For problems on one parameter (for example vertex cover) it is obvious that solving the optimization problem sovles the decision problem.</p>\n\n<p>But here I do not see such a correspondance between the $k$-foo optimization problem and the $foo(M)$ decision problem. How does for example showing that $foo(M)$ is NP-hard implies that $k$-foo is NP-hard?</p>\n\n<p>The $k$-center problem is an example of such a problem where the decision version takes the radius as input and asks wether a solution of size $k$ exists.  </p>\n", 'ViewCount': '80', 'Title': 'Decision vs Optimization version for Problems of two Parameters', 'LastEditorUserId': '7921', 'LastActivityDate': '2013-04-26T23:12:46.047', 'LastEditDate': '2013-04-26T23:12:46.047', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7921', 'Tags': '<reductions><optimization><np-hard><decision-problem>', 'CreationDate': '2013-04-26T22:04:14.953', 'FavoriteCount': '1', 'Id': '11589'},282172:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to determine which complexity class this problem belongs to:</p>\n\n<blockquote>\n  <p>Given a graph $G(V, E)$, two vertices $u$ and $v$ and a natural number $k$, does a path of length $k$ exist between thesee two vertices?</p>\n</blockquote>\n\n<p>How can I approach this problem to solve it?</p>\n', 'ViewCount': '131', 'Title': 'k-path problem - P, NP or NPC?', 'LastEditorUserId': '903', 'LastActivityDate': '2013-05-31T17:08:03.723', 'LastEditDate': '2013-05-01T01:25:11.237', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7981', 'Tags': '<complexity-theory><graph-theory><np-complete><np>', 'CreationDate': '2013-04-30T18:55:29.343', 'Id': '11680'},282173:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Say $\\ell: \\{0,1\\}^\\ast \\to \\{0,1\\}^\\ast$ is a one-to-one polynomial-time computable function that preserves length. Consider the language $$L = \\Bigl\\{v \\;\\Big|\\; \\exists u: \\bigl(u_1 = 1 ~~\\text{and}~~ \\ell(u) = v\\bigr) \\Bigr\\}.$$ How do I prove that $L$ is in $\\mathsf{NP} \\cap \\mathsf{coNP}$? Basically, what would appropriate witnesses for $L$ in $\\mathsf{NP}$ and $\\mathsf{coNP}$ be?</p>\n', 'ViewCount': '95', 'Title': 'Show that this language is in NP $\\cap$ coNP', 'LastEditorUserId': '2152', 'LastActivityDate': '2013-05-01T17:23:31.807', 'LastEditDate': '2013-05-01T17:17:15.503', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '11706', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8000', 'Tags': '<np-hard><np>', 'CreationDate': '2013-05-01T14:47:36.223', 'Id': '11696'},282174:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Question: If $H = \\{(G,m)$ $|$ $G$ is a graph with $m$ distinct Hamiltonian cycles $\\}$ ($m$ is in binary), prove that $H \\in$ polynomial space.</p>\n\n<p>My thoughts: I thought that I could show that $H \\in NP$, by which it would automatically follow that $H \\in$ polynomial space. By the witness theorem, the $m$ distinct Hamiltonian cycles (call them the set $C$) would serve as a witness. However, what is not apparent is if $|C| \\leq |G|^k$. In fact, that is the entire problem, isn't it? What am I thinking about wrong over here?</p>\n", 'ViewCount': '50', 'Title': 'Finding Hamiltonian cycles in polynomial space', 'LastActivityDate': '2013-05-01T16:48:02.180', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8000', 'Tags': '<graph-theory><np>', 'CreationDate': '2013-05-01T16:22:53.083', 'Id': '11698'},282175:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I read somewhere that 3SAT can be used to solve Integer Factorization.</p>\n\n<p>If that is true, could someone teach me a simple example of generating the 3SAT by using a small number? Let's say you are given the number 6, then the factors are 2 and 3.</p>\n", 'ViewCount': '206', 'Title': 'Generating 3SAT circuit for Integer factorization example', 'LastActivityDate': '2013-05-02T11:11:58.450', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11727', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8006', 'Tags': '<np-hard><factoring><3-sat>', 'CreationDate': '2013-05-02T06:11:30.077', 'FavoriteCount': '3', 'Id': '11718'},282176:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How should I show that ${\\sf P}$ is contained in ${\\sf NP} \\cap {\\sf CoNP}$?</p>\n\n<p>I.e., all polynomial time solvable problems and their complements are verifiable in polynomial time.</p>\n', 'ViewCount': '205', 'Title': u'P is contained in NP \u2229 Co-NP?', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-05-21T16:58:00.003', 'LastEditDate': '2013-05-21T16:58:00.003', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'user15870', 'PostTypeId': '1', 'Tags': '<complexity-theory><np><polynomial-time>', 'CreationDate': '2013-05-02T08:25:55.583', 'Id': '11725'},282177:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to reduce $MAX3SAT$ to $MAX2SAT$ ...<br>\nMAX-n-SAT : given $\\phi $ n-CNF formula and number k does $\\phi$ has an assignment that satisfy k clauses? </p>\n', 'ViewCount': '62', 'Title': 'reducing Max3SAT to Max2sat', 'LastActivityDate': '2013-05-02T21:51:27.307', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11742', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7934', 'Tags': '<algorithms><np-complete><reductions><approximation>', 'CreationDate': '2013-05-02T20:59:20.690', 'Id': '11739'},282178:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have seen some problems that are NP-hard but polynomially solvable in fixed dimension.</p>\n\n<p>Examples, I think, are Knapsack that is polynomial time solvable if the number of items is fixed and Integer Linear Programming with fixed number of variables or constraints by Lenstras result.</p>\n\n<p>Questions:</p>\n\n<p>What are other examples of NP-hard problems that become polynomial time solvable if the dimension is fixed?</p>\n\n<p>Are there problems for which this is not the case?</p>\n\n<p>Is this always the case for problems that admit an FPTAS/pseudo-polynomial time algorithm such as Knapsack?</p>\n', 'ViewCount': '441', 'Title': 'NP complete problems that are solvable in polynomial time if the input (e.g. number of variables) is fixed?', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:17:04.700', 'LastEditDate': '2013-05-10T12:17:04.700', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11762', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<np-complete><optimization><decision-problem><linear-programming><parametrized-complexity>', 'CreationDate': '2013-05-03T15:30:53.200', 'Id': '11761'},282179:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>If we have polynomial algorithm that $c$-approximation, $c&lt;\\frac{4}{3}$ for graphs that their chromatic number $\\geq k$ then $NP=P$, how to prove such statements?</p>\n\n<p>I also have some sort of explanation of this statement: It's NP-hard to separate between graphs that have chromatic number $k$ and chromatic number $c \\cdot k$ when $c&lt;\\frac{4}{3} \\quad \\forall k\\geq 3$ </p>\n", 'ViewCount': '80', 'Title': 'Hardness of approximation of the 3 colorability problem', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-05-09T01:58:07.277', 'LastEditDate': '2013-05-09T01:58:07.277', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11769', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7934', 'Tags': '<algorithms><np-hard><approximation>', 'CreationDate': '2013-05-03T22:19:10.063', 'Id': '11766'},282180:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Modification of vertex cover problem.<br>\nGiven a graph G,does G have a vertex cover with 10 vertices? Is this problem still in NP?<br>\nGiven a graph G and integer k, does G have a vertex cover with k vertices?<br>\nIs there any important difference between this two problems? </p>\n', 'ViewCount': '56', 'Title': 'Vertex Cover problem modification', 'LastEditorUserId': '8072', 'LastActivityDate': '2013-05-07T19:56:29.067', 'LastEditDate': '2013-05-07T19:02:16.443', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11861', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8072', 'Tags': '<graph-theory><np>', 'CreationDate': '2013-05-07T18:57:10.810', 'Id': '11860'},282181:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Assume there exists some algorithm that solves vertex cover problem in time polynomial in terms of $n$ and exponential for $k$ with the run time that looks like this $O(k^2 55^k n^3)$. Can we claim that independent set can also be solved in time polynomial in terms of $n$ and exponential in terms of $k$ ? ($k$ here stands for the minimum size of an independent set) </p>\n', 'ViewCount': '831', 'Title': 'Reduction from Vertex Cover to an Independent Set problem', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:12:20.603', 'LastEditDate': '2013-05-10T12:12:20.603', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11905', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Tags': '<graphs><np-complete><np><p-vs-np><parametrized-complexity>', 'CreationDate': '2013-05-08T23:39:30.063', 'Id': '11904'},282182:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '285', 'Title': 'Reducing from Hamiltonian Cycle problem to the Graph Wheel problem', 'LastEditDate': '2013-05-10T18:21:49.337', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Body': '<p>EDIT: This question is different from the other in a sense that unlike it this one goes into specifics and is intended to solve the problem. In the previous post, the only answer was a hint. In this post, the answer is a proper solution. </p>\n\n<p>Is there a way to "polynomialy" reduce the problem of finding graph wheel $W_{n}$ to the problem of detecting Hamiltonian Cycle \n(or vice versa) ? The ultimate goal is to show that finding $W_n$ is NP-complete problem. So far I can show that the problem is in NP. To show that I claim that given an input of graph it is possible in polynomial time to check every vertex and to make sure that it has three edges(except the hub): one goes to the hub, one goes to the next vertex and one to the previous vertex. By checking every vertex in this fashion one can make sure the "ticket" indeed represents $W_{n}$.</p>\n\n<p>As far as converting from the Hamiltonian Cycle problem to the problem of fining $W_n$ goes I have encountered that $W_n$ has many Hamiltonian cycles inside it.It is easy to see if one imagines a wheel with  a hub and bunch of spokes. Every triangle created by the spokes forms a Hamiltonian cycle as well as any other "closed loop" formed inside a given $W_{n}$. </p>\n\n<p>The intriguing part is the fact that only one vertex is in "the way" and that vertex is the hub. Is the hub of the wheel main culprit in figuring out the conversion ?</p>\n', 'ClosedDate': '2013-05-10T09:37:44.963', 'Tags': '<graph-theory><np-complete>', 'LastEditorUserId': '7336', 'LastActivityDate': '2013-05-10T21:34:34.490', 'CommentCount': '1', 'AcceptedAnswerId': '11917', 'CreationDate': '2013-05-09T16:52:55.897', 'Id': '11915'},282183:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '153', 'Title': 'Wheel subgraph problem', 'LastEditDate': '2013-05-11T11:16:56.337', 'AnswerCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '7336', 'FavoriteCount': '0', 'Body': '<p>In the following two threads I specified the question in the wrong way (easier to solve that way). \n<a href="http://cs.stackexchange.com/questions/11505/proving-that-finding-wheel-subgraphs-is-np-complete">Proving that finding wheel subgraphs is NP-complete</a></p>\n\n<p><a href="http://cs.stackexchange.com/questions/11915/reducing-from-hamiltonian-cycle-problem-to-the-graph-wheel-problem">Reducing from Hamiltonian Cycle problem to the Graph Wheel problem</a></p>\n\n<p>My sincere apologies.. I hope moderators will let me post this final version of the question.</p>\n\n<p>In reality the question is different and much harder: is there a way to determine whether a graph $G$ with $n$ vertices has a subgraph that is a wheel $W_{k}$ ? Is possible to show that this is NP-Complete problem ? </p>\n\n<p>The follwig solution offered by Saeed Amiri seems to only work if the problem is to determine whether the entire graph is a wheel.</p>\n\n<blockquote>\n  <p>We will add one extra vertex $v$ to the graph $G$ and we make new\n  graph $G\'$, such that $v$ is connected to the all other vertices of\n  $G$, then $G$ has a Hamiltonian cycle if and only if $G\'$ has a\n  $W_{n+1}$, is easy to check that if $G$ has a Hamiltonian cycle then\n  $G\'$ has a $W_{n+1}$ wheel (just set $v$ as a center), on the other\n  hand, if $G\'$ has a $W_{n+1}$ then there are two possibility:</p>\n  \n  <ol>\n  <li>$v$ is the center of $W_{n+1} \\rightarrow G $ has a Hamiltonian cycle.</li>\n  <li>Another vertex $u$ is the center of $W_{n+1}$ in $G\'$, but both $deg(u) = deg(v) = n$ so we can change the labeling of this two\n  vertices (actually they are equivalence under isomorphic), now we have\n  again first possibility.</li>\n  </ol>\n  \n  <p>P.S: By $W_n$ I mean the wheel with $n$ vertex.</p>\n</blockquote>\n\n<p>It seems that Hamiltonian Cycle approach is wrong because with this approach we are forced to think of the cycles across entire set of vertices. Since the problem is asking do determine presence of subset graph $W_{k}$ the strategy needs to be different. </p>\n', 'ClosedDate': '2013-05-12T08:34:30.470', 'Tags': '<graphs><np-complete><np>', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-05-12T07:22:38.820', 'CommentCount': '2', 'AcceptedAnswerId': '11958', 'CreationDate': '2013-05-10T19:57:40.330', 'Id': '11942'},282184:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>We are given a graph $G=(V,E)$ with positive edge weights $w_{i}$ and numerical {0,1,-1} labels $l$ for all vertices . We know that $G$ has a subset $G'$ with all vertices labeled 0. The problem is to assign labels to the vertices in $G'$ in such way that this sum is maximized $\\sum_{e_{u,v}\\in E} w_{i}l_ul_v.$ The question is whether this problem is NP-complete or not. If it is not then what is the polynomial algorithm?</p>\n\n<p>Personally I believe that this problem is essentially a form of 3-Coloring. The challenge is to chose the labels {1,-1} depending on the neighbors. Say the boundary between $G$ and $G'$ has a lot of 1s  then it is better to chose 1s for the labeling of vertices in $G'$, similarly if the boundary has lots of -1s then it is better to chose -1s for labeling because $-1*-1=1$. So essentially this becomes some sort of reverse 3-Coloring problem where the neighbors have to have matched color.</p>\n\n<p>Can you help reduce this problem to 3-Coloring (or vice-versa) ? Or perhaps there is polynomial time algorithm ?</p>\n", 'ViewCount': '97', 'Title': 'Strategic vertex labeling', 'LastEditorUserId': '7336', 'LastActivityDate': '2013-05-13T02:04:44.517', 'LastEditDate': '2013-05-13T01:43:16.263', 'AnswerCount': '1', 'CommentCount': '10', 'AcceptedAnswerId': '11978', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Tags': '<graphs><np-complete><np><colorings>', 'CreationDate': '2013-05-11T05:33:52.827', 'Id': '11946'},282185:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I saw a proof by Saeed Amiri,\nWe will add one extra vertex v to the graph G and we make new graph G\u2032, such that v is connected to the all other vertices of G. G has a Hamiltonian cycle if and only if G\u2032 has a Wn+1. It is easy to check that if G has a Hamiltonian cycle then G\u2032 has a Wn+1 wheel (just set v as a center). On the other hand, if G\u2032 has a Wn+1 then there are two possibility:</p>\n\n<p>v is the center of Wn+1\u2192G has a Hamiltonian cycle.\nAnother vertex u is the center of Wn+1 in G\u2032. So both deg(u)=deg(v)=n. Then we can change the labeling of this two vertices (actually they are equivalence under isomorphic), now we have again first possibility.\nP.S1: By Wn I mean the wheel with n vertex.</p>\n\n<p>P.S2: In this proof we say if we fix k=n+1 (size of the artificial graph), then the problem is NP-Complete in this restricted version, So it's also NP-Complete in the case k is as input parameter.</p>\n\n<p>The proof is valid one way. If a graph has a hamiltonian cycle adding a node to the graph converts it a wheel. If the graph of k+1 nodes has a wheel with k nodes on ring. It has a hamiltonian cycle. BUT IF THE GRAPH OF N nodes has a wheel of size k. Then identifying which k nodes cannot be done in polynomial time. Thus the reduction cannot be done in polynomial time.</p>\n", 'ViewCount': '106', 'ClosedDate': '2013-05-18T03:40:01.500', 'Title': 'Reducing from Hamiltonian Cycle problem to the Graph Wheel problem cannot be proved vice versa', 'LastActivityDate': '2013-05-15T07:51:32.010', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12034', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '8160', 'Tags': '<algorithms><graphs><np-complete><polynomial-time>', 'CreationDate': '2013-05-14T08:13:46.597', 'Id': '12009'},282186:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a directed graph with the following attributes: - a chain from node $a$ to node $z$ passing nodes $b$ to $y$ exists and is unidirectional. - additionally a set of nodes having bidirectional vertices to at least two of the nodes $a \\ldots z$ exists. These nodes are connected in a second unidirectional chain.</p>\n\n<p><img src="http://i.stack.imgur.com/W1NjY.png" alt="enter image description here"></p>\n\n<p>(the red route is the requested result, the squares are the first chain (unidirectional) and the circles are the second chain (unidirectional). $1$ is the start node and $5$ is the destination node.)</p>\n\n<p>Is it possible to find the shortest path from $a$ to $z$ that includes nodes $b$ to $y$ and the additional nodes once without probing all possibilities?</p>\n\n<p>I think the problem is roughly the same as the minimal traveling salesman problem since adding a vertex from $z$ to $a$ will result in the min-TSP - but this problem is slightly easier since a path from $a$ to $z$ is already known.</p>\n', 'ViewCount': '145', 'Title': u'Is \u201cFind the shortest tour from a to z passing each node once in a directed graph\u201d NP-complete?', 'LastEditorUserId': '8188', 'LastActivityDate': '2013-05-16T07:26:57.557', 'LastEditDate': '2013-05-16T06:17:36.050', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12061', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '8188', 'Tags': '<algorithms><graph-theory><graphs><np-complete>', 'CreationDate': '2013-05-15T11:03:35.493', 'Id': '12036'},282187:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '189', 'Title': 'Modeling the problem of finding all stable sets of an argumentation framework as SAT', 'LastEditDate': '2013-05-20T14:48:10.623', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7443', 'FavoriteCount': '2', 'Body': '<p>As a continuation of my previous <a href="http://cs.stackexchange.com/questions/12087/converting-math-problems-to-sat-instances?noredirect=1#comment25370_12087">question</a> i will try to explain my problem and how i am trying to convert my algorithm to a problem that can be expressed in a CNF form.</p>\n\n<p>Problem: Find all stable sets of an <a href="http://en.wikipedia.org/wiki/Argumentation_framework" rel="nofollow">argumentation framework</a> according to <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.109.4129" rel="nofollow">Dung\'s proposed framework</a>.</p>\n\n<p>Brief theory: Having an argumentation framework AF, with A the set of all arguments and R the set of the relations, a stable set is a set which attacks all arguments not in their set and there is no attack relation between arguments in the stable set.\nExample:</p>\n\n<p>Let\'s say we have an argumentation framework AF ,A={1,2,3,4}(arguments of AF) and attack relations R{1,3} and R{2,4}.\nIt\'s obvious that the set {1,2} is a stable extension of the framework because:</p>\n\n<p>a)it attacks all arguments not in their set (3 and 4)</p>\n\n<p>b)it\'s conflict free(no attacks between arguments in the set) because argument 1 does not attack argument 2 and the opposite </p>\n\n<p>My exhaustive abstract algorithm:</p>\n\n<pre><code>argnum=number of arguments;\n\nAi[argnum-1]=relation "attacks" ,where 1&lt;=i&lt;=argnum\n\nP[2^argnum-1]=all possible relations that can be generated from all the arguments\n\nS[2^argnum-1]=empty; where S are all the stable sets\n\nj=0; //counter for while\nk=1; //counter for counting stable sets\nwhile j&lt;2^argnum-1\n    if P[j] attacks all arguments not in P[j](check using Ai[])\n        if all arguments in P[j] are conlfict-free\n            S[k++]=P[j];\n        end if\n    end if \n    j++;\nend while\n</code></pre>\n\n<p>I want to solve the above problem either by transforming the above algorithm to CNF or by using a different algorithm and finally use a SAT Solver(or anything similar if exists) give CNF as input and get stable sets as output.</p>\n\n<p>I wonder if someone can give me any feedback of how i can transform any algorithm like the above to CNF in order to be used into a SAT Solver.</p>\n\n<p>I decided to use <a href="http://fmv.jku.at/precosat/" rel="nofollow">precosat</a>.</p>\n', 'Tags': '<algorithms><complexity-theory><time-complexity><np-complete><satisfiability>', 'LastEditorUserId': '7443', 'LastActivityDate': '2013-05-26T00:33:46.807', 'CommentCount': '7', 'AcceptedAnswerId': '12176', 'CreationDate': '2013-05-19T15:50:58.177', 'Id': '12135'},282188:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '270', 'Title': 'Longest cycle contained in two cycles', 'LastEditDate': '2013-05-22T13:39:21.057', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '6970', 'FavoriteCount': '4', 'Body': "<p>Is the following problem NP-complete? (I assume yes).</p>\n\n<blockquote>\n  <p><strong>Input:</strong> $k \\in \\mathbb{N},G=(V,E)$ an undirected graph where the edge set can be decomposed into two edge-disjoint simple cycles (these are <strong>not</strong> a part of the input).</p>\n  \n  <p><strong>Question:</strong> Is there a simple cycle in $G$ with length greater than $k$?</p>\n</blockquote>\n\n<p>Obviously the problem is in NP and the maximum degree in $G$ is $\\leq 4$, but that doesn't seem to help.</p>\n", 'Tags': '<graph-theory><np-complete><decision-problem>', 'LastEditorUserId': '6970', 'LastActivityDate': '2013-05-25T21:42:25.810', 'CommentCount': '6', 'AcceptedAnswerId': '12270', 'CreationDate': '2013-05-20T07:07:18.790', 'Id': '12148'},282189:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am new in complexity theory and this question is a part of a homework that I have and I am stuck on it.</p>\n\n<blockquote>\n  <p>Let ${\\sf coNP}$ be the class of languages $\\{\\overline{L}: L \\in {\\sf NP} \\}$.</p>\n  \n  <p>Show that if ${\\sf NP} \\neq {\\sf coNP}$, then ${\\sf P}\\neq  {\\sf NP}$.</p>\n</blockquote>\n', 'ViewCount': '729', 'Title': 'Proving that if coNP $\\neq$ NP then P $\\neq$ NP', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-05-21T18:53:59.637', 'LastEditDate': '2013-05-21T18:53:59.637', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'user16111', 'PostTypeId': '1', 'Tags': '<complexity-theory><complexity-classes><np><p-vs-np>', 'CreationDate': '2013-05-21T09:05:11.783', 'Id': '12195'},282190:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given a set of rectangles, $D = \\{ (a_1, b_1), (a_2, b_2) \\dots , (a_n, b_n) \\}$, where in each pair $(a_i, b_i)$, $a_i$ represents the height of the rectangle and $b_i$ the width, and given another pair $(w, h)$ representing the width and height of a container $C$, does exist a way that taking some of the squares in $D$, the <strong>whole</strong> container C is perfectly filled? Here, $a_i, b_i, w, h \\in \\mathbb N$.</p>\n\n<p>I am trying to reduce it from Subset Sum, but can't find the way... Hope you guys can give me a hint over it!</p>\n", 'ViewCount': '38', 'Title': 'Showing filling a container with rectangles is hard by reducing from SUBSET-SUM', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-30T23:52:12.767', 'LastEditDate': '2013-05-30T23:52:12.767', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '12205', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8287', 'Tags': '<complexity-theory><np-complete><reductions><np><polynomial-time>', 'CreationDate': '2013-05-21T21:33:02.157', 'Id': '12202'},282191:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p><strong>Input</strong>: A set of $n$ Users $U=\\{u_1, ..., u_n\\}$ and a set of $m$ products $I=\\{i_1, ..., i_m\\}$. Associated with each pair $u \\in U$ and $i \\in I$  is the probability $p_{u,i}$ of $u$ purchasing the product $i$.<br/>\n  <strong>Task</strong>: Assign each user exactly $k$ products so that the following objective function is maximized:<br/>\n  $$\\sum_{i \\in I(U)} ({1-\\prod_{u\\in U(i)}{(1-p_{u,i})}})$$<br/>\n  Where $I(U)\\subseteq I$ is the set of products assigned to some user, and $U(i) \\subseteq U$ is the set of users to whom a product $i$ is assigned.</p>\n</blockquote>\n\n<p>Question: Is this problem NP-Hard?</p>\n', 'ViewCount': '56', 'Title': 'Hardness of a special case of maximum matching', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T07:27:34.407', 'LastEditDate': '2013-05-28T07:27:34.407', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8344', 'Tags': '<complexity-theory><reductions><np-hard><matching>', 'CreationDate': '2013-05-25T02:15:10.840', 'Id': '12260'},282192:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>So, there are multiple possible definitions of "np-complete", two of which being:  </p>\n\n<ol>\n<li><p>A decision problem $L$ is np-complete if and only if:  $L \\in \\text{NP}$  and  $\\forall L\' \\in \\text{NP}: L\' \\preceq_{p} L$</p></li>\n<li><p>A decision problem $L$ is np-complete if and only if:  $L \\in \\text{NP}$  and  there exists a np-complete problem $L \\in \\text{NP}$ such that: $L\' \\preceq_{p} L$</p></li>\n</ol>\n\n<p>My question is, why are those two definitions equivalent, or put differently, (why) is np-complete an equivalence class? </p>\n\n<p>If it is an equivalence class I can understand equivalence of the above two definitions, but I fail to see why this is the case, since the (one-to-many) poly-time reduction $\\preceq_{p}$ is not symmetric... :-/</p>\n', 'ViewCount': '90', 'Title': 'Is np-complete an equivalence class?', 'LastActivityDate': '2013-05-28T23:29:25.010', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12347', 'Score': '3', 'OwnerDisplayName': 'user2429385', 'PostTypeId': '1', 'OwnerUserId': '8426', 'Tags': '<complexity-theory><complexity-classes><reductions><np><np-complete>', 'CreationDate': '2013-05-28T17:09:44.347', 'Id': '12346'},282193:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '265', 'Title': '$2k$ number assignment', 'LastEditDate': '2013-05-29T16:14:34.003', 'AnswerCount': '3', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '512', 'FavoriteCount': '1', 'Body': '<p>Given $k$ numbers $A_1 \\leq A_2 \\leq ... \\leq A_k$ such that $\\sum\\limits_{i=1}^k A_i = k(2k + 1)$ is there an assignment of numbers $i_1, i_2, ... , i_{2k}$ which is a permutation of $1, 2, ... , 2k$ such that</p>\n\n<p>$i_1 + i_2 \\leq A_1\\\\ i_3 + i_4 \\leq A_2\\\\ .\\\\.\\\\.\\\\ i_{2k-1} + i_{2k} \\leq A_k$</p>\n\n<p>?</p>\n\n<p>I cannot find an efficient algorithm and that solves this problem. It seems to be a combinatorial problem. I was unable to find a similar NP-Complete problem. Does this problem look like a known NP-Complete problem or can it be solved with a polynomial algorithm?</p>\n', 'Tags': '<np-complete><decision-problem>', 'LastEditorUserId': '512', 'LastActivityDate': '2013-06-17T18:54:14.733', 'CommentCount': '3', 'AcceptedAnswerId': '12723', 'CreationDate': '2013-05-29T15:18:13.573', 'Id': '12359'},282194:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am interested in the following version of TSP:</p>\n\n<p><strong>Assumption:</strong> TSP where the distances are non-negative. We know the algorithm A which computes the optional solution for such instances of TSP.<br>\n<strong>Task:</strong> State an algorithm that uses the algorithm A and computes an optimal solition for instances where negative distances are allowed. </p>\n', 'ViewCount': '173', 'Title': 'Traveling salesman problem - negative distances allowed', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-10T14:04:07.183', 'LastEditDate': '2013-06-06T15:04:59.887', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '12388', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '8072', 'Tags': '<complexity-theory><np-complete><traveling-salesman>', 'CreationDate': '2013-05-30T23:58:46.050', 'Id': '12387'},282195:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm having trouble understanding reduction. Lets say you have a decision problem A that is NP-Complete. Also, another problem B the can be reduced from A.</p>\n\n<p>What can you say about B if:</p>\n\n<p>1) The reduction is done in polynomial time<br>\n2) The reduction is done in exponential time  </p>\n\n<p>I know that if A is reduced to B means that if we knew how to solve B, then solving A would be easy. But I don't understand what 1 &amp; 2 signify. </p>\n\n<p>Would it be right to say that for 1)<br>\nB is in the same Class as A  </p>\n\n<p>And for 2)<br>\nThat B > then NP-Complete?</p>\n", 'ViewCount': '75', 'Title': 'Exponential reduction vs Polynomial Reduction', 'LastActivityDate': '2013-05-31T13:50:21.463', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12398', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8463', 'Tags': '<np-complete><reductions><polynomial-time>', 'CreationDate': '2013-05-31T12:23:20.910', 'Id': '12397'},282196:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There are $n$ bins and $m$ type of balls.\nThe $i$th bin has labels $a_{i,j}$ for $1\\leq j\\leq m$, it is the expected number of balls of type $j$.</p>\n\n<p>You start with $b_j$ balls of type $j$. Each ball of type $j$ has weight $w_j$, and want to put the balls into the bins such that bin $i$ has weight $c_i$. A distribution of balls such that previous condition holds is called a feasible solution.</p>\n\n<p>Consider a feasible solution with $x_{i,j}$ balls of type $j$ in bin $i$, then the cost is $\\sum_{i=1}^n \\sum_{j=1}^m |a_{i,j}-x_{i,j}|$. We want to find a minimum cost feasible solution.</p>\n\n<p>This problem is clearly NP-hard if there is no restriction on $\\{w_j\\}$. The subset sum problem reduces to the existence of a feasible solution. </p>\n\n<p>However, if we add the condition that $w_j$ divides $w_{j+1}$ for every $j$, then the subset sum reduction no longer works, so it\'s not clear whether the resulting problem remains NP-hard. Checking for the existence of a feasible solution takes only $O(nm)$ time(attached at the end of the question), but this does not give us the minimum-cost feasible solution. </p>\n\n<p>The problem has a equivalent integer program formulation:\nGiven $a_{i,j},c_i,b_j,w_j$ for $1\\leq i\\leq n,1\\leq j\\leq m$. \n\\begin{align*}\n\\text{Minimize:} &amp; \\sum_{i=1}^n \\sum_{j=1}^m |a_{i,j}-x_{i,j}| \\\\\n\\text{subject to:} &amp; \\sum_{j=1}^m x_{i,j}w_j = c_i \\text{ for all } 1\\leq i\\leq n\\\\\n&amp; \\sum_{i=1}^n x_{i,j} \\leq b_j \\text{ for all } 1\\leq j \\leq m\\\\\n&amp; x_{i,j}\\geq 0 \\text{ for all } 1 \\leq i\\leq n, 1\\leq j \\leq m\\\\\n\\end{align*}</p>\n\n<p>My question is, </p>\n\n<blockquote>\n  <p>Is the above integer program NP-hard when $w_j$ divides $w_{j+1}$ for all\n  $j$?</p>\n</blockquote>\n\n<p>It\'s not obvious how to solve this even when $n=1$ and $w_j=2^j$, namely\n\\begin{align*}\n\\text{Minimize:} &amp; \\sum_{j=1}^m |a_j-x_j| \\\\\n\\text{subject to:} &amp; \\sum_{j=1}^m 2^j x_j = c\\\\\n&amp; 0 \\leq x_j \\leq b_j \\text{ for all } 1\\leq j \\leq m\\\\\n\\end{align*}</p>\n\n<p><strong>An algorithm to decide if there is a feasible solution in $O(nm)$ time</strong>:</p>\n\n<p>Define $w_{m+1}=w_m(\\max_{j} c_j + 1)$ and $d_j = w_{j+1}/w_j$. Let $a\\%b$ be the remained of $a$ divides $b$.</p>\n\n<ol>\n<li>If there exist a $c_i$ that\'s not divisible by $w_1$, return "no feasible solution". (the invariant $c_i$ divides $w_j$ will always be maintained in the following loop)</li>\n<li><p>for $j$ from $1$ to $m$:</p>\n\n<ol>\n<li>$k \\gets \\sum_{i=1}^n (c_i/w_j)\\%d_j$. (the minimum of balls of weight $w_j$ required)</li>\n<li>If $b_j&lt;k$, return "no feasible solution".</li>\n<li>$c_i \\gets c_i - ((c_i/w_j)\\% d_j)$ for all $i$. (remove the minimum number of required balls of weight $w_j$)</li>\n<li>$b_{j+1} \\gets \\lfloor (b_j-k)/d_j \\rfloor$. (group smaller balls into a larger ball)</li>\n</ol></li>\n<li>return "there is a feasible solution".</li>\n</ol>\n', 'ViewCount': '578', 'Title': 'Is it NP-hard to fill up bins with minimum moves?', 'LastEditorUserId': '220', 'LastActivityDate': '2014-04-17T20:15:43.023', 'LastEditDate': '2014-04-17T20:15:43.023', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<complexity-theory><np-hard><integer-programming>', 'CreationDate': '2013-06-03T08:38:00.137', 'FavoriteCount': '3', 'Id': '12441'},282197:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>On the wikipedia article about the polynomial hierarchy <a href="http://en.wikipedia.org/wiki/Polynomial_hierarchy" rel="nofollow">http://en.wikipedia.org/wiki/Polynomial_hierarchy</a></p>\n\n<p>it says "$A^B$ is the set of decision problems solvable by a Turing machine in class A augmented by an oracle for some complete problem in class B"</p>\n\n<p>What is a "Turing machine in class A" for classes P, NP, and coNP?</p>\n\n<p>I\'m guessing a Turing machine in P is a deterministic Turing machine that can only run for polynomial time in the size of its input</p>\n\n<p>and that a Turing machine in NP is a nondeterministic Turing machine that can only run for polynomial time in the size of its input</p>\n\n<p>But I have no clue what is a Turing machine in class coNP ?</p>\n', 'ViewCount': '72', 'Title': 'What is a Turing Machine in class coNP', 'LastActivityDate': '2013-06-05T09:29:27.857', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '12468', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8526', 'Tags': '<turing-machines><decision-problem><np><polynomial-time>', 'CreationDate': '2013-06-05T07:51:19.400', 'Id': '12466'},282198:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The notion of <a href="http://en.wikipedia.org/wiki/Polynomial-time_reduction" rel="nofollow">polynomial time Turing reductions</a> (Cook reductions) is an abstraction of a very intuitive concept: efficiently solving a problem by using another algorithm as a subroutine. </p>\n\n<p>For example, by stating "$A$ is polynomial time Turing reduced to $B$", we indicate that we can solve the problem $A$ in a polynomial number of steps by making use of an algorithm which can solve the problem $B$.</p>\n\n<p>Then if $B$ is in $\\mathsf{NP}$, why not $A$?</p>\n', 'ViewCount': '314', 'Title': 'Why NP is not closed under Turing reduction', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-06-08T20:38:39.947', 'LastEditDate': '2013-06-08T20:38:39.947', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'Zhong Yantao', 'PostTypeId': '1', 'Tags': '<complexity-theory><reductions><closure-properties><np>', 'CreationDate': '2013-06-08T09:08:33.743', 'Id': '12541'},282199:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In Graph-Theory there are many ways for efficient approximation-algorithms to solve the Metric TSP. The best solution seems to be the Christofides Heuristic with a factor of 1.5 to the optimal solution. My Teacher said, there would be the so called $\\frac{4}{3}$-conjecture, which states: there might be a approximation solution for the metric tsp, that has only a $\\frac{4}{3}$-factor.</p>\n\n<p>But i cannot find any literature or further information about this assumption. Maybe you can?</p>\n', 'ViewCount': '54', 'Title': 'Where can i find literature about the $\\frac{4}{3}$-conjecture for approximation of the Metric TSP?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-10T14:49:29.627', 'LastEditDate': '2013-06-10T14:49:29.627', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12594', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6828', 'Tags': '<complexity-theory><reference-request><np-complete><approximation><traveling-salesman>', 'CreationDate': '2013-06-10T10:33:26.633', 'Id': '12593'},282200:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Assuming $P \\neq NP$ Is the following langauge in $P$ or $NPC$:<br>\n$L=\\{\\langle\\phi\\rangle\\mid\\phi$ is a 3CNF formula with an assignment satisfying at least half of the clauses$\\}$</p>\n\n<p>The first thing I tried to do is to find a 3CNF formula $\\phi$ such that  $\\phi \\notin L$ and I haven't managed to do so. Is it possible that simply all 3CNF formulas have such an assignment (and so the problem is in $P$) or am I missing something ?</p>\n", 'ViewCount': '55', 'Title': 'Is the following langauge in $P$ or $NPC$', 'LastActivityDate': '2013-06-14T23:01:55.957', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12680', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<complexity-theory><time-complexity><np-complete><satisfiability><3-sat>', 'CreationDate': '2013-06-14T22:05:23.980', 'Id': '12678'},282201:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $B=\\{b_1=g_1,\\cdots,b_n=g_n\\}$ be a set of binary variables $b_i$ and their corresponding values $g_i \\in \\{0,1\\}$. Let $M=\\{\\sum_{e \\in A}e \\;:\\; A \\subset B\\}$, i.e., $M$ is the set of all possible linear combinations of the equations in $B$.</p>\n\n<p>Given $S_i \\subset B$ for $i=1,\\cdots,m$, is that possible to compute, in polynomial time, a\n$K \\subset M$ with minimum size such that $S_i \\cup K$ is a full rank system of equations (i.e., the values of all of the variables can be obtained by solving $S_i \\cup K$)?</p>\n\n<p>An example: Let $B=\\{b_1=1,b_2=0,b_3=1\\}$, $S_1=\\{b_1=1,b_2=0\\}$, and $S_2=\\{b_2=0,b_3=1\\}$. \n$K=\\{b_1+b_3=0\\}$ is the solution because both $S_1\\cup K$ and $S_2 \\cup K$ can be solved uniquely and $K$ has the minimum size 1.</p>\n', 'ViewCount': '25', 'Title': 'Is this problem in P: Finding a common key for a collection of systems of equations?', 'LastActivityDate': '2013-06-20T02:54:32.613', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1672', 'Tags': '<complexity-theory><time-complexity><np-hard><polynomial-time><linear-algebra>', 'CreationDate': '2013-06-20T02:54:32.613', 'Id': '12776'},282202:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have this problem, maybe anybody could help. </p>\n\n<p>Given a graph $G = (V, E)$ and an integer $k \\geq 1$, find the minimum number $l$ of vertices to remove to make the largest connected component of $G \\setminus \\{v_1, \\dots,v_l\\}$ have at most $k$ vertices.</p>\n\n<p>I wonder it this problem can be solved quickly (in polynomial time)?</p>\n\n<p>(Related: <a href="http://cs.stackexchange.com/questions/12789/find-which-vertices-to-delete-from-graph-to-get-smallest-largest-component">finding the vertices when $k$ is small</a>)</p>\n', 'ViewCount': '126', 'LastEditorDisplayName': 'user742', 'Title': 'Minimum number of vertices to remove to bound the largest connected component of a graph', 'LastActivityDate': '2013-09-20T09:28:50.637', 'LastEditDate': '2013-09-20T09:28:50.637', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '12784', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8770', 'Tags': '<graph-theory><np-complete><combinatorics>', 'CreationDate': '2013-06-20T08:47:37.500', 'Id': '12783'},282203:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is there any general technique for proving a problem NOT being NP-Complete?</p>\n\n<p>I got this question on the exam that asked me to show whether some problem (see below) is NP-Complete. I could not think of any real solution, and just proved it was in P. Obviously this is not a real answer.</p>\n\n<p>NP-Complete is defined as the set of problems which are in NP, and all the NP problems can be reduced to it. So any proof should contradict at least one of these two conditions. This specific problem, is indeed in P (and thus in NP). So I am stuck with proving that there is some problem in NP that can\'t be reduced to this problem. How on the earth can this be proven??</p>\n\n<p>Here is the specific problem I was given on exam:</p>\n\n<blockquote>\n  <p>Let $DNF$ be the set of strings in <a href="http://en.wikipedia.org/wiki/Disjunctive_normal_form">disjunctive normal form</a>.\n  Let $DNFSAT$ be the language of strings from $DNF$ that are satisfiable by some assignment of variables. Show whether or not $DNFSAT$ is in NP-Complete.</p>\n</blockquote>\n', 'ViewCount': '991', 'Title': 'How to prove a problem is NOT NP-Complete?', 'LastActivityDate': '2013-06-22T22:24:31.567', 'AnswerCount': '5', 'CommentCount': '5', 'AcceptedAnswerId': '12813', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '7410', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-06-21T10:51:14.073', 'FavoriteCount': '2', 'Id': '12812'},282204:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I know that Hamiltonian cycle problem in 3-regular triangle-free graphs is NP-complete. I would like to know how far we can stretch this result. Observing that a triangle is just $C_3$ cycle, What is the longest cycle $C_n$ such that deciding the existence of Hamiltonian cycle in 3-regular $C_n$-free graphs is still NP-complete?</p>\n', 'ViewCount': '34', 'Title': 'Existence of Hamiltonian cycle in a 3-regular $C_n$-free graph', 'LastActivityDate': '2013-06-24T12:08:02.523', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-06-24T12:08:02.523', 'Id': '12862'},282205:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The PCP theorem implies (with other results) that there is no polynomial time algorithm for MAX 3SAT to find an assignment satisfying $7/8+ \\epsilon$ clauses of a satisfiable 3SAT formula unless $P = NP$.</p>\n\n<p>There is a trivial polynomial time algorithm that satisfies $7/8$ of the clauses. How hard is it to find an assignment that satsfies at least $7/8$ of the clauses but no more than $7/8 +\\epsilon $ for some $\\epsilon \\gt 0$? Is this task still $NP$-hard?</p>\n', 'ViewCount': '93', 'Title': 'How hard is finding restricted assignment of 3-SAT satisfying $7/8$ of the clauses?', 'LastEditorUserId': '96', 'LastActivityDate': '2013-06-26T16:13:46.583', 'LastEditDate': '2013-06-26T14:34:49.270', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2013-06-26T14:29:27.607', 'FavoriteCount': '2', 'Id': '12908'},282206:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I want to show that the following problems are in NP (NP-completeness is irrelevant) by textually describing a non-deterministic Turing machine which runs in polynomial time. The assumptions are that addition, multiplication, tests for divisibility can be done in polynomial time and natural numbers are represented in binary.</p>\n\n<p>a) $\\{n \\in \\mathrm{N} \\ | \\ n \\ $is not a prime number$\\}$</p>\n\n<p>b) $\\{x_1, ..., x_n, y \\in \\mathrm{N} \\ | \\exists M \\subseteq \\{1, ..., n\\} : \\sum_{m \\in M}x_m = y \\ \\}$</p>\n\n<p>For a) it's clear that there must be a non-trivial divisor if $n$ isn't a prime, but how does it exactly work? How can I reject invalid and verify valid inputs?</p>\n", 'ViewCount': '396', 'Title': 'How to show that problems are in NP?', 'LastEditorUserId': '41', 'LastActivityDate': '2013-06-30T05:21:11.320', 'LastEditDate': '2013-06-30T05:21:11.320', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8480', 'Tags': '<complexity-theory><np>', 'CreationDate': '2013-06-29T20:31:05.000', 'Id': '12969'},282207:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Partition problem is a well known NP-complete problem. In the definitions I have seen, the input is assumed to be a multiset of integers and we want to decide the existance of a partition into two sets that have the same sum.</p>\n\n<blockquote>\n  <p>Is the partition problem still NP-complete if all input integers are distinct (no integer is repeated)?</p>\n</blockquote>\n', 'ViewCount': '82', 'Title': 'Partition problem with distinct integers', 'LastActivityDate': '2013-07-02T06:10:49.613', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '13032', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-complete><partition>', 'CreationDate': '2013-07-02T05:03:25.180', 'Id': '13030'},282208:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a complete $n$-partite graph, where each partite set has $n$ vertices (yes it\'s also $n$), so the graph has $n^2$ vertices in total.  My problem is to find a minimum weight $n$-clique in the graph.  I would like to know whether the problem can be solved in polynomial time. </p>\n\n<p>More details of the terms: </p>\n\n<p><strong>Complete $n$-partite graph</strong>: a graph in which vertices are adjacent if and only if they belong to different partitions (<a href="http://en.wikipedia.org/wiki/Glossary_of_graph_theory" rel="nofollow">wikipedia</a>).  There are $n$ partitions in the graph.  (In my case, each partition contains exactly $n$ vertices.)</p>\n\n<p><strong>Minimum weight clique</strong>:  Every edge in the graph has a weight.  The weight of a clique is the sum of the weights of all edges in the clique.  The goal is to find a clique with the minimum weight.</p>\n\n<p>Note that the size of the required clique is $n$, which is the largest clique size in a complete $n$-partite graph, and it is always attainable. </p>\n\n<p>I have searched for hours and there seems no research tackling the exact problem.  Any suggestions?</p>\n', 'ViewCount': '107', 'Title': 'Is this NP-hard: min-weight n-clique in a complete n-partite graph', 'LastEditorUserId': '755', 'LastActivityDate': '2013-07-08T04:47:58.273', 'LastEditDate': '2013-07-08T00:19:34.617', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '13154', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8732', 'Tags': '<complexity-theory><optimization><np-hard>', 'CreationDate': '2013-07-07T16:38:18.347', 'Id': '13135'},282209:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>During my involvement in a course on dealing with NP-hard problems I have encountered the PCP theorem, stating</p>\n\n<p>$\\qquad\\displaystyle \\mathsf{NP} = \\mathsf{PCP}(\\log n, 1)$. </p>\n\n<p>I understand the technical definition of a PCP verifier, so I know in principle what kind of algorithm has to exist for every NP problem: a randomised algorithm that checks $O(1)$ bits of the given certificate for the given input using $O(\\log n)$ random bits, so that this algorithm is essentially a one-sided error Monte-Carlo verifier.</p>\n\n<p>However, I have trouble imagining how such an algorithm can deal with an NP-complete problem. Short of reading the proof of the PCP theorem, are there concrete examples for such algorithms?</p>\n\n<p>I skimmed the relevant sections of <a href="http://www.cs.princeton.edu/theory/complexity/" rel="nofollow">Computational Complexity: A Modern Approach</a> by Arora and Barak (2009) but did not find any.</p>\n\n<p>An example using a $\\mathsf{PCP}(\\_,\\ll n)$ algorithm would be fine.</p>\n', 'ViewCount': '220', 'Title': 'Example for a non-trivial PCP verifier for an NP-complete problem', 'LastActivityDate': '2013-07-19T09:24:04.750', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<algorithms><complexity-theory><np-complete><approximation><randomized-algorithms>', 'CreationDate': '2013-07-12T11:10:36.380', 'Id': '13246'},282210:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is there an efficient algorithm which gives the minimum cost closed walk in an undirected graph, which visits all vertices?</p>\n\n<p>Does this problem have a name? I tried to reduce this to similar problems (in particular the traveling salesman problem) to see if it was NP-hard, but was unsuccessful.</p>\n\n<p>Here\'s an example:</p>\n\n<p><img src="http://i.stack.imgur.com/3dxzt.png" alt="enter image description here"></p>\n\n<p>Then a possible closed walk is: A,B,C,D,C,B,A, with a cost of 6.</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '203', 'Title': 'Minimum cost closed walk in a graph', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-07-15T11:10:55.033', 'LastEditDate': '2013-07-14T09:51:41.813', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '13283', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9173', 'Tags': '<algorithms><graphs><np-hard><graph-traversal><traveling-salesman>', 'CreationDate': '2013-07-14T05:04:52.683', 'Id': '13267'},282211:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem $\\Pi_1$ that I want to show that is NP-hard. I know that I must find an NP-hard problem $\\Pi_2$ and a polynomial time reduction $f()$ from instances of $\\Pi_2$ to $\\Pi_1$ such that $I_2$ is an Yes-instance of $\\Pi_2$ iff $I_1=f(I_2)$ is an Yes-instance of $\\Pi_1$.</p>\n\n<p>What if I find a (constant sized) family of reductions $f_i()$ such that $I_2$ is an Yes-instance of $\\Pi_2$ iff at least one $f_i(I_2)$ is an Yes-instance of $\\Pi_1$? Is this enough? Is there a way of translating this one in the "classical" definition? How to formalize this?</p>\n\n<p>I know that in the second situation I can say that I can\'t solve $\\Pi_1$ in polynomial time unless P=NP, but I\'m no sure that is equivalent of saying that $\\Pi_1$ is NP-hard.</p>\n', 'ViewCount': '99', 'Title': 'NP-Hardness reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-12T18:55:32.767', 'LastEditDate': '2013-08-11T13:21:08.910', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1373', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-08-09T23:22:09.297', 'Id': '13698'},282212:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I need to prove that this language is in co-NPC:\n$\\{ \\langle M,x,1^n \\rangle \\mid M $ is a TM and for all $c \\in \\Sigma^*$ , $M$ accepts in $ $$n$ steps when given $(x,c)$ as input $\\}$.</p>\n\n<p>I tried to do so by showing that the complement is in NPC, that is $\\{ \\langle M,x,1^n \\rangle \\mid M $ is a TM and there exists  $c \\in \\Sigma^*$ , s.t $M$ doesn't accepts in $n$ steps when given $(x,c)$ as input $\\}$.</p>\n\n<p>I can prove that it's in NP by giving a polynomial non-deterministic algorithm, but I get stuck in the reduction part and don't know from which language in NPC to do a polynomial reduction and how. Does anybody know how do deal with such reduction?</p>\n", 'ViewCount': '54', 'Title': 'Showing a language is in co-NPC', 'LastEditorUserId': '472', 'LastActivityDate': '2013-08-18T13:57:00.253', 'LastEditDate': '2013-08-18T13:57:00.253', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9713', 'Tags': '<complexity-theory><turing-machines><np-complete>', 'CreationDate': '2013-08-17T18:24:44.037', 'Id': '13792'},282213:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The following question is related to the <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCwQFjAA&amp;url=http://en.wikipedia.org/wiki/Maximum_cut&amp;ei=wMQTUuXxLuny4QS55oHgAw&amp;usg=AFQjCNF7PelNFUITFjPfjyXHqig7ivCgvw&amp;sig2=JVB560isHX3-zBpX2khJTQ&amp;bvm=bv.50952593,d.bGE" rel="nofollow">max cut problem</a> in <em>cubic graphs</em>. In <a href="http://www.cs.armstrong.edu/greenlaw/research/cubic.ps" rel="nofollow">this</a> survey paper Theorem 6.5 states</p>\n\n<blockquote>\n  <p>A maximal cut of a cubic graph can be computed in polynomial time</p>\n</blockquote>\n\n<p>Browsing through some other related results (for example <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCwQFjAA&amp;url=http://www.cs.tau.ac.il/~zwick/papers/cubic-MAXCUT-SODA.pdf&amp;ei=ycUTUvvrH6fV4gT25IHQBA&amp;usg=AFQjCNG6njoPJo3VO7GHk9dQvdiN23WOTA&amp;sig2=z706i_jNpl-wljwko3W6QQ&amp;bvm=bv.50952593,d.bGE" rel="nofollow">this</a> SODA paper) one gets the impression that this problem is actually NP complete even for cubic instances. In particular, the last paper states that this is indeed so if the graph is subcubic.</p>\n\n<p>That makes me wonder.. What\'s going on? Is the survey paper (and the result cited therein) faulty or is there some point that I am missing?</p>\n', 'ViewCount': '49', 'Title': 'Max cut in cubic graphs', 'LastActivityDate': '2013-08-20T21:01:07.307', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '13848', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '3092', 'Tags': '<complexity-theory><graph-theory><graphs><np-complete><np>', 'CreationDate': '2013-08-20T19:42:20.570', 'Id': '13845'},282214:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm interested in a slight variant of tiling, the 'jigsaw' puzzle: each edge of a (square) tile is labeled with a symbol from $\\{1\\ldots n, \\bar{1}\\ldots\\bar{n}\\}$, and two tiles can be placed adjacent to each other iff the symbol on one tile's facing edge is $k$ and the symbol on the other tile's facing edge is $\\bar{k}$, for some $k\\in\\{1\\ldots n\\}$.  Then, given a set of $m^2$ tiles, can they be placed into an $m\\times m$ square (rotating but not flipping the tiles) with all edges matching correctly?  (There's also a variant on this problem in which four $1\\times m$ 'framing' edges are provided and the pieces must fit correctly into that frame).</p>\n\n<p>I know this problem is NP-complete for sufficiently large $n$, but the bounds that I've seen on $n$ seem to be fairly large; I'm interested in the problem for small values of $n$ and in particular for $n=1$, the 'zero-one' case (where every edge is labeled either $0$ or $1$ and edges with a $0$ must be matched to edges with a $1$).  Here there are (with rotational symmetry) just six tile types (the all-zeroes tile, the all-ones tile, the tile with three zeroes and a one, the tile with three ones and a zero, and two distinct tiles with two zeroes and two ones, '0011' and '0101'), so a problem instance is just a specification of $m$ and a set of five numbers $T_{0000}$, $T_{0001}$, $T_{0011}$, $T_{0101}$, $T_{0111}$ and $T_{1111}$ (representing the count of each type of tile) with $T_{0000}+T_{0001}+T_{0011}+T_{0101}+T_{0111}+T_{1111}=m^2$.  The problem is obviously in NP (with $m$ given in unary) since a solution can simply be exhibited and then checked in polynomial (in $m$) time, but is it known to be NP-complete, or is there some dynamic programming algorithm that can be applied here?  What about the 'framed' case where the problem specification also includes the four edges of the square that are to be matched?  (Obviously if the unframed case is NP-complete the framed case almost certainly is as well)</p>\n", 'ViewCount': '173', 'Title': "Are 'zero-one' jigsaw puzzles NP-complete?", 'LastActivityDate': '2013-08-21T19:26:52.600', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '242', 'Tags': '<complexity-theory><np-complete><tiling>', 'CreationDate': '2013-08-20T21:39:23.030', 'FavoriteCount': '2', 'Id': '13849'},282215:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I found something in my notes I don't really understand, maybe you could help.</p>\n\n<p>Let $A$ = Independent Set and $B$ = Clique. Then, we clearly have</p>\n\n<ul>\n<li>$A \\in \\mathsf{NPC}$ and</li>\n<li>$B \\in \\mathsf{NP}$.</li>\n</ul>\n\n<p>Now, the claim is that $A \\setminus B \\notin \\mathsf{NP}$ with the following explanation. If it was in $\\mathsf{NP}$ then $\\mathsf{NP} = \\mathsf{NPC}$.</p>\n\n<p>Can you explain why this argument is true?</p>\n", 'ViewCount': '129', 'Title': 'Why is the difference of two NP-complete languages not in NP?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-28T05:15:34.103', 'LastEditDate': '2013-08-27T10:45:45.470', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '13980', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9844', 'Tags': '<complexity-theory><np-complete><np>', 'CreationDate': '2013-08-27T06:59:58.437', 'Id': '13955'},282216:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have encountered a surprisingly challenging problem arranging a matrix-like (List of Lists) of values subject to the following constraints (or deciding it is not possible):</p>\n\n<p>A matrix of m randomly generated rows with up to n distinct values (no repeats within the row) arrange the matrix such that the following holds (if possible):</p>\n\n<p>1) The matrix must be "lower triangular"; the rows must be ordered in ascending lengths so the only "gaps" are in the top right corner</p>\n\n<p>2) If a value appears in more than one row it must be in the same column (i.e. rearranging the order of values in a row is allowed).</p>\n\n<p>Example 1 - which has a solution</p>\n\n<p>A B<br>\nC E D<br>\nC A B</p>\n\n<p>becomes (as one solution)</p>\n\n<p>A B<br>\nE D C<br>\nA B C  </p>\n\n<p>since A, B and C all appear in columns 1, 2 and 3, respectively.</p>\n\n<p>Example 2 - which has no solution</p>\n\n<p>A B C<br>\nA B D<br>\nC B D  </p>\n\n<p>has no solution since the constraints require the third row to have the C and D in the third column which is not possible.</p>\n\n<p>In my attempts to solve this naively (e.g. by sorting shortest rows to longest and then trying to order the rows from "most in common" to least and then simple reordering within the row) there are always scenarios that it thinks aren\'t solvable but are.  In other words backtracking/exhaustive search appears to be required, which is OK but I haven\'t yet struck onto a nice concise (ideally functional) algorithm for this.</p>\n', 'ViewCount': '84', 'Title': 'Ordering a list of lists subject to constraints', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-29T00:53:53.787', 'LastEditDate': '2013-09-04T04:50:23.237', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9967', 'Tags': '<algorithms><np-complete><recursion>', 'CreationDate': '2013-09-03T21:03:11.640', 'Id': '14113'},282217:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '76', 'Title': 'Can anyone give a plain English explanation of the SAT problem?', 'LastEditDate': '2013-09-05T14:16:45.330', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '9987', 'FavoriteCount': '1', 'Body': "<p>I am new to algorithms. I Recently found the SAT problem. I tried to understand the Wikipedia article on it, but I couldn't understand much. Could someone explain what the problem is, and what is the significance of it without technical jargon?</p>\n", 'ClosedDate': '2013-09-05T12:06:40.997', 'Tags': '<complexity-theory><np>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-05T14:16:45.330', 'CommentCount': '2', 'AcceptedAnswerId': '14149', 'CreationDate': '2013-09-05T06:59:27.560', 'Id': '14139'},282218:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '179', 'Title': 'Showing NP-hardness of HALF-SAT', 'LastEditDate': '2013-09-06T16:05:06.570', 'AnswerCount': '2', 'Score': '0', 'OwnerDisplayName': 'Sebastian', 'PostTypeId': '1', 'OwnerUserId': '10048', 'Body': '<p>Yesterday I wrote my undergraduate exam in complexity theory. I had to leave off one question, which bugs me since then. Consider:\n$$ HALF-SAT = \\{ \\varphi \\mid \\varphi \\text{ is a formula which is satisfied by at least half of all assignments }\\} $$\nI\'d like to know how I can prove NP-hardness.</p>\n\n<p>FWIW, here\'s what I figured out:</p>\n\n<ol>\n<li>HALF-SAT is <em>probably</em> not $\\in$ NP, at least in no verifiable way I can think of (not really relevant to the question)</li>\n<li>SAT $\\preceq$ HALF-SAT doesn\'t work, at least not by just adding clauses with new variables, doesn\'t change satisfiable-assignments/arbitrary-assignments ratio</li>\n<li>TAUT $\\preceq$ HALF-SAT via $\\varphi \\mapsto \\varphi \\wedge x_{new}$, but that\'s coNP-hardness (together with NP-hardness this further lets me assume 1., intuitively)</li>\n</ol>\n\n<p>And no, this has nothing to do with the problem you find via googling "HALF-SAT".</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-06T16:05:06.570', 'CommentCount': '2', 'AcceptedAnswerId': '14166', 'CreationDate': '2013-09-03T16:46:25.667', 'Id': '14165'},282219:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '121', 'Title': '$\\mathsf{co\\text{-}NP}$ and Cook reductions', 'LastEditDate': '2013-09-16T07:26:19.233', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8942', 'FavoriteCount': '1', 'Body': '<p>Can someone help me understand the steps in this argument? There is a decision problem that is in $\\mathsf{co\\text{-}NP}$ (under standard Karp reductions) and is $\\mathsf{NP}$-hard with respect to Cook reductions. Does this imply that if it is in $\\mathsf{NP}$ then $\\mathsf{NP} = \\mathsf{co\\text{-}NP}$ and if so, why?</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-16T07:26:19.233', 'CommentCount': '0', 'AcceptedAnswerId': '14286', 'CreationDate': '2013-09-12T08:36:22.790', 'Id': '14278'},282220:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let $G = (V, E)$ be a connected graph and let $M\\subseteq V$. We say that a vertex $v$ is <em>marked</em> if $v\\in M$.  The problem is to find a simple path in $G$ that visits the maximum possible number of marked vertices. The associated decision problem is: is there a simple path that visits every $v\\in M$?  </p>\n\n<p>The problem is obviously more general than the problem of finding a Hamiltonian path in an arbitrary graph, so it is NP-hard.  </p>\n\n<p>I see no obvious strategy; one can't simply disregard the unmarked vertices, since they (and their incident edges) may be part of the optimal path.  Indeed, omitting them may disconnect the graph completely.</p>\n\n<p>My questions:</p>\n\n<ol>\n<li>Does this problem have a well-known name?</li>\n<li>Are there any good approximation algorithms, heuristics, or simple reductions to problems I might know more about?</li>\n<li>Where can I find this problem discussed in the literature?</li>\n</ol>\n", 'ViewCount': '201', 'LastEditorDisplayName': 'user742', 'Title': 'Find a simple path visiting all marked vertices', 'LastActivityDate': '2013-09-20T09:24:48.873', 'LastEditDate': '2013-09-20T09:24:48.873', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1786', 'Tags': '<algorithms><graph-theory><reference-request><np-hard><hamiltonian-path>', 'CreationDate': '2013-09-17T21:18:50.210', 'Id': '14390'},282221:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '237', 'Title': 'Minimal size of contracting a DAG into a new DAG', 'LastEditDate': '2013-11-03T18:16:54.507', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '10273', 'FavoriteCount': '3', 'Body': "<p>We have a DAG. We have a function on the nodes $F\\colon V\\to \\mathbb N$ (loosely speaking, we number the nodes). We would like to create a new directed graph with these rules: </p>\n\n<ol>\n<li>Only nodes with the same number can be contracted into the same new node. $F(x) \\neq F(y) \\Rightarrow x' \\neq y'$. (However, $x' \\neq y'\\nRightarrow F(x) \\neq F(y)$.)</li>\n<li>We add all the old edges between new nodes: $(x,y) \\in E \\land x' \\neq y' \\iff (x',y')\\in E'$.</li>\n<li>This new graph is still a DAG.</li>\n</ol>\n\n<p>What is the minimal $|V'|$? What is an algorithm creating a minimal new graph?</p>\n", 'Tags': '<algorithms><graphs><np-complete><reductions>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-12-10T04:56:53.490', 'CommentCount': '9', 'AcceptedAnswerId': '16277', 'CreationDate': '2013-09-23T08:24:13.643', 'Id': '14552'},282222:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'ve been reading Saxe\'s proof that 1-embeddability of integer weighted graphs is NP-Complete (<a href="http://www.math.columbia.edu/~dpt/RigidityREU/Saxe79EmbedNPHard.pdf" rel="nofollow">http://www.math.columbia.edu/~dpt/RigidityREU/Saxe79EmbedNPHard.pdf</a> Theorem 3.2).  I don\'t understand how this proof works.  </p>\n\n<p>First of all, does "1-embeddability" mean mapping each vertex to the real line?  What is meant by a "direction" as mentioned in Theorem 3.1? </p>\n\n<p>I understand that PARTITION takes a set of integers and partitions them so that when all integers of $S_1$ are added, and when all integers in $S_2$ are added, both of these sums are the same.</p>\n\n<p>In the proof of Theorem 3.2, it seems to be saying that we take this set of integers, and make them into weights of a cyclic graph.  So we have one big cycle, and the edge weights are the integers.  After this, I\'m lost.  </p>\n\n<p>Why is it that the two sets $S_1$ and $S_2$ as defined add to the same thing?</p>\n\n<p>And this proof is using a cyclic graph, how does it extend to general graphs? would we just remove an edge from this so its not cyclic?</p>\n', 'ViewCount': '27', 'Title': "Saxe's proof of 1-embeddability", 'LastActivityDate': '2013-09-25T22:58:45.047', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10335', 'Tags': '<np-complete>', 'CreationDate': '2013-09-25T22:58:45.047', 'Id': '14609'},282223:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In Chap 34.3 <em>NP-completeness and reducibility</em> of the  book, <em>Introduction to Algorithm(3rd Edition)</em>, the author states(the original text):</p>\n\n<p>We call the function <em>f</em> the <strong><em>reduction function</em></strong>, and a polynomial-time algorithm <em>F</em> that computes <em>f</em> is a <strong><em>reduction algorithm</em></strong>.</p>\n\n<p>In my mind, function should be a machine dependent implementation(a set of instructions) of the algorithm. Why does he say <em>algorithm</em> computes <em>function</em>?</p>\n', 'ViewCount': '66', 'Title': 'NP-COMPLETE:Why say "reduction algorithm computes reduction function"?', 'LastActivityDate': '2013-09-27T07:31:37.107', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '14637', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4662', 'Tags': '<np-complete><complexity-classes>', 'CreationDate': '2013-09-27T07:05:01.130', 'Id': '14636'},282224:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The CLIQUE problem -- problem of finding the maximum clique in a graph -- is NP-complete. That is, CLIQUE is</p>\n\n<ol>\n<li>in NP and </li>\n<li>there is an NP complete problem, 3-SAT for one, that reduces to CLIQUE in polynomial time.</li>\n</ol>\n\n<p>Part 2. above is fine -- all over in every resource and very well explained. For Part 1., from what I know, we need to have the following: Given a specific solution instance, we need to show that it can be verified, in polynomial time, that that solution is an answer to this problem. So for instance, given a specific graph and a subgraph of it, we should be able to check whether that subgraph is a clique of maximum size in that graph.</p>\n\n<p>The resources I\'ve read so far are phrasing this Part 1. here as "easy, straightforward, etc" or "it can be shown in $O(n^2)$ time that the given subgraph is a clique/not". However, the verification here is not just whether it\'s a clique, but also is whether it is a maximum clique in the graph. How can this be decided in polynomial time?</p>\n\n<p>What am I missing here?</p>\n', 'ViewCount': '186', 'Title': 'Showing that CLIQUE can be verified in polynomial time', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-04T06:43:02.090', 'LastEditDate': '2013-10-04T06:43:02.090', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10464', 'Tags': '<complexity-theory><decision-problem><np>', 'CreationDate': '2013-10-02T23:33:58.783', 'Id': '14765'},282225:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '103', 'Title': 'One $O(n^k)$ algorithm requiring only one $O(2^n)$ computation (for all n instances) is P or NP', 'LastEditDate': '2013-10-04T12:27:09.820', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '10499', 'FavoriteCount': '3', 'Body': '<p>Let $a$ one decision problem and $A$ one algorithm solving it in $O(n^k)$.</p>\n\n<p>But, to construct $A_n$ we need to compute certain thing (strategy path, magic numbers, ...), we can compute that using certain general algorithm $R$ in $O(2^n)$.</p>\n\n<p>Obiously, $A$ is polynomial (then, all $A_n$ are in <strong>P</strong>) and $R$ is exponential.</p>\n\n<p>We <strong>can not</strong> solve big instances because $R$ is not practical.</p>\n\n<p>But, in practice, we will can solve big instances after a big effort computing $A_n = R(n)$.</p>\n\n<p>My question is twofold:</p>\n\n<ul>\n<li><p>How are such problems considered in theory?\nHave they been studied explicitly? Is there a particular case? some literature to read?</p></li>\n<li><p>How are such problems solved in practice?\nHave they been studied in general? Is there is a particular case? some literature to read?</p></li>\n</ul>\n', 'Tags': '<complexity-theory><decision-problem><np>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-04T14:37:03.027', 'CommentCount': '4', 'AcceptedAnswerId': '14811', 'CreationDate': '2013-10-04T09:50:35.823', 'Id': '14810'},282226:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have N by N symmetrical matrix with each side having the same items.</p>\n\n<pre><code>     A    B    C    D\nA    0\nB    4    0\nC    8    3    0\nD    3    1    8    0\n</code></pre>\n\n<p>In reality this would be much larger (100 x 100)</p>\n\n<p>I am trying to find a subset of a fixed size in this matrix with the highest score. For example the selection ABC would be:</p>\n\n<pre><code>  AB = 4;\n  AC = 8;\n  BC = 3;\nTotal  15\n</code></pre>\n\n<p>It is kinda like traveling salesman problem, but with the final distance only determined by the final selection. </p>\n', 'ViewCount': '82', 'Title': 'What kind of NP problem would this be', 'LastEditorUserId': '10548', 'LastActivityDate': '2013-10-08T22:44:44.390', 'LastEditDate': '2013-10-07T15:44:02.447', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10548', 'Tags': '<complexity-theory><np>', 'CreationDate': '2013-10-07T15:04:18.977', 'Id': '14886'},282227:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I can't seem to find this stated explicitly anywhere, which makes me wonder if I have it all wrong.</p>\n\n<p>So first, let's say we view problems in NP as degenerate problems in FNP, where the codomain of the binary relation is the set {true, false}.</p>\n\n<p>Second, FSAT is known to be FNP-complete, meaning that everything in FNP can be reduced to it in polynomial time. Also, FSAT is polynomial-time reducible to SAT, which is NP-complete, and then a SAT problem can be changed to anything else in NP-complete in polynomial time. So this shows that everything in FNP-complete can be changed to something in NP-complete in polynomial time.</p>\n\n<p>So the first thing shows that NP-complete $\\subset$ FNP-complete, but then the second thing shows that FNP-complete $\\subset$ NP-complete, which means that NP-complete = FNP-complete.</p>\n\n<p>So given that, it seems like everything in FNP can be reduced to any NP-complete problem in polynomial-time.</p>\n\n<p>Am I going somewhere wrong here, or do I have this all right?</p>\n", 'ViewCount': '67', 'Title': 'Does FNP-complete = NP-complete?', 'LastActivityDate': '2013-10-09T00:41:48.237', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10594', 'Tags': '<complexity-theory><np-complete><decision-problem><search-problem>', 'CreationDate': '2013-10-09T00:41:48.237', 'Id': '14937'},282228:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>3-PARTITION is <a href="http://en.wikipedia.org/wiki/Strongly_NP-complete">strongly NP-complete</a>, i.e. it remains NP-complete even if the input is given in unary.</p>\n\n<p>I\'m searching two or three examples of (possibly well-known) <em>non-numeric problems</em> that have been proved to be NP-complete using a reduction from 3-PARTITION (and the reduction obviously relies on the strongly np-completeness). I would like the references to the original papers.</p>\n', 'ViewCount': '193', 'Title': 'Reduction examples from the strongly NPC problem 3-PARTITION', 'LastActivityDate': '2014-03-08T12:01:35.653', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '15028', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '140', 'Tags': '<reference-request><np-complete>', 'CreationDate': '2013-10-12T11:57:11.637', 'FavoriteCount': '1', 'Id': '15015'},282229:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1579', 'Title': u'Traveling Salesman - Held\u2013Karp algorithm - BIG improvement', 'LastEditDate': '2013-10-17T22:35:11.870', 'AnswerCount': '1', 'Score': '-9', 'PostTypeId': '1', 'OwnerUserId': '10572', 'FavoriteCount': '1', 'Body': u'<p>I think that I found a polynomial solution to TSP problem. How ever in order to prove the "think" there are many questions need to be answered. I hope you be able to help me.</p>\n\n<ul>\n<li><a href="http://cs.stackexchange.com/questions/14998/traveling-salesman-heldkarp-algorithm-improvement">Part 0</a> - The first question that I asked about it, comes with <a href="https://drive.google.com/folderview?id=0B1ttIJPHEPWFTUVfSFBYb185V1k&amp;usp=sharing" rel="nofollow">sample source code</a>.</li>\n<li><strong>Part 1</strong> - The fundamentals, the basic theory of my algorithm.</li>\n<li><a href="http://cs.stackexchange.com/questions/16165/traveling-salesman-using-the-shorter-path-in-order-to-find-1">Part 2</a> - Stop condition number 1: Using the shorter path in order to find 1 </li>\n<li><a href="http://cs.stackexchange.com/questions/16166/traveling-salesman-intersections">part 3</a> - Stop condition number 2: Intersections</li>\n<li><a href="http://cs.stackexchange.com/questions/16175/traveling-salesman-intersections-looping">Part 4</a> - Stop condition number 3: Intersections Looping</li>\n<li><a href="http://cs.stackexchange.com/questions/16177/traveling-salesman-exact-algorithm">final part</a> - Exact solution</li>\n</ul>\n\n<h2>Base assumption:</h2>\n\n<p><strong>If we found the shortest route for a given input of $N$ cities (let it be called main route), so each sub route between any 2 cities on the "main route" will be also the shortest route.</strong></p>\n\n<p>This assumption is easy to prove. Lets say we found a shorter route between two cities on the "Main route". So now we can improve our main route and make him shorter, how ever this is not possible as the main route is the shortest rout by definition.</p>\n\n<p>Also I want to show you the definition of sub route,(you can skip this if you think it\'s to obvious) I will show it by example. If I have the next route: A,C,E,F,H,K so sub route between C and F is: A,C,E,F when I want to find a shorter route for this given sub route, I can only change the places of the cities C, and E, there could be only 2 options for sub routes between A, and F.</p>\n\n<p>Now I will try to show you my implementation, and I want you tell me if I made any bad assumptions or having bad calculations.</p>\n\n<p>Lets say you been given the next input of Cities: A,B,C,D,E,F,H. In order to find the shortest path you will need to perform 720 tests($(7-1)!$). I want to show you how you can cut half of those tests. </p>\n\n<p>When you will start to calculate, this is how your first tests will look like:</p>\n\n<ul>\n<li>A->B->C->D->E->F->G</li>\n<li>A-><strong>C</strong>-><strong>B</strong>->D->E->F->G</li>\n<li>A-><strong>C</strong>-><strong>B</strong>->D->E-><strong>G</strong>-><strong>F</strong></li>\n<li>A->B->C->D->E-><strong>G</strong>-><strong>F</strong> </li>\n<li>A->B->C->D->F-><strong>E</strong>-><strong>G</strong></li>\n<li>A-><strong>C</strong>-><strong>B</strong>->D-><strong>F</strong>-><strong>E</strong>->G</li>\n</ul>\n\n<p>When you start calculating test 1, you should stop when reaching city D. Stop and calculate what would be the shortest path, starting at A, finishing at D and going thru B,C. Latter you can assume that any path starting with A, going thru C,B and finished in D no matter how it would continue, if it will not start with the shortest path that you found, it will not be the shortest path. So now you can skip all the tests that start with A,B,C,D or A,C,B,D, depending on which of those paths is shorter.</p>\n\n<p>Now in order to save more than just $\\frac{(N-1)!}{2}$ calculation I will create a longer sub routes and calculate the shortest path between them, dropping all other options. The only problem with that, is I may repeatedly calculate the same sub routes, as I may find them in different parts of the main route. For example: for the given route: A,B,C,D,E,F,G,H lets say that I found the shortest route between B to E thru C,D. But that was just from my first test of: A,B,C,D,E,F,G,H. Later I will come in to testing: A,F,G,H,B,D,C,E as eventually I will have to test all the options. So again in order to drop part of those options I will try to find what will be the shortest path between B to E thru D,C(Remember I can can drop calculation from any part of the route) and will have to calculate it again. To avoid that I will store all the sub routes calculation in to maps.</p>\n\n<p>So lets see how long it will take me to create all the maps with K cities length. First I need to select the starting city, got N options for that, now select the last city, got $N -1$ options for that, and now select all the cities in between order is not metter and without repetition. I will use <a href="http://www.mathsisfun.com/combinatorics/combinations-permutations-calculator.html" rel="nofollow">this</a> formula for that: </p>\n\n<blockquote>\n  <p>$\\frac{N!}{ (N - R)!R!}$</p>\n</blockquote>\n\n<p>In our case $N$ is $N-2$ and $R$ is $K - 2$ so we will get:</p>\n\n<blockquote>\n  <p><strong>$\\frac{N!} {(N - K)!(K - 2)!}$</strong> The number of $K$ cities length maps from $N$ cities.</p>\n</blockquote>\n\n<p>Now lets assume that we created all the $K$ length maps and we want to create $2K - 1$ length maps. We do not need to start from 0, we can use our $K$ length maps to help us. Like this:</p>\n\n<p>Lets say we want to create the next map of 7 cities and we already created a map of 4 cities. So the cities are: A,B,C,D,E,F,H. Our first test will be: A,B,C,D,E,F,H. We can save us lots of time if we split it in two maps of 4 cities. \n - Map 1: From A to D thru B,C\n - Map 2: From D to H thru E,F</p>\n\n<p>Lets see how many maps like this could be: There are 5 options for the common city in the middle and there are $2C4$ options for the first two cities( 2 choice 4, selecting 2 cities out of 4. Order is not important, repetition is not allowed) and the last 2 cities is just what reminds. After summing it up we will have get 30 options to create 1 map of 7 cities.\nLets say it in more general way: To create all the maps for K length cities(assuming that we already created all the $\\frac{(K + 1)}{2}$ length cities maps) will be: $K - 2$ options for the common city at the middle. And $\\frac{(K - 3)} {2}C(K - 3)$ options for the cities that belongs to Map 1. Summing all together we will get:</p>\n\n<blockquote>\n  <p>$\\frac{(k - 2)!}{(\\frac{K - 3}{2}!)^2}$ The number of calculation need to be done to create $K$ cities length map when we already created $\\frac{K + 1}{2}$ cities length map.</p>\n</blockquote>\n\n<p>Now in order to find the shortest path for $N$ cities length we need to create all the maps with $\\frac{N + 1}{2}$ length and just one map with $N$ length. In cases when $N$ is not belong to $f(x) = f(x - 1)  * 2 - 1$; we will still need to create the biggest maps length group possible but we will have more than 1 city in common when we will split the problem in 2 maps. For example when N = 10. We will create all the 4 length maps, and all the 7 length maps. Lets give a sample: For the given cities A,B,C,D,E,F,G,H,I,A find the shortest path. We will split it in two maps of 7.</p>\n\n<ul>\n<li>Map 1: From A to G thru B,C,D,E,F</li>\n<li>Map 2: From D to A thru E,F,G,H,I</li>\n</ul>\n\n<p>For map 1 we will choose who is going to be the last city, we have 8 options to that.\nAnd we have $5C8$ options for the cities of the map 1, and the rest is going to map 2. You may ask yourself now how could it be that map 1 will actually have the exact common cities with map 2, isn\'t there a chance that they be ordered in some other way. Well according to my base assumption there isn\'t. so if we will sum it all together we will get: 448 options for that. Now lets say it in general way: To find the shortest path for input of $N$ cities, we will first need to find all the maps with $length &lt; N$ that belongs to $f(x) = f(x - 1)  * 2 - 1; F(0) = 4$. Lets say that the longest map of all those maps is G length and $f^{-1}(G) = G\'$( sorry for not knowing how to express $G$ with $N$). So we will have $N - 2$ options for the last city of map 1 and $(G - 2)C(N - 2)$ summing it up will give:</p>\n\n<blockquote>\n  <p>$\\frac{(N - 2)!} {(N - G)!(G - 2)!}$</p>\n</blockquote>\n\n<p>So the efficiency of finding the shortest path for N cities will be(Also added the time it will take to create the first 4 length maps) </p>\n\n<blockquote>\n  <p>$(\\frac{N(N-1)(N-2)(N-3)}{2}) + (\\sum_{i}^{G\'}\\frac{(f(i) - 2)!}{(\\frac{f(i) - 3}{2}!)^2})+ (\\frac{(N - 2)!} {(N - G)!(G - 2)!})$</p>\n  \n  <p>Using $f(x)=f(x\u22121)\u22172\u22121;F(0)=4$</p>\n</blockquote>\n\n<p>I think its better than $O(2^N)$</p>\n\n<p>Please help me to do the math, and tell me if I have any mistakes in my math or conclusions. Also please avoid writing an answers without fully understanding what I stated you are welcome to ask me more in <a href="http://chat.stackexchange.com/rooms/11065/tsp-chat">chat</a>.</p>\n', 'ClosedDate': '2014-02-02T11:24:39.057', 'Tags': '<complexity-theory><np-complete><np-hard><traveling-salesman>', 'LastEditorUserId': '10572', 'LastActivityDate': '2013-10-18T07:59:35.663', 'CommentCount': '12', 'CreationDate': '2013-10-14T14:53:59.097', 'Id': '16076'},282230:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So, as is known, ILP's 0-1 decision problem is NP-complete. Showing it's in NP is easy, and the original reduction was from SAT; since then, many other NP-Complete problems have been shown to have ILP formulations (which function as reductions from those problems to ILP), because ILP is very usefully general.</p>\n\n<p>Reductions <strong>from</strong> ILP seem much harder to either do myself or track down.</p>\n\n<p>Thus, my question is, does anyone know a poly-time reduction from ILP to SAT, that is, demonstrating how to solve any 0-1 ILP decision problem using SAT?</p>\n", 'ViewCount': '278', 'Title': 'Poly-time reduction from ILP to SAT?', 'LastActivityDate': '2013-10-15T04:46:34.827', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16090', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '10743', 'Tags': '<np-complete><satisfiability><integer-programming>', 'CreationDate': '2013-10-14T21:26:54.377', 'FavoriteCount': '2', 'Id': '16088'},282231:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '102', 'Title': 'Direct reduction from Near-Clique to Clique', 'LastEditDate': '2013-10-22T13:16:24.780', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10913', 'FavoriteCount': '2', 'Body': '<p>An undirected graph is a Near-Clique if adding one more edge would make it a clique. Formally, a graph $G=(V,E)$ contains a near-clique of size&nbsp;$k$ if there exists $S\\subseteq V$ and $u,v\\in S$ where $|S|=k$, $(u,v)\\notin E$, and $S$&nbsp;forms a clique in $(V,E\\cup\\{(u,v)\\})$. How can I show a direct reduction from Near-Clique to Clique?</p>\n', 'Tags': '<complexity-theory><graph-theory><reductions><np>', 'LastEditorUserId': '9550', 'LastActivityDate': '2013-10-23T03:08:34.873', 'CommentCount': '1', 'AcceptedAnswerId': '16349', 'CreationDate': '2013-10-22T09:31:12.100', 'Id': '16325'},282232:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I understood that we can apply <a href="http://en.wikipedia.org/wiki/Polynomial-time_approximation_scheme" rel="nofollow" title="fully polynomial-time approximation scheme">FPTAS</a> to the weak NP problems like 0-1 knapsack.</p>\n\n<p>But why we cant apply the same principle to the strong NP problems like bin packing? I also checked wiki page about the same but understood very less.</p>\n', 'ViewCount': '225', 'Title': "Why we can't have FPTAS for strong NP complete problems", 'LastActivityDate': '2013-10-23T21:56:48.887', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '4', 'OwnerDisplayName': 'user2159588', 'PostTypeId': '1', 'OwnerUserId': '10944', 'Tags': '<algorithms><np-complete>', 'CreationDate': '2013-10-22T06:25:49.193', 'Id': '16365'},282233:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '254', 'Title': 'Does coNP-completeness imply NP-hardness?', 'LastEditDate': '2013-10-23T21:26:48.343', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '8877', 'FavoriteCount': '1', 'Body': '<p>Does coNP-completeness imply NP-hardness? In particular, I have a problem that I have shown to be coNP-complete. Can I claim that it is NP-hard? I realize that I can claim coNP-hardness, but I am not sure if that terminology is standard.</p>\n\n<p>I am comfortable with the claim that if an NP-complete problem belonged to coNP, then NP=coNP. However, <a href="http://www.csie.ntu.edu.tw/~lyuu/complexity/2004/c_20041117.pdf" rel="nofollow">these lecture notes</a> state that if an NP-hard problem belongs to coNP, then NP=coNP. This would then suggest that I cannot claim that my problem is NP-hard (or that I have proven coNP=NP, which I highly doubt).</p>\n\n<p>Perhaps, there is something wrong with my thinking. My thought is that a coNP-complete problem is NP-hard because:</p>\n\n<ol>\n<li>every problem in NP can be reduced to its complement, which will belong to coNP.</li>\n<li>the complement problem in coNP reduces to my coNP-complete problem.</li>\n<li>thus we have a reduction from every problem in NP to my coNP-complete, so my problem is NP-hard.</li>\n</ol>\n', 'Tags': '<complexity-theory><np-hard>', 'LastEditorUserId': '8877', 'LastActivityDate': '2013-10-24T14:03:18.837', 'CommentCount': '1', 'AcceptedAnswerId': '16376', 'CreationDate': '2013-10-23T19:46:17.283', 'Id': '16371'},282234:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem in understanding how to prove the following question.</p>\n\n<p>Let $Q = \\langle\\max,f,L\\rangle$ be an NPO-Problem, where $f$ only supports integers. \nDefine $$L_Q^* =\\{(x_0,1^k) : \\exists x . L(x_0,x) \\land f(x_0,x) \\geq k\\}.$$\nThe instance of $x_0$ is binary coded, while the numerical parameter $k$ is unary coded. Show that if $L_Q^*$ is NP-complete, then there is no FPTAS for $Q$.\nIt can be assumed that $P \\neq NP$.</p>\n\n<p>Normally I have some ideas, but this time I am really stumped. My only idea was to use the fact that if $L_Q^*$ has an approximation scheme, then $f$ must run in time polynomial in $|x_0|+|x|$.</p>\n', 'ViewCount': '111', 'Title': 'NP-hardness and FPTAS', 'LastEditorUserId': '10940', 'LastActivityDate': '2013-10-30T09:53:21.487', 'LastEditDate': '2013-10-24T10:36:46.610', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16378', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10940', 'Tags': '<np-hard><approximation>', 'CreationDate': '2013-10-23T21:18:59.300', 'Id': '16373'},282235:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m interested in the question of how best to teach NP-completeness to computer science majors.  In particular, should we teach it using Karp reductions or using Turing reductions?</p>\n\n<p>I feel that the concepts of NP-completeness and reductions are something that every computer science major ought to learn.  However, when teaching NP-completeness, I\'ve noticed that the use of Karp reductions has some downsides.</p>\n\n<p>First of all, Karp reductions seem to be unnecessarily confusing for some students.  The intuitive notion of a reduction is "if I have an algorithm to solve problem X, then I can use it to solve problem Y, too".  That\'s very intuitive -- but it maps much better to Turing reductions than to Karp reductions.  As a result, I see students who are trying to prove NP-completeness get led astray by their intuition and form an incorrect proof.  Trying to teach both kinds of reductions and emphasizing this aspect of Karp reductions sometimes feels a little bit like needless formalism and takes up unnecessary class time and student attention on what feels like an inessential technical detail; it\'s not self-evident why we use this more restricted notion of reduction.</p>\n\n<p>I do understand the difference between Karp reductions and Turing (Cook) reductions, and how they lead to different notions of NP-completeness.  I realize that Karp reductions give us a finer granularity of distinctions between complexity classes.  So, for serious study of complexity theory, Karp reductions are obviously the right tool.  But for computer science students who are just learning this and are never going to go into complexity theory, I\'m uncertain whether this finer distinction is critical is critical for them to be exposed to.</p>\n\n<p>Finally, as a student, I remember feeling puzzled when I ran across a problem like "tautology" -- i.e., given a 3CNF formula, check whether it is a tautology.  What was confusing was that this problem is clearly hard: any polynomial-time algorithm for it would imply that $P=NP$; and solving this problem is obviously as hard as solving the tautology problem.  However, even though intuitively tautology is as hard as satisfiability, tautology is not NP-hard.  Yes, I understand today why this is the case, but at the time I remember being puzzled by this.  (What went through my head once I finally understood was: Why do we draw this distinction between NP-hard and co-NP-hard, anyway?  That seems artificial and not very well-motivated by practice.  Why do we focus on NP rather than co-NP?  They seem equally natural.  From a practical perspective, co-NP-hardness seems to have essentially the same practical consequences as NP-hardness, so why do we get all hung up on this distinction?  Yes, I know the answers, but as a student, I remember this just made the subject feel more arcane and poorly motivated.)</p>\n\n<p>So, my question is this.  When we teach NP-completeness to students, is it better to teach using Karp reductions or Turing reductions?  Has anyone tried teaching the concept of NP-completeness using Turing reductions?  If so, how did it go?  Would there be any non-obvious pitfalls or disadvantages if we taught the concepts using Turing reductions, and skipped the conceptual issues associated with Karp reductions?</p>\n\n<hr>\n\n<p>Related: see <a href="http://cs.stackexchange.com/a/11124/755">http://cs.stackexchange.com/a/11124/755</a> and <a href="http://cs.stackexchange.com/a/16376/755">http://cs.stackexchange.com/a/16376/755</a>, which mentions that the reason why we use Karp reductions in the literature is because it enables us to distinguish between NP-hardness and co-NP-hardness.  However, it does not seem to give any answer that\'s focused on a pedagogical perspective of whether this ability is critical for the learning objectives of an algorithms class that should be taken by every CS major.  See also <a href="http://cstheory.stackexchange.com/q/138/5038">http://cstheory.stackexchange.com/q/138/5038</a>, which has a similar discussion.</p>\n', 'ViewCount': '210', 'Title': 'Teaching NP-completeness - Turing reductions vs Karp reductions', 'LastEditorUserId': '755', 'LastActivityDate': '2013-10-24T05:18:25.377', 'LastEditDate': '2013-10-24T05:18:25.377', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<np-complete><reductions><education>', 'CreationDate': '2013-10-23T23:45:23.683', 'FavoriteCount': '1', 'Id': '16386'},282236:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am well aware of the DP solution to the traveling salesman problem; also known as the Held and Karp algorithm for TSP.</p>\n\n<p>I have implemented it with bitmask, and it's something like this:</p>\n\n<pre><code>int TSP(int pos, int bitmask) {\n    if (bitmask == (1&lt;&lt;(K+1))-1)\n        return dist[pos][0];              // Completing the round trip\n\n    if (memo[pos][bitmask] != -1)\n        return memo[pos][bitmask];\n\n    int answer = INF;\n    for (int i = 0; i &lt;= K; i++) {\n        if (i != pos &amp;&amp; (bitmask &amp; (1 &lt;&lt; i)) == 0)\n               answer = Math.min(answer, dist[pos][i] + TSP(i, bitmask | (1 &lt;&lt; i)));\n    }\n\n    return memo[pos][bitmask] = answer;     // Storing the best dist for the set of traveled cities and untraveled ones.\n</code></pre>\n\n<p>This algorithm is quite fast; computation of 15 cities is relatively fast enough. However, I notice that it could be further improved to accommodate around 20 cities.</p>\n\n<p>1) If the dist matrix is symmetrical, perhaps we can make use of this property to prevent repeated calculations. (e.g a->b->c->d->a == a->d->c->b->a)</p>\n\n<p>2) Using both a upper and lower bound to prune. The above algorithm is able to get its first possible optimal solution in a very short time, might be able to use that.</p>\n\n<p>I have tried to improve the algorithm based on the aforementioned two principles. However, I don't get a better algorithm.</p>\n\n<p>Am I making a futile attempt at improving something impossible? What do you think?</p>\n", 'ViewCount': '89', 'Title': 'Traveling Salesman with Held and Karp Algorithm', 'LastActivityDate': '2013-10-27T15:00:58.337', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10999', 'Tags': '<graph-theory><np-complete><dynamic-programming><traveling-salesman>', 'CreationDate': '2013-10-27T15:00:58.337', 'Id': '16474'},282237:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '111', 'Title': 'Complexity of deciding the satisfiability of a quasi-monotone CNF formula', 'LastEditDate': '2013-11-01T22:52:30.737', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '10228', 'FavoriteCount': '2', 'Body': '<p>A <em>quasi-monotone CNF formula</em> is a formula where each variable appears at most once as a positive literal (and any number of times as a negative literal). </p>\n\n<p>What is the complexity of deciding its satisfiability?</p>\n', 'Tags': '<complexity-theory><np-complete><satisfiability><decision-problem>', 'LastEditorUserId': '10228', 'LastActivityDate': '2013-11-01T22:52:30.737', 'CommentCount': '0', 'AcceptedAnswerId': '16492', 'CreationDate': '2013-10-28T00:04:09.943', 'Id': '16483'},282238:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The TWICE-3SAT is defined as \n$$TWICE-3SAT=\\{(\\varphi) | \\varphi \\text{ has at least two different satisfying assignments } \\}$$ \nHow do we prove it is in NP-complete?</p>\n', 'ViewCount': '134', 'ClosedDate': '2013-11-11T13:48:09.013', 'Title': 'Proving TWICE-3SAT is NP-complete', 'LastActivityDate': '2013-10-28T14:15:23.030', 'AnswerCount': '2', 'CommentCount': '8', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '7269', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'CreationDate': '2013-10-28T10:45:48.040', 'Id': '16493'},282239:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>To continue this <a href="http://cs.stackexchange.com/questions/16483/complexity-of-deciding-the-satisfiability-of-a-quasi-monotone-cnf-formula">post</a>, let us define the Monotone$(+, 2^-)$-SAT problem: </p>\n\n<p>Given a monotone CNF formula $F^+$, where each variable appears exactly once (as a positive literal), and a monotone 2-CNF formula $F_2^-$ defined on the same variables as $F^+$, where all variables are negated. Is $F^+ \\land F_2^-$ satisfiable ?</p>\n\n<p>Is this problem NP-complete?</p>\n', 'ViewCount': '128', 'Title': 'Complexity of Monotone (+,2) SAT problem?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-05T16:22:04.540', 'LastEditDate': '2013-11-05T16:22:04.540', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '10228', 'Tags': '<complexity-theory><np-complete><decision-problem><complexity-classes>', 'CreationDate': '2013-11-01T22:56:57.180', 'FavoriteCount': '1', 'Id': '16634'},282240:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $\\phi$ be a 3-CNF formula over variables $x_1,x_2,\\ldots,x_n$. Every variable $x_i$, $i \\in [n]$, occurs equally many times as a positive literal and as a negative literal in $\\phi$. </p>\n\n<p>Is it NP-complete to decide the satisfiability of such a formula? Assuming it is, I would be interested in knowing if it has a special name. Has it perhaps also been investigated somewhere?</p>\n', 'ViewCount': '182', 'Title': '3-SAT where variables occur equally many times as a positive literal and as a negative literal', 'LastActivityDate': '2013-11-06T11:50:13.120', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16765', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<complexity-theory><np-complete><satisfiability><decision-problem>', 'CreationDate': '2013-11-03T14:27:40.600', 'Id': '16672'},282241:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '82', 'Title': 'Is MIN or MAX-True-2-XOR-SAT NP-hard?', 'LastEditDate': '2013-11-04T19:22:00.093', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '1', 'Body': '<p><strong>Is there a proof or reference that $\\left\\{\\text{MAX},\\text{MIN}\\right\\}\\text{-True-2-XOR-SAT}$ is $NP$-hard, or that it (the decision version) is in $P$?</strong></p>\n\n<p>Let:</p>\n\n<p>$$\\Phi\\left(\\mathbf x\\right)={\\huge\\wedge}_{i}^{n}C_i,\\\\\n\\forall_{C_i} \\left.C_i=(p \\oplus q)\\right|_{\\left(p\\in \\mathbf x \\vee\\neg p\\in\\mathbf x\\right),\\left(q\\in \\mathbf x \\vee\\neg q\\in\\mathbf x\\right)}\n$$</p>\n\n<p>The $\\text{2-XOR-SAT}$ problem is to find a satisfying assignment of $\\mathbf x$ that would make $\\Phi\\left(\\mathbf x\\right)=T$. This is in $P$, as it can be encoded in a set of linear equations mod $2$.</p>\n\n<p>The $\\left\\{\\text{MAX},\\text{MIN}\\right\\}\\text{-True-2-XOR-SAT}$ problems are to maximize or minimize the number of true values in $\\mathbf x$, respectively, subject to the constraint that $\\Phi\\left(\\mathbf x\\right)=T$.</p>\n', 'Tags': '<complexity-theory><np-hard><satisfiability>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-11-04T19:22:00.093', 'CommentCount': '5', 'AcceptedAnswerId': '16689', 'CreationDate': '2013-11-03T23:08:22.110', 'Id': '16682'},282242:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What is the complexity of MIN-2-XOR-SAT and MAX_2-XOR-SAT?  Are they in P?  Are they NP-hard?</p>\n\n<p>To formalize this more precisely, let</p>\n\n<p>$$\\Phi\\left(\\mathbf x\\right)={\\huge\\wedge}_{i}^{n}C_i,$$</p>\n\n<p>where $\\mathbf{x} = (x_1,\\dots,x_m)$ and each clause $C_i$ is of the form $(x_i \\oplus x_j)$ or $(x_i \\oplus \\neg x_j)$.</p>\n\n<p>The $\\text{2-XOR-SAT}$ problem is to find an assignment to $\\mathbf{x}$ that satisfies $\\Phi$.  This problem is in $P$, as it corresponds to a system of linear equations mod $2$.</p>\n\n<p>The $\\text{MAX-2-XOR-SAT}$ problem is to find an assignment to $\\mathbf{x}$ that maximizes the number of clauses that are satisfied.  The $\\text{MIN-2-XOR-SAT}$ problem is to find an assignment to $\\mathbf{x}$ that minimizes the number of clauses that are satisfied.  What are the complexities of these problems?</p>\n\n<p>Inspired by <a href="http://cs.stackexchange.com/q/16682/755">Is MIN or MAX-True-2-XOR-SAT NP-hard?</a></p>\n', 'ViewCount': '108', 'Title': 'MIN-2-XOR-SAT and MAX-2-XOR-SAT: are they NP-hard?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-04T19:19:55.910', 'LastEditDate': '2013-11-04T19:19:55.910', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<complexity-theory><optimization><np-hard><satisfiability>', 'CreationDate': '2013-11-04T03:28:01.333', 'Id': '16691'},282243:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm studing P and NP complexity classes. I like know, why is SAT not in P? Is it because I can not determine if any Boolean expression is satisfiable?</p>\n", 'ViewCount': '54', 'ClosedDate': '2013-11-08T13:17:52.880', 'Title': 'Why is SAT not in P?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-08T13:16:31.463', 'LastEditDate': '2013-11-08T13:16:31.463', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11241', 'Tags': '<complexity-theory><satisfiability><p-vs-np>', 'CreationDate': '2013-11-07T23:50:44.720', 'Id': '16807'},282244:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Consider the following 3-SAT variant defined over the variables $x_1,\\ldots,x_n$. In the $k$P$k$N-3SAT problem each variable $x_j$, $j \\in [n]$, occurs exactly $k$ times as a positive literal in $\\phi$, and exactly $k$ times as a negative literal in $\\phi$, where $\\phi$\xa0is a 3-CNF formula. The problem is then to decide if such a formula has a satisfying assignment.</p>\n\n<blockquote>\n  <p>Is the $k$P$k$N-3SAT problem NP-complete?</p>\n</blockquote>\n\n<p>In the $m$P$n$N-SAT problem each positive literal occurs exactly $m$ times in $\\phi$, and each negative literal occurs exactly $m$ times in $\\phi$, where $\\phi$ is a CNF formula. It was shown in [1] that $2$P$1$N-SAT is NP-complete. This hints that the $k$P$k$N-3SAT problem is hard as well. </p>\n\n<p>The $1$P$1$N-SAT is apparently easy, see a related question and answer <a href="http://cs.stackexchange.com/a/16765/472">here</a>. Is $k$P$k$N-3SAT perhaps hard already for $k \\geq 2$?</p>\n\n<hr>\n\n<p>[1] Yoshinaka, Ryo. "Higher-order matching in the linear lambda calculus in the absence of constants is NP-complete." Term Rewriting and Applications. Springer Berlin Heidelberg, 2005. 235-249.</p>\n', 'ViewCount': '138', 'Title': 'Is the $k$P$k$N-3SAT problem NP-complete?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-13T13:37:40.000', 'LastEditDate': '2013-11-08T11:27:14.390', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16822', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<complexity-theory><np-complete><satisfiability><decision-problem>', 'CreationDate': '2013-11-08T11:13:22.193', 'Id': '16817'},282245:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '638', 'Title': 'Is Dominosa NP-Hard?', 'LastEditDate': '2013-11-12T22:26:57.560', 'AnswerCount': '2', 'Score': '20', 'OwnerDisplayName': 'user987415', 'PostTypeId': '1', 'OwnerUserId': '10573', 'FavoriteCount': '4', 'Body': '<p>Dominosa is a relatively new puzzle game. It is played on an $(n+1)\\times(n+2)$\n  grid. Before the game begins, the domino bones  $\\left(0,0\\right),\\left(0,1\\right),\\ldots,\\left(n,n\\right)$\n  are placed on the grid (constituting a perfect tiling). In the next step, the domino bones are hidden, leaving only the numbers revealed. The purpose of the game is to recover the original arrangement of the domino bones.\nYou can play the game here: <a href="http://www.puzzle-dominosa.com/">http://www.puzzle-dominosa.com/</a>:</p>\n\n<p>Rules:</p>\n\n<blockquote>\n  <p>The rules are simple. You have to find the location of all the dominoes on the grid. A domino is a pair of numbers. You can only have one of each pair.</p>\n</blockquote>\n\n<p>I have some polynomial algorithms that solve a relatively small part of the puzzle. I could also show that typical Dominosa grids have at least $2^{\\frac{n}{2}+o\\left(n\\right)}$ solutions.</p>\n\n<p>Is Dominosa NP-Hard? </p>\n', 'Tags': '<complexity-theory><np-hard><board-games><tiling>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-12-10T15:02:32.800', 'CommentCount': '9', 'CreationDate': '2013-09-12T12:18:43.740', 'Id': '16850'},282246:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I would like to show that Quadratic Programming is NP-hard.</p>\n\n<p>I am currently reading a couple of papers which state that QP is NP-Hard and prove it by transforming SAT to QP, however I am finding the diction quite tough since I am just a beginner in the field. Would anyone happen to know the answer to this question who can maybe explain it to me in simpler terms?</p>\n', 'ViewCount': '66', 'Title': 'Transforming SAT to Quadratic Programming in polynomial time', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-12T16:52:50.120', 'LastEditDate': '2013-11-12T16:52:50.120', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '17952', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11330', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-11-12T06:44:40.763', 'Id': '17946'},282247:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>1-in-3 SAT is the set of 3CNF formulas with no negated variables such that\nthere is a satisfying assignment that makes exactly one variable in each clause true. Show 1-in-3 SAT is NP-complete</p>\n\n<p>Plan on doing a reduction from 3SAT.</p>\n\n<p>My confusion arises from the "no negated variables". You need some way of representing negated variables. How do you do that? I can do the reduction from 3SAT to 1-in-3 SAT without the restraint that there are no negated variables. I\'m just not sure how to do it with this constraint.</p>\n', 'ViewCount': '267', 'Title': 'Show 1-in-3 SAT', 'LastActivityDate': '2013-11-12T18:05:05.747', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10599', 'Tags': '<np-complete>', 'CreationDate': '2013-11-12T17:59:40.310', 'Id': '17963'},282248:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For a homework question I need to show an explicit reduction from independent set (of size k) to CNF-SAT. I don\'t have anything formal written out so I will just give an idea of what I think needs to be done, any feedback or hint/help would be greatly appreciated:</p>\n\n<p>So I figure that given my a graph $G$ (it doesn\'t state in the question but I am guessing it is undirected graph) and an integer $G$ my variables for the boolean formula that I will need to define composes of the following:</p>\n\n<p>$var(\\phi) = \\{s_{ij}\\ | 1\\leq i \\leq k, j\\in{V}\\}$ where $s_{ij}$ is the $i$-th element of the independent set $S$ is $j$, which is node in the graph $G$. Now I want to convert this into a series of clauses that will be a series of conjunctions so I have these in mind:</p>\n\n<p>Have one series of conjunctions that will be every "not pair" of elements, i.e. $(\\overline{s_{ia}}\\vee \\overline{s_{ib}})$, that will indicate that no two nodes are the same in the $i$-th spot in the independent set S. Another series of conjunctions that will consists of every 2,3,4, all the way to k pairs of elements such that no elements in the clause share an edge. Then we take the conjunctions of these two major groups and that will be my Boolean formula. Like I said any feedback or if you want me to clarify something would be great!</p>\n', 'ViewCount': '79', 'ClosedDate': '2013-11-13T22:06:09.400', 'Title': 'Giving an explicit reduction for IND-SET $\\leq_{p}$ CNF-SAT', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T22:05:35.303', 'LastEditDate': '2013-11-13T22:05:35.303', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10880', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-11-12T22:18:12.250', 'Id': '17972'},282249:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm a little stuck on this question, any help would be appreciated!</p>\n\n<p>Given that the Hamiltonian Path (HP) and the Hamiltonian Circuit/Cycles (HC) problems are known to be NP-complete, show that HCE is NP-complete.</p>\n\n<p>HCE: Given an undirected graph G and an edge e of G, does G have a Hamiltonian circuit/cycle that uses e?</p>\n\n<p>I've tried to approach this by showing that HC $\\leq$ HCE, but I'm wondering if my approach is too convoluted.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>I think I have a solution.\nConsider a graph $G=(V,E)$ where $V$ is the set of vertices in $G$,\nand $E$ is the set of edges in $G$. Let $f(G)=G'=(V',E')$ where</p>\n\n<p>\\begin{alignat*}{1}\nV'= &amp; V\\cup\\{v_{\\alpha},v_{\\beta},v_{\\gamma}\\},v_{\\alpha},v_{\\beta},v_{\\gamma}\\notin V\\\\\nE'= &amp; E\\cup\\{(v_{\\alpha},v_{\\beta}),(v_{\\beta},v_{\\gamma})\\}\\cup\\{\\bigcup_{i\\in\\{\\alpha,\\gamma\\},v\\in V}(v,v_{i})\\}\n\\end{alignat*}</p>\n\n<p>Let the edge $e=(v_{\\alpha},v_{\\beta})$.</p>\n\n<p>$G'$is the graph $G$ with three additional vertices. $v_{\\alpha}$\nand $v_{\\gamma}$ are connected to all the vertices in $G$ and $v_{\\beta}$.\n$v_{\\beta}$ has a degree of 2, and is only connected to $v_{\\alpha}$and\n$v_{\\gamma}$. $f$ can be computed in p-time.</p>\n\n<p>Consider some $G$ that has a HP along vertices $v_{1},v_{2},...,v_{n}$.\nThen $G'$ will also have a path $v_{1},v_{2},...,v_{n}$ with each\nvertex only appearing once in the path. In order to turn this path\ninto a HC, the three additional vertices will have to be included.\nIn order to do so, the path has to be extended in either $v_{n},v_{\\alpha},v_{\\beta},v_{\\gamma},v_{1}$\nor $v_{n},v_{\\gamma},v_{\\beta},v_{\\alpha},v_{1}$. $G'$ thus have\na HC that will always include the edge $e$.</p>\n\n<p>$\\therefore$ G $\\in$ HP $\\implies$$f(G)=G'\\in$ HCE</p>\n\n<p>Consider some $G'$ with a HCE along some path $v_{1},v_{2},...,v_{n},v_{\\alpha},v_{\\beta},v_{\\gamma},v_{1}$.\nSince $G$ has vertices $V=V'\\backslash{v_{\\alpha},v_{\\beta},v_{\\gamma}}$,\n$G$ has a HP along vertices $v_{1},v_{2},...,v_{n}$. </p>\n\n<p>$\\therefore$ $G'\\in$ HCE $\\implies G\\in$ HP</p>\n\n<p>And thus $G\\in$ HP iff $f(G)=G'\\in$ HCE. Since $f$ can run in p-time,\nHP $\\leq$ HCE.</p>\n\n<p>$\\therefore$ HCE is NP-complete.</p>\n", 'ViewCount': '284', 'Title': 'Proof that Hamiltonian cycle/circuit with a specified edge is NP-complete', 'LastEditorUserId': '11365', 'LastActivityDate': '2014-04-15T16:57:15.503', 'LastEditDate': '2013-11-14T23:44:18.807', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11365', 'Tags': '<complexity-theory><np-complete><hamiltonian-path>', 'CreationDate': '2013-11-14T01:51:37.303', 'Id': '17999'},282250:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Are there problems that are in NP class but not in #P class? \nAccording to Wiki definition: </p>\n\n<blockquote>\n  <p>More formally, #P is the class of function problems of the form "compute \u0192(x)," where \u0192 is the number of accepting paths of a nondeterministic Turing machine running in polynomial time"</p>\n</blockquote>\n\n<p>So I am thinking, if you already have a poly nondeterministic Turing machine that can accept correct paths, then you can just use this to count in poly time.\nIs there something I am missing here?</p>\n', 'ViewCount': '118', 'Title': 'Problems in NP but not in #P', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-17T18:16:09.373', 'LastEditDate': '2013-11-15T18:30:47.287', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11383', 'Tags': '<complexity-theory><complexity-classes><np>', 'CreationDate': '2013-11-14T17:17:08.513', 'Id': '18026'},282251:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Show that if 3SAT is polynomial-time reducible to $complement of 3SAT$ then $PH = NP$.</p>\n\n<p>Above problem is Exercise problem from Arora and Barak,</p>\n\n<p>i don't know how to solve this problem,if anybody knows how to solve please post the solution </p>\n\n<p>Thanks for help!!</p>\n", 'ViewCount': '71', 'ClosedDate': '2013-11-16T15:29:29.187', 'Title': 'Proving $PH = NP$', 'LastActivityDate': '2013-11-15T13:09:15.560', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '10145', 'Tags': '<complexity-theory><np-complete><complexity-classes><nondeterminism><polynomial-time>', 'CreationDate': '2013-11-15T09:28:14.230', 'Id': '18043'},282252:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider a certicate for 3SAT that lists an assignment for each occurrence of a variable in the order\nof appearence,e.g. 100000 for ($x\\bigvee$$y\\bigvee$z)$\\bigwedge$($\\neg(w)$$\\bigvee$$y\\bigvee$z). This certicate is of polynomial length and can\nbe read once to check the satisability of the given formula. Does this prove that SAT is in NL?</p>\n', 'ViewCount': '42', 'Title': 'Is SAT is in NL?( under certain conditions)', 'LastEditorUserId': '10145', 'LastActivityDate': '2013-11-16T06:45:03.890', 'LastEditDate': '2013-11-16T02:49:02.610', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10145', 'Tags': '<complexity-theory><np-complete><complexity-classes>', 'CreationDate': '2013-11-16T02:34:40.960', 'Id': '18061'},282253:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '128', 'Title': 'Can Euclidean TSP be exactly solved in time better than (sym)metric TSP?', 'LastEditDate': '2013-11-20T22:51:30.667', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '1', 'Body': u'<p>Symmetric/Metric TSP can be solved via the Held-Karp algorithm in $\\mathcal O(n^2 2^n)$.</p>\n\n<p>See <a href="http://epubs.siam.org/doi/abs/10.1137/0110015">A dynamic programming approach to sequencing problems</a> by Michael Held and Richard M. Karp, 1962.</p>\n\n<p>In <a href="http://faculty.cs.tamu.edu/chen/courses/689/2006/reading/w1.pdf">Exact Algorithms for NP-Hard Problems: A Survey (PDF)</a> Woeginger writes:</p>\n\n<blockquote>\n  <p>This result was published in 1962, and from nowadays point of view almost looks trivial. Still, it yields the best time complexity that is known today.</p>\n</blockquote>\n\n<p>Thus, this is the best known upper-bound.</p>\n\n<p><b>Question:</b></p>\n\n<blockquote>\n  <p>Are there any better results for Euclidean TSP? Or does that best-known bound apply to Euclidean TSP as well.</p>\n</blockquote>\n\n<p>How is Euclidean TSP different? Well,</p>\n\n<ul>\n<li>Euclidean TSP can be encoded into $\\mathcal O(n \\log m)$ space, where $n$ is the number of cities, and $m$ is the bound on the integer coordinates of the city locations. As opposed to (sym)metric TSP variants, which essentially require a distance matrix of size $\\mathcal O(n^2 \\log m)$. Thus, it might be easier to solve; for example, perhaps Euclidean TSP can be more easily encoded into k-SAT, because the distance function is implicit.</li>\n<li><p>Contrary to popular notion, Euclidean TSP\'s reduction from k-SAT is quite different from (sym)metric TSP. UHC (undirected Hamiltonian cycle), symmetric TSP, and metric TSP are pretty directly related to each-other. But formulations of reductions from (sym)metric TSP to Euclidean TSP are not easy to come by. Paragraph, from interesting article, <a href="http://rjlipton.wordpress.com/2012/04/22/the-travelling-salesmans-power/">The Travelling Salesman\u2019s Power</a> by K. W. Regan (bold mine):</p>\n\n<blockquote>\n  <p>Now the reductions from 3SAT to TSP, especially Euclidean TSP, are less familiar, and we ascribe this to their being far more \u201cexpansive.\u201d <b>Texts usually reduce 3SAT to Hamiltonian Cycle, then present the latter as a special case of TSP, but this does not apply to Euclidean TSP</b>. The ${\\mathsf{NP}}$-completeness of Euclidean TSP took a few years until being shown by Christos Papadimitriou, and a 1981 <a href="http://www.cs.technion.ac.il/~itai/publications/Algorithms/Hamilton-paths.pdf">paper</a> by him with Alon Itai and Jayme Luiz Szwarcfiter advertised a \u201cnew, relatively simple, proof.\u201d This proof uses vertex-induced subgraphs of the grid graph in the plane, for which the shortest possible TSP tour and any Hamiltonian cycle have the same length. Despite this simplification, the gadgets involved are large\u2014a diagram of one occupies most of one journal page.</p>\n</blockquote>\n\n<p>Hunting down k-SAT $\\rightarrow$ Euclidean TSP reductions is quite an adventure; so far I\'ve found two of them. One $\\rm k\\text{-}SAT \\rightarrow CircuitSAT \\rightarrow PlanarCircuitSAT \\rightarrow EuclideanTSP$, and another, even tougher one to find, $\\rm k\\text{-}SAT \\rightarrow DHC \\rightarrow UHC \\rightarrow PlanarUHC \\rightarrow EuclideanTSP$. The latter reduction can perhaps be seen to make Euclidean TSP parallel (sym)metric TSP.</p></li>\n</ul>\n', 'Tags': '<graph-theory><reference-request><time-complexity><np-hard><traveling-salesman>', 'LastEditorUserId': '2755', 'LastActivityDate': '2014-02-05T14:16:06.677', 'CommentCount': '0', 'AcceptedAnswerId': '18218', 'CreationDate': '2013-11-20T22:46:01.723', 'Id': '18209'},282254:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Lets assume that I found a polynomial solution for <a href="http://en.wikipedia.org/wiki/Hamiltonian_path_problem" rel="nofollow">Hamiltonian path problem</a>. It is known that you can reduce this problem to <a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem" rel="nofollow">SAT</a>.\nHow ever it will be a special case of <strong>SAT</strong>. Just the case where there is only one interpretation that satisfies that Boolean formula.</p>\n\n<p>Can you extends this special case for general case? If not, how would you define the <a href="http://en.wikipedia.org/wiki/NP_%28complexity%29" rel="nofollow">NP</a> group now?</p>\n\n<p>Are all the <a href="http://en.wikipedia.org/wiki/NP-complete" rel="nofollow">NP-complete</a> problems have a strong reduction? If I solve one <strong>NP-complete</strong> problem, can I state that I found the solution for <a href="http://en.wikipedia.org/wiki/P_versus_NP_problem" rel="nofollow">P versus NP problem</a>. Or it will brake the very definition of <strong>P versus NP</strong> as some problems will remind part unsolved.</p>\n\n<p>In one case I know for sure that I found the <strong>P versus NP problem</strong> solution - If I can find polynomial solution for <strong>SAT</strong> as it stays in the top of the pyramid. But is it true for all the rest of the problems?</p>\n', 'ViewCount': '81', 'Title': 'Is it possible that P vs NP is not the real problem?', 'LastActivityDate': '2013-11-24T08:53:04.743', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18291', 'Score': '-5', 'PostTypeId': '1', 'OwnerUserId': '10572', 'Tags': '<p-vs-np>', 'CreationDate': '2013-11-24T08:44:12.950', 'Id': '18290'},282255:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider assigning a single object to $n$ potential receivers. It can only be assigned to one person.</p>\n\n<p>For each receiver $k$, there is a value of profit $v_k$ and a probability $p_k$.\n Fix an ordering of the receivers, then for the $i$th receiver he accept the object with probability $p_i$, if he does, we gain a value $v_i$; if he doesn't, consider the next person in the ordering.</p>\n\n<p>Then the expected value we gain is</p>\n\n<p>$E(V)=p_1v_1+(1-p_1)p_2v_2+\\cdots +(1-p_1)(1-p_2)\\cdots (1-p_{n-1})p_nv_n$</p>\n\n<p>It can be easily seen: to maximize the expected value we gain, the ordering should be in the decrease of the $v$.</p>\n\n<p>But since passing through the potential receivers the object defects the value of it, the $i$th receiver has a parameter $w_i$ where $w_1&gt;w_2&gt;\\cdots&gt;w_n$.</p>\n\n<p>$v_k$ is assigned to each person $k$, and $w_i$ is assigned to the $i$th person in the ordering. For example if the $3$rd person in the ordering is person $5$, then he has $v_5$ and $w_3$.</p>\n\n<p>so the expected value changes to</p>\n\n<p>$E(v)=p_1w_1v_1+(1-p_1)p_2w_2v_2+\\cdots+(1-p_1)(1-p_2)\\cdots(1-p_{n-1})p_nw_nv_n$</p>\n\n<p>Is there a polynomial algorithm to give an optimal ordering that maximizes the expected value? Or should this be NP-Complete?</p>\n\n<p>Any hint is appreciated. Thanks in advance.</p>\n", 'ViewCount': '72', 'Title': 'Prove or disprove NP-Completeness: An optimal ordering problem', 'LastActivityDate': '2013-11-25T02:01:51.750', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11589', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-11-24T10:44:47.610', 'Id': '18296'},282256:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I tried to solve the above NP-completeness exercise by making a bipartite graph from a general one (undirected) by inserting a vertice in the middle of every edge of the first (general) graph. This generates problems as suggested here: <a href="http://cs.stackexchange.com/questions/1527/finding-the-flaw-in-a-reduction-from-hamiltonian-cycle-to-hamiltonian-cycle-on-b">Finding the flaw in a reduction from Hamiltonian cycle to Hamiltonian cycle on bipartitie graphs</a> \nAnyone can give a hint on how to make a bipartite graph from a general one without using the above method and how the hamiltonian property can be passed to it?</p>\n', 'ViewCount': '877', 'Title': 'Proof that the existence of a Hamilton Path in a bipartite graph is NP-complete', 'LastActivityDate': '2013-11-30T00:12:54.147', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '18482', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11617', 'Tags': '<graph-theory><graphs><np-complete>', 'CreationDate': '2013-11-25T21:13:27.677', 'Id': '18335'},282257:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have no clue how to prove this question. </p>\n\n<p>Consider the language </p>\n\n<p>$L = \\{ \\langle D_1, D_2, ... ,D_K \\rangle : k \\in {N},$ the $D_i$ are DFAs and ${\\bigcap}_{i=1}^k L(D_i) = \\emptyset \\}$</p>\n\n<p>Prove that L is NP-hard.</p>\n\n<p>Can someone guide me through this problem? I understand that I will have to reduce it into something, I just don't know what to reduce to. </p>\n", 'ViewCount': '80', 'Title': 'Prove L is NP-hard', 'LastActivityDate': '2013-11-26T08:43:06.103', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11328', 'Tags': '<np-hard>', 'CreationDate': '2013-11-25T23:55:17.633', 'FavoriteCount': '2', 'Id': '18340'},282258:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I Know that determining Hamiltonian cycle in a graph is NP complete. For the sake of my clarification, I just want to know that whether the problem remains NP complete with following restrictions ? </p>\n\n<p>1) Graph is undirected , and  every node has degree two.</p>\n\n<p>Any help will be appreciated. Thanks.</p>\n', 'ViewCount': '27', 'Title': 'Complexity class of Determining Hamiltonian cycle', 'LastActivityDate': '2013-11-26T04:54:16.490', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11629', 'Tags': '<complexity-theory><graph-theory><p-vs-np>', 'CreationDate': '2013-11-26T04:17:18.607', 'Id': '18352'},282259:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm asked to prove that, if P=NP, that 0*1* is NP-complete, but I'm having trouble going about doing it. I know it's fairly easy to prove it's NP by creating a TM to verify an input (which can be done in O(n) time, and that's polynomial). </p>\n\n<p>But then I now have to reduce an NP-complete problem to 0*1* in order to prove that 0*1* is NP-complete. I'm thinking reducing SAT to it, but I have no idea how to do that, since in SAT all you can use is and, or, and negate, and there's no way to tell if a 1 came before a 0 in an input by doing that (at least, as far as I can tell).</p>\n\n<p>Thanks</p>\n", 'ViewCount': '212', 'Title': 'Having trouble proving a language is NP-complete', 'LastActivityDate': '2014-01-03T00:14:15.713', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '18400', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11300', 'Tags': '<complexity-theory><np-complete><np-hard><np>', 'CreationDate': '2013-11-27T00:07:47.700', 'FavoriteCount': '1', 'Id': '18399'},282260:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The question (Prove L is NP-hard) was about proving that the following language is NP-hard:\n$$ L = \\{ \\langle D_1, D_2, ... ,D_K \\rangle : k \\in {N}\\text{, the } D_i \\text{ are DFAs and } {\\bigcap}_{i=1}^k L(D_i) = \\emptyset \\} $$</p>\n\n<p>That got me thinking about the related problem:</p>\n\n<p>$$ L' = \\{ \\langle D_1, D_2, ... ,D_K \\rangle : k \\in {N}\\text{, the } D_i \\text{ are DFAs and } {\\bigcap}_{i=1}^k L(D_i) \\neq \\emptyset \\} $$</p>\n\n<p>I would imagine that $L'$ is also NP-hard, but I couldn't think of any reductions.. am I missing something obvious? </p>\n", 'ViewCount': '70', 'Title': 'Proving $ \\{ \\langle D_1, ... ,D_K \\rangle : \\text{ where } D_i \\text{ are DFAs and } {\\bigcap}_{i=1}^k L(D_i) = \\emptyset \\} $ is NP-Hard', 'LastActivityDate': '2013-11-27T05:25:17.433', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18405', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10448', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2013-11-27T04:01:13.527', 'Id': '18402'},282261:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Please correct my statement.\nAssuming $L\\in NP$, and algorithm A can determine L in poly-time in a nondeterministic machine, we have algorithm $A'$ and the complement of $L$ -- $L'$. $x$ is the input of $A'$</p>\n\n<pre><code>A'(x)\n{\n   if(A(x) is true)\n      return false\n   else\n      return true\n}\n</code></pre>\n\n<p>In this code, it seems like $A'$ can also run in a nondeterministic machine in poly-time. Can I just say $co-NP=NP$??</p>\n\n<p>Or my flaw is that the input $x\\in L'$ but $x\\notin L$?</p>\n\n<p>Could you please give me a specific example?? </p>\n", 'ViewCount': '27', 'ClosedDate': '2013-12-03T08:12:08.397', 'Title': 'Why NP is not closed under complement?', 'LastActivityDate': '2013-12-03T01:10:20.433', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11773', 'Tags': '<complexity-theory><computability><np-complete><decision-problem>', 'CreationDate': '2013-12-03T01:10:20.433', 'Id': '18553'},282262:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I read <a href="http://blog.computationalcomplexity.org/2011/10/if-you-find-mistake-in-someone-elses.html" rel="nofollow">on a blog</a> that there are mistakes in Karp\'s paper where he proved that 0-1 programming is NP-Complete, but I couldn\'t find it, can anyone explain? And I doubt that there are also mistakes where he proved Steiner Tree Problem is NP-Compelete but not sure.</p>\n\n<p>The blog post a little old and I thought asking the writer of the blog may not receive answer quickly enough. I didn\'t find any referrence in other places so I thought this question may worth asking. </p>\n', 'ViewCount': '89', 'Title': "Mistake in Karp's paper on NP-Complete problems?", 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-03T08:53:58.347', 'LastEditDate': '2013-12-03T08:49:56.580', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18566', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11589', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-12-03T06:48:29.323', 'Id': '18559'},282263:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have asked this question on programmers.stackexchange but nobody was able to answer this question.I have asked for help on other forums but did not get much help.Since this is a part of my research I figured I should ask on this site.</p>\n\n<p>I am working on a problem similar to the assembly line scheduling by dynamic programming.The issue is that unlike the classic problem where we have predefined stations now I only have information which task should run before which other(could be more than one) tasks.</p>\n\n<p>I have to find out which tasks to put on which line to minimize the total time taken by the production.So if the tasks are on a single line then they are executing in serial fashion and hence are slower.However,unlike the original problem the tasks are also communicating and communicating time is only added if tasks are on a different line.</p>\n\n<p>I have to determine whether this communication cost is worth moving the task to a separate line(from its communicating task)</p>\n\n<p>I have to decide which tasks to put on the same line and which tasks to put on the different lines (given the communication time when tasks are on different lines) to minimize the production time.</p>\n\n<p>So if I try to minimize the communication time then I am increasing the execution time as now all tasks are on a single line and are executing serially.</p>\n\n<p><strong>Problem:</strong></p>\n\n<p>If I try to move tasks to different lines now all tasks are executing in parallel.How do I determine the time saved due to this?Different tasks would be executing in different lines with the different starting and ending times.How do I calculate this metric?</p>\n', 'ViewCount': '32', 'Title': 'Help in developing a dynamic programming solution to this problem', 'LastActivityDate': '2013-12-03T07:41:32.070', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7181', 'Tags': '<optimization><dynamic-programming><np>', 'CreationDate': '2013-12-03T07:41:32.070', 'Id': '18561'},282264:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>On one hand, <a href="http://en.wikipedia.org/wiki/Horn-satisfiability" rel="nofollow">Horn-SAT</a> is known to be tractable in linear time - where Horn-SAT is the problem of deciding whether a given set of propositional Horn clauses (with at most one positive literal) is satisfiable or not.\nOn the other hand, Double-SAT is NP-complete (see this post : <a href="http://cs.stackexchange.com/questions/6371/proving-double-sat-is-np-complete">Proving Double-SAT is NP-complete</a>) - where Double-SAT is the problem of deciding whether a given set of propositionnal clauses has at least two models.</p>\n\n<p>Let Double-Horn-SAT be the problem of deciding whether a given set of propositional Horn clauses has at least two models.</p>\n\n<p>What is the complexity of Double-Horn-SAT ?</p>\n', 'ViewCount': '41', 'Title': 'Complexity of Double-Horn-SAT?', 'LastActivityDate': '2013-12-03T22:13:38.727', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '18585', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10228', 'Tags': '<complexity-theory><np-complete><satisfiability><complexity-classes>', 'CreationDate': '2013-12-03T20:28:43.277', 'Id': '18581'},282265:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When I was studying Comp Sci, we had <a href="http://rads.stackoverflow.com/amzn/click/0716710455" rel="nofollow">Garey &amp; Johnson</a> as a course textbook, with a large collection of NP-Complete problems. But by that time you could also have a look at the <a href="http://www.ensta-paristech.fr/~diam/ro/online/viggo_wwwcompendium/wwwcompendium.html" rel="nofollow">Compendium of NP Optimization Problems</a>, online.</p>\n\n<p>However, it seems the \'Compendium\' site has not seen any updates in several years. Is that indeed the case? Is there a more up-to-date compendium (perhaps in print) which accounts for further research and contains more problems in more domains?</p>\n', 'ViewCount': '45', 'Title': "Is there a more up-to-date / wider-scope version of the 'Compendium of NP Optimization Problems'", 'LastEditorUserId': '11796', 'LastActivityDate': '2013-12-14T12:47:16.403', 'LastEditDate': '2013-12-14T12:47:16.403', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '11796', 'Tags': '<complexity-theory><time-complexity><optimization><np>', 'CreationDate': '2013-12-03T22:00:16.900', 'FavoriteCount': '1', 'Id': '18584'},282266:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>It is known that <a href="http://en.wikipedia.org/wiki/3-satisfiability#3-satisfiability" rel="nofollow">3-SAT</a> belong to - <a href="http://en.wikipedia.org/wiki/NP-complete" rel="nofollow">NP-Complete</a> complexity problems, while <a href="http://en.wikipedia.org/wiki/2-satisfiability" rel="nofollow">2-SAT</a> belong to <a href="http://en.wikipedia.org/wiki/P_%28complexity%29" rel="nofollow">P</a> as there is known polynomial solution to it.</p>\n\n<p>So you can state that there is no such reduction from <strong>3-SAT</strong> to <strong>2-SAT</strong> unless $P=NP$.</p>\n\n<p>I am looking for strong proof for this state, regardless NP belong to P or not.</p>\n', 'ViewCount': '381', 'Title': '3-sat to 2-sat reduction', 'LastActivityDate': '2013-12-05T19:52:06.330', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '-3', 'PostTypeId': '1', 'OwnerUserId': '10572', 'Tags': '<complexity-theory><np-complete><satisfiability><np>', 'CreationDate': '2013-12-05T14:55:37.870', 'FavoriteCount': '3', 'Id': '18643'},282267:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<pre><code>There are n collections of M sets.\nPick a single set from each collection,\nsuch that all n picked sets are pairwise disjoint.\n</code></pre>\n\n<p>This problem can be converted to the standard <a href="http://en.wikipedia.org/wiki/Set_packing" rel="nofollow">Set Packing</a> problem in the following way: add a unique element $e_i$ to all $M$ sets in each collection $C_i$. Then find a set packing of size $n$ in the resulting collection. Each set in the returned set packing must belong to a different collection.</p>\n\n<p>So, the variant is not more difficult than the original set packing problem.</p>\n\n<p>MY QUESTION IS: is the variant easier than the original problem? In particular:</p>\n\n<ul>\n<li>Is it possible to solve the variant problem in time polynomial in $n$ (assuming $M$ is constant)?</li>\n<li>Is it possible to approximate the variant problem in a more efficient way than the approximations known for the general set packing problem (i.e. $O(\\sqrt{nM})$)?</li>\n</ul>\n', 'ViewCount': '40', 'Title': 'Set packing variant', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-12-08T11:02:12.180', 'LastEditDate': '2013-12-08T10:39:51.820', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18740', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<algorithms><np-complete><sets><packing>', 'CreationDate': '2013-12-08T09:03:16.310', 'Id': '18737'},282268:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am wondering if given the time complexity of an NP-Complete problem or at least some information about it for example if $ SAT\\in Time(2^{sqrt(n)})$ (hypothetically) could I assume that all languages in NP (which are clearly polynomial time reducible to SAT) are also $\\in Time(2^{sqrt(n)})$</p>\n\n<p>I believe the answer is false because I could basically pick any arbitrary class of exponential time functions and claim that all languages in NP are contained within it while it may actually belong to a class of higher power... but I'm not sure how to formulate this as a proof.</p>\n", 'ViewCount': '96', 'Title': 'Time complexity of languages that are polynomial time reducible to NP complete languages', 'LastActivityDate': '2013-12-09T02:56:43.687', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18768', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11306', 'Tags': '<time-complexity><np-complete><polynomial-time>', 'CreationDate': '2013-12-09T02:24:19.463', 'FavoriteCount': '1', 'Id': '18767'},282269:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I understand and know how to show that a language B is NP-Complete.</p>\n\n<ol>\n<li>Show that $B\\in NP$</li>\n<li>Show that every language $A\\in NP$ is polynomial time reducible to $B$</li>\n</ol>\n\n<p>For step 2, it is sufficient to give a polynomial time reduction from a language that is already known to be NP-Complete. I am reading Sipser\'s "Theory of Computation" textbook, and the main method he gives is a reduction from $3SAT$. I would agree that $3SAT$ is probably the simplest reduction choice, unless the problem is a trivial modification of an NP-Complete problem that you already know of.</p>\n\n<p>What I am struggling with is, finding reductions from $3SAT$ or any NP-Complete language to the new language $B$. The other tip that Sipser gives is the notion of variable and clause "gadgets" which refer to the structures in the new language which correspond to the variables and clauses in $3SAT$. I tried the Undirected Hamiltonian Path problem for a few hours but could not get anywhere useful in finding sufficient "gadgets" so that I could solve the problem. Looking at the $k$-clique problem and the $k$-vertex-cover problem, the "gadgets" that Sipser uses are not something that I would think of...</p>\n\n<ol>\n<li>How can I begin to find these "gadgets"?</li>\n<li>Specifically with a reduction from $3SAT$, what are the common techniques?</li>\n</ol>\n\n<p>This is a fascinating theory! Please help!</p>\n', 'ViewCount': '74', 'ClosedDate': '2013-12-09T16:36:34.470', 'Title': 'Tips for showing a language is NP-Complete', 'LastEditorUserId': '6815', 'LastActivityDate': '2013-12-09T16:38:34.207', 'LastEditDate': '2013-12-09T16:38:34.207', 'AnswerCount': '0', 'CommentCount': '13', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6815', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-12-09T03:19:15.097', 'Id': '18769'},282270:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let Two-Solutions-SAT be the language of Boolean formulas that have exactly two distinct satisfying assignments. Show Two-Solutions-SAT is co-NP-hard.</p>\n\n<p>I know how to show that the complement of Two-Solutions-SAT is in NP, it's relatively easy to create a nondeterministic polynomial time TM that decides it.</p>\n\n<p>My problem comes with reducing from SAT to the complement of Two-Solutions-SAT. I understand how to reduce from SAT to 3SAT, but in the case of 3SAT you will always have CNF's with 3 variables. With the complement of Two-Solutions-SAT, you have to somehow reduce to the case where you have 0 or 1 or >= 3 distinct satisfying assignments, and I'm not sure how to go about reducing to that.</p>\n\n<p>Thanks</p>\n", 'ViewCount': '260', 'Title': 'Question on SAT reduction', 'LastActivityDate': '2013-12-12T02:56:18.300', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18909', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11300', 'Tags': '<complexity-theory><np-complete><reductions><np-hard>', 'CreationDate': '2013-12-10T05:24:42.023', 'FavoriteCount': '1', 'Id': '18815'},282271:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following problem: given a set of $m$ red points and $n$ blue points in the plane, find a minimum length cycle that separates the red points from the blue points. That is, the red points are inside the cycle and the blue points are outside the cycle, or vice versa. This problem is called the <em>red blue separation problem</em>.</p>\n\n<p>I am trying to reduce the Traveling Salesman Problem (TSP) to this but I am getting nowhere. Can you please help me with this? Any help is appreciated.</p>\n', 'ViewCount': '122', 'Title': 'Prove the red blue separation problem is NP-complete', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-13T18:02:00.340', 'LastEditDate': '2013-12-13T18:02:00.340', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '18872', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12004', 'Tags': '<algorithms><algorithm-analysis><np-complete><np-hard><np>', 'CreationDate': '2013-12-11T00:44:22.820', 'Id': '18852'},282272:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>While reading a passage in an older textbook I came upon this problem which I am having difficulty in justifying whether its true or false. Is this possible? </p>\n\n<p>If some problem $A$ is NP-hard, and if that problem $A$ can be reduced to problem $B$, and there exists some polynomial-time algorithm which solves $B$, then P=NP?</p>\n\n<p>While I understand that the view is $P\u2260NP$, if the above case were true would $P=NP$?</p>\n', 'ViewCount': '50', 'Title': 'NP-hardness given some reducible language', 'LastActivityDate': '2013-12-11T01:25:13.597', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9912', 'Tags': '<graph-theory><np-hard>', 'CreationDate': '2013-12-11T01:07:43.380', 'Id': '18854'},282273:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Recently, I am reading papers about <em>dichotomy</em>. I do not understant what condition can be called as a <em>dichotomy</em>? What is the meaning of "a question is either in <strong>P</strong> or in <strong>NP</strong>-<em>complete</em>"? (assume <strong>P</strong> $\\neq$ <strong>NP</strong>)</p>\n\n<p>For example, I\'ve known the Schaefer\'s dichotomy theorem, in which a dichotomy about "whether a class of SAT is in <strong>P</strong>" is given. In this theorem, the dichotomy contains six conditions, one of them is "2-SAT". </p>\n\n<p>So my question is that, whether "2-SAT" itself can be called as a <em>dichotomy</em> or a trivial <em>dichotomy</em>, because 2-SAT is in <strong>P</strong> but 3-SAT is <strong>NP</strong>-<em>complete</em>? In another words, I wonder that "if a special class of an <strong>NP</strong>-<em>complete</em> problem is in <strong>P</strong>, then this class is a dichotomy? or a trivial dichotomy?"</p>\n', 'ViewCount': '123', 'Title': 'What is a dichotomy? Whether 2-SAT itself is a dichotomy of SAT?', 'LastActivityDate': '2013-12-11T11:02:42.043', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '18868', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '12018', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'CreationDate': '2013-12-11T07:52:17.700', 'Id': '18865'},282274:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a question on my homework causing some confusion.  </p>\n\n<blockquote>\n  <p>If L is a strict subset of L', and L' is a member of Co-NP, is L a member of Co-NP? True of False</p>\n</blockquote>\n\n<p>Now I understand what belonging to Co-NP. Essentially means instead of deciding a yes instance we're deciding a no instance of the decidable problem.  I'm stuck on interpreting L' and what it is.</p>\n\n<p>My guess at this point is that L is a member of Co-NP since it's a subset of L' which we're given is in Co-NP.</p>\n", 'ViewCount': '125', 'Title': 'Is Co-NP closed under taking subset?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-12T10:52:15.023', 'LastEditDate': '2013-12-11T16:14:03.290', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<complexity-theory><closure-properties><np>', 'CreationDate': '2013-12-11T16:01:15.793', 'Id': '18880'},282275:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>SSUM is the same as the Subset Sum Problem with the only additional requirement is all the numbers must be unique in the subset.  </p>\n\n<p>To prove it's NP complete, the verifier is quite easy to construct being the same as one for the Subset Sum except you add the additional requirement of making sure all numbers are unique. </p>\n\n<p>With the reduction, I assume you can use the same reduction as before from 3SAT, I'm just figuring out a way when evaluating that reduction, to determine if two or more numbers are the same. I'm using the 3SAT reduction in Sipser with the table of columns and rows. If one needs any more information I would be happy to provide. </p>\n", 'ViewCount': '84', 'Title': 'Proving SSum is NP-Complete?', 'LastActivityDate': '2013-12-11T21:49:28.287', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<np-complete><reductions><3-sat>', 'CreationDate': '2013-12-11T20:02:45.520', 'Id': '18891'},282276:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>Are NP or P closed under subtraction? Im having a hard time deciding whether they are or aren't.\n<em>Question was edited</em></p>\n\n<p><strong>Original question</strong>:\nIm having some hard time figuring out what languages are closed under subtraction.\nSay you have 2 languages A, B \u2208 NP. Is A\\B \u2208 NP? what about P?</p>\n\n<p><strong>Commenters</strong>:\nMy original question was extremely not accurate so i rephrased :)</p>\n\n<p>Thanks!</p>\n", 'ViewCount': '97', 'Title': 'Complexity classes that are closed under subtraction', 'LastEditorUserId': '12040', 'LastActivityDate': '2013-12-11T23:21:43.957', 'LastEditDate': '2013-12-11T23:17:20.347', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '18903', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12040', 'Tags': '<complexity-theory><closure-properties><np>', 'CreationDate': '2013-12-11T20:57:30.853', 'Id': '18897'},282277:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am reading <a href="http://en.wikipedia.org/wiki/Subgraph_isomorphism_problem" rel="nofollow">Subgraph isomorphism problem</a> </p>\n\n<p>I am having trouble understanding how they prove that the subgraph isomorphism problem is NP-Complete using the Hamiltonian cycles problem in the article.  </p>\n\n<p>Can someone help me explain what is happening in more laymen terms?  </p>\n', 'ViewCount': '187', 'Title': 'Reducing from Hamiltonian Cycle to Subgraph Isomorphism', 'LastEditorUserId': '9550', 'LastActivityDate': '2013-12-12T09:18:51.053', 'LastEditDate': '2013-12-12T09:18:51.053', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18907', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12045', 'Tags': '<algorithms><graph-theory><np-complete>', 'CreationDate': '2013-12-12T00:15:59.803', 'Id': '18906'},282278:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have little background with SAT sovers and theoretical computer science.</p>\n\n<p>How can I describe the complexity of calculating all models of a propositional formula versus just the usual SAT problem of finding just one model?</p>\n\n<p>I am writing a paper, in an area where finding a single of a model of a type of propositional formula is considered "easy", but for my reasearch I need to calculated all models. (I am using Picosat that can calculate all models of a logic formula.) Is there a way to describe how "hard" or "complex" finding all models is compared to finding a single model?</p>\n', 'ViewCount': '20', 'Title': 'Complexity of calculating a single model versus all models of a propositional formula with a SAT solver', 'LastActivityDate': '2013-12-12T09:02:45.050', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18918', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1829', 'Tags': '<complexity-theory><np-complete><satisfiability><sat>', 'CreationDate': '2013-12-12T07:19:46.190', 'FavoriteCount': '1', 'Id': '18912'},282279:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following variation (let us call it Q) on the Vertex Cover problem: Given a Graph G and a number K, we are asked if there is a k-cover of G so that it is the minimum cover.\nMy question is: How may one prove that Q can be reduced to the general Vertex Cover problem?\nAnd, more generally, what is the approach to solve such a reduction, from "is there a k..." to\n"is k the minimum/maximum?"? I have a hunch on the methodology but am not sure and would appreciate a wiser opinion than that of myself on the subject.</p>\n\n<p>My hunch is the following: First of all, we take into consideration the following fact:\nif there is a k-1 cover of G, then we will surely have a k cover of G, just by adding a random node to the k-1 cover ( the cover property holds if we add nodes ). Thus, We can reformulate Q this way: Is there a k-cover of G, so that there is no (k-1)-cover of the graph? From this reformulation it is clear that an instance of Q reduces to 2 instances of the original decision version of the Vertex Cover.</p>\n', 'ViewCount': '46', 'Title': 'Reduce variant of Vertex Cover to original decision-version Vertex cover problem', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T08:48:36.473', 'LastEditDate': '2014-02-10T08:48:36.473', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18999', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12121', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2013-12-14T21:34:34.557', 'Id': '18997'},282280:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '142', 'Title': 'Problems that are NP but polynomial on graphs of bounded treewidth', 'LastEditDate': '2013-12-16T12:50:01.927', 'AnswerCount': '4', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4598', 'FavoriteCount': '1', 'Body': '<p>I <em>heard</em> <a href="http://www.youtube.com/watch?v=cQwhYtTfZCs&amp;list=PLawkBQ15NDElkyLbJBKwZCgA5jxsKRlK-&amp;index=22" rel="nofollow">here</a> that the Hamiltonian cycle problem is polynomial on graphs of bounded treewidth.</p>\n\n<p>I am interested in examples/references to different problems which is essentially hard but having polynomial complexity on graphs of bounded treewidth. </p>\n', 'Tags': '<complexity-theory><graph-theory><reference-request><np><polynomial-time>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T14:13:58.150', 'CommentCount': '0', 'AcceptedAnswerId': '19036', 'CreationDate': '2013-12-15T20:00:48.920', 'Id': '19019'},282281:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am working on showing that 3-colorability is NP-complete. I read a few articles and walkthroughs on this but none are really clicking. I get to this part</p>\n\n<blockquote>\n  <p>"Then for every variable xi that appears in the instance of Satisfiability, we connect a\n       vertex xi to a vertex xi, and we connect both xi and xi to red. This is illustrated\n       below for a case where there are (only) 3 variables."</p>\n</blockquote>\n\n<p>I think what they mean is something like this:</p>\n\n<pre><code>x1----x1*     x2----x2*      x3----x3*\n \\   /         \\   /          \\   /\n  \\ /           \\ /            \\ /\n   R             R              R\n</code></pre>\n\n<p>But my question is, what exactly is this step doing? </p>\n\n<p>With a little bit more thought, is this step just showing that given xi to be one color, then xi* has to be another, but also cannot be R, as they are both connected to it?</p>\n', 'ViewCount': '121', 'Title': 'Help reducing 3-SAT to 3-COLORING', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-17T14:08:18.793', 'LastEditDate': '2013-12-17T14:08:18.793', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19041', 'Score': '0', 'OwnerDisplayName': 'NerdsRaisedHand', 'PostTypeId': '1', 'Tags': '<np-complete><np>', 'CreationDate': '2013-12-11T17:46:09.827', 'Id': '19040'},282282:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem and I guess it NP-hard, but I cannot prove it.</p>\n\n<p>Here is a layer graph, where layer 0 is the hignest layer and layer L the lowest.</p>\n\n<p>there are some directed edge between layers, where an edge (A, B) indicates that node A can [cover] node B. And when A can cover B, every node on any path from A to B can cover B, B can cover itself.</p>\n\n<p>Finally here comes a set of node S. I need to choose another set of node ANS, and ensure that for each node q in S, there exists a node p in ANS and p covers q.</p>\n\n<p>For every node there is a cost, and I need to make the total cost of set ANS minimal.</p>\n\n<p>Is this a NP-hard problem? I think so but I cannot prove it. </p>\n\n<p>Could you help me?</p>\n\n<p>Thank you very much.</p>\n', 'ViewCount': '142', 'Title': 'Is this NP-hard? I cannot prove it.', 'LastActivityDate': '2013-12-16T20:33:03.003', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '9', 'OwnerDisplayName': 'qin.sun', 'PostTypeId': '1', 'OwnerUserId': '12307', 'Tags': '<graphs><np>', 'CreationDate': '2013-12-16T03:32:05.013', 'Id': '19051'},282283:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The theory of NP-completeness was initially built on Cook (polynomial-time Turing) reductions. Later, Karp introduced polynomial-time many-to-one reductions. A Cook reduction is more powerful than a Karp reduction since there is no restriction on the number of calls to the oracle. So, I am interested in NP-complete graph problem that does not have a known Karp reduction from a NP-complete problem. </p>\n\n<blockquote>\n  <p>Is there a natural graph problem known to be $NP$-complete only under Cook reduction, but not known to be NP-complete under Karp reductions?</p>\n</blockquote>\n', 'ViewCount': '129', 'Title': 'Graph problem known to be $NP$-complete only under Cook reduction', 'LastEditorUserId': '755', 'LastActivityDate': '2013-12-18T08:06:32.597', 'LastEditDate': '2013-12-18T08:06:32.597', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2013-12-17T20:00:33.290', 'FavoriteCount': '1', 'Id': '19069'},282284:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>Background:</strong> The <code>Exact-3D-Matching</code> problem is defined as follows (The definition is from Jeff\'s lecture note: <a href="http://www.cs.uiuc.edu/~jeffe/teaching/algorithms/notes/29-nphard.pdf" rel="nofollow">Lecture 29: NP-Hard Problems</a>. You can also refer to <a href="https://en.wikipedia.org/wiki/3-dimensional_matching" rel="nofollow">3-dimensional matching</a>):</p>\n\n<blockquote>\n  <p><em>Exact-3D-Matching:</em> Given a set $S$ and a collection of three-element subsets of $S$, called <em>triples</em>, is there a sub-collection of disjoint triples that exactly cover $S$?</p>\n</blockquote>\n\n<p>The <code>3-Partition</code> problem is defined as (It is also from <a href="http://www.cs.uiuc.edu/~jeffe/teaching/algorithms/notes/29-nphard.pdf" rel="nofollow">Lecture 29: NP-Hard Problems</a>. You can also refer to <a href="https://en.wikipedia.org/wiki/3-partition_problem" rel="nofollow">3-partition problem</a>.):</p>\n\n<blockquote>\n  <p>Given a set $S$ of $3n$ integers, can it be partitioned into $n$ disjoint three-element subsets, such that every subsets has exactly the same sum?</p>\n</blockquote>\n\n<p>It is known that the <code>3-Partition</code> problem can be proved to be NP-complete by reducing the NP-complete <code>Exact-3D-Matching</code> problem to it. And the NP-completeness of the <code>Exact-3D-Matching</code> problem is proved by reducing the <code>3SAT</code> problem to it (both are given in the book <a href="https://en.wikipedia.org/wiki/Computers_and_Intractability" rel="nofollow">Computers and Intractability: A Guide to the Theory of NP-Completeness</a>).</p>\n\n<p><strong>Problem:</strong> \nMy problem is:</p>\n\n<blockquote>\n  <p>How to prove the NP-completeness of the <code>Exact-3D-Matching</code> problem by reducing the <code>3-Partition</code> problem to it?</p>\n</blockquote>\n\n<p>I have found neither papers nor lecture notes on it.</p>\n', 'ViewCount': '131', 'Title': 'How to prove the NP-completeness of the ``Exact-3D-Matching`` problem by reducing the ``3-Partition`` problem to it?', 'LastEditorUserId': '4911', 'LastActivityDate': '2013-12-19T14:18:21.653', 'LastEditDate': '2013-12-19T11:13:30.527', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19095', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4911', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2013-12-18T09:41:58.583', 'Id': '19092'},282285:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>Algorithms for the finding of an MST in a graph can be applied for both maximum and minimum spanning trees.</p>\n\n<p>It is well known, however, that the finding of a max-cut in a graph is an NP-hard problem while the min-cut problem can be easily solved in polynomial time.</p>\n\n<p>Why aren't the two equivalent? </p>\n\n<p>What is the restriction that I\u2019m missing here? </p>\n\n<p>Thanks!</p>\n", 'ViewCount': '49', 'Title': 'Reduction from max-cut to min-cut', 'LastActivityDate': '2013-12-25T00:43:05.643', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19265', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12356', 'Tags': '<complexity-theory><graph-theory><np-complete>', 'CreationDate': '2013-12-24T22:17:23.767', 'Id': '19263'},282286:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The PARTITION problem is NP-complete:</p>\n\n<p>INSTANCE: finite set $A$ and a size $s(a) \\in \\mathbb{Z}^+$ for each $a \\in A$<br>\nQUESTION: Is there a subset $A' \\subseteq A$ such that $\\sum_{a \\in A'} s(a) = \\sum_{a \\in A \\setminus A'} s(a)$ </p>\n\n<p>The problem remains NP-complete even if the elements are ordered as $a_1,a_2,...,a_{2n}$ and we require that $A'$ contains exactly one of $a_{2i-1},a_{2i}$ for $1 \\leq i \\leq n$ (Garey and Johnson, Computers and Intractability).</p>\n\n<p>This variant should be known as EVEN-ODD PARTITION.</p>\n\n<p>Do you see a quick reduction to prove its hardness? (or do you know the paper where it was first defined and proved)</p>\n", 'ViewCount': '77', 'Title': 'Hardness proof of EVEN-ODD PARTITION', 'LastActivityDate': '2013-12-25T21:35:45.377', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '19272', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '140', 'Tags': '<reference-request><np-complete>', 'CreationDate': '2013-12-25T10:46:58.100', 'Id': '19271'},282287:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Lets assume $P = NP$. Can we say if every language $L \\in P$, then $L \\in NPC$?</p>\n\n<p>I read $P \\subseteq NP$, which means that $L\\in NP$. So I know for example, that a language can be $NP \\text{ hard}$, but it doesn't have to be in $NP$, e.g. $HALT$.</p>\n\n<p>But what about the case above. Is the language also $NPC$?</p>\n", 'ViewCount': '141', 'Title': 'P vs NP: Assuming P = NP', 'LastEditorUserId': '11941', 'LastActivityDate': '2013-12-28T00:21:54.187', 'LastEditDate': '2013-12-27T17:43:11.793', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11941', 'Tags': '<complexity-theory><np-complete><np-hard><np><polynomial-time>', 'CreationDate': '2013-12-27T17:37:27.420', 'Id': '19328'},282288:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I just read about <a href="http://www.stanford.edu/~rrwill/week3.pdf" rel="nofollow">polynomial-size circuit families</a> and I have a question as the title. I know P/poly is defined as the class PSIZE of languages that have polynomial-size circuits. But what about other languages in other classes that have polynomial circuits?</p>\n', 'ViewCount': '115', 'Title': 'Is it true that all languages which have polynomial circuits are in PSPACE?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-29T09:42:59.890', 'LastEditDate': '2013-12-29T09:42:59.890', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'OwnerDisplayName': 'user2879534', 'PostTypeId': '1', 'Tags': '<np>', 'CreationDate': '2013-12-23T12:39:47.940', 'Id': '19359'},282289:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems" rel="nofollow">Karp\'s 21 NP-complete problems</a> show that 0-1 integer linear programming is NP-hard. That is, an integer linear program with binary variables.</p>\n\n<p>If we set the $c^T$ vector of the objective $\\text {maximize } c^Tx$ to all one (unweighted, i.e., $c^T=(1,1,\\dots,1)$) is the problem still NP-hard?</p>\n', 'ViewCount': '95', 'Title': 'Is 0-1 integer linear programming NP-hard when $c^T$ is the all-ones vector?', 'LastEditorUserId': '755', 'LastActivityDate': '2013-12-31T06:22:31.170', 'LastEditDate': '2013-12-31T06:21:22.400', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19379', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><np-hard><linear-programming>', 'CreationDate': '2013-12-30T16:49:35.700', 'Id': '19378'},282290:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A problem is in NP if a correct answer to it can be verified to be so in polynomial time.  </p>\n\n<p>A problem is in co-NP if an incorrect answer to it can be verified to be so in polynomial time.  </p>\n\n<p>P is a subset of the intersection of the sets NP and co-NP.</p>\n\n<p>My question is: what is a <strong>specific</strong> problem that is in the intersection of co-NP &amp; NP, but is not in P?</p>\n', 'ViewCount': '127', 'Title': 'Is there a specific problem that is in both NP and co-NP but not in P?', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-01-11T02:03:35.730', 'LastEditDate': '2014-01-11T02:03:35.730', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '4700', 'Tags': '<complexity-theory><np>', 'CreationDate': '2013-12-31T09:28:09.233', 'FavoriteCount': '1', 'Id': '19399'},282291:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '127', 'Title': 'NP-complete decision problems - how close can we come to a solution?', 'LastEditDate': '2014-01-02T15:28:30.023', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1342', 'FavoriteCount': '2', 'Body': '<p>After we prove that a certain <strong>optimization</strong> problem is NP-hard, the natural next step is to look for a polynomial algorithm that comes close to the optimal solution - preferrably with a constant approximation factor.</p>\n\n<p>After we prove that a certain <strong>decision</strong> problem is NP-complete, what is the natural next step? Obviously we cannot "approximate" a boolean value...</p>\n\n<p>My guess is that, the next step is to look for a randomized algorithm that returns the correct solution with a high probability. Is this correct?</p>\n\n<p>If so, what probability of being correct can we expect to get from such a randomized algorithm?</p>\n\n<p>As far as I understand from Wikipedia, <a href="https://en.wikipedia.org/wiki/PP_%28complexity%29" rel="nofollow">PP contains NP</a>. This means that, if the problem is in NP, it should be easy to write an algorithm that is correct more than $0.5$ of the times.</p>\n\n<p>However, <a href="https://en.wikipedia.org/wiki/Bounded-error_probabilistic_polynomial" rel="nofollow">it is not known whether BPP contains NP</a>. This means that, it may be difficult (if not impossible) to write an algorithm that is correct more than $0.5+\\epsilon$ of the times, for every positive $\\epsilon$ independent of the size of input.</p>\n\n<p>Did I understand correctly?</p>\n', 'Tags': '<np-complete><approximation><randomized-algorithms>', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-01-03T01:18:29.533', 'CommentCount': '2', 'AcceptedAnswerId': '19419', 'CreationDate': '2013-12-31T16:03:52.760', 'Id': '19412'},282292:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Many problems in computer science come in two flavors:</p>\n\n<ul>\n<li>Optimization problem: "Find an object with the largest size".</li>\n<li>Threshold problem: "Given $n$, find an object with a size of at least $n$, or reply that such an object does not exist".</li>\n</ul>\n\n<p>Given a solution for the optimization problem, we can solve the threshold problem simply by running the optimization solution and checking if the result has a size of at least $n$. But this doesn\'t help us if the optimization problem is NP-complete.</p>\n\n<p>MY QUESTION IS: If we have a constant-factor approximation algorithm for the optimization problem, how can we use it for the threshold problem?</p>\n\n<p>An obvious answer is: Given $n$, run the approximation algorithm. If the result has a size of at least $n$, return it. If the result has a size of less than $n/c$ (where c is the approximation constant), return that an object of size $n$ does not exist. Otherwise, return "I don\'t know".</p>\n\n<p>Is there a better way?</p>\n', 'ViewCount': '48', 'Title': 'Using approximations to optimization problems for threshold problems', 'LastEditorUserId': '1342', 'LastActivityDate': '2014-01-31T16:18:31.590', 'LastEditDate': '2014-01-01T14:23:41.853', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<np-complete><reductions><optimization><approximation>', 'CreationDate': '2014-01-01T13:25:36.750', 'Id': '19433'},282293:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '108', 'Title': 'Existence of NP problems with complexity intermediate between P and NP-hard', 'LastEditDate': '2014-01-07T08:03:04.937', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10447', 'FavoriteCount': '0', 'Body': "<p>Assuming P!=NP, there is a result that there are decision problems intermediate between P and NP-complete. That is, the class NP cannot be a union of two disjoint subsets: P and NP-complete.</p>\n\n<p>I could never quite understand the proof of the above result. The proof I saw in a textbook was starting with the assumption that one can enumerate all P and NP-hard problems, and then proceeding with a construction of a function that didn't fit in either. However, this construction seemed a bit fishy to me; in particular, the assumption that one can start with enumerated set of problems in a particular class, the NP.</p>\n\n<p>Could you refer me to a clear self-contained proof of the statement in the 1st paragraph? More generally, what would be a good reference for proofs of such results?</p>\n", 'Tags': '<complexity-theory><reference-request><np><p-vs-np>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-07T21:14:35.700', 'CommentCount': '0', 'AcceptedAnswerId': '19566', 'CreationDate': '2014-01-06T20:23:25.287', 'Id': '19543'},282294:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the 3-SAT problem where the formula is in conjunctive normal form and we restrict the Boolean formulas such that the number of clauses in the formula is equal to the number of variables. Is this problem still NP-hard?</p>\n\n<p>For example, this formula has $3$ variables and has $3$ clauses $(\\lnot x_1 \\vee \\lnot x_2 \\vee \\lnot x_3 ) \\wedge (\\lnot x_1 \\vee \\lnot x_3) \\wedge (\\lnot x_2 \\vee \\lnot x_3)$,</p>\n\n<p>and the following formula has three variables but has only two clauses $(\\lnot x_1 \\vee \\lnot x_2 \\vee \\lnot x_3  ) \\wedge (\\lnot x_2 \\vee \\lnot x_3)$.</p>\n', 'ViewCount': '96', 'Title': '3-SAT problem with number of clauses equal to number of variables', 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-09T09:28:49.803', 'LastEditDate': '2014-01-08T19:18:32.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19584', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><np-hard><satisfiability>', 'CreationDate': '2014-01-08T16:54:27.993', 'Id': '19582'},282295:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For example, how is it proven that any NP problem can reduce to subset sum, circuit satisfiability, etc.? Or could you link to a proof?</p>\n', 'ViewCount': '54', 'ClosedDate': '2014-01-10T09:06:55.770', 'Title': 'How do we know that all NP problems reduce to NP-hard problems?', 'LastActivityDate': '2014-01-13T03:08:58.583', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19617', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12725', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2014-01-10T05:38:10.027', 'Id': '19616'},282296:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>As seen in <a href="http://xkcd.com/1313/">this recent XKCD strip</a> and <a href="http://nbviewer.ipython.org/url/norvig.com/ipython/xkcd1313.ipynb">this recent blog post</a> from Peter Norvig (and a Slashdot story featuring the latter), "regex golf" (which might better be called the regular expression separation problem) is the puzzle of defining the shortest possible regular expression that accepts every word in set A and no word in set B.  Norvig\'s post includes an algorithm for generating a reasonably short candidate, and he notes that his approach involves solving an NP-complete Set Cover problem, but he\'s also careful to point out that his approach doesn\'t consider every possible regular expression, and of course his isn\'t necessarily the only algorithm, so his solutions aren\'t guaranteed to be optimal, and it\'s also possible that some other assuredly polynomial-time algorithm could find equivalent or better solutions.</p>\n\n<p>For concreteness\' sake and to avoid having to solve the optimization question, I think the most natural formulation of Regular Expression Separation would be:</p>\n\n<blockquote>\n  <p>Given two (finite) sets $A$ and $B$ of strings over some alphabet $\\Sigma$, is there a regular expression of length $\\leq k$ that accepts every string in $A$ and rejects every string in $B$?</p>\n</blockquote>\n\n<p>Is anything known about the complexity of this particular separation problem?  (Note that since I\'ve specified $A$ and $B$ as finite sets of strings, the natural notion of size for the problem is the total lengths of all strings in $A$ and $B$; this swamps any contribution from $k$). It seems highly likely to me that it <em>is</em> NP-complete (and in fact, I would expect the reduction to be to some sort of cover problem) but a few searches haven\'t turned up anything particularly useful.</p>\n', 'ViewCount': '286', 'Title': 'Is regex golf NP-Complete?', 'LastEditorUserId': '242', 'LastActivityDate': '2014-01-22T00:39:07.057', 'LastEditDate': '2014-01-14T17:52:01.430', 'AnswerCount': '1', 'CommentCount': '17', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '242', 'Tags': '<complexity-theory><np-complete><regular-expressions>', 'CreationDate': '2014-01-13T09:26:28.640', 'FavoriteCount': '2', 'Id': '19686'},282297:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>So we have two problems:</strong></p>\n\n<p>Problem A: Given a list of <strong>positive</strong> integers, decide whether the list contains a subset adding to a given number t.</p>\n\n<p>Problem B: Given a list of integers, decide whether the list contains a subset adding to 0.</p>\n\n<p>I have to prove that A can be reduced to B in polynomial time. And a really simple reduction came into mind. Here goes my proof.</p>\n\n<p>So let L be the list of positive integers from the problem A, I just create L\' add -t to the it, and pass L\' to B, this is the reduction.</p>\n\n<p>To prove this is a reduction, let\'s see that, <strong>L is a positive instance of A if and only if L\' is a positive instance of B</strong>. Am I doing it right?</p>\n\n<p>So first:</p>\n\n<p>=>) It\'s just obvious to prove that, given a list of integers which contains a subset adding up to t, this list, along with -t adds up to 0.</p>\n\n<p>&lt;=) Let S be the subset of L\' that adds up to 0. Given that, by construction, all integers in L\' are positive but one, which is -t, -t must be in S. If S contains the only negative number -t, and S adds up to 0, S{-t}, adds up to t. Then S{-t} is a subset of S{-t} = L that adds up to t. </p>\n\n<p><strong>Question:</strong> </p>\n\n<ul>\n<li><p>Is my proof correct? </p></li>\n<li><p>Is there any obvious mistake which makes it invalid? </p></li>\n<li><p>Are there any minor mistakes which could be fixed to "improve" it?</p></li>\n</ul>\n\n<p><strong>Extra question:</strong></p>\n\n<p>And also, I would like to ask a more generic question. Consider the problem A, but removing the "positive" part, so L can now contain both positive and negative numbers on it. I know A\' (the new A) is still reductible to B, because they both belong to the NP-complete problem class. So my other question is:</p>\n\n<ul>\n<li>How can I reduce A\' to B?</li>\n</ul>\n', 'ViewCount': '38', 'ClosedDate': '2014-01-13T16:03:11.043', 'Title': 'Is this reduction done correctly?', 'LastEditorUserId': '12801', 'LastActivityDate': '2014-01-13T17:32:17.800', 'LastEditDate': '2014-01-13T17:32:17.800', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12801', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2014-01-13T13:52:50.153', 'Id': '19692'},282298:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have been reading Karp's famous paper on the NP-Completeness of different problems, <em>Reducibility among combinatorial problems</em>, and I have a question on the reduction from <em>SAT</em> to <em>0/1 Integer Programming</em> defined there.</p>\n\n<p>The problem <em>0/1 Integer Programming</em> is defined as:<br>\nInput: Integer matrix $A$ and integer vector $d$<br>\nProperty: There exists a 0/1 vector $x$ such that $Ax=b$.<br>\nLet $B$ be a boolean formula in CNF with $p$ variables $x_1,\\dots, x_p$ and $n$ clauses $C_1,\\dots,C_n$.\nThe reduction from <em>SAT</em> should work like this ($C_i$ is the $i^{\\text{th}}$ clause of the boolean formula):\n$$ \na_{ij} = \\begin{cases}\n          1   &amp;\\text{if } x_j \\in C_i \\\\\n          -1  &amp;\\text{if } \\bar{x}_j \\in C_i\\\\\n          0   &amp;\\text{otherwise}\n         \\end{cases}\n$$\nand\n$$\n b_i = 1- (\\text{ the number of complemented variables in } C_i ).\n$$\nNow if I use this procedure on the satisfiable formula\n$(x_1 \\vee x_2 ) \\wedge (x_1 \\vee x_3 ) \\wedge (x_2 \\vee x_3 )$, I get\n$$\nA =\\left( \\begin{array}{ccc}\n1 &amp; 1 &amp; 0 \\\\\n1 &amp; 0 &amp; 1 \\\\\n0 &amp; 1 &amp; 1 \\end{array} \\right), \\text{ and }\nb = \\left( \\begin{array}{c}\n1 \\\\\n1 \\\\\n1  \\end{array} \\right),\n$$\nwhich has no 0/1 solution. So my question is:<br>\nHave I made a very silly mistake, or is Karp's original reduction faulty?</p>\n", 'ViewCount': '73', 'Title': "0/1 Integer Programming and Karp's Reduction", 'LastActivityDate': '2014-01-18T04:08:20.907', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19802', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10734', 'Tags': '<np-complete><reductions>', 'CreationDate': '2014-01-14T16:09:41.033', 'Id': '19716'},282299:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have recently summarized several algorithms for the <a href="https://en.wikipedia.org/wiki/Maximum_disjoint_set" rel="nofollow">maximum disjoint set</a> problem. This problem is NP-hard, but it has both PTAS and sub-exponential algorithms. These algorithms seem to me closely related. The details vary, but the general idea is:</p>\n\n<ul>\n<li>For a PTAS: remove a small fraction of the input set (e.g. $O(\\sqrt{n})$ shapes). Partition the remaining input set to two subsets. Recursively find an approximate maximum set on each subset, and return the union of these two sets as the approximate solution.</li>\n<li>For a sub-exponential algorithm: instead of removing those $O(\\sqrt{n})$ shapes, check all possible subsets of them. For each subset, do the recursive step as in the PTAS. Return the best solution found. The runtime is dominated by the number of all possible subsets, which is $O(2^\\sqrt{n})$.</li>\n</ul>\n\n<p>Initially I thought that maybe every problem with a PTAS has a sub-exponential exact algorithm, but I haven\'t found such a relation so I assume it is not true. My questions are therefore:</p>\n\n<ul>\n<li>Are there problems with PTAS but provably no subexponential algorithms (no algorithms with runtime $O(2^{n^e})$ with $e&lt;1$)?</li>\n<li>Are there problems with subexponential algorithms but provably no PTAS?</li>\n</ul>\n', 'ViewCount': '27', 'Title': 'PTAS vs. exact-time sub-exponential algorithms', 'LastActivityDate': '2014-01-21T17:05:37.750', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<complexity-theory><time-complexity><np-complete>', 'CreationDate': '2014-01-21T17:05:37.750', 'Id': '19871'},282300:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have the following problem.</p>\n\n<blockquote>\n  <p>Maximize $\\sum\\limits_{m=1}^M\\sum\\limits_{n=1}^N x_{mn}$</p>\n  \n  <p>subject to: $\\sum\\limits_{\\substack{m^\\prime=1\\\\ m^\\prime \\neq m}}^M\\sum\\limits_{\\substack{n^\\prime=1\\\\ n^\\prime \\neq n}}^N \\alpha_{mn^\\prime}x_{m^\\prime n^\\prime} \\leq \\alpha_{mn},~~ \\forall~ m\\in\\{1, 2, \\cdots, M\\}, \\forall~ n\\in\\{1, 2, \\cdots, N\\} .$</p>\n  \n  <p>where, $x_{mn} \\in \\{0, 1\\}$, and $\\alpha_{mn} \\in \\mathbb{R} ~\\forall~ m\\in\\{1, 2, \\cdots, M\\}, \\forall~ n\\in\\{1, 2, \\cdots, N\\}$ </p>\n</blockquote>\n\n<p>Please can I say that this is a knapsack problem? \nIs there a way to find a reduction from knapsack problem? In the <a href="http://en.wikipedia.org/wiki/List_of_knapsack_problems" rel="nofollow">most basic form of knapsack problem</a>, if the weights are all equal 1 the optimal solution is easy to solve.</p>\n', 'ViewCount': '61', 'Title': 'Is this problem a knapsack problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-22T21:40:49.310', 'LastEditDate': '2014-01-22T21:40:49.310', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12683', 'Tags': '<complexity-theory><optimization><np-hard><knapsack-problems><integer-programming>', 'CreationDate': '2014-01-22T18:58:47.070', 'Id': '19897'},282301:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '60', 'Title': 'Is it possible to encode an arbitrary computation as a series of NP complete problem instances?', 'LastEditDate': '2014-01-25T16:40:32.763', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13118', 'Body': '<p>For example, can I make a compiler that transforms a C program (Turing complete language) into a bunch of SAT instances.</p>\n\n<p>This encoding would be motivated as a way for specifying a problem piecemeal, where work on each piece could be verified in polynomial time.</p>\n', 'ClosedDate': '2014-02-02T11:29:06.923', 'Tags': '<complexity-theory><computability><np-complete>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-25T18:14:48.120', 'CommentCount': '6', 'AcceptedAnswerId': '19964', 'CreationDate': '2014-01-25T03:49:36.860', 'Id': '19960'},282302:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>We have had <a href="http://cs.stackexchange.com/search?q=cook+reduction+is%3Aquestion">several questions about the relation of Cook and Karp reductions</a>. It\'s clear that Cook reductions (polynomial-time Turing reductions) do not define the same notion of NP-completeness as Karp reductions (polynomial-time many-one reductions), which are usually used. In particular, Cook reductions can not separate NP from co-NP even if P $\\neq$ NP. So we should not use Cook reductions in typical reduction proofs. </p>\n\n<p>Now, students found a peer-reviewed work [1] that uses a Cook-reduction for showing that a problem is NP-hard. I did not give them full score for the reduction they took from there, but I wonder.</p>\n\n<p>Since Cook reductions <em>do</em> define a similar notion of hardness as Karp reductions, I feel they <em>should</em> be able to separate P from NPC resp. co-NPC, assuming P $\\neq$ NP. In particular, (something like) the following should be true:</p>\n\n<p>$\\qquad\\displaystyle L_1 \\in \\mathrm{NP}, L_2 \\in \\mathrm{NPC}_{\\mathrm{Karp}}, L_2 \\leq_{\\mathrm{Cook}} L_1 \\implies L_1 \\in \\mathrm{NPC}_{\\mathrm{Karp}}$.</p>\n\n<p>The important nugget is that $L_1 \\in \\mathrm{NP}$ so above noted insensitivity is circumvented. We now "know" -- by definition of NPC -- that $L_2 \\leq_{\\mathrm{Karp}} L_1$.</p>\n\n<p>As has been <a href="http://chat.stackexchange.com/transcript/message/13483686#13483686">noted by Vor</a>, it\'s not that easy (notation adapted):</p>\n\n<blockquote>\n  <p>Suppose that $L_1 \\in \\mathrm{NPC}_{\\mathrm{Cook}}$, then by definition, for all languages $L_2 \\in \\mathrm{NPC}_{\\mathrm{Karp}} \\subseteq \\mathrm{NP}$ we have $L_2 \\leq_{\\mathrm{Cook}} L_1$; and if the above implication is true then $L_1 \\in \\mathrm{NPC}_{\\mathrm{Karp}}$ and thus $\\mathrm{NPC}_{\\mathrm{Karp}} = \\mathrm{NPC}_{\\mathrm{Cook}}$ which is still an open question.</p>\n</blockquote>\n\n<p>There may be other differences between the two NPCs but co-NP.</p>\n\n<p>Failing that, are there any known (non-trivial) criteria for when having a Cook-reduction implies Karp-NP-hardness, i.e. do we know predicates $P$ with</p>\n\n<p>$\\qquad\\displaystyle L_2 \\in \\mathrm{NPC}_{\\mathrm{Karp}}, L_2 \\leq_{\\mathrm{Cook}} L_1, P(L_1,L_2) \\implies L_1 \\in \\mathrm{NPC}_{\\mathrm{Karp}}$?</p>\n\n<hr>\n\n<ol>\n<li><a href="http://dx.doi.org/10.1089/cmb.1994.1.337" rel="nofollow">On the Complexity of Multiple Sequence Alignment</a> by L. Wang and T. Jiang (1994)</li>\n</ol>\n', 'ViewCount': '71', 'Title': 'Can we construct a Karp reduction from a Cook reduction between NP problems?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T07:56:44.503', 'LastEditDate': '2014-02-05T07:56:44.503', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<complexity-theory><reference-request><np-complete><reductions>', 'CreationDate': '2014-01-29T18:33:16.763', 'FavoriteCount': '1', 'Id': '20074'},282303:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I am trying to create a polynomial time algorithm for a problem defined as follows:</p>\n\n<blockquote>\n  <h3>c-ZPath(cZP)</h3>\n  \n  <p>$c$ is an integer constant $\\geq 1$ </p>\n  \n  <p><strong>Input:</strong> An undirected graph $G=(V,E)$. </p>\n  \n  <p><strong>Question:</strong> Can the vertices in $G$ be colored with two colors such that</p>\n  \n  <ol>\n  <li><p>no edge\u2019s endpoint vertices have the same color and</p></li>\n  <li><p>there is a path in this colored version of $G$ with $\\geq c$ edges in which no vertex or edge repeats and the vertex-colors alternate for the entire length of the path? </p></li>\n  </ol>\n</blockquote>\n\n<p>I understand that the coloring can be checked by a simple breadth first search in polynomial time. </p>\n\n<p>My problem is with the path of length $c$. My professor stated that the reason that this is not NP-complete and analogous to the longest path problem is because $c$ is a constant. I fail to see why this restriction causes it to differ from longest path. If anyone could clarify this for me I'd be really greatful. </p>\n", 'ViewCount': '22', 'Title': 'Restricting longest path with 2-coloring to paths of at most constant length', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-29T20:34:41.350', 'LastEditDate': '2014-01-29T20:34:41.350', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '20082', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '13230', 'Tags': '<complexity-theory><time-complexity><np-complete>', 'CreationDate': '2014-01-29T19:57:44.057', 'Id': '20081'},282304:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm a novice to the topic of provability so bear with me... </p>\n\n<p>During a discussion with a friend, the question came up whether it could be possible that proving that $NP \\neq P$ (or $NP = P$) is an unprovable statement. My friend opposed that, if indeed it was unprovable, then this would imply that there cannot be a polynomial time algorithm for NP-hard problems (as the existence of such proves the statement), thus implying $NP \\neq P$. This seems to be imply that the statement cannot be unprovable or am I missing something?</p>\n", 'ViewCount': '82', 'Title': 'Provability of NP /= P?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-30T15:17:53.247', 'LastEditDate': '2014-01-30T15:17:53.247', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '13244', 'Tags': '<complexity-theory><np><p-vs-np>', 'CreationDate': '2014-01-30T13:57:04.927', 'FavoriteCount': '1', 'Id': '20106'},282305:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have an example for a reduction of 3CNF to Clique, there is one thing I don't get about it, hopefully you could clarify it.  The reduction works like this:</p>\n\n<blockquote>\n  <p>Construct a graph G = (V, E) as follows:</p>\n  \n  <p>Vertices: Each literal corresponds to a vertex.</p>\n  \n  <p>Edges: All vertices are connected with an edge except the vertices of\n  the same clause and vertices with negated literals.</p>\n</blockquote>\n\n<p>Why is it important that that negated literals will not be connected? How would that effect the reduction?</p>\n", 'ViewCount': '42', 'Title': 'Reducing 3CNF to Clique: Why do we omit negated literals?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-31T08:16:45.470', 'LastEditDate': '2014-01-31T08:16:45.470', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '20133', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '9851', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2014-01-30T18:38:25.957', 'Id': '20127'},282306:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/Petersen%27s_theorem" rel="nofollow">Petersen\'s Theorem</a> states that every cubic, bridgeless graph $G(V, E)$ contains a 2-factor $F$ (and therefore a perfect matching $E-F$). Alternatively, 2-factor is a set of vertex disjoint cycles that cover $V$. I\'m interested in the computational properties of 2-factors in connected bridgeless cubic graphs. I conjecture that every non-trivial property of two-factors in connected bridgeless cubic graphs is intractable.</p>\n\n<p>There are two parameters of two-factor: the number of disjoint cycles and the size of each cycle. So, it seems that restricting cycles sizes and/or the number of cycles in the 2-factor would make the decision problem of deciding the existence of restricted 2-factor is $NP$-complete. For instance, I conjecture the following decision problem is NP-complete: Given connected bridgeless cubic graph, decide whether it contains 2-factor such that sizes of each cycle are between two integers $n$ and $m$.</p>\n\n<p><strong>Non-trivial property</strong> in this context means a restriction on the parameters of  2-factor (in connected bridgeless cubic graph ) which partitions the class of connected bridgeless cubic graphs into two infinite sets. Therefore, there is infinite set of connected bridgeless cubic graphs with their 2-factor satisfying the property and infinite set not satisfying the property. I am aware of several $NP$-complete properties of 2-factors in connected bridgeless cubic graphs. For instance, Deciding the existence of connected 2-factor, even 2-factor, and odd 2-factor are all $NP$-complete problems.</p>\n\n<blockquote>\n  <p>When does such non-trivial property of 2-factor become $NP-complete? When does it become polynomial-time decidable?</p>\n</blockquote>\n\n<p>This is an improved version of a post originally posted on TCS SE.</p>\n', 'ViewCount': '97', 'Title': 'Intractable properties of Two-factor in connected bridgeless cubic graphs', 'LastEditorUserId': '96', 'LastActivityDate': '2014-02-06T21:01:54.387', 'LastEditDate': '2014-02-02T03:11:02.460', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><graph-theory><np-complete>', 'CreationDate': '2014-02-02T02:08:18.210', 'FavoriteCount': '0', 'Id': '20203'},282307:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>The optimization version of TSP asks for the length of the shortest tour. Unlike the decision version of TSP, there's no obvious way to verify a proposed solution of the optimization problem in polynomial time. But is there a proof of whether or not it can be verified in polynomial time assuming P \u2260 NP?</p>\n", 'ViewCount': '56', 'Title': u'Has it been proven that the optimization TSP is (or is not) polynomial-time verifiable if P \u2260 NP?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-02T13:42:30.540', 'LastEditDate': '2014-02-02T13:42:30.540', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '20209', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '836', 'Tags': '<complexity-theory><optimization><np><traveling-salesman>', 'CreationDate': '2014-02-02T05:46:32.140', 'Id': '20204'},282308:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a set of line segments, how do we identify a subset of maximal cardinality where all line segments are pairwise non-intersecting?</p>\n\n<p>Brute force we would get $2^n$ sets to check where $n$ is the number of line segments, so that isn\'t viable. Anyone got a bright idea how the do this efficiently? I tried doing it this way: remove a line segment that intersects with the most other line segments, iterate until no line segments intersect anymore; but that didn\'t work.</p>\n\n<hr>\n\n<p><a href="http://jsfiddle.net/afaucogney/RwNXL/" rel="nofollow">Here</a> is a "ready to help me" place, where you can test your solution; it visualizes the set of line segments.</p>\n\n<p>To try it out, please implement your attempt in the following function on the linked site:</p>\n\n<pre><code>function showAnalysis() {\n    debug("Just do it");\n}\n</code></pre>\n\n<p>and then click on the top canvas. The fiddle generates randoms segments in the top canvas, and the bottom canvas is the place where an optimal subset will be displayed.</p>\n', 'ViewCount': '117', 'Title': 'Efficiently pick a largest set of non-intersecting line segments', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-07T07:22:28.420', 'LastEditDate': '2014-02-07T07:22:28.420', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '1', 'OwnerDisplayName': 'Anthony', 'PostTypeId': '1', 'Tags': '<algorithms><optimization><np-hard><efficiency>', 'CreationDate': '2014-01-22T14:04:07.477', 'Id': '20263'},282309:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I can\'t understand or imagine some fact about NP-hard problems. If I understand it correctly there is only one polynomial-time algorithm needed &ndash; for whichever NP-complete problem &ndash; to prove that P = NP.</p>\n\n<p>Let\'s take the subset sum problem, which is NP-complete. It says that given a set such as $\\{-7, -3, -2, 5, 8\\}$, we\'re able to find out if there exists a subset of this set summing to zero, within exponential time (and obviously check a solution, for instance $\\{-3, -2, 5\\}$ within polynomial time).</p>\n\n<p>So if someone finds an polynomial-time algorithm for this task, he\'ll show that P = NP, right?</p>\n\n<p>EDIT: I removed:</p>\n\n<blockquote>\n  <p>Assuming, that opinions whether P = NP or P \u2260 NP amongst computer scientists are about 1:1 (<a href="http://www.win.tue.nl/~gwoegi/P-versus-NP.htmh9zmHrJjx7Gfw&amp;bvm=bv.60983673,d.Yms" rel="nofollow">this site</a> claims that they\'re ~ 52% and ~44% respectively)...</p>\n</blockquote>\n\n<p>As the guys noticed in comments, it\'s wrong. I should say the proven cases are like 1:1.</p>\n\n<p>Okay, so it gets more intuitive now. I mean, P \u2260 NP actually seems to be \'more likely now\':</p>\n\n<p>However, assuming that there are still, say, 5-10% of formally educated people who believes that P = NP and the cited problem is not, say, the most complex one, how is that even possible that no one  of them had found a polynomial-time algorithm yet OR (maybe more likely?) no one of their opponents proved that there\'s no such an algorithm? Or, does it also mean that (in terms of those people\'s opinions, again) the \'chances\' of there being  such an algorithm are like 1:1, too?</p>\n\n<p>From my (maybe naive) point of view, the subset sum problem seems so simple to crack &ndash; at least for advanced computer scientists.</p>\n\n<p>As you\'re probably aware of, searching in the Net would not help me much as I just can\'t deeper into this problem. I\'ve got no such mathematical knowledge to even comprehend it more.</p>\n', 'ViewCount': '93', 'ClosedDate': '2014-02-10T08:25:27.573', 'Title': u'What makes it so difficult to prove P =/\u2260 NP? \u2014 The subset sum issue', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T08:24:17.317', 'LastEditDate': '2014-02-10T08:24:17.317', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14531', 'Tags': '<complexity-theory><np-complete><p-vs-np>', 'CreationDate': '2014-02-09T23:35:04.740', 'Id': '21478'},282310:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<blockquote>\n  <p><strong>The problem:</strong></p>\n  \n  <p><em>Input</em>: An $n \\times n$ matrix of 0's and 1's, and a position <em>pos</em> of this matrix (i.e. a pair of integers $i,j$ with $1 \\leq i,j \\leq n$)</p>\n  \n  <p><em>Output</em>:</p>\n  \n  <p>YES if there exists a path through <strong>adjacent</strong> matrix entries $\\dagger$, starting at <em>pos</em>, covering each matrix entry with a 1 <strong>exactly once</strong>, and not covering the matrix entries with a 0.</p>\n  \n  <p>NO otherwise.</p>\n</blockquote>\n\n<p>$\\dagger$ a matrix entry is adjacent to the one immediately to its left, to the one immediately to its right, to the one immediately upwards and the one immediately below.</p>\n\n<hr>\n\n<p>Informally, the matrix can be seen as a labyrinth where the 0's are walls, you start somewhere, and you have to walk through the whole maze without repeating any position.</p>\n\n<p>Example input:</p>\n\n<pre><code>1100\n1100\n0000\n0001\nPos: (1,1)\n</code></pre>\n\n<p>Corresponding output:</p>\n\n<pre><code>No (because you can't reach the position (4,4))\n</code></pre>\n\n<hr>\n\n<p>Is this problem NP-complete? If it is, what other NP-complete problem has been reduced to it? If it isn't, what approach can I use to design an efficient algorithm?</p>\n\n<p>I think this is a particular case of the hamiltonian path problem (except that you have a fixed starting point). The graph can be constructed by taking the matrix entries with 1's as vertices. 2 vertices are adjacent iff their corresponding matrix entries are adjacent. So I think that reducing this problem to the hamiltonian path problem should be easy. Of course, to prove it is NP-complete, we would have to do the reduction backwards.</p>\n", 'ViewCount': '67', 'Title': 'Is this path finding problem in a 01-matrix NP-complete?', 'LastEditorUserId': '14555', 'LastActivityDate': '2014-02-11T20:50:59.417', 'LastEditDate': '2014-02-11T20:50:59.417', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '21511', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14555', 'Tags': '<complexity-theory><np-complete><reductions><np>', 'CreationDate': '2014-02-10T23:14:29.853', 'Id': '21510'},282311:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If any problem P is NP complete then if there is a polynomial time reduction of P to another problem R then what can we say about R.Is it NP-hard or NP complete ?<br>\nFrom Theory of computation of Hopcroft,Ullman theorem 10.4 it says it would be NP complete but there some times when i see that it is NP-Hard in some other reference . is there any condition when it is NP Hard or NP Complete .Or i misunderstood the theorem .</p>\n', 'ViewCount': '33', 'Title': 'NP hard relation with NP complete', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-02-13T20:29:01.697', 'LastEditDate': '2014-02-13T19:17:11.720', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14647', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2014-02-13T18:43:05.647', 'Id': '21604'},282312:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I wanted to find all valid <a href="http://en.wikipedia.org/wiki/Net_%28polyhedron%29" rel="nofollow">nets</a> of a polyhedron. Is this kind of problem NP-Hard?</p>\n\n<p>My guess is that it is. If you were to increase the "complexity" of the polyhedron (maybe this is the number of faces?), there is no "shortcut" to discovering all the nets; you would have to enumerate all combinations. This sort of "listing all combinations" without any shortcuts seems to be similar to other kind of NP problems I\'ve seen. Is my thinking correct? Can someone else explain their thought process that helps them decide whether this problem is NP-Hard or not?</p>\n\n<p>If this problem is not NP-Hard, how do you classify this and why?</p>\n', 'ViewCount': '68', 'Title': 'Is finding all valid nets of a polyhedron NP-hard?', 'LastEditorUserId': '472', 'LastActivityDate': '2014-02-17T09:40:02.893', 'LastEditDate': '2014-02-17T09:40:02.893', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14728', 'Tags': '<complexity-theory><computational-geometry><np-hard>', 'CreationDate': '2014-02-16T21:54:30.863', 'Id': '21708'},282313:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The Triangle Cover Graph problem is this:</p>\n\n<blockquote>\n  <p>Given a graph $G = (V,E)$ and an integer $k$, does there exist a set of at most $k$ vertices of $G$ such that every triangle contained in $G$ also contains a vertex of the set?</p>\n</blockquote>\n\n<p>This problem is obviously in $NP$ as its verifier is just the set which you can easily check.  However, what's the reduction to be able to show that this is NP Complete?</p>\n\n<p>I recognize the fact that a good reduction for this problem would be for 3-SAT as you could easily take a 3-sat instance and make a 3-vertex triangle in the graph corresponding to the variables which are in each clause.  However, I wasn't able to come up with a way to connect the different triangles together to ensure that the assignment of vertices would be a satisfiable truth assignment.</p>\n", 'ViewCount': '58', 'Title': 'Reducing 3SAT to Triangle Cover Graph', 'LastEditorUserId': '683', 'LastActivityDate': '2014-02-19T14:58:51.107', 'LastEditDate': '2014-02-19T14:58:51.107', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14824', 'Tags': '<complexity-theory><graph-theory><np-complete><reductions>', 'CreationDate': '2014-02-19T00:19:18.737', 'FavoriteCount': '1', 'Id': '21792'},282314:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '86', 'Title': 'minimizing the summed cardinality of set unions', 'LastEditDate': '2014-02-24T17:46:51.283', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14883', 'FavoriteCount': '1', 'Body': '<p>this optimization problem, I am working on, is kind of making me crazy. ;)</p>\n\n<p>Given is a list <code>o</code> of sets (with finite cardinality) of strictly positive integer values (Z>0), e.g.:</p>\n\n<pre><code>o_without_sizes =\n[ {1, 2, 3, 4}\n, {5, 6}\n, {2, 3, 4, 5}\n, {5, 6, 7}\n, {7, 8}\n. {9} ]\n</code></pre>\n\n<p>Every set has a name <code>n</code> (also in Z>0, but only for identification) and a fixed independent size value <code>s</code> (also in Z>0), e.g.:</p>\n\n<pre><code>type O = [(Name, Size, Values)]\no =\n[ (1, 2, {1, 2, 3, 4})\n, (2, 1, {5, 6})\n, (3, 2, {2, 3, 4, 5})\n, (4, 3, {5, 6, 7})\n, (5, 2, {7, 8})\n. (6, 1, {9}) ]\n</code></pre>\n\n<p>These sets are to be combined to unions <code>b</code> of a maximum size value sum <code>h (&gt;= max s, that means that no set has a size making it too big to fit into a single union)</code>, e.g. 4.</p>\n\n<p>The goal is to find the <code>b</code> so that the sum of cadinalities of the unions in it is as small as possible.\nhere is a bad <code>b</code>:</p>\n\n<pre><code>size:   3,  cardinality:   6,   sets: [1,2]  ,  values: [1,2,3,4,5,6]\nsize:   2,  cardinality:   4,   sets: [3]    ,  values: [2,3,4,5]\nsize:   3,  cardinality:   3,   sets: [4]    ,  values: [5,6,7]\nsize:   3,  cardinality:   3,   sets: [5,6]  ,  values: [7,8,9]\ncardinality sum:  16\n</code></pre>\n\n<p>and the optimum <code>b</code> for this example:</p>\n\n<pre><code>size:   4,  cardinality:   5,   sets: [3,1]  ,  values: [1,2,3,4,5]\nsize:   4,  cardinality:   3,   sets: [2,4]  ,  values: [5,6,7]\nsize:   3,  cardinality:   3,   sets: [5,6]  ,  values: [7,8,9]\ncardinality sum:  11\n</code></pre>\n\n<p>Until now I only implemented a naive brute force solution (Haskell code): <a href="http://lpaste.net/7204008959806537728" rel="nofollow">http://lpaste.net/7204008959806537728</a></p>\n\n<p>I was hoping to find a dynamic programming solution like it exists for the (Z>0) 0-1 knapsack problem, but did not yet succeed.\nIs my problem perhaps NP-hard? If so, is it many-one-reducible to SAT or something? Or is there a good approximation?</p>\n\n<p>Of course, if there exists a known efficient optimal algorithm, it would be awesome if you could enlighten me. :)</p>\n', 'Tags': '<algorithms><np-complete><optimization><dynamic-programming><np-hard>', 'LastEditorUserId': '14883', 'LastActivityDate': '2014-02-24T17:46:51.283', 'CommentCount': '2', 'AcceptedAnswerId': '21867', 'CreationDate': '2014-02-20T19:25:23.093', 'Id': '21857'},282315:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've seen a lot of text concerning the first NP-Complete problem, Boolean Satisfiability. I guess I'm confused concerning the language. </p>\n\n<p>It sounds to me as though the problem could be difficult to compute (hence the NP-complete), however it still might be satisfiable. As in, there <em>exists</em> a satisfying mapping of literals. We can't necessarily compute it easily, but it's out there.</p>\n\n<p>In fact, I would guess that the two adjectives really have no relation to each other. But, when working with problems, I am often asked to see whether a set of clauses is satisfiable. Does that mean, <em>Can we compute a satisfying mapping?</em> And by extension, does NP-complete imply that a given CNF setup is unsatisfiable?</p>\n", 'ViewCount': '103', 'Title': 'Does NP-Complete imply non-satisfiability?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-21T10:30:36.100', 'LastEditDate': '2014-02-21T10:30:36.100', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '21874', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12971', 'Tags': '<complexity-theory><terminology><np-complete><satisfiability>', 'CreationDate': '2014-02-21T01:53:02.537', 'Id': '21871'},282316:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I hope I named this CNF Boolean sentence the correct way. The way I see it, a 2P2N is where each literal appears twice (or at most twice, but we can say twice without loss of generality). </p>\n\n<p>I am trying to prove it is Satisfiable. How do I do this? Do I need to try to reduce it to 3-SAT (might need some help doing that as well). Or is there another method of proving satisfiability?</p>\n', 'ViewCount': '62', 'Title': 'Proving 2P2N SAT is NP-Complete', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-21T20:38:37.950', 'LastEditDate': '2014-02-21T11:52:24.113', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '21907', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12971', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'CreationDate': '2014-02-21T02:34:05.097', 'Id': '21873'},282317:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I was proposed (in school) to develop an approach to solve optimally the balanced partition problem. I tried the pseudo-linear algorithms but SUM is very large (~1M) and so O(S*N) cant run under available time (1000ms). I talked to the teacher and with N =&lt; 60 he recommended the brute force (we are learning recursion). I've tried some approaches but I cant find a recursive algorithm that runs under 1 second. Its possible as some students got an solution that runs in less than 100ms.</p>\n\n<p>What is an efficient recursive approach to this problem given data with this magnitude?</p>\n", 'ViewCount': '27', 'LastEditorDisplayName': 'user14946', 'Title': 'Balanced partition problem for N =< 60 and very large sums', 'LastActivityDate': '2014-02-22T22:18:40.147', 'LastEditDate': '2014-02-22T22:18:40.147', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'user14946', 'PostTypeId': '1', 'Tags': '<np-complete><optimization><partition-problem>', 'CreationDate': '2014-02-22T22:09:20.530', 'Id': '21932'},282318:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Nobody yet knows if ${\\sf P}={\\sf NP}$. Let us consider the following language</p>\n\n<p>$$L = \\begin{cases} (0+1)^* &amp; \\text{ if ${\\sf P}$ = ${\\sf NP}$} \\\\ \\emptyset &amp;\\text{ otherwise}. \\end{cases}$$</p>\n\n<p>A language is said to be recursive if there exists any rule to determine whether a string belong to language or not. We have a rule here, but the rule itself depends upon an unknown equation. So can we say $L$ is recursive?</p>\n', 'ViewCount': '121', 'Title': 'Is this language depending on P = NP recursive?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-26T05:55:59.580', 'LastEditDate': '2014-02-25T20:21:10.610', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '12234', 'Tags': '<computability><undecidability><p-vs-np>', 'CreationDate': '2014-02-25T08:55:19.393', 'Id': '22017'},282319:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Reading this <a href="http://classes.soe.ucsc.edu/cmps102/Spring10/lect/17/SAT-3SAT-and-other-red.pdf" rel="nofollow">http://classes.soe.ucsc.edu/cmps102/Spring10/lect/17/SAT-3SAT-and-other-red.pdf</a>, I came to know that reducing a clause $C_i$ from a $SAT$ instance containing more than 3 literals to a $3-SAT$ instance is done this way,</p>\n\n<p>Suppose $C_1$ is $\\{x_1, x_2, x_3, x_4\\}$. It\'s equivalent representation in 3-literal clauses is,</p>\n\n<p>$C_{3-SAT} = \\{\\{x_1, x_2, y_1\\},\\{\\bar{y_1}, x_3,x_4\\}\\}$</p>\n\n<p>The issue lies here. Assume for $C_1$, all the literals are $False$ except for $x_2$.\nFor $C_{3-SAT}$, the first clause would indeed be $True$, but the boolean value for the second clause depends on the choice of $y_1$. What if we chose $y_1 = True$? then, $C_{3-SAT}$ will be $False$, yet $C_1$ is $True$, realizing a false reduction.</p>\n', 'ViewCount': '185', 'Title': 'Issue understanding the reduction of SAT to 3-SAT in poly time', 'LastActivityDate': '2014-02-26T13:45:34.337', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22053', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15072', 'Tags': '<algorithms><np-complete><satisfiability><3-sat><boolean-algebra>', 'CreationDate': '2014-02-26T13:28:05.573', 'FavoriteCount': '1', 'Id': '22052'},282320:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to prove that a problem $P_1$ is NP-complete. Let say that I want to do a reduction from SAT problem.</p>\n\n<p>If the instance of problem $P_1$ depends on $M$ and $N$, can I specify the sturcture of the instance of the SAT problem? </p>\n\n<p>More precisely, can I say that, for example, the instance of SAT problem is composed of $M\\times N +1$ clauses and every clause has $M+N$ literals ? </p>\n\n<p>Based on this structure of the instance of SAT problem, I construct an instance of $P_1$. Is this proof correct?</p>\n', 'ViewCount': '87', 'Title': 'Is this NP-completeness proof correct?', 'LastEditorUserId': '472', 'LastActivityDate': '2014-03-04T19:45:18.393', 'LastEditDate': '2014-03-04T19:45:18.393', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22105', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12683', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'CreationDate': '2014-02-27T17:04:17.090', 'Id': '22097'},282321:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '97', 'Title': 'Bin packing problem or not?', 'LastEditDate': '2014-03-01T16:16:32.943', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12683', 'FavoriteCount': '1', 'Body': '<p>Suppose I have $N$ bins and $M$ items as depicted in the figure below (3 bins and 3 items):</p>\n\n<p>Suppose that every bin has unit capacity and the weights of the items depend on the bins used. I want to maximize the number of items in the bins subject to:</p>\n\n<ul>\n<li>One bin contains at most one item.</li>\n<li>If item $i$ is on bin $j$ then $g_{ij}\\geq1$ must hold now if all other bins are empty.</li>\n<li>If item $i$ is on bin $j$ (so $g_{ij}\\geq1$ must hold now) and item $i^\\prime$ is on bin $j^\\prime$, then $g_{ij}\\geq g_{ij^\\prime}$ and $g_{i^\\prime j^\\prime}\\geq g_{i^\\prime j}$ must both hold now.</li>\n<li>If item $i$ is on bin $j$ (so $g_{ij}\\geq1$ must hold now) and item $i^\\prime$ is on bin $j^\\prime$ (so $g_{ij}\\geq g_{ij^\\prime}$ and $g_{i^\\prime j^\\prime}\\geq g_{i^\\prime j}$ must both hold now) and item $i^{\\prime\\prime}$ is on bin $j^{\\prime\\prime}$, then $g_{ij}\\geq g_{ij^\\prime}+g_{ij^{\\prime\\prime}}$ and $g_{i^\\prime j^\\prime}\\geq g_{i^\\prime j}+g_{i^\\prime j^{\\prime\\prime}}$ and $g_{i^{\\prime\\prime} j^{\\prime\\prime}}\\geq g_{i^{\\prime\\prime} j}+g_{i^{\\prime\\prime} j^{\\prime}}$ must all hold now.</li>\n<li>And so on and so forth.</li>\n<li>In general I will have the following constraint: $g_{ij}x_{ij}\\geq\\sum\\limits_{i^\\prime=1,\\;i^\\prime \\neq i}^{M}\\sum\\limits_{j^\\prime=1,\\;j^\\prime \\neq j}^{N}g_{ij^\\prime}x_{i^\\prime j^\\prime}$, where $x_{ij}$ equals $1$ if item $i$ is in bin $j$ and equals $0$ otherwise.</li>\n</ul>\n\n<p>Finally, I have the following problem:</p>\n\n<p>Maximize $\\sum\\limits_{i=1}^{M}\\sum\\limits_{j=1}^{N}x_{ij}$</p>\n\n<p>subject to</p>\n\n<ul>\n<li><p>$\\frac{g_{ij}x_{ij}}{\\sum\\limits_{i^\\prime=1,\\;i^\\prime \\neq i}^{M}\\sum\\limits_{j^\\prime=1,\\;j^\\prime \\neq j}^{N}g_{ij^\\prime}x_{i^\\prime j^\\prime}}\\geq x_{ij},\\; \\forall i, j,$ (C1)</p></li>\n<li><p>$\\sum\\limits_{j=1}^{N}x_{ij}\\leq1,\\; \\forall i,$ (C2)</p></li>\n<li><p>$\\sum\\limits_{i=1}^{M}x_{ij}\\leq1,\\; \\forall j,$ (C3)</p></li>\n</ul>\n\n<p>and $x_{ij}\\in\\{0, 1\\},\\; \\forall i, j,$ (C4)</p>\n\n<p>The input of the problem is $M$, $N$, and $g_{ij},\\;\\forall i,j$. The right hand side of constraint (C1) is to say that when item $i$ is not in bin $j$ (i.e., $x_{ij}=0$) then (C1) is not violated. (C2) and (C3) say that one item goes to one bin and one bin contains one item, respectively. Finally, (C4) is the variable of the problem which is a binary variable.</p>\n\n<p>My question is: Can I say that this problem is a bin packing problem and it is therefore NP-hard? If not, Can you suggest a reduction idea from an NP-complete problem?</p>\n\n<p>Thank you for your help.</p>\n\n<p><img src="http://i.stack.imgur.com/xL94M.jpg" alt="enter image description here"></p>\n', 'Tags': '<complexity-theory><np-complete><optimization><np-hard>', 'LastEditorUserId': '12683', 'LastActivityDate': '2014-03-01T18:23:05.530', 'CommentCount': '5', 'AcceptedAnswerId': '22157', 'CreationDate': '2014-02-28T18:42:52.333', 'Id': '22136'},282322:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose you have an NP problem, and a polynomial time verifier which accepts valid solutions within <code>f(n)</code> operations.</p>\n\n<p>You make a tweak to the verifier program, so that if it takes more than <code>f(n)</code> operations it unconditionally rejects. Then you place it into an NP machine and run it on all possible certificates for some instance of the problem where you\'re not sure if it has a solution. The unconditional reject after <code>f(n)</code> operations ensures the computation terminates within <code>f(n)</code> operations, even when rejecting. So this NP machine can solve the co-NP dual of the NP problem, where you want to reject in polynomial time when there is no solution.</p>\n\n<p>Except that can\'t be right, because it seems to imply <code>NP=co-NP</code> and that\'s not believed to be true. I have an incorrect assumption or inference somewhere. What is it? Why can\'t I avoid NP\'s "negatives might run for a long time or even forever" with algorithm-specific time cutoffs?</p>\n\n<p>A concrete example: suppose you have a 3-SAT verifier that takes no more than <code>42 n^2</code> operations to check a solution to an <code>n</code> clause problem (involving up to <code>3n</code> variables). You then make an NP program like "non-deterministically choose a variable assignment, run verifier for up to 42 n^2 steps, return its result else reject if it didn\'t finish". So within <code>42 n^2</code> operations we\'ll have an answer, and flipping it gives the "is there no satisfying assignment" answer. Why is this not an NP algorithm for the co-NP problem of determining if there is no satisfying assignment to a 3-SAT problem?</p>\n', 'ViewCount': '41', 'Title': "Why doesn't a time cutoff convert NP problems into co-NP?", 'LastEditorUserId': '535', 'LastActivityDate': '2014-03-02T21:08:48.943', 'LastEditDate': '2014-03-02T20:56:00.557', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '535', 'Tags': '<np><intuition><paradox><co-np>', 'CreationDate': '2014-03-02T20:31:20.237', 'FavoriteCount': '2', 'Id': '22204'},282323:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '90', 'Title': 'Hardness of mixed 3-SAT and 2-SAT formula', 'LastEditDate': '2014-03-04T09:12:17.513', 'AnswerCount': '2', 'Score': '3', 'OwnerDisplayName': 'Paramar', 'PostTypeId': '1', 'OwnerUserId': '12201', 'Body': '<p>It is well known that 3-SAT is $\\sf NP$-complete , but 2-SAT is in $\\sf P$. Let there be a formula with $n-1$ clauses with 2 literals each and only 1 clause with 3 literals.    </p>\n\n<p>We can solve this case in polynomial time, separating and solving in a brute force manner the 3 literal clause and then for each satisfying assignment try to solve the rest $n-1$ 2-literal clauses. This method can work till $O(\\log n)$ clauses with 3 literals. \nIf we consider a more general case with e.g $\\frac{n}{2}$ clauses with 2 literals and  $\\frac{n}{2}$ clauses with 3 literals does the problem remain $\\sf NP$-complete? </p>\n\n<p>It is a bit confusing because we have a subproblem approximately the same size, implying it is difficult and another one roughly the same size implying it is easy. Is there probably a better method than the one I proposed?</p>\n', 'Tags': '<complexity-theory><np-complete><satisfiability>', 'LastEditorUserId': '472', 'LastActivityDate': '2014-03-04T09:12:17.513', 'CommentCount': '0', 'AcceptedAnswerId': '22235', 'CreationDate': '2014-03-03T16:23:28.160', 'Id': '22233'},282324:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to show that some problem $P_1$ is NP-hard. I have a problem $P_2$ that is NP-complete. From an instance of $P_2$ I created in polynomial time an instance of the problem $P_1$.</p>\n\n<p>My question is: Should I verify both direction ($\\Leftrightarrow$) or only one direction ($\\Rightarrow$)? More precisely, which one to show from these two:</p>\n\n<ul>\n<li>Solve $P_1\\;\\Leftrightarrow$ solve  $P_2$</li>\n<li>Solve $P_1\\;\\Rightarrow$ solve  $P_2$</li>\n</ul>\n', 'ViewCount': '24', 'Title': 'There is equivalence in an NP-hardness proof or not?', 'LastActivityDate': '2014-03-03T22:03:14.687', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22240', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12683', 'Tags': '<complexity-theory><np-complete><reductions><np-hard>', 'CreationDate': '2014-03-03T21:51:46.457', 'Id': '22239'},282325:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a graph $G=(V,E)$ and a set of colors $k&lt;V$. Find a assignment of colors to vertices that minimizes the number of adjacent vertices in conflict. (Two adjacent vertices are in conflict if they have the same color.)</p>\n\n<p>I want to prove the above problem is NP-complete. Call the above problem P1.</p>\n\n<p>Answer: I am trying to reduce the k-coloring problem.</p>\n\n<p>P2: Given a graph $G=(V,E)$ and set of colors $k&lt;V$ is the graph k-colorable (zero conflicts)?</p>\n\n<p>P2 is feasible iff P1 has optimal value is exactly $0$. Therefore if P1 is solved we know solution to P2.</p>\n\n<p>Is this solution correct? Is it what is suggested by the first comment of user G.Bach in <a href="http://cs.stackexchange.com/questions/21431/a-variation-of-the-graph-coloring-problem">A variation of the graph coloring problem</a> ?</p>\n', 'ViewCount': '99', 'Title': 'Proving NP-completeness of a graph coloring problem', 'LastEditorUserId': '472', 'LastActivityDate': '2014-03-04T09:15:10.200', 'LastEditDate': '2014-03-04T09:15:10.200', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '22259', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><graph-theory><np-complete><reductions>', 'CreationDate': '2014-03-03T23:56:50.917', 'Id': '22246'},282326:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider a set of $N$ nodes. There is a $N\\times N$ non-negative valued matrix $D$ where the $(i,j)$th element $d_{ij}$ gives the "positive metric" between node $i$ and $j$, where $i,j\\in [N]$. Thus the diagonal entries of $D$ are all zero and $d_{ij}=d_{ji}$ so $D$ is symmetric. </p>\n\n<p>Then there is a set of  $k$ colors. I want to assign these colors to the $N$ nodes such that the minimum  metric of a common color between any pair of nodes is maximized. So if $c(i)$ is the color assigned to $i\\in [N]$ by the assignment $a\\in A$, where $A$ is the set of all possible color assignments, we are looking for $$\\max_{a\\in A} \\min_{i,j} \\{d_{ij}:c(i)=c(j)\\}.$$</p>\n\n<p>Is this problem NP-hard?  If it is, cwhat sort of reduction can be used to show that this problem is NP-hard?</p>\n', 'ViewCount': '98', 'Title': 'Relaxed graph coloring, with penalties for assigning adjacent vertices the same color', 'LastEditorUserId': '755', 'LastActivityDate': '2014-03-14T15:39:13.670', 'LastEditDate': '2014-03-14T15:39:13.670', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22257', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2014-03-04T03:42:40.617', 'Id': '22256'},282327:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>What I'm trying to do is to show a problem in NP can be reduced to the min weight vertex cover problem </p>\n\n<p>I've chosen the max independent weight problem = \ninput: A graph G with weights on each vertex,\noutput: An independent set with the max total weight</p>\n\n<p>Before reducing, I've tried to show that the max indep. weight problem is in NP (which is usually the first step in these reductions). I'm trying to construct a verification algorithm for this problem; but I'm stuck on trying to show that the verification algorithm can check if a certificate is the max indep. set in polynomial time. </p>\n\n<p>Any guidance or comments would be greatly appreciated.\nThanks</p>\n", 'ViewCount': '30', 'Title': 'Proving that Max Weighted Independent Set is in NP', 'LastActivityDate': '2014-03-07T02:45:59.663', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '22361', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '15375', 'Tags': '<reductions><np>', 'CreationDate': '2014-03-07T02:31:43.293', 'Id': '22360'},282328:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="https://en.wikipedia.org/wiki/3-partition_problem" rel="nofollow">The 3-Partition problem (wiki)</a> is a $\\text{NP}$-complete problem which is to decide whether a given multiset of integers can be partitioned into triples that all have the same sum. It is well-known that the <a href="https://en.wikipedia.org/wiki/3SAT#3-satisfiability" rel="nofollow">3SAT problem</a> has a plenty of variants. Are there some variants of the 3-Partition problem discussed in the literature?</p>\n', 'ViewCount': '18', 'Title': 'Variants of the 3-Partition problem', 'LastActivityDate': '2014-03-08T13:03:42.250', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4911', 'Tags': '<complexity-theory><reference-request><np-complete>', 'CreationDate': '2014-03-08T13:03:42.250', 'Id': '22396'},282329:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to reduce the vertex cover problem to a SAT problem, or rather tell whether a vertex cover of size k exists for a given graph, after solving with a SAT solver. I know how to reduce a 3-SAT problem to vertex cover problem, by constructing the subgraphs for each variable (x, !x) and for each clause (a triable). But I am not getting,how to do other way round?</p>\n\n<p>I was thinking of first forming a DNF ,with electing k vertices at first and then convert it to a CNF, by enumerating all clauses. Is there any other method?</p>\n', 'ViewCount': '164', 'Title': 'Reduce Vertex cover to SAT', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-03-12T17:03:09.430', 'LastEditDate': '2014-03-09T19:50:54.783', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22441', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '13302', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2014-03-09T12:43:04.730', 'Id': '22426'},282330:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let f be a polynomial-time reduction of a decision problem A to a decision\nproblem B. We know that, if B $\\in$ P then A $\\in$ P. Similarly, if B $\\in$ NP then\nA $\\in$ NP. However, what about the other direction? Assume that A $\\in$ NP and\nconsider the following non-deterministic algorithms to decide whether y $\\in$ B:</p>\n\n<ol>\n<li>"Guess" non-deterministically some x.</li>\n<li>Verify that f(x) = y by computing f(x) in polynomial time and comparing\nit with y. If f(x)$\\neq$y, reject.</li>\n<li>Check (using the polynomial-time nRAM for A) whether x $\\in$ A and return\nthe answer.</li>\n</ol>\n\n<p>Why does this not qualify as a proof that B $\\in$ NP?</p>\n', 'ViewCount': '82', 'Title': 'Does a polynomial-time reduction from A to B imply that B is in NP if A is?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-11T11:40:48.993', 'LastEditDate': '2014-03-11T11:25:21.833', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15531', 'Tags': '<complexity-theory><reductions><np>', 'CreationDate': '2014-03-11T09:52:00.990', 'Id': '22495'},282331:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Assume $P\\neq NP$.</p>\n\n<p>What can we say about the runtime bounds of all NP-complete problems?</p>\n\n<p>i.e. what are the tightest functions $L,U:\\mathbb{N}\\to\\mathbb{N}$ for which we can guarantee that an optimal algorithm for <strong>any</strong> NP-complete problem runs in time of at least $\\omega(L(n))$ and at most $o(U(n))$ on a input of length $n$?</p>\n\n<p>Obviously, $\\forall c:L(n)=\\Omega(n^c)$.\nAlso, $U(n) = O(2^{n^{\\omega(1)}})$.</p>\n\n<h2>Without assuming $QP\\neq NP$, $ETH$, or any other assumption which is not implied by $P\\neq NP$, can we give any better bounds on $L,U$?</h2>\n\n<p><strong>EDIT:</strong> </p>\n\n<p>Note that at least one of $L,U$ has to be far from the bounds I gave here, since being NPC problems, these problems has poly time reduction between each other, meaning that if some NPC problem has an optimal algorithm of time $f(n)$, then all problems has an algorithm (optimal or not) of runtime $O(f(n^{O(1)}))$.</p>\n', 'ViewCount': '152', 'Title': u'Runtime bounds on algorithms of NP complete problems assuming P\u2260NP', 'LastEditorUserId': '12969', 'LastActivityDate': '2014-03-16T16:00:29.563', 'LastEditDate': '2014-03-16T16:00:29.563', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '12969', 'Tags': '<complexity-theory><time-complexity><np-complete><p-vs-np>', 'CreationDate': '2014-03-11T20:05:43.997', 'FavoriteCount': '1', 'Id': '22511'},282332:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m curious to know if this problem is NP-Hard / NP-Complete, which I believe would mean I\'m unlikely to find a polynomial-time algorithm to solve it.</p>\n\n<p>I have written a program which randomly generates a tournament fixture, and I call it many times to try to pack the matches into the smallest number of rounds.</p>\n\n<p>When it comes to complexity theory I am still a novice, so laymen\'s terms would be appreciated.</p>\n\n<p><strong>Inputs:</strong></p>\n\n<ul>\n<li>a set of countries, each of which may enter one or more entrants to the tournament (e.g. Australia might enter two entrants, UK might enter three entrants, and South Africa might enter one entrant)</li>\n</ul>\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n<li>each match consists of two entrants playing against each other</li>\n<li>during a round, an entrant can only play in a single match</li>\n<li>no entrant wants to compete in a match against another entrant from the same country</li>\n<li>no entrant wants to compete against another entrant more than once in the tournament</li>\n<li>each entrant must play the exact same number of matches overall</li>\n<li>the number of matches each entrant must play is determined by MIN(for each entrant, total number of possible matches that satisfy the other constraints)</li>\n</ul>\n\n<p>For example, say we have the following entrants:</p>\n\n<ul>\n<li>AU #1 and #2</li>\n<li>UK #1, #2 and #3</li>\n<li>SA #1</li>\n</ul>\n\n<p>The possible matches in this (artificially small) case are:</p>\n\n<pre><code>AU1 v. UK1   AU1 v. UK2   AU1 v. UK3   AU1 v. SA\nAU2 v. UK1   AU2 v. UK2   AU2 v. UK3   AU2 v. SA\nUK1 v. SA    UK2 v. SA    UK3 v. SA\n</code></pre>\n\n<p>Since we want each entrant to play the exact same number of games, the maximum number of games per entrant is three (this can be derived from the total number of entrants (6) less the number of entrants from the largest country (3)).</p>\n\n<p>Since there are six entrants in total, and there are two entrants to each match, the maximum number of courts we can utilise in a round is 3.</p>\n\n<p>A sample fixture is:</p>\n\n<pre><code>          Court 1      Court 2      Court 3\nRound 1   AU1 v. UK1   AU2 v. UK2   UK3 v. SA\nRound 2   AU1 v. UK2   AU2 v. UK3   UK1 v. SA\nRound 3   AU1 v. UK3   AU2 v. UK1   UK2 v. SA\n</code></pre>\n\n<p>This is a nice example because it\'s easy to find a solution where each entrant has played exactly 3 games each, and they all pack perfectly into 3 rounds across 3 courts. Two of the possible 11 matches have not been played, but we don\'t care. We sum the results from each entrant\'s 3 games to determine an overall ranking, which is then used to generate the finals matches.</p>\n\n<p>I have other scenarios where there are more entrants and I have been unable to pack them so neatly, but by running my program many times it almost always finds a near-optimal packing where the number of rounds and unused courts is minimised.</p>\n\n<p><strong>Output</strong></p>\n\n<p>The first problem is if there is a polynomial-time algorithm to generate an optimal fixture.</p>\n\n<p>The optimal fixture is defined by:</p>\n\n<ul>\n<li>minimum number of unused courts (which implies minimising the number of rounds)</li>\n</ul>\n\n<p>The second problem is, given a fixture "A", how to determine if it is an optimal solution, i.e. is it possible to prove that there can exist no better packings for a given set of entrants. If "A" involves no unused courts in any round, then the answer for that one is clearly "Yes" - but if there are any unused courts in any round, the answer is, I think, difficult to derive.</p>\n', 'ViewCount': '159', 'Title': 'Is building this tournament fixture an NP-Hard / NP-Complete problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-14T11:36:17.767', 'LastEditDate': '2014-03-15T11:32:25.760', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '15583', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2014-03-12T05:36:53.410', 'FavoriteCount': '2', 'Id': '22530'},282333:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can there be any relations regarding the number of nodes available in a digraph so that to qualify it as NP-Complete problem. \nIf we consider this problem for instance:<br/>\nInput: A digraph $G=(V,E)$ and two nodes $u,v \\in V$ <br/>\nQuestion: Is there a path in $G$ from $u$ to $v$? <br/>\nCan we say this problem is NP-Complete problem since the digraph have only two nodes that they have a path from one another and this makes it be a Hamiltonian Path.<br/> Hints are appreciated! </p>\n', 'ViewCount': '46', 'Title': 'Relation between digraph and NP-Complete problem', 'LastEditorUserId': '7269', 'LastActivityDate': '2014-03-13T14:55:06.787', 'LastEditDate': '2014-03-13T14:28:48.627', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '22588', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7269', 'Tags': '<complexity-theory><graph-theory><np-complete><hamiltonian-path>', 'CreationDate': '2014-03-13T13:45:05.770', 'Id': '22586'},282334:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to either prove or refute the claim mentioned in the title.\nAny ideas ?</p>\n', 'ViewCount': '64', 'ClosedDate': '2014-03-15T11:24:37.173', 'Title': 'Assume that $\\mathsf{NP} \\subseteq \\mathsf{P}/\\text{log(n)}$, does it imply that $\\mathsf{P} = \\mathsf{NP}$?', 'LastActivityDate': '2014-03-14T23:45:11.077', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'Robert777', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<complexity-theory><p-vs-np>', 'CreationDate': '2014-03-14T21:05:23.827', 'Id': '22635'},282335:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If $P = NP$ would this imply that polynomial time reduction from an $NP$- to a $P$-problem would be possible? And if $P\\neq NP$ does it imply that a polynomial time reduction from an $NP$- to a $P$-problem would be impossible?</p>\n', 'ViewCount': '50', 'Title': 'P, NP and polynomial time reduction?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-19T00:04:25.510', 'LastEditDate': '2014-03-19T00:04:25.510', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '22770', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14819', 'Tags': '<complexity-theory><np-complete><reductions>', 'CreationDate': '2014-03-18T20:12:32.437', 'Id': '22769'},282336:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '66', 'Title': 'what are the basic/typical/common mistakes in P=NP claims?', 'LastEditDate': '2014-03-19T08:20:32.237', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '699', 'FavoriteCount': '1', 'Body': '<p>the P vs NP problem attracts a lot of attention, not all of it desirable, for a wide variety of reasons. there are many P=NP claims eg on this widely cited list maintained by mathematician Woegeorgi, <a href="http://www.win.tue.nl/~gwoegi/P-versus-NP.htm" rel="nofollow">P vs NP page</a>. also, intermittently there are hot questions on SE sites related to P vs NP (eg recently [2],[3]) below, &amp; there is even a <code>p-vs-np</code> tag on both cs.se (<a href="/questions/tagged/p-vs-np" class="post-tag" title="show questions tagged &#39;p-vs-np&#39;" rel="tag">p-vs-np</a>) &amp; <a href="http://cstheory.stackexchange.com/questions/tagged/p-vs-np">tcs.se</a> sites. the following is intended somewhat as a reference question.</p>\n\n<blockquote>\n  <p>what are the basic/typical/common mistakes in P=NP claims?</p>\n</blockquote>\n\n<p>[1] <a href="http://cs.stackexchange.com/questions/1877/how-not-to-solve-p-np">How not to solve P=NP?</a>, cs.se<br>\n[2] <a href="http://codegolf.stackexchange.com/questions/24401/so-obviously-p-np">P vs NP code exercise, codegolf.se</a><br>\n[3] <a href="http://mathoverflow.net/questions/160265/analogues-of-p-vs-np-in-the-history-of-mathematics">Analogs of P vs NP in the history of mathematics</a> MO.se</p>\n', 'ClosedDate': '2014-03-20T00:00:45.987', 'Tags': '<complexity-theory><p-vs-np>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-19T08:20:32.237', 'CommentCount': '3', 'AcceptedAnswerId': '22794', 'CreationDate': '2014-03-19T03:57:10.470', 'Id': '22792'},282337:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Suppose you have a set of binary strings of length n, the magnitude of a string is the number of 1's it has. and you want the program to return true if there is a string of length n that has a magnitude of &lt;= k and there is a index i for every y in the set string[i] = y[i] = 1 for all strings.</p>\n\n<p>Example for n = 5, k = 3:</p>\n\n<p>0 1 0 0 1</p>\n\n<p>1 0 0 1 0</p>\n\n<p>0 0 1 0 0</p>\n\n<p>1 0 1 0 0</p>\n\n<p>0 1 0 1 0</p>\n\n<p>1 1 1 0 0 would be a solution to the above set.</p>\n", 'ViewCount': '46', 'ClosedDate': '2014-03-24T18:48:39.507', 'Title': 'SAT reduction to prove NP completeness', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-03-20T23:03:49.493', 'LastEditDate': '2014-03-20T21:45:00.517', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '15920', 'Tags': '<np-complete><reductions>', 'CreationDate': '2014-03-20T15:45:49.130', 'Id': '22870'},282338:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '394', 'Title': 'If I solve hard instance, therefore I prove NP=P?', 'LastEditDate': '2014-03-25T13:53:27.870', 'AnswerCount': '1', 'Score': '-4', 'PostTypeId': '1', 'OwnerUserId': '15913', 'Body': '<p>If someone (off-topic) asks a question (on-topic) like this:</p>\n\n<p>Suppose that he claims that $\\mathcal{P=NP}$. Suppose that someone else (on-topic) gives him an instance of an NP-complete problem that cannot be solved by any computer optimally, i.e., to get the optimal solution, one must run an algorithm for very long time (the age of the universe for example).</p>\n\n<p>If this someone (off-topic) solves this instance very fast optimally. Because the problem is NP-complete, we know that it can be easily verified.  </p>\n\n<p>Can we verify easily that it is the optimal solution or we can only verify that it is just a solution?</p>\n\n<p>In the other hand, if this someone (off-topic) solves every instance (hard instances) of an NP-hard problem very fast. Can we claim that he proved that $\\mathcal{P=NP}$?</p>\n\n<p>I want an answer, not a vote up/down or on/off-topic. </p>\n', 'ClosedDate': '2014-03-22T23:04:55.900', 'Tags': '<complexity-theory><p-vs-np>', 'LastEditorUserId': '-1', 'LastActivityDate': '2014-03-25T13:53:27.870', 'CommentCount': '4', 'AcceptedAnswerId': '22944', 'CreationDate': '2014-03-22T16:10:59.560', 'Id': '22939'},282339:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/NP_%28complexity%29#Formal_definition" rel="nofollow">Wikipedia\'s formal definition of NP based on deterministic verifiers</a> states: </p>\n\n<blockquote>\n  <p>A language L is in NP if and only if there exist polynomials p and q,\n  and a deterministic Turing machine M, such that</p>\n  \n  <ul>\n  <li>For all x and y, the machine M runs in time p(|x|) on input (x,y)</li>\n  <li>For all x in L, there exists a string y of length q(|x|) such that M(x,y) = 1</li>\n  <li>For all x not in L and all strings y of length q(|x|), M(x,y) = 0</li>\n  </ul>\n</blockquote>\n\n<p>I\'m not an expert in the field but the first bullet point leads me to think that M must run in time p(|x|) regardless of the size of y, which doesn\'t seem to be true, at least if M gets to read y completely. What if |y| > p(|x|)? </p>\n\n<p>Is the first bullet point of the definition correct? Shouldn\'t it be </p>\n\n<blockquote>\n  <p>For all x and y, the machine M runs in time p(|x|+|y|) on input (x,y)</p>\n</blockquote>\n\n<p>Can you point me to an authoritative source with the original definition of NP based on deterministic verifiers?</p>\n', 'ViewCount': '105', 'Title': "Is Wikipedia's formal definition of NP correct?", 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-23T13:12:55.713', 'LastEditDate': '2014-03-23T13:12:55.713', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16003', 'Tags': '<complexity-theory><terminology><np>', 'CreationDate': '2014-03-22T23:44:44.197', 'Id': '22952'},282340:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was just reading something about NP-hard problems and cryptosystems. </p>\n\n<p>I was thinking: Every NP-complete problem can be reduced to another and every NP-complete problem has an equivalent (NP-hard) optimisation problem. A successful attack on one such NP-hard cryptosystem $A$ would mean that every other NP-hard cryptosystem $B$ would be vulnerable to that same attack; just reduce $B$ to $A$ and use the available attack. </p>\n\n<p>That would actually mean that we would be able to extend Information Set Decoding attack of Code-based systems to any NP-hard based cryptosystem.</p>\n\n<p>Is this consideration correct?</p>\n', 'ViewCount': '124', 'Title': 'Can all NP-complete cryptosystems be broken if one is broken?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-01T17:35:50.940', 'LastEditDate': '2014-03-24T22:51:15.960', 'AnswerCount': '4', 'CommentCount': '5', 'Score': '5', 'OwnerDisplayName': 'user3313119', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-hard><cryptography>', 'CreationDate': '2014-03-22T22:34:35.087', 'FavoriteCount': '1', 'Id': '23000'},282341:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a found a small article [1] saying (the first paragraph of the introduction) that the minimum-weight independent dominating set is NP-complete in chordal graphs, but at the same time, seems to contradict that exact statement.</p>\n\n<p>Moreover, I have found another reference [2] saying that in chordal graphs, it is polynomial time solvable. So which one is it?</p>\n\n<p>Note: I am just trying to reference this result in a project of mine. No need for a proof.</p>\n\n<p>Edit: I am referring to this piece of the introduction: "Domination and most of its variations are NP-complete for chordal graphs (even for the subclass of split graphs) with the exception of independence domination (see [3]). On the other hand, an unpublished proof for the NP-completeness of the weighted independent domination in chordal graphs by the author 20 years ago..." Then in my reference [2], it also states that the weighted version is polynomial time solvable, yet here they say that there is an NP-completeness proof. Am I missing something fundamental?</p>\n\n<hr>\n\n<ol>\n<li><a href="http://dx.doi.org/10.1016/j.dam.2003.05.004" rel="nofollow">The weighted independent domination problem is NP-complete for chordal graphs</a> by G. J. Chang (2004)</li>\n<li>Fundamentals of Domination in Graphs by T. W. Haynes, S. Hedetniemi and P. Slater (1998)</li>\n</ol>\n', 'ViewCount': '26', 'Title': 'Is the minimum weight independent dominating set np-complete in chordal graphs?', 'LastEditorUserId': '4734', 'LastActivityDate': '2014-03-25T00:53:34.463', 'LastEditDate': '2014-03-25T00:52:30.127', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4734', 'Tags': '<complexity-theory><graphs><np-complete>', 'CreationDate': '2014-03-25T00:30:21.693', 'Id': '23025'},282342:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am reading the reduction given by Sipser in his textbook "Introduction to the Theory of Computation," on page 303. The reduction is:</p>\n\n<p>\\begin{equation} 3SAT \\leq_p KCLIQUE \\end{equation}</p>\n\n<p>I am really trying to understand everything formally -- putting everything in a strict logical notation helps me learn Math. To clarify, the content of this proof, has not helped me give other reductions because I don\'t understand one direction of the $\\iff$ in the logic of reductions.</p>\n\n<p>In this reduction, $f$ must be s.t:\n\\begin{equation} w\\in 3SAT \\iff f(w) \\in KCLIQUE \\end{equation}\nand $f$ computes within a polynomial number of steps of the input size. The polynomial part is easy for me to understand, so no problem here!</p>\n\n<p>I see that the above logical statement is equivalent to:\n\\begin{equation} w\\in 3SAT \\implies f(w) \\in KCLIQUE \\land w\\not\\in 3SAT \\implies f(w) \\not\\in KCLIQUE\\end{equation}\nThe above just says yes-instances map to yes-instances and no-instances map to no-instances.</p>\n\n<p>It appears that Sipser shows us:\n\\begin{equation} w\\in 3SAT \\implies f(w) \\in KCLIQUE \\land f(w) \\in KCLIQUE \\implies w\\in 3SAT\\end{equation}</p>\n\n<p>Which is also equivalent to the above by taking the contrapositive of the second implication.</p>\n\n<p>Here is my understanding of the $\\implies$ direction. Given a yes-instance of $3SAT$, show that the reduction $f$ gives us a yes-instance for $KCLIQUE$. This seems completely natural.</p>\n\n<p><strong>I don\'t really understand the other direction</strong> -- namely, given a yes-instance of KCLIQUE we are supposed to show that we get a yes-instance of $3SAT$. However since the reduction goes from $3SAT$ to $KCLIQUE$ i.e. the domain is the language $3SAT$ and the Codomain is the language $KCLIQUE$, I don\'t understand <strong>how</strong> we show this. </p>\n\n<p>It appears that the argument is; Our reduction has provided us this graph, from which we can create a satisfying assignment from?</p>\n\n<p>Please help me understand the other direction, and thanks for your time.</p>\n', 'ViewCount': '40', 'Title': 'Polynomial Reduction 3SAT to K-Clique', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-25T10:07:17.047', 'LastEditDate': '2014-03-25T08:48:36.160', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6815', 'Tags': '<complexity-theory><np-complete><reductions><proof-techniques>', 'CreationDate': '2014-03-25T06:23:45.563', 'Id': '23030'},282343:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '155', 'Title': 'Which NPC problems are NP Hard', 'LastEditDate': '2014-03-26T15:55:51.197', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '947', 'Body': '<p>I have read that TSP and Subset Sum problems are NPC problems which are also NP Hard. There are also problems like Halting Problem which is NP Hard, but not NP Complete</p>\n\n<p>And Wikipedia defines this as</p>\n\n<blockquote>\n  <p>A problem $H$ is NP-hard if and only if there is an NP-complete problem\n  $L$ that is polynomial time Turing-reducible to $H$.</p>\n</blockquote>\n\n<p>Like NP Complete problem is there any problem considered to be the first NP Hard problem?</p>\n\n<p>To show one problem to be NP Hard we need just to reduce one NPC problem to it?</p>\n\n<p>Whether all NPC problems are NP Hard?</p>\n\n<p>If no, why not?</p>\n', 'ClosedDate': '2014-03-26T18:02:38.240', 'Tags': '<complexity-theory><np-complete><np-hard>', 'LastEditorUserId': '947', 'LastActivityDate': '2014-03-26T16:07:14.477', 'CommentCount': '0', 'AcceptedAnswerId': '23085', 'CreationDate': '2014-03-26T15:28:18.103', 'Id': '23081'},282344:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've read that subset sum is NP-complete. What happens when I change the decision problem to look for a  constant number? So the decision problem would look like this:</p>\n\n<blockquote>\n  <p>Input:\n  A collection of nonnegative integers A and a nonnegative integer b, </p>\n  \n  <p>Output:\n  Boolean value indicating whether some subset of \n  the collection sums to <strong>10</strong></p>\n</blockquote>\n\n<p>Would this still be NP-complete? I don't believe you would be able to reduce every other NP-complete problem to it.</p>\n", 'ViewCount': '73', 'Title': 'Is subset sum with a fixed target sum NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-29T11:51:34.573', 'LastEditDate': '2014-03-29T11:51:34.573', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15375', 'Tags': '<complexity-theory><np-complete><decision-problem>', 'CreationDate': '2014-03-28T23:01:39.577', 'Id': '23198'},282345:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's suppose I have an NP-complete problem A.  </p>\n\n<p>Can there be $A_1$, $A_2$ such that $A_1$ and $A_2$ are disjoint, $A = A_1 \\cup A_2$, and $A_1$ and $A_2$ are NP-complete?</p>\n\n<p>My guess would be yes.  For example, just partition SAT into formulas with an even number of variables and formulas with an odd number.</p>\n\n<p>Follow up:  Can I partition $A$ into infinitely many such $A_i$? (I suppose yes: take formulas with $2^n$ variables, $3^n$, $5^n$, $7^n$, $11^n$, or something like that)</p>\n", 'ViewCount': '59', 'Title': 'Partitioning NP-complete problems', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-14T02:09:36.470', 'LastEditDate': '2014-03-31T08:18:58.903', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'OwnerDisplayName': 'user22235', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete>', 'CreationDate': '2014-03-28T17:47:21.313', 'Id': '23282'},282346:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '69', 'Title': 'Why is SAT in NP?', 'LastEditDate': '2014-04-02T20:50:53.243', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14436', 'FavoriteCount': '1', 'Body': "<p>I know that CNF SAT is in NP (and also NP-complete), because SAT is in NP and NP-complete. But what I don't understand is why? Is there anyone that can explain this?</p>\n", 'Tags': '<complexity-theory><satisfiability><decision-problem><np>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-02T20:50:53.243', 'CommentCount': '1', 'AcceptedAnswerId': '23362', 'CreationDate': '2014-04-02T17:25:08.017', 'Id': '23353'},282347:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given an array, say A, with a finite definite length like N (e.g. 1000) can we define a problem to be NP-Complete without any intentional injection of NP-Completeness by something else :</p>\n\n<p>for example questions like this are not acceptable:</p>\n\n<p>"Solve this, NP-Complete, problem using A as an auxiliary array."<hr/></p>\n\n<p>Please note that N is a predefined constant.</p>\n', 'ViewCount': '48', 'ClosedDate': '2014-04-04T12:30:27.823', 'Title': 'NP-Complete algorithm defined on a fixed size array', 'LastActivityDate': '2014-04-04T15:23:01.813', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '15050', 'Tags': '<algorithms><np-complete>', 'CreationDate': '2014-04-03T11:27:32.477', 'Id': '23390'},282348:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '79', 'Title': 'How to compute a curious inverse', 'LastEditDate': '2014-04-05T16:42:34.627', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '16449', 'FavoriteCount': '1', 'Body': '<p>Let $M$ be a square matrix with entries that are $0$ or $1$ and let $v$ be a vector with values that are also $0$ or $1$.  If we are given $M$ and $y = Mv$, we can computer $v$ if $M$ is non-singular.  </p>\n\n<p>Now let us take the second bit (from the right) of the binary representation of each $y_i$ as another vector $z$. So $z$ also has entries which are $0$ or $1$. If $y_i$ has fewer than two bits we just let $z_i=0$.  </p>\n\n<blockquote>\n  <p>If we are given $z$ and $M$, how (and when) can you find a $v$ so that\n  $Mv$ would produce $z$ under this operation?</p>\n</blockquote>\n\n<p>Here is an example</p>\n\n<p>$$M = \\begin{pmatrix}\n  0 &amp; 0 &amp; 1 &amp; 0\\\\\n  1 &amp; 1 &amp; 0 &amp; 1\\\\\n  1 &amp; 1 &amp; 1 &amp; 0\\\\\n  0 &amp; 1 &amp; 1 &amp; 1\\\\\n\\end{pmatrix}\n, v = \\begin{pmatrix}\n  0 \\\\ \n  1 \\\\ \n  1 \\\\\n   1\\\\\n\\end{pmatrix}\n\\implies Mv=\\begin{pmatrix}\n  1 \\\\ \n  2 \\\\\n  2 \\\\ \n  3\\\\\n\\end{pmatrix}\n.$$</p>\n\n<p>So in this case </p>\n\n<p>$$z = \n\\begin{pmatrix}\n0 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n\\end{pmatrix}.\n$$</p>\n\n<hr>\n\n<p>Is this problem in fact NP-hard?</p>\n', 'Tags': '<algorithms><np-hard><linear-algebra>', 'LastEditorUserId': '10359', 'LastActivityDate': '2014-04-05T16:42:34.627', 'CommentCount': '0', 'AcceptedAnswerId': '23429', 'CreationDate': '2014-04-04T17:13:48.063', 'Id': '23428'},282349:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>So I\'ve been thinking about verifiers and a possible relation between a language\'s class and it\'s verifier complexity. From the book, "NP is the class of languages that have polynomial time verifiers". Is there an analog statement that can be said about a P-class verification complexity? Because P is a subset of NP, I understand that the statement of NP still applies to P. Still, my intuition is that there is something more that can be said about a verifier for P that relates to oracles. Is there more that can be said?</p>\n', 'ViewCount': '22', 'Title': 'Complexity as it relates to verifiers of languages', 'LastActivityDate': '2014-04-07T05:11:36.257', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16519', 'Tags': '<time-complexity><np-complete>', 'CreationDate': '2014-04-07T04:43:13.613', 'Id': '23499'},282350:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '27', 'Title': 'What is the Unique Games Conjecture?', 'LastEditDate': '2014-04-07T11:58:09.610', 'AnswerCount': '0', 'Score': '-1', 'OwnerDisplayName': 'zighalo', 'PostTypeId': '1', 'OwnerUserId': '16535', 'Body': '<p>What is the unique game conjecture in relatively simple words? What are the consequences of proving it or disproving it? Does it has any relation to game theory? Why is there "game" in the name?</p>\n', 'ClosedDate': '2014-04-07T14:07:00.723', 'Tags': '<complexity-theory><np-hard><approximation>', 'LastEditorUserId': '472', 'LastActivityDate': '2014-04-07T11:58:09.610', 'CommentCount': '4', 'CreationDate': '2014-04-04T21:43:52.677', 'Id': '23508'},282351:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>So in complexity theory, I\'ve run across different definitions for NP problems -- </p>\n\n<ul>\n<li>Decision problems where a solution can be <em>verified</em> by a <strong>DFA</strong> in polynomial time</li>\n<li>Decision problems where a solution can be <em>found</em> by an <strong>NFA</strong> in polynomial time</li>\n</ul>\n\n<p>Is there one of the above that is generally more accepted as the "go-to" definition in the academic community? If so, is there a reason? (If these "definitions" are incorrect \u2013 please feel free to correct me).</p>\n\n<p>To me, the second definition makes more sense intuitively.</p>\n', 'ViewCount': '36', 'Title': u'NP Problem definition \u2013 verifiable on DFA vs. solvable on NFA', 'LastEditorUserId': '683', 'LastActivityDate': '2014-04-10T15:39:52.327', 'LastEditDate': '2014-04-10T15:39:52.327', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23644', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12906', 'Tags': '<complexity-theory><np>', 'CreationDate': '2014-04-10T15:25:02.277', 'Id': '23643'},282352:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I\'m trying to understand/show that DNF VALID is coNP-hard. I have given an algorithm for the complement of DNF VALID and shown that this is in NP (since the complement of a language in NP is in coNP), but I\'m really struggling to show that DNF VALID is coNP-hard. </p>\n\n<blockquote>\n  <p>The complement of DNF VALID = {\u03d5 | \u03d5 is not in DNF OR \u03d5 is falsifiable}</p>\n</blockquote>\n\n<p>A simple algorithm for the complement of DNF VALID:</p>\n\n<pre><code>On a non-deterministic TM M: "on input \u03d5 (boolean formula):\n 1. Scan through \u03d5 and check whether \u03d5 is on DNF. \n      If it is, accept, \n      if not, continue to step 2. \n 2. Non-deterministically choose a valuation for \u03d5\n 3. If \u03d5 is falsifiable accept, if not, reject\n</code></pre>\n\n<p>To show that DNF VALID is coNP-hard I think that I need to show that a language that is NP-complete can be reduced in polynomial time to the complement of DNF VALID, but I\'m not sure with which language to choose, and I could really use some help on how to go forth with the reduction. </p>\n', 'ViewCount': '45', 'Title': 'Showing that DNF VALID is coNP-hard', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-11T06:47:22.733', 'LastEditDate': '2014-04-11T06:47:22.733', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '23666', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16655', 'Tags': '<complexity-theory><reductions><co-np>', 'CreationDate': '2014-04-10T18:09:27.833', 'Id': '23654'},282353:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Say we have a set of numbers $A=\\{a_1, a_2, \\dots, a_n\\}$, and we wish to sum over all possible combinations of $k$ terms to compute</p>\n\n<p>$$\n\\sum_{\\substack{C \\subseteq \\{1,2,\\dots,n\\} \\\\ |C|=k}} \\prod_{c \\in C} a_c\n$$</p>\n\n<p>Naively this requires $O(k\\binom{n}{k})$ operations.</p>\n\n<p>This is different from from computing the permanent where there are permutations. </p>\n\n<p>Is this problem known to be NP-hard when $n=2k$ or other conditions such as $n=\\Theta(k^2)$? </p>\n', 'ViewCount': '49', 'Title': 'Is summing over all possible $k$-combinations NP-hard?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-12T07:34:46.677', 'LastEditDate': '2014-04-12T07:34:46.677', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23687', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '404', 'Tags': '<complexity-theory><time-complexity><np-hard>', 'CreationDate': '2014-04-11T23:17:54.563', 'Id': '23683'},282354:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Trying to understand the concept of NP-completeness, I came across this pearl on Wikipedia:</p>\n\n<blockquote>\n  <p>From <a href="http://en.wikipedia.org/wiki/NP-complete" rel="nofollow">NP-complete</a>:</p>\n  \n  <p>A decision problem L is <strong>NP-complete</strong> if it is in the set of NP problems\n  and also in the set of <strong>NP-hard</strong> problems.</p>\n  \n  <p>From <a href="http://en.wikipedia.org/wiki/NP-hard" rel="nofollow">NP-hard</a>:</p>\n  \n  <p>A problem H is <strong>NP-hard</strong> if and only if there is an <strong>NP-complete</strong> problem\n  L that is polynomial time Turing-reducible to H [...].</p>\n</blockquote>\n\n<p>So it appears that the definition of NP-completeness depends on the definition of NP-hardness, and vice versa.</p>\n\n<p>What is going on here? How can I untangle these concepts?</p>\n', 'ViewCount': '20', 'ClosedDate': '2014-04-12T13:26:52.730', 'Title': 'Cyclic definition of NP-completeness', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-12T13:26:43.133', 'LastEditDate': '2014-04-12T13:26:43.133', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16709', 'Tags': '<complexity-theory><terminology><np-complete><np-hard>', 'CreationDate': '2014-04-12T11:23:20.347', 'Id': '23700'},282355:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to find reduction from 3-SAT to Max-2-SAT, so far no luck.<br>\nLet me first describe it.  </p>\n\n<blockquote>\n  <p><strong>3-SAT</strong>: Given a CNF formula $\\varphi$, where every clause in $\\varphi$ has <em>exactly</em> 3 literals in it, one should determine if there exist an assignment that satisfies it.  </p>\n  \n  <p><strong>Max-2-SAT</strong>: Given a CNF formula, where every clause in $\\phi$ has <em>exactly</em> 2 literals in it, and a positive number $k$, one should determine if there exist an assignment that satisfies <em>at least</em> $k$ clauses.</p>\n</blockquote>\n\n<p>Let me first show what I have tried so far.<br>\nGiven $\\varphi=\\wedge _{i=1}^{n}C_i$ where: $C_i=(l_{i_1}\\vee l_{i_2} \\vee l_{i_3})$,<br>\nI set: $\\phi=\\wedge _{j=1}^{3n}D_i$, where: $D_i=(l_{i_1}\\vee l_{i_2})\\wedge(l_{i_1}\\vee l_{i_3})\\wedge(l_{i_2}\\vee l_{i_3})$ and $k=2n$.<br>\nIt\'s quite easy to see that this will not work...<br>\nAlthough, if there exist an assignment which satisfies $\\varphi$ it means there exist an assignment that satisfies $k=2n$ clauses in $\\phi$, the second direction is not true.<br>\nI found several reductions online (such as <a href="http://www.stanford.edu/~rrwill/williams-max2sat-encyc.pdf" rel="nofollow">this</a>, for example), but none of them were useful since in my problem, each clause in $\\phi$ must have <strong>exactly</strong> two literals, where in the link above, the formula can also contain 1-length clause in it.</p>\n\n<p>I could really use some help here.</p>\n', 'ViewCount': '68', 'Title': '3-SAT to Max-2-SAT Reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-13T23:39:21.800', 'LastEditDate': '2014-04-12T13:39:18.530', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11972', 'Tags': '<complexity-theory><reductions><np-hard><satisfiability>', 'CreationDate': '2014-04-12T11:58:23.407', 'FavoriteCount': '0', 'Id': '23702'},282356:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I always thought that TSP currently requires time exponential in the number of cities to solve.</p>\n\n<blockquote>\n  <p>How, then, has <a href="http://www.math.uwaterloo.ca/tsp/concorde.html" rel="nofollow">Concorde</a> optimally solved a TSP instance with\n  <strong>85,900 cities</strong>?!?</p>\n</blockquote>\n\n<p>Is this a typo? Is the base of the exponential 1.0000000000000001 or similar? Was it an instance specifically constructed to be solvable easily? What <em>is</em> the asymptotic runtime of the best known TSP solving algorithm?</p>\n', 'ViewCount': '93', 'Title': 'What is the asymptotic runtime of the best known TSP solving algorithm?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-13T10:00:05.303', 'LastEditDate': '2014-04-13T10:00:05.303', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23732', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16732', 'Tags': '<algorithms><np-hard><traveling-salesman>', 'CreationDate': '2014-04-13T07:43:43.813', 'Id': '23731'},282357:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose there is a travelling salesman who wants to travel through N cities in k countries(k &lt;= N). For convenience, he will travel all the cities within a certain country and then move to another. In each country, he wants to find out the shortest simple path to traverse through all the cities.[Classic TSP problem] </p>\n\n<p>Q1. Suppose moving to another country costs nothing. Is that still a NP-complete problem? Any suggestion for a proof?</p>\n\n<p>Q2. (There could be connections with certain costs between two cities in two different countries.) Suppose the salesman has to visit the countries (but not cities) in a certain order. Is that still a NP-complete problem? Any suggestion for a proof?</p>\n\n<hr>\n\n<p>(Precisely, I should have used "NP-hard problem". I hope you can translate it into the decision version.)</p>\n\n<p>Q1:\nIt is intuitive that a general TSP instance can be reduced to this problem for k = 1. What I know about is that you can reduce a general instance of a known NP-c problem into a "special" instance of the problem that you wish to reduce to. However, I think "k=1 (with N)" is a very special case that it is much harder than instances when k > 1. That\'s why I am not quite certain if this intuitive approach is correct.</p>\n\n<p>"This is a dump of an exercise problem, not a question." I feel sorry for my algorithm teacher. I made this exercise up for a similar situation in my research (not in the area of algorithm for sure). If I let k = 1, the instance got reduced to seems to be the hardest instance which I doubt if it is general. Since the sub-problems are NP-c (in decision version), let the cost for jth country with m cities be $T_j(m)$, then $\\Sigma_k T_j(m)$ is much smaller than $T(N)$. Also, the problem is not that hard when k = N. (k is part of the input?)</p>\n\n<p>"Is it NP-complete if its sub-problems are NP-complete?" (So I made up the problem.) If so, that intuitive approach seems correct.</p>\n\n<p>Q2:\nI think it is kind of related to Q1. I didn\'t post it because I tend to solve it on my own.(Hints are welcome.) If you solve it, I may have to consider putting you as a coauthor later :).</p>\n\n<hr>\n\n<p>Thanks</p>\n', 'ViewCount': '52', 'ClosedDate': '2014-04-18T14:53:45.803', 'Title': 'A variant of Travelling Salesman: Is it NP-complete if its sub-problems are NP-complete?', 'LastEditorUserId': '16864', 'LastActivityDate': '2014-04-18T20:32:55.147', 'LastEditDate': '2014-04-18T20:32:55.147', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16864', 'Tags': '<np-complete><traveling-salesman>', 'CreationDate': '2014-04-17T21:29:13.760', 'Id': '23896'},282358:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is it more plausible that $NP\\subseteq TIME[O(n^{\\log n})]$ than $NP\\subseteq P$? I don't see this mentioned much and is there a reason why? If this question doesn't make sense, explain why.</p>\n", 'ViewCount': '52', 'Title': '$NP\\subseteq TIME[O(n^{\\log n})]$', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-22T22:07:30.020', 'LastEditDate': '2014-04-22T22:07:30.020', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '24034', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16999', 'Tags': '<complexity-theory><time-complexity><complexity-classes><np>', 'CreationDate': '2014-04-22T20:20:35.647', 'Id': '24033'},282359:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is there any class of NP problems that have one unique solution?\nI'm asking that, because when I was studying cryptography I read about the knapsack and I found very interesting the idea.</p>\n", 'ViewCount': '106', 'Title': 'NP Problems with unique solution', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-23T14:33:23.040', 'LastEditDate': '2014-04-23T14:32:38.843', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '7', 'OwnerDisplayName': 'user3513151', 'PostTypeId': '1', 'OwnerUserId': '17026', 'Tags': '<complexity-theory><decision-problem><np><cryptography>', 'CreationDate': '2014-04-23T01:24:04.347', 'Id': '24043'},282360:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If I have a set $A$ with positive and negative numbers, and a number to find C.  </p>\n\n<p>It is possible to reduce the problem to one with only positive numbers in set $A$? </p>\n\n<p>I mean, it is possible to find a new set $A$ and a new number $C$, so $A$ were only positive numbers, but the same problem? </p>\n', 'ViewCount': '27', 'Title': 'Negative numbers in Subset-Sum', 'LastEditorUserId': '3094', 'LastActivityDate': '2014-04-23T17:53:49.050', 'LastEditDate': '2014-04-23T17:53:49.050', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '24051', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9631', 'Tags': '<np-complete>', 'CreationDate': '2014-04-23T16:24:52.813', 'Id': '24050'},282361:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In the standard proof why Subset-Sum is (weakly) NP-complete, one reduces Vertex Cover to Subset-Sum by using suitable numbers with O(m+n) bits (where m is the number of edges and n the number of vertices). But how can we talk about a polynomial time reduction if we generate exponential-size numbers?</p>\n\n<p>I guess that this is the key why Vertex Cover is strongly NP-complete and Subset-Sum is only weakly NP-complete. But I didn't get why it is in fact a polynomial time reduction.</p>\n", 'ViewCount': '92', 'Title': 'Why is the reduction from Vertex-Cover to Subset-Sum of polynomial time?', 'LastActivityDate': '2014-04-24T12:49:16.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24079', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15270', 'Tags': '<np-complete><reductions>', 'CreationDate': '2014-04-24T11:39:01.647', 'Id': '24078'},282362:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let us consider  where G is an undirected weighted graph G = is an undirected graph. f &lt;=|V| is an integer and d>=0 is a real number. Is it possible to select f vertices of G as token locations, such that the length of the shortest path between any vertex and its nearest tokens is at most d. </p>\n\n<p><strong>token placement belongs to NP:</strong> the certificate is a weighted directed graph, with f token locations and the value d. Given the certificate, we can verify in polynomial time that the path from any vertex to its closest token location is at most d. Given that there are n vertices within the graph, this will take us polynomial time. </p>\n\n<p><strong>Reduction:</strong> I want to select the shortest path between any vertex and its nearest token. Thus reminds me of subset sum \nreduce from subset sum, I have 1 set S and a target value t. \nLet me construct a graph made of one vertex with k edges, k being the number of elements in the set S. the k edges are k self loops on the vertex v.  each element within S is assigned to the weight of one self loops. Reduction takes polynomial time, given that I have n elements in a set S, I have to draw a graph with n self loops. this takes polynomial time. </p>\n\n<p>Proof of correctness:\n1) if subset Sum has a solution, this means that there is a set S' such that the sum of all the elements within S' equal the target value t. Thus, there must be a set of edges within the graph whose sum of weights equals t. Given that the number of elements within the subset S' equals the number of edges whose weights sum up to t. This means, that considering graph G made of e edges, each edge's weight being one element within the set S,this means that there is a set f of edges such that f= the size of S' whose values are at most equal to d, where d equals the target value t. all of the elements within S' correspond to one or more edge weights flowing into the single vertex of the graph. Thus, given the target value t and the set of token locations f. There must be an edge between any vertex and its closest token locations such that it is less than or equal to the target value. f is the number of times the same  node v is visited. </p>\n\n<p>2) If the token problem has a solution, this means that there is a set f of token locations, , number of times v is visited and the edge weight of any edge e in the graph is at most d.  Let us sum up f edge weights within G. Thus, we have a subset of weights whose sum equals to the value d. Since, all of the edges flow into the vertex. Thus, given f token locations, a value d and a graph G, the path from any vertex to its closest token location(which is itself given self loops) is at most d, where d could be the weight of one edge if f=1 or the sum of the weights of many edges if f>1. given f token locations which refer to f edge weights, the sum of all the f edge weights equals the value d. \nThe edges weights of the f edges traversed included in the subset K, their sum is d. The subset K is equivalent to the subset S' in the subset sum problem and the weight d is equivalent to the target value in the subset problem. </p>\n\n<p>Conclusion: token placement has a solution iff subset sum has a solution. </p>\n\n<p>this means that there are f token locations surrounding vertex v, such that the length of any </p>\n", 'ViewCount': '42', 'ClosedDate': '2014-04-25T06:56:07.297', 'Title': "what's wrong with this NP completeness proof", 'LastEditorUserId': '17053', 'LastActivityDate': '2014-04-25T16:01:41.893', 'LastEditDate': '2014-04-25T16:01:41.893', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17053', 'Tags': '<complexity-theory><np-complete><reductions><np>', 'CreationDate': '2014-04-24T23:35:04.413', 'Id': '24091'},282363:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>A problem is NP-complete if:</p>\n\n<ol>\n<li>It is in NP.</li>\n<li>All problems in NP can reduce to it.</li>\n</ol>\n\n<p>It's number 2 that I'm concerned with here. I would be highly surprised if we knew  <em>every</em> problem in NP. Based on that assumption, how do we know for sure that any problem is NP-complete? For example, how do we know that there's not some problem we don't know of that will reduce to the Boolean Satisfiability problem, but not the Clique problem? Or would such a problem be NP-Intermediate and therefore need P != NP to exist?</p>\n", 'ViewCount': '416', 'Title': "How do we know any problem is in NP-complete if we don't know all problems in NP?", 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-27T11:34:57.367', 'LastEditDate': '2014-04-27T11:34:57.367', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4849', 'Tags': '<complexity-theory><np-complete><np>', 'CreationDate': '2014-04-26T21:03:39.997', 'FavoriteCount': '4', 'Id': '24141'},282364:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>While I was studying SAT problem and its different instances, in Algorithms for the Satisfiability (SAT) Problem: A Survey by J. Gu et. al <a href="http://www.dtic.mil/dtic/tr/fulltext/u2/a326042.pdf" rel="nofollow">PDF</a>, I came up with this variant (not mentioned there, but I though of it) and searched, but could not find anything useful.</p>\n\n<p>Consider this variant:</p>\n\n<blockquote>\n  <p>Suppose $f$ is a boolean function in $n$ boolean variables, but with this extra property, that $f$ is increasing. I have thought of $n$ boolean variables, $X_1, \\ldots, x_n$ as representation of subsets of a set with $n$ elements, and if some  subset like $X$ satisfies $f$, then all $Y$ s.t. $X \\subseteq Y$ satisfy $f$, too. <em>What I want is finding the <strong>collection</strong> of all minimal $X$ where $f$ satisfies each of them, but not any $Z$ where $Z \\subsetneq X$?</em></p>\n</blockquote>\n\n<p>Is this problem still hard?</p>\n\n<p>If I consider the $x_1, \\ldots, x_n$ as a number, then increasing property of $f$ helps solving it in polynomial time, just a binary search suffices! So, I made it a little bit harder.</p>\n\n<p>Any help, even offers of search terms is appreciated.</p>\n', 'ViewCount': '48', 'Title': 'How can I identify that a restricted variant of Boolean SAT remains hard or not?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-27T19:21:15.063', 'LastEditDate': '2014-04-27T13:42:27.983', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '24155', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4425', 'Tags': '<complexity-theory><np-hard><satisfiability>', 'CreationDate': '2014-04-27T04:42:23.223', 'Id': '24149'},282365:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $G$ be a graph of diameter 2 ($\\forall u,v\\in V: d(u,v)\\leq2$).</p>\n\n<blockquote>\n  <p><strong>Can we decide if $G$ has Hamiltonian path in poly time? What about digraphs?</strong></p>\n</blockquote>\n\n<hr>\n\n<p>Perhaps some motivation is in place:</p>\n\n<p>the question arises from Dirac\'s theorem which states that if $\\forall v\\in V:d(v)\\geq \\frac{n}{2}$ then the graph is Hamiltonian, as well as it\'s generalizations (the Ghouila-Houri theorem and the result from Bang-Jensen and Gutin\'s book).</p>\n\n<p><a href="http://cstheory.stackexchange.com/questions/22247/does-deltag-delta-g-geq-n-imply-strong-connectivity/22299#22299">I\'ve shown here</a> that these degree requirements imply that the graph has diameter 2, and was wondering if such graphs can be decided without the degree requirements (strong gut feeling: No).</p>\n', 'ViewCount': '72', 'Title': 'Is Hamiltonian path NP-hard on graphs of diameter 2?', 'LastEditorUserId': '12969', 'LastActivityDate': '2014-04-28T11:16:29.733', 'LastEditDate': '2014-04-28T11:16:29.733', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '12969', 'Tags': '<graph-theory><graphs><np-complete><hamiltonian-path>', 'CreationDate': '2014-04-27T22:41:46.630', 'Id': '24159'},282366:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have no source for this, but I've heard people offhandedly mention problems that are NP Complete under polylog reductions (I <em>think</em> SAT was one of them).</p>\n\n<p>This confuses me - it seems to me that this is a violation of the nondetermistic time hierarchy.  If SAT (or whatever) can be solved in $NTIME(n^c)$ for some $c$, and any $NP$-problem can be reduced to SAT in $O(n^k)$ time for some fixed $k$, then it seems that we can solve any $NP$ problem in $O(n^{c+k})$ nondetermistic time -- obviously false.</p>\n\n<p>So, it seems to me that SAT (or whatever) can only be NP-Complete under polytime reductions, and that for any polynomial, we can find a problem whose reduction to SAT takes <em>more</em> than that polynomial amount of time.</p>\n\n<p>What am I missing?</p>\n", 'ViewCount': '65', 'Title': 'How is it possible for a problem to be NP-Complete under polylog-time reductions?', 'LastActivityDate': '2014-04-28T02:57:19.630', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16172', 'Tags': '<np-complete><reductions>', 'CreationDate': '2014-04-28T01:25:31.030', 'Id': '24167'},282367:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am trying to prove that the Acyclic Subgraph Problem (AS) is NP-hard by showing that the Independent Set Problem (IS) is polynomially reducible to AS. </p>\n\n<p><strong>AS is as follows:</strong> Given a directed graph G = (V, E) and an integer k, does G contain a subset V' of\nk vertices such that the induced subgraph on V'is acyclic?</p>\n\n<p><strong>IS is as follows:</strong> Given an undirected graph G = (V, E) and an integer k, does G contain a subset V' of k vertices such that no two vertices in V'are adjacent to one another?</p>\n\n<p><strong>I have developed the following:</strong>\nGiven an undirected graph, <em>G = (V,E)</em>, we can construct a directed graph, <em>D =(V, E')</em>. We do this by addd the edges <em>(u,v)</em> and <em>(v,u)</em> for every edge in <em>E</em>. If <em>G</em> has an independent set of size <em>k</em>, then the corresponding vertices in <em>D</em> are an acyclic subgraph. Similarly, if <em>D</em> has an acyclic subgraph of size <em>k</em>, then those <em>k</em> vertices must form an independent set in <em>D</em> as if there is an edge between two vertices in <em>D</em>. Then, there is a directed cycle between them, thus those <em>k</em> vertices form an independent set in <em>G</em>. </p>\n\n<p>Can anyone help me further with this proof? I am not sure if what I have is going in the right direction or not. </p>\n\n<p>Any help is appreciated, thanks! </p>\n", 'ViewCount': '23', 'Title': 'Prove that Acyclic Subgraph is NP-Hard by showing Independent Set can be reduced to Acyclic Subgraph', 'LastActivityDate': '2014-04-28T19:11:30.353', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17151', 'Tags': '<algorithms><np-complete><reductions><np-hard>', 'CreationDate': '2014-04-28T19:11:30.353', 'Id': '24197'},282368:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the <a href="http://www.nada.kth.se/~viggo/wwwcompendium/node149.html" rel="nofollow">hitting set problem</a> with $n$ elements and $m$ sets. I gather from the linked page as well as <a href="http://people.csail.mit.edu/dmoshkov/papers/set-cover/set-cover-full.pdf" rel="nofollow">this</a> that </p>\n\n<p>1) it is NP-hard to approximate the cost of the optimal solution to a multiplicative factor of $c \\log n$ for some $c&gt;0$. </p>\n\n<p>2) it is NP-hard to approximate the cost of the optimal solution to a multiplicative factor of $c \\log m$ for some $c&gt;0$. </p>\n\n<p>3) it is NP-hard to approximate the cost of the optimal solution to a multiplicative factor of $c \\log \\max(n,m)$ for some $c&gt;0$. </p>\n\n<p>Is my understanding correct? This seems to be a straightforward consequence of what is on the internet, but some of the notation in these sources is mysterious to me and I want to make sure I\'m not misunderstanding. </p>\n', 'ViewCount': '25', 'Title': 'Hardness of approximating hitting set', 'LastEditorUserId': '17154', 'LastActivityDate': '2014-04-28T21:58:39.947', 'LastEditDate': '2014-04-28T20:57:46.510', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '24201', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '17154', 'Tags': '<np-hard><approximation>', 'CreationDate': '2014-04-28T20:51:30.080', 'Id': '24199'},282369:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Assume I have some positive numbers $a_1,\\ldots,a_n$ and a number $k \\in \\mathbb{N}$. </p>\n\n<p>I want to partition these numbers into exactly $k$ sets $A_1,\\ldots,A_k$ such that the weighted arithmetic mean</p>\n\n<p>$$\\text{cost}(A_i,\\ldots,A_k)=\\sum_{i=1}^{k}\\frac{|A_i|}{n}c(A_i)$$</p>\n\n<p>is minimal, where $c(A_i)=\\sum_{a \\in A_i}a$ is simply the sum of all numbers in $A_i$.</p>\n\n<p>Is there actually a (polynomial) algorithm to do this or is this a (<strong>NP</strong>) hard problem? </p>\n\n<p>I tried to reduce it to some NP-hard problems but didn't get anywhere, especially because the numbers are nonnegative and thus in an optimal partition big sets need to have smaller weight which seems to be some kind of balancing problem instead of a packing problem (which I am more familiar with).</p>\n", 'ViewCount': '23', 'Title': 'Minimum weighted arithmetic mean partion?', 'LastEditorUserId': '6970', 'LastActivityDate': '2014-04-29T20:54:41.280', 'LastEditDate': '2014-04-29T20:19:59.883', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24234', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6970', 'Tags': '<optimization><np-hard><np><partitions>', 'CreationDate': '2014-04-29T20:10:23.417', 'Id': '24232'},282370:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is the class $\\sf NP$ closed under complement or is it unknown? I have looked online, but I couldn't find anything. </p>\n", 'ViewCount': '55', 'Title': 'Is the class NP closed under complement?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-30T17:43:47.400', 'LastEditDate': '2014-04-30T17:17:57.027', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '24265', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16742', 'Tags': '<complexity-theory><closure-properties><complexity-classes><np>', 'CreationDate': '2014-04-30T16:23:40.070', 'Id': '24261'},282371:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have tried looking online, but I couldn't find any definitive statements. It would make sense to me that Union and Intersection of two NPC languages would produce a language not necessarily in NPC. Is it also true that NPC languages are not closed under the complement, concatenation, and kleene star operations?</p>\n", 'ViewCount': '78', 'Title': 'are NP Complete languages closed under any regular operations?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-30T22:26:53.000', 'LastEditDate': '2014-04-30T17:19:07.863', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '24271', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16742', 'Tags': '<complexity-theory><np-complete><closure-properties>', 'CreationDate': '2014-04-30T16:34:39.267', 'Id': '24264'},282372:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I understand Partition Problem is NP-complete.</p>\n\n<p>Given we have a magic black box that can answer Yes or No for the partition problem. I was wondering how to come up with a polynomial time algorithm to find the actual set using this black box. </p>\n\n<p>Thank you. </p>\n', 'ViewCount': '12', 'Title': 'How to find partition set of a Partition Problem using its decision problem', 'LastActivityDate': '2014-05-01T00:50:48.473', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24280', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17233', 'Tags': '<complexity-theory><np-complete><partition-problem>', 'CreationDate': '2014-05-01T00:39:31.503', 'Id': '24279'},282373:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I know that leaf-bound-MST is NP-complete by reducing two-leaf-MST to Hamiltonian Path. However, I don't know how to reduce 10-leaf-MST problem (MST with exactly 10-leaf) to a existing NP-complete problem.\nThanks!</p>\n", 'ViewCount': '30', 'ClosedDate': '2014-05-01T02:41:39.773', 'Title': 'How to prove 10-leaf-MST is NP-complete?', 'LastActivityDate': '2014-05-01T01:38:50.957', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '17235', 'Tags': '<np-complete><spanning-trees><hamiltonian-path>', 'CreationDate': '2014-05-01T01:38:50.957', 'FavoriteCount': '1', 'Id': '24284'},282374:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The definition of the complexity class $\\mathsf{NP}$ seems to ensure (as good as possible) that it is computably enumerable. It looks as if the class could be enumerated by enumerating all Turing machines, and for each Turing machine report for each $k\\in\\mathbb{N}$ the language generated by stopping each computation after $n^k$ steps, and reject if the input hasn't been accepted before reaching this step limit.</p>\n\n<p>This only gives a computable enumeration of Turing machines. However, it seems that the corresponding languages will be decidable, because the enumeration includes an explicit time bound for each of its Turing machines. Hence this should give an computable enumeration of $\\mathsf{NP}$.</p>\n\n<blockquote>\n  <p>Question: Is the conclusion from this reasoning correct, i.e. is $\\mathsf{NP}$ computably enumerable? One issue that I have is that even for decidable languages, we can only (computably) decide whether two given languages are different, but not whether they are equal. Hence it seems that we can't avoid to report the same language more than once. The deeper issue here is that being computably enumerable is a property of subsets of the natural numbers, but the complexity class $\\mathsf{NP}$ doesn't seem to correspond to a subset of the natural numbers in any canonical way.</p>\n</blockquote>\n", 'ViewCount': '101', 'Title': 'Is the complexity class NP computably enumerable?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-05-03T00:18:54.527', 'LastEditDate': '2014-05-02T21:46:47.193', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1557', 'Tags': '<computability><complexity-classes><np><enumeration>', 'CreationDate': '2014-05-02T20:51:31.623', 'Id': '24326'},282375:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The question is in the title, I suppose. I am studying complexity classes, and I understand that NP-Hard is the set of problems that are at least as hard as the hardest problems in NP. Therefore, it will naturally contain PSPACE problems.</p>\n\n<p>However, I was specifically wondering if there were any PSPACE problems that were not in NP-Hard? (from my understanding, implying that they are <em>easier</em> than the hardest problems in NP).</p>\n', 'ViewCount': '67', 'Title': "Are there any PSPACE problems that don't exist in NP-Hard?", 'LastEditorUserId': '98', 'LastActivityDate': '2014-05-03T09:36:05.037', 'LastEditDate': '2014-05-03T09:36:05.037', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24338', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17290', 'Tags': '<complexity-theory><np-hard><complexity-classes>', 'CreationDate': '2014-05-03T02:37:37.397', 'Id': '24336'}