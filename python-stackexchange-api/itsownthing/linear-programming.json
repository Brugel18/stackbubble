120_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The simplex algorithm walks greedily on the corners of a polytope to find the optimal solution to the linear programming problem. As a result, the answer is always a corner of the polytope. Interior point methods walk the inside of the polytope. As a result, when a whole plane of the polytope is optimal (if the objective function is exactly parallel to the plane), we can get a solution in the middle of this plane.</p>\n\n<p>Suppose that we want to find a corner of the polytope instead. For example if we want to do maximum matching by reducing it to linear programming, we don\'t want to get an answer consisting of "the matching contains 0.34% of the edge XY and 0.89% of the edge AB and ...". We want to get an answer with 0\'s and 1\'s (which simplex would give us since all corners consist of 0\'s and 1\'s). Is there a way to do this with an interior point method that guarantees to find exact corner solutions in polynomial time? (for example perhaps we can modify the objective function to favor corners)</p>\n', 'ViewCount': '414', 'Title': 'Finding exact corner solutions to linear programming using interior point methods', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-05T12:33:33.760', 'LastEditDate': '2012-03-23T22:39:23.917', 'AnswerCount': '4', 'CommentCount': '1', 'AcceptedAnswerId': '771', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '700', 'Tags': '<algorithms><optimization><linear-programming>', 'CreationDate': '2012-03-23T20:54:01.227', 'Id': '706'},120_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Since Integer Linear Programming is NP-complete, there is a Karp reduction from any problem in NP to it. I thought this implied that there is always a polynomial-sized ILP formulation for any problem in NP.</p>\n\n<p>But I\'ve seen papers on specific NP problems where people write things like "this is the first poly-sized formulation" or "there is no known poly-sized formulation". That\'s why I\'m puzzled.</p>\n', 'ViewCount': '246', 'Title': 'Does every NP problem have a poly-sized ILP formulation?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-11-18T22:33:09.293', 'LastEditDate': '2012-05-18T16:13:07.690', 'AnswerCount': '1', 'CommentCount': '12', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1504', 'Tags': '<complexity-theory><np-complete><reductions><linear-programming>', 'CreationDate': '2012-05-15T19:21:47.390', 'FavoriteCount': '1', 'Id': '1860'},120_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '131', 'Title': 'Efficient bandwidth algorithm', 'LastEditDate': '2012-06-25T13:00:38.987', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1289', 'FavoriteCount': '0', 'Body': "<p>Recently I sort of stumbled on a problem of finding an efficient topology given a weighted directed graph. Consider the following scenario:</p>\n\n<ol>\n<li><p>Node 1 is connected to 2,3,4 at 50 Mbps. Node 1 has 100 Mbps network card.</p></li>\n<li><p>Node 3 is connected to 5 at 50 Mbps. Node 3 has 100 Mbps card.</p></li>\n<li><p>Node 4 is connected to Node 3 at 40 Mbps. Node 4 has 100 Mbps card.</p></li>\n</ol>\n\n<p>(Sorry about not having a picture)</p>\n\n<p>Problem: If Node 1 starts sending data to its immediate nodes (2 and 3), we can clearly see it's network card capacity will be drained out after Node 3. Whereas if it were to <em>skip</em> node 3 and start sending to node 4, the data will eventually reach to node 3 via 4 and hence, node 5 will be getting data via node 3.\nThe problem becomes more complicated if all the links were of 50 Mbps and we can clearly see that node 2 and node 4 are the only way to reach all nodes.</p>\n\n<p>Question: Is there an algorithm which gives the optimal path to ALL nodes keeping the network (card) capacity in mind? </p>\n\n<p>I read the shortest path algorithm,max flow algorithms but none of them seem to address my problems. perhaps,im missing something. I'll appreciate if someone can help me out.</p>\n", 'Tags': '<algorithms><graph-theory><optimization><linear-programming>', 'LastEditorUserId': '29', 'LastActivityDate': '2012-06-25T13:00:38.987', 'CommentCount': '2', 'AcceptedAnswerId': '2480', 'CreationDate': '2012-06-24T15:25:59.813', 'Id': '2470'},120_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m having a very hard time trying to figure out how to solve this problem efficiently. Let me describe how it goes:</p>\n\n<p>"A hard working mom bought several fruits with different nutritional values for her 3 kids, Amelia, Jessica and Bruno. Both girls are overweight, and they are very vicious and always leave poor Bruno with nothing, so their mother decided to share the food in the following manner:</p>\n\n<ul>\n<li><p>Amelia being the heaviest one gets the most amount of Nutritional Value.</p></li>\n<li><p>Jessica gets an amount equal or less than Amelia</p></li>\n<li><p>Bruno gets an amount equal or less than Jessica, but you need to find a way to give him the highest possible nutritional value while respecting the rule ( $A \\geq J \\geq B$ )"</p></li>\n</ul>\n\n<p>One of the test cases given by my teacher is the following:</p>\n\n<pre><code>The fruit list has the following values { 4, 2, 1, 8, 11, 5, 1\n\nInput:\n7   -----&gt; Number of Fruits\n4 2 1 8 11 5 1 ----&gt; Fruits Nutritional Values\n\nOutput:\n1 11  ----&gt;  One fruit, their nutritional values sum for Amelia\n5     ----&gt;  Position of the fruit in the list\n3 11  ----&gt;  Three fruits, their nutritional values sum for Jessica\n1 2 6 ----&gt;  Position of the fruits in the list\n3 10  ----&gt;  Three fruits, their nutritional values sum for Bruno\n3 4 7 ----&gt;  Position of the fruits in the list\n</code></pre>\n\n<p>Note: I am aware that there are several ways of diving the fruits among the kids, but it doesn\'t really matter as long as it follows the rule $A \\geq J \\geq B$.</p>\n\n<p>I\'m trying to make a program in C# that solves this kind of problems but I need an efficient formula to make this work. Generating all the subsets is out of the question because it is very consuming task. The list of fruits can have up to $50$ elements, $2^{50}$ is a huge number.</p>\n', 'ViewCount': '739', 'Title': 'Partition of a set of integer into 3 subsets of approximately equal sum', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-02T20:17:28.170', 'LastEditDate': '2012-07-02T19:42:50.433', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'OwnerDisplayName': 'Julian J. Tejera', 'PostTypeId': '1', 'Tags': '<algorithms><integers><approximation><linear-programming>', 'CreationDate': '2012-07-02T06:06:44.417', 'Id': '2580'},120_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '314', 'Title': 'Minimize the maximum component of a sum of vectors', 'LastEditDate': '2012-07-21T21:36:25.613', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1689', 'FavoriteCount': '1', 'Body': '<p>I\'d like to learn something about this optimization problem: For given non-negative whole numbers $a_{i,j,k}$,\nfind a function $f$ minimizing the expression</p>\n\n<p>$$\\max_k \\sum_i a_{i,f(i),k}$$</p>\n\n<p>An example using a different formulation might make it clearer:\nYou\'re given a set of sets of vectors like</p>\n\n<pre><code>{\n    {(3, 0, 0, 0, 0), (1, 0, 2, 0, 0)},\n    {(0, 1, 0, 0, 0), (0, 0, 0, 1, 0)},\n    {(0, 0, 0, 2, 0), (0, 1, 0, 1, 0)}\n}\n</code></pre>\n\n<p>Choose one vector from each set, so that the maximum component of their sum is minimal.\nFor example, you may choose</p>\n\n<pre><code>(1, 0, 2, 0, 0) + (0, 1, 0, 0, 0) + (0, 1, 0, 1, 0) = (1, 1, 2, 1, 0)\n</code></pre>\n\n<p>with the maximum component equal to 2, which is clearly optimal here.</p>\n\n<p>I\'m curious if this is a well-known problem and what problem-specific approximate solution methods are available. It should be fast and easy to program (no <a href="http://en.wikipedia.org/wiki/Linear_programming#Integer_unknowns" rel="nofollow">ILP</a> solver, etc.). No exact solution is needed as it\'s only an approximation of the real problem.</p>\n\n<hr>\n\n<p>I see that I should have added some details about the problem instances I\'m interested in:</p>\n\n<ul>\n<li>$i \\in \\{0, 1, \\ldots, 63\\}$, i.e., there\'re always 64 rows (when written as in the above example).</li>\n<li>$j \\in \\{0, 1\\}$, i.e., there\'re only 2 vectors per row.</li>\n<li>$k \\in \\{0, 1, \\ldots, N-1\\}$ where $N$ (the vector length) is between 10 and 1000.</li>\n</ul>\n\n<p>Moreover, on each row the sum of the elements of all vectors is the same, i.e.,</p>\n\n<p>$$\\forall i, j, j\':\\quad \\sum_k a_{i,j,k} = \\sum_k a_{i,j\',k}$$</p>\n\n<p>and the sum of the elements of the sum vector is less than its length, i.e.,</p>\n\n<p>$$\\sum_k \\sum_i a_{i,f(i),k} &lt; N$$</p>\n', 'Tags': '<algorithms><optimization><linear-programming>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-21T21:36:25.613', 'CommentCount': '5', 'AcceptedAnswerId': '2758', 'CreationDate': '2012-07-14T03:22:03.487', 'Id': '2741'},120_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>For the branch-and-cut method, it is essential to know many facets of the polytopes generated by the problem. However, it is currently one of the hardest problems to actually calculate all facets of such polytopes as they rapidly grow in size.</p>\n\n<p>For an arbitrary optimization problem, the polytope used by branch-and-cut or also by cutting-plane-methods is the convex hull of all feasible vertices. A vertex is an assignment of all variables of the model. As a (very simple) example: if one would maximize $2\\cdot x+y$ s.t. $x+y \\leq 1$ and $0\\leq x,y\\leq 1.5$ then the vertices $(0,0)$, $(0,1)$ and $(1,0)$ are feasible vertices. $(1,1)$ violates the inequality $x+y\\leq 1.5$ and is therefore not feasible. The (combinatorical) optimization problem would be to choose among the feasible vertices. (In this case, obviously $(1,0)$ is the optimum). The convex hull of these vertices is the triangle with exactly these three vertices. The facets of this simple polytope are $x\\geq0$, $y\\geq 0$ and $x+y\\leq 1$. Note that the description through facets is more accurate than the model. In most hard problems - such as the TSP - the number of facets exceeds the number of model inequalities by several orders of magnitude.</p>\n\n<p>Considering the Travelling Salesman Problem, for which number of nodes is the polytope fully known and how much facets are there. if it is not complete, what are lower bounds on the number of facets?</p>\n\n<p>I'm particularly interested in the so-called hamiltonian path formulation of the TSP:</p>\n\n<p>$$min \\sum_{i=0}^{n-1}(\\sum_{j=0}^{i-1}c_{i,j}\\cdot x_{i,j}+\\sum_{j=i+1}^{n-1}c_{i,j}\\cdot x_{i,j})$$ s.t.</p>\n\n<p>$$\\forall i \\neq j:\\ \\ 0 \\leq x_{i,j}\\leq 1$$\n$$\\forall i \\neq j\\ \\ \\ x_{i,j}+x_{j,i}\\leq 1$$\n$$\\forall j \\ \\ \\sum_{i=0}^{j-1}x_{i,j}+\\sum_{i=j+1}^{n-1}x_{i,j}\\leq 1$$\n$$\\forall j \\ \\ \\sum_{i=0}^{j-1}x_{j,i}+\\sum_{i=j+1}^{n-1}x_{j,i}\\leq 1$$\n$$\\sum_{i=0}^{n-1}(\\sum_{j=0}^{i-1}x_{i,j}+\\sum_{j=i+1}^{n-1}x_{i,j})=n-1$$</p>\n\n<p>If you have any information about polytopes of other formulations of the TSP, feel free to share that too.</p>\n", 'ViewCount': '458', 'Title': 'Known facets of the Travelling Salesman Problem polytope', 'LastEditorUserId': '39', 'LastActivityDate': '2014-01-10T11:09:53.913', 'LastEditDate': '2013-06-06T15:04:53.917', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1227', 'Tags': '<algorithms><optimization><linear-programming><mathematical-programming><traveling-salesman>', 'CreationDate': '2012-08-29T21:07:54.547', 'FavoriteCount': '2', 'Id': '3367'},120_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '516', 'Title': 'Sorting as a linear program', 'LastEditDate': '2012-09-30T16:46:29.820', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '71', 'FavoriteCount': '3', 'Body': '<p>A surprising number of problems have fairly natural reductions to linear programming problems. See <a href="http://www.cs.berkeley.edu/~vazirani/algorithms/chap7.pdf">Chapter 7</a> of [1] for examples of network flows, bipartite matching, zero-sum games, shortest paths, a form of linear regression, and even circuit evaluation! </p>\n\n<p>Since circuit evaluation reduces to linear programming, any problem in $P$ must have a linear programming formulation. Therefore, we have a "new" sorting algorithm, via reduction to a linear program. So, my question is,\nwhat is the linear program that will sort an array of $n$ real numbers? What is the running time of the reduce-to-lp-and-solve sorting algorithm?</p>\n\n<hr>\n\n<ol>\n<li><a href="http://www.cs.berkeley.edu/~vazirani/algorithms/">Algorithms</a> by S. Dasgupta, C. Papadimitriou and U. Vazirani (2006)</li>\n</ol>\n', 'Tags': '<algorithms><sorting><linear-programming>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-02T03:55:41.983', 'CommentCount': '6', 'AcceptedAnswerId': '4823', 'CreationDate': '2012-09-30T01:19:11.290', 'Id': '4805'},120_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If there are many solutions to a linear program s.t. the objective function is minimized/maximized (= optimal solutions are on an edge of the polytope), how can I force an LP solver to find only an extreme point solution?</p>\n', 'ViewCount': '129', 'Title': 'Formulating a linear program s.t. only extreme point solutions are found', 'LastEditorUserId': '19', 'LastActivityDate': '2013-09-12T20:11:20.917', 'LastEditDate': '2013-09-12T20:11:20.917', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4208', 'Tags': '<optimization><linear-programming>', 'CreationDate': '2012-10-15T14:07:50.050', 'Id': '6093'},120_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In my variant of the assignment problem I have a set $A$ of agents and a set (of possibly different cardinality) $T$ of tasks. Each agent needs to be assigned exactly $n$ or $n+1$ tasks, and each task needs to be assigned to exactly $m$ or $m+1$ agents.</p>\n\n<p>It is guaranteed this this is possible: the segment $\\left[ |A|n, |A|(n+1) \\right]$ intersects the segment $\\left[ |B|m, |B|(m+1) \\right]$.</p>\n\n<p>Each agent-task combination yields a profit, and I want to maximize the profit.</p>\n\n<p>Is this a special case of one of the known problems? How can this be solved? If not practical for n=100,000, what are good approximations and what is their complexity?</p>\n\n<p><sub> Not a comp.scientist, but have done the basic research. Please excuse me if I've overlooked anything obvious. </sub></p>\n", 'ViewCount': '289', 'Title': 'A variant of the Assignment Problem', 'LastEditorUserId': '4283', 'LastActivityDate': '2012-10-21T11:52:13.743', 'LastEditDate': '2012-10-21T08:07:04.320', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4283', 'Tags': '<optimization><linear-programming><assignment-problem>', 'CreationDate': '2012-10-20T06:30:51.020', 'Id': '6186'},120_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>A film producer is seeking actors and investors for his new movie. There are $n$ available actors; actor $i$ charges $s_i$ dollars. For funding, there are $m$ available investors. Investor $j$ will provide $p_j$ dollars, but only on the condition that certain actors $L_j \\subseteq \\{1,2,...,n\\}$, are included in the cast (all actors $i \\in L_j$ must be chosen in order to receive funding from investor $j$). The producer's profit is the sum of the payments from investors minus the payments to actors. The goal is to maximize this profit.</p>\n\n<ol>\n<li>Express this problem as an integer linear program in which the variables take on values on [0,1] </li>\n<li>Show that there must in fact be an integral optimal solution (as is the case, for example, with maximum flow and bipartite matching).</li>\n</ol>\n\n<p>I am lost on both parts for this problem.</p>\n", 'ViewCount': '633', 'Title': 'Integer LP formulation and the existence of a solution', 'LastEditorUserId': '19', 'LastActivityDate': '2012-11-20T17:29:59.943', 'LastEditDate': '2012-11-20T17:29:59.943', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '4523', 'Tags': '<optimization><linear-programming>', 'CreationDate': '2012-11-09T13:25:42.710', 'Id': '6582'},120_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1199', 'Title': 'Formalization of the shortest path algorithm to a linear program', 'LastEditDate': '2012-12-23T09:32:01.477', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2329', 'FavoriteCount': '2', 'Body': '<p>I\'m trying to understand a formalization of the shortest path algorithm to a linear programming problem:</p>\n\n<p>For a graph $G=(E,V)$, we defined  $F(v)=\\{e \\in E \\mid t(e)=v \\}$ and $B(v)=\\{ e \\in E \\mid h(e)=v\\}$ where $t(e)$ is a tail of a node, and  $h(e)$ is a head of a node.</p>\n\n<p>Also the solutions for the conditions for the linear problem was defined as $b_v=1$ for every node $v$ except of the root $r$ which from it we find all the shortest paths in the graph where $b_r=-(n-1)$. It is written here "We associate a flow (primal variable) $x_e$ with each arc $e \\in E$.</p>\n\n<p>The main linear program is to minimize $\\sum\\limits_{e\\in E }c_ex_e$, subject to $\\sum\\limits_{e\\in B(v)}x_e-\\sum\\limits_{e\\in F(v)}x_e=b_v$ for all $v \\in V$ and $x_e \\geq 0$ for all $e \\in E$, where $c_e$ is the length of arc $e$.</p>\n\n<p>I\'d really love your help with understanding what does $x_e$ represent. Is it the number of times I use $e$ in order to find all the shortest paths in the graph?</p>\n\n<p>I don\'t understand why does the above condition for this linear program is as at it, why does  $\\sum\\limits_{e\\in B(v)}x_e-\\sum\\limits_{e\\in F(v)}x_e=b_v$ for all $v \\in V$ should  be $1$ for every node and $-(n-1)$ for the all the root? If I think of a $3$ nodes tree for a graph,for  the middle node we get that the condition equals to $1$, which makes me think that I might be misunderstood what $x_e$ stands for.</p>\n', 'Tags': '<algorithms><graph-theory><shortest-path><linear-programming>', 'LastEditorUserId': '3016', 'LastActivityDate': '2012-12-23T12:30:04.713', 'CommentCount': '6', 'AcceptedAnswerId': '7562', 'CreationDate': '2012-11-17T15:59:11.327', 'Id': '6717'},120_11:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p><strong>Topic:</strong><br>\nThe <a href="http://risorse.dei.polimi.it/maxfs/" rel="nofollow">maximum feasible subsystem problem</a>, which is generally NP-hard [1].</p>\n\n<p><strong>Question:</strong><br>\nAre there special algorithms in case of only 2 variables (2D linear constraints)? The problem seems to be a lot less complex in my humble opinion but is this true? Can you guys point me to any algorithms/papers for this limited case with reduced computational complexity?</p>\n\n<p><strong>References:</strong><br>\n[1] E. Amaldi and V. Kann, <a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=E5F2A09B65113E8B30F82BEF29FF00FD?doi=10.1.1.43.9283&amp;rep=rep1&amp;type=pdf" rel="nofollow">The complexity and approximability of finding maximum feasible subsystems of linear relations</a> Theoretical Computer Science, vol. 147, pp. 181\u2013210, 1993.</p>\n', 'ViewCount': '43', 'Title': 'Maximum feasible subsystem problem (MaxFS) in 2 variables', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-19T13:41:31.257', 'LastEditDate': '2012-11-19T13:41:31.257', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4653', 'Tags': '<computational-geometry><linear-programming><linear-algebra>', 'CreationDate': '2012-11-19T13:11:51.377', 'Id': '6765'},120_12:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '35', 'Title': 'A variant of the assignment problem (?)', 'LastEditDate': '2012-11-21T17:30:35.567', 'AnswerCount': '0', 'Score': '3', 'OwnerDisplayName': 'Nitzan Shaked', 'PostTypeId': '1', 'OwnerUserId': '4283', 'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/6186/a-variant-of-the-assignment-problem">A variant of the Assignment Problem</a>  </p>\n</blockquote>\n\n\n\n<p>(Not a comp.scientist, but have the basic research. Please excuse me if I\'ve overlooked anything obvious.)</p>\n\n<p>In my variant of the problem I have a set $A$ of agents and a set (of possibly different cardinality) $T$ of tasks. Each agent needs to be assigned exactly $n$ or $n+1$ tasks, and each task needs to be assigned to exactly $m$ or $m+1$ agents.</p>\n\n<p>It is guaranteed that this is possible: the segment $[ |A|n, |A|(n+1) ]$ intersects the segment $[ |B|m, |B|(m+1) ]$.</p>\n\n<p>Each agent-task combination yields a profit, and I want to maximize the profit.</p>\n\n<p>Is this a special case of one of the known problems? How can this be solved? If not practical for $n=100000$, what are good approximations and what is their complexity?</p>\n\n<p>Cheers!</p>\n', 'ClosedDate': '2012-11-21T20:10:47.473', 'Tags': '<optimization><linear-programming>', 'LastEditorUserId': '140', 'LastActivityDate': '2012-11-21T17:30:35.567', 'CommentCount': '6', 'CreationDate': '2012-10-15T20:43:46.737', 'Id': '6819'},120_13:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '164', 'Title': 'Randomized Rounding of Solutions to Linear Programs', 'LastEditDate': '2012-11-30T04:10:17.983', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '19', 'FavoriteCount': '1', 'Body': '<p><a href="http://en.wikipedia.org/wiki/Linear_programming#Integral_linear_programs" rel="nofollow">Integer linear programming</a> (ILP) is an incredibly powerful tool in combinatorial optimization. If we can formulate some problem as an instance of an ILP then solvers are guaranteed to find the global optimum. However, enforcing integral solutions has runtime that is exponential in the worst case. To cope with this barrier, several approximation methods related to ILPs can be used,</p>\n\n<ul>\n<li>Primal-Dual Schema</li>\n<li>Randomized Rounding</li>\n</ul>\n\n<p>The Primal-Dual Schema is a versatile method that gives us a "packaged" way to come up with a greedy algorithm and prove its approximation bounds using the relaxed dual LP. Resulting combinatorial algorithms tend to be very fast and perform quite well in practice. However its relation to linear programming is closer tied to the analysis. Further because of this analysis, we can easily show that constraints are not violated.</p>\n\n<p>Randomized rounding takes a different approach and solves the relaxed LP (using interior-point or ellipsoid methods) and rounds variables according to some probability distribution. If approximation bounds can be proven this method, like the Primal-Dual schema, is quite useful. However, one portion is not quite clear to me:</p>\n\n<blockquote>\n  <p>How do randomized rounding schemes show that constraints are not violated?</p>\n</blockquote>\n\n<p>It would appear that naively flipping a coin, while resulting in a 0-1 solution, could violate constraints! Any help illuminating this issue would be appreciated. Thank you.</p>\n', 'Tags': '<optimization><randomized-algorithms><linear-programming><approximation>', 'LastEditorUserId': '19', 'LastActivityDate': '2012-11-30T04:10:17.983', 'CommentCount': '4', 'AcceptedAnswerId': '6949', 'CreationDate': '2012-11-27T05:05:34.050', 'Id': '6941'},120_14:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '258', 'Title': 'Find maximum distance between elements given constraints on some', 'LastEditDate': '2013-01-14T22:06:36.387', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4896', 'FavoriteCount': '1', 'Body': '<p>I have a list of numbered elements 1 to N that fit into positions on a number line starting with 1. I also have constraints for these elements:</p>\n\n<ul>\n<li>The element 1 is in position 1, and element N must be at a position >= the position of element N-1. (i.e. element 2 could be at position 1, element 3 at position 7, and element 4 at position 8 (but not position 5))</li>\n<li>Some elements must be within a certain distance from each other on the line.</li>\n<li>Some elements must be at least a certain distance from other on the line.</li>\n</ul>\n\n<p>My objective is to return an integer that represents the maximum span between element 1 and element N. If no lineup is possible, return -1, and if the elements can be any distance apart, return -2. </p>\n\n<p>I am given:</p>\n\n<ul>\n<li>The number of elements</li>\n<li>A withinArray[][] where withinArray[x][y] = the distance elements x and y must be within on the line. Any zero values represent no constraints.</li>\n<li>An atLeastArray[][] where atLeastArray[x][y] = the distance elements x and y must be apart on the line. Any zero values represent no constraints.</li>\n</ul>\n\n<p>An example input would be: 4 elements, withinArray<a href="http://stackoverflow.com/questions/13714903/find-maximum-distance-between-elements-given-constraints-on-some">1</a>[3] = 10, withinArray[2][4] = 20, and atLeastArray[2][3] = 3. (all other array values are zero).</p>\n\n<p>The return value for this input would be 27. (element 1 at position 1, element 2 at position 8, element 3 at position 11, and element 4 at position 28)</p>\n\n<p>The problem was first posted <a href="http://stackoverflow.com/questions/13714903/find-maximum-distance-between-elements-given-constraints-on-some">here</a> by someone else. I\'d like to figure out an elegant solution to it programmatically. Though I\'ve been working on it for a whole day, I still have no luck coming up with a good solution. I feel that I need to use dynamic programming techniques, but have a hard time finding a good substructure. </p>\n\n<p>I am not able to locate the same example on the web. Any pointer to such materials online would be appreciated. It\'s even better if you are an expert for such kind of question and can outline the solution in detail. Executable code is a plus.</p>\n', 'Tags': '<algorithms><optimization><dynamic-programming><linear-programming>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-14T22:06:36.387', 'CommentCount': '0', 'AcceptedAnswerId': '7213', 'CreationDate': '2012-12-06T10:22:20.080', 'Id': '7208'},120_15:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>From <a href="http://books.google.com/books?id=8535vmYbLGYC&amp;lpg=PA73&amp;dq=instances%20of%20LINEAR%20PROGRAMMING%20are%20vectors%20and%20matrices.%20Since%20no%20strongly%20polynomial-time%20algorithm%20for%20LINEAR%20PROGRAMMING%20is%20known%20we%20have%20to%20restri&amp;pg=PA73#v=onepage&amp;q=instances%20of%20LINEAR%20PROGRAMMING%20are%20vectors%20and%20matrices.%20Since%20no%20strongly%20polynomial-time%20algorithm%20for%20LINEAR%20PROGRAMMING%20is%20known%20we%20have%20to%20restri&amp;f=false" rel="nofollow">Bernhard Korte, Jens Vygen, Combinatorial Optimization,</a></p>\n\n<blockquote>\n  <p>Instances of LINEAR PROGRAMMING are vectors and matrices. Since no\n  <strong>strongly polynomial-time</strong> algorithm for LINEAR PROGRAMMING is known we\n  have to restrict attention to <strong>rational instances</strong> when analyzing the\n  running time of algorithms.</p>\n</blockquote>\n\n<p>I was wondering why does the absence of strongly polynomial time algorithms for linear programming imply restriction to rational instances?</p>\n', 'ViewCount': '91', 'Title': 'Why does absence of strongly polynomial time algorithm for LP imply restriction to rational instances?', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-17T21:55:38.283', 'LastEditDate': '2012-12-17T19:28:20.687', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '336', 'Tags': '<complexity-theory><linear-programming>', 'CreationDate': '2012-12-17T17:14:27.047', 'Id': '7467'},120_16:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The problem is\n$$\\max  f(\\mathbf{x}) \\text{ subject to } \\mathbf{Ax} = \\mathbf{b}$$</p>\n\n<p>where $f(\\mathbf{x}) = \\sum_{i=1}^N\\sqrt{1+\\frac{x_i^4}{(\\sum_{i=1}^{N}x_i^2)^2}}$, <br/>\n$\\mathbf{x} = [x_1,x_2,...,x_N]^T \\in \\mathbb{R}^{N\\times 1}$, and  <br/>\n$\\mathbf{A} \\in \\mathbb{R}^{M\\times N} $ <br/></p>\n\n<p>We can see that $f(.)$ is in the form of $\\sqrt{1+y^2}$ and is a convex function.\n<br/> \nIt can be also shown that f(.) is bounded in $[\\sqrt{2}, 2]$. <br/> </p>\n\n<p>I know that a convex maximization problem is NP-hard, in general.</p>\n\n<p>But using the specific nature of the problem, is it possible to solve it using any standard convex optimization software/package?</p>\n', 'ViewCount': '176', 'Title': 'Maximizing a convex function with a linear constraint', 'LastEditorUserId': '165', 'LastActivityDate': '2012-12-27T05:53:20.510', 'LastEditDate': '2012-12-25T19:54:53.643', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '5183', 'Tags': '<optimization><linear-programming>', 'CreationDate': '2012-12-25T12:03:00.633', 'Id': '7594'},120_17:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Traditionally, linear programming is used to find the one optimal solution to a set of constraints, variables and a goal (all described as linear relationships). Sometimes, when the objective is parallel to a constraint, there are infinite or many equally good optimal solutions. I am not asking about this latter case.</p>\n\n<p>I am more interested in finding many solutions that are in the feasible region generated by my set of constraints. But I would like the solutions I find to be \'scattered\' around the feasible region in the sense that they are maximally far from one another. Is there a known way to, without running a solver multiple times, generate multiple solutions and use the objective function to enforce that the solutions should be separated?</p>\n\n<p>For example, any linear program with decisions a and b and constraints w &lt;= a &lt;= x and y &lt;= b &lt;= z can be \'duplicated\' to find two solutions. Our new linear program has variables a1, a2, b1, and b2 and the constraints w &lt;= a1 &lt;= x and w &lt;= a2 &lt;= x and similar for b1, b2. However, when it comes to forming an objective function we run into trouble as we can not use norms other than the L1-norm without discarding linearity and we can not truly even use the L1 norm because it is not possible (so far as I know) to encode absolute values.</p>\n\n<p>Perhaps I should look into convex optimization or semidefinite programming or something?</p>\n\n<p>Is there a known way to generate a set of solutions to a linear program, and using an objective that enforces "distance" between the solutions?</p>\n', 'ViewCount': '95', 'Title': 'Finding a set of maximally different solutions using linear programming or other optimization technique', 'LastActivityDate': '2013-11-08T11:14:17.417', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7687', 'Tags': '<optimization><linear-programming>', 'CreationDate': '2013-04-11T20:52:42.737', 'Id': '11241'},120_18:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to solve a system of inequalities in the following form:\n$\\ x_i - x_j \\leq w $</p>\n\n<p>I know these inequalities can be solved using <code>Bellman-Ford</code> algorithm. But there is also another condition. I want to find the solution that maximizes $\\ x_n - x_1$</p>\n\n<p>As far as I know the default <code>Bellman-Ford</code> algorithm minimizes it. How do I do that?</p>\n', 'ViewCount': '405', 'Title': 'Solving system of linear inequalities', 'LastActivityDate': '2013-08-26T17:37:29.993', 'AnswerCount': '4', 'CommentCount': '1', 'Score': '4', 'OwnerDisplayName': 'Kia.celever', 'PostTypeId': '1', 'Tags': '<algorithms><linear-algebra><linear-programming><shortest-path>', 'CreationDate': '2013-04-19T09:14:20.977', 'Id': '11445'},120_19:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>As I understand, the <a href="http://en.wikipedia.org/wiki/Assignment_problem" rel="nofollow">assignment problem</a> is in P as the Hungarian algorithm can solve it in polynomial time - O(n<sup>3</sup>). I also understand that the assignment problem is an <a href="http://en.wikipedia.org/wiki/Integer_programming" rel="nofollow">integer linear programming</a> problem, but the Wikipedia page states that this is NP-Hard. To me, this implies the assignment problem is in NP-Hard.</p>\n\n<p>But surely the assignment problem can\'t be in both P and NP-Hard, otherwise P would equal NP? Does the Wikipedia page simply mean that the general algorithm for solving all ILP problems is NP-Hard? A few other sources state that ILP is NP-Hard so this is really confusing my understanding of complexity classes in general.</p>\n', 'ViewCount': '1180', 'Title': 'Are all Integer Linear Programming problems NP-Hard?', 'LastActivityDate': '2013-07-22T11:05:12.550', 'AnswerCount': '3', 'CommentCount': '3', 'AcceptedAnswerId': '11476', 'Score': '2', 'OwnerDisplayName': 'Matt', 'PostTypeId': '1', 'OwnerUserId': '1554', 'Tags': '<complexity-theory><complexity-classes><linear-programming><integer-programming>', 'CreationDate': '2013-04-21T19:27:20.410', 'Id': '11475'},120_20:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to solve job assignment problem using <em>Hungarian algorithm of Kuhn and Munkres</em> in case when matrix is not square. Namely we have more jobs than workers.\nIn this case adding additional row is recommended to make matrix square.\nFor example in the following \n<a href="http://books.google.kz/books?id=yXYzLm1e_IUC&amp;pg=PA94&amp;lpg=PA94&amp;dq=job%20assignment%20problem%20matrix%20is%20non%20square&amp;source=bl&amp;ots=1LU3_P-Ss5&amp;sig=k4hlPV0GLjUDT9PxoLEsomt0K6Q&amp;hl=en&amp;sa=X&amp;ei=lFODUcW_FcKQOJfUgPgJ&amp;ved=0CFIQ6AEwBQ#v=onepage&amp;q=job%20assignment%20problem%20matrix%20is%20non%20square&amp;f=false" rel="nofollow">link</a>.</p>\n\n<p><img src="http://i.stack.imgur.com/tWzYi.png" alt="enter image description here">\nAnd here task IV is assumed to be done.\nBut in real we do not have man D. Who will actually do task IV?\nCan someone explain this phenomena?</p>\n\n<p>In general I want to complete all tasks by loading workers uniformly and get maximum cost.\nSo how to implement this task by using job assignment algorithm above?</p>\n', 'ViewCount': '122', 'Title': 'Job assignment problem', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-29T20:11:29.027', 'LastEditDate': '2013-11-29T20:11:29.027', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5207', 'Tags': '<algorithms><linear-programming><assignment-problem>', 'CreationDate': '2013-05-03T06:52:36.190', 'FavoriteCount': '1', 'Id': '11751'},120_21:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have seen some problems that are NP-hard but polynomially solvable in fixed dimension.</p>\n\n<p>Examples, I think, are Knapsack that is polynomial time solvable if the number of items is fixed and Integer Linear Programming with fixed number of variables or constraints by Lenstras result.</p>\n\n<p>Questions:</p>\n\n<p>What are other examples of NP-hard problems that become polynomial time solvable if the dimension is fixed?</p>\n\n<p>Are there problems for which this is not the case?</p>\n\n<p>Is this always the case for problems that admit an FPTAS/pseudo-polynomial time algorithm such as Knapsack?</p>\n', 'ViewCount': '441', 'Title': 'NP complete problems that are solvable in polynomial time if the input (e.g. number of variables) is fixed?', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:17:04.700', 'LastEditDate': '2013-05-10T12:17:04.700', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11762', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<np-complete><optimization><decision-problem><linear-programming><parametrized-complexity>', 'CreationDate': '2013-05-03T15:30:53.200', 'Id': '11761'},120_22:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an expression $$Ax+By+Cz.$$ where $A$, $B$ and $C$ are positive constants $\\ge1$. The variables $x$, $y$ and $z$ are non-negative integers. I am also given a number $T$. </p>\n\n<p>I want to find the largest integer value such that it is less than $T$ and not satisfied by $Ax+By+Cz$, how can I do it without using brute force. </p>\n', 'ViewCount': '82', 'Title': 'Finding the required value of an algebric expression', 'LastEditorUserId': '8110', 'LastActivityDate': '2013-05-14T02:02:03.263', 'LastEditDate': '2013-05-12T21:43:10.770', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8110', 'Tags': '<algorithms><optimization><linear-programming><linear-algebra>', 'CreationDate': '2013-05-10T17:11:35.057', 'Id': '11940'},120_23:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have an expression $$Ax+By+Cz.$$ where $A$, $B$ and $C$ are positive constants $\\ge1$. The variables $x$, $y$ and $z$ are non-negative integers. I am also given a number $T$. </p>\n\n<p>I want to find the largest integer value such that it is less than $T$ and not satisfied by $Ax+By+Cz$, how can I do it without using brute force. </p>\n\n<p>I can use LinearProgramming but that will give me the value that is satisfied by $Ax+By+Cz$ such that it is less than T. But I want to find the largest value which is less than T, but doesn't belong to $Ax+By+Cz$ for any value of x, y and z</p>\n", 'ViewCount': '67', 'Title': 'Issues with an optimization problem', 'LastEditorUserId': '8110', 'LastActivityDate': '2013-05-12T22:24:06.363', 'LastEditDate': '2013-05-12T22:24:06.363', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8110', 'Tags': '<algorithms><optimization><linear-programming>', 'CreationDate': '2013-05-12T21:48:08.947', 'FavoriteCount': '1', 'Id': '11977'},120_24:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have an integer linear program (ILP) with some variables $x_i$ that are intended to represent boolean values.  The $x_i$'s are constrained to be integers and to hold either 0 or 1 ($0 \\le x_i \\le 1$).</p>\n\n<p>I want to express boolean operations on these 0/1-valued variables, using linear constraints.  How can I do this?</p>\n\n<p>More specifically, I want to set $y_1 = x_1 \\land x_2$ (boolean AND), $y_2 = x_1 \\lor x_2$ (boolean OR), and $y_3 = \\neg x_1$ (boolean NOT).  I am using the obvious interpretation of 0/1 as Boolean values: 0 = false, 1 = true.  How do I write ILP constraints to ensure that the $y_i$'s are related to the $x_i$'s as desired?</p>\n\n<p>(This could be viewed as asking for a reduction from CircuitSAT to ILP, or asking for a way to express SAT as an ILP, but here I want to see an explicit way to encode the logical operations shown above.)</p>\n", 'ViewCount': '816', 'Title': 'Express boolean logic operations in zero-one integer linear programming (ILP)', 'LastEditorUserId': '755', 'LastActivityDate': '2014-01-03T21:46:52.170', 'LastEditDate': '2013-05-18T15:35:22.363', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<linear-programming>', 'CreationDate': '2013-05-18T06:56:42.690', 'FavoriteCount': '1', 'Id': '12102'},120_25:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can someone suggest an algorithm to solve job assignment problem with condition?</p>\n\n<p>With condition means that some jobs cannot be done by some workers. For example table as shown below:</p>\n\n<p><img src="http://i.stack.imgur.com/48Tqv.png" alt="enter image description here"></p>\n\n<p>In this table x - means that it is impossible to do. For example, worker 1 cannot do jobs 1,3 and 5.</p>\n\n<p>I encountered such situation and there may be cases as shown above when usual Hungarian algorithm seems cannot solve such task because there is no way to complete all tasks by distributing one task per worker. </p>\n\n<p>However, my main case it is allowed that one worker wil do several tasks (tasks, which worker can do). Main task is to complete all jobs using existing workers, but it is desirable that, all workers do roughly same number of tasks.</p>\n\n<p>So is there some solution of such problem? May be any algorithms do exist?</p>\n', 'ViewCount': '137', 'Title': 'Algorithm to solve job assignment problem', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-19T14:51:50.040', 'LastEditDate': '2013-05-19T14:51:50.040', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5207', 'Tags': '<algorithms><optimization><linear-programming><scheduling><assignment-problem>', 'CreationDate': '2013-05-18T19:39:04.773', 'Id': '12122'},120_26:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have one algorithm that generates a feasible solution to a linear programming problem. However, it is very likely that this is not a corner point. This makes it not suitable for direct use as an initial feasible solution for a bounded Simplex solver. How can I efficiently find a corner point from this solution that I can use?</p>\n', 'ViewCount': '53', 'Title': 'Start simplex method from feasible internal point', 'LastEditorUserId': '8617', 'LastActivityDate': '2013-06-11T11:36:44.303', 'LastEditDate': '2013-06-11T11:36:44.303', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8617', 'Tags': '<linear-programming>', 'CreationDate': '2013-06-11T10:08:59.133', 'Id': '12614'},120_27:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>This is a <a href="http://courses.engr.illinois.edu/cs598csc/sp2010/Homework/hw1.pdf" rel="nofollow">homework problem</a> for a class that ended 2 years ago, I\'m learning it by myself. </p>\n\n<p>Consider a directed graph $D=(V,A)$, $s,t\\in V$. $A=\\{a_1,\\ldots,a_n\\}$. Let $P=\\{p_1,\\ldots,p_m\\}$ be the set of all simple paths from $s$ to $t$, There is a capacity function $c:A\\to \\mathbb{R}^+$. First we are asked to express max s-t flow as a linear program letting each path $p_j$ in $P$ associated with the variable $x_j$, there could be a exponential number of variables.</p>\n\n<p>The formulation,\n$$\n\\begin{align}\n\\text{Maximize:} &amp; \\sum_{j}x_j\\\\\n\\text{subject to:} &amp; \\sum_{a_i \\in p_j}{x_j} \\leq c(a_i) &amp;\\text{ for } 1 \\le i \\le n, \\\\\n&amp; x_j\\geq 0 &amp;\\text{ for } 1 \\leq j \\leq m\\\\\n\\end{align}\n$$</p>\n\n<p>The dual is therefore: \n$$\n\\begin{align}\n\\text{Minimize:} &amp; \\sum_{i} c(a_i) y_i\\\\\n\\text{subject to:} &amp; \\sum_{a_i\\in p_j} y_i \\geq 1 &amp;\\text{ for } 1 \\le j \\le m, \\\\\n&amp; y_i\\geq 0 &amp;\\text{ for } 1 \\leq i \\leq n\\\\\n\\end{align}\n$$</p>\n\n<p>Assuming we have an optimal solution for the dual, the problem ask us to use complementary slackness to show there exist a formulation of the primal with only a polynomial number of paths, which also obtain an optimal solution. How is this done?</p>\n', 'ViewCount': '71', 'Title': 'Use complementary slackness to prove the LP formulation of max-flow only need polynomial number of path constraints', 'LastActivityDate': '2013-06-23T03:47:58.327', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<linear-programming>', 'CreationDate': '2013-06-23T00:40:31.343', 'Id': '12837'},120_28:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I have a rather interesting exercise in Game Theory.</p>\n\n<p><em>Assume there is a 2-players game, and player $i$ has $n_i$ pure strategies. The game is given by listing the payoffs for each player for each $n_1 \xd7 n_2$ possible plays.</em></p>\n\n<p><em>Give a polynomial time algorithm to check if there is a Nash equilibrium for the game in which each player mixes between at most two strategies.\nGive a \ufb01nite algorithm for finding a Nash equilibrium for general games with two players. Your algorithm may run in exponential time.</em></p>\n\n<p>The answer to the first question hopefully can be solved by convex optimization.</p>\n\n<p>In the second case some kind of exhauivet search can be used.</p>\n\n<p>Unfortunately I don't know how to proceed.</p>\n", 'ViewCount': '130', 'Title': 'Nash Equilibrium of 2-players game', 'LastActivityDate': '2013-10-29T07:01:57.073', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4778', 'Tags': '<algorithms><linear-programming><game-theory>', 'CreationDate': '2013-06-30T18:16:54.620', 'FavoriteCount': '1', 'Id': '12996'},120_29:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a linear system of the form:</p>\n\n<p>$$\\begin{array}{c}\nx_r = a \\quad x_j = b \\\\\nc_1x_1 + c_2x_2 + \\ldots + c_nx_n = N \\\\\nx_1+x_2 + x_3 + \\ldots + x_n = k\\\\\n0 \\le a,b,x_1,x_2,x_3...x_n \\le 1\\\\\nk \\ge 0\n\\end{array}$$</p>\n\n<p>How quickly can the feasibility of the system be checked? To clarify: $x_r,x_j$ are members of $x_1,x_2...x_n$. Would it be $O(n^{3.5})$ since I believe that is the general complexity for running a linear program or would it be less? Can one use gaussian elimination to quickly reduce the first 4 equations in $O(n^3)$ and after that systematically move through the equations starting from the terms with largest coefficient and moving to terms with smallest coefficient assigning values that bring the equations as close to satisfactory as possible?</p>\n\n<p>Additional info:</p>\n\n<p>I am assuming that the number of variables scales linearly. $n \\ne N$ (I think that was clear though). </p>\n', 'ViewCount': '439', 'Title': 'Checking Feasibility of Linear Program in Polynomial Time', 'LastEditorUserId': '7678', 'LastActivityDate': '2013-07-22T06:23:52.420', 'LastEditDate': '2013-07-22T06:23:52.420', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '13371', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9271', 'Tags': '<complexity-theory><time-complexity><computational-geometry><linear-programming><linear-algebra>', 'CreationDate': '2013-07-20T23:16:43.717', 'Id': '13370'},120_30:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm seeking to write an algorithm which, given a value of N, will fill a matrix consisting of (N+1)<em>(N+2)</em>(N+3)/6 rows and 4 columns with the integers from 0, ... , N, subject to the conditions that:</p>\n\n<ul>\n<li>The sum of values in any row is N</li>\n<li>No rows are repeated (this should ensure that every such possibility is listed)</li>\n</ul>\n\n<p>For example, with N=2, we have 10 (=3*4*5/6) rows:</p>\n\n<pre><code>2 0  0 0\n1 1  0 0\n0 2  0 0\n1 0  1 0\n1 0  0 1\n0 1  1 0\n0 1  0 1\n0 0  2 0\n0 0  1 1 \n0 0  0 2\n</code></pre>\n\n<p>I've been trying for a while to program this (in R, for what it's worth), but I'm struggling to get anywhere. Any advice?</p>\n", 'ViewCount': '172', 'Title': 'Filling Rows of a Matrix Subject to Conditions', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-12T08:25:28.050', 'LastEditDate': '2013-08-11T13:03:29.910', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '13577', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9322', 'Tags': '<algorithms><integers><linear-programming>', 'CreationDate': '2013-08-01T10:31:49.617', 'Id': '13562'},120_31:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Say you have n bottles. each with a ratio of $(a_i: b_i: c_i)$.\n($a_i/(a_i+b_i+c_i),\\cdots$ swap out the numerator for $b_i$ and $c_i$ respectively).</p>\n\n<p>Now you are given a ratio of $(a:b:c)$. Use Linear programming to find an efficient algorithm to this problem. If it's yes, you can output the parts of bottles that gave you the answer. (e.g. 2 parts from one bottle, 1 part from another bottles.)</p>\n\n<p>So it's not clear how to do this. One of my first thoughts was to make a variable $z = \\sum(\\alpha_i*(a_i,b_i,c_i)) - (a,b,c)$. This, I'm thinking could be the objective function we minimize. </p>\n\n<p>Not sure if this works. Or if it does, where to go from here. Also, I'm not sure if I can have the alphas in the thing I'm trying to minimize. What am I supposed to do with these alphas.</p>\n\n<p>Not sure what it means by algorithm either. That is, even if I could set up the problem as a linear problem, not sure what the algorithm would be.</p>\n", 'ViewCount': '237', 'Title': 'Linear Programming: algorithm to check if ratios can be combined with n bottles to equal a given ratio', 'LastEditorUserId': '9819', 'LastActivityDate': '2013-09-10T12:08:29.123', 'LastEditDate': '2013-09-06T16:18:42.333', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<linear-programming>', 'CreationDate': '2013-09-06T03:51:45.537', 'Id': '14163'},120_32:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If I have a polygone with $n$ edges and 2 points, $a$ and $p$. I would like to formulate some constraints so that a given point $a$ can "see" the whole polygon. \nSo for eg. on this polygon, $a$ can "see" $p$ when $p = y$ but not when $p = x$. </p>\n\n<p><img src="http://i.stack.imgur.com/fczYI.png" alt="enter image description here"></p>\n\n<p>I am trying to formulate this as a linear program. I started using the $y=ax+b$ equations of each side and look for constraints on intersections, but I don\'t end up with an actual linear program.</p>\n', 'ViewCount': '70', 'ClosedDate': '2014-04-01T21:59:06.650', 'Title': 'Linear program for points that can see all points inside a polygon', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-18T18:10:43.397', 'LastEditDate': '2013-09-18T18:10:43.397', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10206', 'Tags': '<computational-geometry><linear-programming>', 'CreationDate': '2013-09-18T16:37:45.390', 'Id': '14415'},120_33:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How to minimize the sum of difference of element in sub-sequence of array of length k from given sequence of length n ?</p>\n\n<p>for example : for n=10\n1\n2\n3\n4\n10\n20\n30\n40\n100\n200</p>\n\n<p>the sub-sequence of length will with minimized sum of difference will be\n1 2 3 4\nas  |1-2| + |1-3| + |1-4| + |2-3| + |2-4| + |3-4| = 10 i.e minimum in any sequence.</p>\n', 'ViewCount': '181', 'Title': 'How to minimize the sum of difference of element in sub-sequence of array of length k from given sequence of length n', 'LastActivityDate': '2013-10-20T19:17:17.783', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10851', 'Tags': '<algorithms><dynamic-programming><linear-programming><greedy-algorithms><constraint-programming>', 'CreationDate': '2013-10-19T08:38:14.163', 'Id': '16224'},120_34:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider a standard feasibility problem. The goal is to examine the state of feasible solutions for $Ax=b$ to find an $x$ that satisfies some property. Does the dual of this problem tell us anything about the solution? Since there is no objective function that we're examining I think the dual looks like $A^Tx \\leq 0$. Is this right?</p>\n", 'ViewCount': '24', 'Title': 'Does it make sense to examine the dual of a feasbility problem?', 'LastActivityDate': '2013-11-15T22:32:41.220', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11410', 'Tags': '<algorithms><optimization><linear-programming>', 'CreationDate': '2013-11-15T22:32:41.220', 'FavoriteCount': '1', 'Id': '18056'},120_35:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the linear programs </p>\n\n<p>\\begin{array}{|ccc|}\n\\hline\nPrimal: &amp; A\\vec{x} \\leq \\vec{b} \\hspace{.5cm} &amp; \n\\max \\vec{c}^T\\vec{x} \\\\\n\\hline\n\\end{array}\n\\begin{array}{|ccc|}\n\\hline\nDual: &amp; \\vec{c} \\leq \\vec{y}^TA \\hspace{.5cm} &amp;\n\\min \\vec{y}^T\\vec{b} \\\\\n\\hline\n\\end{array}</p>\n\n<p>The weak duality theorem states that \nif $\\vec{x}$ and $\\vec{y}$ satisfy the constraints then\n$\\vec{c}^T\\vec{x} \\leq \\vec{y}^T\\vec{b}$.\nIt has a short and slick proof using linear algebra:\n$\\vec{c}^T\\vec{x} \\leq  \\vec{y}^T A \\vec{x} \\leq \\vec{y}^T\\vec{b}$.</p>\n\n<p>The strong duality theorem states that if the $\\vec{x}$ is an optimal solution for the primal then there is $\\vec{y}$ which is a solution for the dual and \n$\\vec{c}^T\\vec{x} = \\vec{y}^T\\vec{b}$.</p>\n\n<p>Is there a similarly short and slick proof for the strong duality theorem?</p>\n', 'ViewCount': '213', 'Title': 'Short and slick proof of the strong duality theorem for linear programming', 'LastActivityDate': '2013-11-20T00:00:15.410', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<algorithms><reference-request><linear-programming><linear-algebra><duality>', 'CreationDate': '2013-11-19T09:39:14.263', 'Id': '18151'},120_36:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given integers $n,m$, I want to find a $m \\times n$ binary matrix $X$ such that there does not exist any non-zero vector $y \\in \\{-1,0,1\\}^n$ with $Xy=0$ (all operations performed over $\\mathbb{Z}$).  What algorithm could I use for this?</p>\n\n<hr>\n\n<p>In more detail: We are given parameters $n$ and $m$.  The problem is to determine if there exists $x$ such that $x_{i,j} \\in \\{0,1\\}$, and there does not exist $y\\ne (0,0,\\dots,0)$ where $y_j \\in \\{-1,0,1\\}$ for all $j$ and for all $1 \\leq i \\leq m$,</p>\n\n<p>$$\\sum_{1 \\leq j \\leq n} x_{i,j} y_j = 0.$$</p>\n\n<p>(Notice that we require that at least one of the  $y_j \\ne 0$ to avoid the trivial solution.)</p>\n\n<p>For example, consider $m=3,n=4$.  Then, expressing $x_{i,j}$ as a matrix $X$,</p>\n\n<p>$$\nX=\\begin{pmatrix}\n0 &amp; 1 &amp; 1 &amp; 0 \\\\\n1 &amp; 0 &amp; 1 &amp; 1 \\\\\n0 &amp; 1 &amp; 0 &amp; 1 \\\\\n\\end{pmatrix}\n$$</p>\n\n<p>is a valid solution for $m=3$ and $n=4$.</p>\n\n<p>What algorithm can I use to solve this problem?  Can I formulate this as an integer linear programming problem or maybe as a constraint programming problem?</p>\n', 'ViewCount': '205', 'Title': 'Find a binary matrix so that no vector from {-1,0,1}^n is in its kernel', 'LastEditorUserId': '8942', 'LastActivityDate': '2014-01-03T13:18:40.517', 'LastEditDate': '2014-01-03T13:13:21.270', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '8942', 'Tags': '<complexity-theory><linear-programming><linear-algebra><constraint-programming><integer-programming>', 'CreationDate': '2013-12-27T20:07:50.993', 'FavoriteCount': '1', 'Id': '19333'},120_37:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems" rel="nofollow">Karp\'s 21 NP-complete problems</a> show that 0-1 integer linear programming is NP-hard. That is, an integer linear program with binary variables.</p>\n\n<p>If we set the $c^T$ vector of the objective $\\text {maximize } c^Tx$ to all one (unweighted, i.e., $c^T=(1,1,\\dots,1)$) is the problem still NP-hard?</p>\n', 'ViewCount': '95', 'Title': 'Is 0-1 integer linear programming NP-hard when $c^T$ is the all-ones vector?', 'LastEditorUserId': '755', 'LastActivityDate': '2013-12-31T06:22:31.170', 'LastEditDate': '2013-12-31T06:21:22.400', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19379', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><np-hard><linear-programming>', 'CreationDate': '2013-12-30T16:49:35.700', 'Id': '19378'},120_38:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So the dual problem of max-flow is min-cut. What's the dual problem of stable matching?</p>\n", 'ViewCount': '34', 'Title': "What's the dual problem of stable matching?", 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T15:47:00.473', 'LastEditDate': '2014-02-05T08:04:12.610', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10191', 'Tags': '<linear-programming><matching><duality>', 'CreationDate': '2014-02-05T02:58:01.200', 'Id': '21308'},120_39:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>It is nice to know that every boolean formula can be expressed by zero-one\ninteger programming <a href="http://cs.stackexchange.com/questions/12102/express-boolean-logic-operations-in-zero-one-integer-linear-programming-ilp">by this answered question</a>. But are there any applications?</p>\n\n<p>To be more precise: Are there papers which use the existense of zero-one\ninteger programming for boolean operations? </p>\n', 'ViewCount': '71', 'LastEditorDisplayName': 'user14525', 'ClosedDate': '2014-02-15T04:35:23.437', 'Title': 'Applications for boolean logic operations in zero-one integer linear programming (ILP)', 'LastActivityDate': '2014-02-12T01:24:51.077', 'LastEditDate': '2014-02-10T14:25:03.970', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'user14525', 'PostTypeId': '1', 'Tags': '<logic><linear-programming><applied-theory>', 'CreationDate': '2014-02-09T19:19:55.597', 'Id': '21473'},120_40:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Hello I study computer science and I just digged into combinatorial optimization and ILP. </p>\n\n<p>I remember a riddle abotu a bunch of people on a river bank, and a boat with limited capacity (lets say the boat can transport 2 people at a time). There are various relations between the people like: person $x_m$ and $x_n$ cannot sail together and cannot even stay on the same bank of the river or $x_m$ and $x_n$ always have to be together.</p>\n\n<p>When I remembered this riddle, I thought whether it could be represented as an optimization problem. The criterial function would be $min(numberOfSails)$ and the conditions will be my limitations, but I am not sure whether I can model my problem like this (and I am not sure how to model all my conditions).</p>\n\n<p>Could you tell me or give me a hint, how such an approach for modelling this program would look like?</p>\n\n<p>At first I thought it could look something like this:</p>\n\n<pre><code>min i // i = number of sails\nx_i1 + ... + x_i2 &lt;= 2 // i-th sail can contain max 2 people\nx_im + x_in &lt;= 1 // x_m and x_n cant sail together\netc.\n</code></pre>\n\n<p>But there is so much wrong with this model (like considering the people left on the first bank or the people already transported) and so on, so I am not usre how to tackle this problem.</p>\n\n<p>Thanks you very much for any tips!</p>\n', 'ViewCount': '34', 'Title': 'Boat riddle as a Combinatorial optimization problem?', 'LastActivityDate': '2014-03-03T14:29:41.137', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12756', 'Tags': '<optimization><linear-programming>', 'CreationDate': '2014-03-03T14:29:41.137', 'Id': '22221'},120_41:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>To add onto the question, how are elliptical differential equations applicable in this context?</p>\n\n<p>I was listening to a talk about Bayesian networks and someone asked if they were using differential elliptical equations in the context of linear relaxation.</p>\n', 'ViewCount': '21', 'ClosedDate': '2014-04-26T12:17:39.360', 'Title': 'What is linear relaxation in the context of bayesian networks?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-23T06:00:46.480', 'LastEditDate': '2014-04-23T06:00:46.480', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17012', 'Tags': '<machine-learning><probability-theory><linear-programming>', 'CreationDate': '2014-04-23T03:43:13.713', 'Id': '24039'}