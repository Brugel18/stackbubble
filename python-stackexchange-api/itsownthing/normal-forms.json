{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am self studying discrete math and I am going through MIT Mathematics for CS lecture notes but they do not have solutions available. I got stuck at <a href="http://www.scribd.com/doc/101941032/3cf" rel="nofollow">Problem 3.14</a> (pages 64-65 of <a href="http://courses.csail.mit.edu/6.042/spring12/part1.pdf" rel="nofollow">this document</a>). The problem is about the construction, given an arbitrary propositional formula $F$, of a proposition $C(F)$ such that:</p>\n\n<ul>\n<li>$C(F)$ is in 3-conjunctive form (3CF), i.e. it is a conjunction of disjunctions of at most literals (a literal is a variable or a negation of a variable);</li>\n<li>$C(F)$ has at most 24 times as many occurrences of variables as $F$;</li>\n<li>$C(F)$ is satisfiable iff $F$ is.</li>\n</ul>\n\n<p>The idea is to introduce a new variable for each operator that occurs in $F$. For example, given\n$$ F_1 = ((P \\oplus Q) \\oplus R) \\vee (\\neg P \\wedge S)) $$\nassign $X_1, X_2, O, A$ to the 4 operators in $F_1$, and define four <em>constraining formulas</em>:\n$$ \\begin{align*}\n C_1^1 &amp;= X_1 \\Leftrightarrow (P \\oplus Q) \\\\\n C_1^2 &amp;= X_2 \\Leftrightarrow (X_1 \\oplus R) \\\\\n C_1^3 &amp;= A \\Leftrightarrow (\\neg P \\wedge S) \\\\\n C_1^4 &amp;= O \\Leftrightarrow (X_2 \\oplus A) \\\\\n\\end{align*} $$\nand $C_1 = C_1^1 \\wedge C_1^2 \\wedge C_1^3 \\wedge C_1^4 \\wedge O$.</p>\n\n<p>The questions are:</p>\n\n<ol>\n<li>Why is $C_1$ satisfiable iff $F_1$ is satisfiable?</li>\n<li>Why is each constraining formula equivalent to a 3CF formula with at most 24 occurrences of variables?</li>\n<li>Generalize from the example to construct $C(F)$ for an arbitrary formula $F$.</li>\n</ol>\n\n<p>For question 1, I don\'t see why $X_1$ is satisfiable.</p>\n\n<p>I think question 2 is wrong, beacuse you can form a 3CF formula with at most 24 occurrences of variables, only if you have a 3-conjunctive <strong>normal</strong> form but here the author only says 3 conjunctive form. </p>\n\n<p>(For 3CNF, 8 different triple terms can be formed using 3 variables with a total of 24 variables, For 3CF, 26 different single,double and triple terms can be formed with a total of ? variables.)</p>\n\n<p>No idea about question 3.</p>\n', 'ViewCount': '201', 'Title': '3CF 3-conjunctive form satisfiability', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-05T12:04:52.527', 'LastEditDate': '2012-08-04T15:49:17.937', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2348', 'Tags': '<logic><satisfiability><3-sat><normal-forms>', 'CreationDate': '2012-08-03T15:14:38.117', 'Id': '3021'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '964', 'Title': '"Applicative order" and "Normal order" in lambda-calculus', 'LastEditDate': '2013-01-02T19:15:08.873', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4409', 'FavoriteCount': '1', 'Body': '<blockquote>\n  <p><strong>Applicative order:</strong> Always fully evaluate the arguments of a function\n  before evaluating the function itself , like -</p>\n  \n  <p>$(\\lambda x. x^2(\\lambda x.(x+1) \\ \\ 2))) \\rightarrow (\\lambda x.\n x^2(2+1))\\rightarrow \\  (\\lambda x. x^2(3)) \\rightarrow \\  3^2 \\\n \\rightarrow \\ 9$</p>\n  \n  <p><strong>Normal order:</strong> The expression would be reduced from the outside in ,\n  like  -</p>\n  \n  <p>$(\\lambda x.x^2 (\\lambda x.(x+1) \\  2)) \\rightarrow \\ (\\lambda x.(x+1)\n \\ \\ \\   2)^  2 \\rightarrow\\ (2+1)^2 \\ \\rightarrow 3^2 \\ \\rightarrow \\\n 9 $</p>\n</blockquote>\n\n<p>Let $M = (\\lambda x.y \\  (\\lambda x.(x \\  \\ x) \\  \\lambda x.(x \\ \\  x)))$</p>\n\n<p>Why is it that under applicative order, $M \\rightarrow$  infinite loop,<br>\nbut under normal order, $M \\rightarrow y$?</p>\n', 'Tags': '<logic><lambda-calculus><normal-forms>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-02T20:10:18.520', 'CommentCount': '2', 'AcceptedAnswerId': '7703', 'CreationDate': '2013-01-02T17:45:42.587', 'Id': '7702'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I\'ve read this part like 3-4 times and I\'m not understanding what is going on. </p>\n\n<p>Let G6 be the following CFG and convert it to Chomsky normal form by using the conversion procedure just given. The series of grammars presented illustrates the steps in the conversion. Rules show in bold have just been added. Rules shown in gray have just been removed.</p>\n\n<p>Specific steps/instructions from the book</p>\n\n<p>1.The original CFG G6 is shown on the left. The result of applying the first step to make a new start variable appears on the right.</p>\n\n<pre><code>S\u2192ASA|aB         S0\u2192S\nA\u2192B|S             S\u2192ASA|aB\nB\u2192b|\u03b5             A\u2192B|S\n                  B\u2192b|\u03b5\n</code></pre>\n\n<p>2.  Remove \u03b5 rules B\u2192\u03b5, shown on the left, and A\u2192\u03b5, shown on the right.</p>\n\n<pre><code>S0\u2192S              S0\u2192S\n S\u2192ASA|aB|**a**        S\u2192ASA|aB|a|**SA|AS|S** from?\n A\u2192B|S|**\u03b5**           A\u2192B|S|\u03b5 \n B\u2192b|**\u03b5**             B\u2192b\n</code></pre>\n\n<p>3a. Remove unit rules S\u2192S, shown on the left, and S0\u2192S, shown on the right.</p>\n\n<pre><code>S0\u2192S                  S0\u2192S|**ASA|aB|a|SA|AS**\n S\u2192ASA|aB|a|SA|AS|S    S\u2192ASA|aB|a|SA|AS \n A\u2192B|S                 A\u2192B|S\n B\u2192b                   B\u2192b\n</code></pre>\n\n<p>3b. Remove unit rules A\u2192B and A\u2192S</p>\n\n<pre><code>S0\u2192ASA|aB|a|SA|AS     S0\u2192ASA|aB|a|SA|AS\n S\u2192ASA|aB|a|SA|AS      S\u2192ASA|aB|a|SA|AS\n A\u2192B|S|**b**           A\u2192S|b|**ASA|aB|a|SA|AS**\n B\u2192b                   B\u2192b\n</code></pre>\n\n<p>4. Convert the remaining rules into the proper form by adding additional variables and rules. The final grammar in Chomsky normal form is equivalent to G6, which follows. (Actually the procedure given in Theorem 2.9 produces several variables Ui, along with several rules Ui\u2192a. We simplified the resulting grammar by using a single variable U and U\u2192a.)</p>\n\n<pre><code>S0\u2192AA1|UB|a|SA|AS\n S\u2192AA1|UB|a|SA|AS\n A\u2192b|AA1|UB|a|SA|AS\nA1\u2192SA\n U\u2192a\n B\u2192b  \n</code></pre>\n\n<p>I don\'t understand why they added the "bold" (** **) items. I also don\'t understand 4. Can someone please explain this to me. Thank you!</p>\n', 'ViewCount': '1417', 'Title': 'CFG to Chomsky normal form', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-11T15:17:49.370', 'LastEditDate': '2013-03-11T15:17:49.370', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'juice', 'PostTypeId': '1', 'Tags': '<formal-grammars><context-free><normal-forms>', 'CreationDate': '2013-03-08T06:48:33.127', 'Id': '10450'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '942', 'Title': 'The importance of normal forms like Chomsky normal form for CFGs', 'LastEditDate': '2013-03-12T11:20:21.347', 'AnswerCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '947', 'FavoriteCount': '0', 'Body': '<p>I understand that context-free grammars can be used to represent context-free languages.It might have ambiguities. We also have normal forms like <a href="https://de.wikipedia.org/wiki/Chomsky-Normalform" rel="nofollow">Chomsky</a> and <a href="https://de.wikipedia.org/wiki/Greibach-Normalform" rel="nofollow">Greibach</a> normal form. I couldn\'t understand the need of that. </p>\n\n<p>Why they are important in the theory of languages? All the textbooks I referred to tell about these normal forms but not telling anything about their importance. </p>\n', 'Tags': '<formal-languages><context-free><formal-grammars><normal-forms>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-29T19:33:05.130', 'CommentCount': '1', 'AcceptedAnswerId': '10478', 'CreationDate': '2013-03-12T06:32:28.983', 'Id': '10468'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm a bit confused as to how to represent the Chomsky form for the language L that generates all strings with the alphabet {a}</p>\n\n<p>My approach was</p>\n\n<pre><code>S -&gt; AB | e\nA -&gt; a\n</code></pre>\n\n<p>Now here's the part I'm confused, how do I represent B? If B -> a then I get only even strings, if B -> e then it's not in normal form. :| Any help would be appreciated. </p>\n", 'ViewCount': '30', 'Title': 'Chomsky form for language of single alphabet member', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-07T11:19:25.227', 'LastEditDate': '2013-04-07T11:19:25.227', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11062', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7600', 'Tags': '<formal-languages><regular-languages><formal-grammars><normal-forms>', 'CreationDate': '2013-04-05T16:11:19.500', 'Id': '11061'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '223', 'Title': 'Are all databases reducible to this ultimate abstract database design?', 'LastEditDate': '2013-05-16T06:03:33.037', 'AnswerCount': '1', 'Score': '1', 'OwnerDisplayName': 'SG1', 'PostTypeId': '1', 'OwnerUserId': '8220', 'Body': '<p>I\'ve designed a few databases in my time, and on more than one occasion the drive to abstract common elements from specific tables has led me to create generic top-level tables which contain those common elements.  For example:</p>\n\n<pre><code>Table      Column         Column\n\nHamburgers Item           Topping\n           Cheeseburger   Tomatoes\n           Mushroomburger Swiss\n</code></pre>\n\n<p>Could be "simplified" ("normalized") as:</p>\n\n<pre><code>Table      Column         Column\n\nFoodTypes  ID             Name\n           1              Hamburger\n           2              Topping\n\nFood       Item           TypeID\n           Cheeseburger   1\n           Mushroomburger 1\n           Tomatoes       2\n           Swiss          2\n</code></pre>\n\n<p>Recently I\'ve gone over the deep end with this approach, abstracting and re-abstracting a fairly complex database design until I was left with something both very simple and yet completely un-resembling of the actual data being stored.</p>\n\n<p>This has led me to the conclusion that all databases could be "summarized" in a single monstrous table called "Entries" with columns:</p>\n\n<pre><code>ID       Type     Value1     Value2\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>ID       Type     Value1     Value2\n4321     Item     \n8746     Descrip  4321       Food\n5673     Item     \n9876     Descrip  5673       Hamburger\n0341     Item     \n1234     Descrip  0341       Lettuce\n5478     Relation 5673       0341\n2381     Descrip  5478       Topping\n2244     Relation 5673       4321\n2160     Descrip  2244       Class\n4436     Relation 0341       4321\n7547     Descrip  4436       Class\n</code></pre>\n\n<p>Here, using these 4 columns in 1 table, I have created two objects sharing a common superclass, given them an attribute, and defined not only a relationship between them but the class of that relationship as well.  We could now say "Lettuce is a Topping of Hamburger, both of which are Foods".</p>\n\n<p>There would of course be a set of rules for this system, but that is beyond the scope of this question.</p>\n\n<p>My question is, is this not logically the case?  If so (or if there is a different, "correct" answer), what is this in relation to real databases?  Does such a system exist, or should it not?</p>\n\n<p>I\'m not sure if I\'ve gone far enough in my analysis, and I feel like I\'m on the verge of some insight which is profoundly obvious to mathematicians and computer scientists (like "yes, all relational data can be described in terms of binary operands like F[a, b]).</p>\n', 'Tags': '<databases><normal-forms>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-16T14:42:31.970', 'CommentCount': '1', 'AcceptedAnswerId': '12065', 'CreationDate': '2013-05-16T02:00:25.800', 'Id': '12060'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I need a little help with a lambda calculus reduction to normal form:\n$$(\\lambda xxxx.xx)(\\lambda x.xx)(\\lambda x.x)y((\\lambda x.x)x)$$\nIt should be solved like this:\n$$xx(\\lambda x.x)y((\\lambda x.x)x)$$\nand then:\n$$xx(\\lambda x.x)y(x)$$</p>\n\n<p>This is the result of any of the lambda calculators that you can find online.</p>\n\n<p>My question is: why can't I go on with reductions and make also $(\\lambda x.x)y$ so the resulting expression would be $xxy(x)$?</p>\n\n<p>Can you give me a complete answer, with theory of lambda calculus rules/proofs?</p>\n\n<p>I really want to understand this exercise, any help would be appreciated.</p>\n", 'ViewCount': '272', 'Title': 'Normal form Lambda calculus expression', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T07:06:07.330', 'LastEditDate': '2013-05-28T07:06:07.330', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'Rose', 'PostTypeId': '1', 'Tags': '<lambda-calculus><normal-forms>', 'CreationDate': '2013-05-24T13:32:55.860', 'Id': '12268'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>My task is to convert the following grammar to CNF: $S \\to SS \\mid (S) \\mid \\lambda$</p>\n\n<p>after removing lambda productions: $S\\to SS,  S\\to (S),  S\\to(), S\\to S$</p>\n\n<p>after removing unit productions: $S\\to SS, S\\to (S), S\\to()$</p>\n\n<p>I got upto this point. Do not know how this grammar will be in CNF coz I am not sure if using () makes the grammar illegal. Need help how to proceed and make this grammar in CNF?</p>\n', 'ViewCount': '66', 'Title': 'conversion of this grammar to CNF', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-09T15:22:10.437', 'LastEditDate': '2013-11-09T15:22:10.437', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11169', 'Tags': '<context-free><formal-grammars><normal-forms>', 'CreationDate': '2013-11-09T12:03:41.860', 'Id': '16843'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Im having some problems with a qeuestion regarding converting a context free grammar to chomsky normal form.</p>\n\n<p>I have \n        S -> abC | babS | de\n        C -> aCa |b</p>\n\n<p>I know what to do with the case of aCa and de and b but im not sure how to handle the abC case or the babS case. I believe that chomsky normal form is supposed to have outputs of only 2 characters. so with something like aCa you make and output aa and have A->a and create another nonterminal? X -> SA but I dont know how im supposed to handle the abC case or the babS case.</p>\n', 'ViewCount': '48', 'Title': 'Converting to Chomsky normal form', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-24T10:37:55.103', 'LastEditDate': '2014-03-24T10:37:55.103', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11470', 'Tags': '<context-free><formal-grammars><normal-forms>', 'CreationDate': '2013-11-25T03:37:11.367', 'FavoriteCount': '1', 'Id': '18316'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Any schema that satisfies BCNF also satisfies 3NF. But how can this be true if BCNF does not necessarily guarantee dependency preservation, whereas 3NF guarantees dependency preservation?</p>\n', 'ViewCount': '41', 'Title': 'Boyce-Codd Normal Form vs. 3rd Normal Form', 'LastActivityDate': '2014-04-25T17:02:29.343', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16342', 'Tags': '<database-theory><normal-forms>', 'CreationDate': '2014-04-01T03:34:25.710', 'Id': '23309'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Say I have part of a query in the form: \u2203x<sub>a</sub>(...)\u2227\u2203x<sub>b</sub>(...)\u2227\u2203x<sub>c</sub>(...), where a, b, and c are attributes and the ellipses can be anything (I\'m looking for a general rule). Is this equivalent to saying \u2203x<sub>a</sub>,x<sub>b</sub>,x<sub>c</sub>(...\u2227...\u2227...) - i.e. compacting all the existential quantifiers into one and \'anding\' their domains together? </p>\n\n<p>For example, if I have the query:</p>\n\n<p><img src="http://i.stack.imgur.com/Y5lvo.png" alt="enter image description here"></p>\n\n<p>would it be correct (albeit unwieldy) to write it as:</p>\n\n<p>{ x<sub>pid</sub> | \u2203x<sub>pname</sub>,x<sub>color</sub>,x<sub>sid</sub>,x<sub>sname</sub>,x<sub>address</sub>,x<sub>cost</sub>,y<sub>sid</sub>,y<sub>sname</sub>,y<sub>address</sub>,y<sub>cost</sub>( PARTS(x<sub>pid</sub>,x<sub>pname</sub>,x<sub>color</sub>) \u2227 SUPPLIERS(x<sub>sid</sub>,x<sub>sname</sub>,x<sub>address</sub>... (and then the rest of the query)</p>\n', 'ViewCount': '46', 'Title': 'Can we move quantifiers to the left in predicate logic?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T12:48:40.067', 'LastEditDate': '2014-04-09T11:50:14.450', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '23592', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16564', 'Tags': '<logic><first-order-logic><normal-forms>', 'CreationDate': '2014-04-09T08:26:01.937', 'Id': '23588'}},