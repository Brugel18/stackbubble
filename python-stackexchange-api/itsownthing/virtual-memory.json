181_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>On my old 256MB RAM, pc I get this message. (I guess it is quite common)</p>\n\n<blockquote>\n  <p><strong>Windows - Virtual Memory minimum too low</strong><br>\n  Your system is low on virtual memory. Windows is increasing the size of your virtual memory paging file. During this process, memory requests for some applications may be denied. ...</p>\n</blockquote>\n\n<p>Please explain from a CS student point of view-</p>\n\n<ol>\n<li>"Windows is increasing the size of your virtual memory paging file." and</li>\n<li>"during this process...". what is this process called?</li>\n</ol>\n\n<p>Thanks, I am currently studying virtual memory management in OS.</p>\n', 'ViewCount': '1107', 'Title': 'How to interpret "Windows - Virtual Memory minimum too low" from a CS student point of view?', 'LastEditorUserId': '135', 'LastActivityDate': '2012-04-22T14:10:33.667', 'LastEditDate': '2012-04-22T14:10:33.667', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1409', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1182', 'Tags': '<operating-systems><virtual-memory><paging>', 'CreationDate': '2012-04-21T06:50:43.410', 'Id': '1407'},181_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2016', 'Title': 'Swap space management during pure demand paging', 'LastEditDate': '2012-05-29T08:49:23.003', 'AnswerCount': '1', 'Score': '8', 'OwnerDisplayName': 'shan23', 'PostTypeId': '1', 'OwnerUserId': '476', 'Body': '<p>The following is a doubt that I came across while doing a OS home assignment - however, it seems more concept-based than a straightforward coding question, so IMHO I don\'t think the homework tag is appropriate for this.</p>\n\n<p>In a pure demand paging scheme for multiple processes running at the same time, given a fixed amount of RAM and Swap memory, what happens in the following 2 cases w.r.t the swap space, when</p>\n\n<ol>\n<li><p>A process encounters a page-fault, and there are no free frames available in the RAM, hence requiring one of the pages from the process\' chunk of Kernel Frames to be written out to swap (for simplicity, I\'m not considering the copy-on-write case). Explicitly, where in the Swap space would this frame be written, and what data structures need to be updated for that?</p></li>\n<li><p>When a process needs to page-in a particular page, where does it look in the Swap memory, and how would it know if that particular page be present in Swap at all ?</p></li>\n</ol>\n\n<p>As you can well imagine, I\'m having difficulty understanding in what way to manage the Swap space during pure demand management scheme, and what data structures would be essential. It would be great if you could refer to any links in your answer (I searched in "Operating System Concepts - 8th edition by Silberschatz, I couldn\'t find an explicit answer for my question).</p>\n', 'Tags': '<operating-systems><memory-allocation><virtual-memory><paging><memory-management>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-30T07:49:30.313', 'CommentCount': '1', 'AcceptedAnswerId': '2169', 'CreationDate': '2012-05-22T18:51:13.247', 'Id': '2154'},181_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was studying operating system concepts from <a href="http://rads.stackoverflow.com/amzn/click/0471417432" rel="nofollow">Silberschatz, Galvin and Gagne\'s book</a> (sixth edition) and I have some questions about the flow of execution of a program. A figure explains the processing of the user program:</p>\n\n<p><img src="http://i.stack.imgur.com/we3Si.jpg" alt="program flow diagram"></p>\n\n<p>We get an executable binary file when we reach the <strong>linkage editor</strong> point. As the book says,</p>\n\n<blockquote>\n  <p>The program must be brought into memory and placed within a process for it to be executed.</p>\n</blockquote>\n\n<p>I have several questions about this flow:</p>\n\n<ol>\n<li><p>Before the program is loaded into the memory, the binary executable file generated by the linkage editor is stored in the hard disk. The address where the binary executable file is stored in the hard disk is the logical address as generated by the CPU ? </p></li>\n<li><p>If the previous answer is yes, Why CPU has to generate the logical address ? I mean the executable file is stored somewhere in the hard disk which pertains to an address, why does CPU has to separately do the stuff ? CPU\'s main aim is processing after all! </p></li>\n<li><p>Why does the executable file needs to be in the physical memory i.e ram and can not be executed in the hard disk? Is it due to speed issues ?</p></li>\n</ol>\n', 'ViewCount': '938', 'Title': 'Program compilation and execution flow', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-20T14:41:54.223', 'LastEditDate': '2012-10-20T14:41:54.223', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6191', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4284', 'Tags': '<compilers><operating-systems><memory-management><virtual-memory>', 'CreationDate': '2012-10-20T07:24:13.227', 'Id': '6187'},181_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If we let the physical memory size remain constant,</p>\n\n<ul>\n<li>What effect does the size of the page have on the number of frames? </li>\n<li>What effect does the number of frames have on the number of page faults?</li>\n</ul>\n\n<p>Also, please provide reference strings as an example.  </p>\n', 'ViewCount': '1672', 'Title': 'How does increasing the page size affect the number of page faults?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-22T14:25:54.897', 'LastEditDate': '2012-11-21T22:09:21.933', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4676', 'Tags': '<operating-systems><memory-management><virtual-memory><paging>', 'CreationDate': '2012-11-21T13:58:21.313', 'FavoriteCount': '1', 'Id': '6813'},181_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<blockquote>\n  <ul>\n  <li>System has a two level paging scheme</li>\n  <li>Average CPU time for a instruction = 100ns</li>\n  <li>Average number of memory accesses per instruction = 2</li>\n  <li>Regular memory access = 150 ns</li>\n  <li>Page fault service time = 8ms</li>\n  <li>TLB hit ratio = 0.9</li>\n  <li>Page fault rate = 0.0001 </li>\n  </ul>\n  \n  <p>What is the average instruction time if the time required for address translation is negligible?</p>\n</blockquote>\n\n<p>I worked out the solution as follows</p>\n\n<pre><code>Average instruction execution time = CPU time + Memory access time\n\nMemory access time = No. of memory accesses by the instruction * average memory access time\n\nAverage memory access time = \n [probability of a TLB hit * regular memory access time]\n + [probability of a TLB miss * (Time for accessing the 1st level of the paging tables\n     + Time for accessing the 2nd level of the paging tables\n     + Time for accessing memory which may not be paged in with the translated address)]\n\nTime for accessing the 1st level of the paging tables \n= Time for accessing the 2nd level of the paging tables \n= Time for accessing memory which may not be paged in with the translated address\n    = [probability of a page fault * (page fault service time + regular memory access time) ]\n      + [probability of no page fault * regular memory access time]\n    = [0.0001 * (8 ms + 150ns)]  + [0.9999 * 150 ns]\n    = 950 ns\n\nThus, average time per memory access = [0.9 * 150ns] + [0.1 * 3 * 950ns] = 420ns\n\nAverage instruction execution time = 100ns + (2 * 420ns) = 940ns\n</code></pre>\n\n<p>However the choices for this question are 645ns, 1050ns, 1215ns and 1230 ns.</p>\n\n<p>I can't seem to be able to see where I have reasoned wrong.</p>\n\n<p><strong>EDIT</strong>\n<hr>\nAverage number of memory accesses per instruction is 2</p>\n", 'ViewCount': '2161', 'Title': 'Calculation of effective average instruction execution time in a 2-level paging system', 'LastEditorUserId': '2980', 'LastActivityDate': '2012-11-28T07:53:04.243', 'LastEditDate': '2012-11-26T13:12:10.997', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2980', 'Tags': '<operating-systems><virtual-memory><paging>', 'CreationDate': '2012-11-26T10:39:39.307', 'Id': '6913'},181_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Studying LRU approximation Algorithms I think to have not understand how it works, for example: </p>\n\n<pre><code>consider a process with 3 logical pages and 2 frames allocated , an approximation of the\nAlgorithm Last Recently Used based of reference bits where every four references there is\na shift and where are considered just the first 2 bits, and the follow reference string:\n</code></pre>\n\n<blockquote>\n  <p>1 2 1 1 1 1 0 1 0 0 </p>\n</blockquote>\n\n<p>I\'d solve it in this way:</p>\n\n<blockquote>\n  <p>1 2 1 1 <strong>(<em>m1)</em></strong> 1 1 <strong>(<em>m2)</em></strong> 0 1 0 0  </p>\n</blockquote>\n\n<p><strong>(<em>m1)</em></strong></p>\n\n<p>4 references so I\'d pass from </p>\n\n<pre><code> frame                     frame\n -----+---+---     to       -----+---+---\n    1 | 1 | 0                  1 | 0 | 1 \n    2 | 1 | 0                  2 | 0 | 1 \n</code></pre>\n\n<p><strong>(<em>m2)</em></strong></p>\n\n<p>page fault so I\'d pass from </p>\n\n<pre><code> frame                     frame\n -----+---+---     to       -----+---+---\n    1 | 1 | 1                  1 | 0 | 0 \n    2 | 0 | 1                  0 | 0 | 0 \n</code></pre>\n\n<p>So the questions are:</p>\n\n<ul>\n<li>Is my doing correct?</li>\n<li>At <strong>m2</strong> there is a page fault, is there a "reset" and all bits puts at 0?</li>\n<li>the shift frequency (4 in the example) restart counting every page fault?</li>\n</ul>\n', 'ViewCount': '207', 'Title': 'clarification about Algorithm of page replacement LRU with reference bits', 'LastActivityDate': '2013-06-14T13:37:39.720', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4765', 'Tags': '<operating-systems><paging><virtual-memory>', 'CreationDate': '2013-02-02T16:46:24.697', 'Id': '9427'},181_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I know that <strong>Translation look aside buffer</strong> is used for address translation in  paging to achieve better performance.</p>\n\n<p>I came across term called <strong>Look Ahead buffer</strong> in a document which said it implements Temporal locality.</p>\n\n<p>I tried searching for <strong>Look Ahead buffer's</strong> but could not get any significant data.</p>\n\n<p>Please help</p>\n", 'ViewCount': '614', 'Title': 'Look Ahead buffer vs Translation Look aside buffer', 'LastActivityDate': '2013-02-09T07:49:15.173', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9616', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5245', 'Tags': '<operating-systems><paging><virtual-memory>', 'CreationDate': '2013-02-09T03:23:50.697', 'Id': '9612'},181_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am studying Computer Systems. I have th following question and its answer:</p>\n\n<blockquote>\n  <p>Given the logical address 0xAEF9 (in hexadecimal) with a page size of\n  256 bytes, what is the page number?</p>\n  \n  <p>Answer: <strong>0xAE</strong> (I found this answer in the web, but I want to know how can I\n  figure it out myself?</p>\n</blockquote>\n\n<p>How can I figure out the page number for a given logical address?</p>\n', 'ViewCount': '685', 'Title': 'Given the logical address, how to extract the page number?', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-04T16:36:05.083', 'LastEditDate': '2013-05-04T03:36:34.570', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11721', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4492', 'Tags': '<operating-systems><memory-management><paging><virtual-memory>', 'CreationDate': '2013-05-02T06:12:58.093', 'Id': '11719'},181_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Given the following exercise from Operating System Concepts Essentials 1st Edition, Chapter 8 Virtual Memory:</p>\n\n<blockquote>\n  <p>An operating system supports a paged virtual memory, using a central\n  processor with a cycle time of 1 microsecond. It costs an additional 1\n  microsecond to access a page other than the current one. Pages have\n  1,000 words, and the paging device is a drum that rotates at 3,000\n  revolutions per minute and transfers 1 million words per second. The\n  following statistical measurements were obtained from the system:</p>\n  \n  <ul>\n  <li>One percent of all instructions executed accessed a page other than\n  the current page.</li>\n  <li>Of the instructions that accessed another page, 80 percent accessed\n  a page already in memory.</li>\n  <li>When a new page was required, the replaced page was modified 50\n  percent of the time.</li>\n  </ul>\n  \n  <p>Calculate the effective instruction time on this system, assuming that\n  the system is running one process only and that the processor is idle\n  during drum transfers.</p>\n</blockquote>\n\n<p>And given the following answer from the textbook-companion website:</p>\n\n<blockquote>\n  <p>effective access time <strong>=</strong> 0.99 \xd7 (1 usec + 0.008 \xd7 (2 usec)</p>\n  \n  <p>+ 0.002 \xd7 (10,000 usec + 1,000 usec)</p>\n  \n  <p>+ 0.001 \xd7 (10,000 usec + 1,000 usec)</p>\n  \n  <p><strong>=</strong> (0.99 + 0.016 + 22.0 + 11.0) usec</p>\n  \n  <p><strong>=</strong> 34.0 usec</p>\n</blockquote>\n\n<p>I have the following formula for computing the effective access time:</p>\n\n<blockquote>\n  <p>effective access time = (1 - p) * memory access time + p * page fault time</p>\n</blockquote>\n\n<p>I am looking for an explanation of how the author came with his solution which is not relative to the formula given in the textbook?</p>\n', 'ViewCount': '2391', 'ClosedDate': '2014-02-28T03:26:21.297', 'Title': 'How to compute the effective access time in Virtual Memory system with demand paging?', 'LastEditorUserId': '4492', 'LastActivityDate': '2014-02-26T23:57:02.913', 'LastEditDate': '2013-05-05T22:38:51.813', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '4492', 'Tags': '<operating-systems><memory-management><virtual-memory>', 'CreationDate': '2013-05-05T22:32:20.517', 'Id': '11813'},181_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I know that for executing a program, it should be copied to RAM. But the problem is whole of it may not be copied always. </p>\n\n<p>Since the size of the RAM is limited, there is mechanism called virtual memory. If the addressed thing is not in memory, a page fault occurs and the data is copied to the RAM. My question is who keeps track of which data is in the RAM and not in the RAM?</p>\n', 'ViewCount': '81', 'Title': 'How a program is copied to RAM from harddisk', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-16T10:11:46.007', 'LastEditDate': '2013-07-16T10:11:46.007', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '13275', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<operating-systems><memory-management><virtual-memory><memory-access>', 'CreationDate': '2013-07-15T01:55:36.963', 'Id': '13274'},181_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '578', 'Title': 'Understanding the basic concepts in memory organisation', 'LastEditDate': '2013-11-02T10:30:47.990', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11125', 'FavoriteCount': '1', 'Body': '<p>(Before actually proceeding to the question, I want to confess that this is a homework question, please do consider it and help me in improving my understanding a bit more.)</p>\n\n<p>I have recently started learning computer organisation and architecture. I have gained fair understanding for how caches are organised, how mapping between cache and main memory takes place (direct , fully and set-associative mapping), what is a page table(what are pages, blocks etc.), i can that say I have basic knowledge of segmentation , paging, virtual address and physical addresses.( at the basic level ofcourse).</p>\n\n<p>Well I have come across this question:</p>\n\n<blockquote>\n  <p>A computer has 46-bit virtual address ,32- bit physical address, and a three \n     level page table organisation. The page table base-register stores the\n     base address of the first level table(t1), which occupies exactly one\n     page.Each entry of t1 stores the base address of the page of second level\n     table t2. Each entry of t2 stores the base address of the page of the third\n     level table t3. Each entry of t3 stores a page table entry (PTE). \n     The PTE is 32 bit in size. The processor used in the computer has a 1MB\n     16-way set associative virtually indexed physically tagged cache. The cache\n     block size is 64 Bytes.</p>\n</blockquote>\n\n<p>First of all I am facing difficulty in just imagining such type of a virtual computer. can any one help me by giving a simple steps on How to realize such a virtual computer on paper, or just how to understand what is given in the question. What is really asked? How would one represent a computer having a 46-bit virtual address and having three level page table?</p>\n\n<blockquote>\n  <p>What is virtually indexed and physically tagged cache?</p>\n</blockquote>\n\n<p>After reading what is given above, I feel that I just know the terms but I am unable to relate them together to solve problems. I will be glad If someone tries to explain how my thought process should be understand and apply these concepts practically to solve such types of problems.</p>\n\n<p>Some questions based on the above paragraph:</p>\n\n<ol>\n<li><p>What is the size of a page in KB in this computer?</p></li>\n<li><p>What is the minimum number of page colours needed to guarantee that no<br>\ntwo synonyms map to different sets in the processor cache of this computer?</p></li>\n</ol>\n\n<p>A good resource where such problems are actually taught to solve will a appreciated. Good articles and views are most welcome.</p>\n', 'Tags': '<memory-management><cpu-cache><virtual-memory>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-02T17:05:17.743', 'CommentCount': '2', 'AcceptedAnswerId': '16655', 'CreationDate': '2013-11-01T20:43:32.837', 'Id': '16630'},181_11:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to study for an exam and I realized I\'m confused about how the TLB and data cache work.</p>\n\n<p>I understand that the TLB is essentially a cache of most recently used physical addresses. However, I was looking at a diagram in my textbook (shown below), and I don\'t understand what\'s going on in it. It suddenly splits up the physical address and uses it to index the cache, I guess. But why is it showing the cache and data separately? and why is the byte offset just left floating? I\'m pretty sure the cache is supposed to store data as well. I don\'t think its sole purpose is to determine whether or not there\'s a hit or miss inside of it.</p>\n\n<p>I apologize for my ignorance in advance, but the book barely covers TLB\'s (it\'s like a little more than a page) and it doesn\'t do a very good job at explaining the relationship between a TLB and cache.</p>\n\n<p><img src="http://i.stack.imgur.com/MlEIQ.jpg" alt="Figure"></p>\n', 'ViewCount': '235', 'Title': 'How does a TLB and data cache work?', 'LastEditorUserId': '755', 'LastActivityDate': '2014-04-23T08:53:27.340', 'LastEditDate': '2013-11-25T05:57:16.537', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '18320', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8783', 'Tags': '<computer-architecture><cpu-cache><virtual-memory>', 'CreationDate': '2013-11-25T01:55:24.453', 'Id': '18313'},181_12:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I came accross the question regarding program overlays, \n<br><br>\n<code>Program1 is of 100kB and program2 is of 90kB and common code is 10kB and overlay driver is 20kB and error handling routine is 50kB, min memory required when there is no error?</code></p>\n\n<p>according to me it should be 100 + 20 + 10 = 130; as there is no error.. \n<br>but ans is 180; they are considering error handling routine also in account..</p>\n\n<p>I am not getting why error handling routine, if there is no error? </p>\n', 'ViewCount': '46', 'Title': 'In case of program overlays; is it necessary to have error handling routine in memory, regardless of error?', 'LastActivityDate': '2013-12-24T15:23:20.667', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19249', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12221', 'Tags': '<operating-systems><memory-management><virtual-memory><memory-allocation>', 'CreationDate': '2013-12-24T09:10:47.167', 'Id': '19235'},181_13:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have several confusion like : </p>\n\n<ol>\n<li><p>Does virtual address space resides in virtual memory ?</p></li>\n<li><p>Does each process has its own virtual address space like each process has its own virtual memory and own page table ?</p></li>\n<li><p>Mapping to physical address takes place from virtual memory or virtual address space if they are different thing ?</p></li>\n</ol>\n', 'ViewCount': '73', 'Title': 'Does virtual address space resides in virtual memory?', 'LastActivityDate': '2013-12-31T16:32:20.743', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12467', 'Tags': '<operating-systems><memory-management><paging><virtual-memory>', 'CreationDate': '2013-12-30T19:08:39.193', 'Id': '19383'},181_14:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider a system with a two-level paging scheme in which a regular memory access takes 150 nsec and servicing a page fault takes 8 millisec. An average instruction takes 100 nsec of CPU time and two memory accesses. The TLB hit ratio is 90%, and the page fault rate is one in every 10000 instructions. What is the effective average instruction execution time?<br>\na) 645 nsec b) 1050 nsec c) 1215 nsec d) 1230 nsec</p>\n\n<p>My Thinking :  </p>\n\n<p>Memory access = 150 ns </p>\n\n<p>No Page fault =  0.9999<br>\nPage fault     = 0.0001    </p>\n\n<p>TLB Hit =  0.9<br>\nTLB miss = 0.1   </p>\n\n<p>For TLB Hit  = 1 memory access<br>\nFor TLB miss = 3 memory access ( 2 for page table and 1 for actual data )   </p>\n\n<p>For TLB hit and miss equation will be   : ( 0.9 * 150 + 0.1 * 450 )   </p>\n\n<p>i.e. NO PAGE FAULT = 0.9999 * ( 0.9 * 150 + 0.1 * 450 )  </p>\n\n<p>For page fault : 0.0001 * ( 8 * 10 ^ 6 )  </p>\n\n<p>Average execution time = 0.9999 * ( 0.9 * 150 + 0.1 * 450 ) +  0.0001 * ( 8 * 10 ^ 6 )   </p>\n\n<p>Now my question is , what is the use of this line ? : An average instruction takes 100 nsec of CPU time and two memory accesses.  </p>\n\n<p>What is the meaning of average instruction ?<br>\nPlease explain the use and  meaning of the above line and correct me in above problem.</p>\n', 'ViewCount': '38', 'ClosedDate': '2014-01-19T02:10:59.667', 'Title': 'Finding TLB hit and miss', 'LastActivityDate': '2014-01-04T14:58:52.823', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9343', 'Tags': '<computer-architecture><cpu-cache><virtual-memory>', 'CreationDate': '2014-01-04T14:58:52.823', 'Id': '19497'},181_15:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '134', 'Title': 'How to determine the maximum RAM capacity for an operating system?', 'LastEditDate': '2014-01-10T09:33:30.993', 'AnswerCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12729', 'FavoriteCount': '1', 'Body': "<p>I was curious to know what limits the max RAM capacity for an OS while reading about microprocessors being 32-bit and 64-bit. I know that limit for 32-bit OS is 4GB and for 64-bit OS is 16 Exabytes, but my question is how do we get there? [I found this calculation][1]:</p>\n\n<p>$\\qquad 2^{32} = 4\\,294\\,967\\,296$</p>\n\n<p>and</p>\n\n<p>$\\qquad \\frac{4\\,294\\,967\\,296}{1024 \\cdot 1024}\\,\\mathrm{B} = 4\\,096\\, \\mathrm{MB} = 4\\, \\mathrm{GB}$.</p>\n\n<p>It's different for 64-bit:</p>\n\n<p>$\\qquad 2^{64} = 18\\,446\\,744\\,073\\,709\\,551\\,616$</p>\n\n<p>and</p>\n\n<p>$\\qquad \\frac{18\\,446\\,744\\,073\\,709\\,551\\,616}{1024 \\cdot 1024}\\mathrm{B} = 16\\,\\mathrm{EB}$.</p>\n\n<p>What I don't understand is how the calculation of bits turned into bytes and reached the results 4GB and 16EXB?</p>\n", 'Tags': '<operating-systems><virtual-memory>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-11T08:15:56.777', 'CommentCount': '4', 'AcceptedAnswerId': '19648', 'CreationDate': '2014-01-10T08:10:14.227', 'Id': '19619'},181_16:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When simulating the clock page replacement algorithm, when a reference comes in which is already in memory, does the clock hand still increment?</p>\n\n<p>Here is an example:</p>\n\n<p>With 4 slots, using the clock page replacement algorithm</p>\n\n<p>Reference list: 1 2 3 4 1 2 5 1 3 2 4 5</p>\n\n<p>Initial list would look like this: </p>\n\n<pre><code>-&gt; [1][1]\n   [2][1]\n   [3][1]\n   [4][1]\n</code></pre>\n\n<p>The next reference to insert would be 1, then 2. Would the hand still point at 1 after 1, and after 2 ? In other words, after inserting the 5, would the clock look like this :</p>\n\n<pre><code>-&gt; [5][1]\n   [2][0]\n   [3][0]\n   [4][0]\n</code></pre>\n\n<p>?</p>\n', 'ViewCount': '31', 'Title': 'Clock page replacement algorithm - Already existing pages', 'LastActivityDate': '2014-04-22T03:16:05.973', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16972', 'Tags': '<algorithms><paging><virtual-memory>', 'CreationDate': '2014-04-22T00:46:50.387', 'Id': '24011'},181_17:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How to know the size of page frame used by my OS ?</p>\n\n<p>This could be useful for some optimizations when I code. (Allocate big buffer that fit in a page frame for example).</p>\n\n<p>Page frame is determined by the operating system ? Mine is Windows 7 (but impossible to find information about it on Google. So, may be I wrong...)</p>\n', 'ViewCount': '10', 'ClosedDate': '2014-04-30T11:39:20.670', 'Title': 'How to know the size of page frame used by my OS?', 'LastActivityDate': '2014-04-30T09:04:45.557', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17208', 'Tags': '<optimization><operating-systems><paging><virtual-memory><memory-allocation>', 'CreationDate': '2014-04-30T09:04:45.557', 'Id': '24253'}