{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>It's a known fact that every LTL formula can be expressed by a B\xfcchi $\\omega$-automaton. But, apparently, B\xfcchi automata are a more powerful, expressive model. I've heard somewhere that B\xfcchi automata are equivalent to linear-time $\\mu$-calculus (that is, $\\mu$-calculus with usual fixpoints and only one temporal operator: $\\mathbf{X}$). </p>\n\n<p>Is there an algorithm (constructive proof) of this equality?</p>\n", 'ViewCount': '445', 'Title': u'Equivalence of B\xfcchi automata and linear $\\mu$-calculus', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-14T13:06:54.697', 'LastEditDate': '2012-07-14T13:06:54.697', 'AnswerCount': '2', 'CommentCount': '13', 'Score': '20', 'PostTypeId': '1', 'OwnerUserId': '147', 'Tags': '<logic><automata><formal-methods><linear-temporal-logic><buchi-automata>', 'CreationDate': '2012-03-07T20:53:40.587', 'FavoriteCount': '4', 'Id': '108'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '147', 'Title': u'Algorithm to translate a deterministic B\xfcchi automaton to LTL (when possible)', 'LastEditDate': '2012-07-14T13:05:53.293', 'AnswerCount': '1', 'Score': '5', 'OwnerDisplayName': 'Ayrat', 'PostTypeId': '1', 'OwnerUserId': '2260', 'Body': u'<p><a href="http://en.wikipedia.org/wiki/Linear_temporal_logic" rel="nofollow">Linear temporal logic</a> and deterministic <a href="http://en.wikipedia.org/wiki/B%C3%BCchi_automaton" rel="nofollow">B\xfcchi automata</a> are incomparable: DBA cannot express $FGa$, and LTL cannot express <em>"at least each odd letter is \'a\'"</em>. But sometimes it is interesting to know whether the language of a DBA can be expressed in LTL.</p>\n\n<p>I need an algorithm that decides whether a language of a given DBA is describable in LTL. Do you know algorithms for that?</p>\n', 'Tags': '<logic><automata><linear-temporal-logic><buchi-automata>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-14T13:05:53.293', 'CommentCount': '5', 'AcceptedAnswerId': '2740', 'CreationDate': '2012-03-02T13:16:26.227', 'Id': '2739'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '61', 'Title': u'B\xfcchi automaton with modified acceptance condition', 'LastEditDate': '2012-09-22T20:45:12.463', 'AnswerCount': '1', 'Score': '2', 'OwnerDisplayName': 'vh4x0r', 'PostTypeId': '1', 'OwnerUserId': '2935', 'Body': u'<p>Consider a B\xfcchi automaton $\\mathcal{A}$ with the modified acceptance condition, that an $\\omega$-word $\\mathcal{w}$ is accepted by $\\mathcal{A}$ iff every run $\\rho$ of $\\mathcal{A}$ on $\\mathcal{w}$ is accepting (rather than at least one run being accepting). I need to show that this automaton also accepts only $\\omega$-regular languages. How do I go about doing that?</p>\n', 'Tags': '<formal-languages><automata><buchi-automata>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-23T21:47:02.687', 'CommentCount': '2', 'AcceptedAnswerId': '4697', 'CreationDate': '2012-09-20T15:44:40.677', 'Id': '4672'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Recall that a language is $\\omega$-regular if and only if it is recognized by a B\xfcchi automaton. How can I prove that</p>\n\n<p>$\\qquad (E_1 + E_2).F^\\omega$</p>\n\n<p>is equivalent to</p>\n\n<p>$\\qquad {E_1.(F^\\omega)+E_2.(F^\\omega)}$</p>\n\n<p>where  </p>\n\n<ul>\n<li>both expressions are <em>omega</em> regular expressions, and  </li>\n<li>$E_1$, $E_2$ and $F$ are <em>arbitrary regular expressions</em> with \n $\\epsilon \\notin L(F)$.  </li>\n</ul>\n\n<p>One way I could think of is to convert expression to a DFA and check\nif it is equivalent.</p>\n\n<p>Or I will really appreciate a hint on how to do the equivalence\nproof, but how to represent $E_1$, $E_2$ and $F$ in DFA.</p>\n', 'ViewCount': '174', 'Title': 'Distributivity of $\\omega$-regular expressions', 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-26T13:23:38.430', 'LastEditDate': '2014-01-26T13:23:38.430', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6688', 'Tags': '<regular-expressions><buchi-automata>', 'CreationDate': '2013-02-03T10:32:22.540', 'Id': '9446'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I want to prove that a language is not $\\omega$-regular. </p>\n\n<p>The language I\'m working with can be defined as:</p>\n\n<p>$$L = \\{ a_1 \\dots a_n x^\\omega ~ | ~ n &gt; 0, a_1 \\dots a_n \\in L^\\prime \\}$$</p>\n\n<p>where $L^\\prime$ is a specific non regular language (I omit the definition $L^\\prime$ because I think it is of no help for my problem), $a_i$ are symbols in $L^\\prime$ alphabet and $x$ is any symbol not in $L^\\prime$ alphabet.</p>\n\n<p>I\'m aware of several proof techniques for proving a language is not regular (see e.g. <a href="http://cs.stackexchange.com/questions/1031/how-to-prove-that-a-language-is-not-regular">How to prove that a language is not regular?</a> ). </p>\n\n<p>Are there similar proof techniques for proving that a language is not $\\omega$-regular?</p>\n', 'ViewCount': '54', 'Title': u'Proving that the continuation of a non-regular language is not \u03c9-regular', 'LastEditorUserId': '14441', 'LastActivityDate': '2014-03-29T23:41:34.323', 'LastEditDate': '2014-03-29T23:41:34.323', 'AnswerCount': '1', 'CommentCount': '10', 'AcceptedAnswerId': '23235', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14441', 'Tags': '<formal-languages><regular-languages><proof-techniques><buchi-automata>', 'CreationDate': '2014-03-29T18:56:27.080', 'Id': '23227'}},