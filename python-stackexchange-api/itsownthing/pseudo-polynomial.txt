{'Body': "<p>What does a pseudo-polynomial algorithm tell us about the problem it solves? I don't see how running time improves if the algorithm is exponential in the input length and polynomial in the input value; so how do we explain this shift from exponential to polynomial?</p>\n", 'ViewCount': '229', 'Title': 'Weak and strong completeness', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-24T03:24:29.867', 'LastEditDate': '2013-02-12T06:27:18.567', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<algorithms><complexity-theory><np-complete><pseudo-polynomial>', 'CreationDate': '2013-02-11T18:23:44.420', 'FavoriteCount': '1', 'Id': '9686'}{'Body': '<p>The running time of knapsack is $O(n*W)$, but we always specify that this is only pseudo-polynomial. I was wondering if somebody could tell me if I understand the notion of pseudo-polynomial time correctly. </p>\n\n<p>My current understanding is that pseudo polynomial time means polynomial in the magnitude of the input, and polynomial time is polynomial in the number of bits it takes to represent the input. Thus, looking through each element of an array is $O(n)$ in the magnitude of its length (pseudo-polynomial), but it is exponential in the number of bits in the length of the array. In the same way, binary search is $O(log_2 n)$ in the magnitude of the length of $n$, but is linear in the number of bits in $n$ making it "pseudo-logarithmic". </p>\n\n<p>If I am correct, why do we never specify that binary search is linear in the number of bits, but we always specify that knapsack is exponential in the number of bits?</p>\n', 'ViewCount': '596', 'Title': 'Do I understand pseudo polynomial time correctly?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-06T13:36:01.240', 'LastEditDate': '2013-07-06T13:36:01.240', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '4', 'OwnerDisplayName': 'Maksim', 'PostTypeId': '1', 'Tags': '<algorithms><complexity-theory><terminology><pseudo-polynomial>', 'CreationDate': '2013-07-05T19:56:54.220', 'Id': '13104'}{'ViewCount': '51', 'Title': 'An algorithm for making 2 carts meet', 'LastEditDate': '2014-02-17T08:37:43.170', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14724', 'FavoriteCount': '0', 'Body': '<p>Say I have 2 carts on an infinite railroad, each cart is initially under a lamp.\nThere are only 2 lamps, and they are at a fixed location, hence they don\'t change their location. The distance between them is D, but its not known.\nEach cart has a processing unit, both will execute a copy of the same program once the whole system is "initiated".</p>\n\n<p>The task: to write a code in pseudo-code, which will make the 2 carts collide.</p>\n\n<p>Restrictions:\nThe following commands can be used:</p>\n\n<blockquote>\n  <ol>\n  <li>move left/right *insert_number_here* steps //each movement takes 1 clock cycle, meaning that "move left C steps takes C clock cycles</li>\n  <li>if underlamp *put_instruction_here* //if the cart is under a lamp</li>\n  <li>goto *number_of_line_here*</li>\n  <li>stop</li>\n  </ol>\n</blockquote>\n\n<p>Variables, loops and not (!) are usable.</p>\n\n<p>the given solution is:</p>\n\n<blockquote>\n  <p>for i=1 to infinity:</p>\n  \n  <ol>\n  <li><p>go left i steps.</p></li>\n  <li><p>if underlamp stop.</p></li>\n  <li><p>go right i steps.</p></li>\n  </ol>\n</blockquote>\n\n<p>Now, I need a hint to help me make a simple improvement to the algorithm that is given in the trivial solution, so when the distance between the lamps is D, the total number of steps of both carts will be a first order polynomial function of D.</p>\n\n<p>My lecturer gave the following solution, and told me to improve the given code using a different idea.\nThis is his solution:</p>\n\n<blockquote>\n  <ol>\n  <li>go right.</li>\n  <li>go right.</li>\n  <li>go left.</li>\n  <li>if underlamp goto 6.</li>\n  <li>goto 1.</li>\n  <li>go right.</li>\n  <li>goto 6.</li>\n  </ol>\n</blockquote>\n\n<p>My improvement of the given code, but I\'m not sure that in this one, the total number of steps is a first order polynomial function of D.</p>\n\n<blockquote>\n  <p>for i=1 to infinity:</p>\n  \n  <ol>\n  <li><p>go right i steps.</p></li>\n  <li><p>if underlamp goto 4.</p></li>\n  <li><p>go left.</p></li>\n  </ol>\n  \n  <p>4.for j=1 to infinity:</p>\n  \n  <ol>\n  <li>go right j steps.</li>\n  </ol>\n</blockquote>\n', 'ClosedDate': '2014-02-24T16:45:28.990', 'Tags': '<algorithms><computer-algebra><pseudo-polynomial>', 'LastEditorUserId': '14724', 'LastActivityDate': '2014-02-17T19:03:35.367', 'CommentCount': '3', 'AcceptedAnswerId': '21720', 'CreationDate': '2014-02-16T20:29:05.613', 'Id': '21705'}