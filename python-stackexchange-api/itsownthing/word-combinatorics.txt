{'Body': '<p>Let $\\Sigma$ be some finite set of characters of fixed size. Let $\\alpha$ be some string over $\\Sigma$. We say that a nonempty substring $\\beta$ of $\\alpha$ is a <em>repeat</em> if $\\beta = \\gamma \\gamma$ for some string $\\gamma$.</p>\n\n<p>Now, my question is whether the following holds:</p>\n\n<blockquote>\n  <p>For every $\\Sigma$, there exists some $n \\in \\mathbb{N}$ such that for every string $\\alpha$ over $\\Sigma$ of length at least $n$, $\\alpha$ contains at least one repeat.</p>\n</blockquote>\n\n<p>I\'ve checked this over the binary alphabet, and this is quite easy for that case, but an alphabet of size 3 is already quite a bit harder to check, amd I\'d like a proof for arbitrarily large grammars.</p>\n\n<p>If the above conjecture is true, then I can (almost) remove the demand for inserting empty strings <a href="http://cs.stackexchange.com/questions/666/is-there-a-string-stack-data-structure-that-supports-these-string-operations">in my other question</a>.</p>\n', 'ViewCount': '336', 'Title': 'Does every large enough string have repeats?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-25T15:29:39.443', 'LastEditDate': '2012-03-25T15:29:39.443', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '758', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '92', 'Tags': '<combinatorics><strings><word-combinatorics>', 'CreationDate': '2012-03-25T14:26:04.570', 'Id': '757'}{'ViewCount': '399', 'Title': 'Number of words in the regular language $(00)^*$', 'LastEditDate': '2012-04-04T20:15:01.173', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '92', 'FavoriteCount': '2', 'Body': '<p><a href="http://en.wikipedia.org/wiki/Regular_language#The_number_of_words_in_a_regular_language">According to Wikipedia</a>, for any regular language $L$ there exist constants $\\lambda_1,\\ldots,\\lambda_k$ and polynomials $p_1(x),\\ldots,p_k(x)$ such that for every $n$ the number $s_L(n)$ of words of length $n$ in $L$ satisfies the equation </p>\n\n<p>$\\qquad \\displaystyle s_L(n)=p_1(n)\\lambda_1^n+\\dots+p_k(n)\\lambda_k^n$.</p>\n\n<p>The language $L =\\{ 0^{2n} \\mid n \\in\\mathbb{N} \\}$ is regular ($(00)^*$ matches it). $s_L(n) = 1$ iff n is even, and $s_L(n) = 0$ otherwise.</p>\n\n<p>However, I can not find the $\\lambda_i$ and $p_i$ (that have to exist by the above). As $s_L(n)$ has to be differentiable and is not constant, it must somehow behave like a wave, and I can\'t see how you can possibly do that with polynomials and exponential functions without ending up with an infinite number of summands like in a Taylor expansion. Can anyone enlighten me?</p>\n', 'Tags': '<formal-languages><regular-languages><combinatorics><word-combinatorics>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-04-15T14:41:18.683', 'CommentCount': '3', 'AcceptedAnswerId': '1040', 'CreationDate': '2012-04-04T15:53:43.390', 'Id': '1039'}{'ViewCount': '428', 'Title': 'Number of words of a given length in a regular language', 'LastEditDate': '2012-04-05T02:09:41.130', 'AnswerCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '39', 'FavoriteCount': '1', 'Body': '<p>Is there an algebraic characterization of the number of words of a given length in a regular language?</p>\n\n<p><a href="http://en.wikipedia.org/wiki/Regular_language#The_number_of_words_in_a_regular_language">Wikipedia</a> states a result somewhat imprecisely:</p>\n\n<blockquote>\n  <p>For any regular language $L$ there exist constants $\\lambda_1,\\,\\ldots,\\,\\lambda_k$ and polynomials $p_1(x),\\,\\ldots,\\,p_k(x)$\n  such that for every $n$ the number $s_L(n)$ of words of length $n$ in $L$ satisfies the equation\n  $s_L(n)=p_1(n)\\lambda_1^n+\\dotsb+p_k(n)\\lambda_k^n$.</p>\n</blockquote>\n\n<p>It\'s not stated what space the $\\lambda$\'s live in ($\\mathbb{C}$, I presume) and whether the function is required to have nonnegative integer values over all of $\\mathbb{N}$. I would like a precise statement, and a sketch or reference for the proof.</p>\n\n<p>Bonus question: is the converse true, i.e. given a function of this form, is there always a regular language whose number of words per length is equal to this function?</p>\n\n<p><sub> This question generalizes <a href="http://cs.stackexchange.com/questions/1039/question-about-the-number-of-words-in-a-regular-language">Question about the number of words in a regular language</a> </sub>  </p>\n', 'Tags': '<formal-languages><regular-languages><word-combinatorics>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-09-22T06:53:52.867', 'CommentCount': '7', 'AcceptedAnswerId': '14481', 'CreationDate': '2012-04-04T20:13:16.497', 'Id': '1045'}{'Body': "<p>I want to count the number of strings $s$ over a finite alphabet $A$, that contain no repeats, and by that I mean for any substring $t$ of $s$, $1&lt; |t| &lt; |s|$, there is no disjoint copy of $t$ in $s$.  For exapmle, let $A=\\{a,b\\}$.  Then $aaa$ <em>is</em> one of the strings I want to count, since for the substring $aa$, there are no disjoint copies.  However, $abab$ contains such a repeat.</p>\n\n<p>If someone's already figured out a useful formula, please link.  Otherwise, I will refer back to this post in any article I write, if I use someone's answer.</p>\n\n<p>Here is another example.  Let's try to construct a long string over $\\{a,b\\}$, that contains no repeats:</p>\n\n<p>aaa (can't be a)  <br>\n&nbsp;&nbsp; aaab (a or b)  <br>\n&nbsp;&nbsp;&nbsp;&nbsp; aaabbb (can't be b) <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aaabbba (can't be b or a) <br>\n&nbsp;&nbsp; aaaba (can't be a or b)  <br></p>\n\n<p>If we built a tree, we could count the number of nodes, but I want a formula.</p>\n\n<p><strong>Edit:</strong>\nWell, it's not as daunting as I first thought if we convert this to a bin-choosing problem.  A set of strings of length k with at least one repeat is equal to the set that is the union of all permutations of the cartesian product:\n$A \\times A \\times \\cdots\\times A \\text{(k-4 times)} \\times R \\times R$ where $R$ is the required repeat.  I don't know if that's helpful, but it sounded pro :)  Anyway, let their be |A| bins, choose any two (even if the same one) to be the repeat, then choose $k-4$ more and multiply (the first 4 are already chosen, see?).  Now I just need to find that formula from discrete math.</p>\n", 'ViewCount': '172', 'Title': 'What is a formula for the number of strings with no repeats?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-19T15:45:22.733', 'LastEditDate': '2012-04-18T05:46:10.587', 'AnswerCount': '1', 'CommentCount': '17', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1118', 'Tags': '<formal-languages><combinatorics><strings><word-combinatorics>', 'CreationDate': '2012-04-17T01:49:50.663', 'Id': '1315'}{'Body': u'<p>This question has been prompted by <a href="http://cs.stackexchange.com/questions/1626/efficient-data-structures-for-building-a-fast-spell-checker">Efficient data structures for building a fast spell checker</a>.</p>\n\n<p>Given two strings $u,v$, we say they are <em>$k$-close</em> if their <a href="http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance" rel="nofollow">Damerau\u2013Levenshtein distance</a>\xb9 is small, i.e. $\\operatorname{LD}(u,v) \\geq k$ for a fixed $k \\in \\mathbb{N}$. Informally, $\\operatorname{LD}(u,v)$ is the minimum number of deletion, insertion, substitution and (neighbour) swap operations needed to transform $u$ into $v$. It can be computed in $\\Theta(|u|\\cdot|v|)$ by dynamic programming. Note that $\\operatorname{LD}$ is a <a href="http://en.wikipedia.org/wiki/Metric_%28mathematics%29" rel="nofollow">metric</a>, that is in particular symmetric.</p>\n\n<p>The question of interest is:</p>\n\n<blockquote>\n  <p>Given a set $S$ of $n$ strings over $\\Sigma$ with lengths at most $m$, what is the cardinality of </p>\n  \n  <p>$\\qquad \\displaystyle S_k := \\{ w \\in \\Sigma^* \\mid \\exists v \\in S.\\ \\operatorname{LD}(v,w) \\leq k \\}$?</p>\n</blockquote>\n\n<p>As even two strings of the same length have different numbers of $k$-close strings\xb2 a general formula/approach may be hard (impossible?) to find. Therefore, we might have to compute the number explicitly for every given $S$, leading us to the main question:</p>\n\n<blockquote>\n  <p>What is the (time) complexity of finding the cardinality of the set $\\{w\\}_k$ for (arbitrary) $w \\in \\Sigma^*$?</p>\n</blockquote>\n\n<p>Note that the desired quantity is exponential in $|w|$, so explicit enumeration is not desirable. An efficient algorithm would be great.</p>\n\n<p>If it helps, it can be assumed that we have indeed a (large) set $S$ of strings, that is we solve the first highlighted question.</p>\n\n<hr>\n\n<ol>\n<li>Possible variants include using the <a href="http://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein distance</a> instead.</li>\n<li>Consider $aa$ and $ab$. The sets of $1$-close strings over $\\{a,b\\}$ are $\\{ a, aa,ab,ba,aaa,baa,aba,aab \\}$ (8 words) and $\\{a,b,aa,bb,ab,ba,aab,bab,abb,aba\\}$ (10 words), respectively .</li>\n</ol>\n', 'ViewCount': '268', 'Title': 'How many strings are close to a given set of strings?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-15T20:21:01.853', 'LastEditDate': '2012-05-15T20:21:01.853', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<algorithms><time-complexity><strings><word-combinatorics><string-metrics>', 'CreationDate': '2012-05-09T15:48:12.173', 'FavoriteCount': '1', 'Id': '1758'}{'Body': "<p>I have one puzzle whose answer I have boiled down to finding the total number and which type of permutation they are.</p>\n\n<p>For example if the string is of length ten as $w = aabbbaabba$, the total number of permutations will be </p>\n\n<p>$\\qquad \\displaystyle \\frac{|w|}{|w|_a! \\cdot |w|_b!} = \\frac{10!}{5!\\cdot 5!}$</p>\n\n<p>Now had the string been of distinct characters, say $w'=abcdefghij$, I would have found the permutations by this algorithm : </p>\n\n<pre><code>for i = 1 to |w|\n  w = rotate(w)\nw = rotate(w)\nreturn w.head + rotate(w.tail)\n</code></pre>\n\n<p>Can some one throw new ideas on this - how to find the number of permutations for a string having repeated characters? Is there any other mathematical/scientific name of for what I am trying to do?</p>\n", 'ViewCount': '1544', 'Title': 'Finding the number of distinct permutations of length N with n different symbols', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-24T11:51:51.870', 'LastEditDate': '2012-06-22T09:14:31.023', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'softy', 'PostTypeId': '1', 'OwnerUserId': '1942', 'Tags': '<algorithms><combinatorics><strings><word-combinatorics>', 'CreationDate': '2012-06-21T16:17:23.717', 'Id': '2443'}{'Body': '<p>I know the answer <em>without</em> nesting limit is the Catalan number. My question is, specifically, is there a recurrence relation that gives the number of expression containing $n$ pairs of matching brackets such that no more than $l$ open brackets are not closed at any given point?</p>\n\n<p>For instance, for $n=3$ and $l=2$ the answer is $4$. All possible combinations are $(())()$, $()(())$, $()()()$, $(()())$. We cannot have $((()))$ since there are three open brackets that are not closed at the middle.</p>\n', 'ViewCount': '182', 'Title': 'What is the number of expressions containing n pairs of matching brackets with nesting limit?', 'LastEditorUserId': '1718', 'LastActivityDate': '2013-01-02T14:13:08.157', 'LastEditDate': '2012-06-28T19:07:37.053', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1718', 'Tags': '<formal-languages><combinatorics><recurrence-relation><word-combinatorics>', 'CreationDate': '2012-06-28T17:42:20.740', 'Id': '2532'}{'Body': '<p>Could anyone help me please to find who was the first person who has proved that the language of all borderless words is not regular and when was that? Could you mention the reference, please?</p>\n\n<p>A word $w$ has a border $u$ if $u$ is both prefix and suffix of $w$ (and $u$ does not equal $\\lambda$ or $w$). </p>\n', 'ViewCount': '75', 'Title': 'The language of all borderless words', 'LastEditorUserId': '4287', 'LastActivityDate': '2013-07-04T08:10:49.713', 'LastEditDate': '2013-07-02T13:59:18.573', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8954', 'Tags': '<regular-languages><pumping-lemma><word-combinatorics>', 'CreationDate': '2013-07-02T10:05:46.077', 'Id': '13035'}