{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In a comment to <a href="http://stackoverflow.com/q/12662896/1243762">Learning F#: What books using other programming languages can be translated to F# to learn functional concepts?</a> <a href="http://stackoverflow.com/users/2121246/makarius">Makarius</a> stated:</p>\n\n<blockquote>\n  <p>Note that the "CPS" approach has done great harm to performance in\n  SML/NJ. Its physical evaluation model violates too many assumptions\n  that are built into the hardware. If you take big symbolic\n  applications of SML like Isabelle/HOL, SML/NJ with CPS comes out\n  approx. 100 times slower than Poly/ML with its conventional stack.</p>\n</blockquote>\n\n<p>Can someone explain the reasons for this? (Preferably with some examples) Is there an impedance mismatch here?</p>\n', 'ViewCount': '159', 'Title': 'The "CPS" approach has done great harm to performance in SML/NJ; reasoning desired', 'LastEditorUserId': '39', 'LastActivityDate': '2013-03-03T20:52:58.603', 'LastEditDate': '2013-03-03T20:52:58.603', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '10235', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<compilers><functional-programming><proof-assistants><continuations>', 'CreationDate': '2013-03-03T15:49:23.960', 'Id': '10233'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '124', 'Title': 'Are there a lambda-mu expression equivalent to the yin yang puzzle?', 'LastEditDate': '2013-09-17T18:12:48.660', 'AnswerCount': '1', 'Score': '3', 'OwnerDisplayName': 'Earth Engine', 'PostTypeId': '1', 'OwnerUserId': '7805', 'FavoriteCount': '1', 'Body': u'<p>The <a href="http://stackoverflow.com/questions/2694679/how-does-the-yin-yang-puzzle-work">yin yang puzzle</a> was written in Scheme. Since it uses call/cc, it is not possible to express it in a pure lambda expression, unless we do a CPS transform.</p>\n\n<p>However, given the fact that $\\lambda \\mu$-calculus have the power to model call/cc, is it possible to write an equivalent $\\lambda \\mu$-expression? I am still learning $\\lambda \\mu$-deductions, so this would be a good example to show how the deduction works.</p>\n\n<p>There is no need to model the "display" command in a pure expression. Ideally only showing how the calculus keep looping and evaluates diffident terms again and again.</p>\n\n<p><strong>UPDATE</strong> My translation in $\\lambda$-expression with CPS:</p>\n\n<pre><code>(\u03bbcallcc.callcc (\u03bbyin.callcc (\u03bbyang.yin yang))(\u03bbcc.cc cc)\n</code></pre>\n\n<p>In CPS, <code>(\u03bbcc.cc cc)</code> is what "call with current continuation" means. So the expression takes it as a parameter. This will result in assign the sub-expression starts <code>\u03bbyin</code> assign its continuation into parameter <code>yin</code>. And then in the body, the second callcc assigns the <code>yang</code> of sub-expression starts <code>\u03bbyang</code> into itself. Finally, apply <code>yin yang</code>.</p>\n\n<p>Note the above translate is not full CPS, only the concept of call/cc has been translated. But it provides the same behavior and it is not hard to do a full CPS translate. </p>\n', 'Tags': '<lambda-calculus><continuations>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-17T18:12:48.660', 'CommentCount': '0', 'CreationDate': '2013-04-19T00:26:18.020', 'Id': '11417'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've been using Clojure for about 18 months. Recently, I've come across terms such as Monads, Continuations, et al which I'd like to learn about.</p>\n\n<p>I could visit Wikipedia and read about these two topics, but I'm looking for a reference which also help me learn about related matters that I don't even know exist. Is there a book on this particular topic (if it even qualifies as one)? Would I pick these things up by learning about type systems or language design in general? Should I just learn Haskell to get exposure?</p>\n", 'ViewCount': '119', 'Title': 'Reference request: Monads, continuations, and other functional CS concepts', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-07-23T23:26:24.237', 'LastEditDate': '2013-07-23T16:58:39.923', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '13399', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '9306', 'Tags': '<reference-request><programming-languages><functional-programming><continuations>', 'CreationDate': '2013-07-23T16:00:17.800', 'Id': '13398'}},