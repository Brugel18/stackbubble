{'Body': '<p>I know that the 2D and 3D Knapsack problems are NPC, but is there any way to solve them in reasonable time if the instances are not very complicated? Would dynamic programming work?</p>\n\n<p>By 2D (3D) Knapsack I mean I have a square (cube) and a I have list of objects, all data are in centimeters and are at most 20m.</p>\n', 'ViewCount': '1006', 'Title': 'Algorithms for two and three dimensional Knapsack', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-29T10:36:33.367', 'LastEditDate': '2012-04-24T05:50:51.137', 'AnswerCount': '2', 'CommentCount': '9', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1219', 'Tags': '<algorithms><complexity-theory><np-complete><computational-geometry><knapsack-problems>', 'CreationDate': '2012-04-24T03:35:25.657', 'FavoriteCount': '1', 'Id': '1478''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '148', 'Title': 'From FACTOR To KNAPSACK', 'LastEditDate': '2012-05-14T15:16:37.660', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '956', 'FavoriteCount': '1', 'Body': '<ol>\n<li><p>If there were an algorithm that factored in polynomial time by means of examining each possible factor of a complex number efficiently, could one not also use this algorithm to solve unbounded knapsack problems since two factors can be viewed as one value, say within the set for the knapsack problem, and the other being the number of copies of the first factor?</p>\n\n<p>FACTOR 15; 3, 5</p>\n\n<p>Unbounded KNAPSACK with value of 15 and the set of all integers; {5,5,5} andor {3,3,3,3,3}</p></li>\n<li><p>Would this mean FACTOR was NP-Complete?</p></li>\n<li><p>Would solving unbounded knapsack problems in polynomial time in this way prove P=NP?</p></li>\n</ol>\n', 'Tags': '<complexity-theory><np-complete><integers><knapsack-problems>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-14T15:31:43.257', 'CommentCount': '0', 'AcceptedAnswerId': '1808', 'CreationDate': '2012-05-12T09:26:26.863', 'Id': '1801''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let $S$ be a set of natural numbers. We consider $S$ under the divisibility partial order, i.e. $s_1 \\leq s_2 \\iff s_1 \\mid s_2$. Let </p>\n\n<p>$\\qquad \\displaystyle \\alpha(S) = \\max \\{|V| \\mid V\\subseteq S, V\\text{ an antichain }\\}$.</p>\n\n<p>If we consider the subset sum problem where the multiset of numbers are in $S$ ,  what can we say about about the complexity of the problem related to $\\alpha(S)$? It is simple to see if $\\alpha(S)=1$, then the problem is easy. Note it is easy even for the harder knapsack problem when $\\alpha(S)=1$<sup>$\\dagger$</sup>.</p>\n\n<hr>\n\n<p>$\\dagger$ <a href="http://dx.doi.org/10.1016/0167-6377%2893%2990044-H" rel="nofollow">Solving sequential knapsack problems</a> by M. Hartmann and T. Olmstead (1993)</p>\n', 'ViewCount': '210', 'Title': 'Subset sum problem with many divisibility conditions', 'LastEditorUserId': '41', 'LastActivityDate': '2013-07-20T09:09:39.243', 'LastEditDate': '2013-07-20T09:09:39.243', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<complexity-theory><number-theory><knapsack-problems>', 'CreationDate': '2012-08-12T04:42:56.943', 'FavoriteCount': '4', 'Id': '3132''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>My question is related to the <a href="http://en.wikipedia.org/wiki/Integer_relation_algorithm" rel="nofollow">Integer Relation Detection Problem</a> which can be formulated as:</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = 0$</p>\n\n<p>Where $\\forall i. a_i\\in\\mathbb{Z} \\land a_i&lt;c \\land x\\in \\mathbb{R}$, and $\\exists i. a_i\\neq 0$. $c$ and vector $\\mathbf{x}$ are given, and the problem is to find a valid vector $\\mathbf{a}$ that satisfies these constraints.</p>\n\n<p>There are a few algorithms to solve this problem, listed on the wikipedia page linked.</p>\n\n<p>My question: are there algorithms for a solution to the same problem with the modification that</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = 1$?</p>\n\n<p>Or equivalently (I believe),</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = b$?</p>\n\n<p>The constant $b\\in \\mathbb R$ is a given.</p>\n\n<p>On <a href="http://math.stackexchange.com/questions/191545/integer-relation-that-equals-one">math.se</a> I ask for a polynomial time algorithm or proof that none exist, with not much luck. Here I ask if a solution to this is equivalent to a solution the knapsack problem (can the knapsack problem be reduced to this), and this would thus be NP-hard.</p>\n', 'ViewCount': '145', 'Title': 'Reduction from knapsack problem to Integer relation that equals one', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-12T22:38:34.833', 'LastEditDate': '2012-09-12T22:38:34.833', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><complexity-theory><np-hard><number-theory><knapsack-problems>', 'CreationDate': '2012-09-11T02:29:27.720', 'FavoriteCount': '0', 'Id': '3503''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have to be honest this is a homework problem, but I just need to discuss this with some one. The problem is there is a row of n houses, with different profit e.g profit1 for house 1, it can be either positive or negative value. But the aim is to maximize the profit by buying a subset of these houses. So infact, you should buy houses which are >0 value. However, you cannot buy houses that adjacent to the house you are buying, e.g i-1 and i+1 should not be bought. I am not quite sure where to start to look at this problem, I mean what exactly will be the difference of looking it from the greedy or dynamic programing way. Thanks for any suggestion. </p>\n', 'ViewCount': '179', 'Title': 'Adjacent house , dynamic programming problem', 'LastActivityDate': '2012-10-26T00:34:37.393', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '6302', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<dynamic-programming><knapsack-problems>', 'CreationDate': '2012-10-25T00:06:25.527', 'Id': '6301''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I wonder what relations are between <a href="http://en.wikipedia.org/wiki/Knapsack_problem" rel="nofollow">the knapsack problem</a>, <a href="http://en.wikipedia.org/wiki/Bin_packing_problem" rel="nofollow">the bin packing problem</a> and <a href="http://en.wikipedia.org/wiki/Set_packing" rel="nofollow">the set packing problem</a>?</p>\n\n<p>From their mathematical formulations, I don\'t see the first two belong to the third one i.e. the set packing problem, although I feel the third one sounds more general than the other two.</p>\n\n<p>Or under what conditions there are some conversions between each other?</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '279', 'Title': 'Relations between the knapsack problem, the bin packing problem, and the set packing problem?', 'LastActivityDate': '2012-10-30T14:57:19.273', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '336', 'Tags': '<knapsack-problems><packing>', 'CreationDate': '2012-10-30T14:57:19.273', 'FavoriteCount': '2', 'Id': '6389''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have a container with a certain dimension. A number of small boxes that may be different in size is to be packed into the container. How to arrange the small boxes such that the container contains as many as possible?</p>\n\n<ul>\n<li>No rotation is allowed.</li>\n<li>The heavier boxes must not be on the top of the lighter ones.</li>\n<li>Approximation is allowed.</li>\n</ul>\n\n<p>I am looking for the algorithm so I can implement it in a software.</p>\n', 'ViewCount': '213', 'Title': 'Algorithm to pack any small boxes into a big box', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:25:11.543', 'LastEditDate': '2013-05-24T03:25:11.543', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4542', 'Tags': '<algorithms><combinatorics><efficiency><approximation><knapsack-problems>', 'CreationDate': '2012-11-10T19:18:01.317', 'Id': '6606''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am unsure if I have even identified the problem correctly, but reading up on <a href="http://en.wikipedia.org/wiki/Knapsack_problem" rel="nofollow">knapsack problem</a> seems the closest to what I am trying to solve:</p>\n\n<blockquote>\n  <p>A cook has $k$ ingredients of $p$ quantities. Given a\n  list of $n$ unique recipes, each consisting varying ingredients of varying\n  quantities. \n  Now, the cook would like to use all ingredients on ONE recipe with minimal leftovers.</p>\n</blockquote>\n\n<p>What is his solution? And can it be determined in $O(\\log n)$ time?</p>\n\n<p><code>Sample input</code></p>\n\n<p>500 pounds of flour\n300 mg sugar\n5 mg of vanilla pods\n20 eggs</p>\n\n<p><code>Database of possible recipes</code>:</p>\n\n<p>Thai Fried Noodles (doesn\'t contain vanilla or flour, but contains 1 tablespoon of sugar)</p>\n\n<p>Tiramisu (doesn\'t contain flour and vanilla but contains 3 tablespoons of sugar and 8 eggs)</p>\n\n<p>Anna\'s Special Tiramiu (doesn\'t contain flour and vanilla but contains 1 tablespoons of sugar and 8 eggs)</p>\n\n<p>Truffle Tagliatelle (doesn\'t contain any input ingredients)</p>\n\n<p><strong>EDIT</strong> Cost/benefit decision:</p>\n\n<p>Given the sample input, <code>Tiramisu</code> recipe is the most preferred because among the 4 recipes in the database, it contains the most number of input ingredient type (2 of 4 types), and the most number of input ingredient quantity.</p>\n\n<p>Expected result where 1) is the top search result of relevance:\n1) Tiramisu\n2) Anna\'s Special Tiramisu\n3) Thai Fried Noodles\n4) Truffle Tagliatelle</p>\n\n<p><strong>EDIT:</strong> I believe my question is a variant of the <a href="http://www.g12.cs.mu.oz.au/wiki/doku.php?id=simple_knapsack" rel="nofollow">integer knapsack problem</a></p>\n', 'ViewCount': '208', 'Title': 'Knapsack problem with multiple constraints', 'LastEditorUserId': '4694', 'LastActivityDate': '2012-11-27T07:25:31.180', 'LastEditDate': '2012-11-26T15:12:05.490', 'AnswerCount': '1', 'CommentCount': '18', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4694', 'Tags': '<algorithms><knapsack-problems>', 'CreationDate': '2012-11-22T17:34:47.507', 'Id': '6837''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I don\'t know the right name for this problem, or if there is a name, but it is inspired by my initial interpretation of the title of <a href="http://cs.stackexchange.com/questions/9155/streaming-knapsack-problem">this</a> question (my question is very different, so the link may be misleading). Anyways, my question is this:</p>\n\n<p>We are initially given a list of "items" to be filled in a knapsack of fixed size. Each item has a weight (bounded, integral) and value, and we need to maximize the total value of items in the knapsack. So far, this is identical to the 0/1 Knapsack problem. Now, at each step, we perform one of the following:</p>\n\n<ul>\n<li>Remove the first item in the list (first means encountered earliest)</li>\n<li>Add a new item to the list at the end.</li>\n</ul>\n\n<p>To keep the solution space small, we can assume that the maximum size of the list is fixed, so that it will behave like a fixed size buffer overflow - oldest item is removed before new item is added.</p>\n\n<p>Now, the list is smallish, so the initial instance of the knapsack on the original list can be performed to obtain the first solution. Now, <strong>after <em>every</em> operation</strong> on the list (addition or removal of items), we again want to find out the best way to fill a <strong>new (empty) knapsack with the items in the new list</strong>. And we want to do it <strong>without repeating a full knapsack algorithm</strong> on this slightly modified list (since there will be many such operations).</p>\n\n<p>Is there some way the results of the previous state can be utilized to speed up the process? Is there some information from the previous state that can <em>usually</em> speed up the process? Is there any research on this or some related problem? </p>\n\n<p>The pseudo-polynomial time DP algorithm can be adapted for the case where an item is added (since the table depends on the previous items), but I could not figure out how to deal with it in case the first item is removed from the list. Similarly, a branch-and-bound approach seems pointless. Any ideas or references?</p>\n', 'ViewCount': '189', 'Title': 'Dynamic Knapsack Problem - Algorithms and References', 'LastEditorUserId': '4751', 'LastActivityDate': '2013-02-01T19:15:14.520', 'LastEditDate': '2013-02-01T19:15:14.520', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4751', 'Tags': '<algorithms><reference-request><optimization><combinatorics><knapsack-problems>', 'CreationDate': '2013-02-01T11:46:06.723', 'Id': '9384''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Problem:</p>\n\n<p>Given 11 numbers</p>\n\n<pre><code>{N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11}\n</code></pre>\n\n<p>where</p>\n\n<ul>\n<li><p>N1:amount of profit from product A</p>\n\n<p>N2:amount of profit from Product B </p>\n\n<p>N3:amount of time in <strong>hours</strong> required to make A in factory1(F1)</p>\n\n<p>N4:amount of time in <strong>hours</strong> required to make B in factory1(F1)</p>\n\n<p>N5:maximum number of hours available in a week to make products in\nF1</p>\n\n<p>N6:amount of time in <strong>hours</strong> required to make A in factory2(F2)</p>\n\n<p>N7:amount of time in <strong>hours</strong> required to make B in factory2(F2)</p>\n\n<p>N8:maximum number of hours available in a week to make products in\nF2</p>\n\n<p>N9:amount time in <strong>hours</strong> required to make A in factory3(F3)</p>\n\n<p>N10:amount time in <strong>hours</strong> required to make B in factory3(F3)</p>\n\n<p>N11:maximum number of hours available in a week to make products in\nF3</p></li>\n</ul>\n\n<p>Output: </p>\n\n<p>3 numbers <code>{R1,R2,R3}</code> or <code>"-1"</code></p>\n\n<p>where:</p>\n\n<pre><code>R1:total number of A\'s to manufacture in a week\n\nR2:total number of B\'s to manufacture in a week\n\nR3:total profit which is **maximum possible profit** with the right mix of A and B\n\n**result = `-1` if R1 and/or R2 is non integer(contains fraction)**\n</code></pre>\n\n<p>consider the Input <code>{10.5,13,3,7,5,6,5,11,16,11,21.6}</code></p>\n\n<pre><code>                    PRODUCT A               PRODUCT B        total hours/Week\n\nProfit/Piece             10.5                  13\n\nHours required in F1     3                     7                   5\n\nHours required in F2     6                     5                   11\n\nHours required in F3     16                    11                  21.6 \n</code></pre>\n\n<p>Any Idea/Algorithm?</p>\n\n<p>Thanks in Advance</p>\n', 'ViewCount': '208', 'Title': 'Maximizing profit', 'LastEditorUserId': '6709', 'LastActivityDate': '2013-02-06T21:53:01.297', 'LastEditDate': '2013-02-06T17:44:48.183', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '-6', 'PostTypeId': '1', 'OwnerUserId': '6709', 'Tags': '<algorithms><dynamic-programming><knapsack-problems>', 'CreationDate': '2013-02-06T14:37:10.063', 'FavoriteCount': '0', 'Id': '9543''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<blockquote>\n  <p>Given a set of n jobs with [start time, end time, cost] find a subset so that no 2 jobs overlap and the cost is maximum.</p>\n</blockquote>\n\n<p>Now I'm not sure if a greedy algorithm will do the trick. That is, sort by cost and always take the next job that doesn't intersect and with max cost between the two.</p>\n\n<p>Is this equivalent to a knapsack problem? How could I approach it?</p>\n", 'ViewCount': '407', 'Title': 'Find non-overlapping scheduled jobs with maximum cost', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-16T17:54:04.300', 'LastEditDate': '2013-11-09T15:21:08.183', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7705', 'Tags': '<algorithms><scheduling><greedy-algorithms><knapsack-problems>', 'CreationDate': '2013-04-12T15:24:23.293', 'Id': '11265''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have this confusion related to the time complexity of the algorithm solving the knapsack problem using dynamic programming</p>\n\n<p><img src="http://i.stack.imgur.com/CvvMV.png" alt="enter image description here"></p>\n\n<p>I didn\'t get how the time complexity of the algorithm came out to be $O(nV^*)$</p>\n', 'ViewCount': '914', 'Title': 'Confusion related to time complexity of dynamic programming algorithm for knapsack problem', 'LastActivityDate': '2013-05-13T02:10:27.163', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6999', 'Tags': '<computability><time-complexity><dynamic-programming><knapsack-problems>', 'CreationDate': '2013-05-12T20:43:16.567', 'Id': '11976''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>How would you approach the knapsack problem in a dynamic programming situation if you now have to limit the number of item in the knapsack by a constant $p$ ? This is the same problem (max weight of $W$, every item have a value $v$ and weight $w$) but you can only add $p$ item(s) to the knapsack and obviously need to optimize the value of the knapsack.</p>\n\n<p>Do we need a 3rd dimension or we could find an other approach without it. I tried to simply add the number of item in the knapsack in the cell and taking the max value at the end with the number of item &lt;= $p$ but it is not the BEST solution. </p>\n', 'ViewCount': '238', 'Title': 'Variant of the knapsack problem', 'LastActivityDate': '2013-12-02T08:43:27.143', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18529', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11536', 'Tags': '<algorithms><optimization><dynamic-programming><knapsack-problems>', 'CreationDate': '2013-11-30T19:46:10.817', 'FavoriteCount': '1', 'Id': '18492''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>An adversary gives you a set of items whose total size is $x$ (he gets to choose how $x$ is distributed. e.g. there may be $k-1$ items of size $\\frac{x}{k}$ and 2 items of size $\\frac{x}{2k}$).</p>\n\n<p>The item are now randomly distributed into $2x$ bins (you may assume $2x\\in \\mathbb{N}$).</p>\n\n<p>What\'s the probability (i.e. what can we guarantee to achieve for any adversarial choice)  no bin contains items with total size > 1?</p>\n\n<hr>\n\n<p>For example, if the adversary chose all items (except for the last one) to be of size $\\frac{1}{2} + \\epsilon$ , then we have $2x-1$ items that no two of them can fit in a single bin. The last item can fit everywhere. hence the probability is bounded by (relaxing to $2x-1$ bins):</p>\n\n<p>$\\frac{(2x-1)!}{(2x-1)^{2x-1}} &lt; e^{-(2x-1)}$ .</p>\n\n<p>On the other hand, all I know for a general item set is that a "good" coloring exist (easy to see using the first fit algorithm).</p>\n\n<p>Any ideas?</p>\n', 'ViewCount': '27', 'Title': 'Adversarial bin packing', 'LastEditorUserId': '12486', 'LastActivityDate': '2013-12-31T09:37:08.750', 'LastEditDate': '2013-12-31T09:37:08.750', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12486', 'Tags': '<combinatorics><probability-theory><lower-bounds><knapsack-problems><packing>', 'CreationDate': '2013-12-31T09:24:16.570', 'Id': '19398''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have the following problem.</p>\n\n<blockquote>\n  <p>Maximize $\\sum\\limits_{m=1}^M\\sum\\limits_{n=1}^N x_{mn}$</p>\n  \n  <p>subject to: $\\sum\\limits_{\\substack{m^\\prime=1\\\\ m^\\prime \\neq m}}^M\\sum\\limits_{\\substack{n^\\prime=1\\\\ n^\\prime \\neq n}}^N \\alpha_{mn^\\prime}x_{m^\\prime n^\\prime} \\leq \\alpha_{mn},~~ \\forall~ m\\in\\{1, 2, \\cdots, M\\}, \\forall~ n\\in\\{1, 2, \\cdots, N\\} .$</p>\n  \n  <p>where, $x_{mn} \\in \\{0, 1\\}$, and $\\alpha_{mn} \\in \\mathbb{R} ~\\forall~ m\\in\\{1, 2, \\cdots, M\\}, \\forall~ n\\in\\{1, 2, \\cdots, N\\}$ </p>\n</blockquote>\n\n<p>Please can I say that this is a knapsack problem? \nIs there a way to find a reduction from knapsack problem? In the <a href="http://en.wikipedia.org/wiki/List_of_knapsack_problems" rel="nofollow">most basic form of knapsack problem</a>, if the weights are all equal 1 the optimal solution is easy to solve.</p>\n', 'ViewCount': '61', 'Title': 'Is this problem a knapsack problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-22T21:40:49.310', 'LastEditDate': '2014-01-22T21:40:49.310', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12683', 'Tags': '<complexity-theory><optimization><np-hard><knapsack-problems><integer-programming>', 'CreationDate': '2014-01-22T18:58:47.070', 'Id': '19897''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is there any literature about the complexity of the integer knapsack problem with bounded weights? To make it clear, I want an optimal solution to the following problem:</p>\n\n<p>$\\max \\sum_{i=1}^k c_i \\cdot x_i$</p>\n\n<p>$\\sum_{i=1}^k w_i \\cdot x_i \\leq W$</p>\n\n<p>$x_i \\in \\{0,\\ldots,k_i\\}$</p>\n\n<p>where $k_i$ is an item-specific limit for the number of copies that can be taken of item $i$ and $w_i$ is integral <strong>but bounded by $k$</strong>.</p>\n\n<p>I\'m not sure whether it is NP-hard or not...in contrast to the "traditional" knapsack problem, it would be possible to iterate over $w_i$ here (in polynomial time), but not to iterate over the whole sum since the values $k_i$ are <strong>not</strong> bounded by a polynomial. On the other hand, I cannot imagine a reduction of an $NP$-hard problem. Any ideas?</p>\n', 'ViewCount': '57', 'Title': 'Integer knapsack problem with bounded weights', 'LastActivityDate': '2014-03-04T14:34:21.497', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15270', 'Tags': '<knapsack-problems>', 'CreationDate': '2014-03-04T14:34:21.497', 'Id': '22269''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>We have a 0-1 knapsack in which the increasing order of items by weight is the same as the decreasing order of items by value. Design a greedy algorithm and prove that the greedy choice guarantees an optimal solution.</p>\n\n<p>Given the two orders I imagined that we could just choose the first k elements from either sequence and use them to fill knapsack until it was full. This would be similar to choosing the items with the greatest ratio of value to weight. But I don't think that is an optimal solution. </p>\n\n<p>So what I need help with is whether or not this solution is optimal. And how would I prove the correctness of a greedy algorithm. </p>\n", 'ViewCount': '63', 'Title': 'Correctness proof of greedy algorithm for 0-1 knapsack problem', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-26T16:45:47.887', 'LastEditDate': '2014-03-26T08:38:55.053', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '23060', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15512', 'Tags': '<algorithms><algorithm-analysis><correctness-proof><greedy-algorithms><knapsack-problems>', 'CreationDate': '2014-03-26T03:23:03.477', 'Id': '23058''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}