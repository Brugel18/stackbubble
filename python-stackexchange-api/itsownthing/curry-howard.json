{'Body': u"<p>In the pre-history of dependent type theory, Per Martin L\xf6f\nintroduced a calculus that is in some sense the simplest dependent\ntype theory and the most general form of impredicative polymorphism.\nIt is often referred to as <strong><em>Type:Type</em></strong> because the kind <strong><em>Type</em></strong> is\nitself of type <strong><em>Type</em></strong>.  Unfortunately, it is inconsistent as a\nlogic. This was discovered by Girard in his famous dissertation [1],\nwho managed to express the Burali-Forti paradox in <strong><em>Type:Type</em></strong>.\nVarious people have analysed, generalised and simplified Girard's\nanalysis, see e.g. [2, 3]. This analysis seems to involve showing that\nnon-terminating terms can be typed.</p>\n\n<p>I have a question about non-termination: do we get non-normalisation <strong><em>at\nthe level of types</em></strong>? By that I mean, is there a type $T$ such that the\nreduction relation $\\rightarrow$ used, explicitly or implicitly, to\ndefine equality of types, gives rise to an infinite reduction sequence\n$$\n   T \\rightarrow T' \\rightarrow T'' \\rightarrow \\cdots?\n$$</p>\n\n<p>[1] J.-Y.. Girard, Une extension de l'interpretation fonctionelle de\nG\xf6del a l'analyse.</p>\n\n<p>[2] T. Coquand, A New Paradox in Type Theory.</p>\n\n<p>[3] A. J. C. Hurkens, A Simplification of Girard's Paradox.</p>\n", 'ViewCount': '68', 'Title': u"Non-termination of types in Martin-L\xf6f's Type:Type?", 'LastEditorUserId': '2887', 'LastActivityDate': '2013-12-19T12:26:08.823', 'LastEditDate': '2013-12-19T12:26:08.823', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19072', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2887', 'Tags': '<type-theory><functional-programming><dependent-types><curry-howard>', 'CreationDate': '2013-12-17T14:11:17.690', 'Id': '19065''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Philip Wadler has written a <a href="http://ttic.uchicago.edu/~dreyer/course/papers/wadler.pdf" rel="nofollow">brilliant paper</a> called \'Theorems for Free\'. The big idea is that you can use types to reason about your program, and even prove simple theorems about your program. </p>\n\n<p>We see these ideas about types applied in the Haskell language. </p>\n\n<p>At very roughly the same time period - we have an <a href="http://en.wikipedia.org/wiki/Design_by_contract" rel="nofollow">idea from Betrand Meyer called \'Design By Contract\'</a>- which is most notably implemented in the <a href="http://en.wikipedia.org/wiki/Eiffel_%28programming_language%29" rel="nofollow">Eiffel Language</a>. This has the following features:</p>\n\n<ul>\n<li>routine preconditions</li>\n<li>routine postconditions</li>\n<li>class invariants</li>\n<li>check instructions (like assert)</li>\n<li>loop invariants</li>\n</ul>\n\n<p>The idea behind Design by Contract is <em>software designers should define formal, precise and verifiable interface specifications for software components, which extend the ordinary definition of abstract data types with preconditions, postconditions and invariants.</em></p>\n\n<p>Now many claim that using \'Types\' in your programs leads to \'more correct programs\' (via the <a href="http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence" rel="nofollow">Howard Curry Correspondence</a>).  From what I can see - even the most advanced use of <a href="http://www.infoq.com/presentations/scala-idris" rel="nofollow">Dependent Typing in Idris and Scala</a> is limited to Sum Types and list lengths (correct me if I\'m wrong). </p>\n\n<p>By contrast - the power of \'Design By Contract\' in establishing the correctness of my program is more general and more powerful. (Albeit not necessarily at compile-time - but at test time). I can for example establish in my banking program that all deposits are positive, and all reported account balances are positive. </p>\n\n<p>The point being - types have a fascinating future of possibilities, and are enormously powerful and compile time - but right now their practical application seems limited. </p>\n\n<p>My question is: <strong>is design by contract of more general application than using theorems from types to reason about the correctness of my program at present?</strong> (Or are we just talking about two different things)</p>\n', 'ViewCount': '79', 'Title': "Is Wadler's 'Theorems for Free' as general as Design By Contract for establishing correctness?", 'LastActivityDate': '2014-02-05T22:30:30.147', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '21332', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1709', 'Tags': '<type-theory><curry-howard>', 'CreationDate': '2013-12-19T23:14:12.743', 'Id': '19135''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}