{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am interested in calculating the $n$'th power of a $n\\times n$ matrix $A$. Suppose we have an algorithm for matrix multiplication which runs in $\\mathcal{O}(M(n))$ time. Then, one can easily calculate $A^n$ in $\\mathcal{O}(M(n)\\log(n))$ time. Is it possible to solve this problem in lesser time complexity?</p>\n\n<p>Matrix entries can, in general, be from a semiring but you can assume additional structure if it helps.</p>\n\n<p>Note: I understand that in general computing $A^m$ in $o(M(n)\\log(m))$ time would give a $o(\\log m)$ algorithm for exponentiation. But, a number of interesting problems reduce to the special case of matrix exponentiation where m=$\\mathcal O(n)$, and I was not able to prove the same about this simpler problem.</p>\n", 'ViewCount': '975', 'Title': 'Complexity of computing matrix powers', 'LastEditorUserId': '984', 'LastActivityDate': '2012-04-10T09:49:46.710', 'LastEditDate': '2012-04-10T09:49:46.710', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '984', 'Tags': '<algorithms><complexity-theory><time-complexity><computer-algebra>', 'CreationDate': '2012-04-09T00:05:00.413', 'FavoriteCount': '2', 'Id': '1147'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p><a href="http://cs.stackexchange.com/questions/1984/proving-the-intractability-of-this-nth-prime-recurrence">As discussed in this question,</a> I drafted a spec algorithm that hinges on finding a specific root of a system of trigonometric equations satisfying the following recurrence:</p>\n\n<p>$\\qquad f_{p_0} = 0\\\\\n\\qquad p_0 = 2\\\\\n\\qquad \\displaystyle\n  f_{p_n}(x) = f_{p_{n-1}}(x) + \\prod_{k=2}^{p_{n-1}} (-\\cos(2\\pi(x+k-1)/p_{n-1}) + 1)\\\\\n \\qquad \\displaystyle\n p_n = \\min\\left\\{ x &gt; p_{n-1} \\mid f_{p_n}(x) = 0\\right\\}$</p>\n\n<p><a href="http://www.wolframalpha.com/input/?i=%E2%88%92cos%282%CF%80%28x%2b1%29/2%29%2b1%2b%28%E2%88%92cos%282%CF%80%28x%2b1%29/3%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b2%29/3%29%2b1%29%2b%28%E2%88%92cos%282%CF%80%28x%2b1%29/5%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b2%29/5%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b3%29/5%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b4%29/5%29%2b1%29=0%20for%20x" rel="nofollow">Playing with this system a bit over on Wolfram|Alpha</a>, it seems I can get specific answers to the recurrence from their <a href="http://en.wikipedia.org/wiki/Computer_algebra_system" rel="nofollow">computer algebra system</a>. Unfortunately, I can find no specific documentation on the methods they\'re using to solve my equations.</p>\n\n<p>My question, then: </p>\n\n<blockquote>\n  <p>What methods (and what time and space complexities) do computer algebra systems use to solve these forms of equations? I suspect the <a href="http://en.wikipedia.org/wiki/Gr%C3%B6bner_basis" rel="nofollow">Gr\xf6bner basis</a> is commonly used, but I could be very wrong.</p>\n</blockquote>\n', 'ViewCount': '163', 'Title': 'Complexity of computer algebra for systems of trigonometric equations', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-28T18:02:17.160', 'LastEditDate': '2012-05-28T18:02:17.160', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '958', 'Tags': '<reference-request><runtime-analysis><mathematical-analysis><computer-algebra><mathematical-software>', 'CreationDate': '2012-05-28T09:20:37.547', 'FavoriteCount': '1', 'Id': '2121'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '361', 'Title': 'Constructing a data structure for a computer algebra system', 'LastEditDate': '2012-05-30T21:51:33.500', 'AnswerCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '863', 'FavoriteCount': '0', 'Body': '<p>In thinking about how to approach this problem I think several things will be required, some tivial:</p>\n\n<ol>\n<li>An expression tree where non-leaf node is an operation (not sure if that part is redundant), but not every node has just two children.</li>\n<li>All nodes for operations have a defined number of children that they must have (some operators are unary (like $!$) while others are binary ($*,+,-,$ etc) and still other are n-ary ($f(a,b,d)$ and versions with different amounts of variables).</li>\n<li>All leaf nodes are some type of number</li>\n</ol>\n\n<p>I am under the impression that the tree should not explicitly retain information regarding the order of operations, but rather that information should be used in the parsing stage to insert things into the tree correctly.</p>\n\n<p>This leads to the question, how should inserting to a specific position in the tree be done? Simply passing a list of directions (from root, take node zero, then node 1, etc, then insert) will work, but it seems overly clunky.</p>\n\n<p>Or should I avoid that situation entirely (not talking about editing an equation here, just building a representation of one) by using the fact that in some sense the tree must be complete (all binary operations MUST have two children, etc, and even operators that are seemingly ambiguous (the $_{^-}$ sign for example) but these ambiguities are resolved before this point. That would all me to insert "in order"</p>\n\n<p>Am I taking a reasonable approach? Does it make no sense whatsoever?</p>\n\n<p>Additionally, are there papers or articles that I should read about CAS systems?</p>\n\n<p><strong>Clarification:</strong> The tree will need to support three different compound operations.</p>\n\n<ol>\n<li>Creation: (from a string, but how to actually do that is beyond the scope of this question)</li>\n<li>Reduction: (to some type of canonical form) so that if $a+b$ and $b+a$ are both entered and reduced, they will form identical trees.</li>\n<li>Evaluation: Be able to traverse the tree</li>\n</ol>\n\n<p>These are all the operations that need to be supported. There are probably many other more basic operations that may need to be supported, but in this case it only matters that the three operations above are supported. My understanding is that search for example is not a property that will be required, but deletion will be (of a whole subtree).</p>\n', 'Tags': '<data-structures><computer-algebra><mathematical-software>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-06-01T11:59:11.663', 'CommentCount': '4', 'AcceptedAnswerId': '2181', 'CreationDate': '2012-05-30T21:00:49.130', 'Id': '2175'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have come across the following interesting problem: let $p,q$ be polynomials over the field of real numbers, and let us suppose that their coefficients are all integer (that is, there is a finite exact representation of these polynomials). If needed, we may suppose that the degree of both polynomials is equal. Let us denote by $x_p$ (resp. $x_q$) the greatest absolute value of some (real or complex) root of the polynomial $p$ (resp. $q$). Is the property $x_p = x_q$ decidable?</p>\n\n<p>If not, does this property hold for some restricted families of polynomials? In the context from which this problem arises, the polynomials are characteristic polynomials of matrices, and their roots are eigenvalues.  </p>\n\n<p>I am aware of some numerical algorithms for computing roots of polynomials / eigenvalues, however these seem to be of no use here, since the output of these algorithms is only approximate. It seems to me that computer algebra might be useful here, however, unfortunately, I do not have almost any knowledge in that field.</p>\n\n<p>I am not searching for a detailed solution to this problem, however any intuition and ideas where to search for the solution would be helpful. </p>\n\n<p>Thank you in advance.</p>\n', 'ViewCount': '109', 'Title': 'Decidability of a problem concerning polynomials', 'LastActivityDate': '2012-10-16T19:19:49.487', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '6091', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '2091', 'Tags': '<computability><undecidability><computer-algebra>', 'CreationDate': '2012-10-15T07:37:19.173', 'Id': '6088'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>As a hobby, I have written a basic computer algebra system. My CAS handles expressions as trees. I have advanced it to the point where it can simplify expressions symbolically (i.e., sin(pi/2) returns 1), and all expressions can be reduced to a canonical form.  The CAS can also differentiate expressions.</p>\n\n<p>Using this paradigm, what kinds of algorithms are there for solving equations? An equation in my model would be represented as an (=) tree with two subtrees that are the left and right expressions. I know there is no "magic bullet" for solving all equations, but are there algorithms out there that are designed to symbolically solve an equation? If there aren\'t, what would be the general approach? What kind of classes can equations be split into (so that I might be able to implement an algorithm for each kind)? I don\'t want to use naive methods and then paint myself into a metaphorical corner.</p>\n', 'ViewCount': '136', 'Title': 'Computer Algebra: Algorithms for solving equations symbolically', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-09T09:37:37.693', 'LastEditDate': '2013-02-06T07:56:43.630', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6727', 'Tags': '<reference-request><computer-algebra>', 'CreationDate': '2013-02-06T07:02:12.597', 'Id': '9538'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>This is something I've been wondering for years. Software like Mathematica is great at manipulating expressions into simplified, factorized, and other forms. I'm wondering if there's a way, theoretically and/or practically, to find the form that has the fewest operations. The next step would be to prefer operations that are faster (ie. multiply instead of divide). Lastly, to find a form that maximizes extraction of repetitive subexpressions, so that the subexpressions can be evaluated once and substituted for potentially significant performance gains. Has any research been done in this area? Thanks.</p>\n", 'ViewCount': '95', 'Title': 'Using a computer algebra system to optimize mathematical expressions', 'LastEditorUserId': '8233', 'LastActivityDate': '2013-09-07T11:32:43.477', 'LastEditDate': '2013-05-17T18:58:26.217', 'AnswerCount': '4', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8233', 'Tags': '<optimization><computer-algebra>', 'CreationDate': '2013-05-17T18:24:29.617', 'Id': '12092'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm trying write a program to solve equations from the following form:</p>\n\n<p>$$ \\begin{align}\na \\bmod x &amp;= t_1 \\\\\nb \\bmod x &amp;= t_2 \\\\\n\\end{align} $$</p>\n\n<p>where $a$, $b$, $t_1$ and $t_2$ are known values.</p>\n\n<p>I have multiple equations of the same form and I'd like to solve them for $x$.\nAssuming I have constraints on $t_1$ and on $t_2$ for some constant $C$:</p>\n\n<p>$$ \\begin{align}\n0 \\le t_1 \\lt C \\\\\n0 \\le t_2 \\lt C \\\\\n\\end{align} $$</p>\n\n<p>e.g :\nfor $a=150$, $b=50$, $t1=2$, $t_2=1$:\n$$ \\begin{align}\n150 \\bmod x &amp;= 2 \\\\\n50 \\bmod x &amp;= 1 \\\\\n1, 2 \\lt 5 \\\\\n\\end{align} $$</p>\n\n<p>What would be the most efficient way to program such a thing?</p>\n", 'ViewCount': '74', 'Title': 'Solve modulus with constraints for multiple equations', 'LastEditorUserId': '39', 'LastActivityDate': '2013-07-02T09:23:14.223', 'LastEditDate': '2013-07-02T09:22:39.470', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '13033', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '736', 'Tags': '<algorithms><computer-algebra>', 'CreationDate': '2013-07-01T12:22:48.720', 'Id': '13011'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m trying to understand how <a href="https://en.wikipedia.org/wiki/Auto_derivatives" rel="nofollow">Automatic Differentiation</a> (AD) works.<br>\nFor simple algebraic operation, I get the chain rule thing.\nBut, when the code contains conditional statement like</p>\n\n<pre><code>1: test_sign = x*y &lt; 0\n2: if test_sign :\n3:     biggest = max(x,y)\n4: else\n5:     smallest = min(x,y) \n</code></pre>\n\n<p>Does AD work?<br>\nIf it works, can you explain why?  </p>\n\n<p>When the code executes line 1, how does AD interpret the inequality <code>&lt;</code>?<br>\nLet\'s say, my AD is in foward mode, what is the differential for the <code>if then else</code> branch?  </p>\n\n<p>My understanding is that the above code use non differentiable function, in the sense that left and right derivatives are not the same. So, how does AD pick the good derivative?</p>\n\n<p>Also, if I\'m in forward mode, it is possible that line 5 is never visited. But when AD bumps <code>x</code> to <code>x+h</code>, line 5 should be evaluated. So the AD tape will incorrectly always differentiate line 3, instead of differentiation line 5.</p>\n', 'ViewCount': '62', 'Title': 'Does Automatic Differentiation handle conditional branches, if yes how?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-09T09:39:52.550', 'LastEditDate': '2013-09-09T09:39:52.550', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10018', 'Tags': '<numerical-analysis><computer-algebra>', 'CreationDate': '2013-09-07T06:26:33.620', 'Id': '14183'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What is the intuitive idea behind automatic differentiation?</p>\n\n<p>If I have a program which computes $f(x, y)=x^2+yx$, which steps lead to the program which computes the derivative $df/dx$ of f? </p>\n\n<pre><code>double f(double x, double y)\n{\n    double res = x*x;\n    double res2 = x*y;\n    double res3 = res + res2\n    return res3;\n}\n</code></pre>\n\n<p>If I read the <a href="https://en.wikipedia.org/wiki/Automatic_differentiation" rel="nofollow">corresponding Wikipedia entry</a> correctly I need nothing besides the chain rule, but I don\'t understand how this can be done in practice.</p>\n\n<p>My understanding so far is that I use a table of the derivatives of all involved basic functions, such as:</p>\n\n<ul>\n<li>$dx/dx=1$</li>\n<li>$dy/dx=0$</li>\n<li>$d(x*y)/dx=y$</li>\n<li>$d(x+y)=dx/dx+0$</li>\n<li>$d(x^2)/dx=2x$</li>\n</ul>\n\n<p>How do I get the final function from this?</p>\n\n<p>I would expect something like this: </p>\n\n<pre><code>double f(double x, double y, double* dx)\n{\n    *dx = 0;\n    double res = x*x;\n    ? *dx = 2*x ?\n    double res2 = x*y;\n    ? *dx = *dx ?\n    double res3 = res + res2\n    ? *dx = ??? ?\n\n    return res3;\n}\n</code></pre>\n\n<hr>\n\n<p><em>Edit:</em> I have found this video <a href="http://vimeo.com/6622658" rel="nofollow">"Beautiful Differentiation"</a> of a talk at the International Conference on Functional Programming (ICFP) 2009, by Marcom Wallace which explains the topic quite well.</p>\n', 'ViewCount': '68', 'Title': 'How does automatic differentiation work?', 'LastEditorUserId': '13187', 'LastActivityDate': '2014-01-29T16:07:12.470', 'LastEditDate': '2014-01-29T16:07:12.470', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '20048', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '13187', 'Tags': '<computer-algebra><computable-analysis>', 'CreationDate': '2014-01-28T21:32:43.563', 'Id': '20047'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '51', 'Title': 'An algorithm for making 2 carts meet', 'LastEditDate': '2014-02-17T08:37:43.170', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14724', 'FavoriteCount': '0', 'Body': '<p>Say I have 2 carts on an infinite railroad, each cart is initially under a lamp.\nThere are only 2 lamps, and they are at a fixed location, hence they don\'t change their location. The distance between them is D, but its not known.\nEach cart has a processing unit, both will execute a copy of the same program once the whole system is "initiated".</p>\n\n<p>The task: to write a code in pseudo-code, which will make the 2 carts collide.</p>\n\n<p>Restrictions:\nThe following commands can be used:</p>\n\n<blockquote>\n  <ol>\n  <li>move left/right *insert_number_here* steps //each movement takes 1 clock cycle, meaning that "move left C steps takes C clock cycles</li>\n  <li>if underlamp *put_instruction_here* //if the cart is under a lamp</li>\n  <li>goto *number_of_line_here*</li>\n  <li>stop</li>\n  </ol>\n</blockquote>\n\n<p>Variables, loops and not (!) are usable.</p>\n\n<p>the given solution is:</p>\n\n<blockquote>\n  <p>for i=1 to infinity:</p>\n  \n  <ol>\n  <li><p>go left i steps.</p></li>\n  <li><p>if underlamp stop.</p></li>\n  <li><p>go right i steps.</p></li>\n  </ol>\n</blockquote>\n\n<p>Now, I need a hint to help me make a simple improvement to the algorithm that is given in the trivial solution, so when the distance between the lamps is D, the total number of steps of both carts will be a first order polynomial function of D.</p>\n\n<p>My lecturer gave the following solution, and told me to improve the given code using a different idea.\nThis is his solution:</p>\n\n<blockquote>\n  <ol>\n  <li>go right.</li>\n  <li>go right.</li>\n  <li>go left.</li>\n  <li>if underlamp goto 6.</li>\n  <li>goto 1.</li>\n  <li>go right.</li>\n  <li>goto 6.</li>\n  </ol>\n</blockquote>\n\n<p>My improvement of the given code, but I\'m not sure that in this one, the total number of steps is a first order polynomial function of D.</p>\n\n<blockquote>\n  <p>for i=1 to infinity:</p>\n  \n  <ol>\n  <li><p>go right i steps.</p></li>\n  <li><p>if underlamp goto 4.</p></li>\n  <li><p>go left.</p></li>\n  </ol>\n  \n  <p>4.for j=1 to infinity:</p>\n  \n  <ol>\n  <li>go right j steps.</li>\n  </ol>\n</blockquote>\n', 'ClosedDate': '2014-02-24T16:45:28.990', 'Tags': '<algorithms><computer-algebra><pseudo-polynomial>', 'LastEditorUserId': '14724', 'LastActivityDate': '2014-02-17T19:03:35.367', 'CommentCount': '3', 'AcceptedAnswerId': '21720', 'CreationDate': '2014-02-16T20:29:05.613', 'Id': '21705'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Wolfram alpha <a href="http://www.wolframalpha.com/input/?i=Sum%5BBinomial%28j,2%29,j,1,n%5D" rel="nofollow">is able to compute</a> this sum:\n$$ \\sum_{j=1}^n \\binom{j}{2} = \\frac{1}{6}(n-1)n(n+1). $$</p>\n\n<p>How can Wolfram alpha do it? What kind of algorithm does it use?</p>\n', 'ViewCount': '27', 'Title': 'How does mathematical software evaluate symbolic sums?', 'LastEditorUserId': '683', 'LastActivityDate': '2014-04-29T02:08:46.810', 'LastEditDate': '2014-04-29T02:08:46.810', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5239', 'Tags': '<computer-algebra>', 'CreationDate': '2014-04-29T01:58:01.397', 'Id': '24205'}}