{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I would like to refute my hypothesis that all safety-critical software (that is, software where errors can have catastrophical consequences, either in terms of human lives or high material costs) is a real-time software (where tasks have timing constraints) by finding interesting counterexamples: systems without timing constraints which are safety-critical.</p>\n\n<p>I tried thinking of several examples, but they always seem somehow related to some physical system (e.g. flight control, radiation therapy, nuclear power) and therefore have some implicit timing constraints/deadlines. Even somewhat contrived "safety-critical" systems such as high-frequency trading are still real-time.</p>\n\n<p>Note: I am not interested in a very specific subset of the code which is timing independent, but on something more complete, consisting of a substantial part of a complete application.</p>\n', 'ViewCount': '90', 'Title': 'Is safety-critical software a subset of real-time software?', 'LastEditorUserId': '39', 'LastActivityDate': '2014-01-06T23:08:17.630', 'LastEditDate': '2014-01-06T23:08:17.630', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '19546', 'Score': '0', 'OwnerDisplayName': 'DanGar', 'PostTypeId': '1', 'Tags': '<programming-languages><software-engineering><real-time>', 'CreationDate': '2014-01-06T14:21:45.190', 'Id': '19545'}},