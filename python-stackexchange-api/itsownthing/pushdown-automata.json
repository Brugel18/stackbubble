970:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1455', 'Title': 'Are there inherently ambiguous and deterministic context-free languages?', 'LastEditDate': '2012-03-15T11:35:41.913', 'AnswerCount': '1', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '69', 'FavoriteCount': '1', 'Body': '<p>Let us call a context-free language deterministic if and only if it can be accepted by a deterministic push-down automaton, and nondeterministic otherwise.</p>\n\n<p>Let us call a context-free language inherently ambiguous if and only if all context-free grammars which generate the language are ambiguous, and unambiguous otherwise.</p>\n\n<p>An example of a deterministic, unambiguous language is the language: $$\\{a^{n}b^{n} \\in \\{a, b\\}^{*} | n \\ge 0\\}$$\nAn example of a nondeterministic, unambiguous language is the language: \n$$\\{w \\in \\{a, b\\}^{*} | w = w^{R}\\}$$</p>\n\n<p>From <a href="http://en.wikipedia.org/wiki/Ambiguous_grammar#Inherently_ambiguous_languages">Wikipedia</a>, an example of an inherently ambiguous context-free language is the following union of context-free languages, which must also be context-free: \n$$L = \\{a^{n}b^{m}c^{m}d^{n} \\in \\{a, b, c, d\\}^{*} | n, m \\ge 0\\} \\cup \\{a^{n}b^{n}c^{m}d^{m} \\in \\{a, b, c, d\\}^{*} | n, m \\ge 0\\}$$</p>\n\n<p>Now for the questions:</p>\n\n<ol>\n<li>Is it known whether there exists a deterministic, inherently ambiguous context-free language? If so, is there an (easy) example?</li>\n<li>Is it known whether there exists a nondeterministic, inherently ambiguous context-free language? If so, is there an (easy) example?</li>\n</ol>\n\n<p>Clearly, since an inherently ambiguous context-free language exists ($L$ is an example), the answer to one of these questions is easy, if it is known whether $L$ is deterministic or nondeterministic. I also assume that it\'s true that if there\'s a deterministic one, there\'s bound to be a nondeterministic one as well... but I\'ve been surprised before. References are appreciated, and apologies in advance if this is a well-known, celebrated result (in which case, I\'m completely unaware of it).</p>\n', 'Tags': '<formal-languages><automata><formal-grammars><pushdown-automata>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-15T11:35:41.913', 'CommentCount': '0', 'AcceptedAnswerId': '111', 'CreationDate': '2012-03-07T20:56:08.960', 'Id': '109'},971:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2944', 'Title': 'Are Turing machines more powerful than pushdown automata?', 'LastEditDate': '2012-03-25T15:41:43.987', 'AnswerCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '51', 'FavoriteCount': '1', 'Body': "<p>I've came up with a result while reading some automata books, that Turing machines appear to be more powerful than pushdown automata. Since the tape of a Turing machine can always be made to behave like a stack, it'd seem that we can actually claim that TMs are more powerful. </p>\n\n<p>Is this true?</p>\n", 'Tags': '<formal-languages><computability><automata><turing-machines><pushdown-automata>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-01-16T18:31:50.493', 'CommentCount': '4', 'AcceptedAnswerId': '670', 'CreationDate': '2012-03-22T20:00:29.897', 'Id': '669'},972:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Note that by "two-way pushdown automaton", I mean a pushdown automaton that can move its reading head both ways on the input tape.</p>\n\n<p>I recently had the question of determining the computational power of two-way PDAs in the Chomsky hierarchy. I don\'t entirely understand two-way PDAs, but I can see how with the ability to read in both directions on the input, it could handle languages of the form $L=\\{0^n 1^n 2^n\\}$. I can\'t say that for sure, but it seems that would make it powerful enough to least handle context-sensitive languages. </p>\n\n<p>This is all a guess because I don\'t know exactly how they work. Can someone explain the process of how a two-way PDA operates, maybe even on my example?</p>\n\n<p>UPDATE: </p>\n\n<blockquote>\n  <p>The model is a generalization of a pushdown automaton in that two-way motion is allowed on the input tape which is assumed to have endmarkers. </p>\n</blockquote>\n', 'ViewCount': '1078', 'Title': 'How does a two-way pushdown automaton work?', 'LastEditorUserId': '69', 'LastActivityDate': '2012-04-02T15:40:37.177', 'LastEditDate': '2012-04-02T15:40:37.177', 'AnswerCount': '1', 'CommentCount': '12', 'AcceptedAnswerId': '705', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '596', 'Tags': '<formal-languages><computability><automata><pushdown-automata>', 'CreationDate': '2012-03-23T15:39:20.283', 'Id': '699'},973:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m am stuck solving the next exercise:</p>\n\n<p>Argue that if $L$ is context-free and $R$ is regular, then $L / R = \\{ w \\mid \\exists x \\in R \\;\\text{s.t}\\; wx \\in L\\} $ (i.e. the <a href="https://en.wikipedia.org/wiki/Right_quotient" rel="nofollow">right quotient</a>) is context-free.</p>\n\n<p>I know that there should exist a PDA that accepts $L$ and a DFA that accepts $R$. I\'m now trying to combine these automata to a PDA that accepts the right quotient. If I can build that I proved that $L/R$ is context-free. But I\'m stuck building this PDA.</p>\n\n<p>This is how far I\'ve made it:   </p>\n\n<blockquote>\n  <p>In the combined PDA the states are a cartesian product of the states of the seperate automata. And the edges are the edges of the DFA but only the ones for which in the future a final state of the original PDA of L can be reached. But don\'t know how to write it down formally.</p>\n</blockquote>\n', 'ViewCount': '637', 'Title': 'If $L$ is context-free and $R$ is regular, then $L / R$ is context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-17T23:12:15.793', 'LastEditDate': '2012-05-17T19:38:52.640', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1526', 'Tags': '<formal-languages><context-free><finite-automata><closure-properties><pushdown-automata>', 'CreationDate': '2012-05-17T16:19:42.050', 'FavoriteCount': '1', 'Id': '1886'},974:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to convert a user entered regular expression into an NFA so that I can then run the NFA against a string for matching purposes. What is the minimum machine that can be used to parse regular expresssions? </p>\n\n<p>I assume it must be a push down automaton because the presense of brackets means the need to count and a DFA/NFA cannot perform arbitrary counting. Is this assumption correct? For example, the expression a(bc*)d would require a PDA so that the sub-expression in brackets is handled correctly.</p>\n', 'ViewCount': '549', 'Title': 'Does the language of Regular Expressions need a push down automata to parse it?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-22T07:41:16.970', 'LastEditDate': '2012-05-20T12:32:09.750', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1434', 'Tags': '<formal-languages><parsers><regular-expressions><pushdown-automata>', 'CreationDate': '2012-05-20T03:26:18.503', 'FavoriteCount': '3', 'Id': '1939'},975:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '471', 'Title': 'Decide whether a context-free languages can be accepted by a deterministic pushdown automaton', 'LastEditDate': '2012-05-21T11:16:20.547', 'AnswerCount': '1', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '1577', 'FavoriteCount': '2', 'Body': '<p>Given a context-free grammar G, there exists a Nondeterministic Pushdown Automaton N that accepts exactly the language G accepts. (and visa versa)</p>\n\n<p>There <strong>may</strong> also exist a Deterministic Pushdown Automaton D that accepts exactly the language G accepts too.  It depends on the grammar.</p>\n\n<p>By what algorithm on the productions of G can we determine if D exists?</p>\n', 'Tags': '<automata><context-free><pushdown-automata>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-23T13:37:24.503', 'CommentCount': '1', 'AcceptedAnswerId': '1973', 'CreationDate': '2012-05-21T09:30:46.410', 'Id': '1972'},976:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In the context of our investigation of <a href="http://cs.stackexchange.com/questions/110/determining-capabilities-of-a-min-heap-or-other-exotic-state-machines">heap automata</a>, I would like to prove that a particular variant can not accept non-context-sensitive languages. As we have no equivalent grammar model, I need a proof that uses only automata; therefore, I have to show that heap automata can be simulated by <a href="https://en.wikipedia.org/wiki/Linear_bounded_automaton">LBA</a>s (or an equivalent model).</p>\n\n<p>I expect the proof to work similarly to showing that pushdown automata accept a subset the context-sensitive languages. However, all proofs I know work by</p>\n\n<ul>\n<li>using grammars -- here the fact is obvious by definition -- or</li>\n<li>are unconvinvingly vague (e.g. <a href="http://www.cs.uky.edu/~lewis/texts/theory/automata/lb-auto.pdf">here</a>).</li>\n</ul>\n\n<p>My problem is that a PDA (resp. HA) can contain cycles of $\\varepsilon$-transitions that may write symbols to the stack (resp. heap). An LBA can not simulate arbitrary iterations of such loops. From the Chomsky hierarchy obtained with grammars, we know that </p>\n\n<ol>\n<li>every context-free language has an $\\varepsilon$-cycle-free PDA or</li>\n<li>the simulating LBA can prevent iterating $\\varepsilon$-cycles too often.</li>\n</ol>\n\n<p>Intuitively, this is clear: such cycles write symbols independently of the input, therefore the stack (heap) content does only hold an amount of information linear in the length of the cycle (disregarding overlapping cycles for now). Also, you don\'t have a way to get rid of the stuff again (if you need to) other than using another $\\varepsilon$-cycle. In essence, such cycles do not contribute to dealing with the input if iterated multiple times, so they are not necessary.</p>\n\n<p>How can this argument be put rigorously/formally, especially considering overlapping $\\varepsilon$-cycles?</p>\n', 'ViewCount': '144', 'Title': u'How to prove that \u03b5-loops are not necessary in PDAs?', 'LastActivityDate': '2012-06-12T13:47:52.250', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<automata><pushdown-automata>', 'CreationDate': '2012-06-12T13:47:52.250', 'Id': '2338'},977:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In my class we used a Pushdown Automata to Context Free Grammar conversion algorithm that produces a lot extraneous states.</p>\n\n<p>For example, for two transitions, I am getting the following productions</p>\n\n<blockquote>\n  <p>$$\\begin{gather*}\n  \\delta(q_0,1,Z) = (q_0,XZ) \\\\\n  {}[q_0,Z,q_0] \\to 1[q_0,X,q_0][q_0,Z,q_0] \\\\\n  {}[q_0,Z,q_0] \\to 1[q_0,X,q_1][q_1,Z,q_0] \\\\\n  {}[q_0,Z,q_1] \\to 1[q_0,X,q_0][q_0,Z,q_1] \\\\\n  {}[q_0,Z,q_1] \\to 1[q_0,X,q_1][q_1,Z,q_1] \\\\\n\\end{gather*}$$</p>\n  \n  <p>$$ \\begin{gather*}\n  \\delta(q_1,0,Z) = (q_0,Z) \\\\\n  {}[q_1,Z,q_0 ] \\to 0[q_0,Z,q_0] \\\\\n  {}[q_1,Z,q_1 ] \\to 0[q_0,Z,q_1] \\\\\n\\end{gather*}$$</p>\n</blockquote>\n\n<p>How do I decide which state makes it into final production, and which one will be excluded ?</p>\n', 'ViewCount': '304', 'Title': 'Eliminating useless productions resulting from PDA to CFG converison', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-01T18:57:35.320', 'LastEditDate': '2012-06-27T12:51:15.767', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '4834', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1758', 'Tags': '<automata><formal-grammars><context-free><pushdown-automata>', 'CreationDate': '2012-06-26T20:28:39.280', 'Id': '2503'},978:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '903', 'Title': 'Context-free grammar to a pushdown automaton', 'LastEditDate': '2012-07-29T14:15:47.920', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2125', 'FavoriteCount': '1', 'Body': "<p>I'm trying to convert a context free grammar to a pushdown automaton (PDA); I'm not sure how I'm gonna get an answer or show you my progress as it's a diagram... Anyway this is the last problem I have on a homework that's due later today, so I'd appreciate some kind of help, even if it's just an explanation of the correct answers diagram. I need a PDA corresponding to this CFG:</p>\n\n<p>$$S \\rightarrow aSa | bSb | B$$\n$$B \\rightarrow bB | \\epsilon$$</p>\n\n<p>I know it will have to push X every time 'a' is read before a 'b', and pop X every time 'a' is read after a 'b'. But I'm not sure how to arrange the PDA in order to tell which a's came after b's. Also, I'm unsure of how to deal with the b's in terms of the stack, as there can be as many in the middle of the string as you want. Help appreciated.</p>\n\n<p>Thanks, Pachun</p>\n", 'Tags': '<formal-grammars><context-free><pushdown-automata>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-07-29T14:15:47.920', 'CommentCount': '2', 'AcceptedAnswerId': '2736', 'CreationDate': '2012-07-13T18:08:44.950', 'Id': '2735'},979:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Thw <a href="http://en.wikipedia.org/wiki/Pushdown_automaton" rel="nofollow">Wikipedia article on Pushdown automata</a> doesn\'t explain what the receiving state is for the generated PDA it just states that there is but one state.   </p>\n', 'ViewCount': '473', 'Title': 'When generating a PDA from a CFG do I have a receiving state?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-05T18:28:35.937', 'LastEditDate': '2012-08-16T07:19:01.497', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '0', 'OwnerDisplayName': 'user10392', 'PostTypeId': '1', 'Tags': '<terminology><automata><pushdown-automata>', 'CreationDate': '2012-08-15T12:40:36.717', 'Id': '3205'},9710:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m reviewing for my midterm and wanted to post this to see if anyone can spot any errors. Im supposed to make a PDA that recognizes this CFG:</p>\n\n<p>$\\qquad\\begin{align}\n  S &amp;\\to R1R1R1 \\\\\n  R &amp;\\to 0R \\mid 1R \\mid \\varepsilon\n\\end{align}$</p>\n\n<p>Here is my solution; I\'m aware that I forgot to draw the second circle around my accepting state.</p>\n\n<p><img src="http://i.stack.imgur.com/vNLh0.png" alt="enter image description here"></p>\n', 'ViewCount': '447', 'Title': 'Converting a context free grammar to a PDA -- is my solution correct?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-22T19:14:08.240', 'LastEditDate': '2012-09-21T21:12:00.730', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'jfisk', 'PostTypeId': '1', 'Tags': '<formal-languages><automata><context-free><pushdown-automata>', 'CreationDate': '2011-11-05T19:34:40.697', 'Id': '4654'},9711:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Let the input alphabet be $\\Sigma = \\{a,b,c\\}$ and <em>L</em> be the language of all words in which all of the <em>a</em>\u2019s come before all of the <em>b</em>\u2019s and there are the same number of <em>a</em>\u2019s as <em>b</em>\'s and arbitrarily many <em>c</em>\u2019s that can be in front, behind or among the <em>a</em>\u2019s and <em>b</em>\u2019s. \nSome words in <em>L</em> are: <em>abc ccacaabcccbccbc</em></p>\n\n<p>I know that the language is not regular but how can I find a deterministic PDA (in a drawing fashion) that accepts <em>L</em>?</p>\n\n<p>Edit: So far I\'ve ended up with this which takes care of having the same number of a\'s as b\'s and all a\'s come before all b\'s. However I cannot figure out how to account for the arbitrary amount of c\'s in-between b\'s. Any ideas? <img src="http://i.stack.imgur.com/Daoc6.png" alt="enter image description here"></p>\n\n<p>Sorry for the horrible drawing in advance.</p>\n', 'ViewCount': '375', 'LastEditorDisplayName': 'user3115', 'Title': 'Constructing deterministic PDA for not regular language', 'LastActivityDate': '2012-10-23T08:29:47.877', 'LastEditDate': '2012-10-23T06:42:33.347', 'AnswerCount': '3', 'CommentCount': '5', 'AcceptedAnswerId': '6240', 'Score': '2', 'OwnerDisplayName': 'user3115', 'PostTypeId': '1', 'Tags': '<automata><pushdown-automata>', 'CreationDate': '2012-10-22T19:53:24.143', 'Id': '6239'},9712:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '533', 'Title': 'How do I show that whether a PDA accepts some string $\\{ w!w \\mid w \\in \\{ 0, 1 \\}^*\\}$ is undecidable?', 'LastEditDate': '2012-11-12T11:36:31.860', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2860', 'FavoriteCount': '1', 'Body': "<p>How do I show that the problem of deciding whether a PDA accepts some string of the form $\\{ w!w \\mid w \\in \\{ 0, 1 \\}^*\\}$ is undecidable?</p>\n\n<p>I have tried to reduce this problem to another undecidable one such as whether two context-free grammars accept the same language. However, I'm not sure how to use it as a subroutine.</p>\n", 'Tags': '<formal-languages><automata><context-free><undecidability><pushdown-automata>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-23T22:02:29.330', 'CommentCount': '0', 'AcceptedAnswerId': '6630', 'CreationDate': '2012-11-12T05:00:51.627', 'Id': '6626'},9713:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I gotta make a CFG and PDA for the grammar that has perfectly nested parentheses and brackets.</p>\n\n<p>$\\qquad\\begin{align}\n S &amp;\\to [S] \\\\\n S &amp;\\to (S) \\\\\n S &amp;\\to SS \\\\\n S &amp;\\to \\varepsilon\n\\end{align}$</p>\n\n<p>Not sure if this is correct, or how to make the PDA from it?</p>\n', 'ViewCount': '219', 'Title': 'CFG and PDA for the grammar that has perfectly nested parentheses and brackets', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-19T18:12:47.330', 'LastEditDate': '2012-11-19T18:12:47.330', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4632', 'Tags': '<formal-languages><automata><formal-grammars><context-free><pushdown-automata>', 'CreationDate': '2012-11-17T18:39:11.147', 'Id': '6719'},9714:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to figure out how a pushdown automata (PDA), which we know uses a stack (LIFO) can be simulated by a queue (FIFO). I understand that in a regular PDA, we only have access to the top most element which can be popped. When we push something, it goes to the top of the stack. </p>\n\n<p>In a queue, as I understand, elements get "pushed" to the top, but pop from the bottom. Thus, first in first out. </p>\n\n<p>In a stack (LIFO) PDA, let\'s say we push \'a\'. It\'s at the top of the stack, and when we pop, we pop \'a\' since it is at the top. </p>\n\n<p>In a queue (FIFO) PDA, when we push \'a\', it is at the top, but when we pop, it will be from the bottom of the queue and thus it will not be \'a\' (assuming the size is greater than 2).</p>\n\n<p>So how can we simulate a regular PDA which uses a stack, with a FIFO (queue) PDA?</p>\n', 'ViewCount': '401', 'Title': 'How can one simulate a PDA with a FIFO queue PDA?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-29T16:46:40.480', 'LastEditDate': '2012-11-29T16:46:40.480', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '7004', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4767', 'Tags': '<automata><pushdown-automata><machine-models>', 'CreationDate': '2012-11-29T00:21:40.543', 'Id': '7003'},9715:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am looking for a proof for the following problem:</p>\n\n<blockquote>\n  <p>For languages $L$ and $R$, if $L$ is <a href="http://en.wikipedia.org/wiki/Deterministic_context-free_language" rel="nofollow">deterministic context-free</a>\n  and $R$ is regular, then $LR$ is a deterministic context-free\n  language.</p>\n</blockquote>\n\n<p>Note: $RL$ may not satisfy this condition, e.g. if $L=\\{wcw^R\\mid w\\in (a|b)^*\\}$, and $R=\\{a\\}^*$.</p>\n', 'ViewCount': '316', 'Title': 'Deterministic context-free languages are closed under regular right-product', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-30T20:19:21.433', 'LastEditDate': '2012-11-30T20:19:21.433', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4486', 'Tags': '<formal-languages><context-free><closure-properties><pushdown-automata>', 'CreationDate': '2012-11-30T10:53:41.263', 'Id': '7041'},9716:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1168', 'Title': 'Construct a PDA for the complement of $a^nb^nc^n$', 'LastEditDate': '2013-11-20T12:31:53.400', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4886', 'FavoriteCount': '1', 'Body': "<p>I am wondering if this is even possible, since $\\{a^n b^n c^n  \\mid n \\geq 0\\} \\not\\in \\mathrm{CFL}$. Therefore a PDA that can distinguish a word $w\\in\\{a^n b^n c^n  \\mid n \\geq 0\\}$ from the rest of $\\{a^*b^*c^*\\}$ might as well accept it, which sounds contradictory to me.</p>\n\n<p>I guess I need to take advantage of the non-deterministic nature of PDAs but I'm out of ideas. If you could offer some advice I would very much appreciate it.</p>\n", 'Tags': '<formal-languages><automata><context-free><pushdown-automata>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-20T12:31:53.400', 'CommentCount': '3', 'AcceptedAnswerId': '7191', 'CreationDate': '2012-12-05T18:20:04.433', 'Id': '7190'},9717:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I can understand that they are not closed under concatenation because without non determinism, PDA cannot decide whether to loop in the first PDA or jump to the next one.\nBut can someone prove this with an example. Also prove that the resulting language cannot be accepted by DPDA</p>\n', 'ViewCount': '324', 'Title': 'why are deterministic PDAs not closed under concatenation?', 'LastActivityDate': '2013-06-04T15:56:26.980', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '7326', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4980', 'Tags': '<automata><pushdown-automata>', 'CreationDate': '2012-12-11T12:49:25.547', 'Id': '7325'},9718:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I need help with the following question:</p>\n\n<p>Order the following formalisms according to their expressive power:\nplacing A before B means that any language definable by A is definable\nby B. Also state which, if any, of them are equivalent.</p>\n\n<pre><code>\u2022 Turing Machines (TM)\n\u2022 Regular expressions (reg.exp.)\n\u2022 Turing Machines with multiple tapes (TM+)\n\u2022 Pushdown Automata (PDA)\n\u2022 Nondeterministic Finite Automata with \u01eb-transitions (NFA\u01eb)\n\u2022 Nondeterministic Finite Automata (NFA)\n\u2022 LR(1) grammars\n\u2022 Nondeterministic Turing Machines (NTM)\n\u2022 Deterministic Pushdown Automata (DPDA)\n\u2022 Deterministic Finite Automata (DFA)\n\u2022 Context-free Grammars (CFG)\n</code></pre>\n\n<p>Is this the correct answer ? I have a exam next week and need to know If my answer is correct.</p>\n\n<pre><code>NFAe=NFA=DFA=Reg.exp, LR(1)-Grammar=DPDA, CFG=PDA, TM=NTM=TM+\n</code></pre>\n\n<p>Thanks in advance </p>\n', 'ViewCount': '173', 'Title': 'Formal Languages - Expressive power of Formalisms', 'LastActivityDate': '2013-01-01T22:35:50.987', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7683', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><regular-languages><context-free><regular-expressions><pushdown-automata>', 'CreationDate': '2013-01-01T22:22:24.913', 'Id': '7682'},9719:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1416', 'Title': 'Explaining why a grammar is not LL(1)', 'LastEditDate': '2014-01-04T15:36:22.460', 'AnswerCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'FavoriteCount': '1', 'Body': u'<p>I need some help with explaining why a grammar is not LL(1).</p>\n\n<p>Let us take the following grammar:</p>\n\n<p>$$\n\\begin{align}\nS \\rightarrow &amp; aB \\mid bA \\mid \\varepsilon \\\\\nA \\rightarrow &amp; aS \\mid bAA \\\\\nB \\rightarrow &amp; b \\\\\n\\end{align}\n$$</p>\n\n<p>This is my attempt:</p>\n\n<p>For the grammar to be LL(1) it is a necessary condition that for any strings $c_1\u03b3$ and $c_2\u03b2$, derivable from $S \\rightarrow aB$ and $A \\rightarrow aS$ respectively, we have $c_1 \\ne c_2$. </p>\n\n<p>But, $S \\rightarrow aB$ and $A \\rightarrow aS$, hence $c_1 = c_2$ and the grammar is not LL(1).</p>\n\n<p>Is my reasoning right?</p>\n\n<p>Thanks in advance.</p>\n', 'Tags': '<formal-languages><regular-languages><context-free><pushdown-automata>', 'LastEditorUserId': '10637', 'LastActivityDate': '2014-01-04T15:36:22.460', 'CommentCount': '1', 'AcceptedAnswerId': '7789', 'CreationDate': '2013-01-04T16:14:19.883', 'Id': '7761'},9720:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am learning about context free languages. </p>\n\n<p>I understand how $\\{a^n b^n c^n | n \\ge 0\\}$ can be shown to be not context free using the pumping lemma for CFL's.</p>\n\n<p>Intuitively however it seems that a pushdown automata to recognize $\\{a^n b^n c^n | n \\ge 0\\}$ can be constructed. This PDA would initially push two $a$'s into its stack whenever it sees an $a$ in the input. It would change state when it first encounters a $b$ and pop a single $a$. It would continue to pop $a$'s for every b in the input until it encounters a $c$. It would again change state and pop single $a$'s for every c encountered. If the stack is empty at the end of the input the language is recognized as $\\{a^n b^n c^n | n \\ge 0\\}$.</p>\n\n<p>There must be something I am overlooking whilst constructing the PDA as a language is context free if its has a PDA recognizing it. Please point out my mistake.</p>\n", 'ViewCount': '693', 'Title': 'Push down automata for $\\{a^n b^n c^n | n \\ge 0\\}$', 'LastActivityDate': '2013-01-17T14:04:47.477', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '8990', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2980', 'Tags': '<context-free><pushdown-automata><pumping-lemma>', 'CreationDate': '2013-01-17T13:57:17.883', 'Id': '8989'},9721:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to understand the approach to constructing a PDA which accepts the language { $a^i b^j c^k \\mid i,j,k \\geq0, i+2k = j$ }</p>\n", 'ViewCount': '706', 'Title': 'Constructing PDA to accept language { $a^i b^j c^k \\mid i,j,k \\geq0, i+2k = j$ }', 'LastEditorUserId': '6980', 'LastActivityDate': '2013-03-06T22:51:48.473', 'LastEditDate': '2013-03-06T15:26:08.280', 'AnswerCount': '3', 'CommentCount': '6', 'AcceptedAnswerId': '10337', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6980', 'Tags': '<pushdown-automata>', 'CreationDate': '2013-03-06T14:58:56.853', 'Id': '10319'},9722:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So I have been given the task of creating an PDA that recognises the language </p>\n\n<p>$\\{a^{2n} b^{3n} \\mid n = 0,1,2,\\dots\\}$.</p>\n\n<p>Am I right in thinking that it needs to have at least 3 times number of $b$'s than $a$'s? </p>\n\n<p>So for example:\n$aabbb$ would be accepted\n$aaabb$ would NOT be accepted\nHowever, how do I show that using JFlap because I am unfamiliar with the software?</p>\n", 'ViewCount': '687', 'Title': 'Constructing PDA for $a^{2n} b^{3n}$', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-11T21:22:30.850', 'LastEditDate': '2013-03-11T07:20:49.087', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '10433', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7216', 'Tags': '<formal-languages><pushdown-automata>', 'CreationDate': '2013-03-10T14:50:24.700', 'Id': '10423'},9723:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '90', 'Title': 'Proving that a specific language is a CFL, and that another language is not a CFL', 'LastEditDate': '2013-03-11T02:12:00.413', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7220', 'FavoriteCount': '0', 'Body': "<p>I have two languages $C_1$ and $C_2. \\left(\\Sigma=\\{0,1\\}\\right)$:</p>\n\n<p>$C_1=\\left\\{xyz\\mid x,z \\in \\Sigma^*, y \\in \\Sigma^*1\\Sigma^*, \\text{ where } |x|=|z| \\geq |y|\\right\\}$, and $C_2=\\left\\{xyz\\mid x,z \\in \\Sigma^*, y \\in \\Sigma^*1\\Sigma^*1\\Sigma^*, \\text{ where } |x|=|z| \\geq |y|\\right\\}$</p>\n\n<p>I want to show that $C_1$ is a CFL, while $C_2$ is not a CFL.  I'm trying to create a grammar / pushdown automata that accepts $L(C_1)$, but the $|x|=|z| \\geq |y|$ part is throwing me off.  I plan on using the pumping lemma for $C_2$, but I'm not sure which string to pump.  </p>\n", 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-03-11T05:34:59.417', 'CommentCount': '4', 'AcceptedAnswerId': '10440', 'CreationDate': '2013-03-10T21:21:27.903', 'Id': '10437'},9724:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let \n$A= \\{L \\mid L \\;\\text{is one-counter and \\(\\bar{L}\\) is also one-counter} \\}$</p>\n\n<p>Clearly, $\\text{Deterministic one-counter} \\subseteq A$</p>\n\n<p>Is it the case that $ A = \\text{Deterministic one-counter}$?</p>\n\n<p>I know that for context-free languages the analogue is not the case. For example,\nlet $P =\\{ ww^r\\}$.\nThen both $P$ and $\\bar{P}$ are context-free but $P$ is not deterministic.\nHence $A$ defines a (strict) subset of the context-free languages.</p>\n\n<p>The question is: can we construct a similar one-counter example for which the same holds?</p>\n', 'ViewCount': '143', 'Title': 'Is there a strictly non-deterministic one-counter language whose complement is one-counter?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-18T15:27:47.923', 'LastEditDate': '2013-03-20T10:50:55.130', 'AnswerCount': '1', 'CommentCount': '9', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4980', 'Tags': '<formal-languages><automata><closure-properties><pushdown-automata>', 'CreationDate': '2013-03-19T15:44:35.443', 'Id': '10621'},9725:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '160', 'Title': 'Is $L= \\{ a^ib^j \\mid j\\neq i \\ and \\ j\\neq2i \\ \\} $ context free?', 'LastEditDate': '2013-03-20T05:31:10.373', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4980', 'FavoriteCount': '1', 'Body': "<p>$L = \\{ a^ib^j \\mid j\\neq i \\ and \\ j\\neq2i \\ \\} $</p>\n\n<p>Is this language a context free language?\nIf yes give a PDA. If no, give a proof.</p>\n\n<p>The pumping lemma for context free languages doesn't seem to work here.</p>\n\n<p>Let $p&gt;1$ be the pumping length. Let the string be divided into five parts according to pumping lemma as $w = uvxyz$.</p>\n\n<p>For any string of the form $a^ib^j \\ s.t.$: </p>\n\n<ol>\n<li><p>$ j\\lt i-1$ choose $v=a, \\ x=\\epsilon, \\ y=\\epsilon$</p></li>\n<li><p>$ j\\gt 2i+1$ choose $v=\\epsilon, \\ x=\\epsilon, \\ y=b$</p></li>\n<li><p>$ j = i-1$ choose $v=a, \\ x=\\epsilon, \\ y=b$</p></li>\n<li><p>$ j =  2i+1$ choose $v=a, \\ x=\\epsilon, \\ y=b$</p></li>\n<li><p>$ j\\gt i,\\ j\\lt 2i $ choose $v=a, \\ x=\\epsilon, \\ y=b$</p></li>\n</ol>\n", 'Tags': '<formal-languages><context-free><pushdown-automata>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-03-20T05:31:10.373', 'CommentCount': '1', 'AcceptedAnswerId': '10638', 'CreationDate': '2013-03-20T04:55:41.533', 'Id': '10635'},9726:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to give a PDA and CFG for a language that contains all binary strings that start and end with the same symbol. I\'ve created the CFG with no problem, but I\'m stuck with the PDA and don\'t quite know how to accomplish it.</p>\n\n<p>The best I can figure is that I need to use non-determinism, but I don\'t quite know how to apply it in this circumstance.</p>\n\n<p>Here\'s the CFG that I came up with:</p>\n\n<p>\\begin{align*}\nA &amp;\\to 1B1 \\mid 0B0 \\mid \\epsilon\\\\\nB &amp;\\to 1B \\mid 0B\\mid \\epsilon\n\\end{align*}</p>\n\n<p>The PDA, insofar as I managed to come up with:</p>\n\n<p><img src="http://i.stack.imgur.com/sjkIy.jpg" alt="enter image description here"></p>\n\n<p>The notation here, just in case it\'s not universal: $a,b \\to c$ means "When you see symbol $a$, pop symbol $b$ off the stack and push symbol $c$ onto the stack."</p>\n\n<p>Any pointers on how to accomplish this?</p>\n', 'ViewCount': '426', 'Title': 'Give CFG and PDA for the words that start and end with the same symbol', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-04T12:02:49.387', 'LastEditDate': '2013-04-04T06:41:56.223', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11006', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6569', 'Tags': '<formal-languages><context-free><pushdown-automata>', 'CreationDate': '2013-04-04T01:15:46.140', 'Id': '11004'},9727:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an exercise in my book to come up with a pushdown automaton accepting a language.</p>\n\n<p>The exercise is to come up with a state diagram for the PDA accepting the language of all odd-length strings over $\\{a, b\\}$ with middle symbol $a$.</p>\n\n<p>Here\'s what I have so far...</p>\n\n<p><img src="http://i.stack.imgur.com/mNXvh.png" alt="enter image description here"></p>\n\n<p>I wasn\'t sure how many states I needed, but I was thinking 3. State $q_0$ for pushing symbols onto the stack until reaching the middle symbol, $q_1$ for after middle symbol is found, and state $q_2$ the accepting state. I think in $q_1$ I need to cancel out input symbols from the stack with the input. I don\'t know how to account for the string being odd length, also.</p>\n\n<p>Is there a smart, systematic way to do this?</p>\n', 'ViewCount': '446', 'Title': 'How to generate a pushdown automata for accepting a language?', 'LastActivityDate': '2013-04-04T19:13:35.593', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11028', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4689', 'Tags': '<formal-languages><automata><pushdown-automata>', 'CreationDate': '2013-04-04T18:48:13.270', 'Id': '11023'},9728:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I just learned PDAs in class today, but am having problems understanding the syntax of the transition function. Could someone please explain to me the meaning of this syntax:</p>\n\n<p>$\\delta(q, \\lambda, S) = \\{(q, aaB), (q, bbA)\\}$</p>\n\n<p>This is one of the rules for my language.  I am unsure of what the meanings of this syntax exactly is.</p>\n', 'ViewCount': '185', 'Title': 'Syntax of a Pushdown Automata transition function', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-10T08:42:45.443', 'LastEditDate': '2013-04-10T08:42:45.443', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11172', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7172', 'Tags': '<terminology><automata><pushdown-automata>', 'CreationDate': '2013-04-09T21:30:06.050', 'Id': '11171'},9729:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1883', 'Title': 'Convert CFG to PDA', 'LastEditDate': '2013-04-10T08:39:30.413', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7405', 'FavoriteCount': '2', 'Body': '<p>Is there any set of rules or methods to convert any context free grammar to a push down automata? </p>\n\n<p>I already found <a href="http://infolab.stanford.edu/~ullman/ialc/spr10/slides/pda2.pdf" rel="nofollow">some slides online</a> but I wasn\'t able to understand them.</p>\n\n<p>In slide 10 he speaks about some rules could anyone explain that?</p>\n', 'Tags': '<context-free><formal-grammars><pushdown-automata><simulation>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-10T08:39:30.413', 'CommentCount': '2', 'AcceptedAnswerId': '11186', 'CreationDate': '2013-04-10T03:00:30.087', 'Id': '11182'},9730:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How would I go about using Cartesian construction to find the intersection between a PDA and a DFA?</p>\n\n<p>Is there another term for Cartesian construction? Would it be similar to the procedure for finding the intersection/union of 2 DFAs?</p>\n', 'ViewCount': '175', 'Title': 'Cartesian construction of PDA and DFA', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-10T20:15:03.627', 'LastEditDate': '2013-04-10T20:15:03.627', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6667', 'Tags': '<automata><finite-automata><pushdown-automata>', 'CreationDate': '2013-04-10T18:43:39.247', 'Id': '11201'},9731:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is the language $ L = \\{0^n 1^m \\mid n \\text{ and } m \\text{ are co-prime}\\}$ context-free ?</p>\n\n<p>I guess that it's not context free because it seems too complicated for a PDA to decided whether 2 numbers are co-prime or not.</p>\n\n<p>I tried using the pumping lemma to no avail.</p>\n\n<p>Any help would be gladly appreciated.</p>\n\n<p>Edit:</p>\n\n<p>Here is one of my failed attempts with the pumping lemma:</p>\n\n<p>Let $N$ be a constant. Take a prime $p$ such that $p &gt; N!$ and then take the word $z = 0^p 1^{p+N!} \\in L$. Let $ z = uvwxy $ be a decomposition of $z$ satisfying the conditions in the pumping lemma.</p>\n\n<p>If $ vx $ contains only zeros then $ |vx| = k $ is an integer between $1$ and $N$. Define $m$ as $m = N!/k$. For $i = m+1$ the word $ uv^iwx^iy = 0^{p+N!}1^{p+N!} \\not\\in L $</p>\n\n<p>However, I've failed to find such an integer $i$ for the other decomposition cases.</p>\n", 'ViewCount': '283', 'Title': 'Is the language $\\{0^n 1^m \\mid n \\text{ and } m \\text{ are co-prime}\\}$ context-free?', 'LastEditorUserId': '7068', 'LastActivityDate': '2013-04-12T20:05:43.350', 'LastEditDate': '2013-04-12T10:49:52.740', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-04-11T18:04:33.373', 'FavoriteCount': '3', 'Id': '11237'},9732:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I understand that any CFL can be accepted by a PDA by final state or empty store but I have been rather stumped by this question.\nThe question states that the PDA has at most 2 states. Clearly 1 will be the start state while the other will be the final state (they cannot be the same since otherwise the empty string will be accepted). My initial idea was to take a grammar for $L$ in GNF (Greibach Normal Form) (refer to Ran's answer below for details on how a CFG in GNF can be converted to a PDA having 1 state and no $\\epsilon$-transitions that accepts by empty store) and then give a PDA for this that meets the specification. But the problem is that I cannot find a way to do this without having an $\\epsilon$-move at the final step when I have to move to the final state after the stack is empty. Any help would be greatly appreciated.</p>\n\n<p>The PDA can be specified as $M = (K, \\Sigma,\\delta, q_0, Z_0, \\{q_f\\} )$ where\n$q_0$ is the initial state, $Z_0$ is the initial stack symbol and $q_f$ is the final state. The exact question is</p>\n\n<blockquote>\n  <p>Show that if $L$ is a CFL and $\\epsilon$ does not belong to $L$, then there is a PDA $M$ accepting $L$ by final state such that $M$ has at most 2 states and makes no $\\epsilon$-moves.</p>\n</blockquote>\n\n<p>Thus, the PDA should</p>\n\n<ol>\n<li>accept by final state</li>\n<li>have at most 2 states</li>\n<li>make no $\\epsilon$-moves</li>\n</ol>\n", 'ViewCount': '357', 'Title': 'Designing a PDA w/o $\\epsilon$-moves and $\\leq 2$ states to accept an $\\epsilon$-free CFL by final state', 'LastEditorUserId': '7731', 'LastActivityDate': '2013-04-23T19:03:27.153', 'LastEditDate': '2013-04-16T03:57:47.927', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11335', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7731', 'Tags': '<formal-languages><context-free><automata><pushdown-automata>', 'CreationDate': '2013-04-15T01:15:08.810', 'Id': '11321'},9733:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is the language $L = \\{ a^ib^j \\mid i\\ \\nmid\\ j \\ \\} $ context free ?</p>\n\n<p>If we fix $n \\in N$ then we know that the language $L = \\{ a^ib^j \\mid \\ \\forall \\ 1 \\le k \\le n \\ , \\ \\  j\\neq ki \\} $ is context free (as it can be presented as a finite union of context free languages in a similar way to the example here: <a href="http://cs.stackexchange.com/questions/10635/is-l-aibj-mid-j-neq-i-and-j-neq2i-context-free?rq=1">Is $L= \\{ a^ib^j \\mid j\\neq i \\ and \\ j\\neq2i \\ \\} $ context free?</a>)</p>\n\n<p>I think that it\'s not context free but have failed to prove it.\nBy reading other questions on this site I noticed this interesting observation: CFL\'s in $a^*b^*$ are closed under complement as can be seen here: <a href="http://cs.stackexchange.com/questions/11110/are-context-free-languages-in-ab-closed-under-complement">Are context-free languages in $a^*b^*$ closed under complement?</a> </p>\n\n<p>So our language $L$ is context free if and only if $ \\bar L = \\{ a^ib^j \\mid \\ \\ i\\ \\mid\\ j \\ \\} $ is context free. I tried using the pumping lemma but  to no avail.</p>\n\n<p>Thanks in advance</p>\n', 'ViewCount': '241', 'Title': 'Is the language $L = \\{ a^ib^j \\mid i\\ \\nmid\\ j \\ \\} $ context free?', 'LastActivityDate': '2013-11-21T01:06:06.003', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11634', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-04-19T10:08:37.820', 'FavoriteCount': '2', 'Id': '11405'},9734:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have the following CFG,</p>\n\n<p>$S \\rightarrow CB$<br>\n$C \\rightarrow aCa \\text{ }|\\text{ } bCb \\text{ }|\\text{ } \\text{#}B$<br>\n$B \\rightarrow AB \\text{ }|\\text{ } \\varepsilon$<br>\n$A \\rightarrow a\\text{ }|\\text{ }b$</p>\n\n<p>This is the CFG for the following language:</p>\n\n<p>$$L= \\left\\{w \\text{#} x\\mid w^R \\text{ is a substring of }\\ x \\text{, where }  x,w\\in \\{a, b\\}^*\\right \\}$$</p>\n\n<p>I have a problem with constructing PDA for this CFG.</p>\n\n<p><strong>My attempt</strong></p>\n\n<p>My idea was to store characters in stack until "#" character, then as soon as the sequence of reversed characters go, pop from the stack. If at the end of input stack is empty, then we are done.</p>\n\n<p>The problem is that for the following string, for example:</p>\n\n<p>abbaa#aabbbbbbb(aabba)bbbbbb</p>\n\n<p>when we read characters after "#", PDA will pop 4 characters, the it will see that the sequence is not valid and proceed with input. How can I return these 4 characters back so that I can check sequence again because I need full stack to proceed with accepted reversed substring that I have showed in brackets?</p>\n', 'ViewCount': '406', 'Title': 'Converting CFG to PDA', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T14:39:44.393', 'LastEditDate': '2013-04-21T14:39:44.393', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '11447', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7809', 'Tags': '<context-free><formal-grammars><pushdown-automata>', 'CreationDate': '2013-04-20T20:26:38.457', 'Id': '11441'},9735:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is the following language context free: $L = \\{ uxvy \\mid u,v,x,y \\in \\{ 0,1 \\}^+, |u| = |v|, u \\neq v, |x| = |y|, x \\neq y\\} $ ?</p>\n\n<p>I think that it's not context free but I'm having a hard time proving it. I tried intersecting this language with a regular language (like  $ \\ 0^*1^*0^*1^* $ for example) then use the pumping lemma and \\ or homomorphisms but I always get a language that is too complicated to characterize and write down. </p>\n", 'ViewCount': '797', 'Title': 'Is this strange language context free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-20T18:37:10.130', 'LastEditDate': '2013-06-13T05:51:03.333', 'AnswerCount': '3', 'CommentCount': '16', 'Score': '20', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-04-26T17:56:00.657', 'FavoriteCount': '10', 'Id': '11585'},9736:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '255', 'Title': 'prove no DPDA accepts language of even-lengthed palindromes', 'LastEditDate': '2013-04-27T08:02:10.887', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7410', 'FavoriteCount': '1', 'Body': '<p>How do you prove that the language of even-lengthed palindromes, i.e.,\n$L=\\left\\{ ww^R \\mid w\\in \\left\\lbrace 0,1 \\right\\}^* \\right\\}$, can not be accepted by a determinsitc Push-Down-Automaton?</p>\n\n<p>Is there any general way to prove that a context-free language can not be accepted by a deterministic PDA? I mean something like pumping lemma maybe?</p>\n', 'Tags': '<context-free><pushdown-automata>', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-04-27T20:01:26.740', 'CommentCount': '1', 'AcceptedAnswerId': '11608', 'CreationDate': '2013-04-27T06:52:11.577', 'Id': '11598'},9737:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have the following CFG $G$:\n$$ \\begin{align}\nS &amp;\\rightarrow aAbb \\mid aaBb \\\\\nA &amp;\\rightarrow aAbb \\mid \\epsilon \\\\\nB &amp;\\rightarrow aaBb \\mid \\epsilon \\\\\n\\end{align} $$</p>\n\n<p>I have to create a PDA (pushdown automaton) to recognize this language however I am unsure on how to do it. So far I have this(revised based on feedback from user Hendrik Jan) :</p>\n\n<p><img src="http://i.stack.imgur.com/e9gfG.png" alt="enter image description here"></p>\n\n<p>I understand that it should accept the last one ($aaaabb$) however it does not for the current version.</p>\n', 'ViewCount': '192', 'Title': 'PDA for this context-free grammar', 'LastEditorUserId': '7216', 'LastActivityDate': '2013-06-07T15:33:12.757', 'LastEditDate': '2013-05-08T11:50:48.963', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7216', 'Tags': '<context-free><automata><pushdown-automata>', 'CreationDate': '2013-05-07T19:32:21.060', 'Id': '11864'},9738:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am doing homework in Formal Languages. I urgently need a language which can be recognised by 2 PDA's but not with 1 PDA. Thanks</p>\n", 'ViewCount': '598', 'Title': 'PDA with 2 stacks', 'LastActivityDate': '2013-05-11T22:39:06.897', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11928', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '7957', 'Tags': '<formal-languages><pushdown-automata>', 'CreationDate': '2013-05-10T06:38:48.983', 'FavoriteCount': '1', 'Id': '11925'},9739:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm doing a college work about automatons. In one exercise I've to compare two words with five letters each one, but I don't know how to do it, do you have any tutorial or example for that? </p>\n", 'ViewCount': '205', 'Title': 'Compare two words using a Pushdown Automaton', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-13T09:05:23.137', 'LastEditDate': '2013-05-13T03:32:10.813', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'OwnerDisplayName': 'Buni', 'PostTypeId': '1', 'Tags': '<pushdown-automata>', 'CreationDate': '2013-05-03T13:56:15.510', 'Id': '11980'},9740:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have talked to my friend and he said this is the only place somebody could know how to solve it. It is the only exercise(from around 80) from exam revise I just do not know how to do at all.</p>\n\n<p>Create pushdown automation for\n<code>{w: #a(w) &gt;= 2#b(w)};</code> and simulate it for the word <code>ababaaa</code></p>\n\n<p><code>#</code> means number</p>\n\n<p>Does any one of you is fluent enought in automation to solve it?</p>\n', 'ViewCount': '30', 'ClosedDate': '2013-05-14T10:53:56.813', 'Title': 'Pushdown automation where number of letter `a` is at least as twice as letter `b` in the word', 'LastActivityDate': '2013-05-14T08:55:13.050', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8161', 'Tags': '<pushdown-automata>', 'CreationDate': '2013-05-14T08:55:13.050', 'Id': '12010'},9741:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '135', 'Title': 'Pushdown automation where number of letter `a` is at least as twice as letter `b` in the word', 'LastEditDate': '2013-05-14T09:13:13.517', 'AnswerCount': '1', 'Score': '3', 'OwnerDisplayName': 'user2380858', 'PostTypeId': '1', 'OwnerUserId': '8161', 'FavoriteCount': '1', 'Body': '<p>I have talked to my friend and he said this is the only place somebody could know how to solve it. It is the only exercise(from around 80) from exam revise I just do not know how to do at all.</p>\n\n<p>Create pushdown automation for\n<code>{w: #a(w) &gt;= 2#b(w)};</code> and simulate it for the word <code>ababaaa</code></p>\n\n<p><code>#</code> means number</p>\n\n<p>Does any one of you is fluent enought in automation to solve it?</p>\n', 'Tags': '<pushdown-automata>', 'LastEditorUserId': '4873', 'LastActivityDate': '2013-05-14T09:13:13.517', 'CommentCount': '0', 'CreationDate': '2013-05-14T08:51:09.267', 'Id': '12011'},9742:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://www.google.ca/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCwQFjAA&amp;url=http://www.cs.rpi.edu/~moorthy/Courses/modcomp/fall2005/slides/DPDA.ppt&amp;ei=qI6mUeD6KaKOigLr-YH4Cg&amp;usg=AFQjCNHdu1SacbRI9CaOjOvXxzNziaHtEQ&amp;sig2=DLSgGZ-VegxX1lFVSTZTCw&amp;bvm=bv.47244034,d.cGE">These lecture slides</a> sketch a proof that $L=\\{ a^n b^n \\mid n \\geq 0 \\} \\cup  \\{ a^n b^{2n} \\mid n \\geq 0 \\}$\ncannot be accepted by any Deterministic Pushdown Automaton. Unfortunately, the slides give no references as to where the proof comes from.</p>\n\n<p>I was wondering, does anybody know of an academic paper or textbook that gives a full proof? I\'d love to be able to cite it, but I haven\'t been able to find one.</p>\n', 'ViewCount': '143', 'Title': 'Paper with proof that $L=\\{ a^n b^n \\mid n \\geq 0 \\} \\cup \\{ a^n b^{2n} \\mid n \\geq 0 \\}$ is not Deterministic Context Free?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-29T20:10:06.177', 'LastEditDate': '2013-11-29T20:10:06.177', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12367', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<formal-languages><reference-request><automata><pushdown-automata><nondeterminism>', 'CreationDate': '2013-05-29T23:32:51.367', 'Id': '12365'},9743:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '124', 'Title': 'Myhill-Nerode style characterization of CFL?', 'LastEditDate': '2013-11-02T13:57:51.987', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '5323', 'FavoriteCount': '2', 'Body': '<p>Define the <em>Nerode equivalence</em> over a language $L \\subseteq \\Sigma^{*}$ as $u \\sim_L v$ iff $uw \\in L \\Leftrightarrow vw \\in L$ for every $w \\in \\Sigma^{*}$.</p>\n\n<p>The Nerode equivalence ${\\sim}_L$ has finitely many equivalence classes precisely when $L$ can be recognized by a finite-state automaton.  This is the <a href="http://en.wikipedia.org/wiki/Myhill%E2%80%93Nerode_theorem" rel="nofollow">Myhill-Nerode theorem</a>.</p>\n\n<blockquote>\n  <p>Is there a similar characterization of context-free languages?</p>\n</blockquote>\n\n<hr>\n\n<h1>Motivation:</h1>\n\n<p>The Nerode equivalence classes each correspond to a distinct state in any automaton that recognizes $L$.  Each CFL can be recognized by an NPDA, which has a finite number of states but also a potentially unbounded stack of alphabet symbols.  The stack keeps track of one possible way that a string can be parsed.  The number of equivalence classes may be infinite since the stack can store an unbounded number of symbols.</p>\n\n<p>I am asking: is there always a way to clump together equivalence classes so that each clump represents one state of the PDA, with each class within the clump representing equivalent states of the stack for that PDA state?</p>\n\n<p>For instance, the language of properly nested parentheses only needs states to handle <code>pop</code> and <code>push</code>, as the stack will keep track of the current nesting depth.  If such clumping can always be done, then whether the number of clumps is finite determines whether the language is context-free.</p>\n\n<hr>\n\n<p>As pointed out by @sdcvvc in a comment, a form of this question was asked as <a href="http://math.stackexchange.com/questions/118362">http://math.stackexchange.com/questions/118362</a> although Yuval Filmus\'s answer to the related question at <a href="http://cs.stackexchange.com/questions/12041/example-of-a-non-context-free-language-that-nonetheless-can-be-pumped/12044#12044">Example of a non-context free language that nonetheless CAN be pumped?</a> is more relevant.</p>\n', 'Tags': '<formal-languages><context-free><pushdown-automata>', 'LastEditorUserId': '5323', 'LastActivityDate': '2013-11-02T13:57:51.987', 'CommentCount': '1', 'AcceptedAnswerId': '12645', 'CreationDate': '2013-06-12T21:49:16.247', 'Id': '12643'},9744:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So, it's fairly easy to prove that if $L \\in DCFL$, then $L \\Sigma^* \\in DCFL$. Basically, you take the DPDA accepting $L$. You remove all transitions on final states, and then for each $a \\in \\Sigma$ and each final state $q$, you add a transition looping from $q$ to $q$ on $a$.</p>\n\n<p>I'm using this in a paper, and I'd love to not have to actually prove this construction is valid. It's easy, but it's about a half-page long. Since DPDAs have been studied almost exhaustively, I was wondering, does anybody know of a paper that proves this property?</p>\n", 'ViewCount': '138', 'Title': 'Reference request: proof that if $L \\in DCFL$, then $L \\Sigma^* \\in DCFL$', 'LastActivityDate': '2013-07-10T20:22:04.583', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '13215', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<formal-languages><reference-request><automata><closure-properties><pushdown-automata>', 'CreationDate': '2013-07-09T17:23:08.623', 'Id': '13179'},9745:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I\'ve written a recursive-descent parser generator, and I\'m trying to classify it (call me a cowboy coder if you must). According to wikipedia, <code>S \u2192 0S0 | 1S1 | \u03b5</code>, which checks for an even-length palindrome, is a non-deterministic grammar. My parser generator can handle this grammar. Does that mean my parser is non-deterministic?</p>\n\n<p>To be honest, I\'m not even sure that it\'s proper to try to classify it like this. It doesn\'t really match the description of a pushdown automata, since it passes data up and down through the stack (parameters, passed by reference, which may be modified). If anyone would be interested in taking a closer look at it, I\'d be most grateful. It handles left recursion and ambiguous grammars in (I believe) polynomial time and space. <a href="https://github.com/coder0xff/parlex" rel="nofollow">https://github.com/coder0xff/parlex</a></p>\n', 'ViewCount': '177', 'Title': 'If a parser can parse a non-deterministic grammar, is the parser non-deterministic?', 'LastActivityDate': '2013-07-22T18:51:39.117', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '13395', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8233', 'Tags': '<formal-grammars><pushdown-automata><parsers>', 'CreationDate': '2013-07-22T17:38:48.407', 'Id': '13393'},9746:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I realize non-deterministic pushdown automata can be an improvement over deterministic ones as they can "choose" among several states and there are some context-free languages which cannot be accepted by a deterministic pushdown.</p>\n\n<p>Still, I do not understand <em>how</em> exactly they "choose". For palindormes for example every source I found just says the automaton "guesses" the middle of the word. What does that mean?</p>\n\n<p>I can think of several possible meanings:</p>\n\n<ol>\n<li><p>It goes into one state randomly and therefore might not accept a\nword, which actually is in the language</p></li>\n<li><p>It somehow goes\n"every possible way", so if the first one is wrong it tests if any\nof the other might be right</p></li>\n<li><p>There is some mechanism I am not\naware of, that chooses the middle of the word and is therefore not\nrandom, but the automaton always finds the right middle.<br></p></li>\n</ol>\n\n<p>This is just an example; what I want to know is how it works for any automaton that has several following states for one and the same state before it.</p>\n', 'ViewCount': '118', 'Title': 'Push Down Automatons "guess" - what does that mean?', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-07-23T19:18:13.910', 'LastEditDate': '2013-07-23T19:13:48.330', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '9308', 'Tags': '<formal-languages><automata><pushdown-automata><nondeterminism>', 'CreationDate': '2013-07-23T17:57:55.890', 'Id': '13400'},9747:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Wikipedia <a href="http://en.wikipedia.org/wiki/Pushdown_automaton" rel="nofollow">Pushdown automaton</a> (as of aug 16, 2013) states:</p>\n\n<blockquote>\n  <p>In general, pushdown automata may have several computations on a given input string, some of which may be halting in accepting configurations. If only one computation exists for all accepted strings, the result is a deterministic pushdown automaton (DPDA)</p>\n</blockquote>\n\n<p>My professor gave this as an example that we shouldn\'t trust Wikipedia but rather consult a textbook. Is he right? </p>\n', 'ViewCount': '287', 'Title': 'Definition of deterministic pushdown automaton', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-17T12:07:54.710', 'LastEditDate': '2013-08-17T12:07:54.710', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4287', 'Tags': '<terminology><pushdown-automata>', 'CreationDate': '2013-08-16T22:04:47.060', 'Id': '13783'},9748:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have been studying the book <em>Introduction to Computation</em> by Michael Sipser on my own, and I'm stuck on this exercise from the chapter on Pushdown Automato and Context-Free Languages. The exercise is to show that  $$A=\\{x\\#y\\,|\\, x \\neq y\\}$$ is a context-free language. </p>\n\n<p>I'm having a hard time proving this because of the second string not reversed. I've tried both making a context-free grammar and a pushdown automata, but in both cases I can't figure out how to make/check that the initial characters of both $x$ and $y$ are the same.</p>\n\n<p>I would appreciate any hints that could help me get to the answer.</p>\n", 'ViewCount': '103', 'Title': 'Constructing a Context Free Grammar for checking non-equality of strings', 'LastActivityDate': '2013-08-22T12:20:47.063', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9778', 'Tags': '<context-free><pushdown-automata>', 'CreationDate': '2013-08-22T12:20:47.063', 'Id': '13866'},9749:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Show that L = $\\{0^{2^n}| n\\geq 0\\}$ is not a context free language.</p>\n\n<p>Let string $s = 0^{2^p}$. Then we know we can write $s$ as $s = uvxyz$. I know that |vy| > 0 and $|vxy| \\leq p$. </p>\n\n<p>So how do I show that $uv^2xy^2z$ is not in $L$.</p>\n', 'ViewCount': '525', 'Title': 'Use pumping lemma to show L is not context free', 'LastEditorUserId': '9819', 'LastActivityDate': '2013-10-22T23:00:00.967', 'LastEditDate': '2013-09-22T22:09:07.183', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<context-free><pushdown-automata>', 'CreationDate': '2013-09-22T19:06:38.340', 'Id': '14521'},9750:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>(1) $L_1 = \\{a^ib^{i+j}c^j|i,j\\geq 0\\} $</p>\n\n<p>(2) $L_2 = \\{xy | x,y \\in \\{0,1\\}^*, x \\neq y, |x| = |y| \\}$</p>\n\n<p>I doubt that $L_1$ is CFL. I've been trying to go with the string $s$ = $a^pb^{2p}c^p$. Thus, we can write $s$ as $uvxyz$. Now I'm trying to show $uv^2xy^2z$ is not in $L_1$. </p>\n\n<p>I really have no idea how to approach (2). And if it is context free, how in the world would you draw a pda?</p>\n", 'ViewCount': '87', 'Title': 'Determine whether two languages are context free', 'LastActivityDate': '2013-10-02T23:17:32.233', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '14531', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<context-free><pushdown-automata>', 'CreationDate': '2013-09-22T22:08:26.540', 'Id': '14527'},9751:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm having a lot of trouble constructing a PDA for the language: \\begin{equation*}\n\\{a^m b^n : m &lt; 2n &lt; 3m \\}\n\\end{equation*}</p>\n\n<p>I know if I push a symbol for each $a$ I see, then pop 2 symbols for each $b$ I see, then I should run out to satisfy the $m &lt; 2n$ part of the inequality. But I really don't understand how to include the requirement $2n &lt; 3m$. I'm assuming it has something to do with clever branching based on non-determinism, but I can't wrap my head around it. Any help would really appreciated.</p>\n", 'ViewCount': '664', 'Title': 'Constructing a PDA for the language $\\{a^m b^n : m < 2n < 3m \\}$', 'LastEditorUserId': '9950', 'LastActivityDate': '2013-10-10T01:43:41.060', 'LastEditDate': '2013-10-10T01:43:41.060', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '14962', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10448', 'Tags': '<formal-languages><automata><pushdown-automata>', 'CreationDate': '2013-10-09T00:28:08.143', 'Id': '14935'},9752:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm not very comfortable with pumping lemma for context-free grammar. I understand the sufficient conditions that must hold but proving it gets me everytime. For example, I need to prove whether $L = \\{0^{n^3} \\mid n\\in\\mathbb{N}\\}$ is context-free or not. </p>\n\n<p>Based on my intuition, it won't be.  There is no pattern of $0$'s that can be recreated by a pushdown automata but alas I need to prove this. I know you start off assuming it is by being able to create a substring $uvxyz$ where $v$ and $y$ are raised to the $i$th power where $i \\ge 0$. I'm having trouble from there, any help in this and the understanding would be greatly appreciated.</p>\n", 'ViewCount': '169', 'Title': u'Prove that {0^{n^3} | n\u22650} is not context free', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-16T00:20:58.653', 'LastEditDate': '2013-10-15T23:41:01.340', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-10-15T22:45:46.927', 'Id': '16113'},9753:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>There is a saying by Computer Science Professor's everywhere :</p>\n\n<pre><code>PDA Checks the intelligence of Students, as certainly there is no approach except power and imagination\nof mind to solve problems and design PDA...\n</code></pre>\n\n<p>While thinking today i thought How can we design automata of a^2n b^(2n-1)</p>\n\n<p>I tried my best :\nFor example let q0 is initial state and top of the empty stack has Z.</p>\n\n<pre><code>So, Let say Transition of (q0, a , Z) = (q1,Z)\n\n            Transition of (q1, a , a) = (q1,a)\n\n            Transition of (q1, b , a) = (q2,-)\n\n            Transition of (q2, $ , Z) = (qf,Z)\n</code></pre>\n\n<p>I was able to solve this problem all of a sudden...</p>\n\n<p><strong>My doubt is still the same, How to be the best in solving PDA problems and Is there any way \nto define a strategy to solve problems ?</strong></p>\n\n<p>P.S. Your comments are welcome if i did something wrong in above stated question</p>\n", 'ViewCount': '126', 'Title': 'Approaches to Solve PDA', 'LastActivityDate': '2013-10-21T22:38:32.957', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '16310', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10861', 'Tags': '<automata><pushdown-automata>', 'CreationDate': '2013-10-21T16:59:47.230', 'Id': '16308'},9754:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I want to be able to describe the idea behind the pushdown automaton (no tables or diagrams). </p>\n\n<p>So, I already know that $L = \\{ ww \\mid w \\text{ in } (0,1)^*\\}$ is not context free. Since CFL are not closed under complement its complement $L'$ is a CFL. \nI also read somewhere that any odd word is part of $L'$ (what about even length words?). So a pushdown automaton description could be: read one letter and put into stack, then read next letter and remove previous letter from stack. Do this until the end. If one letter is left in the stack at the end then word is odd length thus accept, else reject?</p>\n", 'ViewCount': '423', 'Title': 'Pushdown automaton for complement of $L = \\{ ww \\mid w \\text{ in } (0,1)^*\\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-08T22:45:29.333', 'LastEditDate': '2013-11-08T11:45:37.150', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16755', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10713', 'Tags': '<formal-languages><context-free><automata><pushdown-automata>', 'CreationDate': '2013-11-05T23:35:45.853', 'Id': '16753'},9755:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>Let say I have a pda :</p>\n\n<p>\u03b4(q1,a,Z)=(q2,aZ)</p>\n\n<p>\u03b4(q2,a,aZ)=(q2,bZ)</p>\n\n<p>Is this allowed....</p>\n\n<p>you can see that in <strong>\u03b4(q2,a,aZ)=(q2,bZ)</strong>, we are basically popping 'a' and pushing 'b' for a single transition... </p>\n\n<p>Is this allowed for PDA ??</p>\n", 'ViewCount': '76', 'Title': 'Can we push and pop both at a single transition in a PDA?', 'LastActivityDate': '2013-11-07T15:58:10.910', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '16795', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10861', 'Tags': '<pushdown-automata>', 'CreationDate': '2013-11-06T16:39:50.133', 'Id': '16774'},9756:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to create a PDA for $\\{xy \\mid |x|=|y| \\text{ and } x \\ne y\\}$ over the alphabet $\\Sigma = \\{a, b\\}$. But I don't know how the PDA will know if the two strings $x$ and $y$ are not equal. Please help me create this PDA step by step.</p>\n", 'ViewCount': '67', 'ClosedDate': '2013-11-18T21:20:33.997', 'Title': u'Creating PDA for {xy such that |x|=|y| and x \u2260 y}', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-18T20:07:00.127', 'LastEditDate': '2013-11-18T13:11:33.327', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11417', 'Tags': '<formal-languages><pushdown-automata>', 'CreationDate': '2013-11-16T10:53:57.390', 'Id': '18069'},9757:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I know how to figure out the start state, accepting state, input alphabet, and all that stuff. But how do you develop the transition relation of a PDA? For an FSM, (q0,a),q1) means if you start at q0 and get an a, you transition to q1. But what does (S,a,e),(S,a) mean? (S is start state and e is epsilon)</p>\n\n<p>Here\'s a picture if that helps. I want to understand the circled part. I will be extremely appreciative of any help.<br>\n<img src="http://i.stack.imgur.com/87PpS.jpg" alt="enter image description here"></p>\n', 'ViewCount': '41', 'Title': 'How do you obtain transition relation of a PDA?', 'LastActivityDate': '2013-11-22T01:18:04.820', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18228', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10884', 'Tags': '<pushdown-automata>', 'CreationDate': '2013-11-21T15:31:51.493', 'Id': '18224'},9758:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've just been learning about pushdown automata and I'm trying to create one that describe the following language:</p>\n\n<p>{$a^n b^n c^i \\in \\{a,b,c\\}^*\\ |\\ n \\ge 0,i\\ge 0$}</p>\n\n<p>What I have is the following:</p>\n\n<p>(state, symbol, top of stack), (next state, what goes to stack).</p>\n\n<p>$(s,$e$,$e$),(f,$e$)$</p>\n\n<p>$(s,a,$e$),(s,d)$</p>\n\n<p>$(f,b,d),(f,$e$)$</p>\n\n<p>$(f,c,$e$),(f,$e$)$</p>\n\n<p>Where $s$ is the starting state, $f$ is the final state and e is the empty word.</p>\n\n<p>Do I have the right idea? My worry is sending the automata to the final state while there are still entries in the stack - is that allowed?</p>\n", 'ViewCount': '79', 'Title': 'Does this pushdown automaton describe the language {$a^n b^n c^i \\in \\{a,b,c\\}^*\\ |\\ n \\ge 0,i\\ge 0$}?', 'LastEditorUserId': '11408', 'LastActivityDate': '2013-11-24T16:02:41.040', 'LastEditDate': '2013-11-24T15:58:39.410', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11408', 'Tags': '<pushdown-automata>', 'CreationDate': '2013-11-24T15:18:40.683', 'Id': '18302'},9759:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have this nondeterministic pda:\n$$\\Sigma=  \\{a,b,c\\}$$</p>\n\n<p>and </p>\n\n<p>$$\nL=\\{\\omega\\  \\epsilon\\ \\Sigma^*\\ |\\ \\omega\\ = \\alpha\\beta\\beta^R\\gamma\\ and\\ \\alpha,\\beta,\\gamma\\ \\epsilon\\ \\Sigma^*\\ and\\ |\\beta|\\ &gt;3 \\}\n$$</p>\n\n<p>So once i have create the NPDA, i have to calculate the probability of accepting a correct word, i know it depends on the size of $\\alpha$ and the "free" jumps ($\\varepsilon,\\varepsilon-&gt;\\varepsilon$).\nMy problem is that i can\'t find the exact function of probability can someone explain me how to do it?</p>\n\n<p>Thanks.</p>\n', 'ViewCount': '90', 'Title': 'help with the probability of acceptance of a Nondeterministic Pushdown automata', 'LastActivityDate': '2013-11-29T22:57:27.457', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '18468', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '11695', 'Tags': '<context-free><probability-theory><pushdown-automata><nondeterminism>', 'CreationDate': '2013-11-29T11:15:00.567', 'Id': '18464'},9760:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So I've been given the following language on an assignment.  It is the only question I have left of 10, and I've been racking my brains out trying to solve it for hours.  </p>\n\n<p>$$L=\\{w:w\\in(a+b+c)^*, n_a(w) &gt; n_b(w)&gt;n_c(w)\\}$$</p>\n\n<p>where $n_x(w)$ represents the number of character $x$ found in $w$.  The problem statement is: <strong>prove or disprove that the language is context-free</strong>.  Context-free grammars or pushdown automata are acceptable proofs.  Use pumping lemma to disprove.</p>\n\n<p>I've extensively explored both possibilities and I'm fairly certain that it is context-free.  </p>\n\n<p>The approach I've taken in finding a context-free grammar for the language involves using rules which preserve the constraint $n_a(w) &gt; n_b(w) &gt; n_c(w)$ (ie. whenever a $b$ is added, add an $a$; whenever a $c$ is added, add a $b$).  Then, I've attempted to enforce that there are at least two $a$s and at least one $b$ (base case for the constraint).</p>\n\n<p>The grammar I've used is:</p>\n\n<p>$S\\implies XaXaXbX | XaXbXaX | XbXaXaX$</p>\n\n<p>$X \\implies XX| A | B | C | \\lambda$</p>\n\n<p>$A \\implies a$</p>\n\n<p>$B \\implies ab | ba$</p>\n\n<p>$C \\implies abc | acb | bac | bca | cab | cba$</p>\n\n<p>(where $\\lambda$ is the empty string)</p>\n\n<p>My grammar fails for strings like $cccaaaaabbbb$.</p>\n\n<p>I'm confused as to where to go from here.  </p>\n\n<p><strong>I would really like a push in the right direction, not an answer.</strong>\n Any help is greatly appreciated!</p>\n", 'ViewCount': '87', 'Title': 'Is $\\{w:w\\in(a+b+c)^*, n_a(w) > n_b(w)>n_c(w)\\}$ context-free?', 'LastEditorUserId': '9612', 'LastActivityDate': '2014-01-29T22:37:10.603', 'LastEditDate': '2013-12-30T11:42:33.360', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10400', 'Tags': '<context-free><formal-grammars><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-11-29T17:48:42.330', 'FavoriteCount': '1', 'Id': '18470'},9761:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $X = \\{\\langle M \\rangle\\ |\\ M\\text{ is a finite state machine and }L(M) = \\emptyset\\}$ where $\\langle M \\rangle$ is an encoding of the\nmachine $M$.  Is $X$ Turing decidable?  Why or why not?</p>\n', 'ViewCount': '148', 'Title': 'Decide whether a DFA accepts the empty language', 'LastEditorUserId': '755', 'LastActivityDate': '2013-12-20T07:31:54.950', 'LastEditDate': '2013-12-19T18:20:56.877', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11809', 'Tags': '<turing-machines><automata><pushdown-automata>', 'CreationDate': '2013-12-04T17:33:25.773', 'Id': '18616'},9762:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I've been trying for quite some extended time to find a construction so that I can formally demonstrate that a deterministic PDA is closed under complementation. However, it happens that every idea I got has something that at the end does not fit. Could you give me a hand?</p>\n\n<p>The main problem happens with the <strong>\u03b5-moves</strong>. A PDA could finish reading its input in a non-final (rejecting state) but can still move to a final (accepting) state through an <strong>\u03b5-move</strong> and end up accepting the string. This means that just adding a dead state and complementing the states does not work. I already solved the problem of possible infinite sequences of <strong>\u03b5-moves</strong>, so that is not a main part of my question.</p>\n\n<p><strong>EDIT:</strong> As far as I understand, if the DPDA reaches <em>end of input</em> and is in an accepting state and moves to a rejecting state through an <strong>\u03b5-move</strong> it would still accept it (as it reached a final state with no input symbol left to read).</p>\n\n<p>Please let me know if I can be more clear.</p>\n", 'ViewCount': '148', 'Title': 'Demonstrate that DPDA is closed under complement by construction', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-28T10:53:54.807', 'LastEditDate': '2014-03-26T08:26:09.787', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '11974', 'Tags': '<formal-languages><automata><closure-properties><pushdown-automata>', 'CreationDate': '2013-12-10T00:34:01.010', 'Id': '18800'},9763:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a non-deterministic push down automata (we define "accept" here using accept states), if we assume any operation popping from the stack and checking if the top of the stack contains some symbol can succeed (i.e. "getting rid" of the stack), we get a non-deterministic finite automata.</p>\n\n<p>If we convert two such PDAs, whose languages recognized are the same, and assuming <em>all states are reachable</em>, to NFAs in this fashion, are the languages recognized by the NFAs still the same?</p>\n\n<hr>\n\n<p>Here\'s a simple example.  Consider the language $\\{a^n b^n : n \\in \\mathbb{N}\\}$.  Here\'s one simple PDA for it.  The PDA has two states, $q_0,q_1$.  When it is in state $q_0$ and it reads the symbol $a$ on the input tape, it pushes $A$ on the stack and remains in state $q_0$.  When it reads the symbol $b$ on the input table and the stack is non-empty, it pops whatever is on the stack and moves to state $q_1$.  The PDA accepts if the stack is empty at the end of the input string.  If we convert this PDA to a NFA, we get a NFA with two states $q_0,q_1$ and transitions $q_0 \\stackrel{a}{\\to} q_0$, $q_0 \\stackrel{b}{\\to} q_1$, $q_1 \\stackrel{b}{\\to} q_1$.  This NFA accepts the language $a^* b^*$.  There are other ways to build a PDA for the language $\\{a^n b^n : n \\in \\mathbb{N}\\}$; if we apply the same conversion to them, does the corresponding NFA always accept the language $a^* b^*$?</p>\n', 'ViewCount': '86', 'Title': 'Relaxing the stack in a push down automata', 'LastEditorUserId': '9173', 'LastActivityDate': '2013-12-14T11:26:22.807', 'LastEditDate': '2013-12-14T06:50:09.547', 'AnswerCount': '3', 'CommentCount': '4', 'AcceptedAnswerId': '18970', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9173', 'Tags': '<formal-languages><pushdown-automata><nondeterminism>', 'CreationDate': '2013-12-13T16:15:38.797', 'Id': '18955'},9764:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>How would one go about proving that one PDA that may only pop one symbol from its stack per transition, is equivalent to a second PDA that is allowed to pop any number of symbols?</p>\n\n<p>That is a PDA with transitions of type $(Q\xd7(\u03a3\u222a{\u03b5})\xd7(\u0393\u222a{\u03b5}))\xd7(Q\xd7\u0393^*)$ is equivalent to a PDA with transitions of type $(Q\xd7(\u03a3\u222a{\u03b5})\xd7(\u0393^*))\xd7(Q\xd7\u0393^*)$.</p>\n', 'ViewCount': '41', 'Title': 'Equivalency of two pushdown automata', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-12-18T01:03:00.653', 'LastEditDate': '2013-12-18T01:03:00.653', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'OwnerDisplayName': 'user12200', 'PostTypeId': '1', 'Tags': '<proof-techniques><pushdown-automata>', 'CreationDate': '2013-12-18T00:53:11.713', 'Id': '19078'},9765:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm studying for my Computing languages test and there's one idea I'm having problems wrapping my head around, as far as I know for any Context Free Grammar (CFG), we can design a 2-state Pushdown Automaton (PDA). I am however a little bit confused that why this is possible.</p>\n", 'ViewCount': '165', 'Title': 'How to get 2-state PDA for CFG?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-26T14:37:05.360', 'LastEditDate': '2014-01-26T14:37:05.360', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '13108', 'Tags': '<formal-languages><context-free><formal-grammars><pushdown-automata>', 'CreationDate': '2014-01-24T18:53:40.317', 'FavoriteCount': '4', 'Id': '19946'},9766:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>There are two languages,</p>\n\n<p>$\\qquad L_1 = \\{w\\in\\{a,b\\}^*: N_a\\leq N_b\\}$ and<br>\n$\\qquad L_2=\\{w\\in\\{a,b\\}^*: N_b\\leq 2N_a\\}$ </p>\n\n<p>where $N_a$ means the number of occurrences of $a$ in the string $w$. Same for $N_b$.</p>\n\n<p>I've proved that $L_1$ has a DPDA (hope this is right). </p>\n\n<p>Now I want to know whether $L=L_1\\cap L_2$ has a DPDA or not. </p>\n\n<p>I applied the Pumping lemma but it seems like there is no contradiction. I tried to draw the DPDA but failed. Maybe $L$ has a nondeterministic PDA but not a DPDA. However I cannot prove this.</p>\n\n<p>Could anyone give me some hints?</p>\n", 'ViewCount': '79', 'Title': 'How to find a Deterministic PDA for an intersection of languages', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T20:49:59.820', 'LastEditDate': '2014-02-05T08:34:26.133', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '21328', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '14400', 'Tags': '<formal-languages><context-free><automata><pushdown-automata>', 'CreationDate': '2014-02-05T04:09:47.847', 'Id': '21309'},9767:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>We know algorithm to convert each PDA in the underlying grammar that generates the language the PDA recognize.\nBut we have also the algorithm for creating a two state pda from a grammar. \nThis algorithm use the first state for all the computation, with rules based on the stack and the input symbol, and when the stack is empty goes to a final state.\nThis  means that, for all the generic PDAs we can create a minimal PDA with only two states (and a lot of rules for the first state).\nAm I right?</p>\n', 'ViewCount': '24', 'ClosedDate': '2014-02-10T11:42:10.043', 'Title': 'Are all PDA equivalent to two-state-PDA?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T11:42:05.793', 'LastEditDate': '2014-02-10T11:42:05.793', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7955', 'Tags': '<automata><pushdown-automata>', 'CreationDate': '2014-02-10T11:02:00.820', 'Id': '21494'},9768:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I saw this old post on stack overflow of a PDA that accepts a language where there are exactly twice as many a\'s as there are b\'s. The image they used is below and so is the link to the post itself.</p>\n\n<p><a href="http://stackoverflow.com/questions/7018113/what-language-does-this-pushdown-automata-pda-accept">PDA for language that accepts twice as many a\'s as b\'s.</a></p>\n\n<p><img src="http://i.stack.imgur.com/BK7Q4.jpg" alt="enter image description here"></p>\n\n<p>It was commented that the PDA was not deterministic. So I\'m wondering what exactly makes a PDA deterministic, for example, would you remove the epsilon transitions here to make it deterministic or what?</p>\n\n<p>If somebody could convert this into a deterministic PDA and explain the steps to do so, I would appreciate it, I\'m pretty lost when it comes to push down automata.</p>\n', 'ViewCount': '80', 'Title': 'Creating a Deterministic Push Down Automata', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-11T17:44:07.337', 'LastEditDate': '2014-02-11T07:08:59.830', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '21523', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '13257', 'Tags': '<automata><pushdown-automata><nondeterminism>', 'CreationDate': '2014-02-11T04:35:31.363', 'Id': '21518'},9769:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '101', 'Title': 'Why are pushdown automata countable?', 'LastEditDate': '2014-03-04T19:03:17.140', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13257', 'FavoriteCount': '0', 'Body': '<p>I began a chapter in a textbook on computational theory where they begin to talk about decidable languages. </p>\n\n<p>The problems in this section are pretty confusing and I honestly don\'t know how to begin them because I\'m not 100% on what they mean when they say "countable". </p>\n\n<p>Can anyone help walk me through this problem in the book, that simply states;</p>\n\n<blockquote>\n  <p>Show that the number of push-down automatons is countable.</p>\n</blockquote>\n', 'ClosedDate': '2014-03-06T15:52:04.650', 'Tags': '<terminology><automata><pushdown-automata><uncountability>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-04T19:03:17.140', 'CommentCount': '6', 'AcceptedAnswerId': '22265', 'CreationDate': '2014-03-04T03:41:50.343', 'Id': '22255'},9770:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider\n  the language $L = \\{w, w \\in \\{a,b,c\\}^*, n_c(w) = n_a(w) + n_b(w)\\}$, where $n_q(\\omega)$ is defined to be "the number of $p \\in \\omega$.</p>\n\n<p>I have tried a couple of PDA\'s that follow this whole idea of a stack-replacement kind of algorithm, but the reasoning behind it is incorrect. I know it is not the right structure; furthermore, those examples of my previous attempts don\'t really fit in the context of the question that I\'m asking.</p>\n\n<p>There I have a gut feeling that I need to exploit the fact that $0=n_a(w)+n_b(w)-n_c(w)$ but I have absolutely the faintest idea how to do so. When building this kind of "counting machine," what are some design patterns that I can exploit? </p>\n', 'ViewCount': '64', 'Title': 'A NPDA for the language $L = \\{w \\mid w \\in \\{a,b,c\\}^*, n_c(w) = n_a(w) + n_b(w)\\}$', 'LastEditorUserId': '12863', 'LastActivityDate': '2014-03-11T02:53:10.467', 'LastEditDate': '2014-03-11T02:53:10.467', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22414', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12863', 'Tags': '<formal-languages><pushdown-automata><nondeterminism>', 'CreationDate': '2014-03-09T01:16:21.513', 'Id': '22412'},9771:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I was going through a deterministic PDA that accepts $wcw^R$ (described in Ullman's textbook), in which the last transition is given as $(q_1,\\epsilon, Z_0)\\to(q_2,Z_0)$, where $q_2$ is the final state. </p>\n\n<p>In DFAs we don't consider $\\epsilon$ transitions, while in PDAs we do include them. Why?</p>\n", 'ViewCount': '40', 'Title': 'Why Deterministic PDA accepts $\\epsilon$ input but DFA not', 'LastEditorUserId': '683', 'LastActivityDate': '2014-03-10T09:14:56.833', 'LastEditDate': '2014-03-10T02:39:07.660', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<automata><pushdown-automata><nondeterminism>', 'CreationDate': '2014-03-10T02:06:20.490', 'Id': '22446'},9772:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '36', 'Title': 'Proving a language is not a regular language but a context free language', 'LastEditDate': '2014-03-17T23:09:15.107', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15798', 'FavoriteCount': '1', 'Body': "<p>I have the languages $L_1$ and $L_2$ such that $L_1 = \\{a^nba^n :n \\in N\\}$ and $L_2 =\\{a,b\\}^*\\setminus L_1$.</p>\n\n<p>I want to prove that $L_2$ is not a regular language. I know that to prove that $L_2$ is not a regular language I can use the pumping lemma but I'm unsure about the details.</p>\n\n<p>I also want to prove that $L_2$ is a context free language. Do I need a Push Down Automaton that accepts the language to prove that $L_2$ is a context free language? If so, what would this Push-Down Automaton look like?</p>\n", 'ClosedDate': '2014-03-18T07:47:52.957', 'Tags': '<formal-languages><regular-languages><context-free><pushdown-automata>', 'LastEditorUserId': '13022', 'LastActivityDate': '2014-03-17T23:28:09.877', 'CommentCount': '1', 'AcceptedAnswerId': '22731', 'CreationDate': '2014-03-17T22:36:34.083', 'Id': '22727'},9773:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to convert Finite Automata into Push Down Automata and I am not sure if I am doing this right. There are not many good tutorials on this topic that I can find, but this is what I have. I am on the right track here ? Does this look ok ?</p>\n\n<p>this is the FA I am trying to convert</p>\n\n<p><img src="http://i.stack.imgur.com/Xib6u.png" alt="enter image description here"></p>\n\n<p>this is what I have</p>\n\n<p><img src="http://i.stack.imgur.com/iWJYx.jpg" alt="enter image description here"></p>\n', 'ViewCount': '47', 'ClosedDate': '2014-04-29T22:41:32.273', 'Title': 'how to convert Finite Automata into Push Down Automata', 'LastActivityDate': '2014-03-23T16:25:21.957', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15179', 'Tags': '<finite-automata><pushdown-automata>', 'CreationDate': '2014-03-23T16:25:21.957', 'Id': '22973'},9774:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When converting a CFG to a PDA I know that you get three main states, Qstart, Qloop and Qaccept. But Qloops will need a various amount of states, and my question is how many? Is there a way to find out the "worst case scenario" of how many states there can potentially be? I don\'t mean for one particular CFG, but in general. I\'m having difficulties trying to figure out how I can calculate this... </p>\n', 'ViewCount': '62', 'Title': 'How many states when converting CFG to PDA', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-24T14:40:54.410', 'LastEditDate': '2014-03-24T10:49:04.057', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '22994', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14436', 'Tags': '<context-free><automata><formal-grammars><pushdown-automata><simulation>', 'CreationDate': '2014-03-24T09:24:37.833', 'Id': '22992'},9775:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is there a way to take the interection of two NPDAs?</p>\n\n<p>I can't seem to find anything that can make that happen, but it seems like the type of thing that is should be relatively trival.</p>\n", 'ViewCount': '54', 'Title': 'Intersection of two NPDAs', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-26T13:43:12.540', 'LastEditDate': '2014-03-26T08:50:40.920', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '23057', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '863', 'Tags': '<formal-languages><automata><closure-properties><pushdown-automata>', 'CreationDate': '2014-03-26T02:34:19.813', 'Id': '23056'},9776:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '84', 'Title': 'Computing the intersection of two NPDA where it is possible', 'LastEditDate': '2014-03-27T08:34:24.147', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '863', 'FavoriteCount': '1', 'Body': '<p>Apropois to Raphael\'s suggestion on <a href="http://cs.stackexchange.com/questions/23056/intersection-of-two-npdas">Intersection of two NPDAs</a>:</p>\n\n<p>Let $A_1$ and $A_2$ NPDA for context-free languages $L_1$ and $L_2$, respectively. Assuming that we know that $L = L_1 \\cap L_2$ is context-free, can we (effectively) construct NPDA $A$ for $L$?</p>\n\n<p>Any type of algorithm would be acceptable, but the more practical the better.</p>\n', 'Tags': '<computability><automata><pushdown-automata>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T10:20:05.773', 'CommentCount': '5', 'AcceptedAnswerId': '23587', 'CreationDate': '2014-03-27T01:19:07.693', 'Id': '23111'},9777:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $P$ be a deterministic PDA recognizing a deterministic CFL with a binary alphabet. Modify $P$ to identify its <em>reading states</em> (denote this subset of states by $R$) in accordance with the construction in Theorem 2.42 in Sipser (3$^{rd}$ edition only) for complementing DPDA. The final states of $P$ are $F\\subset R$, and $\\overline{P}$ recognizing the complement language is given by the same DPDA, but with final states $R-F$. </p>\n\n<p>Combine this with the construction in Lemma 2.59 showing that every DPDA recognizing an end-marked language has an equivalent DCFG. Modify $P$ to have a new accept state $q_\\mbox{accept}$. If $P$ enters a state in $F$ after reading the endmarker, it empties its stack and goes to $q_\\mbox{accept}$. Now do the same with $R-F$ and a new sink state $q_\\mbox{reject}$. </p>\n\n<p>In the grammar $G$ we have a start variable $A_{q_0q_\\mbox{accept}}$ which generates every string that takes $P$ from $q_0$ to $q_\\mbox{accept}$ with empty stack. Let $\\overline{G}$ be a copy of $G$, without renaming the variables, but replace the start state with $A_{q_0q_\\mbox{reject}}$. Then these grammars are both deterministic, and generate complement languages with respect to the portion of the string preceding the endmarker.</p>\n\n<p>Why do this? I think we can show DCFLs with binary alphabets are closed under substitution with an endmarked language and its complement using such a grammar. I think this is not in general the case as otherwise the resulting grammar with substitutions may have a forced handle in the production rules of both substituted grammars. Consider for example the language $\\{w\\mid w\\in\\{0,1\\}^*,\\#_0(w)=\\#_1(w)\\}$. Every string in this language can be extended to one in the complement and vice versa, so there must be strings for which both grammars would be able to match a handle based on just some initial portion of the string. Using the grammar construction described above, there will never be more than one forced handle, and every string will resolve to one of the start symbols. </p>\n\n<p>If this is a legitimate way to construct the complementary grammars, the very restricted closure result follows easily from the determinism of the grammars involved. Can anyone poke some holes in this?   </p>\n', 'ViewCount': '35', 'Title': 'A construction to show a very restricted substitution closure result for DCFLs', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-01T07:42:25.793', 'LastEditDate': '2014-04-01T07:42:25.793', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15486', 'Tags': '<formal-languages><context-free><formal-grammars><closure-properties><pushdown-automata>', 'CreationDate': '2014-03-31T08:17:43.793', 'Id': '23288'},9778:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I having trouble constructing NPDAs for these two languages:</p>\n\n<p>$L_1 = \\{a^nb^m \\mid 2n \\le m \\le 3n\\}$</p>\n\n<p>$L_2 = \\{a^nb^mc^k \\mid n = m \\: or \\: m \\ne k\\}$</p>\n\n<p>Would these be the proper states for the first one?  </p>\n\n<ul>\n<li>$q_0$ \u2013 reading $a$\u2019s (initial state)  </li>\n<li>$q_1$ \u2013 reading $b$\u2019s and popping $A$\u2019s  </li>\n<li>$q_2$ \u2013 reading $b$\u2019s  </li>\n<li>$q_f$ \u2013 \ufb01nal state </li>\n</ul>\n\n<p>Would these be the proper states for the second one?  </p>\n\n<ul>\n<li>$q_0$ \u2013 reading $a$\u2019s (initial state) </li>\n<li>$q_1$ \u2013 reading $b$\u2019s and popping $A$\u2019s  </li>\n<li>$q_2$ \u2013 reading $b$\u2019s and pushing $B$\u2019s    </li>\n<li>$q_3$ \u2013 reading $c$\u2019s  </li>\n<li>$q_f$ \u2013 \ufb01nal state  </li>\n</ul>\n\n<p>How would I go from here? Any help would be appreciated.</p>\n', 'ViewCount': '50', 'Title': 'Constructing nondeterministic pushdown automata', 'LastEditorUserId': '39', 'LastActivityDate': '2014-04-08T14:54:27.627', 'LastEditDate': '2014-04-08T14:54:27.627', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16554', 'Tags': '<automata><finite-automata><pushdown-automata>', 'CreationDate': '2014-04-08T13:55:34.987', 'Id': '23551'},9779:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Does anyone know any good introductions to Formal Language theory and Formal Grammar, that cover the mathematical basis of Syntax and things like context free grammars and pushdown automata. In particular, I\'d like to be able to understand:</p>\n\n<p>-Parikh\u2019s theorem</p>\n\n<p>-Pentus\' proof that Lambek-calculus grammars define only context-free stringsets</p>\n\n<p>-the theorem of Chandra, Kozen and Stockmeyer</p>\n\n<p>-B\xfbchi\u2019s theorem and Doner\u2019s theorem</p>\n\n<p>Geoffrey Pullum\'s review <a href="http://www.lel.ed.ac.uk/~gpullum/Rev_Kracht.pdf" rel="nofollow">http://www.lel.ed.ac.uk/~gpullum/Rev_Kracht.pdf</a> has put me off reading a book called "The Mathematics of Language" by Markus Kracht, since I am not sure I have the required level of mathematical maturity. He writes:</p>\n\n<p>"Readers of The Mathematical Intelligencer will probably get on with it well enough, but others should be warned that Kracht assumes a lot of mathematical sophistication: graduate students whose first degree is in humanities or social science may experience symbol shock. Kracht does not pamper those who crave intuitive presentations. He will not explain that a finite automaton accepts exactly those strings on which there is a run beginning in the start state and ending in a final state; he will expect you to see that immediately when he tells you (on p.96) that $L(A) = \\{x \\colon~ \\delta(\\{i_0\\},x)\\cap F \\neq \\emptyset\\}$."</p>\n\n<p>The review has also put me off several other introductions:</p>\n\n<p>"W. J. M. Levelt\u2019s truly excellent 3-volume 1974 textbook [6] had remarkably wide coverage (Lev- elt\u2019s psycholinguistic interests lead him to cover work on \u2018learnability\u2019, also known as grammar induction, which Kracht does not touch on), but sadly has long been out of print. And the standard text by Partee, ter Meulen and Wall [9] is now more than fifteen years behind the leading edge of research, especially with respect to grammars and automata. (Though it was published in 1990, the Partee el al. volume reports as open the question of whether the complement of a context-sensitive stringset is always context-sensitive, which was settled in the affirmative in 1987, at Partee\u2019s insti- tution!) Though strong on formal semantics, it completely misses important topics in other areas (parsing and computational complexity, for example), and it looks positively fusty beside Kracht\u2019s much more up-to-date and considerably more mathematical book."</p>\n\n<p>So I\'d be grateful to hear if there are any introductions to this field which people can recommend.</p>\n', 'ViewCount': '62', 'Title': 'Good introductions to Formal Language Theory and Formal Grammars', 'LastEditorUserId': '13022', 'LastActivityDate': '2014-04-08T23:10:13.477', 'LastEditDate': '2014-04-08T23:10:13.477', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16562', 'Tags': '<formal-languages><context-free><formal-grammars><pushdown-automata>', 'CreationDate': '2014-04-08T18:09:27.717', 'Id': '23557'}