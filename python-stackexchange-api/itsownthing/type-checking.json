55_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '668', 'Title': 'Type-checking algorithms', 'LastEditDate': '2012-04-29T12:25:23.307', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '95', 'FavoriteCount': '4', 'Body': '<p>I am starting a personal bibliographic research on type-checking algorithms and want some tips. What are the most commonly used type-checking algorithms, strategies and general techniques?</p>\n\n<p>I am particularly interested in complex type-checking algorithms that were implemented in widely known strongly static typed languages such as, for example, C++, Java 5+, Scala or others. I.E, type-checking algorithms that are not very simple due to the very simple typing of the underlying language (like Java 1.4 and below).</p>\n\n<p>I am not per se interested in a specific language X, Y or Z. I am interested in type-checking algorithms regardless of the language that they target. If you provide a answer like "language L that you never heard about which is strongly typed and the typing is complex has a type-checking algorithm that does A, B and C by checking X and Y using the algorithm Z", or "the strategy X and Y used for Scala and a variant Z of A used for C# are cool because of the R, S and T features that works in that way", then the answers are nice.</p>\n', 'Tags': '<algorithms><programming-languages><reference-request><type-checking>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-29T12:25:23.307', 'CommentCount': '15', 'AcceptedAnswerId': '152', 'CreationDate': '2012-03-09T05:27:29.120', 'Id': '148'},55_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I\u2019m working on a compiler for a concatenative language and would like to add type inference support. I understand Hindley\u2013Milner, but I\u2019ve been learning the type theory as I go, so I\u2019m unsure of how to adapt it. Is the following system sound and decidably inferable?</p>\n\n<p>A term is a literal, a composition of terms, a quotation of a term, or a primitive.</p>\n\n<p>$$ e ::= x \\:\\big|\\: e\\:e \\:\\big|\\: [e] \\:\\big|\\: \\dots $$</p>\n\n<p>All terms denote functions. For two functions $e_1$ and $e_2$, $e_1\\:e_2 = e_2 \\circ e_1$, that is, juxtaposition denotes reverse composition. Literals denote niladic functions.</p>\n\n<p>The terms other than composition have basic type rules:</p>\n\n<p>$$\n\\dfrac{}{x : \\iota}\\text{[Lit]} \\\\\n\\dfrac{\\Gamma\\vdash e : \\sigma}{\\Gamma\\vdash [e] : \\forall\\alpha.\\:\\alpha\\to\\sigma\\times\\alpha}\\text{[Quot]}, \\alpha \\text{ not free in } \\Gamma\n$$</p>\n\n<p>Notably absent are rules for application, since concatenative languages lack it.</p>\n\n<p>A type is either a literal, a type variable, or a function from stacks to stacks, where a stack is defined as a right-nested tuple. All functions are implicitly polymorphic with respect to the \u201crest of the stack\u201d.</p>\n\n<p>$$\n\\begin{aligned}\n\\tau &amp; ::= \\iota \\:\\big|\\: \\alpha \\:\\big|\\: \\rho\\to\\rho \\\\\n\\rho &amp; ::= () \\:\\big|\\: \\tau\\times\\rho \\\\\n\\sigma &amp; ::= \\tau \\:\\big|\\: \\forall\\alpha.\\:\\sigma\n\\end{aligned}\n$$</p>\n\n<p>This is the first thing that seems suspect, but I don\u2019t know exactly what\u2019s wrong with it.</p>\n\n<p>To help readability and cut down on parentheses, I\u2019ll assume that $a\\:b = b \\times (a)$ in type schemes. I\u2019ll also use a capital letter for a variable denoting a stack, rather than a single value.</p>\n\n<p>There are six primitives. The first five are pretty innocuous. <code>dup</code> takes the topmost value and produces two copies of it. <code>swap</code> changes the order of the top two values. <code>pop</code> discards the top value. <code>quote</code> takes a value and produces a quotation (function) that returns it. <code>apply</code> applies a quotation to the stack.</p>\n\n<p>$$\n\\begin{aligned}\n\\mathtt{dup} &amp; :: \\forall A b.\\: A\\:b \\to A\\:b\\:b \\\\\n\\mathtt{swap} &amp; :: \\forall A b c.\\: A\\:b\\:c \\to A\\:c\\:b \\\\\n\\mathtt{pop} &amp; :: \\forall A b.\\: A\\:b \\to A \\\\\n\\mathtt{quote} &amp; :: \\forall A b.\\: A\\:b \\to A\\:(\\forall C. C \\to C\\:b) \\\\\n\\mathtt{apply} &amp; :: \\forall A B.\\: A\\:(A \\to B) \\to B \\\\\n\\end{aligned}\n$$</p>\n\n<p>The last combinator, <code>compose</code>, ought to take two quotations and return the type of their concatenation, that is, $[e_1]\\:[e_2]\\:\\mathtt{compose} = [e_1\\:e_2]$. In the statically typed concatenative language <a href="http://www.cat-language.com/" rel="nofollow">Cat</a>, the type of <code>compose</code> is very straightforward.</p>\n\n<p>$$\n\\mathtt{compose} :: \\forall A B C D.\\: A\\:(B \\to C)\\:(C \\to D) \\to A\\:(B \\to D)\n$$</p>\n\n<p>However, this type is too restrictive: it requires that the production of the first function <em>exactly match</em> the consumption of the second. In reality, you have to assume distinct types, then unify them. But how would you write that type?</p>\n\n<p>$$ \\mathtt{compose} :: \\forall A B C D E. A\\:(B \\to C)\\:(D \\to E) \\to A \\dots $$</p>\n\n<p>If you let $\\setminus$ denote a <em>difference</em> of two types, then I <em>think</em> you can write the type of <code>compose</code> correctly.</p>\n\n<p>$$\n\\mathtt{compose} :: \\forall A B C D E.\\: A\\:(B \\to C)\\:(D \\to E) \\to A\\:((D \\setminus C)\\:B \\to ((C \\setminus D)\\:E))\n$$</p>\n\n<p>This is still relatively straightforward: <code>compose</code> takes a function $f_1 : B \\to C$ and one $f_2 : D \\to E$. Its result consumes $B$ atop the consumption of $f_2$ not produced by $f_1$, and produces $D$ atop the production of $f_1$ not consumed by $f_2$. This gives the rule for ordinary composition.</p>\n\n<p>$$\n\\dfrac{\\Gamma\\vdash e_1 : \\forall A B.\\: A \\to B \\quad \\Gamma\\vdash e_2 : \\forall C D. C \\to D}{\\Gamma\\vdash e_1 e_2 : ((C \\setminus B)\\:A \\to ((B \\setminus C)\\:D))}\\text{[Comp]}\n$$</p>\n\n<p>However, I don\u2019t know that this hypothetical $\\setminus$ actually corresponds to anything, and I\u2019ve been chasing it around in circles for long enough that I think I took a wrong turn. Could it be a simple difference of tuples?</p>\n\n<p>$$\n\\begin{align}\n\\forall A. () \\setminus A &amp; = () \\\\\n\\forall A. A \\setminus () &amp; = A \\\\\n\\forall A B C D. A B \\setminus C D &amp; = B \\setminus D \\textit{ iff } A = C \\\\\n\\text{otherwise} &amp; = \\textit{undefined}\n\\end{align}\n$$</p>\n\n<p>Is there something horribly broken about this that I\u2019m not seeing, or am I on something like the right track? (I\u2019ve probably quantified some of this stuff wrongly and would appreciate fixes in that area as well.)</p>\n', 'ViewCount': '240', 'Title': 'Type inference with product types', 'LastEditorUserId': '41', 'LastActivityDate': '2012-06-13T19:17:41.510', 'LastEditDate': '2012-06-12T18:08:36.097', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '2346', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1821', 'Tags': '<programming-languages><logic><compilers><type-theory><type-checking>', 'CreationDate': '2012-06-11T04:14:50.140', 'Id': '2326'},55_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>It was brought to my attention that the cost of type inference in a functional language like OCaml can be very high. The claim is that there is a sequence of expressions such that for each expression the length of the corresponding type is exponential on the length of the expression.</p>\n\n<p>I devised the sequence below. My question is: do you know of a sequence with more concise expressions that achieves the same types?</p>\n\n<pre><code># fun a -&gt; a;;\n- : 'a -&gt; 'a = &lt;fun&gt;\n# fun b a -&gt; b a;;\n- : ('a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;\n# fun c b a -&gt; c b (b a);;\n- : (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'c = &lt;fun&gt;\n# fun d c b a -&gt; d c b (c b (b a));;\n- : ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n   (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'd\n= &lt;fun&gt;\n# fun e d c b a -&gt; e d c b (d c b (c b (b a)));;\n- : (((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n    (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'd -&gt; 'e) -&gt;\n   ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n   (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'e\n= &lt;fun&gt;\n# fun f e d c b a -&gt; f e d c b (e d c b (d c b (c b (b a))));;\n- : ((((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n     (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'd -&gt; 'e) -&gt;\n    ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n    (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'e -&gt; 'f) -&gt;\n   (((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n    (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'd -&gt; 'e) -&gt;\n   ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n   (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'f\n= &lt;fun&gt;\n</code></pre>\n", 'ViewCount': '332', 'Title': 'Concise example of exponential cost of ML type inference', 'LastEditorUserId': '4554', 'LastActivityDate': '2012-11-11T20:23:32.303', 'LastEditDate': '2012-11-11T19:48:39.593', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '8', 'OwnerDisplayName': 'mrrusof', 'PostTypeId': '1', 'OwnerUserId': '4554', 'Tags': '<lambda-calculus><type-theory><functional-programming><type-inference><type-checking>', 'CreationDate': '2012-11-11T14:01:45.770', 'Id': '6617'},55_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>From my recitation class  - </p>\n\n<p><img src="http://i.stack.imgur.com/Zn74M.jpg" alt="enter image description here"></p>\n\n<p>Can you please explain </p>\n\n<ul>\n<li><p>why does operator  $"+"$ signature is  $  int \\rightarrow (int \\rightarrow int)$ ?</p></li>\n<li><p>How does this graph is build  ?</p></li>\n<li><p>And what is mean $t=u \\rightarrow s$  ?</p></li>\n</ul>\n\n<p>Thanks in advance . </p>\n', 'ViewCount': '61', 'Title': 'ML - Type Interface', 'LastActivityDate': '2013-02-27T00:50:30.403', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10132', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4409', 'Tags': '<programming-languages><functional-programming><type-inference><type-checking>', 'CreationDate': '2013-02-26T23:54:27.973', 'FavoriteCount': '1', 'Id': '10131'},55_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m working on a type system with extensible records, similar to ones explained in "<a href="http://web.cecs.pdx.edu/~mpj/pubs/polyrec.html" rel="nofollow">A Polymorphic Type System for Extensible Records and Variants - Benedict R. Gaster and Mark P. Jones</a>" and "<a href="http://research.microsoft.com/pubs/65409/scopedlabels.pdf" rel="nofollow">Extensible records with scoped labels - Daan Leijen</a>",</p>\n\n<p>I already have a working implementation but I followed a completely different path for implementation(for example, I didn\'t use kinds, instead I used different variables with different types, this also helped me add arbitrary properties to variables, like absent label list). Now I want to implement it like explained in this two papers,</p>\n\n<p>And the problem is, I can\'t see how can fields and rows with "absent" specifiers can be implemented. Both papers using a simple type constant for record update operations, but types or kinds are not allowing specifying field labels, or absent field names in row variables.</p>\n\n<p>So can anyone help me understand how can field labels and absent fields can be specified in simple kind/type system explained in these two papers?</p>\n\n<p>Thanks in advance.</p>\n\n<p>EDIT: To clarify things,</p>\n\n<p>Here\'s a language of kinds and types described in papers mentioned above: (in haskell syntax)</p>\n\n<pre><code>data Kind = KStar | KRow | KFun Kind Kind\n\ndata Type = TCon Typeconstant\n          | TVar Typevar\n          | TAp Type Type -- type application\n</code></pre>\n\n<p>What I meant to say was I couldn\'t see a way to encode row types with this language. ie. there is no way to encode type of this function:</p>\n\n<pre><code>row_extend r = r.a = 10\n</code></pre>\n\n<p>Because there is now way to tell in types that this function adds or updates \'a field with label <code>a</code>\'.</p>\n\n<p>I can\'t give types to record operations in this language(given as Haskell code above).</p>\n', 'ViewCount': '108', 'Title': 'Encoding row types', 'LastEditorUserId': '5209', 'LastActivityDate': '2013-04-28T10:44:55.337', 'LastEditDate': '2013-04-28T10:44:55.337', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5209', 'Tags': '<type-theory><type-inference><type-checking>', 'CreationDate': '2013-04-27T21:13:14.737', 'FavoriteCount': '1', 'Id': '11613'},55_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am working with HOL-Light parser and keeping seeing references to preterm parser. </p>\n\n<p>What is a preterm parser?</p>\n\n<p>The most informative statement I find is from the <a href="http://www.cl.cam.ac.uk/~jrh13/hol-light/reference.pdf" rel="nofollow">HOL-Light reference</a> for the parse_pretype function.</p>\n\n<blockquote>\n  <p>This is mostly an internal function; pretypes and preterms are used as\n  an intermediate representation for typechecking and overload\n  resolution and are not normally of concern to users.</p>\n</blockquote>\n', 'ViewCount': '47', 'Title': 'What is a preterm parser?', 'LastEditorUserId': '268', 'LastActivityDate': '2013-12-13T17:21:13.157', 'LastEditDate': '2013-10-27T14:17:03.933', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16473', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<lambda-calculus><parsers><type-checking>', 'CreationDate': '2013-06-05T21:59:40.477', 'Id': '12478'},55_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is it possible to use <a href="http://en.wikipedia.org/wiki/Dependent_type" rel="nofollow">Dependent Types</a> in the existing <a href="http://docs.racket-lang.org/ts-guide/" rel="nofollow">Typed Racket</a> implementation? (ie do they exist in it?)</p>\n\n<p>Is it reasonably possible to implement a Dependent Types System using Typed Racket?</p>\n', 'ViewCount': '148', 'Title': 'Is it possible to do Dependent Types in Typed Racket?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-22T00:32:15.773', 'LastEditDate': '2013-10-09T18:43:51.303', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '19183', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1709', 'Tags': '<programming-languages><typing><type-checking><dependent-types><lisp>', 'CreationDate': '2013-10-08T11:39:46.047', 'Id': '14905'},55_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I program in Python, which is a well-known dynamically typed language. I understand dynamic typing to mean mainly that "operations" (in a loose sense) in the language are either allowed or denied (raise an exception) based on the type of their operands, and that this type-checking is deferred as long as possible. My question is this: if that is what a fair characterization of dynamic languages, <strong>what would happen if the run-time type checking was removed</strong>?</p>\n\n<p>It seems to me that if you want to make a meaningful distinction between a dynamically typed language like Python and an <em>untyped</em> language, you would have to define what actually would happen in the untyped language in situations in which the type system of a dynamic language would take action. For example, in Python, if I attempt to subtract an Integer from a String, e.g., "spam" - 5, I receive a TypeError. If that\'s what makes Python dynamically typed, what would an "untyped Python" do in that situation?</p>\n', 'ViewCount': '212', 'Title': 'What would dynamically-typed languages actually do if type enforcement was removed?', 'LastActivityDate': '2013-11-13T19:37:58.013', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '17996', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5291', 'Tags': '<programming-languages><type-theory><type-checking>', 'CreationDate': '2013-11-13T15:48:41.380', 'Id': '17987'},55_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'd like to have this feature in my application programming language (which these days, is Scala), but when I went to learn more about it on the internets, I realized I don't know the name of it.  I'm talking about the ability to do this (in Scala-ish pseudocode):</p>\n\n<pre><code>// Define some types that correspond to table rows in relational DB\nclass User \n   val id: Int\n   val name: String\n   val email: String\n   val created: DateTime\n\nclass Comment\n   val id: Int\n   val text: String\n   val userId: Int\n   val created: DateTime\n\n// Call a select/join query function\nval list = select c.id, c.text, u.name\n           from comments c join user u on c.userId = u.id ...\n</code></pre>\n\n<p>And then <code>list</code> gets a type of something like <code>List[R]</code> where <code>R</code> is an unnamed record type with properties <code>id</code>, <code>text</code>, <code>name</code>, or maybe <code>c.id</code>,<code>c.text</code>,<code>u.name</code>.  </p>\n\n<p>Some languages, like Scala, support you writing that select function so it returns a tuple type <code>(Int, String, String)</code>, but not a type with <em>named</em> fields.  </p>\n\n<p>Is there a name for that?</p>\n", 'ViewCount': '46', 'Title': "In type systems, is there a name for SQL's way of cutting and combining record types into new types?", 'LastEditorUserId': '268', 'LastActivityDate': '2013-12-20T18:10:56.257', 'LastEditDate': '2013-12-19T23:13:15.347', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '19162', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '12246', 'Tags': '<type-theory><type-checking><notation>', 'CreationDate': '2013-12-19T23:07:48.913', 'Id': '19134'},55_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to develop an interpreter. In the language, you have values and variables and types. The literals (the values) belong to some basic type. The subtypes can constrain the range of values. The spec says that making assignment, we ensure that the value assigned is assignable to the target (variable) range. Is it worth do the check on every assignment or ensure statically? How do you ensure it statically? </p>\n\n<p>In the current implementation, I see that a type is attached to every value object. Are there are better approaches?</p>\n', 'ViewCount': '30', 'Title': 'Type checking on assignment', 'LastActivityDate': '2014-01-14T15:55:04.517', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2879', 'Tags': '<type-checking><interpreters>', 'CreationDate': '2014-01-14T14:16:05.863', 'Id': '19712'},55_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m going to take the few pieces of knowledge I have about lambda calculi and ask a pair of very uninformed questions :-)</p>\n\n<p>Is it possible to "embed" the corners of the lambda cube within the untyped lambda calculus?  </p>\n\n<p>It would seem that this might lead to a language where the programmer implements the type system in the language, rather than having it already implemented in the compiler.  Also, maybe the concept of type system could be generalized to "any arbitrary compile-time or run-time constraint checking".  Does such a language already exist?</p>\n', 'ViewCount': '65', 'Title': 'Can type information be encoded in the untyped lambda calculus?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-17T08:42:03.753', 'LastEditDate': '2014-01-17T08:42:03.753', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12900', 'Tags': '<programming-languages><lambda-calculus><typing><type-checking>', 'CreationDate': '2014-01-16T17:13:25.953', 'Id': '19767'},55_11:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In another <a href="http://cs.stackexchange.com/q/19767/268">question</a> about Lambda Calculus, Andrej Bauer made the comment:</p>\n\n<blockquote>\n  <p>Lambda calculi of various forms are formal systems. They consist of\n  abstract syntax (for terms and for types, if present), judgments\n  (typing judgments and equations), and rules of inference. They are not\n  programming languages (unless we prescribe operational semantics) and\n  neither is it the case that a type system equals a program that checks\n  types. So I think this whole question is a bit misdirected, still. Of\n  course, an important aspect of a type system is how to implement it on\n  a computer, which brings in questions about algorithms, etc. But a\n  priori, the type system has none of that.</p>\n</blockquote>\n\n<p>I understand most of this, but I cannot wrap a logical understanding around:</p>\n\n<blockquote>\n  <p>neither is it the case that a type system equals a program that checks types.</p>\n</blockquote>\n\n<p>My understanding of a type system is that it is a set of rules in a formal system used to determine if a type is valid in a context and that those rules, via implementation, are used to establish the validity of a use of a type in a context in a programming language. </p>\n\n<p>However the statement has me thinking there is no connection, or that there is more meaning to the statement but I don\'t see the details to separate a type system from a program or make a logical connection between the two so that the statement makes sense.</p>\n\n<p>What is the relation between a type system and a program?</p>\n', 'ViewCount': '65', 'Title': 'How is a type system related to a progam?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T21:46:04.050', 'LastEditDate': '2014-01-17T21:44:52.757', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '21329', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<programming-languages><type-theory><typing><type-checking>', 'CreationDate': '2014-01-17T18:35:03.183', 'Id': '19789'},55_12:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Java seems to be categorized as a statically-typed language<a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29" rel="nofollow"> [1]</a>, but I\'m wondering if it would be accurate to describe it as generally statically-typed but having some dynamic typing because of the run-time type checks performed when downcasts are performed.</p>\n', 'ViewCount': '44', 'Title': 'Can Java be accurately described as statically and dynamically typed?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-08T08:10:46.977', 'LastEditDate': '2014-04-07T23:33:02.310', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23536', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '40', 'Tags': '<terminology><programming-languages><typing><type-checking>', 'CreationDate': '2014-04-07T17:47:03.420', 'Id': '23521'},55_13:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I am trying to extend an existing UTP theory package(Isabelle/UTP) by introducing a new type for use in encoding a custom framework built on UTP. <code>MkName</code> is a type constructor, <code>fset</code> basically restricts <code>VAR</code> to finite sets. The type <code>@{term "UTYPE"}</code> consists of the set of types which, according to the typing relation, have at least one defined value. <code>WF_PREDICATE_OVER</code> calculates all predicates which satisfy the given argument(alphabet). <code>\u03c0 p = snd(WF_ALPHA_PREDICATE)</code> . <code>&lt;_&gt;\u21e9f</code> is <code>Rep</code> function for <code>fset</code>.  <code>\u03b9\u03c0 p = snd(WF_ALPHA_PREDICATE)</code></p>\n\n<pre><code>(*--------- from Isabelle/UTP package -------*)\n\ndefinition fsets :: "\'a set set" where "fsets = Collect finite"\ntypedef \'a fset = "fsets :: \'a set set"  by (auto simp add:fsets_def)\nnotation Rep_fset ("&lt;_&gt;\u21e9f")    \n\nclass DEFINED = fixes Defined   :: "\'a \u21d2 bool" ("D")\ndefinition "UTYPES (x::\'a itself) = {t. \u2203 v :: \'a. v :\u21e9u t \u2227 D v}"\ntypedef \'VALUE UTYPE = "UTYPES TYPE(\'VALUE)"    \n\ndatatype NAME = MkName string nat\n\ntype_synonym \'VALUE VAR = "NAME \xd7 \'VALUE UTYPE \xd7 bool"\ndefinition VAR :: "\'VALUE VAR set" where "VAR = UNIV"\n\ntype_synonym \'VALUE ALPHABET = "(\'VALUE VAR) fset"\ntype_synonym \'VALUE ALPHA_PREDICATE = "(\'VALUE ALPHABET) \xd7 \'VALUE WF_PREDICATE"\n\ntype_synonym \'VALUE BINDING = "(\'VALUE VAR) \u21d2 \'VALUE"\ntypedef \'VALUE WF_BINDING   = "WF_BINDING :: \'VALUE BINDING set"\ntypedef \'VALUE WF_PREDICATE = "UNIV :: \'VALUE WF_BINDING set set"\n\ndefinition WF_ALPHA_PREDICATE :: "\'VALUE ALPHA_PREDICATE set" where\n    "WF_ALPHA_PREDICATE = {(a,p) | a p . p \u2208 WF_PREDICATE_OVER &lt;a&gt;\u21e9f}"\n\ntypedef \'a WF_ALPHA_PREDICATE = "WF_ALPHA_PREDICATE :: \'a ALPHA_PREDICATE set"\n\n\n(*--------- My Code -------*)\ntype_synonym \'VALUE LA_PREDICATE = "(\'VALUE ALPHABET) \xd7 (\'VALUE WF_ALPHA_PREDICATE)"\n\ndefinition WF_LA_PREDICATE :: "\'VALUE LA_PREDICATE set" where\n"WF_LA_PREDICATE = {(a::\'VALUE ALPHABET, p::\'VALUE WF_ALPHA_PREDICATE) | a p . \n       (\u03c0 p) \u2208 WF_PREDICATE_OVER (VAR - &lt;a&gt;\u21e9f) }" \n\ntypedef \'VALUE WF_LA_PREDICATE = "WF_LA_PREDICATE :: \'VALUE LA_PREDICATE set"\n\nlift_definition Exists1 ::\n  "\'VALUE ALPHABET \u21d2 \'VALUE WF_LA_PREDICATE \u21d2 \'VALUE WF_LA_PREDICATE" is\n  "\u03bb a p . ( \u03b1 p, \u2203\u21e9\u03b1 Abs_fset(VAR) -\u21e9f a .  \u03b9\u03c0 p)"\n</code></pre>\n\n<p>The lift definition results in the following error.</p>\n\n<p>Lifting failed for the following types:\nRaw type:  (NAME \xd7 \'a UTYPE \xd7 bool) fset \xd7 \'a WF_ALPHA_PREDICATE\nAbstract type:  \'VALUE WF_LA_PREDICATE</p>\n\n<p>Reason:\n  The <em>quotient type</em> "\'VALUE WF_LA_PREDICATE" and the <em>quotient type pattern</em> "?\'a WF_LA_PREDICATE"  don\'t match.</p>\n\n<p>What would be a valid definition for Exists1???\nWhat is the syntax I\'m writing wrong? </p>\n', 'ViewCount': '25', 'ClosedDate': '2014-04-29T22:32:36.733', 'Title': "Isabelle : quotient type and quotient type pattern don't match", 'LastActivityDate': '2014-04-29T14:15:04.437', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17180', 'Tags': '<formal-languages><type-theory><functional-programming><type-inference><type-checking>', 'CreationDate': '2014-04-29T14:15:04.437', 'Id': '24223'}