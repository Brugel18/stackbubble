{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>When we look at the <a href="http://en.wikipedia.org/wiki/Actor_model" rel="nofollow">Actor Model</a> and <a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes" rel="nofollow">Communicating Sequential Processes</a> we see that they are both trying to do <a href="http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29" rel="nofollow">concurrency</a> based on <a href="http://en.wikipedia.org/wiki/Message_passing" rel="nofollow">message passing</a>, yet <a href="http://en.wikipedia.org/wiki/Actor_model#Contrast_with_other_models_of_message-passing_concurrency" rel="nofollow">they are distinct</a>. </p>\n\n<p>(We see implementations of the <a href="http://en.wikipedia.org/wiki/JCSP#Overview" rel="nofollow">CSP Model</a> in <a href="http://golang.org/" rel="nofollow">go-lang</a>\'s <a href="https://gobyexample.com/goroutines" rel="nofollow">goroutines</a> (and <a href="http://en.wikipedia.org/wiki/Clojure" rel="nofollow">Clojure\'s</a> <a href="https://github.com/clojure/core.async" rel="nofollow">core.async</a>) and the Actor Model in <a href="http://en.wikipedia.org/wiki/Scala_%28programming_language%29" rel="nofollow">Scala\'s</a> <a href="http://en.wikipedia.org/wiki/Akka_%28toolkit%29" rel="nofollow">Akka</a> toolkit)</p>\n\n<p>I\'m trying to get a simple list of the differences between the Actor Model and CSP. So far I have:</p>\n\n<ul>\n<li>actors message passing is asynchronous, CSP message passing is synchronous</li>\n<li>actors are <a href="http://en.wikipedia.org/wiki/Actor_model#Composing_Actor_Systems" rel="nofollow">composable</a>, CSP is not (necessarily)</li>\n<li>actors <a href="http://en.wikipedia.org/wiki/Actor_model#Unbounded_nondeterminism_controversy" rel="nofollow">always</a> have <a href="http://en.wikipedia.org/wiki/Unbounded_nondeterminism" rel="nofollow">unbounded non-determinism</a>, CSP may have <a href="http://en.wikipedia.org/wiki/Actor_model#Contrast_with_other_models_of_message-passing_concurrency" rel="nofollow">bounded or unbounded non-determinism</a></li>\n<li>actors have <a href="http://en.wikipedia.org/wiki/Actor_model#Actor_creation_plus_addresses_in_messages_means_variable_topology" rel="nofollow">variable topology</a> whereas CSP has fixed topology</li>\n<li>actors have the <a href="http://en.wikipedia.org/wiki/Locality_of_reference" rel="nofollow">principle of locality</a>, CSP does not have locality</li>\n<li>actors are designed around their behaviour, CSP doesn\'t not necessarily have this</li>\n</ul>\n\n<p>Is this correct? Is there anything I\'m missing?</p>\n\n<p><strong>Assumptions</strong></p>\n\n<ul>\n<li>When I say \'actor model\' - I mean the theoretical basis behind the implementation in Scala\'s Akka framework</li>\n</ul>\n', 'ViewCount': '140', 'Title': 'Differences between the Actor Model and Communicating Sequential Processes (CSP)', 'LastEditorUserId': '1709', 'LastActivityDate': '2014-01-07T22:10:41.857', 'LastEditDate': '2014-01-07T22:10:41.857', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '19560', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1709', 'Tags': '<concurrency><message-passing><actor-model>', 'CreationDate': '2014-01-05T04:25:23.293', 'Id': '19506'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m studying Distributed Systems and synchronization and I didn\'t catch this solution of totally ordered multicast with Lamport timestamps. I read that it doesn\'t need ack to deliver a message to the application, but</p>\n\n<blockquote>\n  <p>"It is sufficient to multicast any other type of message, as long as that message has a timestamp larger than the received message. The condition for delivering a message m to the application, is that another message has been received from each other process with a large timestamp. This guarantees that there are no more messages underway with a lower timestamp."</p>\n</blockquote>\n\n<p>This is a definition from a book. I tried to apply this definition to an example but I guess that something is wrong.</p>\n\n<h3>Example.</h3>\n\n<blockquote>\n  <p>There are 4 processes and they multicast the following messages (second number in parentheses is timestamp) :<br>\n  P1 multi-casts (m11, 5);  (m12, 12); (m13, 14);<br>\n  P2 multi-casts (m21, 6); (m22, 14);<br>\n  P3 multi-casts (m31, 5); (m32, 7); (m33, 11);<br>\n  P4 multi-casts (m41, 8); (m42, 15); (m43, 19).</p>\n</blockquote>\n\n<p>Supposing that there are no acknoledgments, can I guess which messages can be delivered and which not? Based on definition, my guess is that only m11 and m31 can be delivered to the application, because all the other messages received will have a timestamp greater, but this seems very strange, and I think I didn\'t understand the delivery condition very well. I have an exam next week and in general I\'d like to understand this mechanism.</p>\n', 'ViewCount': '73', 'Title': 'totally ordered multicast with Lamport timestamp', 'LastEditorUserId': '16819', 'LastActivityDate': '2014-04-20T13:25:52.457', 'LastEditDate': '2014-04-20T13:25:52.457', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16819', 'Tags': '<distributed-systems><computer-networks><synchronization><communication-protocols><message-passing>', 'CreationDate': '2014-04-16T07:26:03.173', 'FavoriteCount': '1', 'Id': '23847'}}