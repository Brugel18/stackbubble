{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have this confusion related to the time complexity of FFT. I was reading this book related to Design and Analysis of Algorithms and I came across FFT.</p>\n\n<p>It says that lets say I have a polynomial of degree n-1. I want to evaluate the polynomial at $2n^{th}$ roots of unity. For that I can use divide and conquer rule</p>\n\n<p>I will divide my polynomial into evens and odds i.e,</p>\n\n<p>$A(x) = A_{even}(x^2) + xA_{odd}(x^2)$</p>\n\n<p>Now if I want to evaluate A at one of the  $2n^{th}$ roots of unity. I can break it into evaluating the $n^{th}$ root of unity at two polynomials $A_{even}$ and $A_{odd}$ and then add the results with complexity O(n).</p>\n\n<p>They have shown the results to be O(nlogn). However, I think this is for evaluating the value of the polynomial at one of the roots not all the $2n^{th}$.  But the book seems to say it is the total complexity. I am a bit confused.</p>\n\n<p>Can anyone please explain this to me? I am confused</p>\n', 'ViewCount': '33', 'Title': 'Confusion related to time complexity of fast fourier transform', 'LastEditorUserId': '157', 'LastActivityDate': '2013-02-23T22:36:17.030', 'LastEditDate': '2013-02-23T21:43:22.033', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6999', 'Tags': '<algorithm-analysis><fourier-transform>', 'CreationDate': '2013-02-23T21:22:04.400', 'Id': '10037'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How would you explain why the Fast Fourier Transform is faster than the Discrete Fourier Transform, if you had to give a presentation about it for the general (non-mathematical) public?</p>\n', 'ViewCount': '978', 'Title': 'Explaining why FFT is faster than DFT for the general public?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-18T11:54:12.870', 'LastEditDate': '2013-04-18T08:25:48.223', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7239', 'Tags': '<algorithms><efficiency><education><didactics><fourier-transform>', 'CreationDate': '2013-04-17T22:22:57.513', 'Id': '11371'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '361', 'Title': 'FFT-less $O(n\\log n)$ algorithm for pairwise sums', 'LastEditDate': '2013-04-20T15:02:37.317', 'AnswerCount': '1', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '139', 'FavoriteCount': '5', 'Body': '<p>Suppose we are given $n$ distinct integers $a_1, a_2, \\dots, a_n$, such that $0 \\le a_i \\le kn$ for some constant $k \\gt 0$, and for all $i$.</p>\n\n<p>We are interested in finding the counts of all the possible pairwise sums $S_{ij} = a_i + a_j$. ($i = j$ is allowed).</p>\n\n<p>One algorithm is to construct the polynomial $P(x) = \\sum_{j=1}^{n} x^{a_j}$ of degree $\\le kn$, and compute its square using the Fourier transform method and read off the powers with their coefficients in the resulting polynomial. This is an $O(n \\log n)$ time algorithm.</p>\n\n<p>I have two questions:</p>\n\n<ul>\n<li><p>Is there an $O(n \\log n)$ algorithm which does not use FFT? </p></li>\n<li><p>Are better algorithms known (i.e $o(n \\log n)$)? (FFT allowed).</p></li>\n</ul>\n', 'Tags': '<algorithms><time-complexity><fourier-transform>', 'LastEditorUserId': '139', 'LastActivityDate': '2013-11-04T01:13:21.093', 'CommentCount': '4', 'AcceptedAnswerId': '16667', 'CreationDate': '2013-04-20T00:51:54.663', 'Id': '11418'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Sometimes the terms \'Fourier domain\', \'complex frequency domain\', \'Frequency domain\' and \'s domain\' are used interchangeably. Take <a href="http://answers.yahoo.com/question/index?qid=20090924230321AAxvnJg" rel="nofollow">these answers here</a> for example.</p>\n\n<p>Can you really use them interchangeably all the time, without being technically wrong? So, could you describe what would be wrong if I would replace \'s domain\' by \'fourier domain\' for example? Or replacing \'complex frequency domain\' by \'frequency domain\'?</p>\n', 'ViewCount': '122', 'Title': 'How to distinguish between the different frequency domains?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-23T22:00:06.350', 'LastEditDate': '2013-04-21T15:10:19.783', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7239', 'Tags': '<terminology><fourier-transform>', 'CreationDate': '2013-04-21T08:14:11.533', 'Id': '11460'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Image on the top is in the time domain, image on the bottom is in the frequency domain. <img src="http://i.stack.imgur.com/tlfJG.png" alt="enter image description here"></p>\n\n<p>Why do we see -2T and 2T on image of the time domain and why do we see -1/2T and 1/2T of the image in the frequency domain?</p>\n', 'ViewCount': '50', 'Title': 'Intuitive way to understand the triangle spectrum?', 'LastActivityDate': '2013-05-21T01:56:59.327', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7239', 'Tags': '<fourier-transform>', 'CreationDate': '2013-05-20T20:41:31.873', 'Id': '12171'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider this small picture of a sunflower, and its histogram:</p>\n\n<p><img src="http://i.stack.imgur.com/Bbh3z.jpg" alt="Picture of a sunflower"> <img src="http://i.stack.imgur.com/yZ9fs.jpg" alt="Histogram for the sunflower picture"></p>\n\n<blockquote>\n  <p>What would the Fourier transform of the first picture look like?  Is there any relationship between the histogram and the Fourier transform?</p>\n</blockquote>\n', 'ViewCount': '204', 'Title': 'What the difference between the Fourier Transform of an image and an image histogram?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T21:03:53.853', 'LastEditDate': '2013-06-06T21:03:53.853', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8005', 'Tags': '<image-processing><graphics><fourier-transform>', 'CreationDate': '2013-06-06T18:36:09.453', 'Id': '12497'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Take the image and spectrum below. \nIf I look at the spectrum, it just look like noise....\nHow to make sense of it intuitively?</p>\n\n<p>Image:</p>\n\n<p><img src="http://i.stack.imgur.com/YwVP7.jpg" alt="original image"></p>\n\n<p>Frequency spectrum of image (using Fourier Transform):</p>\n\n<p><img src="http://i.stack.imgur.com/LQEMw.png" alt="frequency spectrum via fourier transformation"></p>\n', 'ViewCount': '42', 'Title': 'How can you see which points in the spectrum is from which pixel in the original image?', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-06-09T14:39:59.397', 'LastEditDate': '2013-06-09T13:47:03.173', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'user8005', 'PostTypeId': '1', 'OwnerUserId': '8005', 'Tags': '<image-processing><fourier-transform>', 'CreationDate': '2013-06-09T02:22:10.053', 'Id': '12561'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I want to write a classical software simulator of a quantum circuit with $N$ qubits.  When it comes time to simulate the quantum Fourier transform I can evaluate all $2^N$ states to determine the probability amplitudes, and then perform a Fast-Fourier Transform on the probability amplitudes in time $o(N 2^N)$.  Finally in $o(2^N)$ time I can generate a scan of the partial sums of the probabilities of all the result states.  Then I can choose a random number in the range $[0,1]$ and use it to do a binary search of the partial sums.</p>\n\n<p>This results in a simulator that, each time is run outputs a single $N$ bit binary number with the probability distribution predicted by theory.</p>\n\n<p>Can I do better?  Of course I can\'t do exponentially better in general, but perhaps I could reduce the time to simulate a single experiment to $o(2^N)$?</p>\n\n<p>I can do significantly better under some circumstances.  For example, <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.135.7607">Gilbert, Guha, Indyk, Muthukrishnan, and Strauss, "Near-Optimal Sparse Fourier Representations via Sampling", <em>ACM Symp Theory Comp</em>, STOC-44:152-161, 2002,</a> seems to indicate that if there are only $B$ frequencies (or if the $B$ frequencies make up "most" of the power of the signal) then there is a randomized algorithm that will recover all of them (and their amplitudes) in time, space and number of samples polynomial in $B$ and $N$.</p>\n\n<p>I guess I\'m hoping for something like that, but only to get one frequency, and to have some guarantee that the probability of getting a particular frequency will be proportional to the amplitude of its coefficient.</p>\n', 'ViewCount': '61', 'Title': '(Slightly) faster simulation of quantum Fourier transform', 'LastActivityDate': '2013-07-18T03:50:14.887', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7459', 'Tags': '<randomized-algorithms><quantum-computing><fourier-transform>', 'CreationDate': '2013-07-18T03:50:14.887', 'FavoriteCount': '1', 'Id': '13325'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I know how to use the FFT for multiplying two equations in $O(n\\,log\\,n)$ time, but is there a way to use FFT to compute the expanded equation before simplifying?</p>\n\n<p>For example, if you are multiplying $A(x) = 1 + 2x + 6x^2$ and $B(x) = 4 + 5x + 3x^2$ such that you get $C(x) = A(x) \\cdot B(x) = 4 + 5x + 3x^2 + 8x + 10x^2 + 6x^3 + 24x^2 + 30x^3 + 18x^4$ without going directly to the simplified answer?</p>\n\n<p>Furthermore, is it possible to use FFT to do this expanded form multiplication in $O(n\\,log\\,n)$ time? If so, can you show me how to apply FFT to this scenario?</p>\n', 'ViewCount': '76', 'Title': 'FFT for expanded form of equation multiplication', 'LastEditorUserId': '10052', 'LastActivityDate': '2014-03-31T23:46:56.920', 'LastEditDate': '2013-09-22T04:25:36.837', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '14510', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10052', 'Tags': '<algorithms><algorithm-analysis><randomized-algorithms><fourier-transform>', 'CreationDate': '2013-09-22T04:17:41.320', 'Id': '14509'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://courses.csail.mit.edu/6.046/spring04/handouts/prac-quiz2-sol.pdf" rel="nofollow">http://courses.csail.mit.edu/6.046/spring04/handouts/prac-quiz2-sol.pdf</a></p>\n\n<p>I\'m confused as to the solution for the snowball question. To start with, I have two specific questions:</p>\n\n<p>(1) Each pair $a_i,b_j$ will account for one term (and why ONE term)? What is meant by term here? The coefficient, $c_k$ of the polynomial C? Or maybe the $x$ value at the $kth$ spot?</p>\n\n<p>(2) Why is $c_k$ the number of such pairs?</p>\n', 'ViewCount': '50', 'Title': 'Snowball Question FFT', 'LastEditorUserId': '10599', 'LastActivityDate': '2013-10-19T23:11:09.083', 'LastEditDate': '2013-10-19T22:37:55.200', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16242', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10599', 'Tags': '<algorithms><fourier-transform><polynomials>', 'CreationDate': '2013-10-19T22:30:58.810', 'Id': '16240'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Say you have two polynomials: $3 + x$ and $2x^2 + 2$.</p>\n\n<p>I'm trying to understand how FFT helps us multiply these two polynomials. However, I can't find any worked out examples. Can someone show me how FFT algorithm would multiply these two polynomials. (Note: there is nothing special about these polynomials, but I wanted to keep it simple to make it easier to follow.) </p>\n\n<p>I've looked at the algorithms in pseudocode, but all of them seem to be have problems (don't specify what the input should be, undefined variables). And surprisingly, I can't find where anyone has actually walked through (by hand) an example of multiplying polynomials using FFT.</p>\n", 'ViewCount': '464', 'Title': 'Show how to do FFT by hand', 'LastActivityDate': '2013-10-21T01:34:40.843', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16272', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '10599', 'Tags': '<algorithms><fourier-transform><divide-and-conquer>', 'CreationDate': '2013-10-20T19:59:33.633', 'Id': '16266'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an ensemble of points in 3D space, represented by their coordinates $\\mathbf{c_i}\\equiv(x_i,y_i,z_i)^\\top$ . I need to calculate</p>\n\n<ul>\n<li>the distance between all these points: $\\quad\\forall i,j\\quad d_{ij} \\equiv |\\mathbf{d_{ij}}|\\equiv |\\mathbf{c_j}-\\mathbf{c_i}|$</li>\n<li>the scalar product between all distances that share a common coordinate. $\\quad\\forall i,j,k\\quad \\mathbf{d_{ij}}\\cdot\\mathbf{d_{ik}}$</li>\n</ul>\n\n<p>What is the fastest way to do this on a single thread? Is Fourier space going to be of any use? Can it be parallelized to make it even faster? If approximations are proposed, they should come with an error bound.</p>\n', 'ViewCount': '26', 'Title': 'fastest way to compute scalar product of an ensemble of vectors', 'LastActivityDate': '2013-12-01T01:22:24.163', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11724', 'Tags': '<algorithms><graphs><parallel-computing><fourier-transform>', 'CreationDate': '2013-12-01T01:22:24.163', 'Id': '18497'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In the plot squared length of Fourier coefficients vs frequency, the peak gives the strongest frequency. does it give the accurate value of period??\nIs it like a single frequency in frequency domain corresponds to a range of periods??</p>\n', 'ViewCount': '23', 'ClosedDate': '2014-03-14T12:05:42.803', 'Title': 'finding period using fourier transform', 'LastActivityDate': '2014-03-13T07:59:18.197', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15446', 'Tags': '<fourier-transform>', 'CreationDate': '2014-03-13T07:59:18.197', 'Id': '22576'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>This question is from a practice exam in my algorithms class. I'm posting the question and the answer listed in that practice exam:</p>\n\n<blockquote>\n  <p>Let $W$ be an $n\\times n$ matrix whose $(i,j)$-th entry is $\\omega_n^{ij}$, where $\\omega_n$ is a principal $n$th root of unity. Let $X=(X_0,\\dots,X_{n-1})$ be an $n$-vector. The product $W \\times X$ can be computed in $O(n\\log n)$ time. Let $FFT(X)$ denote the vector that results by applying the FFT evaluation algorithm to the vector $X$. </p>\n  \n  <p>Describe an $O(n)$ algorithm to compute $FFT(FFT(x))$.</p>\n  \n  <p>Answer: $FFT(FFT(x))$ is $W^2\\times X$<br>\n  $(W^2)_{jk} = 0$ if $j+k$ is not a multiple of $n$, and $n$ otherwise.</p>\n</blockquote>\n\n<p>I'm confused about everything:<br>\n1. How does this run in $O(n)$? To compute $(W^2)_{jk}$ I'm already  iterating through $n^2$ elements....<br>\n2. Why is $FFT(FFT(x)) = W^2\\times X$?<br>\n3. Why is $(W^2)_{jk} = 0$ if $j+k$ is not a multiple of $n$, $n$ otherwise?</p>\n\n<p>I would appreciate an answer that isn't too advanced as my math skills are limited to basic undergrad math classes of an engineering major.</p>\n", 'ViewCount': '40', 'Title': 'An $O(n)$ algorithm to FFT-evaluate an FFT evaluation', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-30T18:54:56.350', 'LastEditDate': '2014-04-30T18:54:56.350', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24270', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '17225', 'Tags': '<algorithms><algorithm-analysis><fourier-transform>', 'CreationDate': '2014-04-30T18:13:56.290', 'Id': '24269'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '23', 'Title': 'How to evaluate all derivatives of a polynomial at a point with FFT?', 'LastEditDate': '2014-05-02T13:58:05.833', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17225', 'Body': u'<p>I found <a href="http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap32.htm" rel="nofollow">this problem</a>:</p>\n\n<blockquote>\n  <p>Evaluating all derivatives of a polynomial at a point</p>\n  \n  <p>Given a polynomial A(x) of degree-bound n, its tth derivative is\n  defined by</p>\n  \n  <p><img src="http://i.stack.imgur.com/veEuK.gif" alt="http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/798_a.gif"></p>\n  \n  <p>From the coefficient representation $(a_0, a_1, . . . , a_{n-1})$ of A(x) and\n  a given point $x_0$, we wish to determine A(t) ($x_0$) for t = 0, 1, . . . ,\n  n - 1.</p>\n</blockquote>\n\n<p>I know the vector of the coefficients has to be used and I also know that the derivative of a term $ax^n$ is $a*n*x^{n-1}$, but where do I go from there?</p>\n\n<p>I can only think of the na\xefve scheme to evaluate this: Find the first derivative ($O(n)$), evaluate it using Horner\'s method ($O(n)$). Repeat this for all deterivaties, giving $(O(n^2)$).</p>\n', 'ClosedDate': '2014-05-03T02:03:02.020', 'Tags': '<fourier-transform>', 'LastEditorUserId': '17225', 'LastActivityDate': '2014-05-02T14:08:27.793', 'CommentCount': '1', 'AcceptedAnswerId': '24316', 'CreationDate': '2014-05-02T12:49:55.110', 'Id': '24314'}