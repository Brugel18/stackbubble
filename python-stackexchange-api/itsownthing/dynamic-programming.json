{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have been working on dynamic programming for some time. The canonical way to evaluate a dynamic programming recursion is by creating a table of all necessary values and filling it row by row. See for example <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=11866">Cormen, Leiserson et al: "Introduction to Algorithms"</a> for an introduction.</p>\n\n<p>I focus on the table-based computation scheme in two dimensions (row-by-row filling) and investigate the structure of cell dependencies, i.e. which cells need to be done before another can be computed. We denote with $\\Gamma(\\mathbf{i})$ the set of indices of cells the cell $\\mathbf{i}$ depends on. Note that $\\Gamma$ needs to be cycle-free.</p>\n\n<p>I abstract from the actual function that is computed and concentrate on its recursive structure. Formally, I consider a recurrrence $d$ to be <em>dynamic programming</em> if it has the form</p>\n\n<p>$\\qquad d(\\mathbf{i}) = f(\\mathbf{i}, \\widetilde{\\Gamma}_d(\\mathbf{i}))$</p>\n\n<p>with $\\mathbf{i} \\in [0\\dots m] \\times [0\\dots n]$, $\\widetilde{\\Gamma}_d(\\mathbf{i}) = \\{(\\mathbf{j},d(\\mathbf{j})) \\mid \\mathbf{j} \\in \\Gamma_d(\\mathbf{i}) \\}$ and $f$ some (computable) function that does not use $d$ other than via $\\widetilde{\\Gamma}_d$.</p>\n\n<p>When restricting the granularity of $\\Gamma_d$ to rough areas (to the left, top-left, top, top-right, ... of the current cell) one observes that there are essentially three cases (up to symmetries and rotation) of valid dynamic programming recursions that inform how the table can be filled:</p>\n\n<p><img src="http://i.stack.imgur.com/AhnK7.png" alt="Three cases of dynamic programming cell dependencies"></p>\n\n<p>The red areas denote (overapproximations of) $\\Gamma$. Cases one and two admit subsets, case three is the worst case (up to index transformation). Note that it is not strictly required that the <em>whole</em> red areas are covered by $\\Gamma$; <em>some</em> cells in every red part of the table are sufficient to paint it red. White areas are explictly required to <em>not</em> contain any required cells.</p>\n\n<p>Examples for case one are <a href="https://en.wikipedia.org/wiki/Edit_distance">edit distance</a> and <a href="https://en.wikipedia.org/wiki/Longest_common_subsequence_problem#Code_for_the_dynamic_programming_solution">longest common subsequence</a>, case two applies to <a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm">Bellman &amp; Ford</a> and <a href="https://en.wikipedia.org/wiki/CYK">CYK</a>. Less obvious examples include such that work on the diagonals rather than rows (or columns) as they can be rotated to fit the proposed cases; see <a href="http://cs.stackexchange.com/a/211/98">Joe\'s answer</a> for an example.</p>\n\n<p>I have no (natural) example for case three, though! So my question is: What are examples for case three dynamic programming recursions/problems?</p>\n', 'ViewCount': '806', 'Title': 'A Case Distinction on Dynamic Programming: Example Needed!', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-24T16:54:31.097', 'LastEditDate': '2012-03-13T10:04:12.807', 'AnswerCount': '5', 'CommentCount': '2', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2012-03-10T13:26:09.637', 'FavoriteCount': '2', 'Id': '196'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1066', 'Title': 'Deciding on Sub-Problems for Dynamic Programming', 'LastEditDate': '2012-03-25T16:36:58.410', 'AnswerCount': '3', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '106', 'FavoriteCount': '8', 'Body': '<p>I have used the technique of dynamic programming multiple times however today a friend asked me how I go about defining my sub-problems, I realized I had no way of providing an objective formal answer. How do you formally define a sub-problem for a problem that you would solve using dynamic programming?</p>\n', 'Tags': '<algorithms><dynamic-programming>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-25T16:36:58.410', 'CommentCount': '0', 'AcceptedAnswerId': '647', 'CreationDate': '2012-03-22T03:30:10.270', 'Id': '645'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '3631', 'Title': 'Knapsack problem -- NP-complete despite dynamic programming solution?', 'LastEditDate': '2012-03-31T07:11:40.927', 'AnswerCount': '3', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '848', 'FavoriteCount': '5', 'Body': '<p>Knapsack problems are easily solved by dynamic programming. Dynamic programming runs in polynomial time; that is why we do it, right?</p>\n\n<p>I have read it is actually an NP-complete problem, though, which would mean that solving the problem in polynomial problem is probably impossible.</p>\n\n<p>Where is my mistake?</p>\n', 'Tags': '<complexity-theory><np-complete><dynamic-programming>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-18T16:50:46.083', 'CommentCount': '1', 'AcceptedAnswerId': '910', 'CreationDate': '2012-03-31T05:44:11.187', 'Id': '909'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A <a href="http://stackoverflow.com/questions/10378738/maximise-sum-of-non-overlapping-numbers-from-matrix">question was posted on Stack Overflow</a> asking for an algorithm to solve this problem:</p>\n\n<blockquote>\n  <p>I have a matrix (call it A) which is nxn. I wish to select a subset\n  (call it B) of points from matrix A. The subset will consist of n\n  elements, where one and only one element is taken from each row and\n  from each column of A. The output should provide a solution (B) such\n  that the sum of the elements that make up B is the maximum possible\n  value, given these constraints (eg. 25 in the example below). If\n  multiple instances of B are found (ie. different solutions which give\n  the same maximum sum) the solution for B which has the largest minimum\n  element should be selected.</p>\n  \n  <p>B could also be a selection matrix which is nxn, but where only the n\n  desired elements are non-zero.</p>\n  \n  <p>For example: if A =</p>\n\n<pre><code>|5 4 3 2 1|\n|4 3 2 1 5|\n|3 2 1 5 4|\n|2 1 5 4 3|\n|1 5 4 3 2|\n</code></pre>\n  \n  <p>=> B would be</p>\n\n<pre><code> |5 5 5 5 5|\n</code></pre>\n</blockquote>\n\n<p>I <a href="http://stackoverflow.com/a/10387455/1191425">proposed a dynamic programming solution</a> which I suspect is as efficient as any solution is going to get. I\'ve copy-pasted my proposed algorithm below.</p>\n\n<hr>\n\n<ul>\n<li>Let $A$ be a square array of $n$ by $n$ numbers.</li>\n<li>Let $A_{i,j}$ denote the element of $A$ in the <code>i</code>th row and <code>j</code>th column.</li>\n<li>Let $S( i_1:i_2, j_1:j_2 )$ denote the optimal sum of non-overlapping numbers for a square subarray of $A$ containing the intersection of rows $i_1$ to $i_2$ and columns $j_1$ to $j_2$.</li>\n</ul>\n\n<p>Then the optimal sum of non-overlapping numbers is denoted <code>S( 1:n , 1:n )</code> and is given as follows:</p>\n\n<p>$$S( 1:n , 1:n ) = \\max \\left \\{ \\begin{array}{l}  S(   2:n , 2:n   ) + A_{1,1} \\\\\r\n                             S(   2:n , 1:n-1 ) + A_{1,n} \\\\\r\n                            S( 1:n-1 , 2:n   ) + A_{n,1} \\\\\r\n                            S( 1:n-1 , 1:n-1 ) + A_{n,n} \\\\\r\n                            \\end{array} \\right.$$</p>\n\n<pre><code>Note that S( i:i, j:j ) is simply Aij.\n</code></pre>\n\n<p>That is, the optimal sum for a square array of size <code>n</code> can be determined by separately computing the optimal sum for each of the four sub-arrays of size <code>n-1</code>, and then maximising the sum of the sub-array and the element that was "left out".</p>\n\n<pre><code>S for |# # # #|\n      |# # # #|\n      |# # # #|\n      |# # # #|\n\nIs the best of the sums S for:\n\n|#      |      |      #|      |# # #  |       |  # # #|\n|  # # #|      |# # #  |      |# # #  |       |  # # #|\n|  # # #|      |# # #  |      |# # #  |       |  # # #|\n|  # # #|      |# # #  |      |      #|       |#      |\n</code></pre>\n\n<hr>\n\n<p>This is a very elegant algorithm and I strongly suspect that it is correct, but I can\'t come up with a way to <strong>prove</strong> it is correct.</p>\n\n<p>The main difficulty I am having it proving that the problem displays optimal substructure. I believe that if the four potential choices in each calculation are the <em>only</em> four choices, then this is enough to show optimal substructure. That is, I need to prove that this:</p>\n\n<pre><code>|   #    |\n| #   # #|\n| #   # #| \n| #   # #|\n</code></pre>\n\n<p>Is not a valid solution, either because it\'s impossible (i.e. proof by contradiction) or because this possibility is already accounted for by one of the four "<code>n-1</code> square" variations.</p>\n\n<p>Can anyone point out any flaws in my algorithm, or provide a proof that it really does work?</p>\n', 'ViewCount': '341', 'Title': 'Maximise sum of "non-overlapping" numbers in square array - help with proof', 'LastEditorUserId': '1320', 'LastActivityDate': '2012-05-02T08:20:36.307', 'LastEditDate': '2012-05-01T00:17:31.290', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '1600', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1320', 'Tags': '<algorithms><dynamic-programming><check-my-algorithm>', 'CreationDate': '2012-04-30T19:20:52.473', 'Id': '1597'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I found the P vs NP problem some time ago and I have recently worked on the subset sum problem. I have read <a href="http://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow">Wikipedia article</a> on the Subset Sum problem as well as the question <a href="http://stackoverflow.com/questions/4355955/subset-sum-algorithm">Subset Sum Algorithm</a> </p>\n\n<p>I have looked at the problem and found  some solutions  but so far they seem to be NP, \nI believe I can make a sufficiently fast algorithm in NP time.</p>\n\n<p>My problem is I am not good in theory so it doesn\'t help me much to talk about the Cook-Levin Theorem or Non-Deterministic Turing Machines.</p>\n\n<p>What I would like is an explanation of the pseudo-polynomial time dynamic programming subset sum that on Wikipedia.</p>\n\n<p>I have read it and I believe I understand the general concept of why it is NP instead of P (related to the size of the input rather than the operations with it),\nbut I do not understand the algorithm.</p>\n\n<p>I would appreciate if someone would put provide an example with some numbers and how it works. It would help me a lot because it would:</p>\n\n<ul>\n<li>Give me ideas to improve my future algorithm</li>\n<li>Help me understand intuitively when an algorithm is pseudo-polyonmial instead of NP.</li>\n</ul>\n', 'ViewCount': '807', 'Title': 'Subset sum, pseudo-polynomial time dynamic programming solution?', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-03-15T01:32:27.107', 'LastEditDate': '2013-03-15T01:32:27.107', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '2', 'OwnerDisplayName': 'user1094566', 'PostTypeId': '1', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2011-12-12T21:32:08.280', 'Id': '1689'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's say I am trying to break all the numbers from 1 to N down into their prime factors. Once I have the factors from 1 to N-1, is there an algorithm to give me the factors of 1 to N using dynamic programming?</p>\n", 'ViewCount': '280', 'Title': 'Is it possible to use dynamic programming to factor numbers', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-06T20:41:21.420', 'LastEditDate': '2012-05-06T19:56:49.690', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'OwnerDisplayName': 'Will Den', 'PostTypeId': '1', 'Tags': '<algorithms><dynamic-programming><factoring>', 'CreationDate': '2012-05-06T16:42:27.970', 'FavoriteCount': '1', 'Id': '1694'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2080', 'Title': 'dynamic programming exercise on cutting strings', 'LastEditDate': '2012-05-13T18:35:49.400', 'AnswerCount': '2', 'Score': '8', 'OwnerDisplayName': 'Mark', 'PostTypeId': '1', 'OwnerUserId': '1556', 'FavoriteCount': '1', 'Body': '<p>I have been working on the following problem from this <a href="http://www.cs.berkeley.edu/~vazirani/algorithms/chap6.pdf">book</a>.</p>\n\n<blockquote>\n  <p>A certain string-processing language offers a primitive operation which splits a string into two\n  pieces. Since this operation involves copying the original string, it takes n units of time for a\n  string of length n, regardless of the location of the cut. Suppose, now, that you want to break a\n  string into many pieces. The order in which the breaks are made can affect the total running\n  time. For example, if you want to cut a 20-character string at positions $3$ and $10$, then making\n  the first cut at position $3$ incurs a total cost of $20 + 17 = 37$, while doing position 10 first has a\n  better cost of $20 + 10 = 30$.</p>\n</blockquote>\n\n<p>I need a dynamic programming algorithm that given $m$ cuts, finds the minimum cost of cutting a string into $m +1$ pieces.</p>\n', 'Tags': '<algorithms><combinatorics><strings><dynamic-programming>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-08-31T14:56:19.823', 'CommentCount': '0', 'CreationDate': '2012-04-09T03:17:15.270', 'Id': '1822'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Dynamic programming can reduce the time needed to perform a recursive algorithm. I know that dynamic programming can help reduce the time complexity of algorithms. Are the general conditions such that if satisfied by a recursive algorithm would imply that using dynamic programming will reduce the time complexity of the algorithm? When should I use dynamic programming?</p>\n', 'ViewCount': '1373', 'Title': 'When can I use dynamic programming to reduce the time complexity of my recursive algorithm?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-25T11:10:59.523', 'LastEditDate': '2012-05-25T11:10:59.523', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1634', 'Tags': '<algorithms><dynamic-programming><efficiency><algorithm-design>', 'CreationDate': '2012-05-24T22:26:27.710', 'FavoriteCount': '1', 'Id': '2057'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Here is the question: suppose we are given x cents, the amount we want to pay, and a 6-tuple (p, n, d, q, l, t) that represents respectively the number of pennies, nickels, dimes, quarters, loonies and toonies you have. Assume that you have enough coins to pay x cents. You do not have to pay exactly x cents; you can pay more. The cashier is assumed to be smart enough to give you back the optimal number of coins as change. We want to minimize the number of coins that changes hands, that is the number of coins you give to the cashier plus the number of coins the cashier gives back to you.</p>\n\n<p>For example, if we want to pay 99 cents and we have 99 pennies and 1 loonie, then the optimal solution would be to give the cashier the loonie and take back 1 penny.</p>\n\n<p>A particularly easy solution that occurs to me is to create a six-dimensional array. But in practice this is not feasible. So I am wondering if anyone can give me a small hint as to how to use dynamic programming to solve this (as this question looks intuitively to me like a DP problem). Once I have a hint, I can perhaps work out the remaining details myself. Thanks.</p>\n', 'ViewCount': '467', 'Title': 'How to use dynamic programming to solve this?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-27T13:23:56.797', 'LastEditDate': '2012-06-27T13:13:22.973', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1718', 'Tags': '<algorithms><optimization><dynamic-programming>', 'CreationDate': '2012-06-26T23:26:55.670', 'Id': '2507'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given two strings, $r$ and $s$, where $n = |r|$, $m = |s|$ and $m \\ll n$, find the minimum edit distance between $s$ for each beginning position in $r$ efficiently.</p>\n\n<p>That is, for each suffix of $r$ beginning at position $k$, $r_k$, find the <a href="http://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein distance</a> of $r_k$ and $s$ for each $k \\in [0, |r|-1]$.  In other words, I would like an array of scores, $A$, such that each position, $A[k]$, corresponds to the score of $r_k$ and $s$.</p>\n\n<p>The obvious solution is to use the standard dynamic programming solution for each $r_k$ against $s$ considered separately, but this has the abysmal running time of $O(n m^2)$ (or $O(n d^2)$, where $d$ is the maximum edit distance).  It seems like you should be able to re-use the information that you\'ve computed for $r_0$ against $s$ for the comparison with $s$ and $r_1$.</p>\n\n<p>I\'ve thought of constructing a prefix tree and then trying to do dynamic programming algorithm on $s$ against the trie, but this still has worst case $O(n d^2)$ (where $d$ is the maximum edit distance) as the trie is only optimized for efficient lookup.</p>\n\n<p>Ideally I would like something that has worst case running time of $O(n d)$ though I would settle for good average case running time.  Does anyone have any suggestions?  Is $O(n d^2)$ the best you can do, in general?</p>\n\n<p>Here are some links that might be relevant though I can\'t see how they would apply to the above problem as most of them are optimized for lookup only:</p>\n\n<ul>\n<li><a href="http://stevehanov.ca/blog/index.php?id=114" rel="nofollow">Fast and Easy Levensthein distance using a Trie</a></li>\n<li><a href="http://stackoverflow.com/questions/3183149/most-efficient-way-to-calculate-levenshtein-distance">SO: Most efficient way to calculate Levenshtein distance</a></li>\n<li><a href="http://stackoverflow.com/questions/4057513/levenshtein-distance-algorithm-better-than-onm?rq=1">SO: Levenshtein Distance Algoirthm better than $O(n m)$</a></li>\n<li><a href="http://www.berghel.net/publications/asm/asm.php" rel="nofollow">An extension of Ukkonen\'s enhanced dynamic programming ASM algorithm</a></li>\n<li><a href="http://blog.notdot.net/2010/07/Damn-Cool-Algorithms-Levenshtein-Automata" rel="nofollow">Damn Cool Algorithms: Levenshtein Automata</a></li>\n</ul>\n\n<p>I\'ve also heard some talk about using some type of distance metric to optimize search (such as a <a href="http://en.wikipedia.org/wiki/BK-tree" rel="nofollow">BK-tree</a>?) but I know little about this area and how it applies to this problem.</p>\n', 'ViewCount': '836', 'Title': 'Efficiently calculating minimum edit distance of a smaller string at each position in a larger one', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-28T15:40:06.263', 'LastEditDate': '2012-06-28T15:40:06.263', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '2526', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '67', 'Tags': '<algorithms><runtime-analysis><strings><dynamic-programming><string-metrics>', 'CreationDate': '2012-06-27T20:48:29.300', 'Id': '2519'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose we are given a list of $n$ points, whose $x$ and $y$ coordinates are all non-negative. Suppose also that there are no duplicate points. We can only go from point $(x_i, y_i)$ to point $(x_j, y_j)$ if $x_i \\le x_j$ and $y_i \\le y_j$. The question is: given these $n$ points, what is the maximum number of points that we can reach if we are allowed to draw two paths that connect points using the above rule? Paths must start from the origin and may contain repeated points. $(0, 0)$ is of course not included in the points reached.</p>\n\n<p>An example: given $(2, 0), (2, 1), (1, 2), (0, 3), (1, 3), (2, 3), (3, 3), (2, 4), (1, 5), (1, 6)$, the answer is $8$ since we can take $(0, 0) \\rightarrow (2, 0) \\rightarrow (2, 1) \\rightarrow (2, 3) \\rightarrow (2, 4)$ and $(0, 0) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (1, 5) \\rightarrow (1, 6)$.</p>\n\n<p>If we are allowed to draw only one path, I can easily solve the question by dynamic programming that runs in $O(n^2)$. I first sort the points by decreasing $x_i+y_i$. Let $D[i]$ be the maximum number of coins that one can pick up from coins $1$ to $i$ in the sorted list. Then $D[1] = 1$ and $D[i] = \\max\\limits_{1\\le j &lt; i, x_j \\le x_i, y_j \\le y_i} D[j] + 1$. The answer then is just $\\max\\limits_{1\\le i \\le n} D[i] + 1$.</p>\n\n<p>But I cannot come up with a recurrence relation for two paths. If anyone has any idea about such a recurrence relation, I would be happy to hear what they are.</p>\n', 'ViewCount': '199', 'Title': 'Maximum number of points that two paths can reach', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-02T14:30:00.137', 'LastEditDate': '2012-06-30T17:40:21.150', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '2562', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1718', 'Tags': '<computational-geometry><dynamic-programming><recurrence-relation>', 'CreationDate': '2012-06-29T23:42:31.997', 'Id': '2553'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1279', 'Title': 'Top down, Bottom up Dynamic programing', 'LastEditDate': '2012-07-17T06:11:34.983', 'AnswerCount': '1', 'Score': '14', 'OwnerDisplayName': 'stefan', 'PostTypeId': '1', 'OwnerUserId': '4259', 'FavoriteCount': '2', 'Body': '<p>Is there a fundamental difference between Top down and Bottom up Dynamic programing? </p>\n\n<p>Meaning, is there a problem which can be solved bottom up but not top down?</p>\n\n<p>Or is the bottom up approach just an unwinding of the recurrence in the top down approach?</p>\n', 'Tags': '<algorithms><dynamic-programming>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-05-04T01:10:18.433', 'CommentCount': '0', 'CreationDate': '2011-11-09T18:09:05.470', 'Id': '2644'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>On <a href="https://en.wikipedia.org/wiki/Levenshtein_distance#Computing_Levenshtein_distance">Wikipedia</a>, an implementation for the bottom-up dynamic programming scheme for the edit distance is given. It does not follow the definition completely; inner cells are computed thus:</p>\n\n<pre><code>if s[i] = t[j] then  \n  d[i, j] := d[i-1, j-1]       // no operation required\nelse\n  d[i, j] := minimum\n             (\n               d[i-1, j] + 1,  // a deletion\n               d[i, j-1] + 1,  // an insertion\n               d[i-1, j-1] + 1 // a substitution\n             )\n}\n</code></pre>\n\n<p>As you can see, the algorithm <em>always</em> chooses the value from the upper-left neighbour if there is a match, saving some memory accesses, ALU operations and comparisons. </p>\n\n<p>However, deletion (or insertion) may result in a <em>smaller</em> value, thus the algorithm is locally incorrect, i.e. it breaks with the optimality criterion. But maybe the mistake does not change the end result -- it might be cancelled out.</p>\n\n<p>Is this micro-optimisation valid, and why (not)?</p>\n', 'ViewCount': '306', 'Title': 'Micro-optimisation for edit distance computation: is it valid?', 'LastActivityDate': '2012-08-02T07:32:35.867', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2997', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<algorithms><dynamic-programming><string-metrics><correctness-proof><program-optimization>', 'CreationDate': '2012-08-01T15:41:33.670', 'Id': '2985'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I found this problem while I was reading  an ACM  problem and it is about dynamic programming. The problem says that you have a square matrix $n\\times n$ filled with 1's or 0's, like this:</p>\n\n<h2>$$\\begin{bmatrix} 1 &amp;1 &amp;1 &amp;0\\\\ 1 &amp;1 &amp;1 &amp;1\\\\ 0 &amp;0 &amp;1 &amp;0\\\\ 1 &amp;1 &amp;1 &amp;1 \\end{bmatrix}$$</h2>\n\n<p>Now you have to find the biggest square matrix inside the original matrix which is filled with only 1's. \nIn my  example, take the matrix of $((1,1)$ to $(2,2)$\n$$\n\\begin{bmatrix}\n1 &amp; 1\\\\\n1 &amp;1\n\\end{bmatrix}\n$$</p>\n\n<p>But, we might have to deal with matrices of size 1000X1000 as well. So the algorithm should be efficient and use DP, although I don't know if there is other solution. My Teacher told me that it can be done by Dynamic Programming. But I didn't understand his method.</p>\n", 'ViewCount': '257', 'Title': 'Problem contest with matrix and DP', 'LastEditorUserId': '31', 'LastActivityDate': '2012-08-29T09:16:00.017', 'LastEditDate': '2012-08-29T09:16:00.017', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '3342', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1152', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2012-08-26T21:43:37.540', 'Id': '3340'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '611', 'Title': 'Dynamic programming with large number of subproblems', 'LastEditDate': '2012-10-09T12:39:47.157', 'AnswerCount': '2', 'Score': '7', 'OwnerDisplayName': 'Alexandre', 'PostTypeId': '1', 'OwnerUserId': '3101', 'FavoriteCount': '2', 'Body': '<p>Dynamic programming with large number of subproblems. So I\'m trying to solve this problem from Interview Street:</p>\n\n<blockquote>\n  <p><strong>Grid Walking</strong> (Score 50 points)<br>\n  You are situated in an $N$-dimensional grid at position $(x_1,x_2,\\dots,x_N)$. The dimensions of the grid are $(D_1,D_2,\\dots,D_N$). In one step, you can walk one step ahead or behind in any one of the $N$ dimensions. (So there are always $2N$ possible different moves). In how many ways can you take $M$ steps such that you do not leave the grid at any point? You leave the grid if for any $x_i$, either $x_i \\leq 0$ or $x_i &gt; D_i$.</p>\n</blockquote>\n\n<p>My first try was this memoized recursive solution:</p>\n\n<pre><code>def number_of_ways(steps, starting_point):\n    global n, dimensions, mem\n    #print steps, starting_point\n    if (steps, tuple(starting_point)) in mem:\n        return mem[(steps, tuple(starting_point))]\n    val = 0\n    if steps == 0:\n        val = 1\n    else:\n        for i in range(0, n):\n            tuple_copy = starting_point[:]\n            tuple_copy[i] += 1\n            if tuple_copy[i] &lt;= dimensions[i]:\n                val += number_of_ways(steps - 1, tuple_copy)\n            tuple_copy = starting_point[:]\n            tuple_copy[i] -= 1\n            if tuple_copy[i] &gt; 0:\n                val += number_of_ways(steps - 1, tuple_copy)\n    mem[(steps, tuple(starting_point))] = val\n    return val\n</code></pre>\n\n<p>Big surprise: it fails for a large number of steps and/or dimensions due to a lack of memory.</p>\n\n<p>So the next step is to improve my solution by using dynamic programming. But before starting, I\'m seeing a major problem with the approach. The argument <code>starting_point</code> is an $n$-tuple, where $n$ is as large as $10$. So in fact, the function could be <code>number_of_ways(steps, x1, x2, x3, ... x10)</code> with  $1 \\leq x_i \\leq 100$.</p>\n\n<p>The dynamic programming problems I\'ve seen in textbooks almost all have twp variables, so that only a two-dimensional matrix is needed. In this case, a ten-dimensional matrix would be needed. So $100^{10}$ cells in total.</p>\n\n<p>With 2-D matrixes in dynamic programming, usually only the previous row of calculations is needed for the next calculation, hence reducing the spatial complexity from $mn$ to $\\min(m,n)$. I\'m not sure how I would do the same in this case. Visualizing a table isn\'t feasible, so the answer would have to come directly from the recursion above. </p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Using Peter Shor\'s suggestions, and making some minor corrections, notably the need to keep track of position in the $W(i, t_i)$ function, and rather than only splitting dimensions into two sets A and B, doing the splitting recursively, effectively using a divide-and-conquer method, until a base case is reached where only one dimension is in the set.</p>\n\n<p>I came up with the following implementation, which passed all tests below the maximum execution time:</p>\n\n<pre><code>def ways(di, offset, steps):\n    global mem, dimensions\n    if steps in mem[di] and offset in mem[di][steps]:\n        return mem[di][steps][offset]\n    val = 0\n    if steps == 0:\n        val = 1\n    else:\n        if offset - 1 &gt;= 1:\n            val += ways(di, offset - 1, steps - 1)\n        if offset + 1 &lt;= dimensions[di]:\n            val += ways(di, offset + 1, steps - 1)\n    mem[di][steps][offset] = val\n    return val\n\n\ndef set_ways(left, right, steps):\n    # must create t1, t2, t3 .. ti for steps\n    global mem_set, mem, starting_point\n    #print left, right\n    #sleep(2)\n    if (left, right) in mem_set and steps in mem_set[(left, right)]:\n        return mem_set[(left, right)][steps]\n    if right - left == 1:\n        #print \'getting steps for\', left, steps, starting_point[left]\n        #print \'got \', mem[left][steps][starting_point[left]], \'steps\'\n        return mem[left][steps][starting_point[left]]\n        #return ways(left, starting_point[left], steps)\n    val = 0\n    split_point =  left + (right - left) / 2 \n    for i in xrange(steps + 1):\n        t1 = i\n        t2 = steps - i\n        mix_factor = fact[steps] / (fact[t1] * fact[t2])\n        #print "mix_factor = %d, dimension: %d - %d steps, dimension %d - %d steps" % (mix_factor, left, t1, split_point, t2)\n        val += mix_factor * set_ways(left, split_point, t1) * set_ways(split_point, right, t2)\n    mem_set[(left, right)][steps] = val\n    return val\n\nimport sys\nfrom time import sleep, time\n\nfact = {}\nfact[0] = 1\nstart = time()\naccum = 1\nfor k in xrange(1, 300+1):\n    accum *= k\n    fact[k] = accum\n#print \'fact_time\', time() - start\n\ndata = sys.stdin.readlines()\nnum_tests = int(data.pop(0))\nfor ignore in xrange(0, num_tests):\n    n_and_steps = data.pop(0)\n    n, steps = map(lambda x: int(x), n_and_steps.split())\n    starting_point = map(lambda x: int(x), data.pop(0).split())\n    dimensions = map(lambda x: int(x), data.pop(0).split())\n    mem = {}\n    for di in xrange(n):\n        mem[di] = {}\n        for i in xrange(steps + 1):\n            mem[di][i] = {}\n            ways(di, starting_point[di], i)\n    start = time()\n    #print \'mem vector is done\'\n    mem_set = {}\n    for i in xrange(n + 1):\n        for j in xrange(n + 1):\n            mem_set[(i, j)] = {}\n    answer = set_ways(0, n, steps)\n    #print answer\n    print answer % 1000000007\n    #print time() - start\n</code></pre>\n', 'Tags': '<algorithms><efficiency><dynamic-programming>', 'LastEditorUserId': '3101', 'LastActivityDate': '2012-12-11T02:10:15.510', 'CommentCount': '4', 'AcceptedAnswerId': '4949', 'CreationDate': '2012-10-07T23:07:21.413', 'Id': '4941'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<blockquote>\n  <p><strong>Substring Diff</strong><br>\n  Given two strings of length $n$, $P = p_1\\dots p_n$ and $Q = q_1 \\dots q_n$, we define $M(i, j, L)$ as the number of\n  mismatches between $p_i \\dots p_{i+L-1}$ and $q_j \\dots q_{j+L-1}$. In set\n  notation, $M(i, j, L)$ refers to the size of the set $\\{0 \\leq x &lt; L \\mid p_{i + x} \\neq q_{j + x}\\}$.</p>\n  \n  <p>Given an integer $K$, your task is to find the maximum length $L$ such\n  that there exists pair of indices $(i,j)$ for which we have $M(i, j, L) \\leq K$. Of course, we should also have $i + L - 1 \\leq n$ and $j + L - 1 \\leq n$.</p>\n  \n  <p><strong>Constraints</strong></p>\n  \n  <ul>\n  <li>$0 \\leq K \\leq |P|$</li>\n  <li>Both $P$ &amp; $Q$ would have the same length</li>\n  <li>The size of each of the string would be at the max <strong>1500</strong> </li>\n  <li>All characters in $P$ and $Q$ are lower-case English letters.</li>\n  </ul>\n</blockquote>\n\n<p>The recursive function will have the form:</p>\n\n<pre><code>longest(string1, string2, allowed_mismatches) = \n    {\n        ... (something :P )\n    }\n</code></pre>\n\n<p>The state space then has size $K^3$. With an upper bound on $K$ of 1500, the running time and space usage will be terrible... So direct dynamic programming will not work without some additional property to reduce the state space.</p>\n\n<p>Ideas?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Using the ideas suggested by both Yuval and Vor, I came up with the following solution that works like a charm, running in $O(K^2)$ time and using $K$ space.</p>\n\n<pre><code>def longest_range_min_sum(str1, str2, start1, start2, slice_size, max_sum):\n    longest = 0\n    i = 0\n    running_sum = 0\n    while i + longest &lt; slice_size:\n        if str1[start1 + i + longest] != str2[start2 + i + longest]:\n            running_sum += 1\n        if running_sum &gt; max_sum:\n            if str1[start1 + i] != str2[start2 + i]:\n                running_sum -= 1\n            i += 1\n        else:\n            longest += 1\n    return longest\n\nimport sys\n\ndata = sys.stdin.readlines()\nnum_cases = int(data.pop(0))\nfor ignore in xrange(num_cases):\n    max_mismatches, str1, str2 = data.pop(0).split()\n    max_mismatches = int(max_mismatches)\n    m = n = len(str1)\n    longest = 0\n    for i in xrange(m + n + 1):\n        if i &gt; n:\n            slice_size = m - (i - n)\n        else:\n            slice_size = min(i, m)\n        if slice_size == 0:\n            continue\n        end1 = max(m, m - i)\n        if i &gt; n:\n            end1 = m - (i - n)\n        start1 = end1 - slice_size\n        end2 = min(i, n)\n        start2 = end2 - slice_size\n        #print zeros_and_ones \n        #print str1[start1:end1], ' - ', str2[start2:end2]\n        longest_in_sub = longest_range_min_sum(str1, str2, start1, start2, slice_size, max_mismatches)\n        #print longest_in_sub\n        longest = max(longest, longest_in_sub)\n    print longest\n</code></pre>\n", 'ViewCount': '578', 'Title': 'Dynamic programming table for finding similar substrings is too large', 'LastEditorUserId': '3101', 'LastActivityDate': '2012-10-19T07:02:46.443', 'LastEditDate': '2012-10-19T07:02:46.443', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '5002', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '3101', 'Tags': '<strings><dynamic-programming><substrings>', 'CreationDate': '2012-10-10T10:21:57.203', 'Id': '4994'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>$$\\begin{align*}\n  T[1] &amp;= 1 \\\\\n  T[2] &amp;= 2 \\\\\n  T[i] &amp;= T[i-1] + T[i-3] + T[i-4] &amp; \\text{for \\(i \\gt 2\\)} \\\\\n\\end{align*}$$</p>\n\n<p>I have to calculate $T[N]$, but $N$ is too big ($\\approx 10^9$), how can I optimize it?</p>\n', 'ViewCount': '142', 'Title': 'Optimize a linear recurrence', 'LastEditorUserId': '3011', 'LastActivityDate': '2013-03-11T09:35:56.713', 'LastEditDate': '2013-03-11T09:35:56.713', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '3154', 'Tags': '<algorithms><dynamic-programming><recursion>', 'CreationDate': '2012-10-11T10:19:54.720', 'Id': '5018'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have been thinking about why the dynamic programming approach to finding the optimal matrix chain order is better than a brute force approach that finds the optimal order by exploring all nested orders. The more I think about it, the more I feel strongly that the dynamic programming solution considers all possible chain orders, thus contradicting the justification of choosing a dynamic programming approach to solving this problem.</p>\n\n<p>For Eg. Lets consider a product of 4 matrices. There are 5 possible matrix chain orders (in the brute force method)</p>\n\n<p>(A1 (A2 (A3 A4)))</p>\n\n<p>(A1 ((A2 A3) A4))</p>\n\n<p>((A1 A2) (A3 A4))</p>\n\n<p>((A1 (A2 A3)) A4)</p>\n\n<p>(((A1 A2) A3) A4)</p>\n\n<p>Now, if we consider the dynamic programming approach all the sub matrix products included in each of the orders above will be computed. How then is the dynamic programming approach more efficient than the brute force approach?</p>\n\n<p>EDIT: The answers and the comments have been really useful in helping me understand the DP solution better. But I am not able to visualise a brute force approach  in my head. As soon as I start writing a brute force method to compute all possible matrix multiplication orders, the DP solution manifests itself naturally in my attempt. This may be because I know the optimized DP solution and I am not able to think of a rudimentary brute force solution. If someone can mention the pseudo code for generating all possible matrix multiplication orders , it will make it clearer as to what sub-problems the DP solution avoids and hence is more efficient.</p>\n\n<p>EDIT (again): Let us disregard memoization. Will the DP solution still generate lesser number of computations?</p>\n', 'ViewCount': '954', 'Title': 'Dynamic Programming Solution for Optimal Matrix Chain Multiplication Order', 'LastEditorUserId': '4263', 'LastActivityDate': '2012-10-21T01:01:39.777', 'LastEditDate': '2012-10-21T01:01:39.777', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4263', 'Tags': '<dynamic-programming><matrices>', 'CreationDate': '2012-10-18T22:45:25.820', 'FavoriteCount': '0', 'Id': '6158'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="https://www.interviewstreet.com/challenges/dashboard/#problem/4f1c88e0dec8a" rel="nofollow">https://www.interviewstreet.com/challenges/dashboard/#problem/4f1c88e0dec8a</a></p>\n\n<blockquote>\n  <p>Fairy Chess (35 Points)</p>\n  \n  <p>You have a $N \\times N$ chess board. An $S$-leaper is a chess piece which can move from square $(x_1,y_1)$ on the board to any other square $(x_2,y_2)$ if $|x_1 - x_2| + |y_1 - y_2| \\le S$. The chess board may also contain some pawns. The leaper cannot land on the same square as a pawn. In how many ways can a leaper move $M$ times on the board?</p>\n  \n  <p>Input:\n  The first line contains the number of test cases $T$. $T$ cases follow. Each case contains integers $N$, $M$ and $S$ on the first line. The next $N$ lines contains $N$ characters each. The $i$th character on the $j$th line is a <code>.</code> if the corresponding chess square is empty, <code>P</code> if there is a pawn, or <code>L</code> if the leaper is situated on that square.</p>\n  \n  <p>Output:\n  For each case, output the number of ways the leaper can make $M$ moves. Output each answer modulo 1000000007.</p>\n  \n  <p>Constraints:\n  $$\\begin{gather}\n1 \\le T \\le 10 \\\\\n1 \\le S \\le N \\le 200 \\\\\n1 \\le M \\le 200 \\\\\n\\end{gather}$$\n  There will be exactly one <code>L</code> character on the board.</p>\n  \n  <p>Sample Input:</p>\n\n<pre><code>3\n4 1 1\n....\n.L..\n.P..\n....\n3 2 1\n...\n...\n..L\n4 3 2\n....\n...L\n..P.\nP...\n</code></pre>\n  \n  <p>Sample Output:</p>\n\n<pre><code>4\n11\n385\n</code></pre>\n</blockquote>\n\n<p>I wrote a DP solution but with O(N^5).</p>\n\n<blockquote>\n  <p>Psuedocode for ways function:</p>\n</blockquote>\n\n<pre><code>Memoize[Xmax][Ymax][Nmax];\n\nways(int X, int Y, int M) // (X,Y) current co-ordinates and M is number of moves to make\n{\n    if(Memoize[X][Y][M] != -1) // != -1 means we already have the result\n        return Memoize[X][Y][M];\n    sum=0;\n    for all (u,v) such that |X-u| + |Y-v| &lt;= S\n        sum += ways(u, v, M-1);\n\n    Memoize[X][Y][M] = sum;\n    return sum;\n\n}\n</code></pre>\n\n<blockquote>\n  <p>Code:</p>\n</blockquote>\n\n<pre><code>/* Enter your code here. Read input from STDIN. Print output to STDOUT */\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nlong ways(long ***DP, char **Chess, int X, int Y, int S, int N, int M);\n\nint main()\n{\n    int T;\n    scanf("%d", &amp;T);\n    while(T&gt;0)\n    {\n        int N, M, S;\n        scanf("%d", &amp;N);\n        scanf("%d", &amp;M);\n    scanf("%d", &amp;S);\n        long ***DP = (long ***) malloc(sizeof(long **) * N);\n        int i,j,k;\n        char **Chess = (char **)malloc(sizeof(char *) *N);\n        int Xstart;\n        int Ystart; //printf("N=%dM=%dS=%d\\n", N, M, S);\n        for(i=0;i&lt;N;i++)\n        {\n        Chess[i] = (char *)malloc(sizeof(char) *N);\n        DP[i] = (long **)malloc(sizeof(long *) * N);\n            for(j=0;j&lt;N;j++)\n            {   //printf("i=%dj=%d\\n", i, j);\n        DP[i][j] = (long *)malloc(sizeof(long) *(M+1));\n                char a;\n                scanf(" %c", &amp;a);\n                if(a==\'L\')\n                {\n                    Xstart = i;\n                    Ystart = j;\n                }\n                Chess[i][j] = a;\n        //printf("jf=%d\\n", j);\n        }\n        }\n\n        for(i=0;i&lt;N;i++)\n        {\n            for(j=0;j&lt;N;j++)\n            {\n                for(k=1;k&lt;M+1;k++)\n                {\n                    DP[i][j][k] = -1;\n                }\n                DP[i][j][0] = 1;\n            }\n        }\n\n       printf("%ld\\n", ways(DP, Chess, Xstart, Ystart, S, N, M));\n       T--;\n    }\n}\n\nlong ways(long ***DP, char **Chess, int X, int Y, int s, int N, int M)\n{\n    if(DP[X][Y][M] !=-1)\n    {\n    //printf("X=%d Y=%d M=%d Val=%ld\\n", X, Y, M, DP[X][Y][M]);\n    return DP[X][Y][M];\n    }\n    else\n    {\n        long sum1 = 0;\n\n\n        int S,k;\n    sum1 += ways(DP, Chess, X, Y, s, N, M-1);\n\n        for(S=1;S&lt;=s;S++)\n    {\n        for(k=0;k&lt;=S;k++)\n            {\n                if(k!=0 &amp;&amp; (S-k)!=0)\n                {\n                    if(X+k&lt;N &amp;&amp; Y+(S-k) &lt;N &amp;&amp; Chess[X+k][Y+(S-k)] != \'P\')\n                    {\n                        Chess[X+k][Y+(S-k)] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X+k, Y+(S-k), s, N, M-1);\n                Chess[X+k][Y+(S-k)] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n                    if(X+k&lt;N &amp;&amp; Y-(S-k)&gt;=0 &amp;&amp; Chess[X+k][Y-(S-k)] != \'P\')\n                    {\n                        Chess[X+k][Y-(S-k)] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X+k, Y-(S-k), s, N, M-1);\n                Chess[X+k][Y-(S-k)] = \'.\';\n                        Chess[X][Y] = \'L\';  \n                    }\n                    if(X-k&gt;=0 &amp;&amp; Y+(S-k) &lt;N &amp;&amp; Chess[X-k][Y+(S-k)] != \'P\')\n                    {\n                        Chess[X-k][Y+(S-k)] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X-k, Y+(S-k), s, N, M-1);\n                Chess[X-k][Y+(S-k)] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n                    if(X-k&gt;=0 &amp;&amp; Y-(S-k) &gt;=0 &amp;&amp; Chess[X-k][Y-(S-k)] != \'P\')\n                    {\n                        Chess[X-k][Y-(S-k)] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X-k, Y-(S-k), s, N, M-1);\n                            Chess[X-k][Y-(S-k)] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n\n\n                }\n                else if(k==0 &amp;&amp; (S-k)!=0)\n                {\n                    if(Y+(S-k)&lt;N &amp;&amp; Chess[X][Y+(S-k)] != \'P\')\n                    {\n                        Chess[X][Y+(S-k)] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X, Y+(S-k), s, N, M-1);\n                Chess[X][Y+(S-k)] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n                    if(Y-(S-k)&gt;=0 &amp;&amp; Chess[X][Y-(S-k)] != \'P\')\n                    {\n                        Chess[X][Y-(S-k)] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X, Y-(S-k), s, N, M-1);\n                Chess[X][Y-(S-k)] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n\n\n                }\n                else if(k!=0 &amp;&amp; (S-k)==0)\n                {\n                    if(X+k&lt;N &amp;&amp; Chess[X+k][Y] != \'P\')\n                    {\n                        Chess[X+k][Y] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X+k, Y, s, N, M-1);\n                Chess[X+k][Y] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n                    if(X-k&gt;=0 &amp;&amp; Chess[X-k][Y] != \'P\')\n                    {\n                        Chess[X-k][Y] = \'L\';\n                        Chess[X][Y] = \'.\';\n                        sum1 += ways(DP, Chess, X-k, Y, s, N, M-1);\n                Chess[X-k][Y] = \'.\';\n                        Chess[X][Y] = \'L\';\n                    }\n\n\n                }\n            }\n    }\n    //printf("X=%d Y=%d M=%d Val=%ld\\n", X, Y, M, sum);\n    DP[X][Y][M] = sum1;\n        return sum1;\n    }   \n}\n</code></pre>\n', 'ViewCount': '396', 'Title': 'How to do Fairy Chess problem in O(N^3)?', 'LastEditorUserId': '4272', 'LastActivityDate': '2014-02-11T06:33:58.330', 'LastEditDate': '2012-10-19T19:07:55.293', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '4272', 'Tags': '<algorithms><data-structures><dynamic-programming>', 'CreationDate': '2012-10-19T16:29:04.340', 'FavoriteCount': '1', 'Id': '6170'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>This is a homework problem for my introduction to algorithms course.</p>\n\n<blockquote>\n  <p>Recall the scheduling problem from Section 4.2 in which we sought to\n  minimize the maximum lateness. There are $n$ jobs, each with a deadline\n  $d_i$ and a required processing time $t_i$, and all jobs are available to be\n  scheduled starting at time $s$. For a job $i$ to be done, it needs to be assigned\n  a period from $s_i \\geq s$ to $f_i$ = $s_i + t_i$, and different jobs should be assigned\n  nonoverlapping intervals. As usual, such an assignment of times will be\n  called a schedule.</p>\n  \n  <p>In this problem, we consider the same setup, but want to optimize a\n  different objective. In particular, we consider the case in which each job\n  must either be done by its deadline or not at all. We\u2019ll say that a subset $J$ of\n  the jobs is schedulable if there is a schedule for the jobs in $J$ so that each\n  of them finishes by its deadline. Your problem is to select a schedulable\n  subset of maximum possible size and give a schedule for this subset that\n  allows each job to finish by its deadline.</p>\n  \n  <p>(a) Prove that there is an optimal solution $J$ (i.e., a schedulable set of\n  maximum size) in which the jobs in $J$ are scheduled in increasing\n  order of their deadlines.</p>\n  \n  <p>(b) Assume that all deadlines $d_i$ and required times $t_i$ are integers. Give\n  an algorithm to find an optimal solution. Your algorithm should\n  run in time polynomial in the number of jobs $n$, and the maximum\n  deadline $D = \\max_i d_i$.</p>\n</blockquote>\n\n<p>I've solved the problem as worded with the recurrence </p>\n\n<p>$Opt(i, d) = \\max\\left \\{ \n\\begin{array}\n \\\\ Opt(i-1, d-t_i) + 1 \\hspace{20 mm} d\\leq d_i\n \\\\ Opt(i-1, d) \n\\end{array}\n\\right \\}$</p>\n\n<p>but our instructor added a new requirement that our algorithm must not be dependent on D. This recurrence seems like it would produce an $O(nD)$ running time if implemented with dynamic programming.</p>\n\n<p>I can't figure out how to reduce its running time from $O(nD)$ to $O(n^k)$. To me it seems like it's a variation on the knapsack problem with all values equal to 1. In which case it seems like this is the best that can be done.</p>\n\n<p>If I'm doing something wrong could someone point me in the right direction, or if I've done everything right so far, could someone at least give me a hint as to how I can make an $O(n^k)$ recurrence or algorithm.</p>\n", 'ViewCount': '560', 'Title': 'Maximum Schedulable Set Zero-Lateness Deadline Scheduling', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-30T18:55:05.237', 'LastEditDate': '2012-10-31T09:59:21.227', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4294', 'Tags': '<algorithms><time-complexity><dynamic-programming><efficiency><scheduling>', 'CreationDate': '2012-10-20T23:13:27.230', 'FavoriteCount': '2', 'Id': '6202'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '868', 'Title': 'How can I improve my Algorithm?', 'LastEditDate': '2012-10-23T13:43:40.853', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4272', 'FavoriteCount': '1', 'Body': '<blockquote>\n  <p>This is a problem from Interview Street in Dynamic Programming section.\n  <a href="https://www.interviewstreet.com/challenges/dashboard/#problem/4f2c2e3780aeb" rel="nofollow">https://www.interviewstreet.com/challenges/dashboard/#problem/4f2c2e3780aeb</a></p>\n  \n  <p>Billboards(20 points)</p>\n  \n  <p>ADZEN is a very popular advertising firm in your city. In every road you can see their advertising billboards. Recently they are facing a serious challenge , MG Road the most used and beautiful road in your city has been almost filled by the billboards and this is having a negative effect on the natural view.</p>\n  \n  <p>On people\'s demand ADZEN has decided to remove some of the billboards in such a way that there are no more than K billboards standing together in any part of the road.</p>\n  \n  <p>You may assume the MG Road to be a straight line with N billboards.Initially there is no gap between any two adjecent billboards.</p>\n  \n  <p>ADZEN\'s primary income comes from these billboards so the billboard removing process has to be done in such a way that the billboards remaining at end should give maximum possible profit among all possible final configurations.Total profit of a configuration is the sum of the profit values of all billboards present in that configuration.</p>\n  \n  <p>Given N,K and the profit value of each of the N billboards, output the maximum profit that can be obtained from the remaining billboards under the conditions given.</p>\n</blockquote>\n\n<pre><code>Constraints\n1 &lt;= N &lt;= 1,00,000(10^5)\n1 &lt;= K &lt;= N\n0 &lt;= profit value of any billboard &lt;= 2,000,000,000(2*10^9)\n</code></pre>\n\n<blockquote>\n  <p>My Solution (Psuedocode):</p>\n</blockquote>\n\n<pre><code>Let Profit[i] denote the Profit from ith billboard.\n(i, j) denotes the range of billboards\nMaxProfit(i, j) for all (i, j) such that i&lt;=j and i-j+1 &lt;= K is:\n    MaxProfit(i, j) = Profit[i] + Profit[i+1] + ... + Profit[j];\n\nFor other (i,j) MaxProfit equals,\n\nMaxProfit(i, j)\n{\n        if(MaxProfit(i, j) is already calculated)\n            then return its value;\n    max = 0;\n    for all k such that i&lt;=k&lt;=j // k denotes that, that position has no   billboard\n    {\n        temp = MaxProfit(i, k-1) + MaxProfit(k+1, j);\n        if(temp &gt; max)\n        max = temp;\n    }\nreturn max;\n}\n</code></pre>\n\n<p>My solution is of order $$N^2$$. So I get TLE and Segmentation fault for larger N. I have already passed 6/10 test cases. I need to pass remaining 4. Help needed.</p>\n', 'Tags': '<algorithms><data-structures><dynamic-programming>', 'LastEditorUserId': '4272', 'LastActivityDate': '2012-10-25T10:57:30.120', 'CommentCount': '10', 'AcceptedAnswerId': '6286', 'CreationDate': '2012-10-21T09:36:39.707', 'Id': '6211'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to understand dynamic programming and I am watching this mit video. If you guys could take some time out , can you refer to the slide on 41:36 . Why is the height m+n. I just don\'t get it why is the heigh of this recurrence tree m+n.</p>\n\n<p><a href="http://videolectures.net/mit6046jf05_leiserson_lec15/" rel="nofollow">http://videolectures.net/mit6046jf05_leiserson_lec15/</a></p>\n\n<p>Thank you. </p>\n', 'ViewCount': '170', 'Title': 'Regarding the height of a recursion tree on dynamic programming', 'LastActivityDate': '2012-10-24T05:12:53.063', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6280', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<recurrence-relation><dynamic-programming>', 'CreationDate': '2012-10-24T02:46:20.040', 'Id': '6276'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have to be honest this is a homework problem, but I just need to discuss this with some one. The problem is there is a row of n houses, with different profit e.g profit1 for house 1, it can be either positive or negative value. But the aim is to maximize the profit by buying a subset of these houses. So infact, you should buy houses which are >0 value. However, you cannot buy houses that adjacent to the house you are buying, e.g i-1 and i+1 should not be bought. I am not quite sure where to start to look at this problem, I mean what exactly will be the difference of looking it from the greedy or dynamic programing way. Thanks for any suggestion. </p>\n', 'ViewCount': '179', 'Title': 'Adjacent house , dynamic programming problem', 'LastActivityDate': '2012-10-26T00:34:37.393', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '6302', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<dynamic-programming><knapsack-problems>', 'CreationDate': '2012-10-25T00:06:25.527', 'Id': '6301'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am working on problem (15-11) Inventory planning from <em>Introduction to Algorithms</em> (CLRS, 3rd Ed).</p>\n\n<blockquote>\n  <p><strong>15-11: Inventory Planning, p.411</strong></p>\n  \n  <p>The Rinky Dink Company makes machines that resurface ice rinks. The demand for such products varies from month to month, and so the company needs to develop a strategy to plan its manufacturing given the fluctuating, but predictable, demand. The company wishes to design a plan for the next $n$ months. For each month $i$, the company knows the demand $d_i$, that is, the number of machines that it will sell. Let $D  = \\displaystyle\\sum_{i=1}^{n} d_i $ be the total demand over the next $n$ months. The company keeps a full-time staff who provide labor to manufacture up to m machines in a given month, it can hire additional, part-time labor, at a cost that works out to c dollars per machine. Furthermore, if, at the end of a month, the company is holding any unsold machines, it must pay inventory costs. The cost for holding j machines is given as a function $h(j)$ for $u = 1, 2, ... , D$, where $h(j) \\ge 0$ for $1 \\le j \\le D$ and $h(j) \\le h(j+1)$ for $j \\le 1 \\le D - 1$.<br>\n  Give an algorithm that calculates a plan for the company that minimizes its costs while fulfilling all the demand. The running time should be polynomical in $n$ and $D$.</p>\n</blockquote>\n\n<p>In other words, problem asks to create dynamic programming algorithm that solves this problem.</p>\n\n<p>So far, I came up the the following solution, and not sure if it is any good.<br>\nOptimal sub-problem:\nLet $MinCost(i,j)$ be the function that returns minimized cost of operation for past $i$ months, $j$ is the number of unsold machines left at the end of the month $i$.(Goal, is to calculate $MinCost(n,0)$, in other words, at the end of planning period(month $n$), there are no unsold machines.)  </p>\n\n<p>So, the DP recurrence is given by $MinCost(0,0) = 0$ and</p>\n\n<p>$\\quad MinCost(i,j) = \\min\\{MinCost(i-1,j-k) + c(k,j,i) + h(j) \\mid 1 \\le k \\le D \\}$</p>\n\n<p>for $i+j &gt; 0$; here, $c(k,j,i)$ is the function that calculates the costs of the production.</p>\n\n<p>If my optimal sub-problem is correct, how do I create an algorithm to solve it?</p>\n', 'ViewCount': '1024', 'Title': 'Inventory planning problem solved through dynamic programming', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-30T14:49:19.330', 'LastEditDate': '2012-10-30T14:46:07.273', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1758', 'Tags': '<algorithms><dynamic-programming><check-my-algorithm>', 'CreationDate': '2012-10-30T04:11:00.550', 'Id': '6379'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I am not sure how to draw parallel between the Wagner\u2013Fischer algorithm and dtw algo.\nIn both case we want to find the distance of each index combination (i,j).</p>\n\n<p>In Wagner\u2013Fischer, we initiate the distance by the number of insert we\'d have to do from one empty string to another.</p>\n\n<pre><code>let wagnerFischer (s: string) (t: string) =\n   let m, n = s.Length, t.Length\n   let d = Array2D.create (m + 1) (n + 1) 0\n\n   for i = 0 to m do d.[i, 0] &lt;- i\n   for j = 0 to n do d.[0, j] &lt;- j    \n\n   for j = 1 to n do\n       for i = 1 to m do\n          d.[i, j] &lt;- List.min [\n                           d.[i-1, j  ] + 1; \n                           d.[i  , j-1] + 1; \n                           d.[i-1, j-1] + if s.[i-1] = t.[j-1] then 0 else 1; ]\n   printfn "edit matrix \\n %A" d \n   d.[m,n]\n</code></pre>\n\n<p>in the DWT we initiate the boundary at +infinity because we dont want to \'skip\' any numbers of the sequence, we always want to match with another item.</p>\n\n<p>What I dont see is what changes between the DWT and the WF algo that prevent use to update the distance in homogeneous way. \nIn DWT we systematically add the cost, whereas in the WF algo, we have this non homegenous function wrt different cases </p>\n\n<p>I understand both algo, but dont make the connexion between those differences in the cost function update ..\nAny idea to understand the difference intuitively  ?</p>\n\n<pre><code>let sequencebacktrack (s: \'a seq) (t:\'a seq) (cost:\'a-&gt;\'a-&gt;double) (boundary:int-&gt;double)  =\n   let m, n = s |&gt; Seq.length, t |&gt; Seq.length\n   let d = Array2D.create (m + 1) (n + 1) 0.\n\n   for i = 0 to m do d.[i, 0] &lt;- boundary(i)\n   for j = 0 to n do d.[0, j] &lt;- boundary(j)\n\n   t |&gt; Seq.iteri( fun j tj -&gt;\n            s |&gt; Seq.iteri( fun i si -&gt; \n                        d.[1+i, 1+j] &lt;- cost tj si + List.min [d.[1+i-1, 1+j  ]; \n                                                               d.[1+i  , 1+j-1]; \n                                                               d.[1+i-1, 1+j-1]; ] ))\n   printfn "edit matrix \\n %A" d \n   d.[m,n]\n//does not work\nlet wagnerFischer2 (s: string) (t: string) =\n   sequencebacktrack s t (fun a b -&gt; if a = b then 0. else 1.) (id &gt;&gt; double)\n\nlet b = wagnerFischer2 "ll" "la"\n</code></pre>\n', 'ViewCount': '244', 'Title': 'Levenstein distance and dynamic time warp', 'LastActivityDate': '2012-11-06T12:43:09.843', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4469', 'Tags': '<algorithms><dynamic-programming><edit-distance>', 'CreationDate': '2012-11-05T22:39:54.580', 'Id': '6502'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Most of the classic examples of dynamic programming algorithms have run-times such as $n$ or $n^2$. Are there any natural examples with a $O(n \\log n)$ run-time?</p>\n', 'ViewCount': '301', 'Title': 'Dynamic programming algorithms with log in the run-time', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-09T08:03:51.553', 'LastEditDate': '2012-11-09T08:03:51.553', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '71', 'Tags': '<algorithms><reference-request><dynamic-programming>', 'CreationDate': '2012-11-07T22:35:41.207', 'FavoriteCount': '1', 'Id': '6546'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to find the maximum palindrome sub-sequence and after going through some tutorials, I came up with a memoized version.But I am not sure about the runtime.I want to know if the following algorithm will work.Could also someone explain what the runtime will be?</p>\n\n<pre><code>Memoized-Palindrome(A,n)\ninitialize longest [i][j] =0 for all i and j\nthen return Memoized-Palindrome1(A,1,n,longest)\n\nMemoized-Palindrome1(A,i,j,longest)\nif longest[i][j]&gt;0 return longest [i][j]\nif (j-i) &lt;=1 return j-i\nif A[i]==A[j] \n      then longest[i][j] = 2 + Memoized-Palindrome1(A,i+1,j-1,longest)\n    else \n      longest[i][j]= max(Memoized-Palindrome1(A,i+1,j,longest),Memoized-Palindrome1(A,i,j+1,longest)\nreturn longest[i][j]\n</code></pre>\n', 'ViewCount': '342', 'Title': 'Memoized Palindrome Subsequence', 'LastEditorUserId': '3004', 'LastActivityDate': '2012-11-12T19:43:36.053', 'LastEditDate': '2012-11-12T19:24:14.483', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6639', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '3004', 'Tags': '<algorithm-analysis><dynamic-programming>', 'CreationDate': '2012-11-12T16:12:19.757', 'Id': '6637'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have just started to learn Dynamic Programming, and so far I have studied the few basic concepts; longest common subsequent problem, edit distance problem and the knapsack problem. I have attempted to solve the following exercise that is related with this topic, and so far I think I have a way how to approach it , but I am stuck at one point. Please, if you can, read my solution and tell me whether I am doing something wrong. I absolutely do not want you to solve it for me, just give me some help/hints.</p>\n\n<p>A mission-critical production system has n stages that have to be performed sequentially; stage i is performed by machine M_i. Each machine M_i has a probability r_i of functioning reliably and a probability 1-r_i of failing (and the failures are independent). Therefore, if we implement each stage with a single machine, the probability that the whole system works is r_1,r_2,...,r_n. To improve this probability we add redundancy, by having m_i\ncopies of the machine M_i that performs stage i. The probability that all m_i copies fail simultaneously is only (1-r_i)^(m_i), so the probability that stage i is completed correctly is 1-(1-r_i)^(mi) and the probability that the whole system works is prod(i=1,n){1-(1-r_i)^(m_i)}. Each machine M_i has a cost c_i, and there is a total budget B to buy machines. (Assume that B and c_i are positive integers.) Given the probabilities r_1,...,r_n, the costs c_1,...,c_n, and the budget B, find the redundancies m_1,...,m_n that are within the available budget and that maximize the probability that the system works correctly .</p>\n\n<p><em><strong></em>__<em>_</em>__<em>_</em>__<em>_</em>__<em>_</em>__<em>_</em>__<em>_</em>__<em>_</em>___</strong> MY PROPOSED SOLUTION</p>\n\n<ol>\n<li>We need to make sure that all the given probabilities are different from 0, meaning for all r_1 !=0 (if we had a probability 0 the system would not work)</li>\n<li>We must make sure that we have at least one machine of each type, meaning we have one copy of each machine (if we do not have a certain machine, like in point 1 the system would not work). In addition, by having already a copy of machines from m_1,...,m_n, the total cost of this machines would be sum(i=1,n)=c_i. This means that from the total budget B we need to subtract this cost, and get the extra budget for the redundant machines. B_extra= B-sum(i=1,n)=c_i</li>\n<li><p>To find the redundant number of machines we just need to model the problem as knapsack. Subproblem: K(c) ->maximum probability that a system works correctly. Recursive relationship:</p>\n\n<p>for c=1 to B_extra\n K(c) = max{K(c-c_i)*(1-(1-r_i)^(m_i)):c_i&lt;=c}</p></li>\n</ol>\n\n<p>Now, the points where I am stuck and need help are:</p>\n\n<ol>\n<li>The way I am defining the problem, is it correct or am I missing any special case? I think that the recursive relationship should work fine; any reason why it shouldn't?</li>\n<li>How should I keep track of the number of m_i machines. I know that the initial value for each m_i is one (from point 2 we need at least one copy of each machine). Should I just keep track of another variable in the problem K(c, m) and every time increase m_i++?</li>\n</ol>\n", 'ViewCount': '989', 'Title': 'Dynamic programming: Knapsack with repetition, Find the number of redundant machines', 'LastActivityDate': '2012-12-18T03:32:09.977', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'OwnerDisplayName': 'FranXh', 'PostTypeId': '1', 'OwnerUserId': '4591', 'Tags': '<dynamic-programming>', 'CreationDate': '2012-11-14T00:53:48.633', 'Id': '6662'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I was offered by a professor to give some tutoring in his course of Algorithm Design, based on Kleinberg and Tardos' book. He suggested me to prepare two exercise on dynamic programming, one exercise for polynomial reduction, and another one for approximation algorithms.The exercise should be not too advanced, but not just routine (they should fill two hour of tutoring).\nThen my question is: what are fascinating problems one can propose in dynamic programming, polynomial reductions and approximation algorithms for four nice tutoring sessions.</p>\n", 'ViewCount': '193', 'Title': 'Best a-little-advanced examples of dynamic programming, polynomial reduction and approximation algorithm', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-19T18:16:35.777', 'LastEditDate': '2012-11-19T18:16:35.777', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1665', 'Tags': '<algorithms><education><dynamic-programming>', 'CreationDate': '2012-11-18T01:47:15.080', 'Id': '6733'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a <a href="http://en.wikipedia.org/wiki/Binary_expression_tree" rel="nofollow">binary expresion tree</a>, with addition and multiplication operations, how can we optimize it\'s evaluation?</p>\n\n<p>Can we learn from <a href="http://en.wikipedia.org/wiki/Matrix_chain_multiplication" rel="nofollow">matrix chain multiplication</a>? A <a href="http://en.wikipedia.org/wiki/Matrix_chain_multiplication#Generalizations" rel="nofollow">generalization</a> of matrix chain multiplication is defined as:</p>\n\n<blockquote>\n  <p>Given a linear sequence of objects, an associative binary operation on those objects, and a way to compute the cost of performing that operation on any two given objects (as well as all partial results), compute the minimum cost way to group the objects to apply the operation over the sequence.</p>\n</blockquote>\n\n<p>What happens if we put <em>two</em> binary operators? <strong>Can the algorithm for <em>Matrix chain multiplication</em> be further generalized (or how can we otherwise solve this problem) to <em>two</em> binary operators in a <em>binary expresion tree</em>, given the cost functions of these operations?</strong> In particular, <strong>multiplication and addition, which complicates things further by allowing distribution</strong>. Also, does it matter that mind that some of the numbers can be negative, allowing reduction in size of intermediate results (see <a href="http://cs.stackexchange.com/q/1424/2755">Overflow safe summation</a>)?</p>\n\n<p><strong>Also, how does this relate to  <a href="http://en.wikipedia.org/wiki/Graph_reduction" rel="nofollow">Graph Reduction</a>?</strong></p>\n\n<p>I also remember learning about database <a href="http://en.wikipedia.org/wiki/Query_optimization" rel="nofollow">query optimization</a> which seemed to do something similar to determine how early to execute particular joins to keep the intermediate values smaller.</p>\n', 'ViewCount': '422', 'Title': 'Chained operations on sequences with two operators', 'LastEditorUserId': '2755', 'LastActivityDate': '2012-11-28T22:31:40.290', 'LastEditDate': '2012-11-28T22:31:40.290', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<optimization><binary-trees><dynamic-programming><efficiency><arithmetic>', 'CreationDate': '2012-11-20T18:58:03.297', 'FavoriteCount': '1', 'Id': '6790'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider a straight highway in the plane which can be modelled by a horizontal strip in the plane. A finite set T of targets are located on the highway, and a finite set S of wireless sensors are located outside of the highway. A sensor s can monitor a target t if and only if the Euclidean distance between s and t is at most one. Suppose that each sensor s is an element of S has a positive cost c (s) and each target t is an element of T can be monitored by at least one sensor in S. Consider a subset S\' of sensors in S. S\' is said to be a cover if each target in T is covered by at least one sensor in S\'. The cost of S\' is the total costs of the sensors in S\'. The objective is to compute a cover S\' of minimum cost. This is a polynomial time algorithm</p>\n\n<p>Consider a 2D plane. There are targets that are randomly distributed between a $y$ upper bound and lower bound. This set is $T$. $T_1$ is marked with coordinates $(X,Y)$. There is a set $S$ of sensors that are guaranteed to cover every target. Each sensor has a radius $1$ and an $(X,Y)$ coordinate. Each target has a cost $c$ that is a weight. So my task is to find a minimum weight or cost for a set $S\'$ that covers each sensor.</p>\n\n<p>So I know that there is a recursive relation between the disks that "dominate" or "control" other disks but I\'m having trouble seeing a property that shows how to utilize the dominance of the disks. I got this far:</p>\n\n<p>Let $D^+$ be the set of disks whose center lies above the strip (upper disks).</p>\n\n<p>Let $D^-$ be the set of disks whose center lies below the strip (lower disks).</p>\n\n<p>Consider an upper disk $d$, and $d$ intersects a vertical line $L$. Another upper disk $d\'$ is said to be controlled or dominated by $d$, if one of the following holds: </p>\n\n<ol>\n<li>$d\'$ does not intersect $L$,</li>\n<li>the lower intersection endpoint of $d\'$ and $L$ is higher than the lower intersection endpoint of $d$ and $L$, and</li>\n<li>the lower intersection endpoint of $d\'$ and $L$ is identical to the lower intersection endpoint of $d$ and $L$, but the center of $d\'$ is on the right of the center of $d$.</li>\n</ol>\n\n<p>Similarly, for a lower disk $d$, and $d$ intersects a vertical line $L$. Another lower disk $d\'$ is said to be controlled or dominated by $d$, if one of the following holds:</p>\n\n<ol>\n<li>$d\'$ does not intersect $L$, </li>\n<li>the upper intersection endpoint of $d\'$ and $L$ is lower than the upper intersection endpoint of $d$ and $L$, and </li>\n<li>the upper intersection endpoint of $d\'$ and $L$ is identical to the upper intersection endpoint of $d$ and $L$, but the center of $d\'$ is on the right of the center of $d$.</li>\n</ol>\n\n<p>Howevern, I\'m having trouble finalizing the algorithm. Any help? Is that clear?</p>\n', 'ViewCount': '218', 'Title': 'Recursive relation help for dynamic programming 2D plane algorithm', 'LastEditorUserId': '4682', 'LastActivityDate': '2012-11-22T05:52:23.570', 'LastEditDate': '2012-11-22T05:52:23.570', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4682', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2012-11-21T19:54:08.923', 'Id': '6825'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '106', 'Title': 'Minimum cost subset of sensors covering targets', 'LastEditDate': '2012-11-23T06:40:54.747', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4695', 'FavoriteCount': '1', 'Body': "<p>I have a dynamic programming problem: </p>\n\n<blockquote>\n  <p>If I have a set of sensors covering targets (a target might be\n  covered by mutiple sensors) how can I find the minimum cost subset of\n  sensors covering all targets given each sensor has a cost?</p>\n</blockquote>\n\n<p>I have thought a lot about this, but I can't reach the recursive formula to write my program. The greedy algorithm does not always provide the correct minimum cost subset. My problem is that sensors overlap in covering targets. Any help?</p>\n\n<p><strong>Example:</strong> I have set of sensors $\\{s_1,s_2,s_3\\}$ with costs $\\{1,\\frac{5}{2},2\\}$ and 3 targets $\\{t_1,t_2,t_3\\}$. Sensors cover $\\{t_1 t_2,t_1 t_2 t_3,t_2 t_3\\}$ and I need to get minimum cost subset by dynamic programming. For the above example if I use greedy algorithm I would get $s_1,s_3$ but the right answer is $s_2$ only.</p>\n", 'Tags': '<algorithms><dynamic-programming>', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-23T06:40:54.747', 'CommentCount': '0', 'AcceptedAnswerId': '6850', 'CreationDate': '2012-11-22T19:01:32.803', 'Id': '6839'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to be able to locate a substring in a string allowing for a specified number of mismatches, insertions and deletions - and at the same time know how many mismatches, insertions and deletions were used for any match.</p>\n\n<p>Using brute force backtrack I can find the matches, but I cannot guarantee that the match was produced using the fewest permutations possible.</p>\n\n<p>Using dynamic programming I can find the matches and guarantee that the match was produced using the fewest permutations possible, but I cannot specify a number of allowed mismatches, insertion and deletions - only a total edit distance.</p>\n', 'ViewCount': '243', 'Title': 'Fuzzy string matching algorithm with allowed events?', 'LastEditorUserId': '19', 'LastActivityDate': '2013-01-27T23:12:52.733', 'LastEditDate': '2012-12-01T05:00:57.040', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4810', 'Tags': '<algorithms><dynamic-programming><strings><substrings>', 'CreationDate': '2012-11-30T10:52:00.527', 'FavoriteCount': '1', 'Id': '7040'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p>We are given two strings $x=x_1,x_2,x_3,\\ldots,x_m$ and $y=y_1,y_2,y_3,\\ldots,y_n$ over some finite alphabet.\n  We consider the problem of converting $x$ to $y$. Using the following operations:</p>\n  \n  <p>1.Substitution: replace one symbol by another one.</p>\n  \n  <p>2.Insertion: inserts one symbol</p>\n  \n  <p>3.Deletion: delete one symbol.</p>\n</blockquote>\n\n<p>For example, if $x$="logarithm" and $y$="algorithm", we convert $x$ to $y$ in the following way:</p>\n\n<ol>\n<li><p>start with "logarithm"</p></li>\n<li><p>inserting "a"at the front gives "alogarithm".</p></li>\n<li><p>deleting "o"gives "algarithm"</p></li>\n<li><p>replacing the second "a"by "o"gives "algorithm".</p></li>\n</ol>\n\n<p>The similarity problem between the string $x$ and $y$ is defined to be the minimum number of operations needed to convert $x$ to $y$.</p>\n\n<p>For example, the similarity between $x$="logarithm" and $y$="algorithm" is 3, because $x$ can be converted to $y$ using three operations. If the string $x$ has length $m$ and the string $y$ is empty, then the similarity between $x$ and $y$ is similar to $m$.</p>\n\n<p>Give a dynamic programming algorithm (in pseudocode) that computes, in $\\mathcal o(mn)$ time, the similarity between the string $x$ and $y$.</p>\n\n<p>It is as the edit distance problem but there is the corresponding minimization problem problem where we measure similarity instead of distance .  </p>\n', 'ViewCount': '400', 'Title': 'String similarity problem', 'LastEditorUserId': '3094', 'LastActivityDate': '2012-12-03T10:17:05.547', 'LastEditDate': '2012-12-02T20:38:06.193', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4828', 'Tags': '<algorithms><reference-request><dynamic-programming><strings>', 'CreationDate': '2012-12-02T19:47:18.867', 'Id': '7109'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I was solving the following problem. But I am not able to think of an efficient algorithm for this modified version of problem. The problem statement is:</p>\n\n<blockquote>\n  <p>We are given <strong>K Rectangles</strong>. The dimensions of $x$-th Rectangle is ($N_x \\times M_x$), where $1\\leq x \\leq K$.\n  From each rectangle $x$ , Alice Cuts  a rect. of dimension ($P_x \\times Q_x$), where $1 \\leq x \\leq K$ ,\n  from the <strong>Top-Right Corner</strong> and trashes the cut portion.</p>\n  \n  <p>Initially Alice placed a robot, at the <strong>top left corner</strong> of <strong>each</strong> rectangle. He is very interested to find the <em>number of ways, each robot</em> can reach the bottom-right corner (target) using the following rules:</p>\n  \n  <ul>\n  <li>The robot can only move 1 unit <em>right</em>* or the robot can only move 1 unit <em>downward</em>.</li>\n  <li>The robot <strong>cannot</strong> move upward, <strong>can't</strong> move even <em>left</em> and <strong>can't</strong> move even <em>diagonally</em>.</li>\n  <li>The robot can move on rectangle boundary.</li>\n  </ul>\n  \n  <p>The number of ways can be very large. Thus, Answer = (Number of ways) mod 10^9+7.</p>\n</blockquote>\n\n<p>Constraints is very large:</p>\n\n<pre><code>1&lt;=K&lt;=10\n2&lt;=(Nx,Mx)&lt;=5*10^5\n1&lt;=Px&lt;Nx\n1&lt;=Qx&lt;Mx\n</code></pre>\n\n<p>The Time Limit is just 1 second.</p>\n\n<p>Example:</p>\n\n<pre><code>K=1\n\nN1=2 M1=2\n\nP1=1 Q1=1\n</code></pre>\n\n<p>Answer: 5 ways</p>\n\n<p>I had <strong>solved the easier version</strong> of this problem (Using Pascal triangle + Combinatorics), when no portion of rectangle is cut/removed. But I don't know how to solve the above modified problem, where a small rectangle is cut from top-right Corner of the original rectangle.</p>\n", 'ViewCount': '325', 'Title': 'Modified paths Counting in a Rectangle', 'LastEditorUserId': '140', 'LastActivityDate': '2012-12-07T15:41:08.113', 'LastEditDate': '2012-12-04T18:01:37.250', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2041', 'Tags': '<algorithms><combinatorics><dynamic-programming>', 'CreationDate': '2012-12-04T10:28:44.047', 'Id': '7152'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '258', 'Title': 'Find maximum distance between elements given constraints on some', 'LastEditDate': '2013-01-14T22:06:36.387', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4896', 'FavoriteCount': '1', 'Body': '<p>I have a list of numbered elements 1 to N that fit into positions on a number line starting with 1. I also have constraints for these elements:</p>\n\n<ul>\n<li>The element 1 is in position 1, and element N must be at a position >= the position of element N-1. (i.e. element 2 could be at position 1, element 3 at position 7, and element 4 at position 8 (but not position 5))</li>\n<li>Some elements must be within a certain distance from each other on the line.</li>\n<li>Some elements must be at least a certain distance from other on the line.</li>\n</ul>\n\n<p>My objective is to return an integer that represents the maximum span between element 1 and element N. If no lineup is possible, return -1, and if the elements can be any distance apart, return -2. </p>\n\n<p>I am given:</p>\n\n<ul>\n<li>The number of elements</li>\n<li>A withinArray[][] where withinArray[x][y] = the distance elements x and y must be within on the line. Any zero values represent no constraints.</li>\n<li>An atLeastArray[][] where atLeastArray[x][y] = the distance elements x and y must be apart on the line. Any zero values represent no constraints.</li>\n</ul>\n\n<p>An example input would be: 4 elements, withinArray<a href="http://stackoverflow.com/questions/13714903/find-maximum-distance-between-elements-given-constraints-on-some">1</a>[3] = 10, withinArray[2][4] = 20, and atLeastArray[2][3] = 3. (all other array values are zero).</p>\n\n<p>The return value for this input would be 27. (element 1 at position 1, element 2 at position 8, element 3 at position 11, and element 4 at position 28)</p>\n\n<p>The problem was first posted <a href="http://stackoverflow.com/questions/13714903/find-maximum-distance-between-elements-given-constraints-on-some">here</a> by someone else. I\'d like to figure out an elegant solution to it programmatically. Though I\'ve been working on it for a whole day, I still have no luck coming up with a good solution. I feel that I need to use dynamic programming techniques, but have a hard time finding a good substructure. </p>\n\n<p>I am not able to locate the same example on the web. Any pointer to such materials online would be appreciated. It\'s even better if you are an expert for such kind of question and can outline the solution in detail. Executable code is a plus.</p>\n', 'Tags': '<algorithms><optimization><dynamic-programming><linear-programming>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-14T22:06:36.387', 'CommentCount': '0', 'AcceptedAnswerId': '7213', 'CreationDate': '2012-12-06T10:22:20.080', 'Id': '7208'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '175', 'Title': 'Smallest string length to contain all types of beads', 'LastEditDate': '2012-12-10T13:39:24.903', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4751', 'FavoriteCount': '1', 'Body': '<p>I read this question somewhere, and could not come up with an efficient answer.</p>\n\n<p>A string of some length has beads fixed on it at some given arbitrary distances from each other. There are $k$ different types of beads and $n$ beads in total on the string, and each bead is present atleast once. We need to find one consecutive section of the string, such that:</p>\n\n<ul>\n<li>that section contains all of the $k$ different types of beads atleast once.</li>\n<li>the length of this section is as small as possible, provided the first condition is met.</li>\n</ul>\n\n<p>We are given the positions of each bead on the string, or alternatively, the distances between each pair of consecutive beads.</p>\n\n<p>Of course, a simple brute force method would be to start from every bead (assume that the section starts from this bead), and go on till atleast on instance of all beads are found while keeping track of the length. Repeat for every starting position, and find the minimum among them. This will give a $O(n^2)$ solution, where $n$ is the number of beads on the string. I think a dynamic programming approach would also probably be $O(n^2)$, but I may be wrong. Is there a faster algorithm? Space complexity has to be sub-quadratic. Thanks!</p>\n\n<p>Edit: $k$ can be $O(n)$.</p>\n', 'Tags': '<algorithms><dynamic-programming><search-algorithms>', 'LastEditorUserId': '4751', 'LastActivityDate': '2012-12-10T15:19:21.183', 'CommentCount': '0', 'AcceptedAnswerId': '7278', 'CreationDate': '2012-12-09T20:04:48.587', 'Id': '7276'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I have the set of weights $W = \\{w_1,w_2,\\ldots,w_{50}\\}$ where each $1 \\le w_i \\le 60$ is an integer.  I am interested in determining <strong>all</strong> subsets (not just one, and not just the number of them) of $W$ with a fixed sum $s$.  I realize this is obviously NP-hard, but are there some efficient ways (e.g. dynamic programming) to obtain this result for these relatively nice conditions (e.g. only 50 items, weights integer and bounded)?</p>\n', 'ViewCount': '1230', 'Title': 'Finding all solutions to subset sum for integers with bounded weights', 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-10T19:33:09.907', 'LastEditDate': '2013-02-10T19:33:09.907', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5376', 'Tags': '<dynamic-programming><np-hard>', 'CreationDate': '2013-01-10T19:57:34.920', 'Id': '7874'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>We have a broken stick. For every part, we know it's length. Our task is to connect all parts (glue them), that we will use as small amount of glue as possible. </p>\n\n<p>The amount of glue need to connect two parts equal the maximum from their sizes. We can only glue two parts at one time.Can we solve this problem in the time complexity smaller than $O(n^3)$? I know only the answer, using dynamic table in this complexity</p>\n", 'ViewCount': '136', 'Title': 'Broken stick problem', 'LastActivityDate': '2013-01-11T04:51:06.967', 'AnswerCount': '2', 'CommentCount': '10', 'AcceptedAnswerId': '7882', 'Score': '0', 'OwnerDisplayName': 'Jonny', 'PostTypeId': '1', 'OwnerUserId': '5381', 'Tags': '<complexity-theory><algorithms><dynamic-programming>', 'CreationDate': '2013-01-09T12:40:44.533', 'Id': '7881'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Problem:</p>\n\n<p>Given 11 numbers</p>\n\n<pre><code>{N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11}\n</code></pre>\n\n<p>where</p>\n\n<ul>\n<li><p>N1:amount of profit from product A</p>\n\n<p>N2:amount of profit from Product B </p>\n\n<p>N3:amount of time in <strong>hours</strong> required to make A in factory1(F1)</p>\n\n<p>N4:amount of time in <strong>hours</strong> required to make B in factory1(F1)</p>\n\n<p>N5:maximum number of hours available in a week to make products in\nF1</p>\n\n<p>N6:amount of time in <strong>hours</strong> required to make A in factory2(F2)</p>\n\n<p>N7:amount of time in <strong>hours</strong> required to make B in factory2(F2)</p>\n\n<p>N8:maximum number of hours available in a week to make products in\nF2</p>\n\n<p>N9:amount time in <strong>hours</strong> required to make A in factory3(F3)</p>\n\n<p>N10:amount time in <strong>hours</strong> required to make B in factory3(F3)</p>\n\n<p>N11:maximum number of hours available in a week to make products in\nF3</p></li>\n</ul>\n\n<p>Output: </p>\n\n<p>3 numbers <code>{R1,R2,R3}</code> or <code>"-1"</code></p>\n\n<p>where:</p>\n\n<pre><code>R1:total number of A\'s to manufacture in a week\n\nR2:total number of B\'s to manufacture in a week\n\nR3:total profit which is **maximum possible profit** with the right mix of A and B\n\n**result = `-1` if R1 and/or R2 is non integer(contains fraction)**\n</code></pre>\n\n<p>consider the Input <code>{10.5,13,3,7,5,6,5,11,16,11,21.6}</code></p>\n\n<pre><code>                    PRODUCT A               PRODUCT B        total hours/Week\n\nProfit/Piece             10.5                  13\n\nHours required in F1     3                     7                   5\n\nHours required in F2     6                     5                   11\n\nHours required in F3     16                    11                  21.6 \n</code></pre>\n\n<p>Any Idea/Algorithm?</p>\n\n<p>Thanks in Advance</p>\n', 'ViewCount': '208', 'Title': 'Maximizing profit', 'LastEditorUserId': '6709', 'LastActivityDate': '2013-02-06T21:53:01.297', 'LastEditDate': '2013-02-06T17:44:48.183', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '-6', 'PostTypeId': '1', 'OwnerUserId': '6709', 'Tags': '<algorithms><dynamic-programming><knapsack-problems>', 'CreationDate': '2013-02-06T14:37:10.063', 'FavoriteCount': '0', 'Id': '9543'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p>An unhappy number is a number that is not happy, i.e., a number $n$ such that iterating this sum-of-squared-digits map starting with n never reaches the number 1. </p>\n</blockquote>\n\n<p>For example, $23\\rightarrow 2^2+3^2 = 13 \\rightarrow  1^2 + 3^2 = 1$, so $23$ is a happy number. But, number $2$ is not and you can verify it.</p>\n\n<p>The problem around my question (from <a href="http://ser.cs.fit.edu/ser2012/problems/division_1/SER2012%20Problem%20Set%20-%20Division%20I.pdf#page=14" rel="nofollow">2010 acp icpc problem set</a>) is to count unhappy numbers in an interval $[\\textrm{lo}, \\textrm{hi}]$. I\'m looking for an algorithm that is practical for $\\textrm{hi}$ up to $10^{18}$. </p>\n\n<p>How can I  write an algorithm for this problem, efficient and correct?</p>\n\n<p>I know that the solution is with dynamic programming, but I don\'t know how can I get it.</p>\n\n<p>My approach when I read the problem was use a backtracking to mark all numbers in the interval, like a dfs, and see that when you\'re processing a number and got the result, you should mark all numbers with form permutations of digits for the initial number. Then, I thought that a backtracking approach is faster. But this is not enough for contest, because the interval is $[1, 10^{18}]$ so, clearly dynamic programming is the way.</p>\n', 'ViewCount': '236', 'Title': 'Count unhappy numbers in a large interval', 'LastEditorUserId': '1152', 'LastActivityDate': '2013-03-27T12:56:15.447', 'LastEditDate': '2013-02-26T19:28:06.080', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1152', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2013-02-26T04:06:10.473', 'FavoriteCount': '1', 'Id': '10112'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I find it fairly easy to generate an upper bound for nearly any iterative solution (e.g. look at the limits on each loop, etc.), and can oftentimes create an upper bound for normal recursive functions.</p>\n\n<p>However, I am now trying to determine a "Big-O" for a DP problem I\'ve memoized.  I don\'t really care about the answer to this specific problem, but am more interested in a method I can use for other programs I write, or a resource that I can read to learn how to analyze this type of program.</p>\n\n<p>In case a concrete example helps, the following is my program to solve this <a href="http://www.geeksforgeeks.org/dynamic-programming-set-21-box-stacking-problem/" rel="nofollow">box stacking problem</a>.  (I wrote my solution before looking at theirs, which appears to use bottom-up DP instead of top-down/memoization.  Thus, I don\'t think I can cross-apply their time complexity to my algorithm.)</p>\n\n<pre><code>import java.util.*;\n\npublic class BoxStack {\n  private static HashMap&lt;Base, Double&gt; memo; //My memo\n\n  //How many times do I call the reward subroutine *and* look something up?\n  private static int callCt = 0; \n\n  //Test data\n  private static double[] h = {4, 1, 4, 10}; //heights of boxes\n  private static double[] w = {6, 2, 5, 12}; //widths of boxes\n  private static double[] d = {7, 3, 6, 32}; //depths of boxes\n  private static final int N = 4;            //number of test cases\n\n  //My "r()" subroutine (short for reward).\n  //Given a box size (maximum width, maximum depth, and height of the box to be added)\n  //Return the maximum size tower I can place on top of that base\n  public static double r(double maxW, double maxD, double elementH) {\n    //I don\'t really need 3 max variables here, but it helped me to think \n    //about the maximum of each box with a given rotation\n    double max1 = 0;\n    double max2 = 0;\n    double max3 = 0;\n\n    //Return the memoized result if possible\n    Base testBase = new Base(maxW, maxD);\n    if (memo.get(testBase) != null) {\n      return memo.get(testBase);\n    }\n\n    //We\'re going to do some calculating, so increment call count\n    callCt++;\n\n    //Go through all the boxes...\n    for (int i = 0; i &lt; N; i++) {\n      //If you can stack it on top of the base in any orientation, do so!\n      if ((w[i] &lt; maxW &amp;&amp; d[i] &lt; maxD) || (w[i] &lt; maxD &amp;&amp; d[i] &lt; maxW)) {\n        max1 = Math.max(max1, r(w[i], d[i], h[i])+h[i]); //Recursive call!\n      }\n\n      if ((h[i] &lt; maxW &amp;&amp; d[i] &lt; maxD) || (h[i] &lt; maxD &amp;&amp; d[i] &lt; maxW)) {\n        max2 = Math.max(max2, r(h[i], d[i], w[i])+w[i]);\n      }\n\n      if ((h[i] &lt; maxW &amp;&amp; w[i] &lt; maxD) || (h[i] &lt; maxD &amp;&amp; w[i] &lt; maxW)) {\n        max3 = Math.max(max3, r(h[i], w[i], d[i])+d[i]);\n      }        \n    }\n\n    //Add to memo\n    memo.put(testBase, Math.max(max1, Math.max(max2, max3)));\n\n    return Math.max(max1, Math.max(max2, max3));\n  }\n\n  public static void main(String[] args) {\n    //Set up memo\n    memo = new HashMap&lt;Base, Double&gt;();\n\n    //Print max height\n    System.out.println(r(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0));\n\n    System.out.println(callCt);\n  }\n\n  //Something I can use to map my base sizes to my heights\n  private static class Base {\n    double width;\n    double height;\n\n   public Base (double width, double height) {\n      this.width = width;\n      this.height = height;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      Base that = (Base) o;\n      return ((that.width == this.width &amp;&amp; that.height == this.height) || (that.height == this.width &amp;&amp; that.width == this.height));\n    }    \n\n    @Override\n    public int hashCode() {\n      return (this.toString()).hashCode();\n    }\n\n    public String toString() {\n      return ("(" + Math.min(width, height) + "," + Math.max(height, width) + ")");\n    }\n  }\n}\n</code></pre>\n', 'ViewCount': '328', 'Title': 'Time Complexity Upper Bound of Memoized DP Problems', 'LastActivityDate': '2013-03-18T12:57:14.393', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10600', 'Score': '1', 'OwnerDisplayName': 'anorton', 'PostTypeId': '1', 'OwnerUserId': '1592', 'Tags': '<asymptotics><dynamic-programming>', 'CreationDate': '2013-03-05T02:00:43.727', 'FavoriteCount': '0', 'Id': '10369'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an input array and I have to select an indefinite number of intervals from it so that the "profit" is maximal and I have exactly T elements selected in total, where T is given. Profit means the sum of all the elements of an interval, except for the first element. An interval can consist of a single element, meaning that the profit for such an interval is 0. The array may contain negative numbers. Apparently dynamic programming is the answer to this problem, but I cannot think of an efficient algorithm to solve it. This is homework, so I would appreciate any help.</p>\n', 'ViewCount': '54', 'Title': 'Select optimal subintervals from array', 'LastEditorUserId': '7217', 'LastActivityDate': '2013-03-10T22:04:54.743', 'LastEditDate': '2013-03-10T22:04:54.743', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7217', 'Tags': '<dynamic-programming>', 'CreationDate': '2013-03-10T15:43:08.017', 'FavoriteCount': '1', 'Id': '10425'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '210', 'Title': 'Proving correctness of the algorithm for convex polygon minimum cost triangulation', 'LastEditDate': '2013-04-07T12:38:35.643', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7336', 'FavoriteCount': '1', 'Body': '<p>I have read many solutions for the minimum cost of triangulation problem and intuitively get the idea , however I am struggling to figure out how to prove it formally. I kind of feel that it has to be proven by induction but I struggle at choosing the right quantity to look at and also at the inductive step portion of the proof.</p>\n\n<p>For example, can you provide a formal proof for the algorithm described <a href="http://users.eecs.northwestern.edu/~dda902/336/hw6-sol.pdf" rel="nofollow">here</a> (page 5 problem 6.12).</p>\n', 'Tags': '<algorithms><algorithm-analysis><dynamic-programming><recursion><correctness-proof>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-07T12:53:48.043', 'CommentCount': '2', 'AcceptedAnswerId': '11098', 'CreationDate': '2013-04-07T01:15:34.200', 'Id': '11085'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am having hard times learning Dynamic Programming.</p>\n\n<p>I looked around the web and found many tutorials with examples.</p>\n\n<p>Each time I tried to figure out how to solve a new problem before looking at the solution my mind locked up and I could not continue trying...</p>\n\n<p>I do not where to start!! For example, in divide and conquer I know how to start but In dynamic programming there is no a fixed starting point or at least (technique).</p>\n\n<p>Last try I moved forward but I found that the solution was in a completely different direction.</p>\n', 'ViewCount': '353', 'ClosedDate': '2013-04-08T14:44:49.460', 'Title': 'How to master Dynamic Programming?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-08T14:42:15.260', 'LastEditDate': '2013-04-08T14:42:15.260', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4492', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2013-04-08T02:27:40.133', 'Id': '11128'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have come across the following problem.</p>\n\n<p>You have $N$ registers, numbered $1,2,\\dots, N$, each of which can hold an integer value. You\nare given the initial values of the registers, which have the property that every number\nfrom $1, \\dots, N$ occurs exactly once among the $N$ registers.</p>\n\n<p>Each register has a "<strong>reset button</strong>": pressing the reset button on register $i$ changes its value to $i$. </p>\n\n<p>In one move you can pick any subset of the registers (say, registers $3, 5, 9$) and simultaneously press all their reset buttons. </p>\n\n<p><strong>However you must ensure that\nevery number from $1,2,\\dots, N$ continues to occur exactly once amongst the $N$ registers</strong>.</p>\n\n<p>The cost of a move that resets $m$ registers simultaneously is $m^2$.</p>\n\n<p>You can perform a\nsequence of such moves one after the other, and the total cost is the sum of the costs\nof the individual moves.</p>\n\n<p>Register $i$ is said to be stable if it contains the value $i$. Given a target $K$, where $K \\le N$,\nthe goal is to perform a sequence of moves at the end of which at least $K$ registers are\nstable. </p>\n\n<p><strong>Find the minimum possible cost for achieving this.</strong></p>\n\n<p>My attempt on problem:</p>\n\n<p>Let $A[1, \\dots, n]$ be given registers with initial values.</p>\n\n<pre><code>1. Divide $A$ into Disjoint Sets \n2. For each disjoint set maintain the number of elements in it. \n3. Find the minimum operations from these subsets(explained below with example)\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>Register:      1  2  3  4  5  6  7  8  9  10  11\n\nInitial Value: 11 3  6  9  8  4  1  5  10  2  7\n</code></pre>\n\n<p>and $K=7$</p>\n\n<p>Since Every number should be in the register we need to <code>reset</code> set of registers as shown below.</p>\n\n<p>We can Reset $1,11,7$ in a single <code>RESET</code> operation.</p>\n\n<p>Similarly we can reset $2,3,6,4,9,10$ and $5,8$ in a single <code>RESET</code> operation.</p>\n\n<p>So we now have $3$ disjoint subsets of $A$</p>\n\n<p>Let </p>\n\n<p>$S_1=\\{1,11,7\\}$, note that  $|S1|=3$</p>\n\n<p>$S_2=\\{2,3,6,4,9,10\\}$, $|S2|=6$</p>\n\n<p>$S_3=\\{5,8\\}$ and $|S3|=2$</p>\n\n<p>So Minimum number of operations for $K=7$ is $(6^2+2^2)=40$.</p>\n\n<p>Now we need to find minimum number of oprations form these three subset. </p>\n\n<p>more formally Given $S=\\{S_1, S_2, \\dots, S_n\\}$ we need to find Subset $\\{S_{i_1},S{i_2}, \\dots, S_{i_p}\\}$ such that </p>\n\n<p>$\\sum_{j=1}^{p} S_{i_j} \\ge K $ and $\\sum_{j=1}^{p} S_{i_j}^2$ is as minimum as possible.</p>\n\n<p>How to efficiently find the minimum number of operations from these subsets?</p>\n\n<p>Any Alternative solution(s)?</p>\n', 'ViewCount': '145', 'Title': 'Sorting Problem', 'LastEditorUserId': '139', 'LastActivityDate': '2013-05-03T02:14:58.017', 'LastEditDate': '2013-05-02T15:00:47.223', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4752', 'Tags': '<dynamic-programming><sorting><permutations>', 'CreationDate': '2013-05-02T09:08:47.950', 'FavoriteCount': '1', 'Id': '11724'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to know which is the best way to find the longest common subsequence of two strings</p>\n', 'ViewCount': '147', 'Title': 'Find the longest subsequence of two strings', 'LastEditorUserId': '8105', 'LastActivityDate': '2013-05-10T12:19:08.163', 'LastEditDate': '2013-05-10T12:19:08.163', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '8105', 'Tags': '<algorithms><algorithm-analysis><dynamic-programming><subsequences>', 'CreationDate': '2013-05-10T01:58:55.797', 'FavoriteCount': '2', 'Id': '11924'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have this confusion related to the time complexity of the algorithm solving the knapsack problem using dynamic programming</p>\n\n<p><img src="http://i.stack.imgur.com/CvvMV.png" alt="enter image description here"></p>\n\n<p>I didn\'t get how the time complexity of the algorithm came out to be $O(nV^*)$</p>\n', 'ViewCount': '914', 'Title': 'Confusion related to time complexity of dynamic programming algorithm for knapsack problem', 'LastActivityDate': '2013-05-13T02:10:27.163', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6999', 'Tags': '<computability><time-complexity><dynamic-programming><knapsack-problems>', 'CreationDate': '2013-05-12T20:43:16.567', 'Id': '11976'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to solve a problem of finding incompatible jobs set using greedy algorithm. However, I am not sure if greedy algorithm can solve this problem or I need to perform another approach.</p>\n\n<p>I have a set of jobs with start and finish time and I want to find the smallest subset of this jobs such that all the jobs are incompatible with at least one job of this subset.</p>\n\n<p>Suppose</p>\n\n<pre><code>job  start   end\n1    1       3\n2    2       11\n3    4       6\n4    7       8\n</code></pre>\n\n<p>My required job set J is {2} since  all the jobs are incompatible with at least one job of the job set J. I tried to use greedy algorithm like sorting jobs by start time, end time ( adding one  and removing all the ones incompatible and so on) But it is not optimal. As you can see in this example. If I add job 1 and then remove all the job incompatible with it, I will remove job 2, Then I will have to add 3 and 4 in the jobset J.</p>\n\n<p>Am I going the right way?</p>\n', 'ViewCount': '200', 'Title': 'Issues with using greedy algorithm (Interval scheduling variant)', 'LastEditorUserId': '8153', 'LastActivityDate': '2013-05-14T22:45:50.280', 'LastEditDate': '2013-05-14T14:31:20.733', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '8153', 'Tags': '<algorithms><combinatorics><dynamic-programming><scheduling><greedy-algorithms>', 'CreationDate': '2013-05-14T04:16:16.893', 'Id': '12001'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>The MAX k-SAT problem is:</p>\n\n<blockquote>\n  <p>\u201cGiven a set of clauses C1,\u2026,Ck, each of length k, over a set of\n  variables x1,\u2026,xn, find a truth assignment that satisfies as many of\n  the clauses as possible.\u201d</p>\n</blockquote>\n\n<p>I'm trying for find a randomized 0.999-approximation algorithm for the MAX 10-SAT problem. Help :(</p>\n", 'ViewCount': '87', 'Title': 'MAX 10-SAT Algorithm', 'LastActivityDate': '2013-05-15T16:16:03.370', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '12032', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '3083', 'Tags': '<algorithms><proof-techniques><dynamic-programming>', 'CreationDate': '2013-05-15T02:48:00.273', 'Id': '12031'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given three strings $x$, $y$, and $z$ over an arbitrary finite alphabet, I need to determine their longest common subsequence (LCS).</p>\n\n<p><strong>Example</strong>: A longest common subsequence of <code>bandana</code>, <code>cabana</code>, and <code>magazine</code> is <code>aan</code>.</p>\n\n<p>I'm trying to find an algorithm which uses $O(|x|\\cdot |y| \\cdot |z|)$ space where $|s|$ denotes the length of the string $s$.</p>\n", 'ViewCount': '163', 'Title': 'Find longest common subsequence in limited space', 'LastEditorUserId': '2205', 'LastActivityDate': '2014-03-25T19:29:35.657', 'LastEditDate': '2013-05-15T18:05:44.963', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12046', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '3083', 'Tags': '<algorithms><algorithm-analysis><dynamic-programming><strings>', 'CreationDate': '2013-05-15T17:37:25.197', 'Id': '12045'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Here is the question:</p>\n\n<p>I have a given tree with n nodes. The task is to find the number of subtrees of the given tree with outgoing edges to its complement less than or equal to a given number K.</p>\n\n<p>for example: If <code>n=3</code> and <code>k=1</code></p>\n\n<p>and the given tree is    <code>1---2---3</code></p>\n\n<p>Then the total valid subtrees would be 6</p>\n\n<pre><code>{}, {1}, {3}, {1,2}, {2,3}, {1,2,3}\n</code></pre>\n\n<p>I know I can enumerate all <code>2^n</code> trees and chack the valid ones, but is there some approach that is faster? Can I achieve polynomial time in <code>n</code>? Something close to <code>O(n^3)</code> or even <code>O(n^4)</code> would be nice.</p>\n\n<p>for k=1 this value turns out to be <code>2*n</code></p>\n\n<p><strong>There was a solution provided for this one as:</strong></p>\n\n<p>This is a fairly typical instance of the DP-on-a-tree paradigm. Let's generalize the problem slightly by allowing the specification of a root vertex v and stratifying the counts of the small-boundary trees in two ways: whether v is included, and how many edges comprise the boundary.</p>\n\n<p>The base case is easy. There are no edges and thus two subtrees: one includes v, the other excludes v, and both have no boundary edges. Otherwise, let e = {v, w} be an edge incident to v. The instance looks like this.</p>\n\n<pre><code>|\\         /|\n| \\   e   / |\n|L v-----w R|\n| /       \\ |\n|/         \\|\n</code></pre>\n\n<p>Compute recursively the stratified counts for L rooted at v and R rooted at w.</p>\n\n<p>Subtrees that include v consist of a subtree in L that includes v, plus optionally e and a subtree in R that includes w. Subtrees that don't include v consist of either a subtree in L that doesn't include v, or a subtree in R (double counting the empty tree). This means we can obtain the stratified counts by convolving the stratified counts for L with the stratified counts for R.</p>\n\n<p>Here's how this works on your example. Let's choose root 1.</p>\n\n<pre><code>  e\n1---2---3\n</code></pre>\n\n<p>We choose e as shown and recurse.</p>\n\n<pre><code>1\n</code></pre>\n\n<p>The vector for includes-1 is [1], since the one subtree is {1}, with no boundary. The vector for excludes-1 is [1], since the one subtree is {}, also with no boundary.</p>\n\n<pre><code>2---3\n</code></pre>\n\n<p>We compute 2 and 3 as we did for 1. The vector for includes-2 is [1, 1], since {2, 3} has no boundary edges, and {2} has one. We obtained this vector by adding the includes-2 vector for 2, shifted by one because of the new boundary edge to make [0, 1], to the convolution of the includes-2 vector for 2 with the includes-3 vector for 3, which is [1, 0]. The vector for excludes-2 is [1] + [1, 1] - [1] = [1, 1], where [1, 1] is the sum of the shifted includes-3 vector and the excludes-3 vector, and the subtraction is to compensate for double-counting {}.</p>\n\n<p>Now, for the original invocation, to get the includes-1 vector, we add [0, 1], the includes-1 vector for 1 shifted by one, to the convolution of [1] with [1, 1], obtaining [1, 2]. To check: {1, 2, 3} has no boundary, and {1} and {1, 2} have one boundary edge. The excludes-1 vector is [1] + [1, 2, 1] - [1] = [1, 2, 1]. To check: {} has no boundary, {2, 3} and {3} have one boundary edge, and {2} has two boundary edges.</p>\n\n<p><strong>I am unable to understand this fully. Can anyone help?</strong></p>\n", 'ViewCount': '242', 'LastEditorDisplayName': 'user742', 'Title': 'Trouble understanding this dynamic programming solution', 'LastActivityDate': '2013-09-20T09:33:50.137', 'LastEditDate': '2013-09-20T09:33:50.137', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12449', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8505', 'Tags': '<algorithms><graph-theory><dynamic-programming><trees>', 'CreationDate': '2013-06-03T16:03:41.183', 'Id': '12445'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If you have a long string of length $n$ and a shorter string of length $m$, what is a suitable recurrence to let you compute all $n-m+1$ <a href="http://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levevenshtein distances</a> between the shorter string and all substrings of the longer string of length $m$?</p>\n\n<p>Can it in fact be done in $O(nm)$ time?</p>\n', 'ViewCount': '132', 'Title': 'Semi-local Levenshtein distance', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-02T09:52:43.530', 'LastEditDate': '2013-09-02T09:52:43.530', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '8938', 'Tags': '<recurrence-relation><dynamic-programming><strings><string-metrics><edit-distance>', 'CreationDate': '2013-06-30T11:00:35.020', 'Id': '12986'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '447', 'Title': 'Dynamic Programming To calculate the combinations', 'LastEditDate': '2013-07-03T05:05:31.327', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Body': '<p>This is a problem from a past contest at topcoder : <a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=12338" rel="nofollow">Problem</a>.</p>\n\n<p>Its solution is given here : <a href="http://apps.topcoder.com/wiki/display/tc/SRM+566" rel="nofollow">Solution [Scroll Down to Penguin Emperor]</a></p>\n\n<p>I am unable to understand how the section with subheading "Combinations are associative" works. What is actually going on in this step ? How is the convolution property being used ? Or the Associative property of Combination ? How is the exponentiation squaring being performed ?</p>\n\n<p><strong>EDIT</strong></p>\n\n<p><em>Problem Statement</em> </p>\n\n<p>You are Given N cities numbered from 0 to N-1 in a circular order.\nYou are currently at city index 0.\nOn <strong>first</strong> day you can move from your your current city with index <strong>i</strong> to a city with index <strong>j</strong> such that </p>\n\n<pre><code>j = (i+N-1)MOD N \nor\nj = (i+1)MOD N  \n</code></pre>\n\n<p>On <strong>second</strong> day you can move from your your current city with index <strong>i</strong> to a city with index <strong>j</strong> such that </p>\n\n<pre><code>j = (i+N-2)MOD N \nor\nj = (i+2)MOD N  \n</code></pre>\n\n<p>and so on. So on Day <strong>x</strong>, you can move from your your current city with index <strong>i</strong> to a city with index <strong>j</strong> such that </p>\n\n<pre><code>j = (i+N-(X MOD N))MOD N \nor\nj = (i+(X MOD N))MOD N \n</code></pre>\n\n<p>You <strong>have</strong> to travel on each day.</p>\n\n<p>Given the number of Days <strong>M</strong>, find the total number of ways, you can travel starting from city index 0 such that at the end of M days you are back to city index 0 , modulo 1000000007.</p>\n\n<p>The solution given is as following :</p>\n\n<pre><code>final int MOD = 1000000007;\n// Discrete convolution:\nint[] combine(int[] A, int[] B)\n{\n    int n = A.length;\n    int[] C = new int[n];\n    // Skipping when B[i] = 0, is a key optimization:\n    for (int i=0; i&lt;n; i++) if (B[i] != 0) {\n        for (int j=0; j&lt;n; j++) {\n            int k = (j - i + n) % n;\n            C[k] += (int)( (A[j]*(long)B[i]) % MOD );\n            if (C[k] &gt;= MOD) {\n                C[k] -= MOD;\n            }\n        }\n    }\n    return C;\n}\n// Exponentiation by squaring, for our convolution operation:\nint[] power(int[] A, long x)\n{\n    int n = A.length;\n    int[] R = new int[n];\n    R[0] = 1;\n    while (x &gt; 0) {\n        if ( (x &amp; 1) != 0) {\n            R = combine(R, A);\n        }\n        A = combine(A, A);\n        x &gt;&gt;= 1;\n    }\n    return R;\n}\n\npublic int countJourneys(int numCities, long  daysPassed)\n{\n    // Generate R and Q:\n    int[] Q;\n    int[] R = new int[numCities];\n    R[0] = 1;\n    Q = R;\n    for (int i=1; i&lt;=numCities; i++) {\n        //B holds T[i]\n        int[] B = new int[numCities];\n        B[i % numCities] = 1;\n        B[numCities - i] = 1;\n\n        R = combine(R, B);\n\n        if (i == daysPassed % numCities) {\n            Q = R;\n        }\n    }\n    R = power(R, daysPassed / numCities);\n    R = combine(R, Q);\n    return R[0];\n}\n</code></pre>\n\n<p>countJourneys(N, M) is called to get the answer.</p>\n', 'ClosedDate': '2013-07-16T10:21:00.390', 'Tags': '<combinatorics><dynamic-programming>', 'LastEditorUserId': '8655', 'LastActivityDate': '2013-07-03T05:55:13.927', 'CommentCount': '7', 'AcceptedAnswerId': '13046', 'CreationDate': '2013-07-02T16:05:27.457', 'Id': '13039'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>This is a cross-post of <a href="http://stackoverflow.com/questions/17538933/route-planning-in-public-transport-application">this StackOverflow question</a>, (I\'m not aware of linking questions between StackExchange sites). You can ignore the part about programming.</p>\n\n<p>I\'m making a journey planner (or a general timetable application) for all the public transport in my country (bus/train/air).</p>\n\n<p>The state of the project is at midpoint, now I\'m having a bit of a hard time getting the more difficult part of the application done.</p>\n\n<p>Currently, I have all the stops, routes and departure/arrival times.</p>\n\n<p>When there are direct connections between two points, all is fine, I can get the trips for a chosen day. The hard part is getting a complete journey when there are no direct lines.</p>\n\n<p>Say the user wants to travel from <code>city A</code> to <code>city D</code>, but because there are no direct lines between those cities, he needs to pass through <code>city B</code> and <code>city C</code>.</p>\n\n<p>How can I get the optimized routes and <em>transfers</em> for this situation?</p>\n\n<p>My ideas so far a gravitating towards using a graph, but in that case I need a <strong>Time-Dependant Directed Weighted Multigraph</strong>, and I really have no idea at the moment how to implement the <strong>Time-Dependant</strong> part.</p>\n\n<p>Getting just the route can be done by using <code>Dijkstra</code>, <code>A*</code> or <code>Floyd\u2013Warshall</code> algorithms , but because there are departures at different times, I\'m not sure how will this be implemented, to get the optimal solution. I need to take into consideration the duration of a segment (A to B, B to C), waiting time for the transfer, maybe the distance too.</p>\n\n<p>Just to clarify, I don\'t need a single result. I want to get a daily list of all departures from <code>city A</code> that can get the user to <code>city D</code>, with transfers if needed.</p>\n\n<p>Basically, what I\'m trying to get is something like this (taken from Bulgarian Railways, or for that matter, whichever railway site), a list of all departures for a chosen day going from <code>Sofia</code> to <code>Kystendil</code> making transfer in <code>Radomir</code> if needed:</p>\n\n<p><img src="http://i.stack.imgur.com/Yrron.jpg" alt="Sample Result"></p>\n\n<p>If I\'m not clear enough, please ask.</p>\n\n<p>I know that this is done so many times (almost any train website has the solution), but I don\'t know by which terms to even search.</p>\n\n<p><strong>So, my question is: can someone give me guidance how this type of problem is solved?</strong></p>\n\n<p><strong>Or at least by which terms should I search for ideas and how should it be done.</strong></p>\n\n<p>Maybe some suggestions for other sites in the StackExchange network.</p>\n', 'ViewCount': '210', 'Title': 'Route planning in public transport application', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-10T07:46:09.137', 'LastEditDate': '2013-07-10T07:46:09.137', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9100', 'Tags': '<algorithms><graphs><dynamic-programming><shortest-path>', 'CreationDate': '2013-07-09T21:26:13.667', 'FavoriteCount': '1', 'Id': '13189'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I have been recently teaching myself algorithm by reading this classical textbook  <strong>Introduction to Algorithm 3rd</strong> by <strong>Thomas H. Cormen</strong> and others. I was encountered with this following problem and was not sure how to solve it, especially when it comes to the optimal substructure of it and its aciton space in each recursion. Could anyone kindly enlighten me on this </p>\n\n<blockquote>\n  <p>15-11: Inventory Planning, p.411</p>\n  \n  <p>The Rinky Dink Company makes machines that resurface ice rinks. The\n  demand for such products varies from month to month, and so the\n  company needs to develop a strategy to plan its manufacturing given\n  the fluctuating, but predictable, demand. The company wishes to design\n  a plan for the next n months. For each month i, the company knows the\n  demand di, that is, the number of machines that it will sell. Let\n  $D = \\sum^{n}_{i=1}d_i$ be the total demand over the next $n$ months. The company\n  keeps a full-time staff who provide labor to manufacture up to $m$\n  machines in a given month, it can hire additional, part-time labor, at\n  a cost that works out to $c$ dollars per machine. Furthermore, if, at\n  the end of a month, the company is holding any unsold machines, it\n  must pay inventory costs. The cost for holding j machines is given as\n  a function h(j) for $u=1,2,...,D$, where $h(j)\\geq 0$ for $1\\leq j \\leq D$ and\n  $h(j)\\leq h(j+1)$ for $j\\leq 1 \\leq D\u22121$. Give an algorithm that calculates a plan for\n  the company that minimizes its costs while fulfilling all the demand.\n  The running time should be polynomical in $n$ and $D$.</p>\n</blockquote>\n', 'ViewCount': '30', 'ClosedDate': '2013-07-13T09:03:56.323', 'Title': 'What is the optimal substructure for the following DP question', 'LastEditorUserId': '3094', 'LastActivityDate': '2013-07-12T16:38:20.857', 'LastEditDate': '2013-07-12T16:38:20.857', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9153', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2013-07-12T16:29:44.597', 'Id': '13250'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>(It might be useful to refer to page 9 of Multi-Armed Bandit Allocation Indices by Gittins, Glazebrook and Weber if you have it, because there explanation will be much better than mine.)</p>\n\n<p>I'm trying to write a program that finds that optimal expected reward for a 2-armed Bernoulli bandit process where the first arm has prior probability theta ~ Beta(alpha,beta) of success and the second has a fixed probability p of success, and we have a finite horizon n. The prior is updated via Bayes' theorem after each pull. The reward at the kth pull is gamma^k for a success, and 0 for a failure, where gamma is in [0,1). Using the theory from the book, I've written the following program in R, which utilises dynamic programming:</p>\n\n<pre><code>reward = function(alpha,beta,p,gamma,n)\n{\nif (n==1)\n    {\n    return(max(alpha/(alpha+beta),p))\n    }\nelse\n    {\n    success = alpha/(alpha+beta) * (1 + gamma*reward(alpha+1,beta,p,gamma,n-1))\n    failure = beta/(alpha+beta) * (gamma*reward(alpha,beta+1,p,gamma,n-1))\n    other = p*(1-gamma^n)/(1-gamma)\n    return(max(success+failure,other))\n    }\n}\n</code></pre>\n\n<p>This program tells you the expected optimal reward, and I'm pretty sure it works, since for small N it agrees with my hand calculations. However, this program does not output the sequence of pulls required to obtain the optimal reward. How should I go about modifying this program so as to produce the list of pulls as well?</p>\n\n<p>(For what it's worth, I only know a little of R and MatLab. And sorry if this would be more suited to math.stackexchange)</p>\n\n<p>Edit:</p>\n\n<p>I had already tried to do as Wandering Logic said in matlab, using the following:</p>\n\n<pre><code>function [answer] = reward(alpha,beta,p,gamma,n)\n\nglobal arm k\narm = [];\nk = 1;\n\nanswer = subreward(alpha,beta,p,gamma,n);\narm\nend\n\n\nfunction [answer] = subreward(alpha,beta,p,gamma,n)\n\nglobal arm k\n\nif n==1\n    [val,pull] = max([alpha/(alpha+beta),p]);\n    answer = val;\n    arm(k) = pull;\n    k=k+1;\nelse\n    s = alpha/(alpha+beta) * (1 + gamma*subreward(alpha+1,beta,p,gamma,n-1));\n    f = beta/(alpha+beta) * (gamma*subreward(alpha,beta+1,p,gamma,n-1));\n    o = p*(1-gamma^n)/(1-gamma);\n    [val,pull] = max([s+f,o]);\n    answer = val;\n    arm(k) = pull;\n    k=k+1;\nend\nend\n</code></pre>\n\n<p>However, this stores all 2^n - 1 values, rather than just n values.</p>\n", 'ViewCount': '155', 'Title': 'Writing a program to find the optimal reward for a 2-armed Bernoulli bandit', 'LastEditorUserId': '9322', 'LastActivityDate': '2013-07-24T15:13:56.857', 'LastEditDate': '2013-07-24T15:13:56.857', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '1', 'OwnerDisplayName': 'SimonC', 'PostTypeId': '1', 'OwnerUserId': '9322', 'Tags': '<dynamic-programming>', 'CreationDate': '2013-07-23T18:27:46.997', 'Id': '13409'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose, we have an array of numbers $x_j$ and their corresponding weights $w_j$ where $\\sum_j w_j \\gt 1$. Now we need to find $x_m$ such that </p>\n\n<p>$$\\sum_{j=1}^{m-1} w_j \\lt 1/2 \\quad \\text{and} \\quad \\sum_{j=m+1}^{n} w_j \\ge 1/2$$</p>\n\n<p>Moreover, $x_m &gt; x_j$, $x_m &lt; x_k$ where $j \\ne k$. i.e. a solution should be like this -- </p>\n\n<p>$$\\underbrace{x_1, x_2, \\ldots, x_{m-1}}_{\\lt \\, x_m}, x_m, \\underbrace{x_{m+1}, \\ldots, x_{n-1}, x_n}_{\\ge \\, x_m} \\\\\n\\underbrace{w_1, w_2, \\ldots, w_{m-1}}_{\\lt \\, 1/2}, w_m, \\underbrace{w_{m+1}, \\ldots, w_{n-1}, w_n}_{\\ge \\, 1/2}$$</p>\n\n<p>Moreover, it was also mentioned that I may use Dynamic Programming that could be bounded by $O(n\\lg n)$.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>$\\{x_j, w_j\\}: \\quad x_j \\text{ is the value and } w_j \\text{ is the weight.}$</p>\n\n<p>Example Input: $\\{10, 0.4\\}, \\, \\{5, 0.1\\}, \\,  \\{6, 0.9\\}, \\, \\{2, 0.3\\}, \\, \\{3, 0.1\\}$</p>\n\n<p>Example Output: $\\{2, 0.3\\}, \\, \\{3, 0.1\\}, \\,  \\underbrace{\\{5, 0.1\\}}_{x_m}, \\, \\{6, 0.9\\}, \\, \\{10, 0.4\\}$ </p>\n\n<p><strong>How I tried</strong></p>\n\n<p>Step 1: First sort the list according to $w_j$. -- $O(n \\lg n)$</p>\n\n<p>Step 2: Start from the first element from the left, add the weights $w_j$ until \n$\\sum_j w_j \\ge \\, 1/2$. The current $x_j$ is the $x_m$. -- $O(n)$</p>\n\n<p>Step 3: Stop, now we have two lists. One is on the left $L=\\{x_1, x_2, \\ldots, x_{m-1}\\}$ and the other is on the right $R = \\{x_m, x_{m+1}, \\ldots, x_n\\}$.</p>\n\n<p>Step 4: Go through the list $L$, if there is any value $x_k &gt; x_m$, move $x_k$ into $R$ at an appropriate position. Do this until all elements in $L$ is smaller than $x_m$. -- $O(n^2)$</p>\n\n<p>Step 5: if $L \\ne \\emptyset$, $x_m$ is the answer, otherwise $x_1$ is the answer.</p>\n\n<p>The overall complexity will be $O(n \\lg n) + O(n) + O(n^2) \\approx O(n^2)$. I got confused about the DP stuff at the end of the question, so I was wondering if there is really any way to do it in $O(n \\lg n)$ (or better), how do I build the optimal substructure in the case of DP?</p>\n', 'ViewCount': '174', 'Title': 'A complicated variant of Weighted Median problem', 'LastEditorUserId': '7678', 'LastActivityDate': '2013-08-03T00:16:40.533', 'LastEditDate': '2013-08-01T23:17:14.153', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7678', 'Tags': '<algorithms><algorithm-analysis><dynamic-programming>', 'CreationDate': '2013-07-31T05:35:21.857', 'Id': '13535'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a $D$-dimensional grid with the size $(N_1, \\ldots, N_D)$, where $N_i$ are natural numbers, and a "flat block size" $M$, also a natural number. I want to find a decomposition $(m_1, \\ldots, m_D)$ such that:</p>\n\n<ol>\n<li><p>$\\prod_{i=1}^D m_i = M$,</p></li>\n<li><p>$R = \\prod_{i=1}^D f(N_i, m_i) m_i - \\prod_{i=1}^D N_i$ is as low as possible. Here $f(N,m)$ is the minimal number of blocks of length $m$ necessary to cover a 1D grid with size $N$ (or, formally, $f(N, m) = N / m$ if $N$ is a multiple of $m$, and $f(N,m) = N\\,\\mathrm{div}\\,m + 1$ otherwise).</p></li>\n<li><p>The number of $m_i$ equal to 1 is as high as possible (but this is low priority, the condition 2 is more important).</p></li>\n</ol>\n\n<p>How should I approach this? Is there some standard algorithm this can be reduced to?</p>\n\n<p>In my case $M$ is not very big (of the order of 1000). Also, an absolute minimum in all cases is not strictly required; if there is an approximate algorithm, it will do to.</p>\n\n<p>(In case anyone is interested in the application, I want to use it to find work group dimensions for an OpenCL kernel with a known global size and total number of work items).</p>\n', 'ViewCount': '23', 'Title': 'Optimal coverage of a $D$-dimensional grid with small blocks', 'LastEditorUserId': '9455', 'LastActivityDate': '2013-08-01T06:13:22.680', 'LastEditDate': '2013-08-01T05:44:12.093', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '13556', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9455', 'Tags': '<algorithms><optimization><dynamic-programming>', 'CreationDate': '2013-08-01T02:03:46.657', 'Id': '13555'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I would appreciate an intuitive way to find the time complexity of dynamic programming problems. Can anyone explain me \u201c#subproblems * time/subproblem\u201d? I am not able to grok it.</p>\n\n<p>Code for LCS - </p>\n\n<pre><code>public static String findLCS(String str1, String str2 ) {\n    // If either string is empty, return the empty string\n    if(null == str1 || null == str2)\n        return "";\n    if("".equals(str1) || "".equals(str2)) {\n        return "";\n    }\n    // are the last characters identical?\n    if(str1.charAt(str1.length()-1) == str2.charAt(str2.length()-1)) {\n        // yes, so strip off the last character and recurse\n        return findLCS(str1.substring(0, str1.length() -1), str2.substring(0, str2.length()-1)) + str1.substring(str1.length()-1, str1.length());\n    } else {\n       // no, so recurse independently on (str1_without_last_character, str2)\n       // and (str1, str2_without_last_character)\n       String opt1 = findLCS(str1.substring(0, str1.length() -1), str2); \n       String opt2 = findLCS(str1, str2.substring(0, str2.length()-1));\n       // return the longest LCS found\n       if(opt1.length() &gt;= opt2.length())\n           return opt1;\n       else\n           return opt2;\n    }\n}\n</code></pre>\n\n<p>I am just providing the actual code instead of pseudo code (i hope pseudo code or the algo is pretty self explanatory from above)</p>\n', 'ViewCount': '623', 'Title': 'Understand the time complexity for this LCS (longest common subsequence) solution', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-11T14:45:43.030', 'LastEditDate': '2013-08-11T11:39:51.457', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '13706', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9166', 'Tags': '<algorithm-analysis><time-complexity><dynamic-programming>', 'CreationDate': '2013-08-11T10:28:35.407', 'Id': '13704'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given two integers $n$ and $m$, how many numbers exist such that all integers have all digits from $0$ to $n-1$, the difference between two adjacent digits is exactly $1$, and the number of digits in the integer is at most $m$?</p>\n\n<p>The integer cannot start with a $0$. All digits from $0$ to $n-1$ must be present.</p>\n\n<p>Example: for $n = 3$ and $m = 6$ there are $18$ such numbers ($210, 2101, 21012, 210121 \\ldots$)</p>\n\n<p>I know there is a dynamic programming method to solve this. After looking the solution, I am not able to understand it. Can anybody please give any good solution to me?</p>\n', 'ViewCount': '78', 'Title': 'Count the number of integers satisfying two conditions using DP', 'LastEditorUserId': '472', 'LastActivityDate': '2013-08-29T10:35:38.797', 'LastEditDate': '2013-08-29T10:35:38.797', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '14005', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8819', 'Tags': '<algorithms><combinatorics><dynamic-programming>', 'CreationDate': '2013-08-28T20:32:31.977', 'Id': '14002'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have an array of positive integers, $A = (a_1, a_2, ..., a_n)$.\nLet $s(A)$ denote the sum of elements of array $A$.\nI also have an integer $t$, such that $1 &lt; t \\le s(A)$.</p>\n\n<p>I want to split the array $A$ into $m$ contiguous subarrays $(A_1, ..., A_m)$, for which I'll get a minimum of function $f$, defined as</p>\n\n<p>$$\nf(A_1, ..., A_m) = \\sum_{1 \\le i \\le m}{(s(A_i) - t)^2}.\n$$</p>\n\n<p>Please note that I'm talking specifically about arrays, so the order of elements does matter.</p>\n\n<p>Here is a simple example.</p>\n\n<p>Let $t = 13$ and\n$$\nA = (1, 6, 7, 10, 3, 2, 10).\n$$\nWith the following subarrays\n$$\nA_1 = (1, 6, 7)\\\\\nA_2 = (10, 3) \\\\\nA_3 = (2, 10) \\\\\n$$\nthe value of $f(A_1, A_2, A_3) = (14-13)^2 + (13 - 13)^2 + (12 - 13)^2 = 2$.</p>\n\n<p>I don't need an exact solution. Good heuristic would be sufficient.</p>\n", 'ViewCount': '346', 'Title': 'Algorithm for splitting array into subarrays with sums close to the target value', 'LastEditorUserId': '10417', 'LastActivityDate': '2013-10-01T09:17:45.607', 'LastEditDate': '2013-10-01T08:27:49.883', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '14721', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10417', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2013-09-30T19:29:47.780', 'Id': '14713'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So I have some graph, and I know what it's max flow is based of the Ford-Fulkerson Algorithm.</p>\n\n<p>With this information, I need to know how to find a new max flow when I remove an edge of this graph with flow capacity 1. The algorithm must run in O(v+e) time where v is the number of vertices in the graph, and e the number of edges.</p>\n\n<p>I have an idea, but I don't think it will run in O(v+e). \nI might just be confused about big O notation, but my algorithm would run in O(v+e+v)=O(2v+e) time. Would that just be considered O(v+e) time? If not, what part of my proposed algorithm should be reconsidered? Should I make a completely different approach (maybe considering if the deleted edge is in the min-cut or not?).</p>\n\n<p>Thanks in advance!</p>\n", 'ViewCount': '85', 'ClosedDate': '2013-10-14T07:48:03.477', 'Title': 'Recalculate max-flow after removing edge with 1 capacity', 'LastEditorUserId': '10680', 'LastActivityDate': '2013-10-13T21:45:05.603', 'LastEditDate': '2013-10-13T21:44:47.073', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10680', 'Tags': '<algorithms><graph-theory><algorithm-analysis><dynamic-programming>', 'CreationDate': '2013-10-12T20:18:55.893', 'Id': '15023'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given a tree $T$ with $n$ vertices, we want to find the number of triplets of vertices $(a,b,c)$ such $d(a,b) = d(b,c) = d(c,a)$ where $d$ is the distance function (length of the shortest path between two nodes).</p>\n\n<p>It's pretty easy to do it in $O(n^3)$ time. Is it possible to do it faster?<br>\nI think that on-line algorithm and pre-processing should help.</p>\n", 'ViewCount': '86', 'Title': 'Find equidistant triplets in a tree', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-14T02:33:40.063', 'LastEditDate': '2013-10-13T18:35:08.433', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10555', 'Tags': '<algorithms><graphs><dynamic-programming><trees>', 'CreationDate': '2013-10-13T18:28:25.567', 'FavoriteCount': '0', 'Id': '16047'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How to minimize the sum of difference of element in sub-sequence of array of length k from given sequence of length n ?</p>\n\n<p>for example : for n=10\n1\n2\n3\n4\n10\n20\n30\n40\n100\n200</p>\n\n<p>the sub-sequence of length will with minimized sum of difference will be\n1 2 3 4\nas  |1-2| + |1-3| + |1-4| + |2-3| + |2-4| + |3-4| = 10 i.e minimum in any sequence.</p>\n', 'ViewCount': '181', 'Title': 'How to minimize the sum of difference of element in sub-sequence of array of length k from given sequence of length n', 'LastActivityDate': '2013-10-20T19:17:17.783', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10851', 'Tags': '<algorithms><dynamic-programming><linear-programming><greedy-algorithms><constraint-programming>', 'CreationDate': '2013-10-19T08:38:14.163', 'Id': '16224'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>This is the problem, given a string with characters from: <code>a-z</code>, <code>.</code>, <code>*</code>, and another string with characters from <code>a-z</code>. where <code>*</code> can delete the character before it, otherwise <code>*</code> is skipped and <code>.</code> can match any single character. the question is whether the first string can match the second one.</p>\n\n<p><strong>Note:</strong> That is the statement of the problem as I found, but in this case the character <code>*</code> performs the same function that <code>?</code> in a regular expression.</p>\n\n<p>Example:</p>\n\n<pre><code>isMatch("a*", "") = true; //"a*" could be "a" or an empty string ""\nisMatch(".", "") = false; \nisMatch("ab*", "a") = true; \nisMatch("a.", "ab") = true; \nisMatch("a", "a") = true;\n</code></pre>\n\n<p>I\'ve already solved this problem using a slightly modified edit distance, which I only know a 2D dynamic programming approach. I wonder whether exists a linear solution for this problem, maybe it is solvable without a dp approach?</p>\n', 'ViewCount': '75', 'Title': 'exact matching between two strings - linear edit distance?', 'LastActivityDate': '2013-10-21T22:57:59.747', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16263', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10254', 'Tags': '<algorithms><dynamic-programming><regular-expressions><strings>', 'CreationDate': '2013-10-20T17:52:06.507', 'FavoriteCount': '1', 'Id': '16260'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following problem:</p>\n\n<p>There are $n$ points in the plane.\nStarting from one of them I want to visit each of them once (except the starting node which has to be visited twice) but in a way that minimizes the cost of the total path.</p>\n\n<p>The weight of each edge changes depending on the path followed.\nFor example imagine $n=3$: $A$, $B$, $C$ and we start at $A$. \nThe weight of the edge $xy$ is $Sd_{xy}$, where $d_{xy}$ is the distance between the points $x$ and $y$ and $S$ is a given constant)\nIf I pick the edge $A\\to B$, the weight of the edge $B\\to A$ is now\n$(S-s_B)d_{AB}$ because $B$ changes $S$ by a constant amount $s_B$. \nSimilarly if I pick the edge $A\\to C$, the weight of the edge $B\\to C$ is now\n$(S-s_C)d_{AC}$ because visiting $C$ changes $S$ by a constant amount $s_C$. </p>\n\n<p>Developing the $n=3$ case, imagine S=11, $d_{AB}=5,d_{AC}=3,d_{BC}=4$ and $s_{A}=2,s_{B}=5,s_{C}=4$.\nThen there are 4 possible paths:</p>\n\n<p>A->B->C->A with cost $11*5+(11-5)*4+(11-5-4)*3$</p>\n\n<p>(we stop once we reach A because 11-5-4-2=0)</p>\n\n<p>A->B->A->C with cost $11*5+(11-5)*5+(11-4-2)*3$</p>\n\n<p>A->C->B->A with cost $11*3+(11-4)*4+(11-4-5)*5$</p>\n\n<p>A->C->A->B with cost $11*3+(11-4)*3+(11-4-2)*5$</p>\n\n<p>For $n=4$ there will be 3*3!=18 possible paths and so on.</p>\n\n<p>I know that $s_A+s_B+s_C=S$. This generalizes for $n$ points.\n What is an efficient algorithm for finding the minimum cost path?</p>\n', 'ViewCount': '186', 'Title': 'minimum cost path', 'LastEditorUserId': '10946', 'LastActivityDate': '2013-10-25T20:37:02.393', 'LastEditDate': '2013-10-25T20:37:02.393', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10946', 'Tags': '<dynamic-programming><greedy-algorithms>', 'CreationDate': '2013-10-24T01:54:35.210', 'FavoriteCount': '1', 'Id': '16391'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am well aware of the DP solution to the traveling salesman problem; also known as the Held and Karp algorithm for TSP.</p>\n\n<p>I have implemented it with bitmask, and it's something like this:</p>\n\n<pre><code>int TSP(int pos, int bitmask) {\n    if (bitmask == (1&lt;&lt;(K+1))-1)\n        return dist[pos][0];              // Completing the round trip\n\n    if (memo[pos][bitmask] != -1)\n        return memo[pos][bitmask];\n\n    int answer = INF;\n    for (int i = 0; i &lt;= K; i++) {\n        if (i != pos &amp;&amp; (bitmask &amp; (1 &lt;&lt; i)) == 0)\n               answer = Math.min(answer, dist[pos][i] + TSP(i, bitmask | (1 &lt;&lt; i)));\n    }\n\n    return memo[pos][bitmask] = answer;     // Storing the best dist for the set of traveled cities and untraveled ones.\n</code></pre>\n\n<p>This algorithm is quite fast; computation of 15 cities is relatively fast enough. However, I notice that it could be further improved to accommodate around 20 cities.</p>\n\n<p>1) If the dist matrix is symmetrical, perhaps we can make use of this property to prevent repeated calculations. (e.g a->b->c->d->a == a->d->c->b->a)</p>\n\n<p>2) Using both a upper and lower bound to prune. The above algorithm is able to get its first possible optimal solution in a very short time, might be able to use that.</p>\n\n<p>I have tried to improve the algorithm based on the aforementioned two principles. However, I don't get a better algorithm.</p>\n\n<p>Am I making a futile attempt at improving something impossible? What do you think?</p>\n", 'ViewCount': '89', 'Title': 'Traveling Salesman with Held and Karp Algorithm', 'LastActivityDate': '2013-10-27T15:00:58.337', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10999', 'Tags': '<graph-theory><np-complete><dynamic-programming><traveling-salesman>', 'CreationDate': '2013-10-27T15:00:58.337', 'Id': '16474'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I came across the following dynamic subtraction game:</p>\n\n<blockquote>\n  <p>There is one pile of n chips. The \ufb01rst player to move may remove as many chips as\n  desired, at least one chip but not the whole pile. Thereafter, the players alternate moving,\n  each player not being allowed to remove more chips than his opponent took on the previous\n  move. What is an optimal move for the \ufb01rst player if n = 44? For what values of n does\n  the second player have a win?</p>\n</blockquote>\n\n<p>Now, I know how to solve basic subtraction games, i.e., when both the players are allowed the same set of moves throughout the game (e.g., subtract only 1, 2, or 3 throughout the game). But in the game mentioned above, this set of possible numbers for subtraction is not fixed. I have no clue how to go about solving this question. Any kind of help would be appreciated.</p>\n', 'ViewCount': '195', 'Title': 'Dynamic subtraction game', 'LastActivityDate': '2013-11-08T22:24:52.493', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '16834', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11119', 'Tags': '<algorithms><dynamic-programming><game-theory>', 'CreationDate': '2013-11-08T12:55:34.920', 'Id': '16820'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '387', 'Title': 'What is "dynamic" about dynamic programming?', 'LastEditDate': '2013-11-10T17:42:04.283', 'AnswerCount': '3', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '11175', 'FavoriteCount': '1', 'Body': '<p>One of my seniors had a job interview and he was asked why it is called dynamic. He couldn\'t answer and after he gave up the interviewer said that there\'s nothing dynamic about it, its just called like that. That is hard for me to believe.</p>\n\n<p>Does it refer to the fact that the subproblems are solved during run-time and used in reaching the final goal? Like dynamic memory allocation that happens during run-time?</p>\n\n<p><strong>[ANSWER]</strong></p>\n\n<p>I should have read <strong><a href="http://en.wikipedia.org/wiki/Dynamic_programming#History" rel="nofollow">this</a></strong> wiki article before asking the question, sorry.</p>\n', 'Tags': '<terminology><dynamic-programming>', 'LastEditorUserId': '11175', 'LastActivityDate': '2013-11-10T17:42:04.283', 'CommentCount': '2', 'AcceptedAnswerId': '17872', 'CreationDate': '2013-11-10T07:29:30.567', 'Id': '17871'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How would you approach the knapsack problem in a dynamic programming situation if you now have to limit the number of item in the knapsack by a constant $p$ ? This is the same problem (max weight of $W$, every item have a value $v$ and weight $w$) but you can only add $p$ item(s) to the knapsack and obviously need to optimize the value of the knapsack.</p>\n\n<p>Do we need a 3rd dimension or we could find an other approach without it. I tried to simply add the number of item in the knapsack in the cell and taking the max value at the end with the number of item &lt;= $p$ but it is not the BEST solution. </p>\n', 'ViewCount': '238', 'Title': 'Variant of the knapsack problem', 'LastActivityDate': '2013-12-02T08:43:27.143', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18529', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11536', 'Tags': '<algorithms><optimization><dynamic-programming><knapsack-problems>', 'CreationDate': '2013-11-30T19:46:10.817', 'FavoriteCount': '1', 'Id': '18492'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have asked this question on programmers.stackexchange but nobody was able to answer this question.I have asked for help on other forums but did not get much help.Since this is a part of my research I figured I should ask on this site.</p>\n\n<p>I am working on a problem similar to the assembly line scheduling by dynamic programming.The issue is that unlike the classic problem where we have predefined stations now I only have information which task should run before which other(could be more than one) tasks.</p>\n\n<p>I have to find out which tasks to put on which line to minimize the total time taken by the production.So if the tasks are on a single line then they are executing in serial fashion and hence are slower.However,unlike the original problem the tasks are also communicating and communicating time is only added if tasks are on a different line.</p>\n\n<p>I have to determine whether this communication cost is worth moving the task to a separate line(from its communicating task)</p>\n\n<p>I have to decide which tasks to put on the same line and which tasks to put on the different lines (given the communication time when tasks are on different lines) to minimize the production time.</p>\n\n<p>So if I try to minimize the communication time then I am increasing the execution time as now all tasks are on a single line and are executing serially.</p>\n\n<p><strong>Problem:</strong></p>\n\n<p>If I try to move tasks to different lines now all tasks are executing in parallel.How do I determine the time saved due to this?Different tasks would be executing in different lines with the different starting and ending times.How do I calculate this metric?</p>\n', 'ViewCount': '32', 'Title': 'Help in developing a dynamic programming solution to this problem', 'LastActivityDate': '2013-12-03T07:41:32.070', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7181', 'Tags': '<optimization><dynamic-programming><np>', 'CreationDate': '2013-12-03T07:41:32.070', 'Id': '18561'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm quite stuck trying to answer this. The problem of finding the size of the maximum independent set in a tree using dynamic programming is well documented and many solutions are around.</p>\n\n<p>I've been trying to use a similar technique (ie. recursing through the childred and then the grandchildren of a node) to find the <strong>number</strong> of such sets but I have not been able to work it out.</p>\n\n<p>Any help?</p>\n", 'ViewCount': '76', 'Title': 'Finding number of maximum independent sets in tree, using dynamic programming', 'LastActivityDate': '2013-12-07T17:45:59.723', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11885', 'Tags': '<dynamic-programming><trees><sets>', 'CreationDate': '2013-12-06T20:33:13.333', 'Id': '18694'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I have a question regarding recursion in <a href="http://en.wikipedia.org/wiki/Viterbi_algorithm" rel="nofollow">Viterbi algorithm</a>.</p>\n\n<p>Define $\\pi(k; u; v)$  which is the maximum probability for any sequence of length $k$, ending in the tag bigram $(u; v)$.</p>\n\n<p>The base case if obvious $\\pi(0,*,*)=1$</p>\n\n<p>The general case.</p>\n\n<p>$\\pi(k,u,v) = max_{w \\in K_{k-2} } \\pi(k-1,w,u) \\cdot q(v|w,u) \\cdot e(x_k|v)$</p>\n\n<p>The author justifies the recursion as folllows: </p>\n\n<blockquote>\n  <p>How can we justify this recurrence? Recall that $\\pi(k, u, v)$ is the highest probability for any sequence $y_{\u22121}...y_k$ ending in the bigram $(u, v)$. Any such sequence must have $y_{k\u22122} = w$ for some state $w$. The highest probability for any sequence of length $k \u2212 1$ ending in the bigram $(w, u)$ is $\\pi(k \u2212 1, w, u)$, hence the highest probability for any sequence of length $k$ ending in the trigram $(w, u, v)$ must be $\\pi(k \u2212 1,w, u) \\cdot q(v|w, u) \\cdot e(x_k |v)$</p>\n</blockquote>\n\n<p>I do not understand why it\'s actually true, I think it\'s possible to reach $\\pi(n,u, v)$ from any $(n-1,w, u)$ not actually the maximum one $\\pi(n-1,w, u)$ just because $q(v|w, u) \\cdot e(x_k |v)$ might have a higher influence on the resulting $(n,u, v)$ than any $\\pi(n-1,w, u)$.</p>\n\n<p>I would appreciate if anyone could explain me why it\'s true.</p>\n', 'ViewCount': '94', 'Title': 'Viterbi algorithm recursive justification', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-04T18:05:36.053', 'LastEditDate': '2014-02-04T18:05:36.053', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19109', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8473', 'Tags': '<algorithms><dynamic-programming><recursion><correctness-proof><hidden-markov-models>', 'CreationDate': '2013-12-18T13:44:43.103', 'Id': '19093'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>We have an array of Integers, $A[]$ and we have to find the minimum number that is not the sum of a subset of array using the elements from $L$ to $R$ indices. I was thinking of using coin change DP approach, and outputing the min number with value infinity. But the problem is that the sum of ranges can be as large as 10<sup>9</sup>, and we have about 10<sup>5</sup> queries of the type $[L,R]$, so I was hoping there'd be a better approach. Can anyone point me in the right direction?</p>\n\n<p>There are 10<sup>5</sup> elements in the array</p>\n\n<p>Suppose the elements of the array are 1,1,2,7. Then for indices 1 and 4, the smallest number that cannot be formed as a sum is 5. since we can form all 1,2,3,4.</p>\n", 'ViewCount': '75', 'Title': 'Minimum number that cannot be formed by any subset of an array', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-01-11T10:48:57.527', 'LastEditDate': '2014-01-11T10:48:57.527', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19653', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8505', 'Tags': '<data-structures><dynamic-programming>', 'CreationDate': '2014-01-11T09:33:41.120', 'Id': '19651'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an m x n matrix which is sparse with N non-zero entries. A modified version of Kadane\'s 2-d algorithm can find the maximum sum subrectangle in O(m N log n) time, which beats traditional Kadane\'s 2-d algorithm of O(m^2 n) for sufficiently sparse matrices. The sparse matrix algorithm, which is also O(m^2 n) time for dense matrices, matching Kadane\'s algorithm, can be found here <a href="http://stackoverflow.com/questions/17558028/maximum-sum-subrectangle-in-a-sparse-matrix">http://stackoverflow.com/questions/17558028/maximum-sum-subrectangle-in-a-sparse-matrix</a> .Now I want to know if the optimal solution can be updated quickly if one entry in the matrix is changed. By "quickly" I mean something like O(m log n) time or better. It\'s possible that perhaps the matrix does not have to be sparse to work out a solution, however a solution when N = O(min(m,n)) would be ok. Preprocessing is also ok as long as the amortized cost of preprocessing time per element changed matches or beats something like O(m log n) time for m changes.</p>\n', 'ViewCount': '46', 'Title': 'Updating maximum sum subrectangle in a sparse matrix when one element is changed', 'LastEditorUserId': '9584', 'LastActivityDate': '2014-01-21T20:34:10.013', 'LastEditDate': '2014-01-21T19:52:44.193', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9584', 'Tags': '<algorithms><dynamic-programming><matrices>', 'CreationDate': '2014-01-21T17:38:51.647', 'Id': '19873'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '86', 'Title': 'minimizing the summed cardinality of set unions', 'LastEditDate': '2014-02-24T17:46:51.283', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14883', 'FavoriteCount': '1', 'Body': '<p>this optimization problem, I am working on, is kind of making me crazy. ;)</p>\n\n<p>Given is a list <code>o</code> of sets (with finite cardinality) of strictly positive integer values (Z>0), e.g.:</p>\n\n<pre><code>o_without_sizes =\n[ {1, 2, 3, 4}\n, {5, 6}\n, {2, 3, 4, 5}\n, {5, 6, 7}\n, {7, 8}\n. {9} ]\n</code></pre>\n\n<p>Every set has a name <code>n</code> (also in Z>0, but only for identification) and a fixed independent size value <code>s</code> (also in Z>0), e.g.:</p>\n\n<pre><code>type O = [(Name, Size, Values)]\no =\n[ (1, 2, {1, 2, 3, 4})\n, (2, 1, {5, 6})\n, (3, 2, {2, 3, 4, 5})\n, (4, 3, {5, 6, 7})\n, (5, 2, {7, 8})\n. (6, 1, {9}) ]\n</code></pre>\n\n<p>These sets are to be combined to unions <code>b</code> of a maximum size value sum <code>h (&gt;= max s, that means that no set has a size making it too big to fit into a single union)</code>, e.g. 4.</p>\n\n<p>The goal is to find the <code>b</code> so that the sum of cadinalities of the unions in it is as small as possible.\nhere is a bad <code>b</code>:</p>\n\n<pre><code>size:   3,  cardinality:   6,   sets: [1,2]  ,  values: [1,2,3,4,5,6]\nsize:   2,  cardinality:   4,   sets: [3]    ,  values: [2,3,4,5]\nsize:   3,  cardinality:   3,   sets: [4]    ,  values: [5,6,7]\nsize:   3,  cardinality:   3,   sets: [5,6]  ,  values: [7,8,9]\ncardinality sum:  16\n</code></pre>\n\n<p>and the optimum <code>b</code> for this example:</p>\n\n<pre><code>size:   4,  cardinality:   5,   sets: [3,1]  ,  values: [1,2,3,4,5]\nsize:   4,  cardinality:   3,   sets: [2,4]  ,  values: [5,6,7]\nsize:   3,  cardinality:   3,   sets: [5,6]  ,  values: [7,8,9]\ncardinality sum:  11\n</code></pre>\n\n<p>Until now I only implemented a naive brute force solution (Haskell code): <a href="http://lpaste.net/7204008959806537728" rel="nofollow">http://lpaste.net/7204008959806537728</a></p>\n\n<p>I was hoping to find a dynamic programming solution like it exists for the (Z>0) 0-1 knapsack problem, but did not yet succeed.\nIs my problem perhaps NP-hard? If so, is it many-one-reducible to SAT or something? Or is there a good approximation?</p>\n\n<p>Of course, if there exists a known efficient optimal algorithm, it would be awesome if you could enlighten me. :)</p>\n', 'Tags': '<algorithms><np-complete><optimization><dynamic-programming><np-hard>', 'LastEditorUserId': '14883', 'LastActivityDate': '2014-02-24T17:46:51.283', 'CommentCount': '2', 'AcceptedAnswerId': '21867', 'CreationDate': '2014-02-20T19:25:23.093', 'Id': '21857'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Are there dynamic programming examples that run in exponential time? Every example that I've seen so far constructs the top half of a matrix in a bottom-up fashion ($n^2$) from the base case and evaluates $n$ expressions to optimize each entry.</p>\n", 'ViewCount': '104', 'Title': 'Are there dynamic programming examples that run in exponential time?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-28T10:04:36.073', 'LastEditDate': '2014-02-28T08:38:41.003', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '22101', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4748', 'Tags': '<algorithms><runtime-analysis><dynamic-programming>', 'CreationDate': '2014-02-27T16:33:50.553', 'Id': '22094'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was solving a problem on topcoder <a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=2402&amp;rd=5009" rel="nofollow">http://community.topcoder.com/stat?c=problem_statement&amp;pm=2402&amp;rd=5009</a> .</p>\n\n<p>There is one example :\n<code>{ 1, 2, 3, 4, 5, 1, 2, 3, 4, 5 }</code></p>\n\n<p><code>Returns: 16</code></p>\n\n<p>So my question how its answer is <code>16</code> ?</p>\n', 'ViewCount': '14', 'Title': 'Explain BadNeighbors problem statement', 'LastActivityDate': '2014-03-24T17:57:02.133', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16067', 'Tags': '<dynamic-programming>', 'CreationDate': '2014-03-24T17:04:29.370', 'Id': '23011'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have two <code>True or False</code> questions in my practice test that are related but I am unsure about:</p>\n\n<pre><code>1. If an optimization problem can be solved using a greedy algorithm, \nthere must be a solution for this optimization problem using dynamic programming as well.\n\n2. If an optimization problem can be solved using dynamic programming, \nthere must be a solution for this problem using a greedy algorithm as well.\n</code></pre>\n\n<p>I think the answers are <code>1. True</code> and <code>2. False</code> is this correct?</p>\n', 'ViewCount': '96', 'ClosedDate': '2014-04-14T17:37:38.693', 'Title': 'Dynamic programming VS Greedy Algroithms', 'LastActivityDate': '2014-04-07T02:28:55.033', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '23495', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16514', 'Tags': '<algorithms><dynamic-programming><greedy-algorithms>', 'CreationDate': '2014-04-07T01:29:57.837', 'Id': '23493'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was reading up on <a href="http://en.wikipedia.org/wiki/Dynamic_programming">Dynamic Programming</a> when I came across the following quote</p>\n\n<blockquote>\n  <p>A dynamic programming algorithm will examine all possible ways to\n  solve the problem and will pick the best solution. Therefore, we can\n  roughly think of dynamic programming as an <strong>intelligent, brute-force\n  method that enables us to go through all possible solutions to pick\n  the best one</strong>. If the scope of the problem is such that going through\n  all possible solutions is possible and fast enough, dynamic\n  programming guarantees finding the optimal solution</p>\n</blockquote>\n\n<p>The following example was given </p>\n\n<blockquote>\n  <p>For example, let\'s say that you have to get from point A to point B as\n  fast as possible, in a given city, during rush hour. A dynamic\n  programming algorithm will look into the entire traffic report,\n  looking into all possible combinations of roads you might take, and\n  will only then tell you which way is the fastest. Of course, you might\n  have to wait for a while until the algorithm finishes, and only then\n  can you start driving. The path you will take will be the fastest one\n  (assuming that nothing changed in the external environment)</p>\n</blockquote>\n\n<p><a href="http://en.wikipedia.org/wiki/Brute-force_search">Brute Force</a> is trying every possible solution before deciding on the best solution . </p>\n\n<p>How is Dynamic Programming different from Brute Force if it also <strong>goes through all possible solutions before picking the best one</strong> , the only difference i see is that Dynamic Programming takes into account the additional factors ( traffic conditions in this case).</p>\n\n<p>Am  i correct to say that Dynamic Programming is a subset of Brute Force method ??</p>\n', 'ViewCount': '1511', 'Title': 'How is Dynamic programming different from Brute force', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-10T13:32:34.613', 'LastEditDate': '2014-04-09T22:36:34.710', 'AnswerCount': '6', 'CommentCount': '5', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '12448', 'Tags': '<algorithms><terminology><optimization><dynamic-programming>', 'CreationDate': '2014-04-09T15:58:08.683', 'FavoriteCount': '1', 'Id': '23599'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How to think about dynamic algorithms which allows negative integers in input (where it\'s problematic, because obviously it\'s not always the case)?</p>\n\n<p>Examples:</p>\n\n<ul>\n<li><a href="http://en.wikipedia.org/wiki/Partition_problem" rel="nofollow" title="Partition problem">Partition Problem</a> with negative numbers in set allowed</li>\n<li><a href="http://en.wikipedia.org/wiki/Knapsack_problem" rel="nofollow" title="Knapsack problem">Knapsack problem</a> with negative weights are allowed</li>\n</ul>\n\n<p>Is there some general idea to handle these or other similar dynamic algorithms?</p>\n', 'ViewCount': '49', 'ClosedDate': '2014-04-29T23:36:13.323', 'Title': 'Knapsack problem, partition problem, or in general dynamic algorithm with negative numbers allowed', 'LastActivityDate': '2014-04-13T22:55:43.990', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '23756', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16743', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2014-04-13T15:15:36.993', 'FavoriteCount': '1', 'Id': '23740'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am reading The Algorithm Design Manual, 2nd Edition. \nThe book gives an example task and then explains how to solve it step by step.\n(The task and solution is detailed <a href="http://www8.cs.umu.se/kurser/TDBA77/VT06/algorithms/BOOK/BOOK2/NODE51.HTM" rel="nofollow">here</a>)</p>\n\n<p><em>But I don\'t follow one step from the solution. That step doesn\'t contain enough details for me so I don\'t understand it. I\'m asking if someone can explain it.</em></p>\n\n<p><strong>Below I rewrote the task in a shorter form than in the book:</strong></p>\n\n<p>Given n ordered strings (lets call them rules) of m characters. The strings are indexed starting from 1 (not 0)</p>\n\n<p>The goal is to construct the trie with the minimum possible number of edges. The leaves of the resulting trie (each leaf represents a string) have to be in the same exact order as the given collection of strings.</p>\n\n<p>We are free to pick an arbitrary character position on each step of constructing the trie (e. g., we are free to start constructing the trie from character position 2 as opposed to starting from 1). Thanks to this ability we can minimize the built trie. Lets call picking a character - probing.</p>\n\n<p>Example:</p>\n\n<p>From the four rules below it\'s possible to build different tries depending on the order of picking characters from the strings.</p>\n\n<p><code>\nS1: (a,a,a)\nS2: (b,a,a)\nS3: (c,b,b)\nS4: (d,b,b)\n</code></p>\n\n<p><img src="http://i.stack.imgur.com/xrCvv.gif" alt="tries"></p>\n\n<p>The book says that</p>\n\n<blockquote>\n  <p>Probing at the p-th position, 1 &lt;= p &lt;= m, partitioned the rules into runs R1,...,Rr, where each rule in a given run Rx = Si,...,Sj had the same character value of Si[p].</p>\n  \n  <p>Since the rules were ordered, each node in the subtree must represent the root of a run of consecutive rules, so there were only ${{n}\\choose{2}}$ possible nodes to choose from for this tree...</p>\n  \n  <p>...</p>\n  \n  <p>The rules in each run must be consecutive, so there are only ${{n}\\choose{2}}$ possible runs to worry about.</p>\n</blockquote>\n\n<p><strong>My question: How does the fact the rules are consecutive lead to the inference that there are ${{n}\\choose{2}}$ possible nodes/runs after probing at the p-th position?</strong></p>\n', 'ViewCount': '71', 'Title': u'Studying Skiena. War Story: What\u2019s Past is Prolog', 'LastEditorUserId': '16874', 'LastActivityDate': '2014-04-20T22:48:07.310', 'LastEditDate': '2014-04-19T22:09:42.227', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16874', 'Tags': '<algorithms><dynamic-programming>', 'CreationDate': '2014-04-18T10:29:52.833', 'Id': '23908'}