{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>On my old 256MB RAM, pc I get this message. (I guess it is quite common)</p>\n\n<blockquote>\n  <p><strong>Windows - Virtual Memory minimum too low</strong><br>\n  Your system is low on virtual memory. Windows is increasing the size of your virtual memory paging file. During this process, memory requests for some applications may be denied. ...</p>\n</blockquote>\n\n<p>Please explain from a CS student point of view-</p>\n\n<ol>\n<li>"Windows is increasing the size of your virtual memory paging file." and</li>\n<li>"during this process...". what is this process called?</li>\n</ol>\n\n<p>Thanks, I am currently studying virtual memory management in OS.</p>\n', 'ViewCount': '1107', 'Title': 'How to interpret "Windows - Virtual Memory minimum too low" from a CS student point of view?', 'LastEditorUserId': '135', 'LastActivityDate': '2012-04-22T14:10:33.667', 'LastEditDate': '2012-04-22T14:10:33.667', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1409', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1182', 'Tags': '<operating-systems><virtual-memory><paging>', 'CreationDate': '2012-04-21T06:50:43.410', 'Id': '1407'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2016', 'Title': 'Swap space management during pure demand paging', 'LastEditDate': '2012-05-29T08:49:23.003', 'AnswerCount': '1', 'Score': '8', 'OwnerDisplayName': 'shan23', 'PostTypeId': '1', 'OwnerUserId': '476', 'Body': '<p>The following is a doubt that I came across while doing a OS home assignment - however, it seems more concept-based than a straightforward coding question, so IMHO I don\'t think the homework tag is appropriate for this.</p>\n\n<p>In a pure demand paging scheme for multiple processes running at the same time, given a fixed amount of RAM and Swap memory, what happens in the following 2 cases w.r.t the swap space, when</p>\n\n<ol>\n<li><p>A process encounters a page-fault, and there are no free frames available in the RAM, hence requiring one of the pages from the process\' chunk of Kernel Frames to be written out to swap (for simplicity, I\'m not considering the copy-on-write case). Explicitly, where in the Swap space would this frame be written, and what data structures need to be updated for that?</p></li>\n<li><p>When a process needs to page-in a particular page, where does it look in the Swap memory, and how would it know if that particular page be present in Swap at all ?</p></li>\n</ol>\n\n<p>As you can well imagine, I\'m having difficulty understanding in what way to manage the Swap space during pure demand management scheme, and what data structures would be essential. It would be great if you could refer to any links in your answer (I searched in "Operating System Concepts - 8th edition by Silberschatz, I couldn\'t find an explicit answer for my question).</p>\n', 'Tags': '<operating-systems><memory-allocation><virtual-memory><paging><memory-management>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-30T07:49:30.313', 'CommentCount': '1', 'AcceptedAnswerId': '2169', 'CreationDate': '2012-05-22T18:51:13.247', 'Id': '2154'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If we let the physical memory size remain constant,</p>\n\n<ul>\n<li>What effect does the size of the page have on the number of frames? </li>\n<li>What effect does the number of frames have on the number of page faults?</li>\n</ul>\n\n<p>Also, please provide reference strings as an example.  </p>\n', 'ViewCount': '1672', 'Title': 'How does increasing the page size affect the number of page faults?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-22T14:25:54.897', 'LastEditDate': '2012-11-21T22:09:21.933', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4676', 'Tags': '<operating-systems><memory-management><virtual-memory><paging>', 'CreationDate': '2012-11-21T13:58:21.313', 'FavoriteCount': '1', 'Id': '6813'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The following problem was on my final and in <code>Gate 2006</code>, but I don't understand how to solve it:</p>\n\n<p>Different methods of memory management have different overheads:</p>\n\n<ul>\n<li>The paging method for memory management uses two-level paging, and its storage overhead is $P$. </li>\n<li>The storage overhead for the segmentation method is $S$.  </li>\n<li>The storage overhead for the segmentation and paging method is $T$.</li>\n</ul>\n\n<blockquote>\n  <p>What is the relation among the overheads in the concurrent execution of the processes below?</p>\n  \n  <p>(a) $P &lt; S &lt; T \\hspace{2em}$<br>\n  (b) $S &lt; P &lt; T\\hspace{2em}$<br>\n  (c) $S &lt; T &lt; P\\hspace{2em}$<br>\n  (d) $T &lt; S &lt; P$</p>\n</blockquote>\n\n<pre><code>Process    Total Size (in KB)    Number of segments  \n P1              195                    4  \n P2              254                    5  \n P3               45                    3  \n P4              364                    8  \n</code></pre>\n\n<ul>\n<li>The page size is 1 KB.  </li>\n<li>The size of an entry in the page table is 4 bytes.  </li>\n<li>The size of an entry in the segment table is 8 bytes.  </li>\n<li>The maximum size of a segment is 256 KB.  </li>\n</ul>\n", 'ViewCount': '160', 'Title': 'Processes and Segmentation', 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-24T15:32:23.540', 'LastEditDate': '2012-11-24T12:57:21.410', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'OwnerDisplayName': 'QueueTank', 'PostTypeId': '1', 'OwnerUserId': '4743', 'Tags': '<operating-systems><memory-management><storage><paging>', 'CreationDate': '2012-11-24T08:51:43.493', 'Id': '6867'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<blockquote>\n  <ul>\n  <li>System has a two level paging scheme</li>\n  <li>Average CPU time for a instruction = 100ns</li>\n  <li>Average number of memory accesses per instruction = 2</li>\n  <li>Regular memory access = 150 ns</li>\n  <li>Page fault service time = 8ms</li>\n  <li>TLB hit ratio = 0.9</li>\n  <li>Page fault rate = 0.0001 </li>\n  </ul>\n  \n  <p>What is the average instruction time if the time required for address translation is negligible?</p>\n</blockquote>\n\n<p>I worked out the solution as follows</p>\n\n<pre><code>Average instruction execution time = CPU time + Memory access time\n\nMemory access time = No. of memory accesses by the instruction * average memory access time\n\nAverage memory access time = \n [probability of a TLB hit * regular memory access time]\n + [probability of a TLB miss * (Time for accessing the 1st level of the paging tables\n     + Time for accessing the 2nd level of the paging tables\n     + Time for accessing memory which may not be paged in with the translated address)]\n\nTime for accessing the 1st level of the paging tables \n= Time for accessing the 2nd level of the paging tables \n= Time for accessing memory which may not be paged in with the translated address\n    = [probability of a page fault * (page fault service time + regular memory access time) ]\n      + [probability of no page fault * regular memory access time]\n    = [0.0001 * (8 ms + 150ns)]  + [0.9999 * 150 ns]\n    = 950 ns\n\nThus, average time per memory access = [0.9 * 150ns] + [0.1 * 3 * 950ns] = 420ns\n\nAverage instruction execution time = 100ns + (2 * 420ns) = 940ns\n</code></pre>\n\n<p>However the choices for this question are 645ns, 1050ns, 1215ns and 1230 ns.</p>\n\n<p>I can't seem to be able to see where I have reasoned wrong.</p>\n\n<p><strong>EDIT</strong>\n<hr>\nAverage number of memory accesses per instruction is 2</p>\n", 'ViewCount': '2161', 'Title': 'Calculation of effective average instruction execution time in a 2-level paging system', 'LastEditorUserId': '2980', 'LastActivityDate': '2012-11-28T07:53:04.243', 'LastEditDate': '2012-11-26T13:12:10.997', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2980', 'Tags': '<operating-systems><virtual-memory><paging>', 'CreationDate': '2012-11-26T10:39:39.307', 'Id': '6913'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am looking to calculate the physical address corresponding to a logical address in a paging memory management scheme. I just want to make sure I am getting the calculation right, as I fear I could be wrong somewhere.</p>\n\n<p>So, the data I have is as follows: </p>\n\n<ul>\n<li><p>The logical address: 717</p></li>\n<li><p>Logical memory size: 1024 bytes (4 pages)</p></li>\n<li><p>Page Table (Page number - Frame number):</p>\n\n<p>(0 - 5), (1 - 2), (2 - 7), (3 - 0)</p></li>\n<li><p>Physical memory: 16 frames</p></li>\n</ul>\n\n<p>So, with 1024 bytes in the logical memory, and 4 pages, then each page is 256 bytes. </p>\n\n<p>Therefore, the size of the physical memory must be 4,096, right? (256*16). </p>\n\n<p>Then, to calculate the logical address offset: </p>\n\n<blockquote>\n  <p>1024 mod 717 = 307</p>\n</blockquote>\n\n<p>Is that how we calculate the offset? </p>\n\n<p>And, we can assume that 717 is in page 2 (1024 / 717 = 2.8)? </p>\n\n<p>So, according to the page table, the corresponding frame number is 3. </p>\n\n<p>And so to get the physical address, we multiply the frame number and page size? </p>\n\n<blockquote>\n  <p>2 * 256 = 768</p>\n</blockquote>\n\n<p>Then, do we add the offset, like so: </p>\n\n<blockquote>\n  <p>768 + 307 = 1,075</p>\n</blockquote>\n\n<p>Thank you for taking the time to read. If I don't quite have this correct, would you be able to advise on the correct protocol to calculating this? </p>\n", 'ViewCount': '4295', 'Title': 'How to work out physical address corresponding to logical address?', 'LastActivityDate': '2013-11-19T09:58:00.347', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '7745', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2420', 'Tags': '<operating-systems><memory-management><paging>', 'CreationDate': '2013-01-03T23:51:55.903', 'Id': '7743'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>Q: <strong>Consider a demand-paging system with a paging disk that has an average access and transfer time of 20 milliseconds. Addresses are translated through a page table in main memory, with an access time of 1 microsecond per memory access. Thus, each memory reference through the page table takes two accesses. To improve this time, we add an associative memory that reduces access time to one memory reference, if the page-table entry is in the associative memory.</strong></p>\n\n<p><strong>Assume that 80 percent of the accesses are in the associative memory, and that, of the remaining, 10 percent (or 2 percent of the total) cause page faults. What is the effective memory access time?</strong></p>\n\n<p>(This question comes in the exercise of the book Operating System concepts by Silberschatz|Galvin|Gagne.)</p>\n\n<p>This is my approach. The associative memory has the page in it (and not just the physical address?), so just one access would do if found. Else, search in the page table. If found, it would take two accesses (one for the page table and other for accessing the page in memory). If not found, need to access it from disk. So,</p>\n\n<p><strong>effective access time EAT = (0.8 x 1\u03bcs) + (0.18 x (1\u03bcs + 2\u03bcs)) + (0.02 x (1\u03bcs + 2\u03bcs + 20ms)) = 401.4\u03bcs</strong></p>\n\n<p>Is this approach correct? This question had been posted in various forums and the answers written there were not matching this. Hence I posted here to check what exactly is the correct way to calculate the effective access time?</p>\n\n<p>I also have some follow up questions. Here there is an associative memory used - is this not the same as TLB(Translation Lookaside Buffer)? Because I'm assuming if there was a TLB, it would still need to access the page from the memory after finding the address in the TLB. Please correct me if I'm wrong.</p>\n", 'ViewCount': '482', 'Title': 'Effective Acces time in Demand Paging system with Associative memory', 'LastActivityDate': '2013-01-09T04:12:38.710', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '5241', 'Tags': '<paging>', 'CreationDate': '2013-01-09T04:12:38.710', 'Id': '7844'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Studying LRU approximation Algorithms I think to have not understand how it works, for example: </p>\n\n<pre><code>consider a process with 3 logical pages and 2 frames allocated , an approximation of the\nAlgorithm Last Recently Used based of reference bits where every four references there is\na shift and where are considered just the first 2 bits, and the follow reference string:\n</code></pre>\n\n<blockquote>\n  <p>1 2 1 1 1 1 0 1 0 0 </p>\n</blockquote>\n\n<p>I\'d solve it in this way:</p>\n\n<blockquote>\n  <p>1 2 1 1 <strong>(<em>m1)</em></strong> 1 1 <strong>(<em>m2)</em></strong> 0 1 0 0  </p>\n</blockquote>\n\n<p><strong>(<em>m1)</em></strong></p>\n\n<p>4 references so I\'d pass from </p>\n\n<pre><code> frame                     frame\n -----+---+---     to       -----+---+---\n    1 | 1 | 0                  1 | 0 | 1 \n    2 | 1 | 0                  2 | 0 | 1 \n</code></pre>\n\n<p><strong>(<em>m2)</em></strong></p>\n\n<p>page fault so I\'d pass from </p>\n\n<pre><code> frame                     frame\n -----+---+---     to       -----+---+---\n    1 | 1 | 1                  1 | 0 | 0 \n    2 | 0 | 1                  0 | 0 | 0 \n</code></pre>\n\n<p>So the questions are:</p>\n\n<ul>\n<li>Is my doing correct?</li>\n<li>At <strong>m2</strong> there is a page fault, is there a "reset" and all bits puts at 0?</li>\n<li>the shift frequency (4 in the example) restart counting every page fault?</li>\n</ul>\n', 'ViewCount': '207', 'Title': 'clarification about Algorithm of page replacement LRU with reference bits', 'LastActivityDate': '2013-06-14T13:37:39.720', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4765', 'Tags': '<operating-systems><paging><virtual-memory>', 'CreationDate': '2013-02-02T16:46:24.697', 'Id': '9427'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I know that <strong>Translation look aside buffer</strong> is used for address translation in  paging to achieve better performance.</p>\n\n<p>I came across term called <strong>Look Ahead buffer</strong> in a document which said it implements Temporal locality.</p>\n\n<p>I tried searching for <strong>Look Ahead buffer's</strong> but could not get any significant data.</p>\n\n<p>Please help</p>\n", 'ViewCount': '614', 'Title': 'Look Ahead buffer vs Translation Look aside buffer', 'LastActivityDate': '2013-02-09T07:49:15.173', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9616', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5245', 'Tags': '<operating-systems><paging><virtual-memory>', 'CreationDate': '2013-02-09T03:23:50.697', 'Id': '9612'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am studying Computer Systems. I have th following question and its answer:</p>\n\n<blockquote>\n  <p>Given the logical address 0xAEF9 (in hexadecimal) with a page size of\n  256 bytes, what is the page number?</p>\n  \n  <p>Answer: <strong>0xAE</strong> (I found this answer in the web, but I want to know how can I\n  figure it out myself?</p>\n</blockquote>\n\n<p>How can I figure out the page number for a given logical address?</p>\n', 'ViewCount': '685', 'Title': 'Given the logical address, how to extract the page number?', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-04T16:36:05.083', 'LastEditDate': '2013-05-04T03:36:34.570', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11721', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4492', 'Tags': '<operating-systems><memory-management><paging><virtual-memory>', 'CreationDate': '2013-05-02T06:12:58.093', 'Id': '11719'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I have a system with 32-bit logical and 16-bit physical address spaces, and the page size is 512 bytes. For simplicity, ignore the valid/invalid bits in the page table.</p>\n\n<p>How many sections will the logical address be divided and how many bits will each section have? The logical address will be divided into three sections, one section for the outer page, one for the inner page, and one for the offset. The outer page section contains 13 bits. The inner page contains 10 bits. The offset section will contain 9 bits. Is this right?</p>\n\n<p>Will the structure of the page table have 2 levels? How would I convert a logical address into a physical address?</p>\n', 'ViewCount': '1019', 'Title': 'Hierarchical Paging', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-10T09:44:05.930', 'LastEditDate': '2013-06-10T09:44:05.930', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12569', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6723', 'Tags': '<operating-systems><memory-management><paging>', 'CreationDate': '2013-06-09T08:14:15.350', 'Id': '12556'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In order to use large size page table hierarchical paging is done .\nIn case of two level page table scheme . for :\nlogical address space - 32bit - $2^32$ \npage size - 4kb i.e $2^12$</p>\n\n<p>It is mentioned that page number is divided evenly :</p>\n\n<pre><code>i.e page number p1 - 10 bits\n    page number p2 - 10 bits\n    page offset d - 12bits.\n</code></pre>\n\n<p>I got this...... but my question is different. I didn't get the concept behind it.<br>\nWhat I thought for that I will take 1 example.  </p>\n\n<p>Take the address <code>0x00FF1234</code>. The binary representation of this address is <code>00000000111111110001001000110100</code>. By splitting this up, we get <code>0000000011 1111110001 001000110100</code>, or <code>0x3 0x3F1 0x234</code>.  </p>\n\n<p><code>0000000011</code> this number  is pointing to 4th entry in the 1st level table. Means there are<br>\n <code>0000000000</code> to <code>1111111111</code> unique numbers ( entries ) in the 1st level table. These gives the address of the 2nd level table.<br>\n In this we are referring <code>0000000011</code> entry. Now does this entry contain some address which points to the base of the 2nd level table ? Now we are being pointed to 1111110001 address means <code>0000000011</code> containing <code>1111110001</code>  address ( I am thinking ) if yes then why only that address ? why not other address ?<br>\nMeans here I want to ask what exactly happens behind this jumping. And how ? I read somewhere here about <code>CR3</code> register and all that but didn't get anything. I don't want that much deep. I just want to solve basic example of paging , TLB , virtual memory for GATE exam.<br>\nAnd what is this page size ( I always consider it as d as offset and solving problem )<br>\nFor example : Page size is 1024 byte ... means d = 10 bytes. Does it mean , it ranges between 000....( 10 times) to 111....( 10 times) ? Not getting this concept properly. </p>\n", 'ViewCount': '470', 'LastEditorDisplayName': 'user742', 'Title': 'want to know concept behing Multilevel paging', 'LastActivityDate': '2013-09-06T23:05:04.197', 'LastEditDate': '2013-09-06T23:05:04.197', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9343', 'Tags': '<operating-systems><memory-management><paging>', 'CreationDate': '2013-09-06T20:03:09.237', 'FavoriteCount': '1', 'Id': '14178'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>System is having segmented paging arcitecture. Both physical and virtual address spaces contains 2^16 byets each.  Virtual address space is divided in 8 equal size segmentes. Page table consist of 2 byte page table entries.  </p>\n\n<p>Q1 ) What is the minimum page size in bytes so that page table for a segmented requires at most 1 page to store it ?   </p>\n\n<p>Q2) Assume that page size is 512 bytes. Each page table entry contains ( beside other information ) 1 valid bit , 3 bits for page protection and 1 diry bit. How many bits are available in a page table entry for storing the aging information for the page   </p>\n\n<p>My interpretation : </p>\n\n<p>Virtual address 2^16<br>\n8 segments are there so size of each segment is 2^16 / 3 = 2^13<br>\nNow each segments will be divided in number of pages.<br>\nMeans there are 8 page tables of each size 2^13.<br>\nNow consider page size is 2^n.<br>\nSo number of pages are 2^(13-n) in each segments i.e page entries.<br>\nPage table entry is 2 byte long and page size is 2^n. So 2^(n+1).<br>\n2^(13-n) = 2^(n+1) i.e. n= 6.<br>\nBut answer is n = 7<br>\n  I know I made a mistake in page table entry as I didnt get page table entry concept  properly. Is that a f ? ( f+d = memory address ) I am not getting page table entry. Please  explain me this concept.   </p>\n\n<p>Way of thinking for Ans 2 :<br>\n16 bytes for physical memory.<br>\nPage size is 512 bytes means 9 bytes requires. Means 16-9= 7 bytes for frame. Now stucked. </p>\n', 'ViewCount': '86', 'Title': 'segmentation and paging', 'LastActivityDate': '2013-10-06T08:29:39.040', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '9343', 'Tags': '<operating-systems><paging>', 'CreationDate': '2013-09-11T08:46:02.537', 'Id': '14266'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have several confusion like : </p>\n\n<ol>\n<li><p>Does virtual address space resides in virtual memory ?</p></li>\n<li><p>Does each process has its own virtual address space like each process has its own virtual memory and own page table ?</p></li>\n<li><p>Mapping to physical address takes place from virtual memory or virtual address space if they are different thing ?</p></li>\n</ol>\n', 'ViewCount': '73', 'Title': 'Does virtual address space resides in virtual memory?', 'LastActivityDate': '2013-12-31T16:32:20.743', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12467', 'Tags': '<operating-systems><memory-management><paging><virtual-memory>', 'CreationDate': '2013-12-30T19:08:39.193', 'Id': '19383'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>OS Book written by Galvin et all states that <em>if page size is 4KB and size of virtual space is 32 bits then 2^(32-12) page entries would be required which is too huge to store in memory!!</em> </p>\n\n<p>Therefore it recommends to break it down by paging the inner page table as well. Now my question is how does that reduce memory requirements? Shouldn't inner page table and outer page table both be in memory and just the computational requirements reduce because inner page table can now be indexed quickly with the help of outer page table?? </p>\n", 'ViewCount': '43', 'Title': 'Hierarchical Paging memory requirements', 'LastActivityDate': '2014-02-06T09:10:34.207', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '21366', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '13280', 'Tags': '<operating-systems><paging>', 'CreationDate': '2014-02-06T07:50:33.367', 'Id': '21362'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Garbage collections have to visit all objects that are alive, so as to find the memory that can be reclaimed.  (Having many generations\u2019 just delays this a bit)  </p>\n\n<p>All things being equal, it is clearly better to first visit the object that are already paged into RAM, before paging other block in and therefore paging out some object.</p>\n\n<p>Anther possibility is that when the OS wishes to take a page of ram away from the process, the GC is first asked if it has a page that can be given up without needing to be paged out.   The GC may  be mostly done with moving objects from a page, so can clear that page within the time limit the OS has for needing a page.</p>\n\n<p>Yet, I cannot recall any garbage collector that integrates with the OS paging system that drive the order the GC works in. </p>\n\n<p>(Please can someone with enough rep create an garbagecollector tag)</p>\n', 'ViewCount': '82', 'Title': 'Are there any garbage collectors that take into account paging?', 'LastEditorUserId': '15725', 'LastActivityDate': '2014-03-15T17:37:58.513', 'LastEditDate': '2014-03-15T15:48:59.967', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '15725', 'Tags': '<memory-management><paging>', 'CreationDate': '2014-03-15T14:57:46.177', 'FavoriteCount': '1', 'Id': '22649'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have the memory reference string for a multithreaded application and want to run this through a simulator which implements/approximates Belady\'s OPT page replacement algorithm.</p>\n\n<p>But what is the best way to do this?</p>\n\n<p>There is no problem with a single threaded approach - just look for the page in memory with longest reuse distance and get rid of it. But with multithreaded this becomes much more complex - we know what the reuse distances for each thread is, but we don\'t know the "combined" reuse distance.</p>\n\n<p>Practically, it\'s easy to get into the position where a page for one thread has a very long reuse distance and so gets chucked out when memory space is needed, only for it to be quickly faulted back in by another thread.</p>\n\n<p>I cannot find any scientific literature on this - but cannot believe it hasn\'t been studied before: does anyone know of any papers that consider this issue?</p>\n', 'ViewCount': '25', 'Title': "Implementing/approximating Belady's OPT for multithreaded environments (papers?)", 'LastActivityDate': '2014-03-16T22:39:32.250', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '6712', 'Tags': '<memory-management><paging><program-optimization><threads>', 'CreationDate': '2014-03-16T22:39:32.250', 'Id': '22687'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm new here, a brief intro, I'm a student majoring in comp-sci. Right now I'm having a bit confusion to answer one of my assignment, it is about system paging.</p>\n\n<p>I want to know how do I able to know what is the size of the memory of the following question.</p>\n\n<blockquote>\n  <p>there is a 64-bit computer system that uses pure paging with 16KB page size, if each page table entry is 4 bytes long...</p>\n</blockquote>\n\n<p>out of that question, I was asked to give:</p>\n\n<blockquote>\n  <p>(i) what is the maximum size of a page table?\n  (ii) Maximum size of user space main memory that can be supported and If hierarchical paging is used then what is the total level of hierarchies required? Assume that 2-level of hierarchy corresponds to an outer page table and an inner page table.</p>\n</blockquote>\n\n<p>I've read the materials regarding that question and I have a solution as follows:</p>\n\n<blockquote>\n  <p>64-bit computer system. \n      16KB page size = 16*1024 bytes = 16,384 bytes = $2^{14}$, \n      each page table entry is 4 bytes long</p>\n  \n  <p>i. Maximum size of a page table:\n  Size of page table = number of entries * size of entry\n      = $2^{50} \\times 2^5$\n      = $2^{55}$\n      = + 32768 terabytes \n  Number of entries = size of memory / page size.\n      = $2^{64} / 2^{14}$\n      = $2^{50}$</p>\n  \n  <p>ii. Total level of hierarchies required:\n      = number of bits available / number of entries\n      = 55/50\n      = 1 (rounded down)</p>\n</blockquote>\n\n<p>the one that struck me bewildered, because total level of hierarchies that I got is 1.  1 actually... Am I using a correct formula to count them?</p>\n\n<p>thank you for your time</p>\n", 'ViewCount': '136', 'Title': 'size of memory in 64-bit computer system', 'LastEditorUserId': '16325', 'LastActivityDate': '2014-04-01T23:00:22.560', 'LastEditDate': '2014-04-01T23:00:22.560', 'AnswerCount': '0', 'CommentCount': '11', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16325', 'Tags': '<operating-systems><memory-management><paging>', 'CreationDate': '2014-03-31T18:14:11.020', 'Id': '23298'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When simulating the clock page replacement algorithm, when a reference comes in which is already in memory, does the clock hand still increment?</p>\n\n<p>Here is an example:</p>\n\n<p>With 4 slots, using the clock page replacement algorithm</p>\n\n<p>Reference list: 1 2 3 4 1 2 5 1 3 2 4 5</p>\n\n<p>Initial list would look like this: </p>\n\n<pre><code>-&gt; [1][1]\n   [2][1]\n   [3][1]\n   [4][1]\n</code></pre>\n\n<p>The next reference to insert would be 1, then 2. Would the hand still point at 1 after 1, and after 2 ? In other words, after inserting the 5, would the clock look like this :</p>\n\n<pre><code>-&gt; [5][1]\n   [2][0]\n   [3][0]\n   [4][0]\n</code></pre>\n\n<p>?</p>\n', 'ViewCount': '31', 'Title': 'Clock page replacement algorithm - Already existing pages', 'LastActivityDate': '2014-04-22T03:16:05.973', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16972', 'Tags': '<algorithms><paging><virtual-memory>', 'CreationDate': '2014-04-22T00:46:50.387', 'Id': '24011'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How to know the size of page frame used by my OS ?</p>\n\n<p>This could be useful for some optimizations when I code. (Allocate big buffer that fit in a page frame for example).</p>\n\n<p>Page frame is determined by the operating system ? Mine is Windows 7 (but impossible to find information about it on Google. So, may be I wrong...)</p>\n', 'ViewCount': '10', 'ClosedDate': '2014-04-30T11:39:20.670', 'Title': 'How to know the size of page frame used by my OS?', 'LastActivityDate': '2014-04-30T09:04:45.557', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17208', 'Tags': '<optimization><operating-systems><paging><virtual-memory><memory-allocation>', 'CreationDate': '2014-04-30T09:04:45.557', 'Id': '24253'}