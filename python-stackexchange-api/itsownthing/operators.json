{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In working with <a href="http://en.wikipedia.org/wiki/Parser_combinator" rel="nofollow">parser combinators</a> I have been working with three means of handling <a href="http://en.wikipedia.org/wiki/Order_of_operations#Programming_languages" rel="nofollow">precedence</a> and <a href="http://en.wikipedia.org/wiki/Operator_associativity" rel="nofollow">associtivy</a> for <a href="http://en.wikipedia.org/wiki/Infix_notation" rel="nofollow">infix</a> operators.</p>\n\n<ol>\n<li><a href="http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#classic" rel="nofollow">The classic solution</a>.</li>\n<li><a href="http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#shunting_yard" rel="nofollow">Shunting Yard algorithm</a>.</li>\n<li><a href="http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing" rel="nofollow">Precedence climbing</a>.</li>\n</ol>\n\n<p>I was wondering if there are any more ways to handle the construction of the an AST from infix operators that have precedence and associativity?</p>\n\n<p>I would prefer papers on the method and possibly an example of the code in a functional language.</p>\n\n<p>I recently ran into <a href="http://www.cse.chalmers.se/~nad/publications/danielsson-norell-mixfix.pdf" rel="nofollow">Mixfix</a> / <a href="http://dl.acm.org/citation.cfm?id=5659" rel="nofollow">distfix</a> but have not yet implemented a working version.</p>\n', 'ViewCount': '19', 'Title': 'For parser combinators what are the algorithms for handling precedence and associtivity?', 'LastEditorUserId': '268', 'LastActivityDate': '2013-11-30T21:15:22.443', 'LastEditDate': '2013-11-30T21:15:22.443', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<parsing><precedence><associtivity><infix><operators>', 'CreationDate': '2013-11-29T21:26:57.407', 'Id': '18478'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Generally (perhaps always) in programming languages, unary operators have the highest precedence.  In some langauges, such as Standard ML, one can dynamically change the precedence of binary operators at run time.</p>\n\n<p>But what if we have a language where binary operators had higher precedence than unary ones?  Do such languages exist?  And how would we interpret certain cases?  For example, let's say binary <code>+</code> had higher precedence than unary prefix <code>@</code>.  In some cases this is obvious because it would mean that</p>\n\n<pre><code>@x+y\n</code></pre>\n\n<p>would parse as</p>\n\n<pre><code>@(x+y)\n</code></pre>\n\n<p>rather than</p>\n\n<pre><code>(@x)+y\n</code></pre>\n\n<p>BUT, how would we parse</p>\n\n<pre><code>x + @y\n</code></pre>\n\n<p>Would it be a syntax error (as in it cannot be parsed) or should it parse as <code>x+(@y)</code>?  I don't mean for this to necessarily be an opinion question; I am more interested to know if any real programming languages exist with high-precedence binary operators, and if so, what do they do.</p>\n", 'ViewCount': '65', 'Title': 'Binary operators with higher precedence than unary operators', 'LastActivityDate': '2013-12-10T23:54:24.810', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '18846', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11993', 'Tags': '<parsing><precedence><operators>', 'CreationDate': '2013-12-10T17:23:59.173', 'Id': '18835'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '42', 'Title': 'Operator overloading: Java vs. Python', 'LastEditDate': '2014-04-29T08:35:31.407', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17146', 'FavoriteCount': '1', 'Body': '<p>Why <a href="http://en.wikipedia.org/wiki/Operator_overloading" rel="nofollow">operator overloading</a> was included in Python and not in Java?\nHow does one decide to include or exclude operator overloading in a programming language?</p>\n\n<p>It is said <a href="http://javarevisited.blogspot.in/2011/08/why-java-does-not-support-operator.html" rel="nofollow">here</a> that operator overloading is excluded from Java \nto make the language simpler\n(for programmers, language and VM developers, etc.). </p>\n\n<p>I don\'t understand why the same explanation doesn\'t work for excluding it in Python?</p>\n', 'Tags': '<programming-languages><operators>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-29T08:35:31.407', 'CommentCount': '2', 'AcceptedAnswerId': '24194', 'CreationDate': '2014-04-28T16:08:06.637', 'Id': '24186'}}