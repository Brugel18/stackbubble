{'Body': '<p>I have two strings, where one is a permutation of the other. I was wondering if there is an alternative to <a href="http://en.wikipedia.org/wiki/Hamming_distance">Hamming distance</a> where instead of finding the minimum number of substitutions required, it would find the minimum number of translocations required to go from string a to string b.</p>\n\n<p>My strings are always of the same size and I know there are no errors/substitutions.</p>\n\n<p>Example:</p>\n\n<pre><code>1 2 3 4 5\n3 2 5 4 1\n</code></pre>\n\n<p>This would give me two:</p>\n\n<pre><code>3 2 5 4 1 (start)\n-&gt; 3 2 1 4 5 \n-&gt; -&gt; 1 2 3 4 5\n</code></pre>\n\n<p>If this is already implemented in R that would be even better.</p>\n', 'ViewCount': '419', 'Title': 'Alternative to Hamming distance for permutations', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-13T13:08:30.077', 'LastEditDate': '2012-10-12T19:35:10.880', 'AnswerCount': '1', 'CommentCount': '11', 'Score': '6', 'OwnerDisplayName': 'user1357015', 'PostTypeId': '1', 'OwnerUserId': '3174', 'Tags': '<terminology><string-metrics><permutations><edit-distance>', 'CreationDate': '2012-10-12T16:31:30.713', 'Id': '5036''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>When one shuffles playing cards, the goal is evidently to achieve a possibly big derangement\nof a given deck. For manual shuffling there are terms like inshuffle, outshuffle etc. I like\nto know whether there is a sensible general measure of derangements of n objects and\nefficient algorithm to compute that measure and eventually also to determine the set representing maximal derangements.</p>\n', 'ViewCount': '75', 'Title': 'Maximal derangements', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-27T16:09:47.163', 'LastEditDate': '2012-10-26T14:22:26.237', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4349', 'Tags': '<combinatorics><probability-theory><permutations>', 'CreationDate': '2012-10-26T10:31:49.767', 'Id': '6322''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am stuck on this problem:</p>\n\n<blockquote>\n  <p>Given an array $A$ of the first $n$ natural numbers randomly permuted, an array $B$ is \n  constructed, such that\n  $B(k)$ is the number of elements from $A(1)$ to $A(k-1)$ which are smaller than $A(k)$.  </p>\n  \n  <p>i) Given $A$ can you find $B$ in $O(n)$ time?<br>\n  ii) Given $B$ can you find $A$ in $O(n)$ time?</p>\n</blockquote>\n\n<p>Here, $B(1) = 0$. For a concrete example:\n$$\\begin{vmatrix}\n  A &amp; 8 &amp; 4 &amp; 3 &amp; 1 &amp; 7 &amp; 2 &amp; 9 &amp; 6 &amp; 5 \\\\\n  B &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 3 &amp; 1 &amp; 6 &amp; 4 &amp; 4 \\\\\n\\end{vmatrix}$$</p>\n\n<p>Can anyone help me? Thanks.</p>\n', 'ViewCount': '177', 'Title': 'Finding number of smaller elements for each element in an array efficiently', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-30T19:49:37.933', 'LastEditDate': '2012-11-27T01:45:21.400', 'AnswerCount': '2', 'CommentCount': '9', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1972', 'Tags': '<algorithms><arrays><permutations>', 'CreationDate': '2012-11-25T23:13:06.470', 'Id': '6898''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '91', 'Title': 'A puzzle in Permutation', 'LastEditDate': '2012-12-01T12:40:19.733', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4732', 'FavoriteCount': '1', 'Body': "<p>There are two stacks A and B. </p>\n\n<pre><code>A :  a,b,c,d   ('a' is on top and 'd' is at the bottom of the stack)\nB :  (empty)\n</code></pre>\n\n<p>There are two rules.</p>\n\n<pre><code>If an element of A is popped, it must be printed immediately or pushed into B.\nIf an element of B is popped, it can only be printed.\n</code></pre>\n\n<p>So, how many permutations of a,b,c,d are possible?  (continue reading)</p>\n\n<p>P.S. Well, I did calculations manually(didn't use any formula) and got 14 as the answer. However, it took around 10 minutes to do the lengthy steps. So, is there an easy way to do this? </p>\n", 'Tags': '<stack><permutations>', 'LastEditorUserId': '4732', 'LastActivityDate': '2012-12-01T13:12:50.447', 'CommentCount': '0', 'AcceptedAnswerId': '7080', 'CreationDate': '2012-12-01T11:22:13.987', 'Id': '7079''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>The ideal random permutation algorithm of <a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm" rel="nofollow">Fisher and Yates</a> (Algorithm P in Knuth vol.2) for a sequence of $n$ objects requires $n-1$ random numbers. </p>\n\n<p>In some card games one first does a "cut" and then a ripple shuffle. The cutting point is a random value, the subsequent shuffling could be considered as deterministic. That is, only one random number is being used to generate the permutation, which understandably can\'t be ideal. On the other hand, theoretical perfection isn\'t always necessary in practice. I like hence to know whether, if one keeps the constraint of using one random number in a run, the quality of randomness of the permutation obtained couldn\'t eventually be improved through certain appropriate modifications of the procedure commonly employed in card games, if one is willing to take the trade-off of more work/time, inconvenience, etc. Such trade-offs may not be acceptable for real games, but I suppose there may be other practical applications that could advantageously exploit the same idea, thus without being required to acquire, e.g. via a chosen PRNG, the larger number of random numbers needed for executing the algorithm of Fisher and Yates.</p>\n', 'ViewCount': '184', 'Title': 'Best random permutation employing only one random number', 'LastEditorUserId': '6437', 'LastActivityDate': '2013-01-28T16:06:34.070', 'LastEditDate': '2013-01-28T11:28:18.590', 'AnswerCount': '2', 'CommentCount': '12', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6437', 'Tags': '<randomness><random><sampling><permutations>', 'CreationDate': '2013-01-27T10:54:47.110', 'Id': '9199''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Given a tube with numbered balls (random). The tube has holes to remove a ball. Consider the following steps for one operation:</p>\n\n<ol>\n<li>You can pick one or more balls from the holes and remember the order in which you picked the balls.</li>\n<li>You need to tilt the pipe towards left side so that remaining balls in the pipe shifts towards left and occupy the empty space created by removing the balls.</li>\n<li>You are not supposed to change the order in which you picked the numbered balls from the pipe. Now you put them back again in the pipe using the vacant space created by movement of balls.</li>\n</ol>\n\n<p>Steps 1 to 3 is considered as one operation.</p>\n\n<p>Find out the minimum operations required to sort the numbered balls in the ascending order.</p>\n\n<p>For example:\nIf tube contains: $[1\\ 4\\ 2\\ 3\\ 5\\ 6]$</p>\n\n<p>Then we can take out $4$ and $5$ and $6$, and if we tilt pipe to the left, we get $[1\\ 2\\ 3]$, and we insert $(4\\ 5\\ 6)$ in that order to the end of pipe to get $[1\\ 2\\ 3\\ 4\\ 5\\ 6]$.</p>\n\n<p>So minimum number of steps required is 1.  I need to find minimum operations to sort the pipe.</p>\n\n<p>Any ideas or hints on how to solve this problem?</p>\n', 'ViewCount': '363', 'Title': 'Interesting problem on sorting', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-02-05T16:51:10.670', 'LastEditDate': '2013-02-05T11:44:26.733', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '6706', 'Tags': '<sorting><permutations>', 'CreationDate': '2013-02-04T20:01:40.007', 'FavoriteCount': '3', 'Id': '9486''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Inspired by <a href="http://cs.stackexchange.com/q/2336/71">this question</a> in which the asker wants to know if the running time changes when the comparator used in a standard search algorithm is replaced by a fair coin-flip, and also <a href="http://www.robweir.com/blog/2010/02/microsoft-random-browser-ballot.html">Microsoft\'s</a> prominent failure to write a uniform permutation generator, my question is thus:</p>\n\n<p>Is there a comparison based sorting algorithm which will, depending on our implementation of the comparator:</p>\n\n<ol>\n<li>return the elements in sorted order when using a <em>true</em> comparator (that is, the comparison does what we expect in a standard sorting algorithm) </li>\n<li>return a uniformly random permutation of the elements when the comparator is replaced by a fair coin flip (that is, return <code>x &lt; y = true</code> with probability 1/2, regardless of the value of x and y)</li>\n</ol>\n\n<p>The code for the sorting algorithm must be the same. It is only the code inside the comparison "black box" which is allowed to change.</p>\n', 'ViewCount': '296', 'Title': 'Is there a "sorting" algorithm which returns a random permutation when using a coin-flip comparator?', 'LastActivityDate': '2013-03-23T11:27:52.923', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '10658', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '71', 'Tags': '<sorting><randomized-algorithms><permutations>', 'CreationDate': '2013-03-20T18:14:44.773', 'Id': '10656''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Given a context-free language $L$, define the language $p(L)$ as containing all permutations of strings in $L$ (i.e. all strings in $L$ such that the order of symbols is not important). Is $p(L)$ context-free?</p>\n\n<p>I found two papers dealing with similar, but not identical, questions:</p>\n\n<ul>\n<li><p><a href="http://www.sciencedirect.com/science/article/pii/S0304397505008571" rel="nofollow">Generating all permutations by context-free grammars in Chomsky normal form</a> by Asveld (2003) deals with finite languages.</p></li>\n<li><p><a href="http://www.sciencedirect.com/science/article/pii/0020019082901090" rel="nofollow">Permutations are not context-free: An application of the interchange lemma</a> by Main (1982) deals with "permutation languages", i.e. sets of strings of the form $w x p(x) z$, where $p(x)$ is a any permutation of $x$. Also, the result is limited to alphabets with 16 symbols.</p></li>\n</ul>\n', 'ViewCount': '240', 'Title': 'Are permutations of context-free languages context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-15T14:34:16.553', 'LastEditDate': '2013-04-15T12:28:57.093', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11332', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<formal-languages><context-free><closure-properties><permutations>', 'CreationDate': '2013-04-15T12:09:49.237', 'Id': '11329''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I tried posting this in the math forum but I didn't get any responses. I was hoping someone could give me some advice for how to approach the following problem. </p>\n\n<p>If $n$ is a positive integer, let $S_n$ denote the group of permutations of the set $\\{1,2,\\dots, n\\}$. For a permutation $\\pi$ in $S_3$, let $e_\\pi$ be the bit permutation of bit strings of length 3. For each $\\pi \\in S_3$ determine the number of collisions of the compression function $h(x) = e_\\pi(x) \\oplus x$.  </p>\n\n<p>Does anyone have any advice on how to approach this? </p>\n", 'ViewCount': '65', 'Title': 'Collisions of a compression function', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-23T17:47:54.347', 'LastEditDate': '2013-04-23T17:47:54.347', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7861', 'Tags': '<hash><permutations>', 'CreationDate': '2013-04-23T17:22:51.767', 'Id': '11523''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have come across the following problem.</p>\n\n<p>You have $N$ registers, numbered $1,2,\\dots, N$, each of which can hold an integer value. You\nare given the initial values of the registers, which have the property that every number\nfrom $1, \\dots, N$ occurs exactly once among the $N$ registers.</p>\n\n<p>Each register has a "<strong>reset button</strong>": pressing the reset button on register $i$ changes its value to $i$. </p>\n\n<p>In one move you can pick any subset of the registers (say, registers $3, 5, 9$) and simultaneously press all their reset buttons. </p>\n\n<p><strong>However you must ensure that\nevery number from $1,2,\\dots, N$ continues to occur exactly once amongst the $N$ registers</strong>.</p>\n\n<p>The cost of a move that resets $m$ registers simultaneously is $m^2$.</p>\n\n<p>You can perform a\nsequence of such moves one after the other, and the total cost is the sum of the costs\nof the individual moves.</p>\n\n<p>Register $i$ is said to be stable if it contains the value $i$. Given a target $K$, where $K \\le N$,\nthe goal is to perform a sequence of moves at the end of which at least $K$ registers are\nstable. </p>\n\n<p><strong>Find the minimum possible cost for achieving this.</strong></p>\n\n<p>My attempt on problem:</p>\n\n<p>Let $A[1, \\dots, n]$ be given registers with initial values.</p>\n\n<pre><code>1. Divide $A$ into Disjoint Sets \n2. For each disjoint set maintain the number of elements in it. \n3. Find the minimum operations from these subsets(explained below with example)\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>Register:      1  2  3  4  5  6  7  8  9  10  11\n\nInitial Value: 11 3  6  9  8  4  1  5  10  2  7\n</code></pre>\n\n<p>and $K=7$</p>\n\n<p>Since Every number should be in the register we need to <code>reset</code> set of registers as shown below.</p>\n\n<p>We can Reset $1,11,7$ in a single <code>RESET</code> operation.</p>\n\n<p>Similarly we can reset $2,3,6,4,9,10$ and $5,8$ in a single <code>RESET</code> operation.</p>\n\n<p>So we now have $3$ disjoint subsets of $A$</p>\n\n<p>Let </p>\n\n<p>$S_1=\\{1,11,7\\}$, note that  $|S1|=3$</p>\n\n<p>$S_2=\\{2,3,6,4,9,10\\}$, $|S2|=6$</p>\n\n<p>$S_3=\\{5,8\\}$ and $|S3|=2$</p>\n\n<p>So Minimum number of operations for $K=7$ is $(6^2+2^2)=40$.</p>\n\n<p>Now we need to find minimum number of oprations form these three subset. </p>\n\n<p>more formally Given $S=\\{S_1, S_2, \\dots, S_n\\}$ we need to find Subset $\\{S_{i_1},S{i_2}, \\dots, S_{i_p}\\}$ such that </p>\n\n<p>$\\sum_{j=1}^{p} S_{i_j} \\ge K $ and $\\sum_{j=1}^{p} S_{i_j}^2$ is as minimum as possible.</p>\n\n<p>How to efficiently find the minimum number of operations from these subsets?</p>\n\n<p>Any Alternative solution(s)?</p>\n', 'ViewCount': '145', 'Title': 'Sorting Problem', 'LastEditorUserId': '139', 'LastActivityDate': '2013-05-03T02:14:58.017', 'LastEditDate': '2013-05-02T15:00:47.223', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4752', 'Tags': '<dynamic-programming><sorting><permutations>', 'CreationDate': '2013-05-02T09:08:47.950', 'FavoriteCount': '1', 'Id': '11724''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>We have two integers $z, k$ </p>\n\n<p>We form a sequence now of first z natural numbers. i.e. $1, 2, 3, 4, \\ldots z$.</p>\n\n<p>Now we have to find total number of permutations of this sequence such that the sum of any two adjacent numbers is $ \\le k$</p>\n\n<p>( $z \\leq 10^6$, $\\;\\;z &lt; k &lt; 2*z$ )</p>\n\n<p>Here is what I have been able to think untill now. If <code>k=2*z-1,</code> the answer is <code>z!</code></p>\n\n<p>Now if we reduce the value of <code>k to 2*z-2</code>, then we take the highest pair as a group and permute with rest of the elements, we subtract this value from the previous case of <code>k=2*z-1</code></p>\n\n<p>i.e. <code>dp(z,k)= z!</code> for <code>k=2*z-1</code>. and <code>dp(z,k-1)=dp(z,k)-(z-1)!*2</code> for <code>k=2*z-2</code>.</p>\n\n<p>I want to know if I am going in the right direction. Any help on the closed form would be good.</p>\n', 'ViewCount': '278', 'Title': 'Permuting natural numbers', 'LastEditorUserId': '8505', 'LastActivityDate': '2013-06-09T02:10:39.487', 'LastEditDate': '2013-06-08T21:07:24.343', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '12548', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8505', 'Tags': '<algorithms><permutations><mathematical-programming>', 'CreationDate': '2013-06-08T00:10:29.857', 'Id': '12522''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>We define an <strong>onto</strong> function from $[n] \\times [n]$ to $[n-2] \\cup \\{0\\}$ as follows, where $[n] = \\{1,2,3,\\ldots ,n\\}$,</p>\n\n<p>$$f : [n] \\times [n] \\rightarrow [n-2] \\cup \\{0\\}.$$</p>\n\n<p>1) $f(x,x) = 0$.</p>\n\n<p>2) $f(x,y) = f(y,x) &gt; 0$, for $y \u2260 x$.</p>\n\n<p>3) $f(x,y) \\leq \\max\\{f(x,z),f(z,y)\\}$ for all $x,y,z$ belonging to $[n]$.</p>\n\n<p>How many such functions are possible for a given $n$? I have tried my best but I am not able to get any close to the solution! One may even see it as a undirected simple graph with n vertices, f(x,y) representing the edge weights. Any help is appreciated!</p>\n\n<p>EDIT: i have been able to find that there are no such functions for n&lt;3.</p>\n\n<p>for n=3 we have one such function, for n=4, 13 are possible. </p>\n', 'ViewCount': '344', 'Title': 'Count number of special onto functions', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-15T21:05:56.520', 'LastEditDate': '2013-06-15T21:05:56.520', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '12644', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8636', 'Tags': '<combinatorics><permutations>', 'CreationDate': '2013-06-12T12:04:01.787', 'Id': '12636''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am trying to solve a problem on Sphere Online Judge (SPOJ) link to which is: <a href="http://www.spoj.com/problems/TRANSP/" rel="nofollow">http://www.spoj.com/problems/TRANSP/</a></p>\n\n<p>The matrix can be thought of as a permutation and its transposition as another permutation. I need to convert the first one into another. I have found a relation between the Cycles in the Permutation and the number of swaps required as:</p>\n\n<p>Minimum Swaps = Total Elements in Permutation - Number of Cycles</p>\n\n<p>However, I don\'t know how to calculate the matrix of size $2^a 2^b$ where $a+b \\leq 500000$.</p>\n', 'ViewCount': '101', 'Title': 'Number of permutation cycles in matrix transposition', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-06-26T23:36:34.183', 'LastEditDate': '2013-06-24T23:32:17.213', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8619', 'Tags': '<algorithms><matrices><permutations>', 'CreationDate': '2013-06-24T10:25:29.587', 'Id': '12860''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '591', 'Title': 'Rearrange an array using swap with 0', 'LastEditDate': '2013-08-26T11:11:43.570', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4752', 'FavoriteCount': '2', 'Body': u'<p>This is a Google interview question. I got it from a website.</p>\n\n<blockquote>\n  <p>You have two arrays <strong>source</strong> and <strong>target</strong>, containing two permutations of the numbers <code>[0..n-1]</code>. You would like to rearrange source so that it equals to target. The only allowed operations is <strong>\u201cswap a number with 0\u201d</strong>. Find the minimum number of swaps?</p>\n  \n  <p>e.g. {1,0,2,3} -> {1,3,2,0}  swap 0 with 3. one swap is enough.</p>\n</blockquote>\n\n<p>My attempt on problem: If we consider arrays as strings we could use edit distance to convert source to target if other edit distance operations like insert,delete,replace etc are allowed but here only allowed operation is swapping.</p>\n', 'Tags': '<algorithms><sorting><permutations>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-30T07:40:21.463', 'CommentCount': '1', 'AcceptedAnswerId': '13938', 'CreationDate': '2013-08-26T05:21:43.070', 'Id': '13930''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>$L$ is defined over the alphabet $\\{a,b\\}$ and it's decidable.\nThe language is $\\mathrm{perm}(L)$ which is the set of all permutations of all words in $L$.</p>\n\n<p>So far my proof is the following:</p>\n\n<p>Construct a TM $M$ that decides the language $\\mathrm{perm}(L)$. $M$ has input $w$.\nLet $\\pi(w)$ be a random permutation of w. Then feed it to $M$: $M$ accepts if $\\pi(w) \\in L$ or rejects if $\\pi(w) \\notin L$. </p>\n\n<p>I.e. if we let $\\pi(w)$ be a permutation of $w$ s.t. $\\pi(w) \\in L$, $M$ should halt and accept.\nIf we let $\\pi(w)$ be a permutation of $w$ s.t. $\\pi(w) \\notin L$, $M$ should halt and reject.</p>\n\n<p>Is this correct and enough?</p>\n", 'ViewCount': '74', 'ClosedDate': '2013-11-12T17:54:57.167', 'Title': 'Prove this language is decidable?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T22:09:01.850', 'LastEditDate': '2013-11-13T22:09:01.850', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11317', 'Tags': '<computability><permutations>', 'CreationDate': '2013-11-11T19:09:26.007', 'Id': '17920''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>This question was asked in the onsite regionals for ACM ICPC 2013 at Amritapuri.\nIn short, the question asked to find the number of ways to fill a $ 2\\times N$ grid with $M$ colors such that no two cells with the same row or same column have the same color.</p>\n\n<p>The limits given are $1 \\leq N$, and $M \\leq 1000$ with 1000 test cases per input. </p>\n\n<p>Based on the constraints the approach that comes to my mind after a long struggle includes having a precomputed DP table which can be used for every test case. I tried to apply the inclusion-exclusion principle but could not come up with any solution. I also tried to solve it using bipartite perfect matchings, but no success. How should I approach this question?</p>\n', 'ViewCount': '276', 'Title': 'Number of ways to fill a 2xN grid with M colors', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-27T17:23:20.610', 'LastEditDate': '2013-12-27T17:23:20.610', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '19291', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Tags': '<graph-theory><combinatorics><permutations><bipartite-matching>', 'CreationDate': '2013-12-25T20:33:19.390', 'Id': '19288''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Does anyone know a good algorithm for quickly finding an approximate solution to the following problem?</p>\n\n<p>Given two square matrices $A$ and $B$, minimize $\\| P A P^\\top - B \\|$ over all permutation matrices $P$.</p>\n\n<p>I have heard that there are several types of algorithms for these kinds of problems, like iterative improvement, simulated annealing, tabu search, genetic algorithms, evolution strategies, ant algorithms, and scatter search. I am looking for existing software.</p>\n', 'ViewCount': '34', 'Title': 'Quadratic programming problem involving permutation matrices', 'LastActivityDate': '2013-12-26T14:22:58.533', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12383', 'Tags': '<algorithms><optimization><permutations><approximation-algorithms>', 'CreationDate': '2013-12-26T14:22:58.533', 'Id': '19303''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>This question is inspired by <a href="http://cs.stackexchange.com/q/19250/755">Constructing inequivalent binary matrices</a>.</p>\n\n<p>Define the equivalence relation $\\sim$ as follows: If $M,N$ are two $8\\times 8$ binary matrices (all elements are $0$ or $1$), say that $M \\sim N$ if you can transform $M$ into $N$ by a sequence of moves, where each move picks some pair $(i,j)$ and swaps rows $i$ and $j$ and then swaps columns $i$ and $j$.  For example,\n\\begin{equation}\n\\left( \\begin{array}{ccc}\n0 &amp; 0 &amp; 0 \\\\\n0 &amp; 1 &amp; 1 \\\\\n1 &amp; 0 &amp; 0 \\end{array} \\right) \\sim\n\\left( \\begin{array}{ccc}\n1 &amp; 0 &amp; 1 \\\\\n0 &amp; 0 &amp; 0 \\\\\n0 &amp; 1 &amp; 0 \\end{array} \\right).\n\\end{equation}\nThis equivalence relation induces a set of equivalence classes.</p>\n\n<p>Is there a way to define a canonical representative for each equivalence class, so that given any matrix $M$, we can efficiently compute the canonical representative $M^*$ corresponding to the equivalence class containing $M$?  I\'m hoping for a simple and efficient algorithm to compute the canonical representative.</p>\n\n<p>For instance, one way to define a canonical representative for matrix $M$ would be as follows: among all matrices $N$ that are equivalent to $M$, choose the one that is lexicographically first.  However, I don\'t know of any fast way to compute the canonical representative corresponding to a given matrix $M$.  (One could enumerate all matrices that are equivalent to $M$ by trying all $8!$ possible permutations, and then check which one is lexicographically first, but this is inefficient: it requires $8! \\approx 2^{15.3}$ steps of computation, which is too much.)  Is there a better approach?</p>\n\n<p>Alternatively, is there a way to define a canonical representative for each equivalence class, so that we can quickly test any given matrix $M$ to determine whether it is in canonical form?  (i.e., there is an efficient algorithm to check this)</p>\n\n<p>A good answer to this question might help solve <a href="http://cs.stackexchange.com/q/19250/755">Constructing inequivalent binary matrices</a>.</p>\n', 'ViewCount': '39', 'Title': 'A canonical representative, for this equivalence relation on matrices', 'LastActivityDate': '2013-12-30T17:44:51.860', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><matrices><permutations>', 'CreationDate': '2013-12-30T06:08:00.250', 'FavoriteCount': '2', 'Id': '19371''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Suppose we had 2 arrays of the same size with positive numbers and we wanted to pair up the elements of each array such that the total difference between the pairs is minimized.</p>\n\n<p>The first thought would be to choose pairs with the minimum difference and so on. But it turns out the correct algorithm is to sort them and them pair accordingly.</p>\n\n<p>Any ideas on how to prove that the latter algorithm correctly minimizes the sum of differences?</p>\n', 'ViewCount': '85', 'Title': 'How can we minimize the total distance of cross pairs in an array', 'LastEditorUserId': '755', 'LastActivityDate': '2014-02-21T16:31:05.690', 'LastEditDate': '2014-02-21T16:31:05.690', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '21815', 'Score': '2', 'OwnerDisplayName': 'user14805', 'PostTypeId': '1', 'Tags': '<algorithms><algorithm-analysis><optimization><correctness-proof><permutations>', 'CreationDate': '2014-02-18T14:51:18.950', 'Id': '21767''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>You are given two things: A fixed initial 'model' partition of an interval, e.g.</p>\n\n<pre><code>I------I---I-----I-------I----...\n</code></pre>\n\n<p>where each <code>-</code> or <code>I</code> represents an element in a discrete time series and the <code>I</code>s are the partition boundaries.  This can also be represented as a sequence of subinterval lengths, i.e. 7, 4, 6, 8, ...</p>\n\n<p>Then, you're given a new set of subinterval lengths; and the task is to arrange these in such a way as to get as many coincident <code>I</code>s as possible.  Or equivalently, you are given a new partition on an interval of the same length (though, critically, the new partition may have greater or fewer elements) and the task is to shuffle the subintervals around to maximize alignment.  So if the model was</p>\n\n<pre><code>I------I---I-----I-------I----I\n</code></pre>\n\n<p>and you are given 2, 11, 5, 12, i.e.</p>\n\n<pre><code>I-I----------I----I-----------I\n</code></pre>\n\n<p>then the solution would be 11, 2, 12, 5, </p>\n\n<pre><code>I----------I-I-----------I----I\n           *             *\n</code></pre>\n\n<p>achieving alignment at 2 locations (marked with an asterisk, compare to model).</p>\n\n<p>There is an additional constraint: The locations of the aligned subintervals must be distributed approximately randomly throughout the length of the solution.  The simplest means of getting a partition with at least some alignment to the model would be to build the new partition segment by segment, drawing without replacement from the collection of test segments, aligning where possible.  But this would strongly bias the occurrences of alignment towards the beginning of the time series, and is therefore not allowed.  There is of course also the brute force O(n!) enumeration but my series are little too long for that.</p>\n\n<p>Naturally a solution that finds the optimal permutation would be great, but one that is efficient and gets a permutation with a substantial fraction of the possible alignment would also be good.  My current version is a variation on the 'simple' algorithm derived above, except only drawing from a small subcollection of subintervals so as to avoid bias.  I know it can be improved upon!</p>\n", 'ViewCount': '66', 'Title': 'Permute the subintervals of an interval partition to most closely align with a model partition', 'LastEditorUserId': '16410', 'LastActivityDate': '2014-04-03T23:56:25.543', 'LastEditDate': '2014-04-03T12:56:05.663', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '23405', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16410', 'Tags': '<algorithms><permutations><partitions>', 'CreationDate': '2014-04-03T11:28:45.423', 'Id': '23391''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>So here is the challenge problem statement: <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1512" rel="nofollow">https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1512</a> </p>\n\n<p>Basically, given a 0/1 matrix, you need to permute the columns so that the first column is fixed and after the permutation of columns, then for each row the 1\'s in the row occur contiguously (without counting wrap-around). I thought about this problem and came up with a conjecture that would make it easy to solve, but I\'m not sure if it\'s true.</p>\n\n<p>Conjecture: After the first $k$ columns have been chosen, let $S$ be the set of rows that end with a $1$ in the $k$th column, such that there exists an unchosen column that has a $1$ in that row. Then the $k+1$th column can be chosen to be the column that has (i) 1\'s for all positions in $S$, and (ii) which has a minimum total number of $1$\'s.</p>\n\n<p>Is this true? If so an optimal solution could be constructed very quickly. I know that the $k+1$th column has to satisfy condition (i), which reduces the possibilities, but I\'m really hoping we can ensure condition (ii) also holds so that the choice of $k+1$th column is essentially unique.</p>\n', 'ViewCount': '26', 'Title': 'Conjecture about a matrix column swapping challenge problem', 'LastEditorUserId': '9584', 'LastActivityDate': '2014-04-21T18:53:34.960', 'LastEditDate': '2014-04-21T18:53:34.960', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9584', 'Tags': '<algorithms><correctness-proof><greedy-algorithms><permutations>', 'CreationDate': '2014-04-21T17:15:13.210', 'Id': '23997''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}