{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The idea of <a href="http://en.wikipedia.org/wiki/Splay_tree">splay trees</a> is very nice as they move frequently accessed elements to the top, which can gain a considerable speed up in many applications. The drawback is that in the worst case an operation can have $O(n)$ complexity. \n(Although amortized bounds are $O(n\\log n)$ <a href="http://en.wikipedia.org/wiki/Splay_tree#Performance_theorems">if we perform at least $n$ operations</a>.)</p>\n\n<p>Is there a self-adjusting search tree structure that has both? Favoring recently accessed elements and with worst $O(\\log n)$ complexity for a single operation?</p>\n', 'ViewCount': '286', 'Title': 'Is there a binary tree structure with fast access to recently accessed elements and worst $O \\left( \\log n \\right )$ complexity?', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-09-24T06:09:43.897', 'LastEditDate': '2013-05-07T07:14:06.917', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2448', 'Tags': '<data-structures><binary-trees><search-trees><splay-trees>', 'CreationDate': '2013-05-04T09:54:49.780', 'FavoriteCount': '2', 'Id': '11772'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>When inserting an item into a splay tree, rotations are performed in pairs based on either a zig-zag or zig-zig pattern. When there is an odd number of rotations to be performed, one could either do the extra rotation beginning at the leaf or save the extra rotation and do it at the root. Does it matter?</p>\n\n<p>For example, in the attached image I insert a 4 into a BST, and "splay it"\nit to the root. On the top of the figure, I first locate the zig-zig pair \nat the leaf node and perform the zig-zag splay from the bottom leaving a final right rotation at the root. At the bottom of the figure, I first do the odd rotation starting from the leaf, and the then do a zig-zig splay to the root.</p>\n\n<p>Which is correct? Or  will both lead to the usual splay-tree performance?</p>\n\n<p><img src="http://i.stack.imgur.com/CNSAZ.png" alt="two ways to splay for odd number of rotations"></p>\n', 'ViewCount': '186', 'Title': 'Splay tree with odd number of rotations', 'LastEditorUserId': '2205', 'LastActivityDate': '2014-03-01T08:50:13.433', 'LastEditDate': '2013-09-08T10:02:30.483', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '10033', 'Tags': '<data-structures><binary-trees><splay-trees>', 'CreationDate': '2013-09-07T20:35:21.943', 'FavoriteCount': '1', 'Id': '14200'}}