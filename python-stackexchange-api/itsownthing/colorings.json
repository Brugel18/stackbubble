{'Body': u'<p>I have been investigating parallel algorithms to compute certain two-dimensional dynamic programming recursions (on natural parameters); see also <a href="http://cs.stackexchange.com/questions/196/a-case-distinction-on-dynamic-programming-example-needed">here</a>. Under certain assumptions, cases one and two can actually be computed in parallel -- and very well. However, if you assume that communicating array entries from one thread to another is more expensive than a normal memory access (as might be the case on real machines), these algorithms are no longer always strongly work-efficient\xb9. In fact, I conjecture that in this scenario there is no strongly work-efficient parallel algorithm general for these classes of problems, even if we consider only non-pathological recursions.</p>\n\n<p>Towards proving this, I have made the following abstraction for the domain and parallel algorithms. Note that I assume here that such algorithms allocate computations of individual entries to processors in a deterministic way; I do not think the result changes if we allow nondeterminism/randomisation in this regard, but I have no proof.</p>\n\n<blockquote>\n  <p>Let $G_n = (V_n, \\emptyset)$ with $V_n = \\{(i,j) \\mid 1 \\leq i,j \\leq n \\}$ be a family of empty $n\\times n$ grid graphs. Let furthermore $c : \\mathbb{N} \\to (V_n \\to \\{1,\\dots,p\\})$ a coloring for this family which asymptotically divides $V_n$ in equal parts, that is</p>\n  \n  <p>$\\qquad \\displaystyle |\\{v \\in V_n \\mid c(n)(v) = c_i\\}| \\underset{n \\to \\infty}{\\longrightarrow} \\frac{n^2}{p}$</p>\n  \n  <p>for all colors $c_i \\in \\{1,\\dots,p\\}$.</p>\n</blockquote>\n\n<p>The claim is that we can choose edges so that we create no circles and no node has more than linearly many incoming edges, but there are quadratically many edges whose nodes have different colors\xb2:</p>\n\n<blockquote>\n  <p>(For any such coloring, ) There is a family of sets of directed edges $E_n = V_n \\times V_n$ so that</p>\n  \n  <ul>\n  <li>$((i,j), (i\',j\')) \\in E_n \\ \\Longrightarrow i\' \\geq i \\land j\' \\geq j$, that is edges do not point up or left\xb3,</li>\n  <li>for all $n \\in \\mathbb{N}$, $(V_n,E_n)$ has no directed cycles,</li>\n  <li>$D_n := \\max_{u \\in V_n} \\operatorname{indeg}(u) \\in O(n)$ and</li>\n  <li>$C_n := |\\{(u,v) \\in E_n \\mid c(n)(u) \\neq c(n)(v) \\}| \\in \\Omega(n^2)$.</li>\n  </ul>\n</blockquote>\n\n<p>Is this (similar to) a known problem? Does it hold, and how can you (dis)prove it?</p>\n\n<hr>\n\n<h3>Example</h3>\n\n<p>Consider this coloring (which roughly corresponds to an algorithm I have investigated):</p>\n\n<p><img src="http://i.stack.imgur.com/UclTl.png" alt="example coloring"><br>\n<sup>[<a href="https://github.com/akerbos/sesketches/blob/gh-pages/src/cs_2452.tikz" rel="nofollow">source</a>]</sup></p>\n\n<p>For edges as implied by the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein distance</a> recursion, that is</p>\n\n<p>$\\qquad \\displaystyle E_n = \\bigcup_{1 \\leq i,j \\leq n}\\{(i,j)\\} \\times \\{(i-1,j), (i-1,j-1), (i,j-1) \\} \\cap \\{1,\\dots,n\\}^2$,</p>\n\n<p>we have $D_n = 3$ and $C_n = 8n-4$, so this is not the $E_n$ we are looking for. If we draw edges from every node to all others to its right, that is</p>\n\n<p>$\\qquad \\displaystyle E_n = \\{ ((i,j),(i,j\')) \\mid j\' &gt; j \\}$,</p>\n\n<p>we get $D_n = n-1$ and $C_n \\geq \\frac{3}{4}n^2$, so the coloring is defeated.</p>\n\n<hr>\n\n<ol>\n<li>"Strongly work-efficient" means here that the parallel algorithm on $p \\in \\mathbb{N}$ cores does not take more time than $\\frac{T^s}{p}$ in the limit, with $T^s$ the runtime of a (good) sequential algorithm.</li>\n<li>That corresponds to a not-too-dense dependency structure of a recursion\'s domain which causes the parallel algorithm to communicate too many results between threads.</li>\n<li>That corresponds to <a href="http://cs.stackexchange.com/questions/196/a-case-distinction-on-dynamic-programming-example-needed">case one</a>. Case two can be modelled similarly by requiring $i\' &gt; i$.</li>\n</ol>\n', 'ViewCount': '102', 'Title': 'Beating fair colorings with few edges', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-20T08:41:16.777', 'LastEditDate': '2014-01-20T08:41:16.777', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<graph-theory><colorings>', 'CreationDate': '2012-06-22T17:04:27.403', 'FavoriteCount': '1', 'Id': '2452''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Consider a square, ABCD. Intuitively it seemed to me that its chromatic polynomial is $\\lambda(\\lambda - 1)(\\lambda - 1)(\\lambda - 2)$ where there are $\\lambda$ colours available..</p>\n\n<p>That is there are $\\lambda$ ways in which a colour for A can be picked, there are $\\lambda - 1$ ways for colours for B and D to be picked(B and D are adjacent to A) and $\\lambda - 2$ ways for colours for C to be picked.</p>\n\n<p>However using the <a href="http://www.csie.ndhu.edu.tw/~rschang/dmchap11.ppt" rel="nofollow">decomposition theorem</a> (slide 47, Example 11.33) and decomposing the square into a path of length 3 and a triangle, shows that my initial reasoning is wrong.</p>\n\n<p>Could you tell me where I am going wrong with my thinking.</p>\n', 'ViewCount': '438', 'Title': 'Chromatic polynomial of a square', 'LastEditorUserId': '472', 'LastActivityDate': '2013-04-10T04:07:58.683', 'LastEditDate': '2013-04-10T04:07:58.683', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '4775', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2980', 'Tags': '<graph-theory><colorings>', 'CreationDate': '2012-09-27T06:41:19.257', 'Id': '4758''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>I am trying to understand the <a href="http://disco.ethz.ch/lectures/podc_allstars/lecture/chapter1.pdf" rel="nofollow">distributed 6-color algorithm for vertex coloring</a> (on page 10).</p>\n\n<p>Here is a short description</p>\n\n<p>Idea of the algorithm: We start with color labels that have $\\log n$ bits. In each synchronous round we compute a new label with exponentially smaller size than the previous label, still guaranteed to have a valid vertex coloring.</p>\n\n<p>Let $i$ be the smallest index where $c_v$ and $c_p$ differ;\nthe new label is $i$ (as a bitstring) followed by the bit $c_v(i)$ itself</p>\n\n<pre><code>Grand-parent 0010110000 -&gt; 10010 -&gt; \u2026\nParent       1010010000 -&gt; 01010 -&gt; 111\nChild        0110010000 -&gt; 10001 -&gt; 001\n</code></pre>\n\n<p>The problem I cannot understand this example. Let\'s take Grand-parent($c_p$ = 0010110000) and parent($c_v$ = 1010010000), on the round when $c_v$ receives $c_p$, so we need to change $c_v$. They differ in 5th bit, counting from 0 (5 in binary is 101), so according to definition, $c_p$ is "$101$"+$c_p[5]=1010$, but in example it\'s 01010, what I get wrong?</p>\n', 'ViewCount': '167', 'Title': 'Distributed 6-color Vertex Coloring', 'LastEditorUserId': '1636', 'LastActivityDate': '2012-12-18T07:23:55.717', 'LastEditDate': '2012-12-18T06:01:55.390', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7460', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><distributed-systems><colorings>', 'CreationDate': '2012-12-17T11:30:23.563', 'Id': '7459''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have some difficulties in understanding distributed algorithm for tree 6 - coloring in $O(\\log^*n)$ time.</p>\n\n<p>The full description can be found in following paper: <a href="http://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1613&amp;context=cstech" rel="nofollow">Parallel Symmetry-Breaking in Sparse Graphs. Goldberg, Plotkin, Shannon</a>.</p>\n\n<p>In short, the idea is ...</p>\n\n<p>Starting from the valid coloring given by the processor ID\'s, the procedure iteratively reduces the number of bits in the color descriptions by recoloring each nonroot node $v$ with the color obtained by concatenating the index of a bit in which $C_v$ differs from $C_{parent}(v)$ and the value of this bit. The root $r$  concatenates $0$ and $C_r[0]$ to form its new color.</p>\n\n<p><strong>The algorithm terminates after $O(\\log^*n)$ iterations.</strong></p>\n\n<p>I don\' have the intuitive understanding why it\'s actually terminates in $O(\\log^*n)$ iterations. As it\'s mentioned in the paper on the final iteration there is the smallest index where two bit string differs is at most 3. So 0th bit and 1th bit could be the same and $2^2=4$, so this two bit will give us 4 colors + another 2 colors for different 3th bit, and in total 8 colors and not 6 like in the paper, and why we cannot proceed further with 2 bits, it\'s still possible to find different bits and separate them.</p>\n\n<p>I would appreciate a little bit deeper analysis of the algorithm than in the paper.</p>\n', 'ViewCount': '101', 'Title': '6-coloring of a tree in a distributed manner', 'LastEditorUserId': '31', 'LastActivityDate': '2014-05-03T20:56:08.843', 'LastEditDate': '2013-02-06T13:18:13.150', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><time-complexity><colorings>', 'CreationDate': '2013-02-06T10:58:35.073', 'Id': '9539''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Let Undir-Reachability be the following problem:\ngiven an undirected graph G and two specified vertices s and t in G, is there a path from s to t in G?</p>\n\n<p>I need to prove that the 2-Colourability is in L, by knowing that Undir-Reachability belongs to the complexity class L.</p>\n\n<p>I don't know how to start.</p>\n", 'ViewCount': '55', 'Title': 'Prove that 2-Colourability is in L from Undir-Reachability is in L', 'LastActivityDate': '2013-02-21T23:20:30.173', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10024', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6978', 'Tags': '<complexity-theory><graph-theory><space-complexity><colorings>', 'CreationDate': '2013-02-21T18:32:59.790', 'Id': '10016''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>We are given a graph $G=(V,E)$ with positive edge weights $w_{i}$ and numerical {0,1,-1} labels $l$ for all vertices . We know that $G$ has a subset $G'$ with all vertices labeled 0. The problem is to assign labels to the vertices in $G'$ in such way that this sum is maximized $\\sum_{e_{u,v}\\in E} w_{i}l_ul_v.$ The question is whether this problem is NP-complete or not. If it is not then what is the polynomial algorithm?</p>\n\n<p>Personally I believe that this problem is essentially a form of 3-Coloring. The challenge is to chose the labels {1,-1} depending on the neighbors. Say the boundary between $G$ and $G'$ has a lot of 1s  then it is better to chose 1s for the labeling of vertices in $G'$, similarly if the boundary has lots of -1s then it is better to chose -1s for labeling because $-1*-1=1$. So essentially this becomes some sort of reverse 3-Coloring problem where the neighbors have to have matched color.</p>\n\n<p>Can you help reduce this problem to 3-Coloring (or vice-versa) ? Or perhaps there is polynomial time algorithm ?</p>\n", 'ViewCount': '97', 'Title': 'Strategic vertex labeling', 'LastEditorUserId': '7336', 'LastActivityDate': '2013-05-13T02:04:44.517', 'LastEditDate': '2013-05-13T01:43:16.263', 'AnswerCount': '1', 'CommentCount': '10', 'AcceptedAnswerId': '11978', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Tags': '<graphs><np-complete><np><colorings>', 'CreationDate': '2013-05-11T05:33:52.827', 'Id': '11946''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>This was asked in a recent contest.\nThe question asked to count the number of ways to color an $M \\times N$ matrix with $K$ colours such that no two adjacent cells (sharing an edge) have the same color.\nIn other words, I want to count the number of different graph colorings of a grid graph: the graph of a $N \\times M$ grid. The limits were $1 \\le N,M \\le 8$ and $1 \\le K \\le 1000000000$.</p>\n\n<p>Is it possible to count the number of colors using the inclusion-exclusion principle, and if so, how? I saw <a href="http://cs.stackexchange.com/q/19288/98">another question</a> that solves the special case (where $M=2$) using inclusion-exclusion, so I\'m wondering if that kind of approach can be generalized here.</p>\n', 'ViewCount': '89', 'Title': 'Calculate number of ways to color matrix using inclusion-exclusion principle', 'LastEditorUserId': '755', 'LastActivityDate': '2014-03-21T08:14:00.150', 'LastEditDate': '2014-03-21T08:04:40.733', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Tags': '<graph-theory><combinatorics><counting><colorings>', 'CreationDate': '2014-01-19T07:03:15.513', 'Id': '19822''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Given a set of colors $M$ and a graph $G=(V,E)$. Allocate the colors to minimize the number edges with same color on the two vertices of the edge (i.e. minimize pairs of adjoining vertices with same color.).</p>\n\n<p>This problem is different from standard <a href="http://en.wikipedia.org/wiki/Graph_coloring" rel="nofollow">coloring problem</a>. Could someone please provide some literature where this problem is studied?</p>\n', 'ViewCount': '134', 'Title': 'A variation of the graph coloring problem', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-07T23:19:01.293', 'LastEditDate': '2014-02-07T22:28:30.997', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<graph-theory><reference-request><colorings>', 'CreationDate': '2014-02-07T17:30:35.593', 'FavoriteCount': '1', 'Id': '21431''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '216', 'Title': 'Characterisation of graphs that are not 3-colorable', 'LastEditDate': '2014-03-18T14:13:21.130', 'AnswerCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14957', 'FavoriteCount': '1', 'Body': '<p>We know that <em>all</em> graphs with odd cycles (odd number of vertices) are not 2-colorable. Is there a similar characterisation for 3-colorability? I am looking for undirected graphs that are not 3-colorable depending on a single graph property e.g. vertices/edges parity or anything else that can be generalised.</p>\n', 'Tags': '<graph-theory><colorings>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-18T17:51:39.087', 'CommentCount': '0', 'AcceptedAnswerId': '22757', 'CreationDate': '2014-03-18T13:59:40.307', 'Id': '22754''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I was reading up on <a href="http://en.wikipedia.org/wiki/Four_color_theorem" rel="nofollow">Four color theorem</a> and am wondering if there is any practical application of it .( I dont think seperating the map into four different colors can be considered an application)</p>\n\n<p>I tried Googling for applications of Four colour theorem but could not find any uses of it . </p>\n', 'ViewCount': '71', 'Title': 'Application of Four color theorem', 'LastActivityDate': '2014-03-21T15:24:07.493', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12448', 'Tags': '<graph-theory><colorings>', 'CreationDate': '2014-03-21T04:17:25.910', 'FavoriteCount': '1', 'Id': '22892''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>This is a Discrete Math/Combinatorics Question from my hw\u2026but I don't really understand the question.</p>\n\n<blockquote>\n  <p>Find largest chromatic number of a full binary tree given the following depths: (Check all that apply)</p>\n  \n  <p>T2 T3 T7 T12 T200</p>\n</blockquote>\n\n<p>I understand that the chromatic number refers to the minimum color that you can color a graph or tree with the adjacent nodes or vertices being different colors.</p>\n\n<p>So knowing this fact... I'm sure that the chromatic number for all full binary trees should be 2 since you can use two different color nodes to completely color the tree? But they want me to find the largest chromatic number. I'm just confused.</p>\n", 'ViewCount': '94', 'ClosedDate': '2014-04-01T22:00:40.957', 'Title': 'Find largest chromatic number of a full binary tree', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-22T05:10:33.807', 'LastEditDate': '2014-03-21T21:11:42.240', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'OwnerDisplayName': 'Ace', 'PostTypeId': '1', 'Tags': '<graph-theory><binary-trees><trees><discrete-mathematics><colorings>', 'CreationDate': '2014-03-21T03:15:36.973', 'Id': '22906''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am trying to find a graph that does not get optimally colored by the Briggs coloring algoritm. Any suggestions on a type of graph to look for?</p>\n', 'ViewCount': '18', 'ClosedDate': '2014-04-29T22:38:59.250', 'Title': 'Briggs algorithm non optimal situation', 'LastActivityDate': '2014-04-25T16:11:04.377', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '17080', 'Tags': '<algorithms><graph-theory><graphs><colorings>', 'CreationDate': '2014-04-25T16:11:04.377', 'Id': '24110''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}