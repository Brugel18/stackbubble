2130:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There is a family of random graphs $G(n, p)$ with $n$ nodes (<a href="https://en.wikipedia.org/wiki/Random_graph">due to Gilbert</a>). Each possible edge is independently inserted into $G(n, p)$ with probability $p$. Let $X_k$ be the number of cliques of size $k$ in $G(n, p)$.</p>\n\n<p>I know that $\\mathbb{E}(X_k)=\\tbinom{n}{k}\\cdot p^{\\tbinom{k}{2}}$, but how do I prove it?</p>\n\n<p>How to show that $\\mathbb{E}(X_{\\log_2n})\\ge1$ for $n\\to\\infty$? And how to show that $\\mathbb{E}(X_{c\\cdot\\log_2n}) \\to 0$ for $n\\to\\infty$ and a fixed, arbitrary constant $c&gt;1$?</p>\n', 'ViewCount': '297', 'Title': 'Number of clique in random graphs', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-28T09:46:02.827', 'LastEditDate': '2012-05-28T09:46:02.827', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '2119', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1393', 'Tags': '<graph-theory><combinatorics><probability-theory><random-graphs>', 'CreationDate': '2012-05-27T23:41:29.403', 'Id': '2118'},2131:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let Alice and Bob be two users chosen uniformly at random from a social network (e.g. Facebook). What is the probability that they are friends assuming that they share $k$ mutual friends?</p>\n\n<p>I am interested both in the experimental values (or estimates) from currently existing social networks (e.g. Facebook) and values predicted by random graph models for these social networks.</p>\n', 'ViewCount': '193', 'Title': 'What is the probability of friendship conditioned on the number of mutual friends', 'LastActivityDate': '2012-09-17T07:17:51.607', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<graph-theory><combinatorics><social-networks><random-graphs>', 'CreationDate': '2012-09-16T00:29:01.343', 'Id': '4571'},2132:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For a random undirected graph with $n$ nodes, where each node has $k$ incident edges ($nk/2$ edges in total), the vertex set is  partitioned into two sets each having $n/2$ nodes.  </p>\n\n<blockquote>\n  <p>What is the order of the number of edges that start in one partition and end in the other?  </p>\n</blockquote>\n\n<p>My back of the napkin calculation is half of total number of edges, $nk/4$. If I place randomly an edge it has $1/4$ chance of having both ends in one partition, $1/4$ chance of having both ends in the other partition and $1/2$ chance of having the ends in both. I find it surprising that it could be half.</p>\n', 'ViewCount': '52', 'Title': 'Mean number of edges between two equal partitions', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-16T19:05:20.267', 'LastEditDate': '2012-12-16T19:05:20.267', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '7435', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5081', 'Tags': '<graph-theory><graphs><random-graphs>', 'CreationDate': '2012-12-16T10:12:42.143', 'Id': '7433'},2133:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '236', 'Title': 'What is a good algorithm for generating random DFAs?', 'LastEditDate': '2013-06-29T08:40:23.377', 'AnswerCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '8184', 'FavoriteCount': '1', 'Body': "<p>I am generating random DFAs to test a DFA reduction algorithm on them.</p>\n\n<p>The algorithm that I'm using right now is as follows: for each state $q$, for each symbol in the alphabet $c$, add $\\delta (q, c)$ to some random state.  Each state has the same probability of becoming a final state.</p>\n\n<p>Is this a good method of generating unbiased DFAs?  Also, this algorithm doesn't generate a trim DFA (a DFA with no obsolete states) so I'm wondering if there is a better way of generating random DFAs that can somehow ensure that it is trim?</p>\n", 'Tags': '<algorithms><finite-automata><random><pseudo-random-generators><random-graphs>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-18T10:13:05.943', 'CommentCount': '9', 'AcceptedAnswerId': '12949', 'CreationDate': '2013-06-28T05:14:15.410', 'Id': '12943'},2134:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given n, I want to randomly generate a binary tree (unlabelled) that has n end nodes. Could someone kindly provide a reference containing an algorithm for doing that?</p>\n\n<p>I attempted to do as follows: From a PRNG obtain n PRNs in [0.0, 1.0) as (relative) frequencies of n symbols for generating a Huffman tree (used in data compression). But, if the PRNs used are uniform, then I think this would highly favour generation of those Huffman trees that are more flat and Huffman trees corresponding to widely different frequencies of the symbols would be highly suppressed in the generation process. If this is correct, how could one do better? Thanks in advance.</p>\n', 'ViewCount': '63', 'Title': 'Generation of random binary trees', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-20T13:47:45.200', 'LastEditDate': '2014-02-28T08:39:33.350', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6437', 'Tags': '<data-structures><sampling><random-graphs>', 'CreationDate': '2014-02-27T17:34:00.827', 'Id': '22098'}