3550:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have this problem:</p>\n\n<blockquote>\n  <p>Consider the problem of calculating the integral</p>\n  \n  <p>$$y_n =\\int_{0}^{1} \\dfrac{x^n}{x+10} \\mathrm{d}x $$\n  for a positive integer $n$.</p>\n  \n  <p>Observe that $$y_n + 10y_{n-1} = \\int_{0}^{1} \\dfrac{x^n +10x^{n-1}}{x+10} \\mathrm{d}x  = \\int_{0}^{1} x^{n-1}\\mathrm{d}x = \\dfrac{1}{n}$$</p>\n  \n  <p>and that using this relationship in a forward recursion leads to a numerically unstable procedure.</p>\n  \n  <ol>\n  <li><p>Derive a formula for approximately computing these integrals based on evaluating $y_{n-1}$ given $y_n$.</p></li>\n  <li><p>Show that for any given value $\\epsilon &gt; 0$ and positive integer $n_0$, there exists an integer $n_1 \\geq n_0$ such that taking $y_{n_1} = 0$ as a starting value will produce integral evaluations $y_n$ with an absolute error smaller than $\\epsilon$ for all  $0 &lt; n \\leqslant n_0$. </p></li>\n  <li><p>Explain why your algorithm is stable.</p></li>\n  </ol>\n</blockquote>\n\n<p>Here is what I have so far,</p>\n\n<p>for part 1.</p>\n\n<p>$$y_{n-1} = \\dfrac{1}{10} \\left(\\dfrac{1}{n} - y_n\\right)$$</p>\n\n<p>and for part 3.</p>\n\n<p>The algorithm is stable because the magnitude of roundoff errors gets divided by 10 each time the recursion is applied.</p>\n\n<p>I really don't know how to start on the proof for part 2., any hints and help would be appreciated.</p>\n", 'ViewCount': '59', 'Title': 'Error accumulation in a numerical integration', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-18T09:12:24.380', 'LastEditDate': '2013-09-18T09:12:24.380', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10189', 'Tags': '<algorithms><numerical-analysis><error-estimation><numerical-algorithms>', 'CreationDate': '2013-09-18T00:43:25.283', 'Id': '14394'},3551:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>It seems to me that taken over the entire graph, the norm of the error vector must be monotonically decreasing, otherwise we couldn't guarantee that PageRank would ever converge.</p>\n\n<p>However, is the same true on a per-vertex basis? I.e., from iteration t to iteration t+1, is the squared error of a vertex guaranteed to always decrease as it moves closer to its PageRank value? Or is it possible that the vertex squared error would ever increase?</p>\n\n<p>This also seems to me to have some broader relationship with power iterations in general? Some explanation or proof with the answer would be appreciated.</p>\n", 'ViewCount': '48', 'Title': 'Is the per-vertex error over a PageRank iteration monotonically decreasing?', 'LastActivityDate': '2013-10-15T02:00:25.790', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16094', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '10683', 'Tags': '<graph-theory><algorithm-analysis><error-estimation>', 'CreationDate': '2013-10-12T20:56:11.653', 'Id': '15024'},3552:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In order to plot a curve a set of points is usually calculated based on some formula. The function FPLOT in MATLAB also supports plotting with some error tolerance. Its help says the following about this functionality:</p>\n\n<pre><code>The FPLOT function begins with a minimum step of size (XMAX-XMIN)*TOL.\nThe step size is subsequently doubled whenever the relative error\nbetween the linearly predicted value and the actual function value is\nless than TOL.\n</code></pre>\n\n<p>So, if I plot a curve based on some expression and with some predefined tolerance TOL, is the error of the line segment approximation between any two calculated points always lower than TOL? Unfortunately, this is not obvious for me.</p>\n\n<p>If not, how could one achieve a guaranteed (small) error of a piecewise-linear curve approximation (compared with the "exact" curve).</p>\n', 'ViewCount': '14', 'Title': 'Error estimates of piecewise-linear curve approximations', 'LastActivityDate': '2014-02-06T14:32:19.993', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '21379', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13186', 'Tags': '<approximation><approximation-algorithms><error-estimation>', 'CreationDate': '2014-02-06T14:20:58.570', 'Id': '21376'}