{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I find this a bit difficult to describe, but I am interested in the following idea :</p>\n\n<p>The LZ algorithm factors (verb) an input stream into adjacent factors, these are by definition the maximal prefixes of the piece of text that occur in the previous text (or equivalently the previous concatenation of LZ factors). </p>\n\n<p>I know and believe that in the long term (given infinite input and infinite window) this coding scheme can achieve the Shannon limit, that it will find all repeat patterns that exist. </p>\n\n<p>However in <em>any given finite text</em> (but with an unbounded window) how optimal is this?</p>\n\n<p>Do the choice of factors earlier in the input have potential detrimental effects later on? For instance, could LZ converge to a choice of factors that omits certain larger factors, or factor-choices that would result in a better cover of the input (i.e. a choice of factors that  cover more of the text?). </p>\n\n<p>Or is the optimality of LZ only constrained by the window limit, and the finite nature of a text? Please provide some kind of hand waving or intuitive proof.</p>\n', 'ViewCount': '142', 'Title': 'How optimal is Lempel-Ziv at reaching the Shannon limit?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-31T14:25:17.583', 'LastEditDate': '2013-01-30T21:52:12.133', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '9356', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4602', 'Tags': '<complexity-theory><combinatorics><data-compression><lempel-ziv>', 'CreationDate': '2013-01-30T15:05:50.820', 'Id': '9309'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have been experimenting with <a href="https://en.wikipedia.org/wiki/LZ77" rel="nofollow">LZ77</a> (naively $O(n^2)$ runtime, infinite window). Applying it to the 7th Fibonacci word $abaababaabaab$ yields the correct LZ factorization:</p>\n\n<p>$\\qquad a,b,a,aba,baaba,ab$.</p>\n\n<p>My question is about the behavior of LZ77 if we iterate it. My experiments suggest that reapplication of LZ77 to the input will yield no further patterns that were not found the first time. </p>\n\n<p>By reapplication I mean, where in the first instance we treat the factors of the string as the sequence of unit symbols \'a\' and \'b\', in the second application the factors are the LZ factors. I was hoping to discover (over larger various texts, like the Complete Sonnets of Shakespeare) increasing gains, and possibly, "multilevel" patterns found by LZ over the sequence of factors of the previous iterate. But none of this occurred. The sequence of factors after the second iteration is exactly the same as the first.</p>\n\n<p>So where is the bug in my thinking? Is there a simple proof of this given the definition of an LZ factor being the longest prefix from the current position occurring in the concatenation of the preceding LZ factors?</p>\n', 'ViewCount': '111', 'Title': 'Behavior of iterative application of LZ77', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-15T07:17:29.540', 'LastEditDate': '2013-04-15T07:17:29.540', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '5', 'OwnerDisplayName': 'Cris Stringfellow', 'PostTypeId': '1', 'OwnerUserId': '4602', 'Tags': '<strings><data-compression><lempel-ziv>', 'CreationDate': '2013-01-30T14:39:17.333', 'Id': '9311'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have the following exam question for a multimedia exam in college and I have absolutely no idea where to start.</p>\n\n<p><img src="http://i.stack.imgur.com/1xQmy.png" alt="lzwquestion"></p>\n\n<p>I know how the decoder algorithm should work but I have no idea how to do it on paper, to a binary string.</p>\n\n<p>If anybody could point me in the right direction I would really appreciate it!!</p>\n\n<p><strong>Edit</strong>\nHere is a picture of my understanding of the algorithm so far just using symbols.</p>\n\n<p><img src="http://i.stack.imgur.com/j5s2Y.jpg" alt="Lzw Encode / Decode"></p>\n', 'ViewCount': '183', 'Title': 'Decoding a binary message with LZW dictionary', 'LastEditorUserId': '8082', 'LastActivityDate': '2013-11-08T07:40:14.573', 'LastEditDate': '2013-05-07T18:16:15.847', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '8082', 'Tags': '<encoding-scheme><lempel-ziv>', 'CreationDate': '2013-05-07T17:05:53.507', 'Id': '11857'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to understand how <a href="http://en.wikipedia.org/wiki/Lempel-Ziv-Welch" rel="nofollow">LZW</a> decodes a string.</p>\n\n<p>For example suppose that we have a dictionary where:</p>\n\n<ul>\n<li>a=0</li>\n<li>b=1</li>\n</ul>\n\n<p>and we have to encode the string "<strong>aabbabaabb</strong>", so the output of the encoding process (if I have not made mistakes) produces the string "<strong>0011324</strong>" and the dictionary became(using a tree representation):</p>\n\n<p><img src="http://f.cl.ly/items/2j2F0G0t1P120j3A2X0Z/tree.jpg" width="400" height="300"></p>\n\n<p>The decoder will just know "0011324" and the starting dictionary where there are just a=0 and b=1.</p>\n\n<blockquote>\n  <p>How does it work the decoding process with just these 2 informations?</p>\n</blockquote>\n', 'ViewCount': '95', 'Title': 'LZW decoding process', 'LastActivityDate': '2013-11-22T14:00:53.203', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4765', 'Tags': '<information-theory><lempel-ziv>', 'CreationDate': '2013-11-22T12:07:21.620', 'Id': '18257'}