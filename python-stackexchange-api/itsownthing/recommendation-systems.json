{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I once had a veteran in my course that created an algorithm that would suggest cooking recipes. At first, all sort of crazy recipes would come out. Then, she would train the cooking algorithm with real recipes and eventually it would suggest very good ones. </p>\n\n<p>I believe she used something related to Bayes Theorem or Clustering, but she is long gone and so is the algorithm. I have searched the internet but looking for cooking recipes will yield any sort of results but not the one I am looking for. So, my question is:</p>\n\n<blockquote>\n  <p>What techniques can be used to devise an algorithm that (randomly) suggests feasible recipes (without using a database of fixed recipes)?</p>\n</blockquote>\n\n<p>Why would I bother looking for a cooking algorithm? Well, it was a very good example of a real world application of the underlying concepts, and such algorithm could be useful in different settings that are closer to the real world.</p>\n', 'ViewCount': '769', 'Title': 'How to devise an algorithm that suggests feasible cooking recipes?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-03T16:52:16.993', 'LastEditDate': '2012-04-22T16:09:20.370', 'AnswerCount': '4', 'CommentCount': '24', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '983', 'Tags': '<machine-learning><artificial-intelligence><modelling><recommendation-systems>', 'CreationDate': '2012-04-08T00:17:14.350', 'FavoriteCount': '1', 'Id': '1124'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm building an application which should suggest products for the users. I want to base my recommendation on different attributes, like location, weather, date, etc. Each of these attributes can have multiple values so the feature space I need to consider is huge.\nI was thinking about two approaches to solve this problem.\nFirstly, using decision trees, so I create the tables with different decisions, e.g. </p>\n\n<pre><code>sunny; hot; France; summer; choose xyz\novercast, warm, Italy, spring, choose abc\n</code></pre>\n\n<p>Based on this data I could learn the decision tree and use it in my application.</p>\n\n<p>Secondly, I could tag every recommendation item with the possible attributes to which it applies. For example:</p>\n\n<pre><code>xyz: {sunny} {hot} {France, Spain} {spring, summer}\nabc: {overcast, raining} {cold, warm} {Italy} {spring, summer}\n</code></pre>\n\n<p>Then, based on the actual values of the attributes from the user I could infer an item to recommend.</p>\n\n<p>The second option looks better for me as it requires from me only describing the recommendation items while the first approach requires describing a lot of situations which might happen so that the decision tree is of high quality. Unfortunately, I don't know any algorithm for the second solution.</p>\n\n<p>Which approach would you use? If the second one, than what are the possible algorithms to have a look at?</p>\n", 'ViewCount': '173', 'Title': 'Recommendation algorithms based on a set of attributes', 'LastEditorUserId': '924', 'LastActivityDate': '2012-05-11T19:04:22.813', 'LastEditDate': '2012-05-11T19:04:22.813', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '4', 'OwnerDisplayName': 'Jakub', 'PostTypeId': '1', 'Tags': '<artificial-intelligence><recommendation-systems>', 'CreationDate': '2012-05-06T13:07:05.437', 'FavoriteCount': '1', 'Id': '1773'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I need datasets that has at 4 data elements (user, tag, item, date) to test my recommender system. The user and item can be provided as Integer IDs. The items can be books, bookmarks, news, products, movies, music, and anything. \nIs there any dataset meet my demands available? Thanks.</p>\n', 'ViewCount': '22', 'Title': 'Are there any tagging dataset for evaluating a recommender system? e.g. userId--tag--item--date', 'LastActivityDate': '2012-09-15T07:00:54.147', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2837', 'Tags': '<data-sets><recommendation-systems>', 'CreationDate': '2012-09-15T07:00:54.147', 'Id': '3558'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have developed an algorithm which recommends geographical locations to users based on popular trends and their own interests. The dataset is created by my organization. So the user selects a few categories and based on his interest and rating by other people he is presented with recommended places for him. </p>\n\n<p>How do you evaluate or use metrics for such system given that ground truth doesn't makes sense in this case ? </p>\n\n<p><strong>EDIT:</strong> \nI meant that how to evaluate the accuracy or quality of results in such case especially for published work.</p>\n\n<p><strong>EDIT 2</strong> (as per the request for details in the comments)</p>\n\n<p>Details of the system</p>\n\n<ol>\n<li><p>The user indicates his preferences from a predefined set of tags (cultural, mountains etc)</p></li>\n<li><p>Users can also rate different places on a scale of 1-5. </p></li>\n<li><p>Users profile (geographical location, places already visited etc are already stored in his profile)</p></li>\n<li><p>Based on user's choice and other heuristics(rating etc), a set of places is recommended by the system.</p></li>\n</ol>\n", 'ViewCount': '62', 'Title': 'How to evaluate recommendation engine without ground truth?', 'LastEditorUserId': '2741', 'LastActivityDate': '2014-01-15T16:04:53.503', 'LastEditDate': '2014-01-15T08:46:39.027', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2741', 'Tags': '<machine-learning><recommendation-systems>', 'CreationDate': '2014-01-13T17:51:43.163', 'Id': '19699'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>As we all know, Matrix Factorization is an effective method to do rating prediction jobs in recommender systems. Thanks to the work of Yahuda Koren. My question is why MF can do this job? What's the physical meaning behind it?</p>\n", 'ViewCount': '53', 'Title': 'Physical Meaning Behind Matrix Factorization', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-14T22:24:45.737', 'LastEditDate': '2014-03-14T09:37:20.077', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15674', 'Tags': '<machine-learning><data-mining><recommendation-systems>', 'CreationDate': '2014-03-14T04:51:40.857', 'FavoriteCount': '1', 'Id': '22609'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have started to read about user-based and item-based collaborative filtering techniques. I understand how a rating of the target user for a particular item is predicted. How top-N recommendation list is created in user-based/item-based collaborative filtering??</p>\n', 'ViewCount': '14', 'Title': 'top-N recommendation in collaborative filtering', 'LastActivityDate': '2014-04-08T14:35:44.057', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15446', 'Tags': '<recommendation-systems>', 'CreationDate': '2014-04-08T14:35:44.057', 'Id': '23553'}},