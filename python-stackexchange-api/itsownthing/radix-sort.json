{'ViewCount': '1018', 'Title': 'Practical Applications of Radix Sort', 'LastEditDate': '2013-05-23T22:58:26.053', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '6728', 'FavoriteCount': '1', 'Body': '<p>Radix sort is theoretically very fast when you know that the keys are in a certain limited range, say $n$ values in the range $[0\\dots n^k -1]$ for example.  If $k&lt;\\lg n$ you just convert the values to base $n$ which takes $\\Theta(n)$ time, do a base $n$ radix sort and then convert back to your original base for an overall $\\Theta(nk)$ algorithm. </p>\n\n<p>However, I\'ve read that <a href="http://www.lamarca.org/anthony/caches.html">in practice radix sort is typically much slower than doing for example a randomized quicksort</a>:</p>\n\n<blockquote>\n  <p>For large arrays, radix sort has the lowest instruction count, but\n  because of its relatively poor cache performance, its overall\n  performance is worse than the memory optimized versions of mergesort\n  and quicksort.</p>\n</blockquote>\n\n<p>Is radix sort just a nice theoretical algorithm, or does it have common practical uses?</p>\n', 'Tags': '<algorithms><sorting><applied-theory><radix-sort>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-15T00:11:26.887', 'CommentCount': '0', 'AcceptedAnswerId': '12228', 'CreationDate': '2013-05-23T07:29:45.403', 'Id': '12223''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I've been stuck with this problem for 2 weeks. Any idea of how to aproach it?.</p>\n\n<blockquote>\n  <p>Let $L$ be a list of $n$ different integer numbers, assume that the elements of $L$ are in the range $[1,750]$. Design a linear ordering algorithm to order the elements of $L$.</p>\n</blockquote>\n\n<p>I already tried with insertion sort. But I'm not sure if my approach is right:</p>\n\n<ul>\n<li>Construct an array of bits. Initialize them to zero.</li>\n<li>Read the input, for each value you see set the respective bit in the array to 1.</li>\n<li>Scan the array, for each bit set, output the respective value.</li>\n</ul>\n\n<p>Complexity: $O(2n) = O(n)$</p>\n\n<p>I also wanted to use radix sort but I can't understand how to apply it, any idea?</p>\n", 'ViewCount': '146', 'Title': 'Sorting in O(n) time in a finite domain', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-23T10:11:12.493', 'LastEditDate': '2013-10-23T10:11:12.493', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10610', 'Tags': '<algorithms><algorithm-analysis><time-complexity><sorting><radix-sort>', 'CreationDate': '2013-10-23T06:11:54.673', 'Id': '16350''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}