343_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Solve this problem: "build an infinite binary oscilator"</p>\n\n<p>With a Turing Machine we can solve it</p>\n\n<pre><code>a=False\nWhile True:\n   a=not a\n   print a,\n</code></pre>\n\n<p>then output will be</p>\n\n<pre><code>True False True False True False ...\n</code></pre>\n\n<p>(for ever)</p>\n\n<p>I think an oracle can\'t do it, because its definition, it could solve in "one operation", but here there\'s not halting as a request of the problem statement. Is it true?</p>\n\n<p><strong>EDIT</strong>:  Oracle definition from wikipedia</p>\n\n<p>".. an\xa0<em>oracle machine</em>\xa0is an\xa0abstract machine\xa0used to study\xa0decision problems. It can be visualized as a\xa0Turing machine with a black box, called an\xa0<em>oracle</em>, which is able to decide certain decision problems in a single operation. The problem can be of any\xa0complexity class. Even\xa0undecidable problems, like the\xa0halting problem, can be used."</p>\n\n<p>So what if that TM ask its black box oracle to create an infinite binary oscilation?</p>\n\n<pre><code>   1- oracle black box can\'t do infinite loops\n   2-TM can\'t ask that problem to oracle \n   3- Does it return a string with a source code as answer? weird\n   4-or other options...\n</code></pre>\n', 'ViewCount': '140', 'Title': 'Is oracle computer capable of doing infinite loops?', 'LastEditorUserId': '1396', 'LastActivityDate': '2013-06-27T08:30:35.333', 'LastEditDate': '2013-06-26T22:30:23.360', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '12920', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1396', 'Tags': '<turing-machines><halting-problem><oracle-machines>', 'CreationDate': '2013-06-26T18:33:18.140', 'Id': '12917'},343_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>does $BPP\\subseteq P^{NP}$ ? it seems reasonable but I don't know if there is a proof of this!could any one post a proof or any material that discusses the statement or something that look like this .  </p>\n", 'ViewCount': '54', 'Title': 'BPP upper bound', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-17T05:48:37.233', 'LastEditDate': '2013-07-17T05:48:37.233', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '13301', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8570', 'Tags': '<complexity-theory><complexity-classes><randomized-algorithms><oracle-machines>', 'CreationDate': '2013-07-16T12:50:19.600', 'Id': '13300'},343_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In these notes about <a href="http://www.scottaaronson.com/democritus/lec10.html" rel="nofollow">quantum computation</a> by Scott Aronson, he explains that the computation classes $\\mathsf{BPP}$ is contained in $\\mathsf{BQP}$, but that they are not equal, and</p>\n\n<blockquote>\n  <p>So, the bottom line is that we get a problem -- Simon\'s problem -- that quantum computers can provably solve exponentially faster than classical computers. Admittedly, this problem is rather contrived, relying as it does on a mythical "black box" for computing a function f with a certain global symmetry. Because of its black-box formulation, Simon\'s problem certainly doesn\'t prove that $\\mathsf{BPP} \\neq \\mathsf{BQP}$. What it does prove that there exists an oracle relative to which $\\mathsf{BPP} \\neq \\mathsf{BQP}$. This is what I meant by formal evidence that quantum computers are more powerful than classical ones.</p>\n</blockquote>\n\n<p>What does he mean by an <em>oracle</em> separation?</p>\n\n<p>My understanding of an oracle for a Turing machine is one that solves the halting problem. Surely that can\'t be the case here?</p>\n', 'ViewCount': '234', 'Title': 'What is meant by an oracle separation between classes $\\mathsf{BPP}$ and $\\mathsf{BQP}$?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-07-31T16:02:03.220', 'LastEditDate': '2013-07-31T16:02:03.220', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '4', 'OwnerDisplayName': 'Mozibur Ullah', 'PostTypeId': '1', 'Tags': '<complexity-theory><quantum-computing><oracle-machines>', 'CreationDate': '2013-07-30T23:54:56.503', 'FavoriteCount': '1', 'Id': '13528'},343_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Are there classes of problems that cannot be solved by an oracle machine? If so, are there specific problem examples of that class of problems?</p>\n\n<p>Even the Omega number, at least the first N digits, could be computed as the Oracle could just return TRUE or FALSE for each {0,1}-digits...</p>\n', 'ViewCount': '125', 'Title': 'Problems unsolvable by an oracle machine?', 'LastActivityDate': '2013-08-05T04:57:29.613', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9508', 'Tags': '<complexity-theory><oracle-machines>', 'CreationDate': '2013-08-04T13:47:08.617', 'FavoriteCount': '0', 'Id': '13596'},343_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>One possible motivation for studying computational complexity classes is to understand the power of different kinds of computational resources (randomness, non-determinism, quantum effects, etc.).  If we look at it from this perspective, then it seems like we can obtain one plausible axiom for any attempt at characterizing which computations are feasible in some model:</p>\n\n<ul>\n<li>Any feasible computation can always invoke another feasible computation as a subroutine.  In other words, suppose the programs $P,Q$ are considered feasible to execute.  Then if we construct a new program by hooking $P$ and $Q$ up, so that $P$ makes subroutine calls to $Q$, then this new program is also feasible.</li>\n</ul>\n\n<p>Translated into the language of complexity classes, this axiom amounts to the following requirement:</p>\n\n<ul>\n<li>If $C$ is a complexity class intended to capture which computations are feasible in some model, then we must have $C^C = C$.</li>\n</ul>\n\n<p>(Here $C^C$ represents computations in $C$ that can invoke an oracle from $C$; that's an oracle complexity class.)  So, let's call a complexity class $C$ <em>plausible</em> if it satisfies $C^C=C$.</p>\n\n<p>My question: <em>What complexity classes do we know of, that are plausible (by this definition of plausible)?</em></p>\n\n<p>For instance, $P$ is plausible, since $P^P=P$.  Do we have $BPP^{BPP} = BPP$?  What about $BQP^{BQP} = BQP$?  What are some other complexity classes that meet this criterion?</p>\n\n<p>I suspect that $NP^{NP} \\ne NP$ (or at least, that would be our best guess, even if we cannot prove it).  Is there a complexity class that captures non-deterministic computation and that is plausible, under this definition?  If we let $C$ denote the smallest complexity class such that $NP \\subseteq C$ and $C^C \\subseteq C$, is there any clean characterization of this $C$?</p>\n", 'ViewCount': '95', 'Title': 'Complexity classes where $C^C = C$', 'LastActivityDate': '2013-08-24T00:30:01.770', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<complexity-theory><oracle-machines>', 'CreationDate': '2013-08-22T20:52:25.900', 'Id': '13876'},343_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Quantified Boolean formulae are the prime examples of problems that are hard for the polynomial hierarchy, i.e., for the $\\Pi$ and $\\Sigma$ versions of it. However, there is also the $\\Delta$ version, defined as $\\Delta_{i+1}^{\\rm P} := {\\rm P}^{\\Sigma_i^{\\rm P}}$. In particular, $\\Delta_2^{\\rm P} = {\\rm P}^{\\rm NP}$.</p>\n\n<p>What are typical hard problems for this part of the hierarchy?</p>\n\n<p>I failed to search the Web for this; especially, you cannot use Google to find much about "P^NP".</p>\n', 'ViewCount': '138', 'Title': 'Which problems are hard for P^NP?', 'LastActivityDate': '2013-09-10T22:07:50.093', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '14258', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '10063', 'Tags': '<complexity-theory><oracle-machines>', 'CreationDate': '2013-09-10T16:56:25.643', 'Id': '14251'},343_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was reading a paper of Buhrman and Homer "Superpolynomial Circuits, Almost Sparse Oracles and the Exponential Hierarchy" (<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.2228&amp;rep=rep1&amp;type=pdf" rel="nofollow">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.2228&amp;rep=rep1&amp;type=pdf</a>).</p>\n\n<p>On the bottom of page 2 they remark that the results of Kannan imply that $NEXPTIME^{NP}$ does not have polynomial size circuits. I know that in the exponential time hierarchy, $NEXPTIME^{NP}$ is just $\\Sigma_2EXP$, and I also know that Kannan\'s result is that $\\forall c\\mbox{   }\\exists L\\in\\Sigma_2P$ such that $L \\not\\in Size(n^c)$. Of course, Kannan\'s theorem is NOT saying $\\Sigma_2P \\not\\subset P/poly$ (in order for that to be the case we would need to show that $\\exists L\\in\\Sigma_2P$ such that $\\forall c$, $L \\not\\in Size(n^c)$. However, I don\'t see how Kannan\'s result implies that $NEXPTIME^{NP} \\not\\subset P/poly$?</p>\n', 'ViewCount': '7', 'ClosedDate': '2014-04-18T15:13:43.597', 'Title': "Question about Kannan's theorem", 'LastActivityDate': '2014-04-18T14:10:27.167', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16883', 'Tags': '<complexity-theory><circuits><oracle-machines>', 'CreationDate': '2014-04-18T14:10:27.167', 'Id': '23914'},343_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>My textbook says: "The Boolean hierarchy is contained in the class $P^{NP}\\subseteq\\Sigma^P_2\\cap\\Pi^P_2$." However, it provides neither a proof nor a proof sketch nor some hint. How can I convince myself that the claim is true?</p>\n', 'ViewCount': '55', 'Title': 'Why is the Boolean hierarchy contained in the class $P^{NP}$?', 'LastActivityDate': '2014-04-21T14:15:30.400', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23987', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14654', 'Tags': '<complexity-theory><complexity-classes><oracle-machines>', 'CreationDate': '2014-04-20T19:06:08.477', 'Id': '23955'}