{'ViewCount': '544', 'Title': 'Implementing the GSAT algorithm - How to select which literal to flip?', 'LastEditDate': '2012-04-19T05:46:33.270', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '174', 'FavoriteCount': '1', 'Body': "<p>The GSAT algorithm is, for the most part, straight forward: You get a formula in conjunctive normal form and flip the literals of the clauses until you find a solution that satisfies the formula or you reach the max_tries/max_flips limit and find no solution.</p>\n\n<p>I'm implementing the following algorithm:</p>\n\n<pre><code>procedure GSAT(A,Max_Tries,Max_Flips)\n  A: is a CNF formula\n  for i:=1 to Max_Tries do\n    S &lt;- instantiation of variables\n    for j:=1 to Max_Iter do\n      if A satisfiable by S then\n        return S\n      endif\n      V &lt;- the variable whose flip yield the most important raise in the number of satisfied clauses;\n      S &lt;- S with V flipped;\n    endfor\n  endfor\n  return the best instantiation found\nend GSAT\n</code></pre>\n\n<p>I'm having trouble interpreting the following line:  </p>\n\n<pre><code>V &lt;- the variable whose flip yield the most important raise in the number of satisfied clauses;\n</code></pre>\n\n<p>Isn't the maximum number of satisfied clauses what we're looking for? It seems to me that we're trying to use the solution or approximations to it to find the solution. </p>\n\n<p>I've thought of some ways to do this but It'd be good to hear other points of view (The assumption is that once the variable is flipped once it is selected.):</p>\n\n<ul>\n<li>Generate a state space with all possible flips and search the space for a literal that results in the best approximation to the goal state.</li>\n<li>Randomly select the variable that I will flip starting with the literals that are more common.</li>\n<li>Pick a random literal.</li>\n</ul>\n", 'Tags': '<algorithms><satisfiability><3-sat>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-19T05:46:33.270', 'CommentCount': '0', 'AcceptedAnswerId': '220', 'CreationDate': '2012-03-11T15:48:43.030', 'Id': '219'}{'ViewCount': '982', 'Title': 'How to prove that a constrained version of 3SAT in which no literal can occur more than once, is solvable in polynomial time?', 'LastEditDate': '2012-05-15T16:10:48.783', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '476', 'FavoriteCount': '4', 'Body': '<p>I\'m trying to work out an assignment (taken from the book <a href="http://www.cs.berkeley.edu/~vazirani/algorithms.html">Algorithms - by S. Dasgupta, C.H. Papadimitriou, and U.V. Vazirani</a>, Chap 8, problem 8.6a), and I\'m paraphrasing what it states:</p>\n\n<blockquote>\n  <p>Given that 3SAT remains NP-complete even when restricted to formulas in which\n  each literal appears at most twice, show that if each literal appears at most once, then the problem is solvable in polynomial time.</p>\n</blockquote>\n\n<p>I attempted to solve this by separating the clauses into multiple groups: </p>\n\n<ol>\n<li>Clauses which did not have any variable in common with the rest of the clauses</li>\n<li>Clauses which had only 1 variable in common</li>\n<li>Clauses which had 2 variables in common</li>\n<li>Clauses which had all 3 variables in common</li>\n</ol>\n\n<p>My reasoning was attempted along the lines that the # of such groups is finite (due to the imposed restriction of no literal being present more than once), and we could try to satisfy the most restricted group first (group 4) and then substitute the result in the lesser restricted groups (3, 2 and then 1), but I realized that this wasn\'t quite getting me anywhere, as this doesn\'t differ much from the case for the constrained version of 3SAT in which each literal can appear at most twice, which has been proven to be NP-complete. </p>\n\n<p>I tried searching online for any hints/solutions, but all I could get was <a href="http://www.cs.rpi.edu/~moorthy/Courses/CSCI2300/lab2011-9.html">this link</a>, in which the stated hint didn\'t make sufficient sense to me, which I\'m reproducing verbatim here:</p>\n\n<blockquote>\n  <p>Hint: Since each literal appears at most once, convert this problem to 2SAT problem - hence polynomial time, if a literal $x_i$ appears in clause $C_j$ and complement of $x_i$ (i.e., $\\overline{x_i}$) in clause $C_k$, construct a new clause clause $C_j \\lor \\overline{C_k}$.</p>\n</blockquote>\n\n<p>Both $C_j$ and $C_k$ have three literals each - I didn\'t get how I should go about converting it into 2SAT by doing $C_j \\lor \\overline{C_k}$ (or $\\overline{C_j \\lor C_k}$ if I read it incorrectly).</p>\n\n<p>Any help in either decrypting the hint, or providing a path I can explore would be really appreciated.</p>\n', 'Tags': '<complexity-theory><satisfiability><3-sat>', 'LastEditorUserId': '476', 'LastActivityDate': '2013-07-15T03:36:16.567', 'CommentCount': '0', 'AcceptedAnswerId': '1858', 'CreationDate': '2012-05-15T15:26:22.270', 'Id': '1852'}{'Body': '<p>If I were to let the variables be the propositions and, constraint be all clauses being satisfied, which technique would be more effective in solving 3-SAT? <a href="http://en.wikipedia.org/wiki/Look-ahead_%28backtracking%29#Look_ahead_techniques" rel="nofollow">Forward checking</a> or <a href="http://en.wikipedia.org/wiki/Arc_consistency#Arc_consistency" rel="nofollow">arc consistency</a>? From what I gathered forward-checking is $O(n)$, while Arc consistency is about $O(8c)$ where c is the number of constraints (According to this <a href="http://www.cs.ubc.ca/~kevinlb/teaching/cs322%20-%202006-7/Lectures/lect11.pdf" rel="nofollow">page</a>). So perhaps forward -checking is faster somehow? How should I determine which to use?</p>\n', 'ViewCount': '591', 'Title': 'Forward checking vs arc consistency on 3-SAT', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-28T18:01:07.223', 'LastEditDate': '2012-05-28T18:01:07.223', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1556', 'Tags': '<algorithms><satisfiability><heuristics><3-sat><sat-solvers>', 'CreationDate': '2012-05-28T07:03:31.467', 'Id': '2120'}{'Body': '<p>What\'s the definition of Kolmogorov complexity for a decision problem? For example, how to define the length of the shortest program that solves the 3SAT problem? Is it the "smallest" Turing machine that recognizes the 3SAT langauge?</p>\n', 'ViewCount': '76', 'Title': 'Kolmogorov complexity of a decision problem', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-18T01:33:05.280', 'LastEditDate': '2012-07-18T01:33:05.280', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '2779', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1986', 'Tags': '<computability><terminology><decision-problem><kolmogorov-complexity><3-sat>', 'CreationDate': '2012-07-16T18:48:03.180', 'Id': '2770'}{'Body': '<p>I am self studying discrete math and I am going through MIT Mathematics for CS lecture notes but they do not have solutions available. I got stuck at <a href="http://www.scribd.com/doc/101941032/3cf" rel="nofollow">Problem 3.14</a> (pages 64-65 of <a href="http://courses.csail.mit.edu/6.042/spring12/part1.pdf" rel="nofollow">this document</a>). The problem is about the construction, given an arbitrary propositional formula $F$, of a proposition $C(F)$ such that:</p>\n\n<ul>\n<li>$C(F)$ is in 3-conjunctive form (3CF), i.e. it is a conjunction of disjunctions of at most literals (a literal is a variable or a negation of a variable);</li>\n<li>$C(F)$ has at most 24 times as many occurrences of variables as $F$;</li>\n<li>$C(F)$ is satisfiable iff $F$ is.</li>\n</ul>\n\n<p>The idea is to introduce a new variable for each operator that occurs in $F$. For example, given\n$$ F_1 = ((P \\oplus Q) \\oplus R) \\vee (\\neg P \\wedge S)) $$\nassign $X_1, X_2, O, A$ to the 4 operators in $F_1$, and define four <em>constraining formulas</em>:\n$$ \\begin{align*}\n C_1^1 &amp;= X_1 \\Leftrightarrow (P \\oplus Q) \\\\\n C_1^2 &amp;= X_2 \\Leftrightarrow (X_1 \\oplus R) \\\\\n C_1^3 &amp;= A \\Leftrightarrow (\\neg P \\wedge S) \\\\\n C_1^4 &amp;= O \\Leftrightarrow (X_2 \\oplus A) \\\\\n\\end{align*} $$\nand $C_1 = C_1^1 \\wedge C_1^2 \\wedge C_1^3 \\wedge C_1^4 \\wedge O$.</p>\n\n<p>The questions are:</p>\n\n<ol>\n<li>Why is $C_1$ satisfiable iff $F_1$ is satisfiable?</li>\n<li>Why is each constraining formula equivalent to a 3CF formula with at most 24 occurrences of variables?</li>\n<li>Generalize from the example to construct $C(F)$ for an arbitrary formula $F$.</li>\n</ol>\n\n<p>For question 1, I don\'t see why $X_1$ is satisfiable.</p>\n\n<p>I think question 2 is wrong, beacuse you can form a 3CF formula with at most 24 occurrences of variables, only if you have a 3-conjunctive <strong>normal</strong> form but here the author only says 3 conjunctive form. </p>\n\n<p>(For 3CNF, 8 different triple terms can be formed using 3 variables with a total of 24 variables, For 3CF, 26 different single,double and triple terms can be formed with a total of ? variables.)</p>\n\n<p>No idea about question 3.</p>\n', 'ViewCount': '201', 'Title': '3CF 3-conjunctive form satisfiability', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-05T12:04:52.527', 'LastEditDate': '2012-08-04T15:49:17.937', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2348', 'Tags': '<logic><satisfiability><3-sat><normal-forms>', 'CreationDate': '2012-08-03T15:14:38.117', 'Id': '3021'}{'ViewCount': '634', 'Title': 'Planarity conditions for Planar 1-in-3 SAT', 'LastEditDate': '2012-10-01T18:24:10.170', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '140', 'FavoriteCount': '2', 'Body': '<p><strong>Planar 3SAT</strong> is NP-complete. A planar 3SAT instance is a 3SAT instance for which the graph built using the following rules is planar:</p>\n\n<ol>\n<li>add a vertex for every $x_i$ and $\\bar{x_i}$</li>\n<li>add a vertex for every clause $C_j$</li>\n<li>add an edge for every $(x_i,\\bar{x_i})$ pair</li>\n<li>add an edge from vertex $x_i$ (or $\\bar{x_i}$) to each vertex that represent a clause that contains it</li>\n<li>add edges between two consecutive variables  $(x_1,x_2),(x_2,x_3),...,(x_n,x_1)$</li>\n</ol>\n\n<p>In particular, rule 5 builds a "backbone" that splits the clauses in two distinct regions.</p>\n\n<p><strong><a href="http://en.wikipedia.org/wiki/One-in-three_3SAT">Planar 1-in-3 SAT</a></strong> is NP-complete, too.</p>\n\n<blockquote>\nBut for planar 1-in-3 SAT are the planarity conditions defined in the same way as in Planar 3SAT ? In particular, can we assume that there is a backbone that links the variables $(x_i,x_{i+1})$  ?\n</blockquote>\n', 'Tags': '<np-complete><reductions><satisfiability><3-sat>', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-10-01T18:24:10.170', 'CommentCount': '0', 'AcceptedAnswerId': '4832', 'CreationDate': '2012-10-01T10:44:10.560', 'Id': '4826'}{'Body': '<p>If we suppose that we\'d like to convert an instance of 3-SAT to an instance of 4-SAT, by how much can we reduce the amount of variables?</p>\n\n<p><strong>CONVERSION METHODS FOR PRODUCTS OF SUMS</strong></p>\n\n<p>If we are given a 3-SAT clause $(A \\lor B \\lor C)$, we can readily convert this to 4-SAT by rewriting it as $(A \\lor B \\lor C \\lor x) \\land (A \\lor B \\lor C \\lor \\overline{x})$, where $x$ is a free variable.  In other words, $x$ can be any one of the existing variables, or a completely new variable.  This entails that we can gaurantee that 3-SAT can be converted to 4-SAT without adding any new variables.</p>\n\n<p>Additionally, we can convert 3-SAT into 4-SAT and eliminate one variable, given a special set of clauses.  The 3-SAT clauses</p>\n\n<p>$$(x \\lor B \\lor D) \\land (\\overline{A} \\lor \\overline{C} \\lor x) \\land (A \\lor C \\lor \\overline{x}) \\land (A \\lor \\overline{C} \\lor x) \\land (\\overline{A} \\lor C \\lor x)$$</p>\n\n<p>readily "reduce" to $(A \\lor B \\lor C \\lor D)$.  This eliminates the free variable $x$, assuming it only appears in these clauses, and also greatly reduces the number of clauses.  The significance of this is that we may be able to eliminate some variables using this technique.</p>\n\n<p><strong>THE MAIN QUESTION</strong></p>\n\n<p>What are some other techniques for reducing the number of variables when converting from 3-SAT to 4-SAT?  </p>\n\n<p>Note that converting from product-of-sums to sum-of-products form may also be useful.</p>\n', 'ViewCount': '590', 'Title': 'How can we reduce variables when converting from 3-SAT to 4-SAT?', 'LastActivityDate': '2012-10-22T19:18:42.620', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1667', 'Tags': '<satisfiability><3-sat>', 'CreationDate': '2012-10-22T17:54:55.177', 'Id': '6235'}{'Body': "<p>I have a question, i was trying to reduce 3-SAT to a particular graph problem and i'm not quite sure about a thing i used in the reduction.\nIn fact the reduction build a bipartite graph, the edge $(x_1,c_1)$ exist if the variable $x_1$ is in the clause number 1, the costs on that edge are dependent on the truthfulness of the variable $x_1$, cost 1 if $x_1$ is true and 0 elsewhere. My question :is it permitted in a reduction or should i have the entire graph instance independent from values taken by the variables ?</p>\n\n<p>Thank you all!</p>\n", 'ViewCount': '110', 'Title': 'Reduction from 3-SAT to a graphe problem', 'LastEditorUserId': '7934', 'LastActivityDate': '2013-04-28T00:16:23.053', 'LastEditDate': '2013-04-28T00:16:23.053', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '11544', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7880', 'Tags': '<complexity-theory><graphs><np-complete><reductions><3-sat>', 'CreationDate': '2013-04-24T22:56:55.940', 'Id': '11541'}{'Body': "<p>I read somewhere that 3SAT can be used to solve Integer Factorization.</p>\n\n<p>If that is true, could someone teach me a simple example of generating the 3SAT by using a small number? Let's say you are given the number 6, then the factors are 2 and 3.</p>\n", 'ViewCount': '206', 'Title': 'Generating 3SAT circuit for Integer factorization example', 'LastActivityDate': '2013-05-02T11:11:58.450', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11727', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8006', 'Tags': '<np-hard><factoring><3-sat>', 'CreationDate': '2013-05-02T06:11:30.077', 'FavoriteCount': '3', 'Id': '11718'}{'Body': "<p>Assuming $P \\neq NP$ Is the following langauge in $P$ or $NPC$:<br>\n$L=\\{\\langle\\phi\\rangle\\mid\\phi$ is a 3CNF formula with an assignment satisfying at least half of the clauses$\\}$</p>\n\n<p>The first thing I tried to do is to find a 3CNF formula $\\phi$ such that  $\\phi \\notin L$ and I haven't managed to do so. Is it possible that simply all 3CNF formulas have such an assignment (and so the problem is in $P$) or am I missing something ?</p>\n", 'ViewCount': '55', 'Title': 'Is the following langauge in $P$ or $NPC$', 'LastActivityDate': '2013-06-14T23:01:55.957', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12680', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<complexity-theory><time-complexity><np-complete><satisfiability><3-sat>', 'CreationDate': '2013-06-14T22:05:23.980', 'Id': '12678'}{'Body': '<p>Its is known that <code>3SAT (all clauses have size 3)</code> is NP-complete. </p>\n\n<p>But how about <code>1SAT (all clauses have size 1)</code>, is it also NP-complete? I tried searching for it a lot, but couldnt find any proofs or explanations for the same.</p>\n\n<p>Like 3SAT has 3 clauses, what if I consider just one clause?</p>\n\n<p>Thanks for the help in advance.</p>\n', 'ViewCount': '156', 'ClosedDate': '2013-11-08T23:03:52.603', 'Title': '3SAT is NP-complete, however is 1SAT NP-complete?', 'LastActivityDate': '2013-11-03T00:24:29.170', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '-3', 'PostTypeId': '1', 'OwnerUserId': '11108', 'Tags': '<algorithms><3-sat>', 'CreationDate': '2013-10-31T20:32:00.713', 'Id': '16606'}{'Body': '<p>I am trying to reduce 3-sat to 2-sat. I found an assignment that make 3-ast satisfy, so it is satisfy, and same assignment is satisfy my 2-sat, so my reduction is valid.</p>\n\n<p>How ever there is more than one assignment that satisfy my 3-sat. And it happens to be that before I found an assignment that satisfy both of my formulas I found assignment that satisfy 3-sat but not 2-sat.</p>\n\n<p>Does it make my reduction invalid if I can find assignment that makes 3-sat satisfied and 2-sat not even if there is an assignment that satisfy them both? Or in other words does 3-sat have to be equal-satisfiable to 2-sat to make this reduction valid?</p>\n\n<p>Also consider this scenario, where there are exponential number of assignments that satisfy only one side, and there is just one assignment that satisfy both of the sides.</p>\n', 'ViewCount': '78', 'Title': 'Reduction validity', 'LastActivityDate': '2013-12-07T01:58:48.280', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '-4', 'PostTypeId': '1', 'OwnerUserId': '10572', 'Tags': '<satisfiability><3-sat>', 'CreationDate': '2013-12-06T11:05:19.020', 'Id': '18677'}{'Body': "<p>SSUM is the same as the Subset Sum Problem with the only additional requirement is all the numbers must be unique in the subset.  </p>\n\n<p>To prove it's NP complete, the verifier is quite easy to construct being the same as one for the Subset Sum except you add the additional requirement of making sure all numbers are unique. </p>\n\n<p>With the reduction, I assume you can use the same reduction as before from 3SAT, I'm just figuring out a way when evaluating that reduction, to determine if two or more numbers are the same. I'm using the 3SAT reduction in Sipser with the table of columns and rows. If one needs any more information I would be happy to provide. </p>\n", 'ViewCount': '84', 'Title': 'Proving SSum is NP-Complete?', 'LastActivityDate': '2013-12-11T21:49:28.287', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<np-complete><reductions><3-sat>', 'CreationDate': '2013-12-11T20:02:45.520', 'Id': '18891'}{'Body': "<p>I'm trying to wrap my head around an NP-completeness proof which seem to revolve around SAT/3CNF-SAT.</p>\n\n<p>Maybe it's the late hour but I'm afraid I can't think of a 3CNF formula that cannot be satisfied (I'm probably missing something obvious).</p>\n\n<p>Can you give me an example for such formula?</p>\n", 'ViewCount': '76', 'Title': "What's an example of an unsatisfiable 3-CNF formula?", 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-30T17:39:23.717', 'LastEditDate': '2014-01-30T17:33:53.110', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '20118', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11171', 'Tags': '<logic><satisfiability><3-sat>', 'CreationDate': '2014-01-30T16:18:49.413', 'Id': '20117'}{'Body': '<p>What is an upper bound on formula size when converting 3-SAT to UNIQUE 3-SAT?</p>\n\n<p>We can use the <a href="http://en.wikipedia.org/wiki/Valiant%E2%80%93Vazirani_theorem" rel="nofollow">Valiant Vazirani Therom</a>, also found <a href="http://people.csail.mit.edu/madhu/ST07/scribe/lect12.pdf" rel="nofollow">here (in more detail)</a>.</p>\n\n<p>Essentially, it is a randomized algorithm that converts a SAT formula into another SAT formula that has only 1 satisfying variable assignment (called UNIQUE-SAT) with high probability.</p>\n\n<p>I\'m wondering what the upper bounds are on the size of the formula.  The information I have proves that it is polynomial, but I hope we can get more specific.  Can anyone find a more exact upper bounds?</p>\n', 'ViewCount': '43', 'Title': 'What is an upper bound on formula size when converting 3-SAT to UNIQUE 3-SAT?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T18:09:47.103', 'LastEditDate': '2014-02-10T18:09:47.103', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1667', 'Tags': '<complexity-theory><reductions><3-sat>', 'CreationDate': '2014-02-10T17:08:04.963', 'Id': '21497'}{'Body': '<p>Reading this <a href="http://classes.soe.ucsc.edu/cmps102/Spring10/lect/17/SAT-3SAT-and-other-red.pdf" rel="nofollow">http://classes.soe.ucsc.edu/cmps102/Spring10/lect/17/SAT-3SAT-and-other-red.pdf</a>, I came to know that reducing a clause $C_i$ from a $SAT$ instance containing more than 3 literals to a $3-SAT$ instance is done this way,</p>\n\n<p>Suppose $C_1$ is $\\{x_1, x_2, x_3, x_4\\}$. It\'s equivalent representation in 3-literal clauses is,</p>\n\n<p>$C_{3-SAT} = \\{\\{x_1, x_2, y_1\\},\\{\\bar{y_1}, x_3,x_4\\}\\}$</p>\n\n<p>The issue lies here. Assume for $C_1$, all the literals are $False$ except for $x_2$.\nFor $C_{3-SAT}$, the first clause would indeed be $True$, but the boolean value for the second clause depends on the choice of $y_1$. What if we chose $y_1 = True$? then, $C_{3-SAT}$ will be $False$, yet $C_1$ is $True$, realizing a false reduction.</p>\n', 'ViewCount': '185', 'Title': 'Issue understanding the reduction of SAT to 3-SAT in poly time', 'LastActivityDate': '2014-02-26T13:45:34.337', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22053', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15072', 'Tags': '<algorithms><np-complete><satisfiability><3-sat><boolean-algebra>', 'CreationDate': '2014-02-26T13:28:05.573', 'FavoriteCount': '1', 'Id': '22052'}{'Body': u'<p>The GSAT (Greedy Satisfiability) algorithm can be used to find a solution to a search problem encoded in CNF. I\'m aware that since GSAT is greedy, it is incomplete (which means there would be cases where a solution might exist, but GSAT cannot find it). From the following link, I learned that this can happen when flipping variables greedily traps us in a cycle such as I \u2192 I\' \u2192 I\'\' \u2192 I. </p>\n\n<p><a href="http://www.dis.uniroma1.it/~liberato/ar/incomplete/incomplete.html" rel="nofollow">http://www.dis.uniroma1.it/~liberato/ar/incomplete/incomplete.html</a></p>\n\n<p>I\'ve been trying quite hard to come up with an actual instance that can show this, but have not been able to (and could not find examples elsewhere). Any help would be much appreciated. Thanks :)</p>\n\n<p>P.S. I\'m not talking about "hard" k-SAT problems in which the ratio of variables to clauses approaches 4.3. I\'m just looking for a simple example, possibly involving the least number of variables and/or clauses required.</p>\n', 'ViewCount': '76', 'Title': 'GSAT incompleteness example', 'LastActivityDate': '2014-02-27T05:59:46.950', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15094', 'Tags': '<algorithms><satisfiability><greedy-algorithms><3-sat>', 'CreationDate': '2014-02-27T05:07:36.670', 'Id': '22079'}{'Body': "<p>I am trying to prove that 3SAT is polynome time reducable to CNF-SAT, but I don't know how to do this. A formula F is in 3SAT iff f(F) is in KNFSAT, but since 3SAT is a part of KNFSAT, every formula that is in 3SAT will automatically be in CNF-SAT. Is my conclusion correct? And how do I actually show this in a correct manner? </p>\n", 'ViewCount': '26', 'Title': '3SAT to CNF-SAT reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-07T14:09:36.477', 'LastEditDate': '2014-04-07T14:09:36.477', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23514', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '14436', 'Tags': '<complexity-theory><reductions><satisfiability><3-sat>', 'CreationDate': '2014-04-07T13:16:48.117', 'Id': '23513'}