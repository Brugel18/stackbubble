{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m familiar with a dozen of programming languages which have exceptions in some way, yet I came to witness two "pathological" tendencies.</p>\n\n<ol>\n<li><p>There doesn\'t seem to be a common pattern or hierarchy of exceptions. Every language basically rolls its own version, and if the exceptions make it into the standard, then the kinds of exceptions that one finds in the standard would be rather arbitrary (mostly those which were implemented while creating language tools, such as reading source code from string or an exception to invoke debugger, or the one which happens when the file cannot be found etc.)</p></li>\n<li><p>Exceptions defined by the language are very rarely reused by user programs. There would be usually one or two popular exceptions ("not implement" for example). Though most times programmers will create their own exceptions. (Compare this to, for example, creating new numeric types or new collection types).</p></li>\n</ol>\n\n<p>This looks like a terrible omission to me. How comes no one knows what kinds of errors will be needed in user programs? I was hoping for there to be a kind of nice hierarchy, similar to numeric types, collections, object system etc.</p>\n\n<p>Worse yet, Goolge and Wikipedia provide very little help on the subject. So far I\'ve only found a paper on functional exception which opens in a passage:</p>\n\n<blockquote>\n  <p>This paper argues that lazy functional programming not only makes\n  built-in exception handling mechanism unnecessary, but provides a\n  powerful tool for developing and transforming programs that use\n  exceptions</p>\n</blockquote>\n\n<p><em>(A Functional Theory of Exceptions, Mike Spivey, 1988)</em></p>\n\n<p>But I think that exceptions are good. I don\'t want to transform programs that use exceptions, on the contrary, I want to make the use of exceptions less chaotic.</p>\n\n<h1>The question:</h1>\n\n<p>Is there a theory of exceptions? If so, what is it called? What are, if any, the cornerstone works outlining the basis of it?</p>\n', 'ViewCount': '252', 'Title': 'Is there a theory of exception hierarchies?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-16T10:11:49.167', 'LastEditDate': '2013-10-15T22:11:27.430', 'AnswerCount': '3', 'CommentCount': '7', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '10314', 'Tags': '<terminology><programming-languages><api-design><exceptions>', 'CreationDate': '2013-10-14T17:28:56.940', 'FavoriteCount': '1', 'Id': '16081'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm building a GUI Desktop application that will communicate with an API(http) in a webserver.</p>\n\n<p>In the client side I have a GUI Desktop application and a GSM Modem(hardware). The GUI Desktop application will make requests to the API in the webserver and will get the SMS's to send.</p>\n\n<p>My question here goes on how can I design the application so that the Clients don't cheat by sending requests to the API on the webserver saying that message is send. Anyone got any ideas on how to solve this problem? The GSM modem that send SMSs is in a untrusted client. Ideas on how to protect an API dealing with this kind of environment? I've been reading about proof-of-work, this approach can help to solve my problem?</p>\n\n<p>Best Regards</p>\n", 'ViewCount': '50', 'Title': 'API - Design issues', 'LastEditorUserId': '11099', 'LastActivityDate': '2013-10-31T19:24:49.367', 'LastEditDate': '2013-10-31T11:31:37.627', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '16605', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11099', 'Tags': '<api-design>', 'CreationDate': '2013-10-31T11:22:22.553', 'Id': '16602'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m asking here for both the <em>scientific, programmatic, and structural format</em> of a device driver. What does that mean? Basically, <strong>I\'m not asking how to write a driver in general</strong> ... I\'m asking how to structure one to behave as software that can act as the "middleware" between higher-level code and the hardware itself. I\'ve decided to embark on a journey of low-level computer programming (e.g. <a href="http://en.wikipedia.org/wiki/System_programming" rel="nofollow">systems programming</a>)\nto develop reusable software that can "expose" accessibility of hardware memory access by driver calls. </p>\n\n<p>I basically run a freelance group of a small programming team/company, and I\'ve decided to take on development across various retro-gaming platforms from the ground up (those which have decent documentation, or reverse engineering will endue). What I\'m asking here is how would one envision the development or structure of software that can act as a intermediary between the application software and the hardware; developmentally, structurally, and programmatically. My choice of console was originally the Nintendo 64\'s GPU (which I have documentation for). The issue isn\'t with writing the code to access the GPU, it\'s with developing a reusable driver/graphics engine (I\'m new to it).</p>\n\n<p>I would have asked this at <a href="http://programmers.stackexchange.com">Programmers.SE</a>, but they reject these kind of questions since they\'re not about specific programming issues, but about careful design methodologies, modularity, and structuring.</p>\n\n<p>So I\'ll ask again with hope to receive a somewhat explanatory answer on this process ... <strong>how do I go about the design methodology, structural format, or developmental logic to create a piece of software that can be accessed by other software to enable device access modularly? In other words, how do I structure and design a driver (i.e. what procedure should I take in creating such software)?</strong></p>\n\n<p><img src="http://i.stack.imgur.com/bTxpv.jpg" alt="enter image description here"></p>\n\n<p>Again, to clarify, <strong>I am not asking how to write a driver, <em>but how to go about structuring the system, methodology, and behavior of a driver.</em></strong> Are there any specific ways of going about this that prove successful (e.g. certain data types to define behavior for accessibility, methods used in accessing parts of a driver independently, etc.)?</p>\n', 'ViewCount': '84', 'Title': 'How to structure device driver software?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-30T10:31:17.667', 'LastEditDate': '2014-01-30T10:31:17.667', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12470', 'Tags': '<operating-systems><software-engineering><api-design>', 'CreationDate': '2013-12-30T20:31:51.440', 'Id': '19386'}},