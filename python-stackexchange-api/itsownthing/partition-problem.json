3240:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/3-partition_problem" rel="nofollow">3-Partition</a> problem is $\\mathsf{NP}$-Complete in a strong sense meaning there is no pseudo-polynomial time algorithm for it unless $\\mathsf{P}=\\mathsf{NP}$. I\'m looking for the fastest known exact algorithm that solves 3-Partition. Is there a fast (e.g subexponential) algorithm for 3-Partition? Is it possible to solve it faster than using SAT solvers?</p>\n', 'ViewCount': '284', 'LastEditorDisplayName': 'user742', 'Title': 'Fastest known algorithm for 3-Partition problem', 'LastActivityDate': '2013-03-27T15:53:45.660', 'LastEditDate': '2013-03-27T15:53:45.660', 'AnswerCount': '0', 'CommentCount': '10', 'Score': '4', 'OwnerDisplayName': 'user742', 'PostTypeId': '1', 'Tags': '<algorithms><np-complete><partition-problem>', 'CreationDate': '2013-03-26T12:06:40.963', 'Id': '10805'},3241:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've been looking for an algorithm which divides an undirected, weighted, planar and simple graph into $k$ disjoint subgraphs. Here, the graph is sparse, $k$ is fixed, and there are no negative edge weights. After cutting, each subgraph must be connected (i.e. there must be a path between any two vertices of the subgraph which is only composed of vertices in that subgraph).</p>\n\n<p>However, unlike most existing work on graph partitioning out there, I don't intend to obtain subgraphs that contain the same approximate number of vertices. Instead, I would like these subgraphs to have similar sum of edge weights. In other words, I would like to minimize the sum of edge weights of the subgraph with maximal weight and ideally cut long (weighted) edges.</p>\n\n<p>Is there a name for this problem? I wasn't able to find anything about this on the web. Also, how can I approach this problem?</p>\n", 'ViewCount': '185', 'Title': 'Dividing a weighted planar graph into $k$ subgraphs with balanced weight', 'LastEditorUserId': '9431', 'LastActivityDate': '2013-11-06T15:14:17.837', 'LastEditDate': '2013-08-03T14:22:17.707', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '9431', 'Tags': '<graph-theory><weighted-graphs><cluster><partition-problem>', 'CreationDate': '2013-08-02T04:01:20.273', 'FavoriteCount': '1', 'Id': '13571'},3242:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I know that the set partitioning problem defined like this:</p>\n\n<p>Given $S = \\left\\{ x_1, \\ldots x_n \\right\\}$, find $S_1$ and $S_2$ such that $S_1 \\cap S_2 = \\emptyset$, $S_1 \\cup S_2 = S$ and $\\sum_{x_i \\in S_1} x_i=\\sum_{x_i \\in S_2} x_i.$</p>\n\n<p>is NP-complete. But I don't understand why (or am not even sure if) the following problem is NP-complete:</p>\n\n<p>Given $S = \\left\\{ x_1, \\ldots x_n \\right\\}$, find $S_1$ and $S_2$ such that $S_1 \\cap S_2 = \\emptyset$, $S_1 \\cup S_2 = S$ and $\\vert \\sum_{x_i \\in S_1} x_i-\\sum_{x_i \\in S_2} x_i \\rvert$ is minimized.</p>\n\n<p>The paper 'The Differencing Method of Set Partitioning' by Karp and Karmarkar and some others say that it is NP-complete. But, if I have a sample solution to this problem, I can not tell whether it is an optimal solution (unlike in the first problem) and therefore I feel it NP-hard. If this is not true, how can I conclude that it is NP-complete? Thanks! </p>\n", 'ViewCount': '123', 'Title': 'Is the set partitioning problem NP complete?', 'LastActivityDate': '2013-12-09T18:45:42.057', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11962', 'Tags': '<complexity-theory><polynomial-time><partition-problem>', 'CreationDate': '2013-12-09T18:10:13.013', 'Id': '18782'},3243:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I was proposed (in school) to develop an approach to solve optimally the balanced partition problem. I tried the pseudo-linear algorithms but SUM is very large (~1M) and so O(S*N) cant run under available time (1000ms). I talked to the teacher and with N =&lt; 60 he recommended the brute force (we are learning recursion). I've tried some approaches but I cant find a recursive algorithm that runs under 1 second. Its possible as some students got an solution that runs in less than 100ms.</p>\n\n<p>What is an efficient recursive approach to this problem given data with this magnitude?</p>\n", 'ViewCount': '27', 'LastEditorDisplayName': 'user14946', 'Title': 'Balanced partition problem for N =< 60 and very large sums', 'LastActivityDate': '2014-02-22T22:18:40.147', 'LastEditDate': '2014-02-22T22:18:40.147', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'user14946', 'PostTypeId': '1', 'Tags': '<np-complete><optimization><partition-problem>', 'CreationDate': '2014-02-22T22:09:20.530', 'Id': '21932'},3244:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem in which I need to find an optimal graph cut that maximizes an objective over vertices (versus edge weights). I have looked at the literature but have not been able to find any similar problems to which I can map to. Perhaps someone can give some insight or point me to a similar problem from the graph theory literature.</p>\n\n<p>The problem is as follows, given a graph $G=(V,E)$, where there exists a path from any vertex $x_i$ to any other vertex $x_j$ (1 connected component) and each vertex has an associated weight $w_j$. Find a partition which removes $E_p$ edges $(E_p \\subset E)$ to create exactly $k$ connected components. The partition seeks to maximize a function over the $k$ subgraphs $\\sum\\limits_{i=1}^k f(W_i)$ where $W_i$ is the set of all weights on vertices in subgraph $i$. The $f$ I am specifically interested in is $f(W_i)=|W_i|\\,\\mathrm{mean}(W_i)^2 $, but I think any resources for a similar problem with a different $f$ would be helpful. </p>\n', 'ViewCount': '41', 'Title': 'Edge cuts with vertex weights', 'LastEditorUserId': '16985', 'LastActivityDate': '2014-04-23T08:03:23.563', 'LastEditDate': '2014-04-23T08:03:23.563', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16985', 'Tags': '<graph-theory><cluster><partition-problem>', 'CreationDate': '2014-04-22T12:27:06.003', 'FavoriteCount': '1', 'Id': '24026'},3245:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I understand Partition Problem is NP-complete.</p>\n\n<p>Given we have a magic black box that can answer Yes or No for the partition problem. I was wondering how to come up with a polynomial time algorithm to find the actual set using this black box. </p>\n\n<p>Thank you. </p>\n', 'ViewCount': '12', 'Title': 'How to find partition set of a Partition Problem using its decision problem', 'LastActivityDate': '2014-05-01T00:50:48.473', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24280', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17233', 'Tags': '<complexity-theory><np-complete><partition-problem>', 'CreationDate': '2014-05-01T00:39:31.503', 'Id': '24279'}