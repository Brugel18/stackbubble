{'Body': '<p>I have a problem that is almost equal to the standard one of the dining philosophers, but has a quirk: while a philosopher thinks, he still holds the fork on his left.</p>\n\n<p>If after the period of thinking (which isn\'t infinite), I release the fork on the left and then apply the normal solution (that is, acquire forks in the order of their <a href="http://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution" rel="nofollow">priority</a>), then would this solution be correct for this problem?</p>\n', 'ViewCount': '161', 'Title': 'Variation of the dining philosophers: is the standard solution still valid?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-21T12:37:20.157', 'LastEditDate': '2013-01-20T15:40:12.097', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '6', 'OwnerDisplayName': 'Lorenzo Pistone', 'PostTypeId': '1', 'Tags': '<operating-systems><concurrency><synchronization>', 'CreationDate': '2012-06-10T08:11:40.520', 'Id': '3562''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I experience a difficulty in solving exercises in distributed algorithm. Below is the the exercise I try to solve, it looks like I miss basic idea. </p>\n\n<p><strong>Exercise.</strong> Consider a 15-processor asynchronous network with processors 0,\u2026,14. The processors constantly run a synchronizer. Let $v$ and $v'$ be two processors in the network, and suppose that at a certain moment, the pulse counter at $v$ shows $p=27$. What is the range of possible pulse numbers at $v'$ in each of the following cases:</p>\n\n<p>a) The network is a ring, $v$ is processor number 11, $v'$ is processor number 2 and the synchronizer used is $\\alpha$.</p>\n\n<p><strong>Idea</strong>: if $v'$ hasn't sent any message up to pulse 27 of $v$, pulse of $v'$ is still 0, therefore lower bound of pulse of $v'$ is 0. The model of synchronizer is $\\alpha$ it means every node informs all nodes about it's safe(v,p) state, hence I assume that $v'$ might be 11-2=9 pulses before $v$. </p>\n\n<p>b) The network is a full balanced binary tree (4 levels), $v$ is the root, $v'$ is one of the leaves and the synchronizer used $\\beta$.</p>\n\n<p><strong>Idea</strong>: $v'$ also might have pulse 27, in this case $v$ sends at speed of $v'$.</p>\n\n<p>c) The same as in (b), except both $v$ and $v'$ are leaves.</p>\n\n<p>Honestly, I am completely confused by this exercise, I wrote few ideas, but I don't have any understanding and any intuition behind the answers.</p>\n\n<p>I will appreciate if someone show me the way how to solve such exercises.</p>\n", 'ViewCount': '145', 'Title': 'Distributed algorithms - $\\alpha, \\beta$ synchronizers', 'LastEditorUserId': '3094', 'LastActivityDate': '2012-11-29T04:18:41.997', 'LastEditDate': '2012-11-29T04:18:41.997', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7002', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><distributed-systems><synchronization>', 'CreationDate': '2012-11-28T20:58:24.443', 'Id': '7001''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '355', 'Title': 'What is a linearization point?', 'LastEditDate': '2012-12-03T20:59:49.560', 'AnswerCount': '1', 'Score': '3', 'OwnerDisplayName': 'nfaughnan', 'PostTypeId': '1', 'OwnerUserId': '4866', 'Body': '<p>With respect concurrent programming, what is a linearization point? </p>\n\n<p>They seem to occur at a compare-and-swap instruction apparently. The best definition I could find is <a href="http://en.wikipedia.org/wiki/Atomicity_%28programming%29#Linearization_points" rel="nofollow">here</a>. </p>\n\n<blockquote>\n  <p>All function calls have a linearization point at some instant between their invocation and their response.</p>\n</blockquote>\n\n<p>Okay that\'s fine, they occur somewhere within a function call, but what are they?</p>\n\n<blockquote>\n  <p>All functions appear to occur instantly at their linearization point, behaving as specified by the sequential definition.</p>\n</blockquote>\n\n<p>Occur instantly at their LP\'s??? I don\'t understand this.</p>\n\n<p>I also read through <a href="http://www.eecs.qmul.ac.uk/~ohearn/Workshops/Concurrency09/slides/vafeiadis.pdf" rel="nofollow">this</a> which attempts to prove LP\'s. I am having trouble finding any solid definitions. Could anyone help?</p>\n', 'Tags': '<semantics><concurrency><synchronization>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-03T20:59:49.560', 'CommentCount': '0', 'AcceptedAnswerId': '7133', 'CreationDate': '2012-12-03T19:04:17.580', 'Id': '7132''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>How can someone synchronize two or more threads using serialization? According to my professor's slides and code assignments you can use serialization to solve the synchronization problem. (He doesn't explain what serialization is).</p>\n\n<p>I tried to do my research but serialization means that you put data in a specific order. I would understand that it means the same thing in this case (Running threads in a specific order). But what I most confused about is the syntax of the question. My question is:</p>\n\n<p>Does serialization mean synchronization? How would one synchronize threads using serialization?</p>\n", 'ViewCount': '72', 'Title': 'Synchronization using serialization', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-26T07:32:34.700', 'LastEditDate': '2013-03-25T10:31:34.590', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '10770', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7405', 'Tags': '<concurrency><synchronization>', 'CreationDate': '2013-03-25T03:10:28.627', 'Id': '10761''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '117', 'Title': 'What is the impact of synchronisation overhead on parallel speedup?', 'LastEditDate': '2013-08-06T09:11:51.160', 'AnswerCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8767', 'FavoriteCount': '0', 'Body': '<p>When implementing a parallel version of an algorithm, what is the impact of synchronization delays on speedup efficiency? Does this depend on the platform used?</p>\n\n<p>Is coarse-grained parallelism better than fine-grained parallelism in certain situations?</p>\n', 'ClosedDate': '2013-08-11T12:10:46.710', 'Tags': '<efficiency><parallel-computing><concurrency><synchronization>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-06T09:11:51.160', 'CommentCount': '5', 'CreationDate': '2013-08-05T12:48:59.380', 'Id': '13611''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am looking for a library which provides a "serializer" ADT for synchronization. \n(<a href="http://courses.cs.vt.edu/~cs5204/fall99/Summaries/Concurrency/serializers2.html" rel="nofollow">http://courses.cs.vt.edu/~cs5204/fall99/Summaries/Concurrency/serializers2.html</a>)</p>\n\n<p>Googling leads me to nowhere, unlike monitors,semaphores and other constructs, serializers are hardly discussed over the web in depth.</p>\n\n<p>Any other pointers are welcome. :)</p>\n', 'ViewCount': '45', 'Title': 'Good "serializer" ADT implementations for Synchronization', 'LastActivityDate': '2013-09-22T02:33:19.440', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9647', 'Tags': '<operating-systems><synchronization>', 'CreationDate': '2013-09-21T18:56:37.740', 'Id': '14502''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I was reading about synchronization problems for cooperating processes and i learned that only hardware solutions like <code>test_and_wait()</code> and <code>compare_and_set()</code> are performed atomically at the hardware level and in all other software solutions like <strong>mutex</strong>, <strong>semaphore</strong> the code needs to be executed atomically and hence these have to be executed in the critical section themselves.</p>\n\n<p>Does this mean that these software solutions have limited use when compared to the hardware solutions, though it seems that the former are used extensively?</p>\n', 'ViewCount': '298', 'Title': 'Solutions to synchronization problem need to be executed in critical section', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T18:15:55.573', 'LastEditDate': '2013-11-12T17:51:29.193', 'AnswerCount': '3', 'CommentCount': '3', 'AcceptedAnswerId': '17991', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10120', 'Tags': '<operating-systems><concurrency><synchronization><mutual-exclusion>', 'CreationDate': '2013-11-12T06:03:16.840', 'Id': '17945''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Some guy on the internet <a href="http://networkengineering.stackexchange.com/a/5133/296">recommends</a> using the same ntp server when it is required to troubleshoot asymmetric routes through ICMP, and it\'s somewhat important to have synchronised time between the two machines doing ICMP.</p>\n\n<p>Granularity of timestamps in ICMP is 1ms (unique per 24h period), assume packet roundtrip between the source and destination of at least 100ms, each way of at least 50ms, plus jitter.</p>\n\n<p>I find the recommendation of using the same ntp server unreasonable; for one, because it would seem that the likelihood of any given reliable ntp server, anywhere in the world, carrying correct time is much higher than the likelihood of transmitting said time through the internet over longer distances (plus with potential jitter and packet loss), e.g. a good collection of local servers is already the best you could do for the task at stake.</p>\n\n<p>Basically, my conjecture is that, should a single ntp server be shared, it won\'t necessarily be a good server for both hosts doing ICMP, and would not contribute to the clock between the two (and only two) machines being the most synchronised, compared to a good collection of local servers instead.</p>\n\n<p>What\'s the mathematical take on this?</p>\n', 'ViewCount': '45', 'Title': 'NTP: synchronisation of time between two machines for ICMP timestamping', 'LastActivityDate': '2013-11-24T20:59:38.447', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11551', 'Tags': '<algorithm-analysis><reference-request><optimization><computer-networks><synchronization>', 'CreationDate': '2013-11-24T20:59:38.447', 'Id': '18310''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>The <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Timestamp" rel="nofollow">ICMP timestamp</a> protocol is useful for determining which path \u2014 forward or reverse \u2014 is contributing to the jitter on the line.</p>\n\n<p>In an ideal world, all computers would have an excellent ntpd, and time accuracy of about 1ms (the granularity of ICMP timestamp) should not be a problem:</p>\n\n<pre><code>0       145.5   146 = 75 + 71\n1       142.7   142 = 72 + 70\n2       140.7   140 = 70 + 70\n3       146.7   146 = 76 + 70\n4       148.3   148 = 77 + 71\n5       157.5   157 = 87 + 70\n6       167.1   167 = 96 + 71\n7       166.3   166 = 95 + 71\n8       167.7   167 = 97 + 70\n9       159.0   159 = 88 + 71\n</code></pre>\n\n<p>However, in reality, as per <a href="http://stackoverflow.com/questions/20172028/awk-hping-print-difference-between-icmp-originate-receive/20186781#20186781">http://stackoverflow.com/questions/20172028/awk-hping-print-difference-between-icmp-originate-receive/20186781#20186781</a>, the data could be like this:</p>\n\n<pre><code>0       165.9   166 = -142113 + 142279\n1       160.2   160 = -142118 + 142278\n2       155.2   155 = -142122 + 142277\n3       156.5   156 = -142121 + 142277\n4       164.7   165 = -142112 + 142277\n5       164.4   164 = -142111 + 142275\n6       160.9   161 = -142114 + 142275\n7       158.1   158 = -142117 + 142275\n8       155.6   156 = -142119 + 142275\n9       143.0   143 = -142131 + 142274\n10      153.2   153 = -142120 + 142273\n11      157.1   157 = -142115 + 142272\n12      158.3   158 = -142114 + 142272\n13      148.6   149 = -142123 + 142272\n14      144.3   144 = -142127 + 142271\n15      145.3   145 = -142125 + 142270\n</code></pre>\n\n<p>Which still shows that only one path is responsible for the jitter, since only one value jumps up and down randomly, whereas the other one is decreasing monotonically (probably due to an actively-running ntpd, which is correcting the time as we ping).</p>\n\n<p>Another example could be less wrong-looking of the time not being synchronised, say:</p>\n\n<pre><code>0       165.9   166 = -113 + 279\n</code></pre>\n\n<p>Or, better yet:</p>\n\n<pre><code>0       165.9   166 = 7 + 159\n</code></pre>\n\n<p>Or, say, still wrong by some 10ms to 40ms, on a landline link from Alberta to Vogtland, but much less obvious:</p>\n\n<pre><code>0       165.9   166 = 59 + 107\n</code></pre>\n\n<p>How to make scientific sense of this data, for it to be easily presentable, and not blatantly wrong?</p>\n\n<p>Feel free to assume to have between 10 to 1000 measurement points, measured over a couple of seconds or minutes.</p>\n', 'ViewCount': '50', 'Title': 'How to present ping data from ICMP timestamp', 'LastActivityDate': '2013-11-28T06:12:49.997', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11551', 'Tags': '<algorithms><reference-request><computer-networks><synchronization>', 'CreationDate': '2013-11-25T20:05:35.750', 'Id': '18332''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Firstly, I am revising for my Concurrent Programming exam and have come across the following question from a previous exam paper. I have attempted to answer it, and will try and convey this effort; I'm very stuck with this question and not sure how to further progress.</p>\n\n<h3>Question</h3>\n\n<p>This question is from a 2011 Past Paper from my University created by the Examining Body that year.\nExaminers: Professor E K Burke\nDr P Sage\nand the internal examiners</p>\n\n<blockquote>\n  <p>A car park has 100 parking spaces. Because of building work max cars must be accommodated in an overflow area which is accessed via the main car park. Entrance to the main and overflow areas is controlled by two automatic barriers as follows.</p>\n  \n  <ul>\n  <li><p>When the car park is empty both barriers are closed.</p></li>\n  <li><p>Normally, the main barrier is raised as a car approaches and is lowered immediately the car has entered.</p></li>\n  <li>An exception occurs immediately after the main car park is full i.e. when it has 100-max cars in it. As the next car approaches the overflow barrier is raised first, then the main barrier is raised. Once the car has entered the main car park the overflow barrier remains raised and the main barrier is lowered. The normal main barrier action described above then resumes.</li>\n  </ul>\n  \n  <p>Consider the following program which is intended to control the two barriers. </p>\n  \n  <p>All instructions, o1, o2, o3, m1, m2, m3 and m4, are atomic. You may assume that $0 &lt; \\max \\leq 100$.</p>\n\n<pre><code>int #cars=0;\n\nprocess Main {\nwhile (true)\n {\n m1: &lt;#cars++&gt;;\n m2: &lt;openMainBarrier&gt;;\n m3: &lt;closeMainBarrier&gt;;\n m4: &lt;if (#cars==100)\n     break&gt;;\n }\n}\n\nprocess Overflow {\nint max; \no1: &lt;input(max)&gt;;\n while (true) \n {\n   o2: &lt;if (#cars==100-max+1)  break&gt;; \n   o3: &lt;openOverflowBarrier&gt;; \n }\n}\n</code></pre>\n  \n  <ol>\n  <li><p>The program terminates only if both processes terminate. Explain why the program may not terminate.</p></li>\n  <li><p>Explain why, even if the program does terminate, it may not operate as specified.</p></li>\n  <li><p>By introducing the use of semaphores, ensure that program does terminate and operates as specified. You must only use atomic instructions. You may introduce new additional non-semaphore variables but you must not alter the scope of #cars and max.</p></li>\n  </ol>\n</blockquote>\n\n<h3>My attempt</h3>\n\n<p>Most semaphore exercises I have looked at so far often have the main process in a <code>while(true){...}</code> infinite loop, thus, termination has never been an issue before - it is normally not addressed in these short exercises.</p>\n\n<p>It is because of this I am having difficulty trying to produce an answer for 2) and 3). The question does not even appear to address cars leaving the car park, which leads me to understand this isn't an infinite ongoing cycle type process, but will terminate when both car parks reach maximum capacity?</p>\n\n<p>In this instance, the only thing I can think of is that the process will not terminate in the event the main carpark or overflow carpark does not reach capacity, however I feel this answer is not 'clever' enough and I'm worried I may be missing something. </p>\n\n<p>I have attempted 3) as follows but I am worried this is incorrect as I'm not sure if I am supposed to handle cars leaving the car park, or if I am supposed to ignore that in order to force it to terminate.</p>\n\n<pre><code>OverflowCarPark{\nint max;\n&lt;input (max)&gt;\nwhile(true){\n down(maxFull)\n if(#cars &lt;= 100 + max){\n    down(openMainBarrier)\n    up(openOverflowBarrier)\n }\n  else { break; }\n}\n\nMainCarPark{\n&lt;cars++;&gt;\nwhile(true){\n if(#cars &lt;= 100){\n    up(openMainBarrier)\n  } else if (#cars &gt; 100 + max) { break; \n  } else { \n    up(maxFull);\n    down(openOverflowBarrier);\n }\n}\n</code></pre>\n\n<p>What is the recommended approach to dealing with termination here? </p>\n", 'ViewCount': '38', 'Title': 'Finding issues in concurrent implementation of carpark overflow control', 'LastEditorUserId': '12785', 'LastActivityDate': '2014-01-26T09:17:05.963', 'LastEditDate': '2014-01-26T02:40:05.850', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12785', 'Tags': '<algorithms><concurrency><synchronization><mutual-exclusion>', 'CreationDate': '2014-01-26T00:47:28.777', 'Id': '19977''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>a spin lock solution to the critical path problem is shown below . my question is will this or will this not  result in starvation ?    </p>\n\n<pre><code>    Thread A                Thread B\nleave note A;           leave note B;\nwhile (note B) {\\\\X     if (noNote A) {\\\\Y\n    do nothing;             if (noMilk) { \n}                               buy milk;\n\nif (noMilk) {                  }\n    buy milk;           }\n}                       remove note B;\nremove note A;\n</code></pre>\n\n<p>let me illustrate my point ,if thread A and B are scheduled as shown wont that result in starvation ? </p>\n\n<p><img src="http://i.stack.imgur.com/99uPD.png" alt="sync issue"></p>\n\n<p>note : those arrows are meant to indicate a cycle .</p>\n\n<p>note: I\'m following the online operating system course from Berkeley (<a href="http://www.youtube.com/playlist?list=PL-XXv-cvA_iCrnl0625nXp4GimjT-cv_1" rel="nofollow">http://www.youtube.com/playlist?list=PL-XXv-cvA_iCrnl0625nXp4GimjT-cv_1</a>) .</p>\n\n<p>In lecture 4 ,they talk about this as a correct solution to the critical path problem</p>\n', 'ViewCount': '42', 'Title': 'Issue with Multithreading spin locks', 'LastEditorUserId': '14499', 'LastActivityDate': '2014-02-17T05:29:00.100', 'LastEditDate': '2014-02-17T05:29:00.100', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14499', 'Tags': '<operating-systems><synchronization>', 'CreationDate': '2014-02-14T15:11:23.823', 'Id': '21637''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I\'m studying Distributed Systems and synchronization and I didn\'t catch this solution of totally ordered multicast with Lamport timestamps. I read that it doesn\'t need ack to deliver a message to the application, but</p>\n\n<blockquote>\n  <p>"It is sufficient to multicast any other type of message, as long as that message has a timestamp larger than the received message. The condition for delivering a message m to the application, is that another message has been received from each other process with a large timestamp. This guarantees that there are no more messages underway with a lower timestamp."</p>\n</blockquote>\n\n<p>This is a definition from a book. I tried to apply this definition to an example but I guess that something is wrong.</p>\n\n<h3>Example.</h3>\n\n<blockquote>\n  <p>There are 4 processes and they multicast the following messages (second number in parentheses is timestamp) :<br>\n  P1 multi-casts (m11, 5);  (m12, 12); (m13, 14);<br>\n  P2 multi-casts (m21, 6); (m22, 14);<br>\n  P3 multi-casts (m31, 5); (m32, 7); (m33, 11);<br>\n  P4 multi-casts (m41, 8); (m42, 15); (m43, 19).</p>\n</blockquote>\n\n<p>Supposing that there are no acknoledgments, can I guess which messages can be delivered and which not? Based on definition, my guess is that only m11 and m31 can be delivered to the application, because all the other messages received will have a timestamp greater, but this seems very strange, and I think I didn\'t understand the delivery condition very well. I have an exam next week and in general I\'d like to understand this mechanism.</p>\n', 'ViewCount': '73', 'Title': 'totally ordered multicast with Lamport timestamp', 'LastEditorUserId': '16819', 'LastActivityDate': '2014-04-20T13:25:52.457', 'LastEditDate': '2014-04-20T13:25:52.457', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16819', 'Tags': '<distributed-systems><computer-networks><synchronization><communication-protocols><message-passing>', 'CreationDate': '2014-04-16T07:26:03.173', 'FavoriteCount': '1', 'Id': '23847''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}