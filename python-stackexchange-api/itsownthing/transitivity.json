3750:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm playing around with tournaments and currently have the problem that I need to check whether a given subset of the edges of a tournament is transitive (it need not be acyclic). I'm aware that I can always take the transitive closure of the edge set and see whether it terminates without adding a single edge or not, but I was wondering if there might be a simpler way than that.</p>\n\n<p>Note that I'm specifically going for simplicity, not efficiency; the tournaments I want to check are over a maximum of $7$ vertices, so complexity really isn't an issue. I would prefer simple, easy to implement ways. The simplest I could find so far is Floyd-Warshall, but maybe someone knows anything that's simpler still.</p>\n", 'ViewCount': '65', 'Title': 'Simplest way to check edge set for transitivity', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-08T12:59:44.767', 'LastEditDate': '2013-11-08T12:59:44.767', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16760', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6689', 'Tags': '<algorithms><graphs><transitivity>', 'CreationDate': '2013-11-06T00:54:33.107', 'Id': '16757'},3751:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is it possible to use a sorting algorithm with a non-transitive comparison, and if yes, why is transitivity listed as a requirement for sorting comparators?</p>\n\n<p>Background:</p>\n\n<ul>\n<li><p><em>A sorting algorithm generally sorts the elements of a\nlist according to a comparator function C(x,y), with</em></p>\n\n<p>\\begin{array}{ll} C(x,y) = \\begin{cases}\n    -1  &amp; {\\text{if}}\\ x\\prec y   \\\\ 0 &amp; {\\text{if}}\\ x\\sim y \\\\ \n    +1 &amp; {\\text{if}}\\ x\\succ y  \\\\ \\end{cases} \\end{array}</p>\n\n<p><em>The requirements for this comparator are, as far as I\nunderstand them:</em></p>\n\n<ul>\n<li><em>reflexive:</em> $\\forall x: C(x,x)=0$ </li>\n<li><em>antisymmetric:</em> $\\forall x,y: C(x,y) = - C(y,x)$ </li>\n<li><em>transitive:</em> $\\forall x,y,z, a: C(x,y)=a \\land C(y,z)=a \\Rightarrow C(x,z)=a$</li>\n<li><em>C(x,y) is defined for all x and y, and the results depend only on x and y</em></li>\n</ul>\n\n<p><em>(These requirements are always listed differently accross different\nimplementations, so I am not sure I got them all right)</em></p></li>\n</ul>\n\n<p>Now I am wondering about a "tolerant" comparator function, that accepts numbers x,y as similar if$ |x - y| \\le 1$:\n\\begin{array}{ll}\nC(x,y) = \\begin{cases}\n-1  &amp; {\\text{if}}\\ x\\lt y-1   \\\\\n0 &amp; {\\text{if}}\\ |x - y| \\le 1 \\\\ \n+1 &amp; {\\text{if}}\\ x\\gt y+1  \\\\\n\\end{cases}\n\\end{array}</p>\n\n<p>Examples: both <code>[ 1, 2, 3, 4, 5]</code> and <code>[1, 4, 3, 2, 5]</code> are correctly sorted  in ascending order according to the tolerant comparator ($C(x,y) \\le 0$ if x comes before y in the list)<br>\nbut <code>[1, 4, 2, 3, 5]</code> is not, since C(4,2)=1</p>\n\n<p>This tolerant comparator is reflexive and antisymmetric, but not transitive.</p>\n\n<p>i.e. C(1,2) = 0 , c(2,3) = 0, but C(1,3) = -1, violating transitivity</p>\n\n<p>Yet I cannot think of any sorting algorithm that would fail to produce a "correctly sorted" output when given this comparator and a random list.</p>\n\n<p>Is transitivity therefore not required in this case? And is there a less strict version of transitivity that <em>is</em> required for the sorting to work?</p>\n\n<p>Related questions:</p>\n\n<ul>\n<li><a href="http://math.stackexchange.com/q/276907/34541">Why is antisymmetry necessary for comparison sort?</a> (about antisymmetry)</li>\n<li><a href="http://cs.stackexchange.com/q/2336/2932">Sorting algorithms which accept a random comparator</a> (about a random C(x,y))</li>\n<li><a href="http://stackoverflow.com/q/20363810/145999">OrderBy with a non-transitive IComparer</a> (about the c# sort algorithm, by me)</li>\n</ul>\n', 'ViewCount': '234', 'Title': 'Is transitivity required for a sorting algorithm', 'LastActivityDate': '2014-02-12T23:38:27.540', 'AnswerCount': '3', 'CommentCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2932', 'Tags': '<algorithms><sorting><quicksort><transitivity>', 'CreationDate': '2013-12-15T17:19:24.000', 'Id': '19013'}