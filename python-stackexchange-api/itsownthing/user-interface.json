{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I would like to write a simple program that accepts a set of windows (width+height) and the screen resolution and outputs an arrangement of those windows on the screen such that the windows take the most space. Therefore it is possible to resize a window, while maintaining  <code>output size &gt;= initial size</code> and the aspect ratio. So for window $i$, I'd like the algorithm to return a tuple $(x, y, width, height)$.</p>\n\n<p>I believe this is might be a variation of 2D Knapsack. I've tried going over results around the web but they mostly had a lot of background (and no implementation) that made it hard for me to follow.</p>\n\n<p>I'm less interested in the fastest possible algorithm, but more in something that is practical for my specific need.</p>\n", 'ViewCount': '458', 'Title': 'How to devise an algorithm to arrange (resizable) windows on the screen to cover as much space as possible?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-04-14T12:28:42.977', 'LastEditDate': '2012-04-11T21:05:32.490', 'AnswerCount': '2', 'CommentCount': '12', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '1042', 'Tags': '<algorithms><computational-geometry><packing><user-interface>', 'CreationDate': '2012-04-10T21:20:21.423', 'Id': '1217'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>(this is related to my other question, see <a href="http://cs.stackexchange.com/questions/1217/how-to-devise-an-algorithm-to-arrange-resizable-windows-on-the-screen-to-cover">here</a>)</p>\n\n<p>Imagine a screen, with 3 windows on it:</p>\n\n<p><img src="http://i.stack.imgur.com/vVUl3.jpg" alt="enter image description here"></p>\n\n<p>I\'d like to find an efficient data structure to represent this, while supporting these actions:</p>\n\n<ul>\n<li>return a list of coordinates where a given window can be positioned without overlapping with others\n<ul>\n<li>for the above example, if we want to insert a window of size 2x2, possible positions will be (8, 6), (8, 7), ..</li>\n</ul></li>\n<li>resizing a window on the screen without overlapping other windows while maintaining aspect ratio</li>\n<li>insert window at position x, y (assuming it doesn\'t overlap)</li>\n</ul>\n\n<p>Right now my naive approach is keeping an array of windows and going over all points on the screen, checking for each one if it\'s in any of the windows. This is $O(n\\cdot m\\cdot w)$ where $n, m$ are the width, height of the screen and $w$ is the number of windows in it. Note that in general $w$ will be small (say &lt; 10) where each window is taking a lot of space.</p>\n', 'ViewCount': '93', 'Title': 'Efficient queriable data structure to represent a screen with windows on it', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T11:39:14.260', 'LastEditDate': '2012-04-22T11:39:14.260', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1042', 'Tags': '<algorithms><computational-geometry><user-interface><modelling>', 'CreationDate': '2012-04-14T12:08:18.573', 'Id': '1268'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>(this is related to my other question, see <a href="http://cs.stackexchange.com/questions/1217/how-to-devise-an-algorithm-to-arrange-resizable-windows-on-the-screen-to-cover">here</a>)</p>\n\n<p>I would like to write a function that scores a given arrangement of windows on a screen.</p>\n\n<p>The purpose of this function is to determine whether a particular layout is good and by going over other possible layouts, finding the one with the highest score.</p>\n\n<p>Here are some characteristics that I think make a good layout:</p>\n\n<ol>\n<li>maximizing amount of space used by windows (or in other words, the free space on the screen should be minimized)</li>\n<li>windows are (more or less) evenly sized</li>\n</ol>\n\n<p>Bonus: assigning each window a priority and giving a higher score for layouts where windows with a higher priority take more space.</p>\n\n<p>Here\'s an example: Suppose our screen is 11x11 and we want to put two windows on it. Window A\'s initial size is 1x1 and window B is 2x1.</p>\n\n<p>When we resize windows, we preserve their aspect ratio. So here are two possible layout:</p>\n\n<p><img src="http://i.stack.imgur.com/zG3bg.jpg" alt="enter image description here"></p>\n\n<p>The function should give the one on the right a higher score.</p>\n\n<p>Another nice thing to have is the option to \'dock\' a window to one or more sides of the screen. Then suppose we want to dock A to the bottom-left of the screen, the scoring function should prefer this layout than the above one on the right:</p>\n\n<p><img src="http://i.stack.imgur.com/Ol6Vw.jpg" alt="enter image description here"></p>\n', 'ViewCount': '89', 'Title': 'How to score a given arrangement of windows on a screen to produce good layouts', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T15:58:40.977', 'LastEditDate': '2012-04-22T15:58:40.977', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1042', 'Tags': '<computational-geometry><user-interface><modelling>', 'CreationDate': '2012-04-14T15:24:22.837', 'Id': '1274'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I was trying to write some simple code for a "flow layout" manager and what I came up with initially was something like the following (semi-pseudocode):</p>\n\n<pre><code>int rowHeight = 0;\nRECT rect = parent.getClientRect();\nPOINT pos = rect.position;  // Start at top-left corner, row by row\n\nforeach (Window child in parent.children)\n{\n    // POINT is a tuple of: (x, y)\n    // SIZE is a tuple of: (width, height)\n    // RECT is a tuple of: (left, top, right, bottom)\n    RECT proposed1 = RECT(rect.left + pos.x, rect.top + pos.y, rect.right, rect.bottom),\n         proposed2 = RECT(rect.left, rect.top + pos.y + rowHeight, rect.right, rect.bottom);\n    SIZE size1 = child.getPreferredSize(proposed1),\n         size2 = child.getPreferredSize(proposed2);\n    if (size1.width &lt;= proposed1.width)\n    {\n        child.put(proposed1);  // same row\n        pos.x += size1.width;\n        rowHeight = max(rowHeight, size1.height);\n    }\n    else\n    {\n        child.put(proposed2);  // new row\n        pos.x = rect.left;\n        pos.y += rowHeight;\n        rowHeight = size2.height;\n    }\n}\n</code></pre>\n\n<p>In other words, the algorithm is very simple:<br>\nThe layout manager asks every component, "is the remaining portion of the row enough for you?" and, if the component says "no, my width is too long", it places the component on the next row instead.</p>\n\n<p>There are two major problems with this approach:</p>\n\n<ul>\n<li><p>This algorithm results in very long, thin components, because it is essentially greedy with the width of each component -- if a component wants the whole row, it will use the whole row (ugly), even if it could use a smaller width (but larger height).</p></li>\n<li><p>It only works if you already <em>know</em> what the parent\'s size is -- but you might not! Instead, you might simply have a restriction, "the parent\'s size must be between these two dimensions", but the rest might be open-ended.</p></li>\n</ul>\n\n<p>I am, however, at a loss of how to come up with a better algorithm -- how do I figure out what would be a good size to to \'propose\' to the component?   And even when I figure that out, what should I try to optimize, exactly? (The area, the width, the aspect ratio, the number of components on the screen, or something else?)</p>\n\n<p>Any ideas on how I should approach this problem?</p>\n', 'ViewCount': '280', 'Title': '"Flow layouts" inside a GUI -- how do I come up with a good algorithm?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-10T11:26:48.527', 'LastEditDate': '2012-06-10T11:26:48.527', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '836', 'Tags': '<algorithms><computational-geometry><greedy-algorithms><user-interface>', 'CreationDate': '2012-06-09T23:51:40.070', 'FavoriteCount': '0', 'Id': '2306'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>IPv6 addresses in the form of <code>862A:7373:3386:BF1F:8D77:D3D2:220F:D7E0</code> are much harder to memorize or even transcribe than the 4 octets of IPv4.  </p>\n\n<p>There <a href="http://blog.jgc.org/2011/07/pronounceable-ipv6-addresses-wpa2-psk.html?m=1" rel="nofollow">have</a> <a href="http://www.halfbakery.com/idea/IPv6_20Worded_20Addresses#1260513928" rel="nofollow">been</a> attempts to mitigate this, making IPv6 addresses somehow more memorable.</p>\n\n<p>Is there an intentionally-weak hashing function which could be reversed to find that the phrase, say, <a href="http://en.wikipedia.org/wiki/Dissociated_press" rel="nofollow">"This is relatively benign and easy to spot if the phrase is bent so as to be not worth paying"</a> would hash to a target IPv6 address?  The hash would, of course, have many colliding inputs to choose from, and a potentially more memorable sentence, such as this example phrase, could be automatically offered.</p>\n\n<p>I guess there are two parts: First a weak hash with good distribution in both directions.  Second is an algorithm for selecting memorable phrases from among the many collisions (short, consisting of words from a specified language, perhaps even following a simplified grammar).</p>\n\n<p>Although the hash function would need to be weak, I don\'t doubt that the effort is still significant - however, once the phrase is known, the computation of the hash to the target address is very quick.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I found this related idea, <a href="https://en.wikipedia.org/wiki/Piphilology" rel="nofollow">Piphilology</a>, for memorizing some digits of \u03c0:</p>\n\n<blockquote>\n  <p>How I wish a drink, alcoholic of course, after the heavy lectures involving quantum mechanics!</p>\n</blockquote>\n', 'ViewCount': '301', 'Title': 'Weak hashing function for memorable IPv6 addresses', 'LastEditorUserId': '41', 'LastActivityDate': '2013-12-18T02:30:58.523', 'LastEditDate': '2013-07-20T09:19:35.660', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '762', 'Tags': '<cryptography><computer-networks><hash><user-interface>', 'CreationDate': '2012-07-15T17:57:04.403', 'FavoriteCount': '3', 'Id': '2752'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Mostly I am interested in characters 32 through 126 (space, special characters, numbers, and upper and lower case letters) but the others would be good to know as well, especially the del, backspace, tab, and newline characters.</p>\n\n<p>I have been told that there is a huge difference in the answer for different situations such as writing code versus writing a novel. Due to this problem I would like to use the average case for a large number of people with a wide variety of usage. Perhaps the same criteria that the people behind Dvorak used.</p>\n\n<p>I plan on experimenting with chorded keyboards and I wanted this data so that I could assign the most common characters to the easiest chords and assign the least common characters to the most difficult chords. I don't actually need it yet since I haven't found how to intercept and replace keyboard events yet. In theory I don't need it at all and I could set all the chords at random but I am a bit of a perfectionist and wanted to optimize and generalize it. The reason for ASCII characters is that it should ensure complete coverage barring the use of additional character sets.</p>\n", 'ViewCount': '340', 'Title': 'What is the Usage Frequency of ASCII Characters?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-19T23:42:16.413', 'LastEditDate': '2012-12-19T23:42:16.413', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5122', 'Tags': '<reference-request><user-interface>', 'CreationDate': '2012-12-19T04:29:49.360', 'Id': '7501'}}