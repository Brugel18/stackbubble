{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '630', 'Title': 'Can constraint satisfaction problems be solved with Prolog?', 'LastEditDate': '2012-05-31T16:25:50.040', 'AnswerCount': '3', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1621', 'FavoriteCount': '2', 'Body': '<p>Is <a href="http://iggyfernandez.wordpress.com/2012/05/21/sql-vs-nosql-third-international-nocoug-sql-nosql-challenge-sponsored-by-pythian/">"party attendance"</a> type of problems solvable in Prolog? For example:</p>\n\n<blockquote>\n  <p>Burdock Muldoon and Carlotta Pinkstone both said they would come if Albus Dumbledore came. Albus Dumbledore and Daisy Dodderidge both said they would come if Carlotta Pinkstone came. Albus Dumbledore, Burdock Muldoon, and Carlotta Pinkstone all said they would come if Elfrida Clagg came. Carlotta Pinkstone and Daisy Dodderidge both said they would come if Falco Aesalon came. Burdock Muldoon, Elfrida Clagg, and Falco Aesalon all said they would come if Carlotta Pinkstone and Daisy Dodderidge both came. Daisy Dodderidge said she would come if Albus Dumbledore and Burdock Muldoon both came.\n  Whom is needs to be persuaded to attend the party in order to ensure that all her invitees attend?</p>\n</blockquote>\n\n<p>I have tried to express this in GNU Prolog:</p>\n\n<pre><code>attend(BM) :- attend(AD).\nattend(CP) :- attend(AD).\nattend(AD) :- attend(CP).\nattend(DD) :- attend(CP). \nattend(AD) :- attend(EC).\nattend(BM) :- attend(EC).\nattend(CP) :- attend(EC). \nattend(CP) :- attend(FA).\nattend(DD) :- attend(FA).\nattend(BM) :- attend(CP),attend(DD).\nattend(EC) :- attend(CP),attend(DD).\nattend(FA) :- attend(CP),attend(DD).\nattend(DD) :- attend(AD),attend(BM).\n\nattend(FA). /* try different seed invitees in order to see if all would attend*/\n\n/* input:\nwrite(\'invited:\'),nl,\n  attend(X),write(X),nl,\n  fail.*/\n</code></pre>\n\n<p>I\'m experiencing stack overflow (no pun), and have no knowledge of prolog evaluation, this is why I\'m asking.</p>\n\n<p>Generally speaking, this problem can be cast into Boolean CNF satisfaction formula (with 6 boolean variables). Therefore, does the prolog perspective have any merit?</p>\n', 'Tags': '<logic><constraint-programming><prolog><logic-programming>', 'LastEditorUserId': '1621', 'LastActivityDate': '2012-06-01T18:39:25.400', 'CommentCount': '3', 'AcceptedAnswerId': '2086', 'CreationDate': '2012-05-23T21:21:24.983', 'Id': '2031'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there a clear reference, with pseudo-code, on how to go about implementing a Prolog interpreter in a purely functional language? That which I have found so far seems to deal only with imperative languages, is merely a demonstration of Prolog implemented in itself, or offers no concrete algorithm to use for interpretation. I would be very appreciative of an answer.</p>\n', 'ViewCount': '973', 'Title': 'How to implement a prolog interpreter in a purely functional language?', 'LastActivityDate': '2012-11-12T14:52:51.913', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '6622', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '4555', 'Tags': '<functional-programming><prolog><logic-programming>', 'CreationDate': '2012-11-11T20:21:42.027', 'FavoriteCount': '3', 'Id': '6618'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a good understanding of how to program using logic languages, but I\'m currently writing up a paper describing some of my work, and I wanted to ensure that I wasn\'t abusing the proper terminology when describing logic languages. I have a few questions:</p>\n\n<ol>\n<li>What exactly is a predicate? How does a predicate relate to rules/facts? I.e. are rules predicates but not all predicates facts and rules?</li>\n<li>What is a clause, and how does it relate to a predicate?</li>\n<li>When describing how a rule is tested/proven, what is the equivalent term for "calling a function"? Do we say that the rule is called, or that a goal is called?</li>\n<li>What exactly is a goal? Is a goal equivalent to a query?</li>\n</ol>\n\n<p>Like I said, I have a very good understanding of how Prolog works, just not a good knowledge of the right terms to describe the right things.</p>\n', 'ViewCount': '319', 'Title': 'Proper terminology in Prolog/logical programming theory?', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-09-16T14:19:14.387', 'LastEditDate': '2013-06-06T16:06:30.640', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '12601', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<terminology><programming-languages><logic-programming><prolog>', 'CreationDate': '2013-06-06T15:58:32.000', 'Id': '12489'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '126', 'Title': 'What makes PROLOG Turing-complete?', 'LastEditDate': '2014-01-09T09:14:38.860', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '8415', 'FavoriteCount': '0', 'Body': u'<p>I know that it can be proven PROLOG is Turing-complete by constructing a program that simulates a Turing machine like this:</p>\n\n<pre><code>turing(Tape0, Tape) :-\n    perform(q0, [], Ls, Tape0, Rs),\n    reverse(Ls, Ls1),\n    append(Ls1, Rs, Tape).\n\nperform(qf, Ls, Ls, Rs, Rs) :- !.\nperform(Q0, Ls0, Ls, Rs0, Rs) :-\n    symbol(Rs0, Sym, RsRest),\n    once(rule(Q0, Sym, Q1, NewSym, Action)),\n    action(Action, Ls0, Ls1, [NewSym|RsRest], Rs1),\n    perform(Q1, Ls1, Ls, Rs1, Rs).\n\nsymbol([], b, []).\nsymbol([Sym|Rs], Sym, Rs).\n\naction(left, Ls0, Ls, Rs0, Rs) :- left(Ls0, Ls, Rs0, Rs).\naction(stay, Ls, Ls, Rs, Rs).\naction(right, Ls0, [Sym|Ls0], [Sym|Rs], Rs).\n\nleft([], [], Rs0, [b|Rs0]).\nleft([L|Ls], Ls, Rs, [L|Rs]).\n</code></pre>\n\n<p><a href="http://en.wikipedia.org/wiki/Prolog#Turing_completeness" rel="nofollow">Source</a></p>\n\n<p>However, I\u2019m wondering which parts of the PROLOG language one could strip away (esp. function symbols, clause overloading, recursion, unification) without losing Turing completeness. Are function symbols themselves Turing complete?</p>\n', 'Tags': '<programming-languages><turing-completeness><logic-programming><prolog>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-09T09:14:38.860', 'CommentCount': '3', 'AcceptedAnswerId': '19593', 'CreationDate': '2014-01-09T01:16:39.903', 'Id': '19591'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>At the needs of my HW at uni I need to transform some Horn clauses to Prolog but I cannot figure out how to do it. I found out some guides but they describe how to do it with only one fact. So can you give me a brief example on how to do it?</p>\n\n<p>Eg John is beautiful and rich </p>\n\n<p>we can transform it at: <code>not (Beautiful(John)) ^ not(Rich(John))</code> which is a Horn clause right? So how this can be translated it Prolog?</p>\n\n<p>another example Everyone loves somebody.\nHorn clause: $\\forall X \\exists Y Loves(X,Y)$ how can this be implemented in Prolog?</p>\n\n<p>Thx in advance</p>\n', 'ViewCount': '56', 'ClosedDate': '2014-04-01T22:01:14.757', 'Title': 'Horn clause to Prolog', 'LastActivityDate': '2014-03-17T20:57:50.643', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22718', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '13168', 'Tags': '<first-order-logic><prolog>', 'CreationDate': '2014-03-16T15:54:54.303', 'Id': '22682'}}