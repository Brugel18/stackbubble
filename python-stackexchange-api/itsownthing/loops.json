276_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have two pieces of code in a function which I'm trying to calculate the asymptotic running time for:</p>\n\n<pre><code>for (int x = 0; x &lt; y; x++) {\n    total  +=  total;\n    total  +=  x;\n}\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>while (y &gt; 0) {\n    total  -=  y;\n    y  =  y/2;\n}\n</code></pre>\n\n<p>Combining those two pieces of code, what is the run time of that function and how do I calculate it?</p>\n", 'ViewCount': '258', 'Title': 'Asymptotic time complexity of a two-loop program', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-17T11:59:24.930', 'LastEditDate': '2012-10-17T17:47:31.143', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'OwnerDisplayName': 'Lost', 'PostTypeId': '1', 'Tags': '<time-complexity><imperative-programming><loops>', 'CreationDate': '2012-10-16T16:19:38.743', 'Id': '6126'},276_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have some difficulties performing the worst case analysis on this algorithm.<br>\nThe outermost loop is executed $2N$ times.<br>\nThe while loop, in the worst case, will increase by $2$ each time, so it performs $i/2$ basic operations ($*2$ because double call)</p>\n\n<pre><code>for (i=1; i&lt;=2*N; i++) {\n        j = 0;\n        while (j &lt;= i) {\n            a[i] = function (function (a[i]));\n            if (c[i][j] != 0)\n                j = j + 6;\n            else\n                j = j + 2;\n        }\n    }\n</code></pre>\n\n<p><code>function</code> is the basic operation.<br>\nAm I going the right way? </p>\n', 'ViewCount': '525', 'Title': 'Runtime analysis of a nested loop', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-17T09:19:56.000', 'LastEditDate': '2012-11-17T09:19:56.000', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'OwnerDisplayName': 'eouti', 'PostTypeId': '1', 'Tags': '<algorithms><algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2012-10-17T16:35:50.160', 'Id': '6129'},276_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '196', 'Title': 'A puzzle related to nested loops', 'LastEditDate': '2012-11-29T09:37:21.453', 'AnswerCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4732', 'FavoriteCount': '1', 'Body': '<p>For a given input $N$, how many times does the enclosed statement executes?</p>\n\n<blockquote>\n  <p>for $i$ in $1\\ldots N$ loop <br>\n  $\\quad$for $j$ in $1\\ldots i$ loop <br>\n  $\\quad$$\\quad$for $k$ in $i\\ldots j$ loop <br>\n  $\\quad$$\\quad$$\\quad$$sum = sum + i$ ; <br>\n  $\\quad$$\\quad$end loop; <br>\n  $\\quad$end loop; <br>\n  end loop; <br></p>\n</blockquote>\n\n<p>Can anyone figure out an easy way or a formula to do this in general. Please explain.</p>\n', 'Tags': '<algorithm-analysis><loops>', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-29T09:52:14.510', 'CommentCount': '0', 'AcceptedAnswerId': '7009', 'CreationDate': '2012-11-29T08:20:58.547', 'Id': '7008'},276_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1077', 'Title': 'Triple nested for-loops', 'LastEditDate': '2012-12-08T19:44:52.043', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4935', 'FavoriteCount': '1', 'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/7008/a-puzzle-related-to-nested-loops">A puzzle related to nested loops</a>  </p>\n</blockquote>\n\n\n\n<p>I am trying to count the exact/total number of iterations the following nested for-loops are executed:</p>\n\n<pre><code>s=0\nfor (i: 1 to n)\n for (j: 1 to i)\n  for (k: j to i)\n   s = s + 1\n</code></pre>\n\n<p>I know that the first two for-loops will have <code>n(n+1)/2</code> iterations. My problem is with the third for-loop. Due to this third loop what factor am I supposed to multiply with <code>n(n+1)/2</code> to get the total number of iterations? </p>\n\n<p>Any help would be appreciated? Thanks</p>\n', 'ClosedDate': '2012-12-10T15:34:49.820', 'Tags': '<runtime-analysis><loops>', 'LastEditorUserId': '3016', 'LastActivityDate': '2013-03-10T22:16:03.350', 'CommentCount': '0', 'AcceptedAnswerId': '7258', 'CreationDate': '2012-12-08T19:42:52.560', 'Id': '7256'},276_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If they were all linked to make a condition such as ($1 &lt; i &lt; j &lt; k &lt; n$), I know how to solve, but the last loop is disconnected so I have no clue on how to do these...</p>\n\n<p>the ones like</p>\n\n<pre><code>for(i = 1 to n);\n   for(j = i to n);\n      x++;\n</code></pre>\n\n<p>I can use $1 \\leq i \\leq j \\leq n$ and use $x_1 + x_2 + x_3 = n-1$ and find out the general solution which is $\\frac{n(n+1)}{2}$. But disconnected loops I have no idea. Consider the following for loops.</p>\n\n<pre><code>    for(i = 1 to n);\n       for(j = i to n);\n          for(k = 1 to i*n);\n              x++; (constant time)\n\n\n    for(i = 1 to n-1);\n        for(j = i+1 to n);\n            for(k = 1 to j);\n                x++; (constant time)\n</code></pre>\n\n<p>I need to find the general solution.</p>\n', 'ViewCount': '228', 'Title': 'Analyzing programs with multiple for-loops', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-08T14:56:44.287', 'LastEditDate': '2013-02-04T12:24:30.640', 'AnswerCount': '2', 'CommentCount': '7', 'AcceptedAnswerId': '9606', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6695', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2013-02-04T02:45:11.513', 'Id': '9461'},276_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have some confusion related to calculating the time complexity of this algorithm</p>\n\n<pre><code>opt(i)\n   for j=i:n\n      a = f(i,j) + opt(j+1)   \n   end\n</code></pre>\n\n<p>How is the running time of this algorithm $O(n^2)$?</p>\n', 'ViewCount': '81', 'Title': 'Confusion related to calculating time complexity', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-05-14T07:22:49.993', 'LastEditDate': '2013-05-14T07:01:15.480', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8110', 'Tags': '<algorithm-analysis><loops>', 'CreationDate': '2013-05-14T04:55:26.697', 'Id': '12002'},276_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Is it possible to write a universal loop program for if-then &amp; loop programs and it is possible to write a universal while program for while programs?</p>\n\n<p><hr>\nLong version and some background:</p>\n\n<p>Before anyone asks, YES, it is a homework and I am not here to find an answer, but only clues to help me get this question right !</p>\n\n<p>I\'ll translate the question from French :</p>\n\n<blockquote>\n  <p>We call a <strong>universal program</strong> (also called interpreter) a program that\n  accepts, as an input, another program and simulates it to produce the\n  output of this simulated program. A universal program can also be used\n  to simulate programs written in this very same language or in another\n  language.</p>\n  \n  <p>You can suppose, using G\xf6del\'s coding, that the program to be\n  simulated is given to the universal program in the register r1, and\n  the input on which this program but be simulated in the register r2.\n  The coding of the program could simply give out the characters of the\n  program to be simulated in a table as well as its input registers in\n  another table.</p>\n  \n  <p>Answer the following questions:</p>\n  \n  <p>a. It is possible to write a universal <strong>loop program</strong> for <strong>if-then\n  programs</strong>?</p>\n  \n  <p>b. Is it possible to write a universal <strong>loop program</strong> for <strong>loop\n  programs</strong>?</p>\n  \n  <p>c. Is it possible to write a universal <strong>while program</strong> for <strong>while\n  programs</strong>? To reach a satisfying answer/proof lever, you could use\n  the Church-Turing thesis.</p>\n</blockquote>\n\n<p>Now the question, is where do I start with this ? My head\'s going in every direction at the same time, I\'m just going crazy.</p>\n\n<p>NOTES :</p>\n\n<p><strong>if-then programs</strong> are defined like this :</p>\n\n<p>We consider a if-then program to be defined like a loop program, excepted that there are no loops, but an instruction "if rj then []" (rj is the register "rj", the j\'th register)</p>\n\n<p>I know for sure this has something to do with imbricated loops...</p>\n\n<p>Any clues would be greatly appreciated !</p>\n\n<p>Thanks a lot</p>\n', 'ViewCount': '62', 'Title': 'Is it possible to write a universal loop program for if-then & loop programs and it is possible to write a universal while program for while progra', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-06-18T20:31:25.733', 'LastEditDate': '2013-06-18T20:31:25.733', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8737', 'Tags': '<turing-completeness><loops>', 'CreationDate': '2013-06-18T18:00:34.487', 'Id': '12744'},276_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>This is a question I found in a practice exam while I am preparing for my mid term exam.</p>\n\n<p>The answer needs justification, either a pseudo code or a logical explanation why not.</p>\n\n<p>What puzzled me about that question is that we already know that all LOOP programs terminate at some point, the question seems odd to me.</p>\n\n<p>Any references about LOOP and/or WHILE programs are  welcome. Our professor didn't give much.</p>\n", 'ViewCount': '90', 'Title': 'Can a Turing machine decide if a LOOP program stops for the integer input 0', 'LastActivityDate': '2013-06-26T02:48:46.597', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12905', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8874', 'Tags': '<turing-machines><halting-problem><loops>', 'CreationDate': '2013-06-26T01:31:21.623', 'Id': '12903'},276_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have two for loops, one nested within the other. I have two int variables n and U, where <code>U &gt; n</code>. I know that the outer loop runs exactly U times (pretty much <code>for(int i = 0; i &lt; U -1; i++)</code>), and the inner loop runs exactly n times in total <strong>for the duration of the entire execution</strong>. It can run n times once and never run again, or it can run once in each iteration of the outer loop n times, or anything in between.</p>\n\n<p>It's obvious that this runs in O(nU) time. However, I think I can also state it runs in <code>theta(U + n)</code> time because the inner loop runs independently of the outer one. But still, they are nested, and not multiplying the runtimes of nested loops feels awkward. </p>\n\n<p>Intuitively I know I am right, but I don't really know how to show it. I'm not looking for a formal proof, but any kind of insight is welcome.   </p>\n", 'ViewCount': '137', 'Title': 'Theta Runtime of Nested for Loops', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-31T08:16:53.290', 'LastEditDate': '2013-07-31T08:16:53.290', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8943', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2013-06-30T17:08:51.800', 'Id': '12995'},276_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '268', 'Title': 'What is the asymptotic runtime of this nested loop?', 'LastEditDate': '2014-03-29T14:10:44.667', 'AnswerCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8690', 'Body': '<p>I am trying to analyse the runtime of this algorithm:</p>\n\n\n\n<pre><code>for(i=1; i &lt; n; i++){\n   for(j=1; j &lt;= i; j++){\n         statement1;\n   }       \n}\n</code></pre>\n\n<p>Expanding the above loop into.</p>\n\n<ul>\n<li><p>First : </p>\n\n   \n\n<pre><code>for(j=1; j &lt;= 1; j++){\n   statement1;          //complexity O(1)\n}\n</code></pre></li>\n<li><p>Second:  </p>\n\n   \n\n<pre><code>for(j=1; j &lt;=2 ; j++){\n   statement1;          //complexity O(2)\n}       \n</code></pre></li>\n</ul>\n\n<p>... </p>\n\n<ul>\n<li><p>n-th:</p>\n\n<pre><code>for(j=1; j &lt;= n; j++){\n   statement1;          //complexity O(n)\n}\n</code></pre></li>\n</ul>\n\n<p>So the runtime of the loop should be</p>\n\n<p>$\\qquad \\displaystyle O(1) + \\dots + O(n) = O\\Bigl(\\frac{n(n+1)}{2}\\Bigr) = O(n^2)$.</p>\n\n<p>Can I reason like this, or what is the proper way to analyse nested <code>for</code>-loops?</p>\n', 'ClosedDate': '2014-03-29T13:23:48.603', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-29T21:51:39.133', 'CommentCount': '3', 'AcceptedAnswerId': '14893', 'CreationDate': '2013-10-07T06:50:10.650', 'Id': '14880'},276_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have this code fragment:</p>\n\n<pre><code>for( i=0; i&lt;n; i++ )\n    for( j=0; j&lt;i; j++ )\n        for( k=0; k&lt;j; k++ )\n            S;\n</code></pre>\n\n<p>I need to find the number of times that S is executed in that code block. I <a href="http://www.wolframalpha.com/input/?i=sum%20%28sum%28sum%281%29%20from%20k=0%20to%20j%29%20from%20j=0%20to%20i%29%20from%20i=0%20to%20n" rel="nofollow">plugged it into Wolfram Alpha</a> but I am not sure if that is the right answer. </p>\n\n<p>I want to be able to do the math in order to figure the answer out so can someone point me in the right direction?</p>\n', 'ViewCount': '170', 'Title': 'Sum number of times statement is executed in triple nested loop', 'LastActivityDate': '2013-10-29T22:58:43.080', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16558', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11052', 'Tags': '<runtime-analysis><loops>', 'CreationDate': '2013-10-29T21:07:44.987', 'FavoriteCount': '1', 'Id': '16555'},276_11:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So I have this code:</p>\n\n<pre><code>  done &lt;- false                                     [1]\n  n &lt;- 0                                            [1]\n  while (n &lt; a) and (done = false)                  [(n+1)(1+1+1)]\n    done &lt;- true                                    [n]\n    for m &lt;- (a- 1) downto n                        [n(1+1+1+1)]\n       if list[m] &lt; list[m - 1] then                [n]\n         tmp &lt;- list[m]                             [n]\n         list[m] &lt;- list[m-1]                       [n]\n         list[m - 1] &lt;- tmp                         [n]\n         done &lt;- false                              [n]\n       n &lt;- n + 1                                   [1]\n  return list                                       [1]\n</code></pre>\n\n<p>Am I doing this right? My conclusions are that the inne for-loop runs (n^2 + n) / 2 times and the outher while-loop runs n+1 times. I don't know how to properly argue for that the bubble sort has the complexity O(n^2) </p>\n", 'ViewCount': '207', 'Title': 'Bubble sort complexity', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-31T16:00:25.457', 'LastEditDate': '2014-01-31T14:19:33.393', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13277', 'Tags': '<algorithm-analysis><asymptotics><runtime-analysis><loops>', 'CreationDate': '2014-01-31T13:41:59.570', 'Id': '20155'},276_12:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to write a function that takes in a 2D list, that is a NEARLY magic square, meaning that if you perform ONE swap, it becomes a magic square. The function would take in this nearly magic square, and would return the magic square after the values have been swapped.</p>\n\n<p>I wrote an "isMagic" function already that loops through the sums of the columns and rows, but am having difficulty reasoning through this MAKEMAGICSQUARE function.</p>\n\n<p>So I know that makeMagic([[4,9,1],[3,5,7],[8,2,6]]) would return [[4,9,2],[3,5,7],[8,1,6]].</p>\n\n<p>Also, IMPORTANT REFERENCE <a href="http://en.wikipedia.org/wiki/Magic_square" rel="nofollow">http://en.wikipedia.org/wiki/Magic_square</a>. </p>\n', 'ViewCount': '27', 'ClosedDate': '2014-03-04T09:49:25.157', 'Title': 'make Magic Square?', 'LastActivityDate': '2014-03-01T05:05:43.687', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15149', 'Tags': '<loops>', 'CreationDate': '2014-03-01T01:51:23.310', 'Id': '22147'},276_13:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following code segment :</p>\n\n<pre><code>for (int i = 1; i &lt;= n; i++ ) {\n    for (int j = 1; j &lt;= n; j = j + i ) {\n          printf("Hi");\n    }\n}\n</code></pre>\n\n<p>Here, the outer loop will execute $ n $ times, but the execution of inner loop depends upon the value of $ i $.  </p>\n\n<ul>\n<li>When $ i = 1 $ inner loop will execute $ n $ times.</li>\n<li>When $ i = 2 $ inner loop will execute $ \\frac{n}{2} $ times.</li>\n<li>When $ i = 3 $ inner loop will execute $ \\frac{n}{3} $ times.<br>\n$ \\vdots \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\vdots \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  \\vdots  $</li>\n<li>When $ i = n $ inner loop will execute $ 1 $ time  </li>\n</ul>\n\n<p>So complexity will be given by<br>\n$$\n \\begin{align}\n  T(n) &amp;= \\frac{n}{1} + \\frac{n}{2} + \\frac{n}{3} + \\cdots + \\frac{n}{n}\\\\\n\\\\\n       &amp;= n \\left( 1 + \\frac{1}{2} + \\frac{1}{3} + \\cdots + \\frac{1}{n} \\right) \\\\\\\\\n       &amp;= n \\sum_{k = 1}^{n} { \\frac{1}{k} }\n \\end {align}\n $$\nI am not able to solve $ \\sum_{k=1}^{n} \\frac{1}{k} $. Upon searching I found that it is the $ n^{th} $ Harmonic number ( $ H_n $), but couldn\'t find any closed formula for it. How can I proceed further to calculate $ T(n) $?</p>\n', 'ViewCount': '84', 'Title': 'Calculating time complexity of two interdependent nested for loops', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-31T08:06:56.143', 'LastEditDate': '2014-03-31T08:06:56.143', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '22825', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11131', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2014-03-19T20:10:26.453', 'Id': '22823'},276_14:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to work through various exercises in Skiena\'s "Algorithm Design Manual." One problem that I am stuck on is as follows:</p>\n\n<blockquote>\n  <p>What value is returned by the following function? Express your answer as a function of n. Give the worst-case running time using Big Oh notation.</p>\n\n<pre><code>function conundrum(n)\n    r:=0\n    for i:=1 to n do\n        for j:=i+1 to n do\n            for k:=i+j-1 to n do\n                r:=r+1\n    return(r)\n</code></pre>\n</blockquote>\n\n<p>My first attempt at this problem began with trying to solve it when $n$ is even and my first observation was that $r$ is never incremented for any value of $i$ greater than $n/2$ (I am assuming that a statement along the lines of "$k:=l$ to $n$" is not executed for any $l&gt;n$. Indeed, upon working out the above function for several different values of $n$, I thought that I could intuit that the sum calculated by the function had the following form $\\sum_{p=1}^{n/2}\\sum_{q=1}^{2p-1}q$-- to intuit this, I began the first loop at $i=n/2$ and worked backwards. Working this sum out, I got $\\frac 1 {24} n(n(2n-3)-26)$. To my dismay, upon checking this answer, I found that the correct answer for even $n$ is $\\frac 1 {24} n(n+2)(2n-1)$. Any thoughts or hints about what I am doing wrong?</p>\n', 'ViewCount': '23', 'ClosedDate': '2014-03-29T12:00:47.007', 'Title': 'Complexity of a nested for loop', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-29T11:58:37.577', 'LastEditDate': '2014-03-29T11:58:37.577', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16262', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2014-03-29T08:30:15.913', 'Id': '23215'},276_15:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What are the time complexities of the following code?  I posted this on the general stackexchange website, but it was suggested that I post it here.</p>\n\n<pre><code>def func(n):\n    for _ in range(n):\n        if n == 4:\n            for _ in range(n):\n                &lt;O(1) operation&gt;\n</code></pre>\n\n<p>It will only be O(n^2) for one specific input (n = 4) but is O(n) for all other inputs. In this case the worst case is obviously O(n^2), yet my instructor says that O(n) is the correct answer. If "big-Oh" notation is to indicate the worst case scenario, why is it not O(n^2)?</p>\n\n<p>Another one is:</p>\n\n<pre><code>def func2(n):\n    for _ in range(n):\n        if n%2 == 0:\n            for _ in range(n):\n                &lt;O(1) operation&gt;\n</code></pre>\n\n<p>I am not so certain about the run time of this piece of code. Again, worst case is O(n^2). This time half of all possible inputs results in the worst case. Would this suffice in saying that the code runs in O(n^2) time?</p>\n\n<p>If the first part is O(n) and the second part is O(n^2), is there a general rule of thumb when you choose the truly worst case for the "big-Oh" representation?</p>\n', 'ViewCount': '15', 'ClosedDate': '2014-04-01T07:30:59.673', 'Title': 'Time complexity of complex nested for loops', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-01T07:29:16.013', 'LastEditDate': '2014-04-01T07:29:16.013', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16345', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2014-04-01T04:51:22.973', 'Id': '23311'},276_16:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to figure out what the big o estimate of the following for loop is.</p>\n\n<pre><code>for(int i = 10; i to 100; i++){\nfor(int j = 1; j to i; j++){\nfor(int k = 1; k to j; k++){\ns=s+i+j;\n}\n}\n}\n</code></pre>\n\n<p>I was thinking that the two inner loops run n times but I am unsure about the first loop. </p>\n\n<p>What would the Big O estimate be for this code?</p>\n', 'ViewCount': '49', 'Title': 'What is the Big O estimate of a nested for loop?', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-04-15T21:50:41.567', 'LastEditDate': '2014-04-15T21:50:41.567', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16798', 'Tags': '<algorithms><loops>', 'CreationDate': '2014-04-15T17:28:03.380', 'Id': '23815'},276_17:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was working on a programming puzzle were given a list of words, the anagrams should be printed together. For example, <code>{"cat", "bat", "act", "tab", "mat", "listen","silent"}</code> should result in <code>[listen, silent], [mat], [bat, tab], [cat, act]</code>.</p>\n\n<p>I have the following pseudocode:</p>\n\n<pre><code>mapStrings():\n For each string in the string array:\n    Find a key for string using a hash function h() \n    If that key does not exist in the hash table, add the key \n    If the key exists, append its value with the string\n\n Print value for each key\n\nh():\n  sum = 0\n  For each character in string:\n    Add ASCII value of the character to sum\n  return sum\n</code></pre>\n\n<p>The time complexity of the for loop in the <code>mapStrings()</code> method would be $\\cal O(n)$ as it goes over each element in the string array of length n. </p>\n\n<p>The call to the method <code>h()</code> would be $\\cal O(m)$, where $m = m_{1} + m_{2} + ... + m_{n}$ is the sum of lengths of each string in the string array.</p>\n\n<p>Hence the total time complexity would be $\\cal O(n+m)$ = $\\cal O(N)$, where $N = n+m$.</p>\n\n<ol>\n<li>Are my statements correct?  </li>\n<li>If it is, then what would the time complexity\nbe if the method <code>h()</code>\'s complexity was $\\cal O(n^2)$ instead of $\\cal O(n)$? Would it be\n$\\cal O(n^2 + m) \\approx \\cal O(n^2)$?</li>\n</ol>\n', 'ViewCount': '13', 'ClosedDate': '2014-04-24T20:14:46.580', 'Title': 'Runtime of adding strings to a hashtable', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-24T20:41:25.567', 'LastEditDate': '2014-04-24T20:41:25.567', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5092', 'Tags': '<algorithm-analysis><runtime-analysis><loops>', 'CreationDate': '2014-04-24T20:12:24.817', 'Id': '24087'}