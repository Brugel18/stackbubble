{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m looking for a data structure that stores a set of strings over a character set $\\Sigma$, capable of performing the following operations. We denote $\\mathcal{D}(S)$ as the data structure storing the set of strings $S$.</p>\n\n<ul>\n<li><code>Add-Prefix-Set</code> on $\\mathcal{D}(S)$: given some set $T$ of (possibly empty) strings, whose size is bounded by a constant and whose string lengths are bounded by a constant, return $\\mathcal{D}( \\{ t s\\ |\\ t \\in T, s \\in S\\} )$. Both these bounding constants are global: they are the same for all inputs $T$.</li>\n<li><code>Get-Prefixes</code> on $\\mathcal{D}(S)$: return $\\{ a \\ | \\ as \\in S, a \\in \\Sigma \\}$. Note that I don\'t really mind what structure is used for this set, as long as I can enumerate its contents in $O(|\\Sigma|)$ time.</li>\n<li><code>Remove-Prefixes</code> on $\\mathcal{D}(S)$: return $\\mathcal{D}( \\{ s \\ | \\ as \\in S, a \\in \\Sigma  \\} )$.</li>\n<li><code>Merge</code>: given $\\mathcal{D}(S)$ and $\\mathcal{D}(T)$, return $\\mathcal{D}(S \\cup T)$.</li>\n</ul>\n\n<p>Now, I\'d really like to do all these operations in $O(1)$ time, but I\'m fine with a structure that does all these operations in $o(n)$ time, where $n$ is the length of the longest string in the structure. In the case of the merge, I\'d like a $o(n_1+n_2)$ running time, where $n_1$ is $n$ for the first and $n_2$ the $n$ for the second structure.</p>\n\n<p>An additional requirement is that the structure is immutable, or at least that the above operations return \'new\' structures such that pointers to the old ones still function as before.</p>\n\n<p>A note about amortization: that is fine, but you have to watch out for persistence. As I re-use old structures all the time, I\'ll be in trouble if I hit a worst case with some particular set of operations on the same structure (so ignoring the new structures it creates).</p>\n\n<p>I\'d like to use such a structure in a parsing algorithm I\'m working on; the above structure would hold the lookahead I need for the algorithm.</p>\n\n<p>I\'ve already considered using a <a href="http://en.wikipedia.org/wiki/Trie">trie</a>, but the main problem is that I don\'t know how to merge tries efficiently. If the set of strings for <code>Add-Prefix-Set</code> consists of only single-character strings, then you could store these sets in a stack, which would give you $O(1)$ running times for the first three operations. However, this approach doesn\'t work for merging either.</p>\n\n<p>Finally, note that I\'m not interested in factors $|\\Sigma|$: this is constant for all I care.</p>\n', 'ViewCount': '657', 'Title': "Is there a 'string stack' data structure that supports these string operations?", 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-01T01:47:57.227', 'LastEditDate': '2012-04-01T01:47:57.227', 'AnswerCount': '0', 'CommentCount': '10', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '92', 'Tags': '<data-structures><time-complexity><strings><stack>', 'CreationDate': '2012-03-22T17:49:11.333', 'FavoriteCount': '3', 'Id': '666'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><em>This is a follow up to the <a href="http://cs.stackexchange.com/q/796/31">How does Stack Inspection work?</a> that explores the notion in more detail</em></p>\n\n<p><a href="http://www.securingjava.com/chapter-three/chapter-three-6.html">Stack inspection</a> is a mechanism for ensuring security in the context of the JVM and CLR virtual machines when externally downloaded code modules of different levels of trust may be running together. That system libraries need some way of distinguishing between calls originating in untrusted code and calls originating from the trusted application itself. This is done by associating with code the principal corresponding to its origin. Then access permissions are recorded on the stack and whenever a call to a sensitive, system method is made, the stack is traversed to see whether the appropriate permissions for the principal making the call are present on the stack.</p>\n\n<blockquote>\n  <p>What are the limitations of stack inspection? What mechanisms have been proposed to replace it? Have any significant changes been made to the model since it was introduced in the late 90s?</p>\n</blockquote>\n', 'ViewCount': '441', 'Title': 'Limitations of Stack Inspection', 'LastEditorUserId': '31', 'LastActivityDate': '2012-03-26T16:46:34.783', 'LastEditDate': '2012-03-26T12:19:10.577', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '798', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<security><stack-inspection>', 'CreationDate': '2012-03-26T10:33:51.693', 'Id': '795'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '433', 'Title': 'How does Stack Inspection work?', 'LastEditDate': '2012-04-22T16:17:25.500', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '31', 'FavoriteCount': '1', 'Body': '<p><em>This is precursor to my other, more advanced <a href="http://cs.stackexchange.com/q/795/31">question</a> about Stack Inspection.</em></p>\n\n<p>Stack Inspection is a security mechanism introduced in the JVM to deal with running code originating from locations having different levels of trust. This is question aims at finding a simple description of its functionality. So:</p>\n\n<blockquote>\n  <p>How does stack inspection work?</p>\n</blockquote>\n', 'Tags': '<terminology><security><stack-inspection>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:17:25.500', 'CommentCount': '0', 'AcceptedAnswerId': '797', 'CreationDate': '2012-03-26T11:59:14.860', 'Id': '796'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '197', 'Title': 'How to detect stack order?', 'LastEditDate': '2012-07-02T19:24:50.887', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1895', 'FavoriteCount': '2', 'Body': "<p>We take the sequence of integers from $1$ to $n$, and we push them onto a stack one by one in order. Between each push, we can choose to pop any number of items from the stack (from 0 to the current stack size).</p>\n\n<p>Every time we pop a value from the stack, we will print it out.</p>\n\n<p>For example, $1,2,3$ is printed out when we do <code>push, pop, push, pop, push, pop</code>. $3,2,1$ comes from <code>push, push, push, pop, pop, pop</code>. </p>\n\n<p>However, $3,1,2$ is not a possible printout, because it is not possible to have $3$ printed followed by $1$, without seeing $2$ in between.</p>\n\n<p>Question: <strong>How can we detect impossible orders like $3,1,2$?</strong></p>\n\n<p>In fact, based on my observation, I have come out a potential solution. But the problem is I can't prove my observation is complete.</p>\n\n<p>The program that I wrote with the following logic:</p>\n\n<p>When the current value minus the next value is larger than 1, a value between current and next cannot appear after next. For example, if current=3 and next=1, then the value between current (3) and next (1) is 2 which cannot appear after next(1), hence $3,1,2$ violates the rule.</p>\n\n<p>Does this cover all cases?</p>\n", 'Tags': '<algorithms><stack>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-04T13:50:57.453', 'CommentCount': '0', 'AcceptedAnswerId': '2594', 'CreationDate': '2012-07-02T12:01:14.353', 'Id': '2582'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I was asked a question on how to use a pair of Queues to create a Stack and how to use a pair of Stacks to create a Queue. Any thoughts on how I would do this? Right now I don't even know where to start.</p>\n", 'ViewCount': '97', 'Title': 'Using Queues for a Stack and Stacks for a Queue', 'LastActivityDate': '2012-10-19T00:44:19.440', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4261', 'Tags': '<data-structures><priority-queues><stack>', 'CreationDate': '2012-10-18T21:43:10.067', 'Id': '6155'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '91', 'Title': 'A puzzle in Permutation', 'LastEditDate': '2012-12-01T12:40:19.733', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4732', 'FavoriteCount': '1', 'Body': "<p>There are two stacks A and B. </p>\n\n<pre><code>A :  a,b,c,d   ('a' is on top and 'd' is at the bottom of the stack)\nB :  (empty)\n</code></pre>\n\n<p>There are two rules.</p>\n\n<pre><code>If an element of A is popped, it must be printed immediately or pushed into B.\nIf an element of B is popped, it can only be printed.\n</code></pre>\n\n<p>So, how many permutations of a,b,c,d are possible?  (continue reading)</p>\n\n<p>P.S. Well, I did calculations manually(didn't use any formula) and got 14 as the answer. However, it took around 10 minutes to do the lengthy steps. So, is there an easy way to do this? </p>\n", 'Tags': '<stack><permutations>', 'LastEditorUserId': '4732', 'LastActivityDate': '2012-12-01T13:12:50.447', 'CommentCount': '0', 'AcceptedAnswerId': '7080', 'CreationDate': '2012-12-01T11:22:13.987', 'Id': '7079'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I was practicing the following problem :</p>\n\n<blockquote>\n  <p>There are a total of $N$ operations.\n  At each operation, you can either add an element to the top or remove several elements as described below.</p>\n  \n  <p>Inputs are integers. An input other than $-1$ indicates that we have to add the elements in last in first out fashion (LIFO). If the input is $-1$, then we have to remove (pop) all the elements that lie above the current minimum element of the stack, and then pop that minimum element.</p>\n  \n  <p>For each $-1$ in the inputs, print $(m,p)$ where $m$ is the minimum element on the stack and $p$ counts how many total elements we popped from the stack.</p>\n</blockquote>\n\n<p>Example :</p>\n\n<pre><code>N=14 (Total 4 operations)\n9 \n6\n8\n-1\n2\n0\n6\n-1\n3\n1\n2\n10\n5\n-1\n\nIn above example : First three operation is inserting operation ,\nthat is we need to insert them in LIFO Fashion.\nSo the stack after third operation is : [9  6   8*] \n    PLEASE NOTE * represent the element at the top  of the stack.\nFourth Operation is -1 , that is we have to remove all elements\n(including the minimum ) , that lie above the minimun elements.\nThe Minimum Element is 6 ,so we remove 8 and 6 and Hence the stack now is :\n[9*]\nSo answer for fourth operation is (6,2)\n6 - the minimum element in the stack and 2 ,as we removed \ntotal 2 elements from the stack.\n\nOperation 5 th ,6 th and 7th are Inserting operations.\nAfter 4 th operation , the stack was [9*]\nAfter 7th operation , the stack looks like [9 2 0 6*]\n8th operation is -1 . Minimum element is 0 ,so we should remove 0,6 \n    from the stack\nHence Answer is (0,2)\nAs the minimum element is "0" and we removed total "2" elements from\n    the stack.\n\nThe  stack at the end of eighth operation is:\n[9 2]\n\nOperation 9 ,10 ,11 12,13  are inserting operations\nSo Stack after 13th operation is:\n[9 2 3 1 2 10 5* ]\noperation 14 is -1.\nThe minimum element  in the stack is 2. However 2 lies at two \n    different positions in the stack .\nBut we should remove that  2 , which is nearest to the top of the stack \n(In order word ,if the minimum lies at more than two positions in the \n    stack ,then the one which is closer to the top of the \nstack is considered).\nSo remove 2 at Index 5 (as it is closer to the top of stack) and element\nthat lies above it in stack.\nSo after removing 2(the minimum element ) and 10,5 (the elements above \n    the min element) \nThe stack looks like:\n[9 2 3 1*]\n    Answer is (2,3) //As 2 is the min element and we popped "3" elements\n\nPLEASE NOTE * represent the element at the top  of the stack.\n</code></pre>\n\n<h2>My approach</h2>\n\n<p>I am using a simple stack for the above problem. But the constraint is high: $1 \\le N \\le 10^6$. There are many $-1$\'s in the input, so a simple stack will work very slowly. The time limit for the problem is just 1 second.</p>\n', 'ViewCount': '345', 'Title': 'Efficient algorithm for a modified stack to pop the smallest element', 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-03T20:51:13.180', 'LastEditDate': '2012-12-03T20:51:13.180', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7127', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2041', 'Tags': '<algorithms><arrays><stack>', 'CreationDate': '2012-12-03T13:21:05.410', 'Id': '7124'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm trying to do the exercise 2.12 of the book Essential of programing languages 3rd edition.</p>\n\n<p>They ask me to do a procedural representation for a stack, like they did in the example of page 40 with enviroment.</p>\n\n<p>This is the example.</p>\n\n<pre><code>(define empty-env\n   (lambda ()\n   (lambda (search-var)\n      (report-no-binding-found search-var))\n   )\n)\n\n\n(define extend-env\n   (lambda (saved-var saved-val saved-env)\n   (lambda (search-var)\n   (if (eqv? search-var saved-var)\n       saved-val\n       (apply-env saved-env search-var)\n    )\n   ))\n )\n\n\n\n (define apply-env\n    (lambda (env search-var)\n    (env search-var))\n  )\n</code></pre>\n\n<p>In the exercise they ask me for the next procedures:</p>\n\n<pre><code>push, pop, top, and empty-stack?\n</code></pre>\n\n<p>I think I did the push, top and empty-stack. But I can't figure out how to do the pop.</p>\n\n<p>Thank you.</p>\n", 'ViewCount': '104', 'Title': 'procedural representation for the stack? (LIFO structure)', 'LastEditorUserId': '867', 'LastActivityDate': '2013-01-15T02:53:56.813', 'LastEditDate': '2013-01-15T02:53:56.813', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2076', 'Tags': '<data-structures><stack>', 'CreationDate': '2013-01-15T00:54:29.453', 'Id': '8939'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I want to begin by saying that this is NOT a homework question. I am reading Introduction to Algorithms - the famous CLRS text to become a better programmer. I am trying to solve the problems and exercises given in the book by myself. </p>\n\n<p>I am trying to solve <strong>Excercise 10.1-2</strong> from <strong>Chapter 10 Elementary Data Structures</strong> from CLRS Second Edition. Here is what its states:</p>\n\n<blockquote>\n  <p>Explain how to implement two stacks in one array <em>A[1..n]</em> in such a way that neither stack overflows unless the total number of elements in both stacks together is <em>n</em>. The PUSH and POP operations should run in <em>O(1)</em> time.</p>\n</blockquote>\n\n<p>The solution that I have come up with so far is:</p>\n\n<blockquote>\n  <p>Let array <em>A[1..n]</em> implement two stacks: <em>S1[1..i]</em> and <em>S2[i..n]</em>. </p>\n  \n  <p>For the <em>PUSH-S1</em> and <em>PUSH-S2</em> operations, if the stack is 'full' then start pushing elements into the <em>other</em> stack (eg. if stack <em>S1</em> is full when a new element is trying to be pushed in, then push that element into stack <em>S2</em> and vice versa). </p>\n</blockquote>\n\n<p>The problem with this approach is I will not be able to <em>POP-S1</em> or <em>POP-S2</em> reliably as there is no way of 'remembering' which element belongs to which stack. If the elements of the stack are <em>(key,value)</em> pairs, the key being the stack number, then to pop an element I would have to search, in the worst case, i or (n-i) times - which will be <em>O(n)</em> (feel free to correct me if I am wrong here), which would not be <em>O(1)</em>. </p>\n\n<p>I have been banging my head on the question for quite a while now. Am I on the right track? Can someone give my possible pointers for solving this problem?</p>\n\n<p>In general, how should I 'think' about these problems? Or can only really intelligent people solve these types of problems? Will tackling/solving problems like these (i.e. gaining experience) help me become better at this?</p>\n\n<p>I await enlightenment.</p>\n", 'ViewCount': '1809', 'Title': 'How to implement two stacks in one array?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-07-31T15:48:39.903', 'LastEditDate': '2013-07-31T15:48:39.903', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '9057', 'Tags': '<data-structures><arrays><stack>', 'CreationDate': '2013-07-28T14:03:22.530', 'Id': '13477'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have thought about it for a while, and I'm not really sure what is the best way to:</p>\n\n<blockquote>\n  <p>1.Implement a stack using 2 queues.</p>\n  \n  <p>2.Implement a queue using 2 stacks.</p>\n</blockquote>\n\n<p>I have only though about something trivial that takes O(n) time for dequeue and enqueue, and O(n) time for push and pop.</p>\n\n<p>Can I do better than that?\nAre there more efficient ways to do 1 and 2?</p>\n", 'ViewCount': '16', 'ClosedDate': '2014-02-28T13:23:58.910', 'Title': 'Impelementing a stack using a 2 queues, and a queue using 2 stacks', 'LastEditorUserId': '14724', 'LastActivityDate': '2014-02-28T13:21:49.683', 'LastEditDate': '2014-02-28T13:21:49.683', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14724', 'Tags': '<algorithms><time-complexity><stack>', 'CreationDate': '2014-02-28T13:14:28.070', 'Id': '22131'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '42', 'Title': 'Does the OS create its own bootstrapped stack frame when running a program?', 'LastEditDate': '2014-03-18T13:01:50.127', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '13139', 'FavoriteCount': '1', 'Body': '<p>I\'ve been doing nand2tetris exercises and I\'m quite interested in how compilation actually works. In nand2tetris when creating the VM language I had to create a "bootstrap" which called the main method of the program.</p>\n\n<p>In other languages such as C, Java or even interpreted languages like PHP, does the OS/interpreter/VM automatically create its own first frame on the stack, and then invokes the main method of the program as a new second stack frame?</p>\n\n<p>I\'m trying to think about how initial arguments are passed to a program, and how programs are able to return values. Does each OS have a standard way of creating this initial stack frame which all languages adhere to? When I run a program from command prompt and pass it arguments, what is actually creating that initial stack frame that pushes these arguments onto the stack and that invokes my main method?</p>\n', 'Tags': '<operating-systems><compilers><stack>', 'LastEditorUserId': '31', 'LastActivityDate': '2014-03-18T23:08:51.803', 'CommentCount': '1', 'AcceptedAnswerId': '22773', 'CreationDate': '2014-03-18T12:20:06.083', 'Id': '22753'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Assuming that a stack data structure is available, how can this data structure be used to compute a representation of an integer in base three? For example, the algorithm for <code>printBase3</code> would return <code>12020</code> on input <code>141</code>.</p>\n', 'ViewCount': '26', 'ClosedDate': '2014-03-28T12:34:37.913', 'Title': 'How to get a base-3 representation of an integer using a stack?', 'LastEditorUserId': '15702', 'LastActivityDate': '2014-03-27T20:17:13.190', 'LastEditDate': '2014-03-27T20:17:13.190', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15702', 'Tags': '<stack>', 'CreationDate': '2014-03-27T19:04:02.547', 'Id': '23149'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am now preparing for a test in my algorithms course and I have stumbled upon a question about a data structure which seems too trivial for me, but is probably not trivial at all.</p>\n\n<p>The question is:</p>\n\n<blockquote>\n  <p>Let a "minimum stack" be a data structure that supports the following functions:</p>\n  \n  <ol>\n  <li><p>Creating a new empty data structure.</p></li>\n  <li><p>Inserting element X.</p></li>\n  <li><p>Returning the newest element and removing it from the data structure.</p></li>\n  <li><p>Returning the minimal element (the element with the smallest value). (without removing it)</p></li>\n  <li><p>Changing the minimal element\'s value to k. (Hint: say T is the number of elements added after the minimal element).</p></li>\n  </ol>\n</blockquote>\n\n<p>Now, I have thought about using a linked list which is isomorphic to an actual stack, hence elements can be added and removed only from the tail, but scanning the list from head to tail is possible.</p>\n\n<p>I\'ve checked and all the functions except 4 and 5 turn out to be O(1), but 4 turns out to be O(n) at best, and 5 turns out to be O(T).</p>\n\n<p>My question is: How can I do 4 in O(1) time, so that all the other functions are also O(1)?\nI am not looking for full answers, just hints that will guide me to a full answer.</p>\n', 'ViewCount': '43', 'Title': '"Minimum Stack"', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-29T12:04:06.387', 'LastEditDate': '2014-03-29T12:04:06.387', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14724', 'Tags': '<data-structures><priority-queues><stack>', 'CreationDate': '2014-03-29T08:33:27.600', 'Id': '23216'}}