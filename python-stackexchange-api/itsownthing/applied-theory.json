120:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1377', 'Title': 'What is the significance of context-sensitive (Type 1) languages?', 'LastEditDate': '2012-03-07T16:09:28.450', 'AnswerCount': '9', 'Score': '23', 'PostTypeId': '1', 'OwnerUserId': '26', 'FavoriteCount': '1', 'Body': '<p>Seeing that in the <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy">Chomsky Hierarchy</a> Type 3 languages can be recognised by a state machine with no external memory (i.e., a finite automaton), Type 2 by a state machine with a <em>single</em> stack (i.e. a push-down automaton) and Type 0 by a state machine with <em>two</em> stacks (or, equivalently, a tape, as is the case for Turing Machines), how do Type 1 languages fit into this picture? And what advantages does it bring to determine that a language is not only Type 0 but Type 1?</p>\n', 'Tags': '<formal-languages><applied-theory><computability><automata><formal-grammars>', 'LastEditorUserId': '69', 'LastActivityDate': '2012-03-08T02:30:13.020', 'CommentCount': '9', 'AcceptedAnswerId': '31', 'CreationDate': '2012-03-06T20:06:29.977', 'Id': '14'},121:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Today, a talk by Henning Kerstan ("Trace Semantics for Probabilistic Transition Systems") confronted me with category theory for the first time. He has built a theoretical framework for describing probablistic transition systems and their behaviour in a general way, i.e. with uncountably infinite state sets and different notions of traces. To this end, he goes up through several layers of abstraction to finally end up with the notion of <a href="https://en.wikipedia.org/wiki/Monad_%28category_theory%29">monads</a> which he combines with measure theory to build the model he needs.</p>\n\n<p>In the end, it took him 45 minutes to (roughly) build a framework to describe a concept he initially explained in 5 minutes. I appreciate the beauty of the approach (it <em>does</em> generalise nicely over different notions of traces) but it strikes me as an odd balance nevertheless.</p>\n\n<p>I struggle to see what a monad really <em>is</em> and how so general a concept can be useful in applications (both in theory and practice). Is it really worth the effort, result-wise?</p>\n\n<p>Therefore this question: </p>\n\n<blockquote>\n  <p>Are there problems that are natural (in the sense of CS) on which\n  the abstract notion of monads can be applied and helps (or is even\n  instrumental) to derive desired results (at all or in a nicer way \n  than without)?</p>\n</blockquote>\n', 'ViewCount': '145', 'Title': 'Natural occurrences of monads that make use of the category-theoretical framework', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-11T08:35:19.520', 'LastEditDate': '2012-03-10T13:37:19.050', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '205', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<applied-theory><category-theory>', 'CreationDate': '2012-03-08T20:45:24.383', 'Id': '138'},122:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '128', 'Title': 'What are some applications of binary finite fields in CS?', 'LastEditDate': '2012-10-27T22:33:00.597', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '699', 'FavoriteCount': '1', 'Body': '<p>I was looking at details on <a href="http://en.wikipedia.org/wiki/Finite_field" rel="nofollow">finite fields</a>. Finite binary fields, e.g. $\\mathbb{F_2}$, are used in CS in some places such as circuit theory [1]. </p>\n\n<blockquote>\n  <p>What are some key applications of finite fields in CS?</p>\n</blockquote>\n\n<p>I am also looking for uses of $\\mathbb{F_{2}^n}$ which <a href="http://mathworld.wolfram.com/FiniteField.html" rel="nofollow">Mathworld</a> shows can be represented as binary vectors.</p>\n\n<hr>\n\n<p>[1] <a href="http://eccc.hpi-web.de/report/2012/133/download/" rel="nofollow">Noga Alon and Gil Cohen. On Rigid Matrices and Subspace Polynomials. Electronic Colloquium on Computational Complexity, Report No. 133 (2012)</a>.</p>\n', 'Tags': '<algorithms><reference-request><discrete-mathematics><applied-theory>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-10-27T22:33:00.597', 'CommentCount': '4', 'AcceptedAnswerId': '6331', 'CreationDate': '2012-10-27T02:40:18.207', 'Id': '6326'},123:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>What's the use of studying trigonometry in computer science? I mean, is it essential? Does it have a specific application in computer science? Because I can't seem to muster enough motivation for learning it.</p>\n", 'ViewCount': '1264', 'Title': 'Trigonometry in computer science', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-09T11:23:02.030', 'LastEditDate': '2012-10-28T11:17:56.217', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '6332', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2297', 'Tags': '<education><mathematical-analysis><applied-theory>', 'CreationDate': '2012-10-27T02:41:42.993', 'Id': '6327'},124:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2244', 'Title': 'What use are groups, monoids, and rings in database computations?', 'LastEditDate': '2013-02-11T19:38:25.807', 'AnswerCount': '6', 'Score': '22', 'PostTypeId': '1', 'OwnerUserId': '3131', 'FavoriteCount': '21', 'Body': '<p>Why would a company like Twitter be interest in algebraic concepts like groups, monoids and rings. <a href="https://github.com/twitter/algebird">https://github.com/twitter/algebird</a></p>\n\n<p>All I could find is:</p>\n\n<blockquote>\n  <p>Implementations of Monoids for interesting approximation algorithms,\n  such as <a href="http://stackoverflow.com/questions/14790588/what-is-twitters-interest-in-abstract-algebra">Bloom filter</a>, <a href="http://stackoverflow.com/questions/12327004/how-does-the-hyperloglog-algorithm-work">HyperLogLog</a> and <a href="http://dimacs.rutgers.edu/~graham/pubs/papers/cmencyc.pdf">CountMinSketch</a>. These allow you\n  to think of these sophisticated operations like you might numbers, and\n  add them up in hadoop or online to produce powerful statistics and\n  analytics.</p>\n</blockquote>\n\n<p>and in another part of the GitHub page:</p>\n\n<blockquote>\n  <p>It was originally developed as part of Scalding\'s Matrix API, where\n  Matrices had values which are elements of \n  <a href="http://en.wikipedia.org/wiki/Monoid#Relation_to_category_theory">Monoids</a>, <a href="http://en.wikipedia.org/wiki/Group_%28mathematics%29">Groups</a>, or <a href="http://www.math.ku.dk/~gelvin/Modules.pdf">Rings</a>. Subsequently, it was clear that the code had broader application\n  within Scalding and on other projects within Twitter.</p>\n</blockquote>\n\n<p>What could this broader application be? within Twitter and for general interest?</p>\n\n<hr>\n\n<p>It seems like composition aggregations of databases have a monoid-like structure.</p>\n\n<p>Same question on quora: \n<a href="http://www.quora.com/Twitter-1/What-is-Twitters-interest-in-abstract-algebra-with-algebird">http://www.quora.com/Twitter-1/What-is-Twitters-interest-in-abstract-algebra-with-algebird</a></p>\n\n<hr>\n\n<p>I have math background but I\'m not computer scientist. It would be great to have "real-world" uses of monoids and semi-groups.  These are normally considered useless theoretical constructs, and ignored in many abstract algebra courses (for lack of anything interesting to say).</p>\n', 'Tags': '<reference-request><discrete-mathematics><database-theory><applied-theory><group-theory>', 'LastEditorUserId': '3131', 'LastActivityDate': '2013-02-11T23:40:20.447', 'CommentCount': '5', 'AcceptedAnswerId': '9687', 'CreationDate': '2013-02-10T21:59:23.007', 'Id': '9648'},125:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1018', 'Title': 'Practical Applications of Radix Sort', 'LastEditDate': '2013-05-23T22:58:26.053', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '6728', 'FavoriteCount': '1', 'Body': '<p>Radix sort is theoretically very fast when you know that the keys are in a certain limited range, say $n$ values in the range $[0\\dots n^k -1]$ for example.  If $k&lt;\\lg n$ you just convert the values to base $n$ which takes $\\Theta(n)$ time, do a base $n$ radix sort and then convert back to your original base for an overall $\\Theta(nk)$ algorithm. </p>\n\n<p>However, I\'ve read that <a href="http://www.lamarca.org/anthony/caches.html">in practice radix sort is typically much slower than doing for example a randomized quicksort</a>:</p>\n\n<blockquote>\n  <p>For large arrays, radix sort has the lowest instruction count, but\n  because of its relatively poor cache performance, its overall\n  performance is worse than the memory optimized versions of mergesort\n  and quicksort.</p>\n</blockquote>\n\n<p>Is radix sort just a nice theoretical algorithm, or does it have common practical uses?</p>\n', 'Tags': '<algorithms><sorting><applied-theory><radix-sort>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-15T00:11:26.887', 'CommentCount': '0', 'AcceptedAnswerId': '12228', 'CreationDate': '2013-05-23T07:29:45.403', 'Id': '12223'},126:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m using a SAT solver to encode a problem, and as part of the SAT instance, I have boolean variables $x_1,x_2,\\dots,x_n$ where it is intended that exactly one of these should be true and the rest should be false.    (I\'ve sometimes seen this  described as a "one-hot" encoding.)</p>\n\n<p>I want to encode the constraint "exactly one out of $x_1,\\dots,x_n$ must be true" in SAT.  What is the best way to encode this constraint, to make the SAT solver run as efficiently as possible?</p>\n\n<p>I can see many ways to encode this constraint:</p>\n\n<ul>\n<li><p><em>Pairwise constraints.</em> I could add pairwise constraints $\\neg x_i \\lor \\neg x_j$ for all $i,j$ to ensure that at most one $x_i$ is true, and then add $x_1 \\lor x_2 \\lor \\cdots \\lor x_n$ to ensure that at least one is true.</p>\n\n<p>This adds $\\Theta(n^2)$ clauses and no extra boolean variables.</p></li>\n<li><p><em>Binary encoding.</em>  I could introduce $\\lg n$ new boolean variables $i_1,i_2,\\dots,i_{\\lg n}$ to represent (in binary) an integer $i$ such that $1 \\le i \\le n$ (adding a few boolean constraints to ensure that $i$ is in the desired range).  Then, I can add constraints enforcing that $x_i$ is tree and that all other $x_j$\'s are false.  In other words, for each $j$, we add clauses enforcing that $i=j \\Leftrightarrow x_j$.</p>\n\n<p>This adds $\\Theta(n \\lg n)$ clauses and I don\'t know how many extra boolean variables.</p></li>\n<li><p><em>Count the number of true values.</em>  I could implement a tree of boolean adder circuits and require that $x_1+x_2+\\dots+x_n=1$, treating each $x_i$ as 0 or 1 instead of false or true, and use the Tseitin transform to convert the circuit to SAT clauses.  A tree of half-adders suffices: constrain the carry output of each half-adder to be 0, and constrain the final output of the final half-adder in the tree to be 1.  The tree can be chosen to be of any shape (balanced binary tree, or unbalanced, or whatever).</p>\n\n<p>This can be done in $\\Theta(n)$ gates and thus adds $\\Theta(n)$ clauses and $\\Theta(n)$ new boolean variables.</p>\n\n<p>A special case of this approach is to introduce boolean variables $y_1,\\dots,y_n$, with the idea that $y_i$ should contain the value of $x_1 \\lor x_2 \\lor \\cdots \\lor x_i$.  This intent can be enforced by adding the clauses $y_i \\lor \\neg x_i$, $y_i \\lor \\neg y_{i-1}$, and $\\neg y_i \\lor x_i \\lor y_{i-1}$ (where we treat $y_0$ as a synonym for false) for $i=1,\\dots,n$.  Next, we can add the restrictions $\\neg y_i \\lor \\neg x_{i+1}$ for $i=1,2,\\dots,n-1$.  This is basically equivalent to the Tseitin transform of a half-adder tree, where the tree has a maximally unbalanced shape.</p></li>\n<li><p><em>Butterfly network.</em> I could build a <a href="https://en.wikipedia.org/wiki/File%3aButterfly_multitree.svg">butterfly network</a> on $n$ bits, constrain the $n$-bit input to be $000\\cdots 01$, constrain the $n$-bit output to be $x_1 x_2 \\cdots x_n$, and treat each 2-bit butterfly gate as an independent gate that either swaps or does not swap its input with the decision of which to do based upon a fresh new boolean variable that is left unconstrained.  Then, I can apply the Tseitin transform to convert the circuit to SAT clauses.</p>\n\n<p>This requires $\\Theta(n \\lg n)$ gates and thus adds $\\Theta(n \\lg n)$ clauses and $\\Theta(n \\lg n)$ new boolean variables.</p></li>\n</ul>\n\n<p>Are there any other methods I have overlooked?  Which one should I use?  Has anyone tested this or tried them experimentally, or does anyone have any experience with any of these?  Is the number of clauses and/or the number of new boolean variables a good stand-in metric for estimating the impact of this on SAT solver performance, or if not, what metric would you use?</p>\n\n<hr>\n\n<p>I just noticed that <a href="http://cs.stackexchange.com/a/6522/755">this answer</a> has some references on enforcing cardinality constraints for SAT, i.e., enforcing the constraint that exactly $k$ out of the $n$ variables are true.  So, my question comes down to a special case where $k=1$.  Maybe the literature on cardinality constraints will help shed light on my question.</p>\n', 'ViewCount': '301', 'Title': 'Encoding 1-out-of-n constraint for SAT solvers', 'LastEditorUserId': '755', 'LastActivityDate': '2013-07-10T16:31:28.367', 'LastEditDate': '2013-07-10T16:31:28.367', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<satisfiability><sat-solvers><applied-theory>', 'CreationDate': '2013-07-09T20:56:13.173', 'FavoriteCount': '1', 'Id': '13188'},127:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>My similarity search seminar topic are <a href="https://en.wikipedia.org/wiki/M-tree" rel="nofollow">M-trees</a>. I would like to give some examples about where they are practically applied, but I can\'t find anything googling. </p>\n\n<p>Does someone know if M-trees are still used and what for? I am interested in answers regarding both practice and applied research.</p>\n', 'ViewCount': '96', 'Title': 'Where are M-Trees applied in practice?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-30T18:04:07.047', 'LastEditDate': '2013-07-30T16:40:04.920', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '9407', 'Tags': '<data-structures><search-trees><applied-theory>', 'CreationDate': '2013-07-29T16:39:35.700', 'Id': '13493'},128:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In real word problems, the influence of multiple not perfectly known factors results in using heuristics instead of mathemacial solutions that calculates a perfect value from only precisly defined input data. Consequently, any method that does not supply the mathematical maximum or minimum is not an optimisation but an improvement.</p>\n\n<p>Somehow my opinion on this topic differs from the use of the term <code>optimisation</code> in many papers. Are the people just not precise in their language or is my understanding of the term wrong?</p>\n\n<p><code>Improvement</code> doesn't sound as facy as <code>optimisation</code>, but is there maybe some facy word that allows people to still be precise?</p>\n", 'ViewCount': '40', 'Title': 'Is a non-perfect improvement and optimisation?', 'LastActivityDate': '2013-10-14T13:53:07.487', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10634', 'Tags': '<terminology><optimization><approximation><applied-theory><approximation-algorithms>', 'CreationDate': '2013-10-14T13:28:29.267', 'Id': '16071'},129:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '195', 'Title': 'The Absolute Minimum Every Software Developer Absolutely, Positively Must Know about Computer Science (No Excuses!)', 'LastEditDate': '2014-01-23T23:35:41.890', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '13075', 'FavoriteCount': '1', 'Body': '<p>Yes, I borrowed the title form a famous <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow">joelonsoftware post</a> for my question because I didn\'t exactly know how to ask this.</p>\n\n<p>I\'m a professional programmer for a few years now and although I followed informatics courses in school there was a lot of stuff missing from the curriculum, as I now know but wasn\'t aware then. For example I didn\'t do any compiler theory, algorithm analysis (the Big-O), have no idea what P-NP meant etc.</p>\n\n<p>So I want to catch up now! </p>\n\n<p>But the field of computer science is big. Really big! So from here my question: What\'s the absolute minimum every software developer absolutely, positively must know about computer science (no excuses!)?</p>\n', 'ClosedDate': '2014-01-24T16:09:48.247', 'Tags': '<education><applied-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-24T13:07:09.930', 'CommentCount': '10', 'CreationDate': '2014-01-23T21:17:48.197', 'Id': '19923'},1210:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>It is nice to know that every boolean formula can be expressed by zero-one\ninteger programming <a href="http://cs.stackexchange.com/questions/12102/express-boolean-logic-operations-in-zero-one-integer-linear-programming-ilp">by this answered question</a>. But are there any applications?</p>\n\n<p>To be more precise: Are there papers which use the existense of zero-one\ninteger programming for boolean operations? </p>\n', 'ViewCount': '71', 'LastEditorDisplayName': 'user14525', 'ClosedDate': '2014-02-15T04:35:23.437', 'Title': 'Applications for boolean logic operations in zero-one integer linear programming (ILP)', 'LastActivityDate': '2014-02-12T01:24:51.077', 'LastEditDate': '2014-02-10T14:25:03.970', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'user14525', 'PostTypeId': '1', 'Tags': '<logic><linear-programming><applied-theory>', 'CreationDate': '2014-02-09T19:19:55.597', 'Id': '21473'},1211:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '698', 'Title': 'Why is non-determinism useful concept?', 'LastEditDate': '2014-03-11T11:29:18.970', 'AnswerCount': '8', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '13053', 'FavoriteCount': '4', 'Body': '<p>An automaton is an abstract model of a digital computer. Digital computers are completely deterministic; their state at any time is uniquely predictable from the input and the initial state. </p>\n\n<p>When we are trying to model real systems, why include nondeterminism in Automata theory? </p>\n', 'Tags': '<automata><nondeterminism><applied-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-29T08:53:54.247', 'CommentCount': '5', 'AcceptedAnswerId': '22481', 'CreationDate': '2014-03-10T15:18:44.627', 'Id': '22472'}