{'ViewCount': '1833', 'Title': 'In-place algorithm for interleaving an array', 'LastEditDate': '2012-03-17T00:02:08.030', 'AnswerCount': '2', 'Score': '31', 'PostTypeId': '1', 'OwnerUserId': '139', 'FavoriteCount': '9', 'Body': "<p>You are given an array of $2n$ elements </p>\n\n<p>$$a_1, a_2, \\dots, a_n, b_1, b_2, \\dots b_n$$</p>\n\n<p>The task is to interleave the array, using an in-place algorithm such that the resulting array looks like</p>\n\n<p>$$b_1, a_1, b_2, a_2, \\dots , b_n, a_n$$</p>\n\n<p>If the in-place requirement wasn't there, we could easily create a new array and copy elements giving an $\\mathcal{O}(n)$ time algorithm.</p>\n\n<p>With the in-place requirement, a divide and conquer algorithm bumps up the algorithm to be $\\theta(n \\log n)$.</p>\n\n<p>So the question is:</p>\n\n<blockquote>\n  <p>Is there an $\\mathcal{O}(n)$ time algorithm, which is also in-place?</p>\n</blockquote>\n\n<p>(Note: You can assume the uniform cost WORD RAM model, so in-place translates to $\\mathcal{O}(1)$ space restriction).</p>\n", 'Tags': '<algorithms><in-place><arrays>', 'LastEditorUserId': '139', 'LastActivityDate': '2012-04-05T10:15:30.180', 'CommentCount': '7', 'AcceptedAnswerId': '400', 'CreationDate': '2012-03-13T20:16:32.067', 'Id': '332'}{'ViewCount': '385', 'Title': 'Saving on array initialization', 'LastEditDate': '2012-04-03T06:49:19.723', 'AnswerCount': '1', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '139', 'FavoriteCount': '3', 'Body': '<p>I recently read that it is possible to have arrays which need not be initialized, i.e. it is possible to use them without having to spend any time trying to set each member to the default value. i.e. you can start using the array as if it has been initialized by the default value without having to initialize it. (Sorry, I don\'t remember where I read this).</p>\n\n<p>For example as to why that can be surprising:</p>\n\n<p>Say you are trying to model a  <em>worst</em> case $\\mathcal{O}(1)$ hashtable (for each of insert/delete/search) of integers in the range $[1, n^2]$.</p>\n\n<p>You can allocate an array of size $n^2$ bits and use individual bits to represent the existence of an integer in the hashtable. Note: allocating memory is considered $\\mathcal{O}(1)$ time.</p>\n\n<p>Now, if you did not have to initialize this array at all, any sequence of say $n$ operations on this hashtable is now worst case $\\mathcal{O}(n)$.</p>\n\n<p>So in effect, you have a "perfect" hash implementation, which for a sequence of $n$ operations uses $\\Theta(n^2)$ space, but runs in $\\mathcal{O}(n)$ time!</p>\n\n<p>Normally one would expect your runtime to be at least as bad as your space usage!</p>\n\n<p>Note: The example above might be used for an implementation of a sparse set or sparse matrix, so it is not only of theoretical interest, I suppose.</p>\n\n<p>So the question is:</p>\n\n<blockquote>\n  <p>How is it possible to have an array like data-structure which allows us to skip the initialization step?</p>\n</blockquote>\n', 'Tags': '<data-structures><arrays>', 'LastEditorUserId': '139', 'LastActivityDate': '2012-04-03T06:49:19.723', 'CommentCount': '6', 'AcceptedAnswerId': '550', 'CreationDate': '2012-03-19T08:03:50.153', 'Id': '492'}{'ViewCount': '6955', 'Title': 'Adding elements to a sorted array', 'LastEditDate': '2012-04-01T07:07:56.053', 'AnswerCount': '5', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '863', 'FavoriteCount': '1', 'Body': '<p>What would be the fastest way of doing this (from an algorithmic perspective, as well as a practical matter)?</p>\n\n<p>I was thinking something along the following lines.</p>\n\n<p>I could add to the end of an array and then use bubblesort as it has a best case (totally sorted array at start) that is close to this, and has linear running time (in the best case).</p>\n\n<p>On the other hand, if I know that I start out with a sorted array, I can use a binary search to find out the insertion point for a given element.</p>\n\n<p>My hunch is that the second way is nearly optimal, but curious to see what is out there.</p>\n\n<p>How can this best be done?</p>\n', 'Tags': '<algorithms><efficiency><arrays><sorting>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-06T17:17:29.770', 'CommentCount': '3', 'AcceptedAnswerId': '931', 'CreationDate': '2012-04-01T01:49:35.277', 'Id': '930'}{'ViewCount': '736', 'Title': 'Is there an algorithm which finds sorted subsequences of size three in $O(n)$ time?', 'LastEditDate': '2013-05-05T20:08:44.940', 'AnswerCount': '3', 'Score': '17', 'OwnerDisplayName': 'Christopher Done', 'PostTypeId': '1', 'OwnerUserId': '969', 'FavoriteCount': '2', 'Body': u"<p>I want to prove or disprove the existence of an algorithm which, given an array $A$ of integers, finds three indices $i, j$ and $k$ such that $i &lt; j &lt; k$ and $A[i] &lt; A[j] &lt; A[k]$ (or finds that there is no such triple) in linear time.</p>\n\n<p>This is not a homework question; I saw it on a programming forum framed as \u201ctry to implement such an algorithm.\u201d I suspect that it is impossible after various experiments. My intuition tells me so, but that does not really count for anything.</p>\n\n<p>I would like to prove it formally. How do you do it? I would ideally like to see a proof laid out step-by-step, and then if you are so inclined, some explanation of how to go about proving/disproving simple questions like this in general. If it helps, some examples:</p>\n\n<pre><code>[1,5,2,0,3] \u2192 (1,2,3)\n[5,6,1,2,3] \u2192 (1,2,3)\n[1,5,2,3] \u2192 (1,2,3)\n[5,6,1,2,7] \u2192 (1,2,7)\n[5,6,1,2,7,8] \u2192 (1,2,7)\n[1,2,999,3] \u2192 (1,2,999)\n[999,1,2,3] \u2192 (1,2,3)\n[11,12,8,9,5,6,3,4,1,2,3] \u2192 (1,2,3)\n[1,5,2,0,-5,-2,-1] \u2192 (-5,-2,-1)\n</code></pre>\n\n<p>I supposed that one could iterate over $A$, and each time there is an $i &lt; j$ (our current $j$, that is), we make a new triple and push it onto an array. We continue stepping and comparing each triple until one of our triples is complete. So it's like <code>[1,5,2,0,-5,-2,-1] \u2192 1..2.. -5.. -2.. -1</code>, <code>[1,5,2,0,-5,-2,3,-1] \u2192 1..2.. -5.. -2.. 3</code>! But I think this is more complex than mere $\\mathcal{O}(n)$ as the number of triples on our triple array would in the worst case correspond to the size of the input list.</p>\n", 'Tags': '<algorithms><arrays><subsequences>', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-22T17:22:29.563', 'CommentCount': '2', 'AcceptedAnswerId': '1073', 'CreationDate': '2012-04-05T20:56:01.307', 'Id': '1071'}{'Body': '<p>In the discussion around <a href="http://cs.stackexchange.com/q/1157/98">this question</a>, Gilles mentions correctly that any correctness proof of an algorithm that uses arrays has to prove that there are no out-of-bounds array accesses; depending on the runtime model, this would cause a runtime error or access to non-array elements.</p>\n\n<p>One common technique to perform such correctness proofs (at least in undergrad studies and probably in automated verification) is by using <a href="https://en.wikipedia.org/wiki/Hoare_logic">Hoare logic</a>. I am not aware that the standard set of rules containes anything relating to arrays; they seem to be restricted to monadic variables.</p>\n\n<p>I can imagine adding axioms of the form</p>\n\n<p>$\\qquad \\displaystyle \\frac{}{\\{0 \\leq i \\lt A.\\mathrm{length} \\land {P[A[i]/E]} \\}\\ A[i] := E;\\ \\{P\\}}$</p>\n\n<p>However, it is not clear to me how you would deal with an array access on the right hand side, i.e. if it is part of a complex expression $E$ in some statement $x := E$.</p>\n\n<blockquote>\n  <p>How can arrays accesses be modelled in Hoare logic so that the absence of invalid accesses can and has to be proven for program correctness?</p>\n</blockquote>\n\n<p>Answers may assume that we disallow array elements to be used in statements other than $A[i] := E$ or as part of some $E$ in $x := E$ as this does not restrict expressiveness; we can always assign a temporary variable the desired value, i.e. write $t := A[i];\\ \\mathtt{if} ( t &gt; 0 ) \\dots$ instead of $\\mathtt{if} ( A[i] &gt; 0 )\\dots$.</p>\n', 'ViewCount': '317', 'Title': 'How to deal with arrays during Hoare-style correctness proofs', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-10T16:17:41.297', 'LastEditDate': '2012-04-10T16:17:41.297', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<proof-techniques><semantics><arrays><hoare-logic><software-verification>', 'CreationDate': '2012-04-10T08:00:09.683', 'FavoriteCount': '1', 'Id': '1200'}{'Body': u'<p>We are given a set $F=\\{f_1, f_2, f_3, \u2026, f_N\\}$ of $N$ Fruits. Each Fruit has price $P_i$ and vitamin content $V_i$; we associated fruit $f_i$ with the ordered pair $(P_i, V_i)$. Now we have to arrange these fruits in such a way that the sorted list contains prices in ascending order and vitamin contents in descending order.</p>\n\n<p><strong>Example 1</strong>: $N = 4$ and $F = \\{(2, 8), (5, 11), (7, 9), (10, 2)\\}$.</p>\n\n<p>If we arrange the list such that all price are in ascending order and vitamin contents in descending order, then the valid lists are the following:</p>\n\n<ul>\n<li>$[(2, 8)]$</li>\n<li>$[(5, 11)]$</li>\n<li>$[(7, 9)]$</li>\n<li>$[(10, 2)]$</li>\n<li>$[(2, 8), (10, 2)]$</li>\n<li>$[(5, 11), (7, 9)]$</li>\n<li>$[(5, 11), (10, 2)]$</li>\n<li>$[(7, 9), (10, 2)]$</li>\n<li>$[(5, 11), (7, 9), (10, 2)]$</li>\n</ul>\n\n<p>From the above lists, I want to choose the list of maximal size. If more than one list has maximal size, we should choose the list of maximal size whose sum of prices is least. The list which should be chosen in the above example is $\\{(5, 11), (7, 9), (10, 2)\\}$.</p>\n\n<p><strong>Example 2</strong>: $N = 10$ and $$F = \\{(99,10),(12,23),(34,4),(10,5),(87,11),(19,10), \\\\(90,18), (43,90),(13,100),(78,65)\\}$$</p>\n\n<p>The answer to this example instance is $[(13,100),(43,90),(78,65),(87,11),(99,10)]$.</p>\n\n<p>Until now, this is what I have been doing:</p>\n\n<ol>\n<li>Sort the original list in ascending order of price;</li>\n<li>Find all subsequences of the sorted list;</li>\n<li>Check whether the subsequence is valid, and compare all valid subsequences.</li>\n</ol>\n\n<p>However, this takes exponential time; how can I solve this problem more efficiently?</p>\n', 'ViewCount': '139', 'Title': 'Find subsequence of maximal length simultaneously satisfying two ordering constraints', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-11T21:21:42.877', 'LastEditDate': '2012-10-11T21:21:42.877', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1289', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1001', 'Tags': '<algorithms><arrays><constraint-programming><subsequences>', 'CreationDate': '2012-04-15T11:03:26.633', 'Id': '1287'}{'Body': "<p>Suppose I have an array of integers having length $N$. How can I output all longest decreasing sequences? (A subsequence consists of elements of the array that do not have to be consecustive, for example $(3,2,1)$ is a decreasing subsequence of $(7,3,5,2,0,1)$.) I know how to calculate the length of longest decreasing sequences, but don't know how to report all longest decreasing sequences.</p>\n\n<p>Pseudocode will be helpful.</p>\n", 'ViewCount': '421', 'Title': 'How to output all longest decreasing sequences', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-11T21:22:02.847', 'LastEditDate': '2012-10-11T21:22:02.847', 'AnswerCount': '3', 'CommentCount': '2', 'AcceptedAnswerId': '1313', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1001', 'Tags': '<algorithms><arrays><subsequences>', 'CreationDate': '2012-04-15T12:49:34.590', 'Id': '1290'}{'Body': "<p>Why do you think it is that most C++ instructors teaching college level computer sciences discourage or even forbid using strings for text, instead requiring students to use character arrays?</p>\n\n<p>I am assuming this methodology is somehow intended to teach good programming habits, but in my experience I don't see anything wrong with just using strings, and they are significantly easier to use and learn.</p>\n", 'ViewCount': '1582', 'Title': 'C++ Strings vs. Character Arrays', 'LastEditorUserId': '5', 'LastActivityDate': '2012-08-13T00:45:31.913', 'LastEditDate': '2012-04-20T03:26:07.963', 'AnswerCount': '6', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1157', 'Tags': '<education><arrays><strings>', 'CreationDate': '2012-04-20T02:11:18.667', 'FavoriteCount': '2', 'Id': '1375'}{'ViewCount': '172', 'Title': 'Overflow safe summation', 'LastEditDate': '2012-04-23T22:15:35.557', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '139', 'FavoriteCount': '1', 'Body': '<p>Suppose I am given $n$ fixed width integers (i.e. they fit in a register of width $w$), $a_1, a_2, \\dots a_n$ such that their sum $a_1 + a_2 + \\dots + a_n = S$ also fits in a register of width $w$.</p>\n\n<p>It seems to me that we can always permute the numbers to $b_1, b_2, \\dots b_n$ such that each prefix sum $S_i = b_1 + b_2 + \\dots + b_i$ also fits in a register of width $w$.</p>\n\n<p>Basically, the motivation is to compute the sum $S = S_n$ on fixed width register machines without having to worry about integer overflows at any intermediate stage.</p>\n\n<p>Is there a fast (preferably linear time) algorithm to find such a permutation (assuming the $a_i$ are given as an input array)? (or say if such a permutation does not exist).</p>\n', 'Tags': '<algorithms><arrays><integers><numerical-analysis>', 'LastEditorUserId': '139', 'LastActivityDate': '2012-04-23T22:15:35.557', 'CommentCount': '5', 'AcceptedAnswerId': '1425', 'CreationDate': '2012-04-21T23:39:36.593', 'Id': '1424'}{'Body': u'<p>Suppose I am given an array of $n$ fixed width integers (i.e. they fit in a register of width $w$), $a_1, a_2, \\dots a_n$. I want to compute the sum $S = a_1 + \\ldots + a_n$ on a machine with 2\'s complement arithmetic, which performs additions modulo $2^w$ with wraparound semantics. That\'s easy \u2014 but the sum may overflow the register size, and if it does, the result will be wrong.</p>\n\n<p>If the sum doesn\'t overflow, I want to compute it, and to verify that there is no overflow, as fast as possible. If the sum overflows, I only want to know that it does, I don\'t care about any value.</p>\n\n<p>Naively adding numbers in order doesn\'t work, because a partial sum may overflow. For example, with 8-bit registers, $(120, 120, -115)$ is valid and has a sum of $125$, even though the partial sum $120+120$ overflows the register range $[-128,127]$.</p>\n\n<p>Obviously I could use a bigger register as an accumulator, but let\'s assume the interesting case where I\'m already using the biggest possible register size.</p>\n\n<p>There is a well-known technique to <a href="http://cs.stackexchange.com/a/1425">add numbers with the opposite sign as the current partial sum</a>. This technique avoids overflows at every step, at the cost of not being cache-friendly and not taking much advantage of branch prediction and speculative execution.</p>\n\n<p>Is there a faster technique that perhaps takes advantage of the permission to overflow partial sums, and is faster on a typical machine with an overflow flag, a cache, a branch predictor and speculative execution and loads?</p>\n\n<p>(This is a follow-up to <a href="http://cs.stackexchange.com/questions/1424/overflow-safe-summation">Overflow safe summation</a>)</p>\n', 'ViewCount': '203', 'Title': 'Detecting overflow in summation', 'LastEditorUserId': '39', 'LastActivityDate': '2014-01-31T16:51:25.577', 'LastEditDate': '2012-04-22T15:03:49.187', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<algorithms><arrays><integers><numerical-analysis>', 'CreationDate': '2012-04-22T01:16:19.560', 'FavoriteCount': '1', 'Id': '1426'}{'Body': u'<p>I\'m implementing a class which provides arbitrary-precision arithmetic (also called "bignum", "BigInteger", etc.).</p>\n\n<p>My questions is about a practical implementation detail:</p>\n\n<p>I\'m wondering if there is a significant difference in implementation and computational complexity between an implementation which stores the magnitude in an integer array in BigEndian order vs. LittleEndian order.</p>\n\n<p>My data structure is basically:</p>\n\n<pre><code>class BigInt\n  val signum: Int\n  val magnitude: Array[Int] // two-complement (unsigned)\n</code></pre>\n\n<p>Supported operations are for instance:</p>\n\n<p>+, -, * (Long multiplication, Karatsuba, Cook3, Sch\xf6nhage-Strassen), /, squaring\nConversion to other number types\nComparison, equality, representation as a String</p>\n\n<p><em>The implementation is immutable, so every operation will return a new value and will not change the any existing.</em></p>\n\n<p>Feel free to ask for clarifications!</p>\n', 'ViewCount': '101', 'Title': 'Is it better to store the magnitude of an arbitrary-precision number in BigEndian or LittleEndian order in an integer array?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-04-26T05:17:03.090', 'LastEditDate': '2012-04-26T00:25:14.967', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1235', 'Tags': '<data-structures><arrays>', 'CreationDate': '2012-04-25T11:37:32.913', 'Id': '1498'}{'Body': '<p>Let $A[1...N]$ be an Array of size $N$ with maximum element $\\max$.</p>\n\n<p>I want to transform array $A$ such that after transformations all elements of $A$ contain $\\max$, i.e. after transformation $A = [\\max,\\max,\\max,\\max,\\dots,\\max]$.</p>\n\n<p>In one step, I can apply the following operation to any consecutive sub-array $A[x..y]$:</p>\n\n<blockquote>\n  <p>Assign to all $A[i]$ with $x \\leq i \\leq y$ the <a href="https://en.wikipedia.org/wiki/Median#The_sample_median" rel="nofollow">median</a> of subarray $A[x..y]$.</p>\n</blockquote>\n\n<p>We consider as <em>median</em> always the $\\left\\lceil \\frac{n+1}{2} \\right\\rceil$-th element in an increasingly sorted version of $A$.</p>\n\n<p>What is the minimum number of steps needed to transform $A$ as desired? If it helps, assume that $N\\leq 30$.</p>\n\n<hr>\n\n<p><strong>Example 1:</strong></p>\n\n<p>Let $A = [1, 2, 3]$. We need to change it to $[3, 3, 3]$. The  minium number of steps is two, first for subarray $A[2..3]$ (after that $A$ equals to $[1, 3, 3]$), then operation to $A[1..3]$.</p>\n\n<p><strong>Example 2:</strong></p>\n\n<p>$A=[2,1,1,2]$.The  min step is  two. The median of subarray $A[1..4]$ is $2$ (3rd element in $[1,1,2,2]$. Apply the operation to $A[1..4]$ once and we get $[2,2,2,2]$.</p>\n', 'ViewCount': '179', 'Title': 'array median transformation using the min number of steps', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-14T20:32:19.343', 'LastEditDate': '2012-05-14T13:50:08.610', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1001', 'Tags': '<algorithms><arrays>', 'CreationDate': '2012-05-09T06:05:41.193', 'Id': '1748'}{'Body': '<p>Given an array $a_1,\\ldots,a_n$ of natural numbers $\\leq k$, where $k$ is a constant, I want to answer in $O(1)$ queries of the form: "how many times does $m$ appear in the array between indices $i$ and $j$"?</p>\n\n<p>The array should be preprocessed in linear time. In particular I\'d like to know if there\'s a reduction to Range Minimum Query.</p>\n\n<hr>\n\n<p>This is equivalent to RMQ in the case where $k=1$ and you want to query the number of ones within an interval. So we can use <a href="http://en.wikipedia.org/wiki/Range_Queries#Statement_Of_The_Problem">it</a>.<br>\n<sup>I couldn\'t answer my own question because of limits of SE.</sup></p>\n', 'ViewCount': '187', 'Title': 'Preprocess an array for counting an element in a slice (reduction to RMQ?)', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-20T05:42:23.280', 'LastEditDate': '2012-05-19T10:49:02.503', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '1942', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1504', 'Tags': '<algorithms><arrays><algorithm-design>', 'CreationDate': '2012-05-18T22:36:42.753', 'Id': '1918'}{'Body': '<p>In terms of references and their implementation on the heap and the stack, how is\nequality testing for arrays different from that for integers? </p>\n\n<p>This is to do with Java programming, if you have a stack and a heap, would equality testing for example <code>j == i</code> be the same for arrays and for integers? I understand that arrays, are stored in the heap and the stack, as it holds bulks of data, but integers are only stored in the stack and referenced in the heap.</p>\n\n<p><img src="http://i.stack.imgur.com/xtIHW.png" alt="this is a picture on how integer variables are stored on the heap and referenced on the heap"></p>\n\n<p>I understand for equality testing <code>j==i</code> (variables) the stack pointer will point to the same location.</p>\n\n<p>I\'m confused on how <code>j==i</code> would be different for array and integers.</p>\n\n<p>Could someone explain? </p>\n', 'ViewCount': '214', 'Title': 'Equality testing of arrays and integers in a procedural language', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-26T10:32:40.923', 'LastEditDate': '2012-05-19T18:11:42.023', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '1935', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1376', 'Tags': '<programming-languages><arrays><semantics><equality><memory-management>', 'CreationDate': '2012-05-19T06:38:55.350', 'Id': '1919'}{'Body': '<p>Suppose we are given an array of positive integers $P = [p_1, p_2, \\dots, p_N]$ where each $p_i$ represents the price of a product on a different day $i = 1 \\dots N$. </p>\n\n<p>I would like to design an algorithm to find the maximum profit that you can given this array of prices. Profit is made by buying at a given date $i$ and selling at a later date $j$ so that $i \\leq j$.</p>\n\n<p>One easy solution is the following "exhaustive algorithm":</p>\n\n<pre><code>profit = 0\nfor i = 1 to N-1 \n  for j = i+1 to N\n    if P(j) - P(i) &gt; profit    \n      profit = P(j) - P(i) \n</code></pre>\n\n<p>The issue with this however is that it takes time $\\Omega(N^2)$. </p>\n\n<p>Can anyone think of something faster?</p>\n', 'ViewCount': '879', 'Title': 'Finding the Largest "Ordered" Difference in Elements of an Array', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-16T16:10:38.710', 'LastEditDate': '2012-07-04T08:15:13.833', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '2584', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2046', 'Tags': '<algorithms><arrays>', 'CreationDate': '2012-07-02T14:27:49.000', 'Id': '2583'}{'Body': '<p>A classic application of divide and conquer is to solve the following problem:</p>\n\n<p><em>Given an array $a[1\\dots n]$ of distinct, comparable elements, count the number of inversion pairs in the array: pairs $(i,j)$ such that $a[i] \\gt a[j]$ and $i \\lt j$.</em></p>\n\n<p>One approach to this is to do a Merge Sort, but also counting of the number of inversion pairs in the sub-problems. During the merge step, we count the number of inversion pairs that span across the (two) sub-problems and add to the counts of the sub-problems.</p>\n\n<p>While this is good, and gives an $O(n\\log n)$ time algorithm, this messes up array.</p>\n\n<p>If we have the additional constraint that the array is read-only, then we can make a copy and deal with the copy, or use an additional data-structure like an order statistics balanced binary tree to do the counting, both of which use $\\Theta(n)$ space.</p>\n\n<p>The current question is to try and better the space, while not affecting the run time. i.e.</p>\n\n<blockquote>\n  <p>Is there an $O(n\\log n)$ time algorithm to count the number of\n  inversion pairs, which works on a read-only array and uses sub-linear\n  (i.e. $o(n)$) space?</p>\n</blockquote>\n\n<p>Assume a uniform cost RAM model and that the elements take $O(1)$ space and comparison between them is $O(1)$.</p>\n\n<p>A reference will do, but an explanation will be better :-)</p>\n\n<p>I tried searching the web, but could not find any positive/negative answer for this. I suppose this is just a curiosity.</p>\n', 'ViewCount': '946', 'Title': 'Counting inversion pairs', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-04T17:41:34.980', 'LastEditDate': '2012-08-15T20:07:04.477', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '139', 'Tags': '<algorithms><reference-request><arrays>', 'CreationDate': '2012-08-15T17:52:59.523', 'FavoriteCount': '3', 'Id': '3200'}{'Body': '<p>Is it possible to design a compiler which optimizes a loop in which arrays are accessed in alternate fashion? For example like this:</p>\n\n<pre><code>// int[] a,b\nint sum = 0;\nfor(int i = 0; i &lt; n; i++)\n{\n  sum += a[i] + b[i];\n}\n</code></pre>\n\n<p>With the usual sequential array storage, <code>a[i]</code> and <code>b[i]</code> may be far away from each other in memory. Therefore, I think a good compiler optimization would detect that <code>a[i]</code> and <code>b[i]</code> are always accesses at the "same" time, and store the arrays interleaved, that is <code>a[0] b[0] a[1] b[1] ...</code> so that one memory access may retrieve both <code>a[i]</code> and <code>b[i]</code>.</p>\n', 'ViewCount': '101', 'Title': 'Are compilers able to detect alternating accesses to arrays and interleave them in memory?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-05T19:48:04.607', 'LastEditDate': '2012-09-05T19:48:04.607', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '3434', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2741', 'Tags': '<compilers><arrays><program-optimization><memory-management>', 'CreationDate': '2012-09-05T13:27:15.477', 'Id': '3433'}{'ViewCount': '527', 'Title': 'What piece am I missing to turn this idea into a programming language?', 'LastEditDate': '2013-07-20T09:50:34.237', 'AnswerCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2161', 'FavoriteCount': '2', 'Body': '<p>I\'ve been doing some reading (I\'ll name drop along the way) and have selected a few scattered ideas that I think could be cobbled together into a nifty esoteric programming language. But I\'m having some difficulty assembling the parts.</p>\n\n<p>Kleene\'s Theorem states: Any Regular Set can be recognized by some Finite-State Machine (Minsky 4.3).</p>\n\n<p>Minsky\'s Theorem 3.5: Every Finite-State machine is equivalent to, and can be "simulated by", some neural net.</p>\n\n<p>"There is a natural way to represent any forest as a binary tree." (Knuth, v1, 333).</p>\n\n<p>And according to Bentley (Programming Pearls, p.126) a binary tree can be encoded as a flat array.</p>\n\n<p>So I\'m imagining an array of bit-fields (say 4 bits so it can easily be worked with in hexadecimal). Each field indicates a type of automaton, and the positions of the array encode (via an intermediary binary tree representation) a forest which approximates (? missing piece ?) the power of a graph.</p>\n\n<p>I\'m somewhat bewildered by the possibilities of automaton sets to try, and of course the fun Universal Automata require three inputs (I worked up an algorithm inspired by Bentley to encode a ternary tree implicitly in a flat array, but it feels like the wrong direction). So I\'d appreciate any side-bar guidance on that. Current best idea: the normal set: and or xor not nand nor, with remaining bits used for threshold weights on the inputs.</p>\n\n<p>So the big piece I\'m missing is a formalism for applying one of these nibble-strings to a datum. Any ideas or related research I should look into?</p>\n\n<hr>\n\n<p><em>Edit:</em> My theoretical support suggests that the type of computations will probably be limited to RL acceptors (and maybe generators, but I haven\'t thought that through).</p>\n\n<p>So, I tried to find an example to flesh this out. The C <code>int isdigit(int c)</code> function performs a logical computation on (in effect) a bit-string. Assuming ASCII, where the valid digits are <code>0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39</code>, so bit 7 must be off, bit 6 must be off, bit 5 must be on, and bit 4 must be on: these giving us the 0x30 prefix; then bit 3 must be off (0-7) or if bit 3 is on, bit 2 must be off and bit 1 must be off (suppressing A-F), and don\'t care about bit 0 (allowing 8 and 9). If you represent the input <em>c</em> as a bit-array (<code>c[0]</code>..<code>c[7]</code>), this becomes</p>\n\n<pre><code>~c[7] &amp; (~c[6] &amp; (c[5] &amp; (c[4] &amp; (~c[3] | (~c[2] &amp; ~c[1])))))\n</code></pre>\n\n<p>Arranging the operators into a tree (colon (:) represents a wire since pipe (|) is logical or),</p>\n\n<pre><code>c[7]  6   5   4   3   2   1   0\n ~    ~   :   :   ~   ~   ~   :\n    &amp;     :   :   :     &amp;\n       &amp;      :      |\n           &amp;        :  \n                &amp;\n</code></pre>\n\n<p>My thought based on this is to insert "input lead" tokens into the tree which receive the values of the input bit assigned in a left-to-right manner. And I also need a <em>ground</em> or <em>sink</em> to explicitly ignore certain inputs (like c[0] above).</p>\n\n<p>This leads me to make NOT (~) a binary operator which negates the left input and simply absorbs right input. And in the course of trying this, I also realized the necessity for a ZERO token to build masks (and to provide dummy input for NOTs).</p>\n\n<p>So the new set is: &amp;(and) |(or) ^(xor) ~(not x, sink y) 0(zero) I(input)</p>\n\n<p>So the tree becomes (flipping up for down)</p>\n\n<pre><code>                 ^\n           &amp;           &amp;\n       &amp;       |      I 0\n     &amp;   I  ~     &amp;\n   &amp;   I   I 0  ~   ~\n ~   ~         I 0 I 0\nI 0 I 0\n=   =  = = =   =   =  =\n7   6  5 4 3   2   1  0 \n</code></pre>\n\n<p>Which encodes into the array (skipping the "forest&lt;=>tree" part, "_" represents a blank)</p>\n\n<pre><code>_ ^ &amp; &amp; &amp; | I 0 &amp; I ~ &amp; _ _ _ _ &amp; I _ _ I 0 ~ ~ _\n  _ _ _ _ _ _ _ ~ ~ _ _ _ _ _ _ _ _ _ _ I 0 I 0 _\n  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ I 0 I 0 \n</code></pre>\n\n<p>The tree->array encoding always put the root in array(1) so with zero-indexed array, there\'s a convenient blank at the beginning that could be used for linkage, I think.</p>\n\n<p>With only 6 operators, I suppose it could be encoded in octal.</p>\n\n<p>By packing a forest of trees, we could represent a chain of acceptors each applied on the next input depending on the result of the previous.</p>\n', 'Tags': '<programming-languages><finite-automata><arrays><neural-networks><machine-models>', 'LastEditorUserId': '2161', 'LastActivityDate': '2013-11-29T03:20:30.750', 'CommentCount': '6', 'AcceptedAnswerId': '4623', 'CreationDate': '2012-09-19T19:58:45.397', 'Id': '4618'}{'Body': '<p>I am performing an addition operation on two large binary numbers that have an equal number of bits. Both numbers are stored in an array of length $N$, which is rather large.</p>\n\n<p>At first I tried running a loop over them and keeping track of carry bits. This wasted time, because the aim is to get the bit at a specific position in this sum.</p>\n\n<p>So I modified my approach in following way. Starting from the specified index, I am looping until I find a 0 bit in same position on both numbers; I add only those parts to each other and return the bit at the specified position.</p>\n\n<p>This seems okay, but is this the best I can do? Recall that I want to get the value of one specific bit of the sum, given by its position.</p>\n', 'ViewCount': '384', 'Title': 'Get specified bit in addition of two large binary numbers', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-20T20:40:41.733', 'LastEditDate': '2012-09-20T20:40:41.733', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '3', 'OwnerDisplayName': 'Ravi Joshi', 'PostTypeId': '1', 'OwnerUserId': '2908', 'Tags': '<arrays><integers><binary-arithmetic>', 'CreationDate': '2012-09-20T14:01:20.360', 'Id': '4643'}{'Body': '<p>I got no responses on stackoverflow, so I\'m asking here:</p>\n\n<p>How useful is the LIS (<a href="http://www.geeksforgeeks.org/archives/9591" rel="nofollow">Longest Increasing Subsequence</a>) problem in tackling other CS problems?  There are a few algorithms, using patience sorting, dynamic programming or with decision trees.  How are these used in real life -- maybe to data streams or something?</p>\n\n<p>To remind you, I put in bold the longest increasing sequence</p>\n\n<p>{<strong>0</strong>, 8, 4, 12, <strong>2</strong>, 10, <strong>6</strong>, 14, 1, <strong>9</strong>, 5, 13, 3, <strong>11</strong>, 7, <strong>15</strong>}.</p>\n\n<p>As a bonus, is there any way to use the result that <a href="http://mathworld.wolfram.com/Erdos-SzekeresTheorem.html" rel="nofollow">a sequence of length mn + 1 will have an increasing subsequence of length m or a decreasing subsequence of length n</a>? E.g. Our list as length 16, so there should be an increasing sequence of length 5 or decreasing sequence of length 5.  In our case <em>0,2,6,9,11,15</em>.</p>\n\n<p>Also an increasing sequence of length 8 or a decreasing sequence of length 3: in our case <em>12,10,1</em>.</p>\n\n<p>CF: <a href="http://stackoverflow.com/q/12458641/737051">http://stackoverflow.com/q/12458641/737051</a></p>\n', 'ViewCount': '242', 'Title': 'Longest Increasing Subsequence', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-11T21:06:52.490', 'LastEditDate': '2012-10-11T21:06:52.490', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'OwnerDisplayName': 'john mangual', 'PostTypeId': '1', 'OwnerUserId': '3131', 'Tags': '<algorithms><arrays><subsequences>', 'CreationDate': '2012-10-09T18:03:23.037', 'Id': '4985'}{'Body': '<p>I am stuck on this problem:</p>\n\n<blockquote>\n  <p>Given an array $A$ of the first $n$ natural numbers randomly permuted, an array $B$ is \n  constructed, such that\n  $B(k)$ is the number of elements from $A(1)$ to $A(k-1)$ which are smaller than $A(k)$.  </p>\n  \n  <p>i) Given $A$ can you find $B$ in $O(n)$ time?<br>\n  ii) Given $B$ can you find $A$ in $O(n)$ time?</p>\n</blockquote>\n\n<p>Here, $B(1) = 0$. For a concrete example:\n$$\\begin{vmatrix}\n  A &amp; 8 &amp; 4 &amp; 3 &amp; 1 &amp; 7 &amp; 2 &amp; 9 &amp; 6 &amp; 5 \\\\\n  B &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 3 &amp; 1 &amp; 6 &amp; 4 &amp; 4 \\\\\n\\end{vmatrix}$$</p>\n\n<p>Can anyone help me? Thanks.</p>\n', 'ViewCount': '177', 'Title': 'Finding number of smaller elements for each element in an array efficiently', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-30T19:49:37.933', 'LastEditDate': '2012-11-27T01:45:21.400', 'AnswerCount': '2', 'CommentCount': '9', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1972', 'Tags': '<algorithms><arrays><permutations>', 'CreationDate': '2012-11-25T23:13:06.470', 'Id': '6898'}{'Body': '<p>I was practicing the following problem :</p>\n\n<blockquote>\n  <p>There are a total of $N$ operations.\n  At each operation, you can either add an element to the top or remove several elements as described below.</p>\n  \n  <p>Inputs are integers. An input other than $-1$ indicates that we have to add the elements in last in first out fashion (LIFO). If the input is $-1$, then we have to remove (pop) all the elements that lie above the current minimum element of the stack, and then pop that minimum element.</p>\n  \n  <p>For each $-1$ in the inputs, print $(m,p)$ where $m$ is the minimum element on the stack and $p$ counts how many total elements we popped from the stack.</p>\n</blockquote>\n\n<p>Example :</p>\n\n<pre><code>N=14 (Total 4 operations)\n9 \n6\n8\n-1\n2\n0\n6\n-1\n3\n1\n2\n10\n5\n-1\n\nIn above example : First three operation is inserting operation ,\nthat is we need to insert them in LIFO Fashion.\nSo the stack after third operation is : [9  6   8*] \n    PLEASE NOTE * represent the element at the top  of the stack.\nFourth Operation is -1 , that is we have to remove all elements\n(including the minimum ) , that lie above the minimun elements.\nThe Minimum Element is 6 ,so we remove 8 and 6 and Hence the stack now is :\n[9*]\nSo answer for fourth operation is (6,2)\n6 - the minimum element in the stack and 2 ,as we removed \ntotal 2 elements from the stack.\n\nOperation 5 th ,6 th and 7th are Inserting operations.\nAfter 4 th operation , the stack was [9*]\nAfter 7th operation , the stack looks like [9 2 0 6*]\n8th operation is -1 . Minimum element is 0 ,so we should remove 0,6 \n    from the stack\nHence Answer is (0,2)\nAs the minimum element is "0" and we removed total "2" elements from\n    the stack.\n\nThe  stack at the end of eighth operation is:\n[9 2]\n\nOperation 9 ,10 ,11 12,13  are inserting operations\nSo Stack after 13th operation is:\n[9 2 3 1 2 10 5* ]\noperation 14 is -1.\nThe minimum element  in the stack is 2. However 2 lies at two \n    different positions in the stack .\nBut we should remove that  2 , which is nearest to the top of the stack \n(In order word ,if the minimum lies at more than two positions in the \n    stack ,then the one which is closer to the top of the \nstack is considered).\nSo remove 2 at Index 5 (as it is closer to the top of stack) and element\nthat lies above it in stack.\nSo after removing 2(the minimum element ) and 10,5 (the elements above \n    the min element) \nThe stack looks like:\n[9 2 3 1*]\n    Answer is (2,3) //As 2 is the min element and we popped "3" elements\n\nPLEASE NOTE * represent the element at the top  of the stack.\n</code></pre>\n\n<h2>My approach</h2>\n\n<p>I am using a simple stack for the above problem. But the constraint is high: $1 \\le N \\le 10^6$. There are many $-1$\'s in the input, so a simple stack will work very slowly. The time limit for the problem is just 1 second.</p>\n', 'ViewCount': '345', 'Title': 'Efficient algorithm for a modified stack to pop the smallest element', 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-03T20:51:13.180', 'LastEditDate': '2012-12-03T20:51:13.180', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7127', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2041', 'Tags': '<algorithms><arrays><stack>', 'CreationDate': '2012-12-03T13:21:05.410', 'Id': '7124'}{'Body': "<p>I've heard this interview question asked a lot and I was hoping to get some opinions on what good answers might be: You have a large file 10+ GB and you want to find out which element occurs the most, what is a good way to do this? </p>\n\n<p>Iterating and keeping track in a map is probably not a good idea since you use a lot of memory, and keeping track as entries come in isn't the greatest option since when this question is posed the file usually already exists.</p>\n\n<p>Other thoughts I had included splitting the file to be iterated through and processed by multiple threads and then have those results combined, but the memory issue for the maps is still there.</p>\n", 'ViewCount': '1595', 'Title': 'Finding the element that occurs the most in a very large file', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-12T16:03:59.557', 'LastEditDate': '2012-12-10T23:28:51.367', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4989', 'Tags': '<algorithms><arrays>', 'CreationDate': '2012-12-10T06:26:32.387', 'FavoriteCount': '2', 'Id': '7291'}{'ViewCount': '1034', 'Title': 'Count unique increasing subsequences of length 3 in $O(n\\log n)$', 'LastEditDate': '2012-12-15T19:21:39.437', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4751', 'FavoriteCount': '3', 'Body': '<p><strong>Problem</strong>: Given an array of $n$ integers, $A[1 \\dots n]$, such that any integer occurs <em>at most</em> 2 times in the array, we have to find the number of <em>unique</em> increasing subsequences of length 3 (duplicate subsequences must be counted only once). In other words, we have to count the number of unique integers $A[i], A[j], A[k]$ such that $A[i] &lt; A[j] &lt; A[k]$ with $i &lt; j &lt; k$.</p>\n\n<p>I have been stuck on this for quite a while now. I did look up <a href="http://cs.stackexchange.com/questions/1071/is-there-an-algorithm-which-finds-sorted-subsequences-of-size-three-in-on-time">this</a> question which tests for the existence of such a triplet. But I think my question is different because it needs the count, and because it needs unique triplets (upto 1 repetition of any number is allowed).</p>\n\n<p><strong>Idea:</strong> $O(n^2)$ algorithm. For each number, we can scan the remaining array and find out how many unique numbers are greater than it and occur after it. This can be done in $O(n^2)$ by naive brute force. For every pair of numbers ($O(n^2)$), we now have the number of possible triplets that can be formed by using the pair as the first two numbers of the triplet (since we know how many are greater than the second number).</p>\n\n<p>Unfortunately, $O(n^2)$ is too slow, and I need a faster solution - $O(n\\log n)$ or $O(n)$. Space complexity also has to be sub-quadratic. I was thinking along the lines of sorting a copy of the array to find out the relative rank of each element, but could not go any further. Any help or hints are greatly appreciated!</p>\n', 'Tags': '<algorithms><arrays><subsequences>', 'LastEditorUserId': '4751', 'LastActivityDate': '2012-12-17T14:22:11.433', 'CommentCount': '10', 'AcceptedAnswerId': '7434', 'CreationDate': '2012-12-15T11:47:23.423', 'Id': '7409'}{'Body': "<p>An assignment questions asks the following:</p>\n\n<blockquote>\n  <p>Consider an array 'var a : array[1..10] of real'.  Express the\n  semantics of this array as a function, defining the domain and\n  codomain (you might also be able to write the rule).  In this\n  programming language, the subrange '1..10' is viewed as a genuine\n  type, so we can comfortably say that 'a[13]' is a type error.</p>\n</blockquote>\n\n<p>I've come up with a semantic that works as a function, that is: f(a[$x$]) -> $y$ where $x$ is a type defined by the numbers $1$ to $10$ and $y$ is the set of all Real numbers. Does this seems correct?</p>\n\n<p>Would there be any difference if I wrote the function in the opposite way, that is: f($y$) -> a[$x$] ?</p>\n", 'ViewCount': '107', 'Title': 'Expressing semantics of an array as a function', 'LastActivityDate': '2013-02-05T18:13:49.583', 'AnswerCount': '3', 'CommentCount': '2', 'AcceptedAnswerId': '9485', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4348', 'Tags': '<arrays><semantics><functional-programming>', 'CreationDate': '2013-01-27T18:37:43.773', 'Id': '9212'}{'Body': "<p>I'm trying to prove/disprove two statements. I just want to make sure with you I'm on the right line.</p>\n\n<p>These are the following statements:</p>\n\n<p><strong>Preface :</strong> Let A[n] be an array of min-heap (a min-heap represented by an array], whereas all the elements in the heap are different from each other. \nLet i and j be two indexes in the range : $0 \\le i, j \\le n-1$.</p>\n\n<p><em><strong>Prove or disprove :</em></strong> </p>\n\n<ol>\n<li>If $i &lt; j $ then $A[i] &lt; A[j]$</li>\n<li>If $A[i] &lt; A[j] $ then $i &lt; j$</li>\n</ol>\n\n<p>I believe I managed to disprove both of them using the following heap:</p>\n\n<p>$\\qquad [2, 6, 7, 11, 14, 13, 12, 12, 13,15, 16, 71, 72, 13, 81]$</p>\n\n<p>For:</p>\n\n<ol>\n<li><p>Simply plug in the following indexes: $i = 4$ and $j = 13$. </p>\n\n<p>So $i &lt; j$ but $A[i] &gt; A[j]$.</p></li>\n<li><p>Simply plug in the following indexes: $i = 13$ and $j = 4$.</p>\n\n<p>So $A[i] &lt; A[j]$ but $i &gt; j$.</p></li>\n</ol>\n\n<p>Am I missing something here? Or It is really that easy?</p>\n", 'ViewCount': '209', 'Title': 'MinHeap represented by an array - two simple statements', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-03T10:26:59.710', 'LastEditDate': '2013-02-03T10:26:59.710', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9445', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4514', 'Tags': '<data-structures><binary-trees><arrays><heaps>', 'CreationDate': '2013-02-03T08:44:32.337', 'Id': '9444'}{'ViewCount': '933', 'Title': 'Algorithm to find the mode in a unimodal array', 'LastEditDate': '2013-02-18T06:27:00.790', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4492', 'FavoriteCount': '1', 'Body': u'<p>I am given the following problem in an Algorithms class:</p>\n\n<blockquote>\n  <p>Assume that you are given an array A[1 . . . n] of distinct numbers.\n  You are told that the sequence of numbers in the array is unimodal, in\n  other words, there is an index i such that the sequence A[1 . . . i]\n  is increasing (A[j] &lt; A[j + 1] for 1 \u2264 j &lt; i), and the sequence A[i .\n  . . n] is decreasing. The index i is called the mode of A. Give an\n  O(log n) algorithm that find the mode of A</p>\n</blockquote>\n\n<p>I have written this draft solution as my solution but I want to make sure that this is an acceptable CORRECT solution.</p>\n\n<p>My Algorithm:</p>\n\n<pre><code>FIND_MODE(A)\nn = A.length\nif n == 1\n    return 1\n\nmid = floor(n/2)\nif A[mid] &lt; A[mid+ 1]\n    return FIND_MODE(A[1 \u2026 mid])\nelse\n    return mid + FIND_MODE(A[mid+1 \u2026 n])\n</code></pre>\n\n<p>Is it this acceptable and correct pseudocode algorithm?</p>\n\n<p>Is it correct that this is a Big-O(log n) algorithm?</p>\n', 'Tags': '<algorithms><algorithm-analysis><arrays>', 'LastEditorUserId': '4492', 'LastActivityDate': '2013-02-18T21:58:16.793', 'CommentCount': '0', 'AcceptedAnswerId': '9890', 'CreationDate': '2013-02-18T06:14:07.823', 'Id': '9888'}{'Body': "<p>Given an array of size n that holds ones and zeros I need to find an index of a  <code>1</code> cell that has <code>0</code> to his right (in then next cell) there could be more than one pair in a given array, any one of them is fine. The array is not sorted, but we do know that the first element is <code>1</code> and the last element is <code>0</code>.</p>\n\n<p>The search should be in $O(\\log n)$ time. I'm thinking that a binary search variation is the answer but I'm not sure how. </p>\n", 'ViewCount': '60', 'Title': "Finding a '1' cell with a '0' to its right in a binary array", 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-20T18:15:12.737', 'LastEditDate': '2013-02-20T18:15:12.737', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '9973', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6963', 'Tags': '<algorithms><arrays><search-algorithms><binary-search>', 'CreationDate': '2013-02-20T16:04:03.810', 'Id': '9969'}{'Body': '<h3>Background:</h3>\n\n<p>In this question we care only about worst-case running-time.</p>\n\n<p>Array and (doubly) linked lists can be used to keep a list of items and implement the <strong><a href="http://en.wikipedia.org/wiki/Vector_data_structure#Efficiency_comparison_with_other_data_structures">vector</a></strong> abstract data type. Consider the following three operations:</p>\n\n<ul>\n<li>$Location(i)$: returns a pointer to the $i$th item in the list of items in the array.</li>\n<li>$Insert(k,x)$: insert the item $k$ in the list after the item pointed to by $x$.</li>\n<li>$Delete(x)$: remove the item in the list pointed to by $x$.</li>\n</ul>\n\n<p>The main operation that an <strong>array</strong> provides is location which can be computed in constant time. However delete and insert are inefficient.</p>\n\n<p>On the other hand, in a <strong>doubly linked list</strong>, it is easy to perform insert and delete in constant time, but location is inefficient.</p>\n\n<h3>Questions:</h3>\n\n<p>Can there be a data structure to store a list of items where all three operations are $O(1)$? If not, what is the best worst-case running-time that we can achieve for all operations simultaneously? </p>\n\n<p>Note that a balanced binary search tree like red-black trees augmented with size of subtrees would give $O(\\lg n)$, is it possible to do better? Do we know a non-trivial lower-bound for this problem?</p>\n', 'ViewCount': '136', 'ClosedDate': '2013-03-01T18:52:59.140', 'Title': 'Is there a data-structure which is more efficient than both arrays and linked lists?', 'LastActivityDate': '2013-02-26T01:06:49.737', 'AnswerCount': '0', 'CommentCount': '17', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<data-structures><arrays><lower-bounds><linked-lists>', 'CreationDate': '2013-02-26T01:06:49.737', 'Id': '10111'}{'Body': '<p>I am a beginner in data structures and recently came across a vector implemented on an array, which is extended on demand. Of course the table cannot be extended "in place", we must allocate a new array, then copy elements from the previous one which is a linear operation itself (invoked log(n) times, where n is the number of insertion operations). Are there better implementations of such data structure while preserving constant item access time? For example, how about implementing a concept known from disk file systems - an allocation table; whenever we need to extend our array, an allocation table entry is created for newly reserved memory, without touching previously inserted items. Indexing time could still be constant, if only the allocation table would be implemented wisely (for example with using constant "page" size)\nWhat I\'ve written could be complete nonsense; it\'s just an idea.</p>\n', 'ViewCount': '95', 'Title': 'A vector-like data structure with allocation table; O(1) indexing time required', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-20T20:59:27.867', 'LastEditDate': '2013-03-20T20:59:27.867', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'OwnerDisplayName': 'Mariusz', 'PostTypeId': '1', 'Tags': '<data-structures><efficiency><arrays>', 'CreationDate': '2013-03-20T19:35:45.130', 'Id': '10662'}{'Body': '<p>I have came across a weird experience in C programming. Consider this code:</p>\n\n<pre><code>int main(){\n  int array1[6] = {0, 1, 2, 3, 4, 5};\n  int array2[6] = {6, 7, 8, 9, 10, 11};\n\n  printf("%d\\n", array1[-1]);\n  return 0;\n}\n</code></pre>\n\n<p>When I compile and run this, I don\'t get any errors or warnings. As my lecturer said, the array index <code>-1</code> accesses another variable. I\'m still confused, why on earth does a programming language have this capability? I mean, why allow negative array indices?</p>\n', 'ViewCount': '1232', 'Title': 'Why do negative array indices make sense?', 'LastEditorUserId': '-1', 'LastActivityDate': '2013-07-19T02:51:05.860', 'LastEditDate': '2013-03-27T19:25:47.117', 'AnswerCount': '6', 'CommentCount': '5', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7395', 'Tags': '<programming-languages><arrays><c>', 'CreationDate': '2013-03-27T13:12:49.483', 'Id': '10837'}{'Body': "<p>Given $n$ arrays of size $k$ each, we want to show that at least $\\Omega(nk \\log k)$ comparisons are needed to sort all arrays (indepentent of each other). </p>\n\n<p>My proof is a simple modification of the decision tree argument used to obtain the lower bound for comparison-based sorting of one array. More specifically, I argue that there are in total $k!^n$ possible permutations for the entries in all given arrays, and that a binary tree with that number of leaves is of height $h \\in \\Omega(nk \\log k)$. Is that argument correct? </p>\n\n<p>Furthermore, I was told that merely observing that one needs $\\Omega(k \\log k)$ comparisons for each of the arrays and we need to sort $n$ times in total (for $n$ arrays) is <em>not</em> a sufficient argument. Why is that? My answer would be that this is just <em>one</em> possible approach to this problem, and not a general argument excluding each and every other potential comparison-based algorithm for solving the given task with less than $\\Omega(nk \\log k)$ comparisons. \nHowever, this is not particularly concise and I would consider a rather technical argument (which I don't see) as more appropriate. What would that be?</p>\n", 'ViewCount': '132', 'Title': 'Lower bound for sorting n arrays of size k each', 'LastEditorUserId': '7486', 'LastActivityDate': '2013-03-29T13:24:00.140', 'LastEditDate': '2013-03-29T13:24:00.140', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '10893', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7486', 'Tags': '<algorithms><sorting><arrays><lower-bounds><check-my-proof>', 'CreationDate': '2013-03-29T12:07:19.733', 'Id': '10890'}{'Body': "<p>I want an algorithm that calculates which element, among two, appears more often than the other in a sorted array. The array will have only two types of elements. </p>\n\n<p>Example : $aaaaaabbb$ </p>\n\n<p>Here $a&gt;b$. </p>\n\n<p>I have to find an constant time algorithm. Is it possible? The only thing I could come up with was using stack. Push all $a$'s and pop them with $b$. But it takes $O(n)$ operations. Any better approaches? Need a hint (no solution).</p>\n", 'ViewCount': '44', 'Title': 'Finding the element that occurs more often than the other', 'LastEditorUserId': '472', 'LastActivityDate': '2013-04-12T23:40:12.290', 'LastEditDate': '2013-04-12T23:40:12.290', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '11268', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6665', 'Tags': '<algorithms><data-structures><search-algorithms><arrays>', 'CreationDate': '2013-04-12T15:30:57.237', 'Id': '11266'}{'Body': "<p>Been stuck on this for a while, would really appreciate some help:</p>\n\n<blockquote>\n  <p>Suppose you are given an array A[1...n] of sorted integers that has been circularly shifted k positions to the right. For example, [35,42,5,15,27,29] is a sorted array that has been circularly shifted k = 2 positions, while  [27,29,35,42,5,15] has been shifted k = 4 positions. Give an algorithm for finding the maximum element in A that runs in O(log n) time.</p>\n</blockquote>\n\n<p>The elements in A are distinct.</p>\n\n<hr>\n\n<p>I understand that to achieve O(log n) time I'll probably have to search through the list by starting at the middle, and then going left or right, then splitting the list in half over and over, but I'm not sure how to attack it beyond that.</p>\n", 'ViewCount': '1137', 'Title': 'Find maximum element in sorted arrays in logarithmic time', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-25T19:54:26.320', 'LastEditDate': '2013-04-25T07:38:48.193', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '11547', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7881', 'Tags': '<algorithms><search-algorithms><arrays>', 'CreationDate': '2013-04-25T00:01:42.933', 'Id': '11545'}{'ViewCount': '133', 'Title': 'Sublinear query time for the $i$th element of an array after some additions?', 'LastEditDate': '2013-05-04T18:07:11.023', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8044', 'FavoriteCount': '1', 'Body': "<p>We are given an array $A[1..n]$ of integers, and an array of 3-tuples known as queries. The query tuples $(i,j,v)$ denote additions of an integer $v$ to the subarray of $A[i..j]$. I'm interested in the query time of $A[k]$ for $1 \\leq k \\leq n$ between the queries.</p>\n\n<p>For example, let $A = [1,2,3,4]$, and let the queries be $Q = [[1,2,5],[2,3,6],[1,3,10]]$. After the second query has been processed, say I want to find the value of $A[3]$, which would be $3+5+6=14$. Does an algorithm exists to do this in less than linear time?</p>\n", 'Tags': '<algorithms><arrays>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-06T03:41:39.833', 'CommentCount': '2', 'AcceptedAnswerId': '11816', 'CreationDate': '2013-05-04T16:54:17.153', 'Id': '11777'}{'Body': "<p>I'm facing some problems that deal with finding common elements between unsorted arrays and I'd like to know whether there are well-known lower-bounds for the <em>worst-case</em> and, eventually, what are these lower-bounds.</p>\n\n<p>The problems are pretty simple:</p>\n\n<blockquote>\n  <p>Given two unsorted arrays of distinct integers, $A$ and $B$, of size\n  $m$ and $n$, determine <em>all</em> the common elements between the two\n  arrays(the output must be sorted)</p>\n</blockquote>\n\n<p>Which I believe has a lower-bound complexity of $\\Omega((m+n)\\log(\\min(m,n)))$\n(and $O(1)$ space complexity, if we exclude the input arrays),\neven though I cannot find any proof of this fact. [I found an algorithm with this complexity, so I(hopefully) am not underestimating the complexity.]</p>\n\n<p>The other problem adds some restrictions(and hence I'd expect to be able to lower the complexity):</p>\n\n<blockquote>\n  <p>Given two unsorted arrays of distinct integers, $A$ and $B$, of size\n  $m$ and $n$; knowing that common elements between the arrays have the\n  same relative order in both arrays and that for every couple of\n  consecutive common elements, their distance is at most $k$(constant),\n  determine all the common elements between the two arrays maintaining\n  their relative order and using at most $O(k)$ memory in addition to\n  the input arrays.</p>\n</blockquote>\n\n<p>I've tried to think about this second problem but I cannot see how the restrictions change the complexities. What puzzles me is that I believe that finding a single couple of elements between two unsorted arrays is $\\Theta((n+m)\\log(\\min(n,m)))$, and since this is a special instance of this second problem then the restrictions do not add anything to the problem itself.</p>\n\n<p>Are my guesses correct, and if so where can I find proofs for these lower-bounds? Do the restrictions change anything at all or the solution for the first problem is the best we can achieve in both cases?</p>\n\n<hr>\n\n<p>Probably my questions can be summarized by the following:</p>\n\n<blockquote>\n  <p>Given two arrays of distinct integers $A$ and $B$ of size $m$ and $n$,\n  what is the lower-bound complexity for finding <em>one</em> common element?</p>\n</blockquote>\n\n<p>Because, once a common element is found, the second problem can be solved in linear time.</p>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<p>The algorithm(s) that I thought are pretty simple:</p>\n\n<p>For problem 1: Build two heaps for $A$ and $B$(which takes linear time and can be done in-place), then compare the minimum of the heaps, if they match print it and remove both, otherwise remove the smallest one and continue until the heaps are empty(this clearly takes $O((m\\log(m) + n\\log(n)) = O(\\max(m,n)\\log(\\max(m,n)))$).</p>\n\n<p>An other solution is to sort one array in-place, scan the other array and use bisection search to find matches. If we sort the smallest array (with size $m$) then the complexity is $O(m\\log(m) + n\\log(m)) = O(\\max(m,n)\\log(\\min(m,n)))$. This technique yields the values in the other in which their are found in the biggest array, and it can be used to solve the second problem.</p>\n\n<p>But, as you can see, I'm not using the extra restrictions at all and both algorithms use $O(1)$ space instead of $O(k)$(yes, it's still constant but $O(k)$ should give a bit more freedom).</p>\n", 'ViewCount': '325', 'Title': 'Lower-bound complexities for finding common elements between two unsorted arrays', 'LastEditorUserId': '7246', 'LastActivityDate': '2013-05-22T15:04:04.710', 'LastEditDate': '2013-05-22T15:04:04.710', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '12210', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7246', 'Tags': '<time-complexity><arrays><lower-bounds>', 'CreationDate': '2013-05-21T12:03:27.047', 'Id': '12182'}{'Body': '<p><img src="http://i.stack.imgur.com/oAsDp.jpg" alt="enter image description here"></p>\n\n<p>I\'m thinking of using something similar to the Merge Sort algorithm. So the recurrence running time of Merge Sort is T(n) = 2T(n/2) + n. What should I do about if n/2 is less than or equal to m, OR if n/2 is greater than or equal to m?</p>\n\n<p>I believe the given function should be location inside the "Merge" function of the Merge Sort.(Since we\'re merging a sorted array) Thank you for your time.</p>\n\n<p>Edited: \nI\'m thinking if n/2 is less than or equal to m, use the "Given" function . Otherwise use the original "Merge" function (The usual Merge for Merge Sort) </p>\n', 'ViewCount': '41', 'Title': 'Constructing a Divide and Conquer Algorithm', 'LastEditorUserId': '4884', 'LastActivityDate': '2013-06-10T03:39:17.973', 'LastEditDate': '2013-06-09T06:05:06.720', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4884', 'Tags': '<sorting><arrays><divide-and-conquer>', 'CreationDate': '2013-06-09T05:57:31.027', 'Id': '12555'}{'Body': u'<p>We have an array of integers $a[]$, with each $|a[i]| \\leq 10^{6}$, $size(a)\\leq10^{5}$, and $a[i]-a[i-1]\\leq100$.</p>\n\n<p>Then we define the term range as a subarray $[x,y]$ of the array $a[]$,  $x \\lt y$.</p>\n\n<p>We need to find total number of ranges that satisfy the property that for two given ranges $([x_{1},y_{1}]$ and $[x_{2},y_{2}])$ either one or more of the below conditions are true:</p>\n\n<p>1) $(y_{1} \u2013 x_{1} \\neq y_{2} \u2013 x_{2})$</p>\n\n<p>2) $a[x_{1}+k] \u2013 a[x_{1}+k-1] \\neq a[x_{2}+k] \u2013 a[x_{2}+k\u20131]$ for some $k \\in \\{1, 2, ... y_{1}-x_{1}\\}$.</p>\n\n<p>How can we visualize this problem? Is this related to some classical problem?</p>\n', 'ViewCount': '102', 'Title': 'Counting subarrays that satisfy either of two conditions', 'LastEditorUserId': '8305', 'LastActivityDate': '2013-07-10T05:19:47.167', 'LastEditDate': '2013-07-10T02:26:52.047', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '13191', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8622', 'Tags': '<algorithms><arrays>', 'CreationDate': '2013-07-10T01:42:01.590', 'Id': '13190'}{'Body': "<p>Searching for a number in an array is said to have a runtime of O(n) because there may be cases where the number doesn't exist in the array. In such cases, you'd have to have gone through the entire array, which is O(n).</p>\n\n<p>But how about in the case where we know the number definately exists in the array? Does the runtime change then?</p>\n\n<p>Also is there a way to find out the average number of searches it would have to do before a number is found in an array based on its size?</p>\n", 'ViewCount': '290', 'Title': 'Runtime of searching for a number in an array?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-18T07:19:24.290', 'LastEditDate': '2013-07-12T14:49:49.223', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '2', 'OwnerDisplayName': 'garbage collection', 'PostTypeId': '1', 'OwnerUserId': '9155', 'Tags': '<algorithms><algorithm-analysis><runtime-analysis><search-algorithms><arrays>', 'CreationDate': '2013-07-12T04:44:49.213', 'Id': '13244'}{'Body': '<p>We are given an array $a[1 \\ldots n]$ with all $a[i]&gt;0$.</p>\n\n<p>Now we need to find how many distinct sums can be formed from its subarrays (where a subarray is a contiguous range of the array, i.e., $a[j\\ldots k]$ for some $j,k$, the sum is the sum of all of the elements of the subarray). For example, if $a=[1,2,1]$, then the answer is 4: we can form $ 1,2,3,4$.</p>\n\n<p>I know how to count the number of distinct sums in $O(n^2)$ time.</p>\n\n<p>Furthermore, I have come to realise this is similar to the classical problem where we need to find the number of distinct substrings of a string. I was thinking of the possibility of constructing a suffix array and solving it in a similar fashion (in $O(n)$ time). But I have not been able to figure out how to modify that to work here. For example, if we use suffix array for $a=[1,2,1]$ we will get 5 cases instead of the four acceptable ones. Is this possible to do this using suffix arrays or am I thinking in the wrong direction?</p>\n\n<p>Also there is one more direction I have been thinking in. Divide and conquer. Like if I divide the array into two parts every time until it is reduced to a single element. A single element can have one sum. Now if we combine two single elements, It can be done in two ways: if both single ranges have same element then we get 2 different sums, or if both have different elements we get 3 different sums. But I am not being able to generalize this for merging arrays of length greater than 1. Is it possible to merge two m size arrays and get the answer in $O(m)$?</p>\n', 'ViewCount': '262', 'Title': 'Counting number of sums from contiguous subarrays of an array', 'LastEditorUserId': '683', 'LastActivityDate': '2013-07-14T08:29:17.840', 'LastEditDate': '2013-07-14T08:29:17.840', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '8622', 'Tags': '<arrays><substrings><suffix-array>', 'CreationDate': '2013-07-13T20:31:03.527', 'FavoriteCount': '1', 'Id': '13262'}{'Body': '<p>Let $A$ be an array of totally ordered elements. A subarray $A[i..j]$ is decreasing if $A[k]\\geq A[k+1]$ for all $i \\leq k &lt; j$. It is increasing if $A[k]\\leq A[k+1]$ for all $i \\leq k &lt; j$. It is monotonic if it\'s either decreasing or increasing. </p>\n\n<p>We call an array is $k$ monotonic if the array can be partitioned into $k$ monotonic subarrays. </p>\n\n<blockquote>\n  <p>Given $A$ a $k$ monotonic array of length $n$, and the value $k$, find the\n  minimum value in the array.</p>\n</blockquote>\n\n<p>How many comparisons do we need?</p>\n\n<p>If we let $m$ be the maximum number of times a value occurs in $A$, here are some known cases:</p>\n\n<p>$k=1$, then the array is sorted, the minimum is at either end, a $O(1)$ solution.</p>\n\n<p>$k=2$, then we could solve it in $O(m+ \\log \\frac{n}{m})$, by take the min of two cases. </p>\n\n<ul>\n<li>First decrease, then increase, use a $O(m+ \\log \\frac{n}{m})$ <a href="http://www.chaoxuprime.com/posts/2013-07-27-find-the-minimum-of-an-array.html" rel="nofollow">solution</a>. Basically do ternary search unless one find a large segment of equal values, which turns into linear search.  </li>\n<li>First increase, then decrease, just check the boundary values.</li>\n</ul>\n\n<p>$k=n$, then a $O(n)$ time linear search is the best possible.</p>\n\n<p>I believe a $\\Omega(m+k \\log \\frac{n}{k})$ lower bound exists, since even if we are given position for $k/2$ partitions of first decreasing then increasing subarrays, $A_1,\\ldots,A_{k/2}$, we still need to spend $O(m_i+\\log \\frac{|A_i|}{m_i})$ time to search for the minima in each one of them, where $m_i$ is the max number of times a value can appear in $A_i$.</p>\n', 'ViewCount': '288', 'Title': 'Search for minimum in an array of $k$ monotonic subarrays', 'LastEditorUserId': '220', 'LastActivityDate': '2013-07-29T18:55:09.897', 'LastEditDate': '2013-07-29T08:17:14.577', 'AnswerCount': '2', 'CommentCount': '7', 'AcceptedAnswerId': '13496', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<algorithms><arrays>', 'CreationDate': '2013-07-27T19:52:21.887', 'Id': '13468'}{'Body': "<p>I want to begin by saying that this is NOT a homework question. I am reading Introduction to Algorithms - the famous CLRS text to become a better programmer. I am trying to solve the problems and exercises given in the book by myself. </p>\n\n<p>I am trying to solve <strong>Excercise 10.1-2</strong> from <strong>Chapter 10 Elementary Data Structures</strong> from CLRS Second Edition. Here is what its states:</p>\n\n<blockquote>\n  <p>Explain how to implement two stacks in one array <em>A[1..n]</em> in such a way that neither stack overflows unless the total number of elements in both stacks together is <em>n</em>. The PUSH and POP operations should run in <em>O(1)</em> time.</p>\n</blockquote>\n\n<p>The solution that I have come up with so far is:</p>\n\n<blockquote>\n  <p>Let array <em>A[1..n]</em> implement two stacks: <em>S1[1..i]</em> and <em>S2[i..n]</em>. </p>\n  \n  <p>For the <em>PUSH-S1</em> and <em>PUSH-S2</em> operations, if the stack is 'full' then start pushing elements into the <em>other</em> stack (eg. if stack <em>S1</em> is full when a new element is trying to be pushed in, then push that element into stack <em>S2</em> and vice versa). </p>\n</blockquote>\n\n<p>The problem with this approach is I will not be able to <em>POP-S1</em> or <em>POP-S2</em> reliably as there is no way of 'remembering' which element belongs to which stack. If the elements of the stack are <em>(key,value)</em> pairs, the key being the stack number, then to pop an element I would have to search, in the worst case, i or (n-i) times - which will be <em>O(n)</em> (feel free to correct me if I am wrong here), which would not be <em>O(1)</em>. </p>\n\n<p>I have been banging my head on the question for quite a while now. Am I on the right track? Can someone give my possible pointers for solving this problem?</p>\n\n<p>In general, how should I 'think' about these problems? Or can only really intelligent people solve these types of problems? Will tackling/solving problems like these (i.e. gaining experience) help me become better at this?</p>\n\n<p>I await enlightenment.</p>\n", 'ViewCount': '1809', 'Title': 'How to implement two stacks in one array?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-07-31T15:48:39.903', 'LastEditDate': '2013-07-31T15:48:39.903', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '9057', 'Tags': '<data-structures><arrays><stack>', 'CreationDate': '2013-07-28T14:03:22.530', 'Id': '13477'}{'Body': '<p>If we have an array $A$ of length $N$, which is partitioned into $\\sqrt{N}$ adjacent subarrays $A(i)$, each of which is monotonically ordered from $\\min(i)$ to $\\max(i)$ (it is known what places have those bounds in A for each subarray), with the following conditions:</p>\n\n<pre><code>min(i) &lt; min(i+1),\nmax(i) &lt; max(i+1),\nmin(i+1) &lt; max(i),\nIf subarrays A(i) and A(i+1) both have the j-th element, then A(i,j) &lt; A(i+1,j),\nThe number of elements in subarray A(i) is strictly increasing with i\n</code></pre>\n\n<p>Would it be possible to search an element in the array $A$, in time $O((\\log N)^k)$, for a positive $k$?  If yes how?</p>\n\n<p>If not, what kind of minimal additional conditions would allow that?</p>\n\n<p>Edit. The subarrays are not necessarily of equal length.\nThey are strictly increasing. The above stated conditions are always guaranteed.</p>\n\n<p>What I have tried so far is to binary search them separately, but that is obviously going to be very inefficient. </p>\n\n<p>[Note that this question has obviously nothing to do with the search of the min of max value in the array. And I am not interested in sorting the array. Just the mere search.]</p>\n', 'ViewCount': '145', 'Title': 'Searching a value in a "piecewise" ordered array', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-23T10:37:11.463', 'LastEditDate': '2013-08-23T10:37:11.463', 'AnswerCount': '1', 'CommentCount': '15', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5147', 'Tags': '<algorithms><search-algorithms><arrays><binary-search>', 'CreationDate': '2013-08-18T12:19:35.963', 'FavoriteCount': '2', 'Id': '13801'}{'Body': u'<p>I was given the following homework question:</p>\n\n<blockquote>\n  <p>Implement an extendable table using arrays that can increase in size\n  as elements are added. Perform an experimental analysis of each of the\n  running times for performing a sequence of n add methods, assuming the\n  array size is increased from N to the following possible values: </p>\n  \n  <ul>\n  <li>2N  </li>\n  <li>N + ceiling(\u221aN)</li>\n  <li>N + ceiling(log N)  </li>\n  <li>N + 100</li>\n  </ul>\n</blockquote>\n\n<p>I\'m just a little confused about what this question is asking, and was hoping for some help/clarification. The way I understand it, you could implement something like this in Python with a two-dimensional array (the "extendable table"), and then append varying numbers of values for each scenario. Am I understanding the implementation correctly?</p>\n\n<p>Then, I\'m also a bit unclear on what number of values you\'d be appending. Would you literally first test it with say, 16 values, then 32 (2N), then 20 (ceiling(\u221aN)), etc? Or is it more complex than that?\nAny help is appreciated!</p>\n', 'ViewCount': '38', 'ClosedDate': '2013-10-30T10:04:14.270', 'Title': 'experimental analysis of running times in extendable table', 'LastActivityDate': '2013-10-14T21:04:29.030', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16087', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10719', 'Tags': '<algorithm-analysis><runtime-analysis><arrays>', 'CreationDate': '2013-10-14T20:02:02.757', 'Id': '16086'}{'Body': "<p>I have come across a question that is a bit hard to understand due to its wording, I may havecome up with a possible solution, but I don't know if it's correct. Can you please help me? Thanks in advance!</p>\n\n<p><strong>Question</strong></p>\n\n<p>Suppose we exchange elements $a[i]$ and $a[j]$, where $j &gt; i$, which are originally out of order.</p>\n\n<p>For example, $a = [2,8,3,7,1,5,6]$ and we exchange the second and sixth elements, we have $[2,5,3,7,1,8,6]$. </p>\n\n<p>The array has now fewer inversions. What is the maximum number of inversions that can be removed if we exchange $a[i]$ and $a[j]$?</p>\n\n<p><strong>My proposed answer</strong></p>\n\n<p>Take an array and sort it in reverse order. The first element would have the most inversions. We switch it with the last element and the number of inversions decrease drastically.</p>\n\n<p>The maximum number of inversions would be $j-i+n-2$.</p>\n\n<p><strong>My concern</strong></p>\n\n<p>Since the question doesn't say anything about me being allowed to change the order of the array, I don't know if my proposed answer is the one they were aiming for.</p>\n", 'ViewCount': '185', 'Title': 'Maximum number of inversions that can be removed by swapping two elements?', 'LastEditorUserId': '683', 'LastActivityDate': '2013-10-24T15:54:43.487', 'LastEditDate': '2013-10-24T15:52:29.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16403', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10398', 'Tags': '<sorting><arrays>', 'CreationDate': '2013-10-24T15:06:12.357', 'Id': '16400'}{'Body': '<p><strong>Edit:</strong> found solution with $O(1)$ look for my answer at <a href="http://programmers.stackexchange.com/a/216217/104450">here</a> </p>\n\n<p>I have an array of elements, and I wish to reverse the order of elements between indices $i$ and $j$.</p>\n\n<p><strong>Example:</strong> Let the array contain elements $A,B,C,D,E,F$. Calling the function reverse(array, 1,4) will modify the array to be $A,E,D,C,B,F$.</p>\n\n<p>I want to do this operation multiple times on different indices. What would be the most efficient way to implement this (precalculations don\'t count)?</p>\n', 'ViewCount': '456', 'Title': 'How to reverse a subarray of an array', 'LastEditorUserId': '10572', 'LastActivityDate': '2013-11-01T12:27:12.877', 'LastEditDate': '2013-11-01T12:27:12.877', 'AnswerCount': '4', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10572', 'Tags': '<algorithms><arrays>', 'CreationDate': '2013-10-27T11:58:05.780', 'FavoriteCount': '0', 'Id': '16467'}{'Body': '<p>What is proper terminology to distinguish between an array (ordered list) data structure in which each element is of identical type/class, and an array in which each element can be different?</p>\n', 'ViewCount': '41', 'Title': 'Term for array of identical type and different types', 'LastActivityDate': '2013-10-30T03:12:22.473', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16563', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11059', 'Tags': '<terminology><arrays>', 'CreationDate': '2013-10-30T02:34:31.247', 'Id': '16562'}{'ViewCount': '74', 'Title': 'Finding farthest item in an array with duplicates', 'LastEditDate': '2013-11-06T00:17:00.597', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9694', 'FavoriteCount': '1', 'Body': "<p>I have an array $A[]$ of size $L$, which contains numbers in the range $1 \\ldots N$.  Here $L&gt;N$, so the array will contain repetitions.  If $x,y$ are two numbers that are both present in the array, define the distance $d(x,y)$ to be the minimum difference in positions where $x,y$ appear, i.e.,</p>\n\n<p>$$d(x,y) = \\min \\{|i-j| : A[i]=x, A[j]=y\\}.$$</p>\n\n<p>Given a number $x$ that is present in the array, I need to find the number $y$ in the array distance from $x$ is as large as possible.  In other words, given $x$, I am trying to find $y$ that makes $d(x,y)$ as large as possible (subject to the restriction that $y$ is a number in $A[]$).</p>\n\n<p>Can this be done in $o(L)$ time per query?  It's OK to do some pre-processing of the array.</p>\n\n<p>For example, suppose the array is $[1,3,2,3,4,5,3]$.  Then $d(5,3)=1$, since there is a $5$ one position away from a $3$ (a $5$ appears at index $5$ and a $3$ appears at index $6$).  If the query is $x=5$, the correct answer is $y=1$, since this makes the value of $d(5,y)$ as large as possible.</p>\n", 'Tags': '<algorithms><arrays><amortized-analysis>', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-06T00:47:25.973', 'CommentCount': '4', 'AcceptedAnswerId': '16756', 'CreationDate': '2013-11-05T14:58:45.963', 'Id': '16739'}{'Body': '<p>Given a $n\\times n$ matrix <code>A[0...n-1][0....n-1]</code> where all entries are non-negative integers, and a non-negative integer <code>K</code>, I want to find the number of submatrices whose entries sum to <code>K</code>.</p>\n\n<p>The best solution I can find has $O(n^4)$ running time.  Any ideas how to improve the running time?</p>\n', 'ViewCount': '208', 'Title': 'Number of submatrices with a particular sum', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-20T02:15:50.597', 'LastEditDate': '2013-11-20T01:59:10.917', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '3', 'OwnerDisplayName': 'hello', 'PostTypeId': '1', 'Tags': '<algorithms><arrays><matrices>', 'CreationDate': '2013-11-19T16:37:23.323', 'Id': '18173'}{'ViewCount': '43', 'Title': 'Hashing a Specific Range Of a Character Array', 'LastEditDate': '2013-12-11T12:40:25.193', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8505', 'Body': '<p>I need to process queries to Hash various ranges of a character array. I am currently using the <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#hashCode%28char%5B%5D%29" rel="nofollow">Arrays.hashCode</a> from the standard java library. But the problem is that this method is too slow. Also my array remains the same throughout the process of hashing, I only am changing the range. To deal with this, I have to make an entire copy of the array everytime I process a query, and then compute the hash from the above function. </p>\n\n<p>I am using <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#copyOfRange%28char%5B%5D,%20int,%20int%29" rel="nofollow">Arrays.copyOfRange</a> to create a copy everytime I process a query. I need to avoid this. So I was thinking of devising a hashing scheme of my own. This scheme should be such that I whould get a unique hash for each array range. Hashes should be same if all characters in the range are same. </p>\n\n<p>Any Help on how to proceed with the making of such a hash function will be appreciated.</p>\n', 'ClosedDate': '2013-12-14T20:05:36.503', 'Tags': '<data-structures><arrays><hash><hash-tables>', 'LastEditorUserId': '8505', 'LastActivityDate': '2013-12-11T20:57:09.670', 'CommentCount': '2', 'AcceptedAnswerId': '18896', 'CreationDate': '2013-12-11T10:59:54.037', 'Id': '18873'}{'Body': '<p>I\'ve created a data structure that is a hash of arrays with a special property: the hash keeps track of the combined order in which items are appended to its arrays. </p>\n\n<p>For example (pseudocode):</p>\n\n<pre><code>h = HashOfArray()\n\nh["a"].append(1) // accessing an unset key returns an empty array\nh["b"].append(2)\nh["a"].append(3)\nh["b"].append(4)\n\nh["a"]\n&gt;&gt;&gt; [1, 3]\n\nh["b"]\n&gt;&gt;&gt; [2, 4]\n\nh.items()\n&gt;&gt;&gt; [1, 2, 3, 4]\n</code></pre>\n\n<p>I\'m struggling with coming up with a good name for this data structure. Does it have a commonly used name? I\'ve called it <code>HashOfArray</code> but that fails to convey its main property: that it maintains the combined append order of the arrays.</p>\n\n<p>Example implementation in Ruby:\n<a href="https://gist.github.com/kajic/7981533" rel="nofollow">https://gist.github.com/kajic/7981533</a></p>\n', 'ViewCount': '79', 'Title': 'What is this hash of array data structure called?', 'LastEditorUserId': '12214', 'LastActivityDate': '2013-12-22T11:07:00.270', 'LastEditDate': '2013-12-18T21:44:13.320', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12214', 'Tags': '<data-structures><arrays><hash-tables>', 'CreationDate': '2013-12-18T18:20:44.957', 'Id': '19099'}{'Body': '<p>Given array $A = \\{ a_{1},a_{2}, ..., a_{n}\\}$ and integer $k; 0 \\lt k \\le n$, partition array $A$ into $k$ subarrays, such that</p>\n\n<p>$A\'_{1} = \\{a_{1}, ...,a_{x}\\}$</p>\n\n<p>$A\'_{2} = \\{a_{x+1},...,a_{y}\\}$</p>\n\n<p>$...$</p>\n\n<p>$A\'_{k} = \\{a_{z+1},...,a_{n}\\}$</p>\n\n<p>where each subarray $A\'_{1},A\'_{2}, ...,A\'_{k}$ has sum of its elements closest to $\\sigma; \\sigma = \\frac{\\sum_{i = 1}^{n} {a_{i}}}{k}$</p>\n\n<p>Example:  $A = \\{{5,6,1,3,4,10\\}}, k = 3$</p>\n\n<p>$\\sigma = \\frac{29}{3} = 9.\\overline{66} \\approx 10$</p>\n\n<p>Best solution to split array is:</p>\n\n<p>$A\'_{1} = \\{5,6\\}$</p>\n\n<p>$A\'_{2} = \\{1,3,4\\}$</p>\n\n<p>$A\'_{3} = \\{10\\}$</p>\n\n<p>with sums $11, 8, 10$</p>\n\n<p>One way to measure "badness" of each solution, is to define function $h(A_{1},...,A_{k}) = \\sum_{i = 1}^{k} {(s_{i} - \\sigma)^2}$, where $s_{i}$ is sum of elements of subarray $A_{i}$</p>\n\n<p>Can you point me towards the solution? I\'ve been trying for a few days now, and I\'m no closer to an algorithm than I was few days ago.</p>\n', 'ViewCount': '112', 'Title': 'Partition array into K subsets, each with balanced sum', 'LastActivityDate': '2013-12-22T04:45:51.627', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12270', 'Tags': '<arrays><partitions>', 'CreationDate': '2013-12-21T22:44:40.127', 'Id': '19181'}{'ViewCount': '110', 'Title': 'Finding a O(n) solution to: max difference of pairs array question', 'LastEditDate': '2014-01-29T06:21:08.720', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13215', 'Body': "<p>I don't know an O(n) solution to the following:</p>\n\n<p>Given an array of n integers, find the largest difference between any two pairs in the array: however, the larger integer must have a higher index in the array than the other.</p>\n\n<p>Ex: alg({9, 2, 6, 7}) = 5</p>\n\n<p>It seems straightforward, yet it eludes me.</p>\n", 'ClosedDate': '2014-01-29T17:01:49.113', 'Tags': '<algorithm-analysis><arrays>', 'LastEditorUserId': '13215', 'LastActivityDate': '2014-01-29T14:27:56.283', 'CommentCount': '3', 'AcceptedAnswerId': '20057', 'CreationDate': '2014-01-29T05:50:21.657', 'Id': '20056'}{'Body': '<p>We are given an array and numerous subarrays. What we can do is add or multiply some element to all elements of a subarray. The subarrays are given as start index and the end index. We have to find the largest number of independent subarrays from the subarrays given to us. For example:</p>\n\n<p>If we have the array as given below :</p>\n\n<p>$\\qquad A = [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,\\dots]$</p>\n\n<p>Now we are given numerous subarrays as :</p>\n\n<p>$\\qquad\\begin{align*}\n  S_1 &amp;= (a_1, \\dots, a_6) \\\\\n  S_2 &amp;= (a_1, \\dots, a_8) \\\\\n  S_3 &amp;= (a_7, \\dots, a_8) \n\\end{align*}$</p>\n\n<p>So in this case all manipulations that can be done by the subarray $S_2$ is actually captured by the subarrays $S_1$ and $S_3$, i.e we want to add $7$ to all elements in $S_2$ then we can do it by adding $7$ to all elements in $S_1$ and $S_3$. So $S_2$ can be removed. In this similar way we need to find out the maximum number of independent subarrays possible.</p>\n\n<p><strong>Independence</strong> here means that if any subarray can be expressed as a combination of two or more subarrays then any changes that can be made to the subarray like adding a specific element to all elements in the subarray can also be make  by applying the same operation to all the subarrays which make up the given  subarray. For example if we have an array of size n. Then we have a given subarray from A11(11th element) to A20(20th element) and there are two more subarrays given from A11 to A15 and A16 to A20. Then if we want to add 5 to all elements from A11 to A20. Then we can add 5 to subarray from A11 to A15 and also A16 to A20. Hence A11 to A20 is not important.</p>\n\n<p>Here we just need to find the total number of independent subarrays.</p>\n', 'ViewCount': '54', 'ClosedDate': '2014-02-10T11:52:12.307', 'Title': 'Find the largest number of independent subarrays given an array', 'LastEditorUserId': '12101', 'LastActivityDate': '2014-02-10T13:55:36.340', 'LastEditDate': '2014-02-10T13:55:36.340', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12101', 'Tags': '<algorithms><arrays>', 'CreationDate': '2014-02-10T09:36:04.417', 'Id': '21490'}{'Body': "<p>I have thought about the most useful way of checking an array for 2 elements that sum to X.\nThe trivial solution is to check the sum of every element with every element, and the complexity of this solution is $O(n^2)$.</p>\n\n<p>My solution is:\nSay the array is A.\nIt's length is N.\nElements are from A[0] to A[N-1]</p>\n\n<p>Pseudo-Code is:</p>\n\n<pre><code>Check_Sum(A,left,right) {\n  mid &lt;-- floor( (left+right)/2 )\n\n  if(A[left]+A[right]=X)\n    return true\n\n  return Check_Sum(A,left,mid)||Check_Sum(A,mid,Right)\n}\n</code></pre>\n\n<p>My question is: Is the complexity of my solution equal to $O(n \\lg n)$?</p>\n", 'ViewCount': '247', 'Title': 'Checking if there are 2 elements in an array that sum to X in O(n lg n)', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-24T16:47:29.490', 'LastEditDate': '2014-02-25T20:26:49.787', 'AnswerCount': '7', 'CommentCount': '2', 'AcceptedAnswerId': '22042', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14724', 'Tags': '<algorithms><arrays><complexity>', 'CreationDate': '2014-02-20T20:19:07.547', 'Id': '21858'}{'Body': "<p>Say $A'$ is the output of $\\mathrm{Bubblesort}(A)$ on an array of length $N$.\nTo prove that Bubblesort works, we have to prove that it always terminates and that\n$$A'[0]\\leq A'[1] \\leq \\dots \\leq A'[N-1].$$\nIs there anything else that needs to be proven to show that Bubblesort actually sorts?</p>\n\n<p>(I have found this question in a textbook about algorithms.)</p>\n", 'ViewCount': '170', 'Title': 'Proving the Bubblesort actually sorts', 'LastEditorUserId': '683', 'LastActivityDate': '2014-02-21T14:37:04.937', 'LastEditDate': '2014-02-21T14:08:46.187', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14724', 'Tags': '<algorithms><sorting><arrays>', 'CreationDate': '2014-02-21T12:53:59.497', 'Id': '21883'}{'Body': "<p>For a regular array, I understand that if we have the tradeoff of space vs time, and we use more space to implement a Which, Data, and When pointers to the actual array, we can initialize the array in constant time because there are pointers to access and keep track of the elements in the array.</p>\n\n<p>How can I extend the idea of using the Which, Data, and When pointers to have constant time initialization for multi-dimensional arrays? Would I have to have multiple Which, Data, and When pointers to keep track of n-th D array dimensions?</p>\n\n<p>Or is the use of hierarchical tables, which stores multi-dimensional arrays as an array of pointers to tables, where each table contains a row of the array, and implementing the Which, Data, and When pointers to the hierarchical tables a correct way for having constant time initialization of multi-dimensional arrays?</p>\n\n<p><strong>Edit:</strong> Use C notation for simplicity. Let's say for a large <code>N</code> we have an array:</p>\n\n<pre><code>SomeType array[N];\n</code></pre>\n\n<p>If <code>N</code> is very large, and only a few of the array's elements are ever used, just initializing it can become the largest cost of an algorithm. A way around this is to have a self-checking structure that can be filled in on demand. To the above add (I'm not the original poster, so I will use my own names here):</p>\n\n<pre><code>int last_used = -1, place[N], order[N];\n</code></pre>\n\n<p>The idea is that <code>last_used</code> tells the last used entry, <code>place[i]</code> is the index of the <code>i</code>-th asigned element of <code>array</code>, and <code>order[k]</code> is the order in which the <code>array[k]</code> was initialized. Note that none of <code>array</code>, <code>place</code> and <code>order</code> are initialized, their initial values are arbitrary. <code>place[i]</code> and <code>order[k]</code> serve to check each other. To use <code>array[i]</code>, see if <code>order[i] &lt; last_used</code> (it is in the right range, might have been set already; if not, it is clearly garbage) and also <code>place[order[i]] == i</code>. If so, the element has been used, go ahead. If not, do:</p>\n\n<pre><code>last_used++;          /* Another one is in use */\nplace[last_used] = i; /* The next one in use is array[i] */\norder[i] = last_used; /* Point back */\ninitialize(array[i]); /* Prepare for use */\n/* Furiously frob array[i] */\n</code></pre>\n\n<p>The time of this is bounded by a constant; so the initialization time, amortized over the initialized elements, is constant. For a practical implementation, this can be packaged conveniently in a C++ class (templated on <code>SomeType</code> and <code>N</code>) overloading <code>operator[]</code>.</p>\n\n<p><strong>Remark:</strong> This can clearly be extended to an array of such arrays.</p>\n", 'ViewCount': '67', 'Title': 'How can I have constant time initialization for multi-dimensional arrays?', 'LastEditorUserId': '6447', 'LastActivityDate': '2014-03-12T22:54:29.357', 'LastEditDate': '2014-03-11T12:00:06.893', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13051', 'Tags': '<data-structures><arrays>', 'CreationDate': '2014-03-05T17:05:00.133', 'FavoriteCount': '1', 'Id': '22306'}{'Body': "<p>Suppose we have an $N \\times N \\times N$ 3-d sorted array meaning that every row,column, and file is in sorted order. Searching for an element in this structure can be done using $O(N^2)$ comparisons. However are $\\Omega(N^2)$ comparisons needed in the worst-case? For an $N \\times N$ 2-d sorted array I recall a proof that $\\Omega(N)$ comparisons are needed; I'm having trouble seeing how to extend to the 3-d case though</p>\n", 'ViewCount': '24', 'Title': 'Lower bound on number of comparisons needed to search for a number in a sorted 3-d array', 'LastEditorUserId': '9584', 'LastActivityDate': '2014-04-14T18:45:49.407', 'LastEditDate': '2014-04-14T18:28:24.510', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '23793', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9584', 'Tags': '<algorithm-analysis><runtime-analysis><search-algorithms><arrays><lower-bounds>', 'CreationDate': '2014-04-14T17:58:35.807', 'Id': '23791'}{'Body': "<p>Suppose I have a array of real numbers with $n$ rows and $m$ columns.  I want to consider possible ways of dividing that array into rectangular regions of three different possible types: a constant value over the entire region, a linear gradient across rows or a linear gradient across columns.</p>\n\n<p>For example, the array</p>\n\n<p>$\\begin{bmatrix}1 &amp; 2 &amp; 3 &amp; 10 \\\\ 1 &amp; 2 &amp; 3 &amp; 12 \\\\ 4 &amp; 4 &amp; 4 &amp; 14\\end{bmatrix}$</p>\n\n<p>can be decomposed into a horizontal gradient [1-3], a vertical gradient [10-14] and a constant region of value 4.</p>\n\n<p>There are potentially many different ways to decompose any given array (in the extreme case, you can always divide it into $n$ by $m$ constant single-cell regions), so I'm interested in finding a 'simplest' solution (i.e. one with as few regions as possible.)</p>\n\n<p>Has this problem been studied or is it related to another kind of problem that has been studied?  It seems like it could be approached using some sort of tree representation where I start with all cells as individual constant regions, then combine them together under larger regions as long as they meet the desired constraints, then evaluate using some fitness function to decide whether it is an optimal (or at least 'good enough') decomposition.</p>\n\n<hr>\n\n<p>Regarding the optimality constraint, I have some flexibility here, so I can choose a constraint that helps make the problem easier to solve.  Ultimately the goal is to have a decomposition that appeals to human sensibilities of the 'patterns' present in the data, so my first thought is that minimizing the number of regions is probably a good constraint.</p>\n\n<p>Some interesting boundary cases to consider:</p>\n\n<p>$\\begin{bmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0\\end{bmatrix}$</p>\n\n<p>The preferred decomposition here would be three constant 2x2 regions of '1' and three constant regions of '0'.  This is preferable to the alternate 6 region decomposition with three 2x2 '0-1' gradients and three constant '1' regions, as constant regions are preferable to gradients if the number of regions is the same.</p>\n\n<p>$\\begin{bmatrix}1 &amp; 2 &amp; 3 \\\\ 2 &amp; 2 &amp; 2 \\\\ 3 &amp; 2 &amp; 1\\end{bmatrix}$</p>\n\n<p>Due to symmetry, this can decompose into either horizontal or vertical gradients.  I don't have any preference in this case for which should be chosen as the decomposition.</p>\n\n<p>Regarding distribution of size, it's probably better to avoid at the minimum 1x2 gradients.  Any array can be distributed arbitrarily into various single cell constant blocks and 1x2 gradient blocks, so this kind of interpretation is not particularly interesting.  In the case where there are no other patterns in a region of the data, I'd rather treat it as single cells, as I can do some post-processing to extract these 'complex' regions and treat them as lookup tables.</p>\n\n<hr>\n\n<p>Another case:</p>\n\n<p>$\\begin{bmatrix}1 &amp; 1 &amp; 2 &amp; 3 &amp; 4\\\\ 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4\\\\ 1 &amp; 1 &amp; 2 &amp; 2 &amp; 2\\\\ 1 &amp; 1 &amp; 2 &amp; 2 &amp; 2\\end{bmatrix}$</p>\n\n<p>Here it would be preferable to take the 4x2 '1' region and 2x3 '2' region, with a 2x3 '2-4' gradient region.  The alternative '1-4' gradient is worse because it requires splitting the '1' region into two different regions.</p>\n", 'ViewCount': '47', 'Title': 'Sub-dividing a 2d array into regions', 'LastEditorUserId': '16797', 'LastActivityDate': '2014-04-16T12:39:59.740', 'LastEditDate': '2014-04-16T12:39:59.740', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16797', 'Tags': '<algorithms><arrays>', 'CreationDate': '2014-04-15T17:38:24.487', 'Id': '23816'}{'Body': '<p>I\'m trying to read data values from a text file and input them into 3 different arrays.\nThe text file called \'stock\' has 3 types of data. Id number, quantity, and name of item.\nThis is what the file looks like: <a href="http://imgur.com/Pu2gxMW" rel="nofollow">http://imgur.com/Pu2gxMW</a></p>\n\n<p>1 5 ball<br>\n2 3 cleats<br>\n3 8 shirt</p>\n\n<p>I have written code to assign these data into 3 different arrays. the 1st, 2nd and 3rd columns go to the arrays \'id\', \'quantity\', and \'name\' respectively.</p>\n\n<p>To test if the data has been entered into the arrays, I also wrote code to print the arrays to the screen. However, when I run the code, instead of the values in the stock file, the screen displays huge numbers like 2686712, 4287152, etc.</p>\n\n<p>Here is the result:  <a href="http://imgur.com/PsqvMzv" rel="nofollow">http://imgur.com/PsqvMzv</a></p>\n\n<p>I have a feeling the data hasnt been assigned to the array properly.</p>\n\n<p>Can you please help me identify the error in my program? I really appreciate any help!</p>\n\n<p>#include &lt; iostream><br>\n #include &lt; cstdlib ><br>\n #include &lt; fstream ></p>\n\n<p>using namespace std;</p>\n\n<p>int main()<br>\n{<br>\n    //Declare Streams<br>\n    ifstream fin;<br>\n    ofstream fout;</p>\n\n<pre><code>//Open files and check for fail\nfin.open("stock.txt");\nif(fin.fail())\n{\n    cout&lt;&lt;"Failed to open input file"&lt;&lt;endl;\n    exit(1);\n}\n\nfout.open("order.txt");\nif (fout.fail())\n{\n    cout&lt;&lt;"Failed to open output file"&lt;&lt;endl;\n    exit(1);\n}\n\nint first, second, id[3], quantity[3];\nstring third, name[3];\n\ncout&lt;&lt;"Welcome to the Soccer Depo"&lt;&lt;endl&lt;&lt;endl;\n\n\n//reads data from input file to arrays\nfor(int i=0;i&lt;3;i++)\n{\n    while (fin &gt;&gt; first &gt;&gt; second &gt;&gt; third)\n    {\n        fin&gt;&gt;id[i]&gt;&gt;quantity[i]&gt;&gt;name[i];\n    }\n\n}\n\n//Prints the arrays\n\ncout&lt;&lt;"Id number, Quantity, Product"&lt;&lt;endl;\n\nfor(int i=0; i&lt;3; i++)\n{\n    cout&lt;&lt;id[i]&lt;&lt;", "&lt;&lt;quantity[i]&lt;&lt;", "&lt;&lt;name[i]&lt;&lt;endl;\n}\n\n\nreturn 0;\n</code></pre>\n\n<p>}</p>\n', 'ViewCount': '28', 'ClosedDate': '2014-04-28T07:40:02.733', 'Title': 'c++ Beginner program - reading from a text file to 3 different arrays', 'LastActivityDate': '2014-04-28T05:01:54.023', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11498', 'Tags': '<programming-languages><arrays>', 'CreationDate': '2014-04-28T05:01:54.023', 'Id': '24175'}