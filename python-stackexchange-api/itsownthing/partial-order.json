278_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>Inputs.</strong> I am given a finite set $S$ of symbols.  I know there should exist some total order $&lt;$ on $S$, but I\'m not given this ordering and it could be anything.</p>\n\n<p>I am also given a collection of assertions.  Each assertion takes the form $s_1&lt;s_2&lt;\\cdots&lt;s_m$, where $s_1,\\dots,s_m$ form a subset of the symbols of $S$.  The assertion probably won\'t mention all of the symbols of $S$, just a subset.  Each assertion will probably cover a different subset.</p>\n\n<p><strong>Warmup problem.</strong> The starter problem is: Given $n$ assertions, identify whether they are all internally self-consistent, i.e., whether there exists a total order on $S$ that is consistent with all of the assertions, and if so, output an example of such a total order.</p>\n\n<p><strong>The real problem.</strong> In practice, a few assertions might be faulty.  Almost all of them should be correct, though.  So, the real problem is: if the assertions are not all internally self-consistent, find a minimal subset of assertions to label as "probably-erroneous", such that if you remove the probably-erroneous assertions, the remainder are all self-consistent.</p>\n\n<p><strong>What I know.</strong> I know how to solve the warmup problem (just compute the transitive closure of the union of the partial orders given by each assertion, and check that the result is antisymmetric; or, in other words, create a graph with $S$ as vertex set and an edge $s\\to t$ if $s&lt;t$ appears in any assertion, then check for cycles).  However, I don\'t know how to solve the real problem.  Any ideas?</p>\n\n<p><strong>Real-world parameters.</strong> In the application domain where I\'ve run into this, $S$ might have up to a few hundred symbols, and I might have up to a few thousand assertions, with each assertion typically mentioning dozens of symbols.</p>\n', 'ViewCount': '112', 'Title': 'Given many partial orders, check them for consistency and report any that are not consistent', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-19T22:21:54.297', 'LastEditDate': '2012-10-19T18:36:26.050', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><graphs><approximation><finite-sets><partial-order>', 'CreationDate': '2012-10-19T17:25:00.620', 'FavoriteCount': '1', 'Id': '6173'},278_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Are the following relations $R_1$ and $R_2$ defined on the set $\\mathbb{Z}$ of integers partial orders? (A partial order is reflexive, antisymmetric and transitive.)</p>\n\n<ol>\n<li>$a$ $R_1$ $b$ if and only if $a = 2b$. </li>\n<li>$a$ $R_2$ $b$ if and only if $a^2|b$.</li>\n</ol>\n\n<p>Would someone help me understand?</p>\n', 'ViewCount': '124', 'Title': 'Are these two relations on integers partial orders?', 'LastEditorUserId': '31', 'LastActivityDate': '2012-12-07T20:09:06.330', 'LastEditDate': '2012-12-06T05:58:41.167', 'AnswerCount': '2', 'CommentCount': '12', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4776', 'Tags': '<partial-order>', 'CreationDate': '2012-12-05T16:58:07.223', 'Id': '7184'},278_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a DAG representing strict partial order where each node is an assignment of variables $V$ to their values $v$. Each arc $(u,w)$ represents a change in one variable value such that $u\\succ w$. </p>\n\n<p>So if I have $n$ binary variables, I will end up with $2^n$ nodes which is exponential to the size of variables $n$. is there any method to store such DAG efficiently? </p>\n', 'ViewCount': '119', 'Title': 'Is there an efficient method to store large DAGs?', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-18T18:31:40.867', 'LastEditDate': '2012-12-18T16:32:46.107', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4598', 'Tags': '<algorithms><graph-theory><data-structures><partial-order>', 'CreationDate': '2012-12-18T04:30:32.000', 'Id': '7484'},278_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given a partial ordered set (poset) $S$, is there a known procedure or algorithm to find the set of chains (i.e. subsets of $S$ where every two elements are comparable)? </p>\n\n<p>Note: I am asking here instead of math.SE because i'm looking for <em>an algorithm</em> for the problem.  </p>\n", 'ViewCount': '65', 'Title': 'Extracting the set of chains from a partial order', 'LastEditorUserId': '472', 'LastActivityDate': '2013-04-14T13:59:34.690', 'LastEditDate': '2013-04-14T13:59:34.690', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11279', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4598', 'Tags': '<algorithms><partial-order>', 'CreationDate': '2013-04-13T04:13:26.907', 'Id': '11276'},278_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Imagine I have an ordering on a bunch of elements like so:</p>\n\n<p><img src="http://i.imgur.com/Sl2kUC0.png" alt="enter image description here"></p>\n\n<p>Where an arrow $X \\leftarrow Y$ means $X &lt; Y$. It is also transitive: $\\left(X &lt; Y\\right) \\wedge \\left(Y &lt; Z\\right) \\implies \\left(X &lt; Z\\right)$.</p>\n\n<p>In order efficiently answer queries like $A \\stackrel {?}{&lt;} D$, some sort of labeling or data structure is required. For example, you could number the nodes from left to right, and thus you can simply do integer comparison to answer the query: $A \\stackrel {?}{&lt;} D \\implies 1 &lt; 4 \\implies T$. It would look something like this:</p>\n\n<p><img src="http://i.imgur.com/YQ28co3.png" alt="enter image description here"></p>\n\n<p>Where the number is the ordering, and the letter is just a name.</p>\n\n<p>But what if you needed to insert elements "in between" two other elements in the ordering, like so:</p>\n\n<p><img src="http://i.imgur.com/aLuLJRH.png" alt="enter image description here"></p>\n\n<p><img src="http://i.imgur.com/HTSllkZ.png" alt="enter image description here"></p>\n\n<p><img src="http://i.imgur.com/DaytZtk.png" alt="enter image description here"></p>\n\n<p>How can you maintain such an ordering? With simple numbering, you run into the problem that there are no integers "in between" $2,3$ to use.</p>\n', 'ViewCount': '881', 'Title': 'Maintaining an efficient ordering where you can insert elements "in between" any two other elements in the ordering?', 'LastActivityDate': '2013-10-01T13:49:11.323', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '14728', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<data-structures><graphs><linked-lists><partial-order><order-theory>', 'CreationDate': '2013-09-30T17:58:23.563', 'FavoriteCount': '2', 'Id': '14708'},278_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a bijection problem that I cannot get my head around. It goes like this: </p>\n\n<p>let f: A -> B and g: B -> C be functions such that g o f is a bijection. Prove that f must be one-to-one and that g must be onto. And also an example showing that it is possible for neither f nor g to be a bijection. </p>\n\n<p>This is the problem. I do not even know where to begin. Any help is appreciated. </p>\n', 'ViewCount': '64', 'ClosedDate': '2013-11-01T12:55:21.657', 'Title': 'trouble with bijection definition', 'LastEditorUserId': '10282', 'LastActivityDate': '2013-10-01T04:38:49.983', 'LastEditDate': '2013-10-01T04:16:58.313', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10282', 'Tags': '<proof-techniques><discrete-mathematics><correctness-proof><partial-order>', 'CreationDate': '2013-10-01T04:01:25.823', 'Id': '14724'},278_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>u is defined to be a substring of a string v if v = xuy for some string x and y. Either or both possibly empty. </p>\n\n<p>How to you prove that a substring relation on any set of strings is a partial order?</p>\n', 'ViewCount': '71', 'Title': 'How to prove substring is a partial order', 'LastActivityDate': '2013-10-01T04:36:12.067', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10282', 'Tags': '<partial-order>', 'CreationDate': '2013-10-01T04:16:40.047', 'Id': '14725'},278_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>So I have the question:</p>\n\n<p>Prove that any directed cycle in the graph of a partial order must only involve one node.</p>\n\n<p>So I know that a partial order must be transitive, antisymmetric, and reflective, but from there I am pretty lost. I also know that any path of one or more edges from a node to itself is a directed cycle, but from there I am having trouble connecting everything.</p>\n\n<p>I kind of need help as to where to start thinking, and the first step as to how to answer this question.</p>\n', 'ViewCount': '99', 'Title': 'Prove that any directed cycle in the graph of a partial order must only involve one node', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-10-24T13:28:57.787', 'LastEditDate': '2013-10-24T02:09:46.897', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10282', 'Tags': '<graphs><graph-traversal><partial-order><order-theory>', 'CreationDate': '2013-10-24T01:39:01.753', 'Id': '16389'},278_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m taking a graduate course on the theory of functional programming, based on Paul Taylor\'s "Practical Foundations of  Mathematics." I understand the statement of Tarski\'s theorem about how for any $\\omega$-compelte poset $X$, and any $\\omega$-continuous function $T:X\\rightarrow X$, that $T$ has a fixed point which is the join of (The statement and proof can be found <a href="http://www.paultaylor.eu/~pt/prafm/html/s33.html" rel="nofollow">here</a>).</p>\n\n<p>What I want to know is, how is this applicable, other than being a proof that the Y-combinator exists? It just seems to me that it says "we can use recursion to build a function that is defined for all natural numbers", where we could use some other recursive type for numbers. Doesn\'t the existence of the Y-combinator show the same thing?</p>\n', 'ViewCount': '73', 'Title': "What does Tarski's Fixed-Point theorem give us that that Y-Combinator does't", 'LastActivityDate': '2014-04-04T19:32:29.183', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<lambda-calculus><recursion><type-theory><partial-order><lattices>', 'CreationDate': '2014-04-04T19:16:13.043', 'Id': '23431'}