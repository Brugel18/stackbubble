235_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '225', 'Title': 'Is SAT in P if there are exponentially many clauses in the number of variables?', 'LastEditDate': '2012-07-21T18:44:49.583', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1589', 'FavoriteCount': '1', 'Body': "<p>I define a <em>long CNF</em> to contain at least $2^\\frac{n}{2}$ clauses, where $n$ is the number of its variables. Let $\\text{Long-SAT}=\\{\\phi: \\phi$ is a satisfiable long CNF formula$\\}$. </p>\n\n<p>I'd like to know why $\\text{Long-SAT} \\in P$. First I thought it is $\\text{NPC}$ since I can do a polynomial-time reduction from $\\text{SAT}$ to $\\text{Long-SAT}$, no?</p>\n\n<p>But maybe I can reduce $\\text{2-SAT}$ to $\\text{Long-SAT}$? How do I do that?</p>\n", 'Tags': '<complexity-theory><np-complete><reductions><satisfiability><polynomial-time>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-21T19:06:47.027', 'CommentCount': '7', 'AcceptedAnswerId': '2705', 'CreationDate': '2012-07-12T08:19:40.860', 'Id': '2704'},235_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In <em>"Introduction to Algorithms: 3rd Edition"</em> there is Theorem 34.2, which states</p>\n\n<blockquote>\n  <p>$P = \\{ L \\mid L \\text{ is accepted by a polynomial-time algorithm} \\}$</p>\n</blockquote>\n\n<p><em>"Accepted in polynomial-time"</em> is defined by:</p>\n\n<blockquote>\n  <p>$L$ is accepted in polynomial time by an algorithm $A$ if it is accepted by $A$\n      and if in addition there exists a constant $k$ such that for any length-n string $x\\in L$, \n      algorithm $A$ accepts $x$ in time $O(n^k)$.</p>\n</blockquote>\n\n<p><em>"Accepted"</em> is defined by:</p>\n\n<blockquote>\n  <p>The language accepted by an algorithm $A$ is the set of strings\n          $L = \\{ x \\in \\{0,1\\}^* \\mid A(x) = 1 \\}$,\n      that is, the set of strings that the algorithm accepts.</p>\n</blockquote>\n\n<p>But what if we take $k = 0$, and algorithm $A(\\cdot) = 1$, which just returns 1 for everything?\nWouldn\'t that mean, that $P$ is just class of all languages?</p>\n', 'ViewCount': '92', 'Title': 'Problem with the definition of P', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-02T08:33:12.717', 'LastEditDate': '2012-08-02T08:33:12.717', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '3000', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1552', 'Tags': '<complexity-theory><terminology><time-complexity><polynomial-time>', 'CreationDate': '2012-08-02T07:57:36.103', 'Id': '2999'},235_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Say we're given $n$ sets and the size of their union is $m$. We would like to construct a small set which contains at least $k$ of the $n$ given sets. </p>\n\n<p>Lets assume that $m$ is less than some polynomial in $n$, i.e.: $m &lt; P(n)$. In this case is there an efficient (polynomial) algorithm for the optimization problem:</p>\n\n<p>Find the smallest set which contains at least $k$ of the $n$ given sets.</p>\n", 'ViewCount': '147', 'Title': 'Find small superset of at least k of n given sets', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:27:49.990', 'LastEditDate': '2013-05-24T03:27:49.990', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2610', 'Tags': '<complexity-theory><np-complete><np-hard><polynomial-time>', 'CreationDate': '2012-08-24T21:24:54.527', 'FavoriteCount': '1', 'Id': '3321'},235_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m reading through <code>"Computers and Intractability: A guide to the Theory of NP-Completeness" by Michael R. Garey and David S. Johnson, p. 20</code> and I came across this concept of a function that is polynomially related to input lengths obtained using some encoding scheme. Let $$Len:D_{\\Pi}\\rightarrow \\mathbb Z^+$$ be a function that maps instances $\\in D_{\\Pi}$ (the set of instances of decision problem $\\Pi$) to positive integers (lengths). Let $x$ be the string obtained from $I\\in D_{\\Pi}$ under some encoding $e$. If there exist polynomials $p$ and $p\'$ such that $$Len(I) \\le p(|x|)$$ and $$|x| \\le p\'(Len(I)),$$ We say that $Len$ is polynomially related to the input lengths obtained by the encoding $e$. I cannot digest that; my understanding is that two encodings are polynomially related if converting from one another requires a polynomial amount of time. Can anybody clarify things a bit?</p>\n', 'ViewCount': '118', 'Title': 'Polynomially related lengths under two different encodings', 'LastEditorUserId': '19', 'LastActivityDate': '2012-09-09T01:38:36.957', 'LastEditDate': '2012-09-09T01:38:36.957', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '3472', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<complexity-theory><polynomial-time><encoding-scheme>', 'CreationDate': '2012-09-07T20:30:18.560', 'Id': '3462'},235_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For a list of integers, of size n, where n is exponential, will merge-sort(n), run in poly-time or psuedo poly-time?</p>\n', 'ViewCount': '146', 'Title': 'Exponential input and poly-time algorithm', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-27T23:40:33.147', 'LastEditDate': '2012-11-05T08:06:37.387', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '4365', 'Tags': '<algorithms><terminology><time-complexity><polynomial-time>', 'CreationDate': '2012-11-04T20:13:32.497', 'FavoriteCount': '1', 'Id': '6478'},235_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>For a given propositional formula f in DNF, one can decide in polynomial time, if the formula is satisfiable:\nJust walk through all subformulas (l_1 and ... and l_k) and check, wheter it has NO complementary pair of literals. Formula f is satisfiable iff such subformula exists.</p>\n\n<p>Is my approach above correct ?</p>\n\n<p>If yes, I'm wondering why all modern SAT solvers get a CNF as input format, and don't just use DNF.</p>\n", 'ViewCount': '338', 'Title': 'Propositional formula in DNF can be decided in polynomial time?', 'LastEditorUserId': '2313', 'LastActivityDate': '2012-12-17T22:49:05.543', 'LastEditDate': '2012-12-17T22:49:05.543', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7476', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2313', 'Tags': '<logic><polynomial-time>', 'CreationDate': '2012-12-17T21:20:07.437', 'Id': '7473'},235_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Are all algorithms which have polynomial time complexity belong to P class ? And P class do not have any algorithm which does have not polynomial complexity ? </p>\n\n<p>Are all algorithms which have non polynomial complexity belong to NP or NP-Hard or both ?</p>\n\n<p>I am just trying to understand the basic relationship.</p>\n', 'ViewCount': '157', 'ClosedDate': '2013-02-19T03:39:35.053', 'Title': 'The exact relation between complexity classes and algorithm complexities', 'LastActivityDate': '2013-02-19T00:36:46.637', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '9910', 'Score': '2', 'OwnerDisplayName': 'avi', 'PostTypeId': '1', 'OwnerUserId': '6665', 'Tags': '<complexity-classes><np><polynomial-time>', 'CreationDate': '2013-02-18T15:56:37.437', 'Id': '9909'},235_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '115', 'Title': 'Why does a polynomial-time language have a polynomial-sized circuit?', 'LastEditDate': '2013-04-08T14:41:49.757', 'AnswerCount': '2', 'Score': '2', 'OwnerDisplayName': 'John Smith', 'PostTypeId': '1', 'OwnerUserId': '4631', 'Body': '<p>I wish to understand why P is a subset of PSCPACE, that is why a polynomial-time langauge does have a polynomial-sized circuit. I read many proofs like <a href="http://www.stanford.edu/~rrwill/week3.pdf" rel="nofollow">this one here on page 2-3</a>, but all the proofs use the same technique used in the Cook-Levin theorem to convert the computation of M on an n-bit input x to a polynomial sized circuit. </p>\n\n<p>What I don\'t understand is that the resulting circuit is dependent on the input x, because what is being converted into a circuit is the computation of M on the specific input x. By definition of PSIZE, the same circuit must work for all the inputs in a fixed length, and thus is not dependent on one specific input. </p>\n\n<p>So how is the process of creating a poly-sized circuit family for a poly-time deterministic Turing machine works exactly?</p>\n', 'Tags': '<complexity-theory><time-complexity><space-complexity><complexity-classes><polynomial-time>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-08T14:41:49.757', 'CommentCount': '1', 'AcceptedAnswerId': '11121', 'CreationDate': '2013-04-07T21:22:54.587', 'Id': '11117'},235_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have to solve the following problem:</p>\n\n<blockquote>\n  <p>Consider the problem Connected:</p>\n  \n  <p><strong>Input:</strong> An unweighted, undirected graph $G$.</p>\n  \n  <p><strong>Output:</strong> True if and only if $G$ is connected.</p>\n  \n  <p>Show that Connected can be decided in polynomial time.</p>\n</blockquote>\n\n<p>I have been at this for hours, and I can't seem to find a way to prove this.\nAny hints?</p>\n", 'ViewCount': '384', 'Title': 'How to check whether a graph is connected in polynomial time?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-20T10:18:03.417', 'LastEditDate': '2013-04-10T08:49:17.583', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7643', 'Tags': '<algorithms><complexity-theory><graph-theory><polynomial-time>', 'CreationDate': '2013-04-10T00:08:01.310', 'Id': '11177'},235_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '226', 'Title': 'If A is poly-time reducible to B, is B poly-time reducible to A?', 'LastEditDate': '2013-04-14T11:11:21.183', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7715', 'FavoriteCount': '1', 'Body': '<p>Basically, is the following statement true?</p>\n\n<blockquote>\n  <p>$A \\leq_p B$ $\\rightarrow$ $B \\leq_p A$</p>\n</blockquote>\n', 'Tags': '<complexity-theory><reductions><polynomial-time>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-15T08:23:29.080', 'CommentCount': '3', 'AcceptedAnswerId': '11294', 'CreationDate': '2013-04-13T21:49:36.997', 'Id': '11292'},235_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '3059', 'Title': 'Finding shortest and longest paths between two vertices in a DAG', 'LastEditDate': '2013-04-14T16:59:17.863', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7715', 'FavoriteCount': '3', 'Body': '<p>Given an unweighted DAG (directed acyclic graph) $D = (V,A)$ and two vertices $s$ and $t$, is it possible to find the shortest and longest path from $s$ to $t$ in polynomial time?  Path lengths are measured by the number of edges.</p>\n\n<p>I am interested in finding the range of possible path lengths in polynomial time.</p>\n\n<p>Ps., this question is a duplicate of the StackOverflow question <a href="http://stackoverflow.com/questions/10712495/longest-path-in-a-dag">Longest path in a DAG</a>.</p>\n', 'Tags': '<algorithms><graphs><shortest-path><polynomial-time>', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-04-15T00:36:10.273', 'CommentCount': '0', 'AcceptedAnswerId': '11296', 'CreationDate': '2013-04-14T00:02:56.393', 'Id': '11295'},235_11:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given a positively weighted DAG (directed acyclic graph) $D = (V,E)$, can you create a new non-weighted DAG $D'$ by converting each edge with weight $w(e) = x$ into x non-weighted edges and vertices? I believe this would take $O(|E|+W)$ time where $|E|$ is the number of edges and $W$ is the total weight of all edges. My concern is whether I can include this weight variable and still consider this algorithm to be in polynomial time.</p>\n\n<p>(NOTE: This algorithm may apply to all positively weighted graphs, not just DAGs.)</p>\n", 'ViewCount': '37', 'Title': 'Can you convert a positively weighted DAG into a non-weighted DAG in polynomial time?', 'LastActivityDate': '2013-04-15T22:05:19.823', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11344', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7715', 'Tags': '<algorithms><graph-theory><graphs><algorithm-analysis><polynomial-time>', 'CreationDate': '2013-04-15T20:19:10.183', 'Id': '11343'},235_12:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How should I show that ${\\sf P}$ is contained in ${\\sf NP} \\cap {\\sf CoNP}$?</p>\n\n<p>I.e., all polynomial time solvable problems and their complements are verifiable in polynomial time.</p>\n', 'ViewCount': '205', 'Title': u'P is contained in NP \u2229 Co-NP?', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-05-21T16:58:00.003', 'LastEditDate': '2013-05-21T16:58:00.003', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'user15870', 'PostTypeId': '1', 'Tags': '<complexity-theory><np><polynomial-time>', 'CreationDate': '2013-05-02T08:25:55.583', 'Id': '11725'},235_13:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I saw a proof by Saeed Amiri,\nWe will add one extra vertex v to the graph G and we make new graph G\u2032, such that v is connected to the all other vertices of G. G has a Hamiltonian cycle if and only if G\u2032 has a Wn+1. It is easy to check that if G has a Hamiltonian cycle then G\u2032 has a Wn+1 wheel (just set v as a center). On the other hand, if G\u2032 has a Wn+1 then there are two possibility:</p>\n\n<p>v is the center of Wn+1\u2192G has a Hamiltonian cycle.\nAnother vertex u is the center of Wn+1 in G\u2032. So both deg(u)=deg(v)=n. Then we can change the labeling of this two vertices (actually they are equivalence under isomorphic), now we have again first possibility.\nP.S1: By Wn I mean the wheel with n vertex.</p>\n\n<p>P.S2: In this proof we say if we fix k=n+1 (size of the artificial graph), then the problem is NP-Complete in this restricted version, So it's also NP-Complete in the case k is as input parameter.</p>\n\n<p>The proof is valid one way. If a graph has a hamiltonian cycle adding a node to the graph converts it a wheel. If the graph of k+1 nodes has a wheel with k nodes on ring. It has a hamiltonian cycle. BUT IF THE GRAPH OF N nodes has a wheel of size k. Then identifying which k nodes cannot be done in polynomial time. Thus the reduction cannot be done in polynomial time.</p>\n", 'ViewCount': '106', 'ClosedDate': '2013-05-18T03:40:01.500', 'Title': 'Reducing from Hamiltonian Cycle problem to the Graph Wheel problem cannot be proved vice versa', 'LastActivityDate': '2013-05-15T07:51:32.010', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12034', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '8160', 'Tags': '<algorithms><graphs><np-complete><polynomial-time>', 'CreationDate': '2013-05-14T08:13:46.597', 'Id': '12009'},235_14:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given a set of rectangles, $D = \\{ (a_1, b_1), (a_2, b_2) \\dots , (a_n, b_n) \\}$, where in each pair $(a_i, b_i)$, $a_i$ represents the height of the rectangle and $b_i$ the width, and given another pair $(w, h)$ representing the width and height of a container $C$, does exist a way that taking some of the squares in $D$, the <strong>whole</strong> container C is perfectly filled? Here, $a_i, b_i, w, h \\in \\mathbb N$.</p>\n\n<p>I am trying to reduce it from Subset Sum, but can't find the way... Hope you guys can give me a hint over it!</p>\n", 'ViewCount': '38', 'Title': 'Showing filling a container with rectangles is hard by reducing from SUBSET-SUM', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-30T23:52:12.767', 'LastEditDate': '2013-05-30T23:52:12.767', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '12205', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8287', 'Tags': '<complexity-theory><np-complete><reductions><np><polynomial-time>', 'CreationDate': '2013-05-21T21:33:02.157', 'Id': '12202'},235_15:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>So we know that there exists a Turing Machine $M$ and a polynomial $T$ such that:</p>\n\n<ul>\n<li>$M$ halts on all inputs within at most $T(|x|)$ steps</li>\n<li>If $x$ is in $L$ then $M$ accepts $x$</li>\n<li>If $x$ is not in $L$ then $M$ rejects $x$</li>\n</ul>\n\n<p>We need to show that for any other problem $L'$, there exists a polynomial time computable function $f$ such that for all $x$, $f(x)$ is in $L'$ if and only if $x$ is in $L$.</p>\n\n<p>I imagine the answer is simple but I'm stumped.</p>\n", 'ViewCount': '90', 'Title': u"Prove that if a problem L can be decided in polynomial time, then L \u2264p L' for any other problem L'", 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T17:44:24.253', 'LastEditDate': '2013-05-28T17:44:24.253', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8402', 'Tags': '<complexity-theory><reductions><decision-problem><polynomial-time>', 'CreationDate': '2013-05-28T09:11:53.633', 'Id': '12329'},235_16:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm having trouble understanding reduction. Lets say you have a decision problem A that is NP-Complete. Also, another problem B the can be reduced from A.</p>\n\n<p>What can you say about B if:</p>\n\n<p>1) The reduction is done in polynomial time<br>\n2) The reduction is done in exponential time  </p>\n\n<p>I know that if A is reduced to B means that if we knew how to solve B, then solving A would be easy. But I don't understand what 1 &amp; 2 signify. </p>\n\n<p>Would it be right to say that for 1)<br>\nB is in the same Class as A  </p>\n\n<p>And for 2)<br>\nThat B > then NP-Complete?</p>\n", 'ViewCount': '75', 'Title': 'Exponential reduction vs Polynomial Reduction', 'LastActivityDate': '2013-05-31T13:50:21.463', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '12398', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8463', 'Tags': '<np-complete><reductions><polynomial-time>', 'CreationDate': '2013-05-31T12:23:20.910', 'Id': '12397'},235_17:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an exercise which I can\'t solve.</p>\n\n<p><strong>Exercise.</strong> Consider a game where the players have $2$ pure strategies each and assume that the graph $G$ is a tree with maximum degree $3$. Give a polynomial time algorithm to decide if such a game has a pure Nash equilibrium.</p>\n\n<p>The idea seems pretty obvious, every vertex of the tree and corresponding neighbouring vertices represent a "mini" game  which can be represent in normal form with size at most $2^4$. This "mini" game can decided efficiently in polynomial time.</p>\n\n<p>The problem is we have $n$ such a neighbouring areas (as a number of players), therefore we need somehow iteratively going over every area and decide where we have equilibrium and if not going back to the previous neighbouring areas change actions and check the existence. On the worst case it is going to take $2^{4n}$.</p>\n\n<p>But how to decide it in polynomial time?</p>\n', 'ViewCount': '47', 'Title': 'Nash Equilibrium in Tree of Bounded Degree', 'LastActivityDate': '2013-06-04T15:26:43.427', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4778', 'Tags': '<complexity-theory><trees><game-theory><polynomial-time>', 'CreationDate': '2013-06-04T15:26:43.427', 'Id': '12460'},235_18:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>On the wikipedia article about the polynomial hierarchy <a href="http://en.wikipedia.org/wiki/Polynomial_hierarchy" rel="nofollow">http://en.wikipedia.org/wiki/Polynomial_hierarchy</a></p>\n\n<p>it says "$A^B$ is the set of decision problems solvable by a Turing machine in class A augmented by an oracle for some complete problem in class B"</p>\n\n<p>What is a "Turing machine in class A" for classes P, NP, and coNP?</p>\n\n<p>I\'m guessing a Turing machine in P is a deterministic Turing machine that can only run for polynomial time in the size of its input</p>\n\n<p>and that a Turing machine in NP is a nondeterministic Turing machine that can only run for polynomial time in the size of its input</p>\n\n<p>But I have no clue what is a Turing machine in class coNP ?</p>\n', 'ViewCount': '72', 'Title': 'What is a Turing Machine in class coNP', 'LastActivityDate': '2013-06-05T09:29:27.857', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '12468', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8526', 'Tags': '<turing-machines><decision-problem><np><polynomial-time>', 'CreationDate': '2013-06-05T07:51:19.400', 'Id': '12466'},235_19:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $B=\\{b_1=g_1,\\cdots,b_n=g_n\\}$ be a set of binary variables $b_i$ and their corresponding values $g_i \\in \\{0,1\\}$. Let $M=\\{\\sum_{e \\in A}e \\;:\\; A \\subset B\\}$, i.e., $M$ is the set of all possible linear combinations of the equations in $B$.</p>\n\n<p>Given $S_i \\subset B$ for $i=1,\\cdots,m$, is that possible to compute, in polynomial time, a\n$K \\subset M$ with minimum size such that $S_i \\cup K$ is a full rank system of equations (i.e., the values of all of the variables can be obtained by solving $S_i \\cup K$)?</p>\n\n<p>An example: Let $B=\\{b_1=1,b_2=0,b_3=1\\}$, $S_1=\\{b_1=1,b_2=0\\}$, and $S_2=\\{b_2=0,b_3=1\\}$. \n$K=\\{b_1+b_3=0\\}$ is the solution because both $S_1\\cup K$ and $S_2 \\cup K$ can be solved uniquely and $K$ has the minimum size 1.</p>\n', 'ViewCount': '25', 'Title': 'Is this problem in P: Finding a common key for a collection of systems of equations?', 'LastActivityDate': '2013-06-20T02:54:32.613', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1672', 'Tags': '<complexity-theory><time-complexity><np-hard><polynomial-time><linear-algebra>', 'CreationDate': '2013-06-20T02:54:32.613', 'Id': '12776'},235_20:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm working on old multiple choice exams and would like to know if the following statements are true or false:</p>\n\n<p>a) $L_1 \\le_p L_2 \\le_p L_3 \\Rightarrow L_1 \\le_p L_3$</p>\n\n<p>b) If $L \\in \\mathsf{NP}$ and $U \\le_p L$ holds for all languages $U \\in \\mathsf{PSPACE}$ then $\\mathsf{NP} = \\mathsf{PSPACE}$</p>\n\n<p>c) $L \\in P \\Leftrightarrow L \\le_p \\{a\\}^*$</p>\n\n<p>Statement a) was part of the lecture, Statesments b) and c): I don't know.</p>\n", 'ViewCount': '80', 'Title': 'Properties of polynomial time many-one reductions', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-06-25T14:41:00.997', 'LastEditDate': '2013-06-25T14:31:06.470', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '8862', 'Tags': '<complexity-theory><reductions><polynomial-time>', 'CreationDate': '2013-06-25T13:12:53.783', 'FavoriteCount': '1', 'Id': '12889'},235_21:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Pardon me if i'm missing something which is very obvious here but i cant seem to figure it out. </p>\n\n<p>$E=\\{ \\langle M, w \\rangle \\mid \\text{ Turing Machine encoded by $M$ accepts input $w$ after at most $ 2^{|w|}$ steps}\\}$</p>\n\n<p>We have to prove $E\\notin P$</p>\n\n<p>The book (Papadimitrou, Elements of the ToC) assumes $E\\in P$ and it constructs another language (a diagonal one) </p>\n\n<p>$E_1=\\{\\langle M\\rangle \\mid \\text{ Turing Machine encoded by $M$ accepts input $M$ after at most $  2^{|M|}$ steps}\\}$</p>\n\n<p>and takes its complement language $E_1'$ and it follows that with the assumption $E\\in P$ , it is true that $E_1' \\in P$</p>\n\n<p>The question it then asks is the following: Say the polynomially bounded turing machine to decide $E_1'$ is $M^*$ then what happens when $M^*$ is presented with $M^*$ as an input?\nNow I understand it cant give an yes because that results in a contradiction. My doubt is where is the contradiction if the answer is no?</p>\n", 'ViewCount': '108', 'Title': 'Proving that a language is not in P using diagonalization', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-06-29T07:03:24.240', 'LastEditDate': '2013-06-29T07:03:24.240', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12955', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '8912', 'Tags': '<complexity-theory><polynomial-time><check-my-proof>', 'CreationDate': '2013-06-28T15:45:59.360', 'Id': '12953'},235_22:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to understand algorithm complexity, and a lot of algorithms are classified as polynomial. I couldn't find an exact definition anywhere. I assume it is the complexity that is not exponential. </p>\n\n<p>Do linear/constant/quadratic complexities count as polynomial? An answer in simple English will be appreciated :)</p>\n", 'ViewCount': '226', 'Title': 'What exactly is polynomial time?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-07T16:32:18.580', 'LastEditDate': '2013-08-07T07:59:04.743', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '13626', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '9538', 'Tags': '<algorithms><terminology><time-complexity><runtime-analysis><polynomial-time>', 'CreationDate': '2013-08-06T01:28:41.500', 'Id': '13625'},235_23:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m curious about two things.</p>\n\n<ol>\n<li><p>When we define the class called "probabilistic polynomial-time algorithm" in computer science, does it include polynomial-time algorithm with exponential space? \nFor example, when algorithm is considered to be given a input from domain $\\{0,1\\}^n$, \nwhat if the algorithm internally queries its exponential sized table (ex. $0^n\\to0,0^{n-1}1\\to1$ and so on..) and outputs the result? Does it still polynomial-time algorithm?</p></li>\n<li><p>In theoretical cryptography, one-way function $f:\\{0,1\\}^*\\to\\{0,1\\}^*$ has a requirement, which is related with <em>hard-to-invert</em> property, as following block.\nIf the answer to above question is yes, is it possible to construct algorithm $A\'$ to simulate exactly same as $f$ for every value in $\\{0,1\\}^n$ using exponential table as described in above question? If then, it implies that it\'s impossible to design one-way function which is definitely not true. So what have i missed?</p>\n\n<blockquote>\n  <p>For every probabilistic polynomial-time algorithm $A\'$, every positive polynomial $p(\\cdot)$, and all sufficiently large $n$\'s, </p>\n  \n  <p>$Pr[A\'(f(U_n),1^n)\\in f^{-1}(f(U_n))]&lt;\\frac{1}{p(n)}$</p>\n  \n  <p>where $U_n$ is random variable uniformly distributed over $\\{0,1\\}^n$ </p>\n</blockquote></li>\n</ol>\n', 'ViewCount': '195', 'Title': 'Polynomial-time algorithm with exponential space is eligible?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-08T10:42:59.150', 'LastEditDate': '2013-08-08T10:42:59.150', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '13668', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9565', 'Tags': '<complexity-theory><terminology><polynomial-time><one-way-functions>', 'CreationDate': '2013-08-07T10:09:41.700', 'Id': '13655'},235_24:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I read that most scientist don\'t believe that P=NP. This might be subjective but can you simplify why not? I\'m not informed enough to have an opinion but I\'d like to know the definitions and some "pretty simple" explanation why to believe one or the other case, for instance why even believe that it can be proved?</p>\n', 'ViewCount': '200', 'Title': u'Why do most scientists believe that P\u2260NP?', 'LastActivityDate': '2013-09-21T14:57:09.303', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2529', 'Tags': '<nondeterminism><polynomial-time>', 'CreationDate': '2013-09-21T04:09:46.230', 'FavoriteCount': '1', 'Id': '14487'},235_25:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How do we prove $M$ that is a deterministic random access machine that decides a problem $A$ for an input $i$, and $u_M(i)$ is the set of addresses of those registers that occur at least once with $s$ steps and a configuration of $C_0,\\dots,C_s$ where each configuration is of the form $C_i=(k_i,R_i)$, were $k_i$ is the program counter and a mapping $R_i$ runs in polynomial time if it runs in logarithmic space.</p>\n', 'ViewCount': '81', 'Title': 'Deterministic Random access machine and polynomial time', 'LastEditorUserId': '7269', 'LastActivityDate': '2013-10-21T02:10:25.430', 'LastEditDate': '2013-10-20T13:24:18.860', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '7269', 'Tags': '<complexity-theory><polynomial-time>', 'CreationDate': '2013-10-20T13:13:09.723', 'Id': '16256'},235_26:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is it practically possible or even near possible to make parity game to be solved in polynomial time? If yes, how? and if No, why?</p>\n', 'ViewCount': '113', 'Title': 'Is it possible to solve parity game problem in polynomial time?', 'LastActivityDate': '2013-10-24T15:35:31.673', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '16401', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10700', 'Tags': '<algorithms><algorithm-analysis><polynomial-time>', 'CreationDate': '2013-10-24T14:53:19.353', 'Id': '16399'},235_27:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to prove that every language that is not the empty set or {0,1}* is complete for NL (nondeterministic logarithmic space) under polynomial-time Karp reductions.</p>\n\n<p>I'm really not sure how to even approach this problem or what languages are being discussed if you exclude both the empty set and {0,1}*. Any suggestions to get me going in the right direction? Thanks!</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>I feel like I may still be understanding the problem incorrectly. I seem to be finding that polynomial-time reductions can't be used to define NL completeness, but that's what I feel this question is asking. What am I thinking about wrongly here? Thanks.</p>\n", 'ViewCount': '95', 'Title': 'Proving languages are complete on NL?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-03T22:52:22.417', 'LastEditDate': '2013-11-03T22:52:22.417', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11153', 'Tags': '<complexity-theory><reductions><polynomial-time>', 'CreationDate': '2013-11-03T18:01:48.380', 'Id': '16677'},235_28:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The following is my proof for $P$ being closed under union. I wish to know if my proof is correct in addition to what it means for the union of two problems.</p>\n\n<p>Proof:</p>\n\n<p>Let $p_1, p_2 \\in P$ Then by definition of $P$ $p_1$ is solvable in $O(n^k)$ for some $k\\in\\mathbb{N}$. Similarly $p_2$ is solvable in $O(n^{k_2}$) for some $k_2\\in\\mathbb{N}$.</p>\n\n<p>Then to solve $p_1 \\cup p_2$, we solve $p_1$ and $p_2$. So the total running time would be $O(n^k) + O(n^{k_2}) = O(n^{\\max(k, k_2)})$</p>\n\n<ol>\n<li>What does it mean to solve $p_1 \\cup p_2$? </li>\n<li>Is my proof correct or on the right track?</li>\n</ol>\n', 'ViewCount': '155', 'Title': 'Proving that the complexity class $P$ is closed under union', 'LastEditorUserId': '6815', 'LastActivityDate': '2013-11-19T13:40:09.620', 'LastEditDate': '2013-11-17T16:20:04.710', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '6815', 'Tags': '<complexity-theory><time-complexity><polynomial-time>', 'CreationDate': '2013-11-14T04:39:04.420', 'Id': '18004'},235_29:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Show that if 3SAT is polynomial-time reducible to $complement of 3SAT$ then $PH = NP$.</p>\n\n<p>Above problem is Exercise problem from Arora and Barak,</p>\n\n<p>i don't know how to solve this problem,if anybody knows how to solve please post the solution </p>\n\n<p>Thanks for help!!</p>\n", 'ViewCount': '71', 'ClosedDate': '2013-11-16T15:29:29.187', 'Title': 'Proving $PH = NP$', 'LastActivityDate': '2013-11-15T13:09:15.560', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '10145', 'Tags': '<complexity-theory><np-complete><complexity-classes><nondeterminism><polynomial-time>', 'CreationDate': '2013-11-15T09:28:14.230', 'Id': '18043'},235_30:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There are many solutions on the web showing that the subset-sum problem is polynomial time reducible to the set-partition problem. However, during my search, I came across the following <a href="https://www.google.ie/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=0CD0QFjAC&amp;url=http%3A%2F%2Fwww.cs.virginia.edu%2Fcs302%2Fclasses%2Fclass23.ppt&amp;ei=WH2LUue9N8rb7AaLrYCgCQ&amp;usg=AFQjCNG2EtWeZu-nt8KG-i2vkwE3kPntTw&amp;sig2=hDcvb_hFuUBc_QwhD6etJA" rel="nofollow">powerpoint</a> presentation (slide 12), where it says that the inverse is also true. i.e. the set-partition problem is polynomial time reducible to the subset-sum problem. \nSo far, I have been unable to find any proofs to show the same.</p>\n\n<p>So, my question: How is the set-partition problem polynomial time reducible to the subset-sum problem, or was there an error on the presentation above?</p>\n', 'ViewCount': '167', 'Title': 'Is the set-partition problem polynomial time reducible to the subset-sum problem?', 'LastActivityDate': '2013-11-19T16:39:04.547', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11481', 'Tags': '<sets><polynomial-time>', 'CreationDate': '2013-11-19T15:39:02.270', 'Id': '18159'},235_31:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am wondering if given the time complexity of an NP-Complete problem or at least some information about it for example if $ SAT\\in Time(2^{sqrt(n)})$ (hypothetically) could I assume that all languages in NP (which are clearly polynomial time reducible to SAT) are also $\\in Time(2^{sqrt(n)})$</p>\n\n<p>I believe the answer is false because I could basically pick any arbitrary class of exponential time functions and claim that all languages in NP are contained within it while it may actually belong to a class of higher power... but I'm not sure how to formulate this as a proof.</p>\n", 'ViewCount': '96', 'Title': 'Time complexity of languages that are polynomial time reducible to NP complete languages', 'LastActivityDate': '2013-12-09T02:56:43.687', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18768', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11306', 'Tags': '<time-complexity><np-complete><polynomial-time>', 'CreationDate': '2013-12-09T02:24:19.463', 'FavoriteCount': '1', 'Id': '18767'},235_32:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I know that the set partitioning problem defined like this:</p>\n\n<p>Given $S = \\left\\{ x_1, \\ldots x_n \\right\\}$, find $S_1$ and $S_2$ such that $S_1 \\cap S_2 = \\emptyset$, $S_1 \\cup S_2 = S$ and $\\sum_{x_i \\in S_1} x_i=\\sum_{x_i \\in S_2} x_i.$</p>\n\n<p>is NP-complete. But I don't understand why (or am not even sure if) the following problem is NP-complete:</p>\n\n<p>Given $S = \\left\\{ x_1, \\ldots x_n \\right\\}$, find $S_1$ and $S_2$ such that $S_1 \\cap S_2 = \\emptyset$, $S_1 \\cup S_2 = S$ and $\\vert \\sum_{x_i \\in S_1} x_i-\\sum_{x_i \\in S_2} x_i \\rvert$ is minimized.</p>\n\n<p>The paper 'The Differencing Method of Set Partitioning' by Karp and Karmarkar and some others say that it is NP-complete. But, if I have a sample solution to this problem, I can not tell whether it is an optimal solution (unlike in the first problem) and therefore I feel it NP-hard. If this is not true, how can I conclude that it is NP-complete? Thanks! </p>\n", 'ViewCount': '123', 'Title': 'Is the set partitioning problem NP complete?', 'LastActivityDate': '2013-12-09T18:45:42.057', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11962', 'Tags': '<complexity-theory><polynomial-time><partition-problem>', 'CreationDate': '2013-12-09T18:10:13.013', 'Id': '18782'},235_33:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '142', 'Title': 'Problems that are NP but polynomial on graphs of bounded treewidth', 'LastEditDate': '2013-12-16T12:50:01.927', 'AnswerCount': '4', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4598', 'FavoriteCount': '1', 'Body': '<p>I <em>heard</em> <a href="http://www.youtube.com/watch?v=cQwhYtTfZCs&amp;list=PLawkBQ15NDElkyLbJBKwZCgA5jxsKRlK-&amp;index=22" rel="nofollow">here</a> that the Hamiltonian cycle problem is polynomial on graphs of bounded treewidth.</p>\n\n<p>I am interested in examples/references to different problems which is essentially hard but having polynomial complexity on graphs of bounded treewidth. </p>\n', 'Tags': '<complexity-theory><graph-theory><reference-request><np><polynomial-time>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T14:13:58.150', 'CommentCount': '0', 'AcceptedAnswerId': '19036', 'CreationDate': '2013-12-15T20:00:48.920', 'Id': '19019'},235_34:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to show that the language Anfa = {(A,w)| A is an nondeterministic finite automata that accepts w} can be decided in polynomial time. My problem is every solution that I think of requires exponential time.</p>\n\n<p>I would appreciate any help, Thanks in advance..</p>\n', 'ViewCount': '115', 'Title': 'how to solve NFA acceptance problem in polynomial time', 'LastActivityDate': '2013-12-19T17:38:29.810', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12242', 'Tags': '<time-complexity><finite-automata><nondeterminism><polynomial-time>', 'CreationDate': '2013-12-19T17:12:44.090', 'Id': '19126'},235_35:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Lets assume $P = NP$. Can we say if every language $L \\in P$, then $L \\in NPC$?</p>\n\n<p>I read $P \\subseteq NP$, which means that $L\\in NP$. So I know for example, that a language can be $NP \\text{ hard}$, but it doesn't have to be in $NP$, e.g. $HALT$.</p>\n\n<p>But what about the case above. Is the language also $NPC$?</p>\n", 'ViewCount': '141', 'Title': 'P vs NP: Assuming P = NP', 'LastEditorUserId': '11941', 'LastActivityDate': '2013-12-28T00:21:54.187', 'LastEditDate': '2013-12-27T17:43:11.793', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11941', 'Tags': '<complexity-theory><np-complete><np-hard><np><polynomial-time>', 'CreationDate': '2013-12-27T17:37:27.420', 'Id': '19328'},235_36:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given two languages $L_1$ and $L_2$ that are in $\\mathsf{P}$, can it be proven that there is a polynomial time reduction from $L_1$ to $L_2$ and vice versa? If so, how?</p>\n\n<p>I noticed that if $L_1$ is the empty language, and $L_2$ is the "full language" $\\{ 0,1 \\}^*$, there does not seem to be a reduction from $L_2$ to $L_1$, but this is not clear to me. I know how a reduction works, so that is not a problem for me.</p>\n', 'ViewCount': '97', 'Title': 'Does two languages being in P imply reduction to each other?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-03T14:04:01.493', 'LastEditDate': '2014-01-03T14:04:01.493', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '19428', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12504', 'Tags': '<complexity-theory><reductions><polynomial-time>', 'CreationDate': '2013-12-31T22:04:51.200', 'Id': '19427'},235_37:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>The following definitions are from Li, M., &amp; Vit\xe1nyi, P. (1997). An introduction to Kolmogorov complexity and its applications (2nd ed.), pg. 38.</p>\n\n<blockquote>\n  <p>A language $A$ is called <em>polynomial time Turing-reducible</em> to a language $B$, denoted as $A\\leq_T^P B$, if given $B$ as an <em>oracle</em>, there is a deterministic Turing machine that accepts $A$ in polynomial time. That is, we can accept $A$ in polynomial time given answers to membership of $B$ for free.</p>\n  \n  <p>A language $A$ is called <em>polynomial time many-to-one reducible</em> to a language $B$, denoted as $A\\leq_m^P B$, if there is a function $r$ that is a polynomial time computable, and for every $a$, $a\\in A$ iff $r(a)\\in B$. In both cases, if $B\\in P$, then so is $A$.</p>\n</blockquote>\n\n<p>Aren't the two definitions equivalent? What's the difference?</p>\n", 'ViewCount': '41', 'ClosedDate': '2014-02-07T06:13:16.147', 'Title': 'What\'s the difference between "polynomial time Turing-reducible" and "polynomial time many-to-one reducible"?', 'LastActivityDate': '2014-01-13T15:49:05.680', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1474', 'Tags': '<complexity-theory><time-complexity><polynomial-time>', 'CreationDate': '2014-01-13T15:22:35.997', 'Id': '19694'},235_38:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In the book "Computational complexity" of Barak and Arora, on page 112, they state that:</p>\n\n<blockquote>\n  <p>Theorem 6.15: A language has logspace-uniform circuits of polynomial size iff it is in P.</p>\n</blockquote>\n\n<p>The proof of this one is left as an exercise to the reader.  I think both directions are trivial:</p>\n\n<p>=> seems trivial, as a logspace TM that generates a circuit also runs in polynomial time, and hence is a P-uniform circuit, which is part of P.</p>\n\n<p>&lt;= seems trivial, as a language that has a polynomial-time TM can be transformed into a circuit with Cook-Levin\'s theorem in logspace.</p>\n\n<p>However, what I don\'t get is why the theorem 6.15 explicitly states that the circuits must be of <em>"polynomial size"</em>.  How can there exist a logspace-uniform circuit that isn\'t polynomial in size?  The logspace computable function itself cannot exceed a polynomial bound, how can it produce a circuit of superpolynomial size?</p>\n\n<p>Also, this theorem would imply that logspace-uniform circuits comprise the same languages as P-uniform circuits, which seems very unintuitive to me.\nI can\'t find any information on the relation between logspace-uniform and P-space uniform circuits on the web, so my assumption that they are equal is probably false, but I fail to see see why.</p>\n', 'ViewCount': '54', 'Title': 'Relation between logspace-uniform circuits and P-uniform circuits', 'LastActivityDate': '2014-03-22T03:21:45.520', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '22923', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15965', 'Tags': '<polynomial-time><circuits>', 'CreationDate': '2014-03-21T11:15:21.080', 'Id': '22900'},235_39:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a language $L\\subseteq \\Sigma^*$ in $P$, is the language</p>\n\n<p>$subwords(L) = \\{v\\in\\Sigma^* : \\text{there exist } u,w\\in \\Sigma^* \\text{ with } uvw\\in L\\}$  </p>\n\n<p>that consists of all subwords of words in $L$ also guaranteed to lie in $P$?</p>\n', 'ViewCount': '29', 'ClosedDate': '2014-03-21T21:13:56.350', 'Title': 'Is P closed under subwords?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-21T21:13:15.440', 'LastEditDate': '2014-03-21T21:13:15.440', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15970', 'Tags': '<complexity-theory><closure-properties><polynomial-time>', 'CreationDate': '2014-03-21T12:41:15.233', 'Id': '22902'},235_40:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider, for example, the definition for $\\Sigma_2^p$ complexity class.</p>\n\n<p>$$ x \\in L \\Leftrightarrow \\exists u_1 \\forall u_2 \\;M(x, u_1, u_2) = 1, $$</p>\n\n<p>where $u_1, u_2 \\in \\{0,1\\}^{p(|x|)}$, for some polynomial $p$. Here, $M$ must be polynomial time. But polynomial in the size of what exactly? For example, if we choose (guess) some $u_1$, do I consider it to be fixed size when talking about time complexity of $M$? More precisely, should $M$ be polynomial only in the size of $x$? </p>\n\n<p>An example. Consider the problem whether, given a graph $A$, there exists a graph\n$B$ such that $B$ is subgraph isomorphic to $A$.</p>\n\n<p>$$A \\in L \\Leftrightarrow \\exists B \\; \\text{SubGraphIsomorphic}(A, B) = 1 $$</p>\n\n<p>Now, subgraph isomorphism is NP-complete. If $B$ is fixed, then there is a TM\nthat implements $\\text{SubGraphIsomorphic}$ in deterministic polynomial time. If $B$ is not fixed, then I cannot claim such a thing unless I know $\\sf P=NP$. Is this problem in $\\Sigma_{1}^{p}$, i.e. $\\sf NP$? (Ok, this problem has trivial solutions, but I hope it helps to pinpoint my confusion.)</p>\n\n<p>My confusion generalizes for all $\\Sigma_{i}^p$. </p>\n', 'ViewCount': '35', 'Title': 'Polynomial Hierarchy --- polynomial time TM', 'LastEditorUserId': '472', 'LastActivityDate': '2014-03-29T20:09:59.553', 'LastEditDate': '2014-03-29T20:09:59.553', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23207', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8508', 'Tags': '<complexity-theory><time-complexity><complexity-classes><polynomial-time>', 'CreationDate': '2014-03-29T01:14:37.587', 'Id': '23204'},235_41:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>While familiarizing myself with polynomial hierarchy, I have come across a problem\nof showing $NP^{\\Sigma_{k}^{p} \\cap \\Pi_{k}^{p}} \\subseteq \\Sigma_{k}^{p}$. By looking at the proof for $NP^{SAT} \\subseteq \\Sigma_{2}^{p}$, I got the concept\nwhere we can guess the choices of the NTM and answers to SAT call and then encode\nthe correctness of these answers. However, while I understand encoding correctness of answers for SAT calls, I have a problem of doing the same for the oracle $\\Sigma_{k}^{p} \\cap \\Pi_{k}^{p}$, which has no known complete problems. It seems to me there is a cookbook way of proving this that I am missing?</p>\n', 'ViewCount': '24', 'Title': 'Polynomial hierarchy intersection', 'LastActivityDate': '2014-03-30T04:15:53.713', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '23245', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8508', 'Tags': '<complexity-theory><time-complexity><polynomial-time>', 'CreationDate': '2014-03-30T02:34:29.467', 'Id': '23243'},235_42:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Students will identify certain students they want to work with. I have therefore decided to split them into two groups where I want to minimize the number of people in Group 1 who want to work with students from Group 2. </p>\n\n<p>I was thinking about creating a source node <em>s</em>, and creating a node for each person ($p_i$) - followed by hooking up the <em>s</em> to each $p_i$. Then I would create, another series of nodes for each person ($q_i$) and hook up each $p_i$ to each $q_i$ if $p_i$ <strong>doesn\'t</strong> want to work with $q_i$. Then, I would hook up each $q_i$ to a terminal node <em>t</em>. Each of the edges would have weight 1.</p>\n\n<p>I was thinking about running Edmonds\u2013Karp on it. Now, the solution would yield the maximum bipartite matching of the group (see e.g. <a href="https://www.youtube.com/watch?v=c9uLwB6aUVQ" rel="nofollow">here</a>). For each active arc from $p_i$  to $q_i$ in the final diagram, I would separate those two students.</p>\n\n<p>However, I have a bad taste in my mouth after running this algorithm; the bad taste stems from modeling the instance with respect to my intention: If I maximize the complement (the desire not to work with someone), do I really minimize the desire of students to work with each other across the two groups?</p>\n\n<p>If my hunch is correct (in that I\'m wrong), please point me in the right direction.</p>\n', 'ViewCount': '53', 'Title': 'How to optimally seperate a student body?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T09:54:48.057', 'LastEditDate': '2014-04-09T09:53:59.487', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '23586', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4748', 'Tags': '<algorithms><optimization><polynomial-time><bipartite-matching>', 'CreationDate': '2014-04-09T06:15:38.270', 'Id': '23582'},235_43:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem which essentially reduces to this:</p>\n\n<ol>\n<li>You have a black-box function that accepts inputs of length $n$.</li>\n<li>You can measure the amount of time the function takes to return the answer, but you can\'t see exactly how it was calculated.</li>\n<li>You have to determine whether the time-complexity of this function is polynomial or exponential.</li>\n</ol>\n\n<p>The way I did this was by running thousands of random sample inputs of varying lengths through the function, then plotting them on a scatter plot with times on the y-axis and input length on the x-axis.</p>\n\n<p>What are some metrics and methods I can use to determine if these points best fit to a polynomial curve or to an exponential curve?</p>\n\n<p>(Similar question asking how to draw polynomial/exponential best fit lines in Python on Stack Overflow: <a href="https://stackoverflow.com/questions/23026267/how-to-determine-if-a-black-box-is-polynomial-or-exponential">https://stackoverflow.com/questions/23026267/how-to-determine-if-a-black-box-is-polynomial-or-exponential</a>)</p>\n', 'ViewCount': '272', 'Title': 'How to determine if a black-box is polynomial or exponential', 'LastEditorUserId': '16701', 'LastActivityDate': '2014-04-12T16:26:22.670', 'LastEditDate': '2014-04-12T06:40:45.627', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '23688', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16701', 'Tags': '<complexity-theory><time-complexity><polynomial-time><statistics>', 'CreationDate': '2014-04-12T04:54:14.143', 'Id': '23686'},235_44:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>A polynomial map is equal to another polynomial map iff they take on the same values at each point.  So this is different from formal polynomials.   So since in $\\Bbb{Z}_p$, $x^{p-1} = 1$ for all $x \\neq 0$, and is $0$ on $0$, we have that there are a finite number of polynomial maps in $\\Bbb{Z}_p[x_1, \\dots, x_k]$.  For now let's work in $\\Bbb{Z}_2$ for simplicity.</p>\n\n<p>The coefficients are arbitrarily chosen $c_i \\in \\Bbb{Z}_2$, and polynomials are in $\\Bbb{Z}_2[x_1, \\dots, x_k]$.  Then </p>\n\n<p>$c_0 + c_1x_1$ obviously has complexity $2$ (2 operations explicitly required).</p>\n\n<p>$c_0 + c_1x_1 + c_2 x_2$ needs $4$ ops.</p>\n\n<p>$c_0 + c_1x_1 + (c_2+ c_3 x_1) x_2$ needs $6$ ops max.</p>\n\n<p>$c_0 + c_1x_1 + c_2 x_2 + c_3 x_3 + c_4 x_1 x_2 + c_5 x_1 x_3 + c_6 x_2 x_3 + c_7 x_1 x_2 x_3 = \\\\ c_0 + x_1(c_1 + x_2 (c_4 + c_7 x_3) + c_5 x_3) + x_2 (c_2 + c_6 x_3) + c_3 x_3$ </p>\n\n<p>needs $14$ ops.  The pattern seems to be</p>\n\n<p>$1 + (k + (k-1) + \\dots + 1) + ((k-2) + (k-1) + \\dots + 1) + \\dots + 1$ which is $O(k^3)$, so is polynomial complexity polynomial?</p>\n\n<p>Where did I make any mistake?  Thanks.</p>\n\n<p>This doesn't make sense as there are about $p^k$ coefficients, and each one must be visited.</p>\n\n<p>$* + x_1(* + x_2(* + x_3(* + *x_4) + *x_3 + *x_4)) + x_2 (* + x_3(* + *x_4) + *x_4) + x_3(* + *x_4) + *x_4$</p>\n", 'ViewCount': '28', 'Title': 'Complexity of general polynomial map evaluation is polynomial?', 'LastEditorUserId': '12373', 'LastActivityDate': '2014-04-20T23:51:52.963', 'LastEditDate': '2014-04-19T20:31:32.287', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23943', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12373', 'Tags': '<algorithms><complexity-theory><polynomial-time><polynomials>', 'CreationDate': '2014-04-19T20:08:43.153', 'Id': '23941'}