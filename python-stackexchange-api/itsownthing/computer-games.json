{'Body': '<p>Just thinking of Counter Strike as a canonical example, if you have a coordinate representation of the map and for every player you have a complete history of everything you might need for every moment of time, say every 10 miliseconds or something and you just recorded where the players went around the map, and what they did. So maybe, for example, at each time <code>t</code> you had <code>v(t)</code> a vector function whose components are (<code>location(t)</code>, <code>velocity(t)</code>, <code>rotationVector(t)</code>, <code>rotationVelocity(t)</code>, <code>isFiring(t)</code>, <code>ammoCount(t)</code>, <code>health(t)</code>, <code>isEnemyVisible(t)</code>, <code>isTeamMateVisible(t)</code>) or whatever other measurements you think would be useful for the state space.</p>\n\n<p>If you collected a bunch of data like this what sort of hypotheses or models would you consider testing? Would it be possible to construct a probabilistic model to classify histories and possibly predict outcomes of player-enemy encounters? Could you train AI bots on this data?</p>\n', 'ViewCount': '112', 'Title': 'What could you learn from studying player movement and behaviour on online FPS games?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-25T17:56:03.673', 'LastEditDate': '2012-09-24T05:47:40.930', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2631', 'Tags': '<machine-learning><computer-games>', 'CreationDate': '2012-08-24T18:19:44.083', 'Id': '3318''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>What is a good textbook for a seminar about </p>\n\n<ul>\n<li>virtual environments,  virtual worlds,  augmented reality  and\nsimilar topics?</li>\n</ul>\n\n<p>The seminar is at the graduate studies level and is supposed to give introduction to virtual environments, technologies and applications as well as  current research directions.</p>\n\n<p>A creative commons license and availability online would be a plus.</p>\n\n<p>Here are my own results after some search:</p>\n\n<ul>\n<li><a href="http://www.intechopen.com/books/augmented-reality" rel="nofollow">Augmented Reality</a> - open access book at Intechopen</li>\n</ul>\n\n<p>I was suggested these books (no online access) at another source (ResearchGate):</p>\n\n<ul>\n<li>"Virtual Reality Technology" (Grigore C. Burdea, Philippe Coiffet)</li>\n<li>"Understanding Virtual Reality: Interface, Application, and Design" (William R. Sherman, Alan B. Craig) </li>\n<li>"Developing Virtual Reality Applications:Foundations of Effective Design" (Alan Craig , William R. Sherman)</li>\n<li>"Stepping into Virtual Reality " (Mario Gutierrez, F. Vexo, Daniel Thalmann)</li>\n</ul>\n\n<p>In your answer please comment, why do you suggest a particular source and why it is fundamental or current in the field.</p>\n', 'ViewCount': '39', 'Title': 'A text for virtual environments seminar', 'LastEditorUserId': '3019', 'LastActivityDate': '2012-10-04T07:36:44.627', 'LastEditDate': '2012-10-04T07:36:44.627', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '3019', 'Tags': '<reference-request><books><graphics><computer-games><hci>', 'CreationDate': '2012-09-30T20:44:48.760', 'Id': '4821''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Instancing in GPU\'s, from my little knowledge, simply draw the same object at multiple locations. Each "instance" is just a copy of the same model at a different location. Any local effects, such as animation, would effect all instances. The performance improvement comes from gpu being able to deal with virtually all the instance aspects. </p>\n\n<p>One could create several variations of the same object and instance each one. This would be very useful to create variations(say for leaves on a tree) but, while allowing for rather large number of instances(basically limited by the gpu) and variation increases the the cpu\'s involvement by the number of variations(from the previous case).</p>\n\n<p>If we could send the changes to the gpu then we could get back to the first case(or very close) and achieve very high levels of variations with limited cpu involvement.</p>\n\n<p>For example,</p>\n\n<p>Suppose we wanted to populate a jungle with a lot of animals. Each animal object will have many instances(many tigers and birds but all using the same template). If we had one long animation containing all the possible animations of each animal and send it to the gpu we then would simply have to tell the gpu which part of the animation each instance was in(and we could have a default animation to limit cpu-gpu communications).</p>\n\n<p>This would effectively let us control all the instances with just a animation position indicator(and possible a few other parameters such as scale) and coordinate position. The gpu would take care of all the rest.</p>\n\n<p>The problem, of course, is that that each instance would not have any logic associated with it. This is not a big deal though for most computer objects. The cpu generally has to take care of the logic anyways but in this case, instead to tell send all that information to the gpu we can just send it a few bytes for each instance.</p>\n\n<p>For example, suppose in our jungle we have a few cheetahs and on our cpu we are keeping track of which ones are doing what and simply sending which animation we want them to use to the cpu(instead of sending all the vertex data and/or telling it how to transform them).</p>\n\n<p>This seems like it would be much faster and essentially just boils down to moving some of the code from the cpu to the gpu(which as been what is happening all along).</p>\n\n<p>Using such a method is not ideal because of the lack of physical modeling per instance but for far enough away objects were intersecting objects won\'t be seen it won\'t matter.</p>\n\n<p>We could have thousands of birds, for example, all seemingly moving individually but generated from one model with a few animations.... the cpu doing very little but sending which animations to use to the gpu. (and of course deciding what each bird should do)</p>\n\n<p>Anyways, this is a thought but it seems to me the goal of future gpu\'s is to deal with all the visual aspects while the cpu deals with the logic(and the communication between the too is to be minimized).</p>\n\n<p>Is my interpretation of instancing with animation\'s flawed or could it be implemented and be useful to 3d games?</p>\n', 'ViewCount': '46', 'Title': 'Extreme instancing for computer graphics', 'LastActivityDate': '2012-10-19T13:24:39.653', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4244', 'Tags': '<graphics><computer-games>', 'CreationDate': '2012-10-19T13:24:39.653', 'FavoriteCount': '1', 'Id': '6169''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>With the advent of <a href="http://code.google.com/p/bwapi/" rel="nofollow">BWAPI</a>, many AI enthusiasts have been making amazing AIs that can compete against top players in Starcraft. This led me to wonder if RTS (Real-Time Strategy) games can ever be solved theoretically. </p>\n\n<p>One of my colleague argues no, because RTS games are non-deterministic and stochastic. What does this mean exactly? For instance, in Starcraft you have a set of defined and limited moves (I.E: Units, buildings, economy) you can make in the game, so I don\'t see what can be so stochastic about the game.</p>\n\n<p><img src="http://i.stack.imgur.com/ZkTrJ.png" alt="enter image description here"></p>\n', 'ViewCount': '143', 'Title': 'Can Real-Time Strategy games be ever solved?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-15T23:58:08.763', 'LastEditDate': '2013-01-14T19:23:35.693', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6417', 'Tags': '<artificial-intelligence><computer-games>', 'CreationDate': '2013-01-14T14:30:33.180', 'Id': '8933''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I bought a great puzzle called <a href="http://en.wikipedia.org/wiki/Icosoku" rel="nofollow">Icosoku</a>. Wikipedia describes it as: "The puzzle frame is a blue plastic icosahedron, and the pieces are 20 white equilateral-triangular snap-in tiles with black dots and 12 yellow pins for the corners. The pins are printed with the numbers from 1 to 12, and the triangular tiles have up to three dots in each of their corners. The object of the game is, for any arrangement of the pins, to choose the positions and orientations of the triangles so that the total number of dots on the five joining corners of each pin equals the number of the pin." </p>\n\n<p>I created a computer program which solves this puzzle by randomly choosing any two triangular tiles and then exchanging them (giving each tile a random orientation) if and only if the total discrepency (which can be measured in various ways) between each number on the pins and the total number of dots on the five joining corners of each pin decreases. But I have found that it takes hundreds or even thousands of iterations to finally get a solution for most initial configurations. I would like my program to take less time. Any suggestions?</p>\n', 'ViewCount': '223', 'Title': 'Speeding up a program solving Icosoku', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-24T18:17:14.713', 'LastEditDate': '2013-03-05T07:00:05.383', 'AnswerCount': '4', 'CommentCount': '0', 'AcceptedAnswerId': '10244', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7115', 'Tags': '<efficiency><computer-games>', 'CreationDate': '2013-03-03T01:41:53.140', 'Id': '10216''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm interested in building an AI algorithm to play a board game.  This is a sequential two-player game, where they alternate taking turns, so minimax or alpha-beta algorithms sound natural.</p>\n\n<p>However, the twist here is that the game is randomized.  There is a deck of cards that is shuffled randomly; each turn involves drawing the next card from the deck, then making a move.</p>\n\n<p>What algorithms are appropriate for selecting a move, in a game with randomness?</p>\n\n<p>I understand that one approach is to think of this as a three-player game: in addition to the two players, there is a third player (the dealer) who makes a random move.  For instance, if the two players are Minnie and Maxwell, we might alternate moves in the following order: Dealer (chooses a random card for Minnie), Minnie (selects a move), Dealer (chooses a random card for Maxwell), Maxwell (selects a move), and so on.  I think I've read that alpha-beta search can be adapted to this setting.  However, this doesn't sound too promising to me.  There are perhaps 52 possible outcomes of the moves by Dealer, so the tree will be very bushy (with a large branching factor), causing exponential blowup.  Also, this sort of modified alpha-beta search feels a bit inefficient to me.  Each move likely affects a player's score by only a little bit at a time, so we'd expect that the effects of the randomness to average out over many moves, and there is no need to explore all combinations of possible random outcomes.  To put it another way: the game is more about positional elements and random luck than about tactical/combinatorial elements.</p>\n\n<p>Is there a better algorithm framework for randomized games, that takes into account the stochastic element?  (Bonus points if you can suggest something that takes advantage of the fact the strength of a position changes only slowly over many moves.)</p>\n", 'ViewCount': '130', 'Title': 'Algorithms to play randomized game', 'LastActivityDate': '2013-10-09T11:57:28.203', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><artificial-intelligence><board-games><computer-games>', 'CreationDate': '2013-10-01T06:56:49.967', 'Id': '14729''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '57', 'Title': 'A scoring approach to computer opponents that needs balancing', 'LastEditDate': '2014-03-22T15:34:07.950', 'AnswerCount': '2', 'Score': '13', 'OwnerDisplayName': u'Simon Andr\xe9 Forsberg', 'PostTypeId': '1', 'OwnerUserId': '14926', 'Body': '<p>Update: The (Java) code used for this approach has now been <a href="http://codereview.stackexchange.com/questions/45088/a-scoring-approach-to-computer-opponents">posted at Code Review</a>.</p>\n\n<hr>\n\n<p>This question is about an approach to computer opponents that I have created and are either currently being used, or are planned to be used, in several computer games.</p>\n\n<h3>Background</h3>\n\n<p>Last year, when trying to improve a computer opponent for a game called "Minesweeper Flags" <em>(short description: A turn-based multiplayer version of Minesweeper where you have to <strong>take</strong> more mines than your opponent)</em>, I strongly changed the way my algorithms worked. Instead of using an approach like if-else-if-else, I am using a set of "scorers" with specified weights to determine what the best move is.</p>\n\n<p>You might think that for a game like Minesweeper Flags, it\'s only about making moves that gives you the highest probability of taking a mine, but it\'s not that simple. Which move the computer will make usually depends on several features for that specific move in the current game state. Examples of features: </p>\n\n<ul>\n<li>What\'s the probability of this move scoring a mine?</li>\n<li>What\'s the probability of revealing anything to my opponent here?</li>\n</ul>\n\n<h3>Description of the system</h3>\n\n<p>The system basically works like this:</p>\n\n<ol>\n<li>"Pre-scorers": Some pre-analysis is done for the current game state (in terms of Minesweeper Flags, this is usually: Calculating all the probabilities)</li>\n<li>"Scorers": A set of ordinary scorers are asked to determine the score for each possible move, each scorer applies scores according to it\'s own criteria. The scorers can check the results of the pre-analysis that was made.</li>\n<li>The scores calculated in the above step is summed together and is set to be the score for a move.</li>\n<li>The moves are sorted according to their score and ranked so that all moves with the same score gets the same rank.</li>\n<li>"Post-scorers": The result of the above can be sent to "Post-scorers" that have the possibility to modify the scores of any fields in any way they want, according to the post-scorer\'s own rules.</li>\n</ol>\n\n<p>When combining a bunch of pre-scorers, scorers (with their weights) and post-scorers, it\'s becomes what I call a <strong>score configuration</strong>.</p>\n\n<h3>Example result</h3>\n\n<p>This is an example of scores having been applied to Minesweeper Flags. This is the map that was scored:</p>\n\n<p><img src="http://i.stack.imgur.com/aIRiz.png" alt="Minesweeper Flags map that was scored"></p>\n\n<p>And this is the output of an actual score configuration. It is showing the rank of the possible moves, where 1 is the best rank and has been highlighted in white:</p>\n\n<p><img src="http://i.stack.imgur.com/ArJG4.png" alt="Example output of scoring approach"></p>\n\n<p>Thanks to having written highly flexible code, this approach to AIs can be inserted into other games as well.</p>\n\n<h3>Advantages and disadvantages</h3>\n\n<p>Below are some advantages and disadvantages of this system that I can think of myself</p>\n\n<p><strong>Advantages</strong></p>\n\n<ul>\n<li>It\'s very easy to create a whole lot of different configurations for AIs.</li>\n<li>It is possible to use with Genetic Algorithms: Each scorer has an associated weight, the weight can become the gene.</li>\n<li>Using some tools, it is possible to check why a specific move was made and which scorers were mainly responsible for that move</li>\n<li>Using tools, it is possible to create a map of the overall score/rank of possible moves (like the screenshot above)</li>\n<li>By applying scores to the way the human plays, it is possible to create an "#AI_Mirror" which tries to make moves that it thinks the human would make</li>\n</ul>\n\n<p><strong>Disadvantages</strong></p>\n\n<ul>\n<li>It can be extremely difficult to adjust a score configuration "correctly", to make the AI play as good as possible.</li>\n</ul>\n\n<h3>Questions</h3>\n\n<ul>\n<li><p>Is the system I have built here widely known in the AI world? What would it be called in real AI terms?</p></li>\n<li><p>Does this approach make sense or is there a different approach that you would recommend?</p></li>\n<li><p>What ways are there that could make the process of tweaking a score configuration easier?</p></li>\n</ul>\n\n<p>Regarding the last question, I am aware of the possibility of using genetic algorithms, I am also mildly aware of <a href="http://artint.info/html/ArtInt_272.html" rel="nofollow">SARSA</a> (and I do think my scorers resembles that site\'s description of features with weights, but from my understanding that\'s not exactly what I have created here). I think that a problem with SARSA is that you don\'t know the reward until the game is over, the best move is often a move which doesn\'t give a reward (a mine) at all. Your current chances of winning depends on both the current score (how many mines you and your opponent have taken) and what the current map looks like.</p>\n', 'Tags': '<algorithms><artificial-intelligence><computer-games>', 'LastEditorUserId': '14926', 'LastActivityDate': '2014-03-22T15:34:07.950', 'CommentCount': '0', 'AcceptedAnswerId': '21982', 'CreationDate': '2014-02-12T19:44:49.750', 'Id': '21981''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>(This is based on <a href="http://math.stackexchange.com/questions/699864/perfect-play-in-1-dimensional-minesweeper">my earlier MSE question</a> that has been stagnant for just over a week, since the\n<br>\nbest answer only addresses the case of two mines and does not even completely resolve that.)</p>\n\n<p>What is the computational complexity of playing 1-dimensional Minesweeper in a way that\n<br>\nmaximizes the probability of winning, where the board length is given in unary, the number\n<br>\nof mines is known, and their position is chosen uniformly from among all possibilities?</p>\n\n<p>I believe the reasoning used in the proof of $\\:$<a href="http://en.wikipedia.org/wiki/IP_%28complexity%29#Proof_of_IP_.3D_PSPACE" rel="nofollow">IP $\\subseteq$ PSPACE</a>\n<br>\nshows that the complexity is at most PSPACE.\n<br><br></p>\n', 'ViewCount': '51', 'ClosedDate': '2014-03-13T01:42:56.530', 'Title': 'How hard is it to play 1-dimensional minesweeper optimally?', 'LastEditorUserId': '12859', 'LastActivityDate': '2014-03-13T02:01:40.077', 'LastEditDate': '2014-03-13T02:01:40.077', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12859', 'Tags': '<algorithms><computer-games>', 'CreationDate': '2014-03-12T23:07:07.527', 'Id': '22563''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>My computer has 4 ram just like my friends'. Mine has 3 3d games.(minecraft, LOL, and world of warcraft) I also have Skype and 2 programming ides'. I may have a few other small programs but I still have quite a lot of space. In the task manager, iexplorer by default takes a lot of ram especially when im gaming or on Skype. ssSchedual and csrss takes a good amount too. On my buddy has a laptop with the same amount of ram has a crap ton of programs running when it starts. Taskmanager had a huge scroll bar. Even with everything running at once. His couldn't be smoother. I don't get it! I know it might be more space but still this laptop is only 2 years old since I got it and it's a dell. His is a dell too I think.</p>\n", 'ViewCount': '6', 'ClosedDate': '2014-05-03T08:54:52.733', 'Title': 'Ram speed problems', 'LastActivityDate': '2014-05-03T01:56:28.580', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '17289', 'Tags': '<computer-games>', 'CreationDate': '2014-05-03T01:56:28.580', 'Id': '24335''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}