1230:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Our professor asked us to think of a function in OCaml that has the type</p>\n\n<pre><code>'a -&gt; 'b\n</code></pre>\n\n<p>i.e. a function of one argument that could be anything, and that can return a different anything.</p>\n\n<p>I thought of using <code>raise</code> in a function that ignores its argument:</p>\n\n<pre><code>let f x = raise Exit\n</code></pre>\n\n<p>But the professor said there was a solution that doesn't require any function in the standard library. I'm confused: how can you make a <code>'b</code> if you don't have one in the first place?</p>\n\n<p><sub> I'm asking here rather than on Stack Overflow because I want to understand what's going on, I don't want to just see a program with no explanation. </sub></p>\n", 'ViewCount': '317', 'Title': "ML function of type 'a -> 'b", 'LastEditorUserId': '708', 'LastActivityDate': '2012-03-25T15:51:47.710', 'LastEditDate': '2012-03-25T15:51:47.710', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '303', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<programming-languages><typing><functional-programming>', 'CreationDate': '2012-03-13T11:21:21.667', 'Id': '302'},1231:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m learning programming in ML (OCaml), and earlier I asked about <a href="http://cs.stackexchange.com/questions/302/ml-function-of-type-a-b">ML functions of type <code>\'a -&gt; \'b</code></a>. Now I\'ve been experimenting a bit with functions of type <code>\'a list -&gt; \'b list</code>. There are some obvious simple examples:</p>\n\n<pre><code>let rec loop l = loop l\nlet return_empty l = []\nlet rec loop_if_not_empty = function [] -&gt; []\n                                   | l -&gt; loop_if_not_empty l\n</code></pre>\n\n<p>What I can\'t figure out is how to make a function that does something other than return the empty list or loop (without using any library function). Can this be done? Is there a way to return non-empty lists?</p>\n\n<p>Edit: Yes, if I have a function of type <code>\'a -&gt; \'b</code>, then I can make another one, or a function of type <code>\'a list -&gt; \'b list</code>, but what I\'m wondering here is how to make the first one.</p>\n', 'ViewCount': '168', 'Title': 'ML functions from polymorphic lists to polymorphic lists', 'LastEditorUserId': '708', 'LastActivityDate': '2014-04-20T22:26:40.853', 'LastEditDate': '2012-03-25T15:51:46.010', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '23967', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<programming-languages><typing><functional-programming>', 'CreationDate': '2012-03-14T00:11:34.063', 'Id': '341'},1232:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am working on an expression based language of ML genealogy, so it naturally needs type inference >:)</p>\n\n<p>Now, I am trying to extend a constraint-based solution to the problem of inferring types, based on a simple implementation in EOPL (Friedman and Wand), but they elegantly side-step algebraic datatypes.</p>\n\n<p>What I have so far works smoothly; if an expression <code>e</code> is <code>a + b</code>, <code>e : Int</code>, <code>a : Int</code> and <code>b : Int</code>. If <code>e</code> is a match,</p>\n\n<pre><code>match n with\n  | 0 -&gt; 1\n  | n' -&gt; n' * fac(n - 1)`, \n</code></pre>\n\n<p>I can rightly infer that the <code>t(e) = t(the whole match expression)</code>, <code>t(n) = t(0) = t(n')</code>, <code>t(match) = t(1) = t(n' * fac(n - 1)</code> and so on...</p>\n\n<p>But I am very unsure when it comes to algebraic datatypes. Suppose a function like filter:</p>\n\n<pre><code>let filter pred list =\n  match list with\n    | Empty -&gt; Empty\n    | Cons(e, ls') when pred e -&gt; Cons (e, filter ls')\n    | Cons(_, ls') -&gt; filter \n</code></pre>\n\n<p>For the list type to remain polymorphic, Cons needs to be of type <code>a * a list -&gt; a list</code>. So, in establishing these constraints, I obviously need to look up these types of my algebraic constructors - the problem I now have is the 'context-sensitivity' of multiple uses of algebraic constructors - how do I express in my constraint equations that the <code>a</code> in each case needs to be the same?</p>\n\n<p>I am having trouble finding a general solution to this, and I am unable to find much literature on this. Whenever I find something similar - expression based language with constraint-based type inference - they stop just short of algebraic datatypes and polymorphism.</p>\n\n<p>Any input is much appreciated!</p>\n", 'ViewCount': '214', 'Title': 'Constraint-based Type Inference with Algebraic Data', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-20T10:07:16.937', 'LastEditDate': '2012-04-06T23:30:01.300', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '979', 'Tags': '<programming-languages><type-theory><functional-programming><inductive-datatypes><typing>', 'CreationDate': '2012-04-06T23:09:22.253', 'Id': '1092'},1233:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '219', 'Title': 'Does High Order Functions provide more power to Functional Programming?', 'LastEditDate': '2012-06-06T12:46:42.487', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1763', 'FavoriteCount': '1', 'Body': '<p><em>I\'ve asked a similar question <a href="http://cstheory.stackexchange.com/questions/11652/does-high-order-functions-provide-more-power-to-functional-programming">on cstheory.SE</a>.</em></p>\n\n<p>According to <a href="http://stackoverflow.com/a/1990580/209629">this answer on Stackoverflow</a> there is an algorithm that on a non-lazy pure functional programming language has an $\\Omega(n \\log n)$ complexity, while the same algorithm in imperative programming is $\\Omega(n)$. Adding lazyness to the FP language would make the algorithm $\\Omega(n)$.</p>\n\n<p>Is there any equivalent relationship comparing a FP language with and without High Order Functions? Is it still Turing Complete? If it is, does the lack of High Order on FP makes the language less "powerful" or efficient? </p>\n', 'Tags': '<complexity-theory><lambda-calculus><functional-programming><turing-completeness>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-06T12:56:27.090', 'CommentCount': '2', 'AcceptedAnswerId': '2241', 'CreationDate': '2012-06-06T01:10:04.083', 'Id': '2240'},1234:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm learning Haskell and I'm fascinated by the language. However I have no serious math or CS background. But I am an experienced software programmer.</p>\n\n<p>I want to learn category theory so I can become better at Haskell. </p>\n\n<p>Which topics in category theory should I learn to provide a good basis for understanding Haskell?</p>\n", 'ViewCount': '5369', 'Title': 'Is Category Theory useful for learning functional programming?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-30T22:52:54.973', 'LastEditDate': '2012-08-10T18:24:10.300', 'AnswerCount': '5', 'CommentCount': '2', 'Score': '35', 'OwnerDisplayName': 'dan', 'PostTypeId': '1', 'Tags': '<programming-languages><functional-programming><category-theory>', 'CreationDate': '2012-08-03T17:52:13.360', 'FavoriteCount': '36', 'Id': '3028'},1235:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2167', 'Title': 'What does "dummy argument" mean?', 'LastEditDate': '2012-11-24T15:13:29.297', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2761', 'FavoriteCount': '1', 'Body': '<p>What is does it mean when an argument to a function is called a <strong>dummy argument</strong>? I have not encountered this term outside Fortran, is it a general term in computer science? What would be examples of arguments passed as dummy and not passed as dummy?</p>\n\n<p>I found <a href="http://encyclopedia2.thefreedictionary.com/dummy+argument" rel="nofollow">this definition</a>, which I am not sure that I understand, but it sounds like a dummy argument is a variable that is passed by reference, in which case in Fortran all variables are dummy variables? (confused)</p>\n\n<p>Edit: I just run into the following essay which helped me to understand better Fortran\'s argument/function calling teminology: <a href="http://software.intel.com/en-us/blogs/2009/03/31/doctor-fortran-in-ive-come-here-for-an-argument" rel="nofollow">Dortor Fortran: I\'ve come here for an argument</a></p>\n', 'Tags': '<terminology><programming-languages><functional-programming>', 'LastEditorUserId': '2761', 'LastActivityDate': '2012-11-24T15:13:29.297', 'CommentCount': '0', 'AcceptedAnswerId': '3471', 'CreationDate': '2012-09-08T16:46:40.727', 'Id': '3469'},1236:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am converting the OCaml <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Format.html" rel="nofollow">Format</a> module which does I/O and maintains state in a record with mutable values. As such it is a good candidate for me to convert to pure <a href="http://en.wikipedia.org/wiki/F_Sharp_%28programming_language%29" rel="nofollow">F#</a>, pure <a href="http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29" rel="nofollow">C#</a> and a hybrid.</p>\n\n<p>Since this is a toss-up for me on the three versions, I am interested to know of any research papers that indicate that programmers may be moving to hybrid code of object-oriented and functional, calling one from the other, or staying with-in one programming family.</p>\n\n<p>Note: I am asking for research papers not subjective answers.</p>\n', 'ViewCount': '68', 'Title': 'Is there any research to indicate programmers are/are not moving to a hybrid of functional and object-oriented?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-15T14:14:19.027', 'LastEditDate': '2012-09-15T14:14:19.027', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<reference-request><programming-languages><functional-programming><object-oriented>', 'CreationDate': '2012-09-14T21:02:04.073', 'FavoriteCount': '1', 'Id': '3550'},1237:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<h2>Context</h2>\n\n<p>I've been programming in java for a few years now. And atm i'm learning something totally different: Clojure.\nThere the expression problem can be solved by using multimethods whereas in java you will need something like the visitor pattern or something alike.</p>\n\n<h2>The question</h2>\n\n<p>I've been reading about multimethods and got quite confused with the actual difference with method overloading.</p>\n\n<p>The only difference I spotted so far that a multimethod doesn't depend on the runtime type of the object on which the method is called.</p>\n", 'ViewCount': '252', 'Title': 'Difference between multimethods and overloading', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-22T08:57:09.780', 'LastEditDate': '2012-09-21T22:02:19.697', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '4661', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1700', 'Tags': '<programming-languages><semantics><functional-programming><object-oriented>', 'CreationDate': '2012-09-21T19:49:37.353', 'Id': '4660'},1238:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><em>I</em> have seen some questions related to functional programming on stackexchange sites which suggests it has significant popularity. <em>I</em> have some experience with it from many <em>years</em> ago in Lisp/Scheme and have seen commentary on the difference between functional and imperative/mutable approaches eg [4]. </p>\n\n<p><em>The</em> wikipedia page on the <em>subject</em> says "Pure functional programming disallows side effects completely and so provides referential transparency, which makes it easier to verify, optimize, and parallelize programs, and easier to write automated tools to perform those tasks." <em>But</em> it is known to have a cost of up to a factor of $O(\\log(n))$ slowdown factor [2] due to lack of mutable data structures, leading to a lot of research in functional programming datastructures that have a much different flavor than mutable approaches [3].</p>\n\n<p><em>Along</em> these lines,</p>\n\n<blockquote>\n  <p><em>What</em> is an example for which the purely functional programming approach leads to better overall results than the imperative approach?</p>\n</blockquote>\n\n<p>(<em>Also</em> it seems the word "mutable" here is a bit subtle. functional languages appear to allow one to "store" data eg via balanced trees, but not later "change" it. <em>This</em> is a little different than mutability eg in java, where initial storage and later changing are nearly identical operations eg with "setter" methods on the Java objects.)</p>\n\n<p>[1] <a href="http://en.wikipedia.org/wiki/Functional_programming" rel="nofollow">functional programming, wikipedia</a></p>\n\n<p>[2] stackexchange, <a href="http://stackoverflow.com/questions/1990464/efficiency-of-purely-functional-programming">efficiency of purely functional programming</a></p>\n\n<p>[3] tcs.se, <a href="http://cstheory.stackexchange.com/questions/1539/whats-new-in-purely-functional-data-structures-since-okasaki">What\'s new in purely functional data structures since Okasaki?</a></p>\n\n<p>[4] <a href="http://mitpress.mit.edu/sicp/" rel="nofollow">Structure and interpretation of computer programs, by Abelson &amp; Sussman</a></p>\n', 'ViewCount': '208', 'Title': 'What is an example for which the purely functional programming approach gives better results than imperative style?', 'LastEditorUserId': '31', 'LastActivityDate': '2012-10-03T18:11:16.773', 'LastEditDate': '2012-10-03T18:11:16.773', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '-3', 'PostTypeId': '1', 'OwnerUserId': '699', 'Tags': '<programming-languages><functional-programming>', 'CreationDate': '2012-10-03T15:58:22.450', 'FavoriteCount': '1', 'Id': '4852'},1239:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>It was brought to my attention that the cost of type inference in a functional language like OCaml can be very high. The claim is that there is a sequence of expressions such that for each expression the length of the corresponding type is exponential on the length of the expression.</p>\n\n<p>I devised the sequence below. My question is: do you know of a sequence with more concise expressions that achieves the same types?</p>\n\n<pre><code># fun a -&gt; a;;\n- : 'a -&gt; 'a = &lt;fun&gt;\n# fun b a -&gt; b a;;\n- : ('a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;\n# fun c b a -&gt; c b (b a);;\n- : (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'c = &lt;fun&gt;\n# fun d c b a -&gt; d c b (c b (b a));;\n- : ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n   (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'd\n= &lt;fun&gt;\n# fun e d c b a -&gt; e d c b (d c b (c b (b a)));;\n- : (((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n    (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'd -&gt; 'e) -&gt;\n   ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n   (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'e\n= &lt;fun&gt;\n# fun f e d c b a -&gt; f e d c b (e d c b (d c b (c b (b a))));;\n- : ((((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n     (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'd -&gt; 'e) -&gt;\n    ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n    (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'e -&gt; 'f) -&gt;\n   (((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n    (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'd -&gt; 'e) -&gt;\n   ((('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'c -&gt; 'd) -&gt;\n   (('a -&gt; 'b) -&gt; 'b -&gt; 'c) -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'f\n= &lt;fun&gt;\n</code></pre>\n", 'ViewCount': '332', 'Title': 'Concise example of exponential cost of ML type inference', 'LastEditorUserId': '4554', 'LastActivityDate': '2012-11-11T20:23:32.303', 'LastEditDate': '2012-11-11T19:48:39.593', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '8', 'OwnerDisplayName': 'mrrusof', 'PostTypeId': '1', 'OwnerUserId': '4554', 'Tags': '<lambda-calculus><type-theory><functional-programming><type-inference><type-checking>', 'CreationDate': '2012-11-11T14:01:45.770', 'Id': '6617'},12310:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is there a clear reference, with pseudo-code, on how to go about implementing a Prolog interpreter in a purely functional language? That which I have found so far seems to deal only with imperative languages, is merely a demonstration of Prolog implemented in itself, or offers no concrete algorithm to use for interpretation. I would be very appreciative of an answer.</p>\n', 'ViewCount': '973', 'Title': 'How to implement a prolog interpreter in a purely functional language?', 'LastActivityDate': '2012-11-12T14:52:51.913', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '6622', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '4555', 'Tags': '<functional-programming><prolog><logic-programming>', 'CreationDate': '2012-11-11T20:21:42.027', 'FavoriteCount': '3', 'Id': '6618'},12311:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '488', 'Title': 'Lambda calculus outside functional programming?', 'LastEditDate': '2012-11-21T09:12:46.613', 'AnswerCount': '4', 'Score': '9', 'OwnerDisplayName': 'AzaraT', 'PostTypeId': '1', 'OwnerUserId': '4669', 'FavoriteCount': '3', 'Body': "<p>I'm a university student, and we're currently studying Lambda Calculus. However, I still have a hard time understanding exactly why this is useful for me. I realize if you do loads of functional programming it might be useful, however I reckon that it's not really needed for learning functional programming, what do you think?</p>\n\n<p>Secondly, is there any use for Lambda Calculus within the realm of Computer Science but outside of functional programming languages? </p>\n", 'Tags': '<lambda-calculus><functional-programming>', 'LastEditorUserId': '4669', 'LastActivityDate': '2012-11-21T09:12:46.613', 'CommentCount': '0', 'AcceptedAnswerId': '6794', 'CreationDate': '2012-11-20T19:57:23.943', 'Id': '6791'},12312:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider a set of functions:</p>\n\n<ul>\n<li><p><code>head(l)</code> returns first bit from list <code>l</code>, e.g.</p>\n\n<pre><code>head([0,1,0]) = 0, \nhead([1]) = 1\n</code></pre></li>\n<li><p><code>tail(l)</code> returns a list by removing first element from <code>l</code>, e.g. </p>\n\n<pre><code>tail([0,1,0]) = [1,0],\ntail([1]) = []\n</code></pre></li>\n<li><p><code>a:l</code> appends bit <code>a</code> to beginning of list <code>l</code>, e.g.</p>\n\n<pre><code>1:[0,1,0] = [1,0,1,0].\n</code></pre></li>\n<li><p><code>xor</code> takes takes as input two bits and returns a bit.</p>\n\n<pre><code>xor(a,b)\nif (a == b) \n  return(0)\nelse \n  return(1)\nendif\n</code></pre></li>\n<li><p><code>f1</code> takes as input a list and returns another list.</p>\n\n<pre><code>f1(s)\nif (s == []) then \n  return([1])\nelse if (head(s) == 0) then  \n  return(1:tail(s))\nelse if (head(s) == 1) then \n  return(0:f1(tail(s)))\nendif\n</code></pre>\n\n<ul>\n<li><p><code>f2</code> takes as input a bit and a list and returns a bit.</p>\n\n<p>f2(b,s)\nif (s == []) then \n  return(b)\nelse if (head(s) == 0) then \n  return(f2(xor(b,1),tail(s)))\nelse if (head(s) == 1) then \n  return(xor(b,1))\nendif</p></li>\n</ul></li>\n<li><p><code>g1</code> takes as input a nonnegative number and returns a list.</p>\n\n<pre><code>g1(n)\nif (n == 0) then \n  return([0])\nelse \n  return f1(g1(n-1))\nendif\n</code></pre></li>\n<li><p><code>g2</code> takes as input a nonnegative number and returns a bit.</p>\n\n<pre><code>g2(n)\nif (n == 0) then \n  return(0)\nelse \n  return f2(g2(n-1),g1(n))\nendif\n</code></pre></li>\n</ul>\n\n<p>Can anyone explain what the function <code>g2()</code> returns?</p>\n\n<p>I am able to find out g1() returns a list in binary\nfor example </p>\n\n<pre><code>g1(1) = [1]\ng1(2) = [01]\ng1(3) = [11]\ng1(4) = [001]\n</code></pre>\n', 'ViewCount': '212', 'Title': 'Recursion problem involving head, tail and xor', 'LastEditorUserId': '139', 'LastActivityDate': '2012-12-31T07:07:40.340', 'LastEditDate': '2012-12-31T07:07:40.340', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4752', 'Tags': '<recursion><functional-programming>', 'CreationDate': '2012-11-27T10:45:00.843', 'Id': '6951'},12313:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '223', 'Title': 'Studying Programming Language Theory', 'LastEditDate': '2013-02-17T01:14:39.193', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '106', 'FavoriteCount': '2', 'Body': "<p>I have recently become extremely interested in understanding and proving aspects of (functional) programming languages.</p>\n\n<p>However as I dive deeper in, things like $\\lambda$ calculus, category theory, and denotational semantics are a little difficult to grok without proper explanation.</p>\n\n<p>I read SICP (quite an enlightening book) but I'm looking to dive deeper into the theory of functional programming. Are there any books/blogs/sites/you-name-it that would discuss the theory of functional programming languages from the ground up?</p>\n", 'Tags': '<reference-request><lambda-calculus><functional-programming><books>', 'LastEditorUserId': '106', 'LastActivityDate': '2013-02-18T01:07:53.190', 'CommentCount': '0', 'AcceptedAnswerId': '7323', 'CreationDate': '2012-12-11T04:40:37.923', 'Id': '7322'},12314:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I am particularly interested in solutions to the problem that encapsulated search can depend on the order of evaluation.</p>\n\n<p>According to [1], encapsulated search in PAKCS depends on the order of evaluation, while in MCC, it does not, but using it requires knowledge of the compiler implementation and it does not follow the Curry language specification. This was written in 2007, so it may of course be out of date now.</p>\n\n<p>KiCS2 returns results from encapsulated search in the IO monad, but I do not understand why.</p>\n\n<p>[1] Bra\xdfel and Huch, <em>On a Tighter Integration of\nFunctional and Logic Programming</em>, Proc. APLAS 2007</p>\n', 'ViewCount': '120', 'Title': 'What is the state of the art in encapsulated search in functional logic programming?', 'LastActivityDate': '2013-07-25T20:41:16.697', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1617', 'Tags': '<nondeterminism><functional-programming><logic-programming>', 'CreationDate': '2012-12-23T15:47:11.007', 'Id': '7564'},12315:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>FRP is about streaming events and behaviours through pure functions. The Actor model - at least, as implemented in Akka - is about streaming immutable messages (which can be considered to be discrete events) through potentially impure objects, called actors.</p>\n\n<p>So on the surface they seem related.</p>\n\n<p>What else can we say about how they related? Also, what can say about which of them might be more appropriate for different application domains?</p>\n', 'ViewCount': '1008', 'Title': 'How do Functional Reactive Programming and the Actor model relate to each other?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-19T18:05:36.947', 'LastEditDate': '2013-01-19T18:05:36.947', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1617', 'Tags': '<distributed-systems><functional-programming><programming-paradigms>', 'CreationDate': '2013-01-19T10:45:05.057', 'FavoriteCount': '5', 'Id': '9038'},12316:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to understand the basic ideas of pattern calculus and do not have a lot of time to read through a rather long book. Can someone explain this in simple terms and give an example of how pattern calculus works?</p>\n\n<p><a href="http://bondi.it.uts.edu.au/" rel="nofollow">http://bondi.it.uts.edu.au/</a></p>\n\n<p><a href="http://rads.stackoverflow.com/amzn/click/3540891846" rel="nofollow">http://www.amazon.com/dp/3540891846/?tag=stackoverfl08-20</a></p>\n\n<p>I don\'t understand "The ability to pass patterns as parameters (pattern polymorphism) is illustrated by defining a generic eliminator." as explained here in the <a href="http://en.wikipedia.org/wiki/Pattern_calculus" rel="nofollow">Wikipedia article</a>. If someone could work through an example showing how the patterns were transformed and why they were transformed in that way, that would be useful to me, thanks.</p>\n', 'ViewCount': '73', 'Title': 'I have trouble to understand pattern calculus, could someone explain it in simple terms?', 'LastEditorUserId': '6506', 'LastActivityDate': '2013-01-22T04:26:43.160', 'LastEditDate': '2013-01-22T02:52:35.400', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '9083', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '6506', 'Tags': '<functional-programming>', 'CreationDate': '2013-01-22T00:39:05.793', 'Id': '9081'},12317:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>An assignment questions asks the following:</p>\n\n<blockquote>\n  <p>Consider an array 'var a : array[1..10] of real'.  Express the\n  semantics of this array as a function, defining the domain and\n  codomain (you might also be able to write the rule).  In this\n  programming language, the subrange '1..10' is viewed as a genuine\n  type, so we can comfortably say that 'a[13]' is a type error.</p>\n</blockquote>\n\n<p>I've come up with a semantic that works as a function, that is: f(a[$x$]) -> $y$ where $x$ is a type defined by the numbers $1$ to $10$ and $y$ is the set of all Real numbers. Does this seems correct?</p>\n\n<p>Would there be any difference if I wrote the function in the opposite way, that is: f($y$) -> a[$x$] ?</p>\n", 'ViewCount': '107', 'Title': 'Expressing semantics of an array as a function', 'LastActivityDate': '2013-02-05T18:13:49.583', 'AnswerCount': '3', 'CommentCount': '2', 'AcceptedAnswerId': '9485', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4348', 'Tags': '<arrays><semantics><functional-programming>', 'CreationDate': '2013-01-27T18:37:43.773', 'Id': '9212'},12318:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '257', 'Title': 'How can SML infer types like this?', 'LastEditDate': '2013-02-02T13:58:58.873', 'AnswerCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1590', 'FavoriteCount': '0', 'Body': '<p><a href="http://en.wikipedia.org/wiki/Standard_ML" rel="nofollow">Wikipedia says</a>:</p>\n\n<pre><code>fun factorial n = \n    if n = 0 then 1 else n * factorial (n-1) \n</code></pre>\n\n<blockquote>\n  <p>A Standard ML compiler is required to infer the static type int -> int of this function\n  without user-supplied type annotations. I.e., it has to deduce that n\n  is only used with integer expressions, and must therefore itself be an\n  integer, and that all value-producing expressions within the function\n  return integers.</p>\n</blockquote>\n\n<p>I don\'t understand how a compiler could infer this. It sounds like SML is essentially solving the halting problem for the <code>factorial</code> function, and showing that it only halts on positive integer inputs. </p>\n\n<p>Am I missing something?</p>\n', 'Tags': '<compilers><functional-programming><type-theory><type-inference>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-25T06:37:00.357', 'CommentCount': '0', 'AcceptedAnswerId': '9411', 'CreationDate': '2013-02-01T23:24:31.383', 'Id': '9407'},12319:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What are anonymous (lambda) functions? What is the formal definition of an anonymous function in a functional programming language? </p>\n\n<p>In my simple terms, when I am programming in scheme/lisp I would say an anonymous (lambda) function is a function that is not bound to an identifier.</p>\n\n<p>Is that all that you can say formally about a lambda function? I think there is more detail that can be added to this simple definition. Please elaborate, and thank you!</p>\n', 'ViewCount': '262', 'Title': 'anonymous lambda functions (functional programming)', 'LastEditorUserId': '41', 'LastActivityDate': '2013-02-20T06:25:28.973', 'LastEditDate': '2013-02-11T05:42:39.403', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '9663', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '6815', 'Tags': '<logic><programming-languages><lambda-calculus><functional-programming>', 'CreationDate': '2013-02-11T01:41:11.730', 'Id': '9655'},12320:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '410', 'Title': 'What is the relation between functors in SML and Category theory?', 'LastEditDate': '2013-02-15T18:36:48.697', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '1', 'Body': '<p>Along the same thinking as this statement by <a href="http://cs.stackexchange.com/users/1329/andrej-bauer">Andrej Bauer</a> in this <a href="http://cs.stackexchange.com/a/9763/268">answer</a></p>\n\n<blockquote>\n  <p>The Haskell community has developed a number of techniques inspired by\n  category theory, of which <a href="http://en.wikipedia.org/wiki/Monad_%28category_theory%29">monads</a> are best known but should not be\n  confused with <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29">monads</a>.</p>\n</blockquote>\n\n<p>What is the relation between <a href="http://en.wikipedia.org/wiki/Standard_ML#Module_system">functors</a> in SML and <a href="http://en.wikipedia.org/wiki/Functor">functors</a> in Category theory?</p>\n\n<p>Since I don\'t know about the details of functors in other languages such as Haskell or OCaml, if there is info of value then please also add sections for other languages.</p>\n', 'Tags': '<programming-languages><functional-programming><category-theory>', 'LastEditorUserId': '268', 'LastActivityDate': '2013-02-15T18:36:48.697', 'CommentCount': '1', 'AcceptedAnswerId': '9789', 'CreationDate': '2013-02-14T12:50:21.617', 'Id': '9769'},12321:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In reading <a href="http://cs.stackexchange.com/users/207/uday-reddy">Uday Reddy\'s</a> <a href="http://cs.stackexchange.com/a/9815/268">answer</a> to <a href="http://cs.stackexchange.com/q/9769/268">What is the relation between functors in SML and Category theory?</a> Uday states</p>\n\n<blockquote>\n  <p>Category theory doesn\'t yet know how to deal with higher-order\n  functions. Some day, it will.</p>\n</blockquote>\n\n<p>As I thought Category theory was able to serve as a foundation for math, then it should be possible to derive all of math and higher-order functions.</p>\n\n<p>So, what is meant by Category theory doesn\'t yet know how to deal with higher-order functions? Is it valid to consider Category theory as a foundation for math?</p>\n', 'ViewCount': '378', 'Title': "What is meant by Category theory doesn't yet know how to deal with higher-order functions?", 'LastActivityDate': '2013-02-16T14:48:05.947', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '9819', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<functional-programming><category-theory>', 'CreationDate': '2013-02-15T18:58:19.433', 'FavoriteCount': '5', 'Id': '9818'},12322:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>This question is not homework but it's related to material in a general course I take about programming languages, so I don't know whats the site policy about this</p>\n\n<p>In ML the following expression:</p>\n\n<pre><code>fun f x y z = x (y , z) = x (z, y) ;\n</code></pre>\n\n<p>Evaluates to this:</p>\n\n<pre><code>val ('a, ''b) f = fn : ('a * 'a -&gt; ''b) -&gt; 'a -&gt; 'a -&gt; bool\n</code></pre>\n\n<p>I understand the type inference done here, but not the structure of the expression returned.</p>\n\n<p>Can someone explain how this works ?</p>\n\n<p>Thanks</p>\n", 'ViewCount': '35', 'Title': 'How is the following ML Curry expression evaluated', 'LastEditorUserId': '39', 'LastActivityDate': '2013-02-20T00:02:53.963', 'LastEditDate': '2013-02-20T00:02:53.963', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '9944', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1907', 'Tags': '<programming-languages><functional-programming><typing>', 'CreationDate': '2013-02-19T19:34:54.980', 'Id': '9941'},12323:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '536', 'Title': 'Why do we use persistent data structures in functional programming?', 'LastEditDate': '2013-02-24T17:51:40.223', 'AnswerCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '6466', 'FavoriteCount': '1', 'Body': '<p>Functional programming employs persistent data structures and immutable objects. My question is why is it crucial to have such data structures here? I want to understand <strong>at a low level</strong> what would happen if the data structure is not persistent? Would the program crash more often? </p>\n', 'Tags': '<data-structures><functional-programming><programming-paradigms>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-24T17:51:40.223', 'CommentCount': '1', 'AcceptedAnswerId': '10006', 'CreationDate': '2013-02-21T07:10:16.707', 'Id': '10002'},12324:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '227', 'Title': "How does 'deforestation' remove 'trees' from a program?", 'LastEditDate': '2013-02-27T11:38:07.923', 'AnswerCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4602', 'FavoriteCount': '1', 'Body': '<p>I think understand how deforestation consumes and produces a list at the same time (from a fold and an unfold function -- <a href="http://codereview.stackexchange.com/questions/23180/how-to-make-this-python-function-and-its-inverse-more-beautiful-and-symmetric">see this good answer on CodeReview here</a>), but when I compared that with the <a href="https://en.wikipedia.org/wiki/Deforestation_%28computer_science%29" rel="nofollow">wikipedia entry on the technique</a> it talked about \'removing trees\' from a program. </p>\n\n<p>I understand how a program can be parsed into a syntactic parse tree (is that right?), but what is the meaning of this use of deforestation for some kind of simplification (is it?) of programs? And how would I do it to my code?</p>\n', 'Tags': '<terminology><compilers><functional-programming>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-01T19:46:29.167', 'CommentCount': '0', 'AcceptedAnswerId': '10154', 'CreationDate': '2013-02-26T22:53:06.540', 'Id': '10129'},12325:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>From my recitation class  - </p>\n\n<p><img src="http://i.stack.imgur.com/Zn74M.jpg" alt="enter image description here"></p>\n\n<p>Can you please explain </p>\n\n<ul>\n<li><p>why does operator  $"+"$ signature is  $  int \\rightarrow (int \\rightarrow int)$ ?</p></li>\n<li><p>How does this graph is build  ?</p></li>\n<li><p>And what is mean $t=u \\rightarrow s$  ?</p></li>\n</ul>\n\n<p>Thanks in advance . </p>\n', 'ViewCount': '61', 'Title': 'ML - Type Interface', 'LastActivityDate': '2013-02-27T00:50:30.403', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10132', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4409', 'Tags': '<programming-languages><functional-programming><type-inference><type-checking>', 'CreationDate': '2013-02-26T23:54:27.973', 'FavoriteCount': '1', 'Id': '10131'},12326:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In a comment to <a href="http://stackoverflow.com/q/12662896/1243762">Learning F#: What books using other programming languages can be translated to F# to learn functional concepts?</a> <a href="http://stackoverflow.com/users/2121246/makarius">Makarius</a> stated:</p>\n\n<blockquote>\n  <p>Note that the "CPS" approach has done great harm to performance in\n  SML/NJ. Its physical evaluation model violates too many assumptions\n  that are built into the hardware. If you take big symbolic\n  applications of SML like Isabelle/HOL, SML/NJ with CPS comes out\n  approx. 100 times slower than Poly/ML with its conventional stack.</p>\n</blockquote>\n\n<p>Can someone explain the reasons for this? (Preferably with some examples) Is there an impedance mismatch here?</p>\n', 'ViewCount': '159', 'Title': 'The "CPS" approach has done great harm to performance in SML/NJ; reasoning desired', 'LastEditorUserId': '39', 'LastActivityDate': '2013-03-03T20:52:58.603', 'LastEditDate': '2013-03-03T20:52:58.603', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '10235', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<compilers><functional-programming><proof-assistants><continuations>', 'CreationDate': '2013-03-03T15:49:23.960', 'Id': '10233'},12327:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '156', 'Title': 'What type of formal notation is being used here to represent functional algorithms?', 'LastEditDate': '2013-05-03T02:16:49.393', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7129', 'FavoriteCount': '1', 'Body': '<p>Interested in learning more about algorithm design in functional programming, I picked up Andrew Bird\'s <a href="http://rads.stackoverflow.com/amzn/click/0521513383" rel="nofollow">Pearls of Functional Algorithm Design</a>.  I have experience with a number of programming languages, but my only experience with functional programming is in Scala.  I understood that I would have to pick-up Standard ML and Haskell from the description of the book, but when I started reading the first section, I wasn\'t familiar with some of the operators being used.</p>\n\n<p>Here are some examples of function definitions from the first chapter of the book (free to preview on Amazon):</p>\n\n<hr>\n\n<p><img src="http://i.stack.imgur.com/mVx5z.png" alt="weird syntax"></p>\n\n<p>I have seen "^" and "v" used to represent "and" and "or," but some of the other syntax (like <code>False (0,n)</code>) still throws me off.</p>\n\n<p><img src="http://i.stack.imgur.com/aSG9Z.png" alt="more weird syntax"></p>\n\n<p>In this one, I\'m not sure what the <code>accumArray(+)...</code> is referring to.  I\'m thinking it\'s like a fold method using addition, but I don\'t understand the rest of the line.</p>\n\n<p><img src="http://i.stack.imgur.com/JPWEZ.png" alt="kinda weird"></p>\n\n<p>Here, the author has done a good job of describing that \\\\ is <a href="http://en.wikipedia.org/wiki/Set_difference#Relative_complement" rel="nofollow">set difference</a> and the two vertical lines crossed with a horizontal one is <a href="http://en.wikipedia.org/wiki/Union_%28set_theory%29" rel="nofollow">union</a>.  However, I\'ve never seen anything like that union symbol before.</p>\n\n<hr>\n\n<p>I don\'t want to know what each of these examples means as much as I want to know <strong>what library of formal representation is Bird using to represent these algorithms</strong>, and also, if a specific programming language (Haskell/SML?) syntax is being used as well in conjunction with these special symbols.</p>\n', 'Tags': '<algorithms><formal-languages><functional-programming><notation>', 'LastEditorUserId': '7129', 'LastActivityDate': '2013-05-03T02:16:49.393', 'CommentCount': '5', 'AcceptedAnswerId': '11710', 'CreationDate': '2013-05-01T17:48:19.410', 'Id': '11707'},12328:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can somebody refer me to peer-reviewed papers studying the advantages or disadvantages of writing code in a functional style? Are there papers which discuss the applications of Lambda Calculus in fields such as Machine Learning, Language Design, etc.?</p>\n', 'ViewCount': '202', 'Title': 'Are there peer-reviewed papers studying the pros and cons of functional programming?', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-07-10T19:02:23.393', 'LastEditDate': '2013-07-04T05:35:51.533', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '8998', 'Tags': '<reference-request><programming-languages><machine-learning><lambda-calculus><functional-programming>', 'CreationDate': '2013-07-03T23:37:07.887', 'FavoriteCount': '7', 'Id': '13076'},12329:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've been using Clojure for about 18 months. Recently, I've come across terms such as Monads, Continuations, et al which I'd like to learn about.</p>\n\n<p>I could visit Wikipedia and read about these two topics, but I'm looking for a reference which also help me learn about related matters that I don't even know exist. Is there a book on this particular topic (if it even qualifies as one)? Would I pick these things up by learning about type systems or language design in general? Should I just learn Haskell to get exposure?</p>\n", 'ViewCount': '119', 'Title': 'Reference request: Monads, continuations, and other functional CS concepts', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-07-23T23:26:24.237', 'LastEditDate': '2013-07-23T16:58:39.923', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '13399', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '9306', 'Tags': '<reference-request><programming-languages><functional-programming><continuations>', 'CreationDate': '2013-07-23T16:00:17.800', 'Id': '13398'},12330:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>After learning Haskell and other not so pure FP languages I decided to read about Category theory. After gaining good understanding of Category theory I started thinking about how the concepts of category theory can be used to think about <strong>designing programs</strong> but no matter how hard I tried it seems this is not the way to go. </p>\n\n<p>After spending many unsuccessful attempts to relate category theory to <strong>designing programs</strong> I came to the conclusion that:</p>\n\n<ul>\n<li>Category theory is useful when <strong>designing a programming language</strong>.</li>\n<li>Category theory is not something that you use when <strong>designing programs</strong> (even when using a language which was designed based on category principles). For example: When programming in Haskell you will use types, types constructor, functions, higher order functions etc to design your program, not category theory concepts.</li>\n</ul>\n\n<p>In summary we have below layer system (order is low to high):</p>\n\n<p><strong>Category theory -> Programming language -> Program</strong></p>\n\n<p>At a particular layer you use the concepts of the <strong>immediate underlying layer</strong>.</p>\n\n<p>Is this understanding correct? If not and you believe that in <strong>designing programs</strong> we can directly use category theory concepts, please refer some articles or blog posts where it is being demonstrated.</p>\n\n<p>NOTE: By <strong>designing programs</strong> I mean designing programs based on different concepts, like concurrency, parallelism, reactive, message passing etc.</p>\n', 'ViewCount': '347', 'Title': 'Category theory (not) for Programming?', 'LastActivityDate': '2013-08-19T19:02:16.370', 'AnswerCount': '2', 'CommentCount': '11', 'AcceptedAnswerId': '13813', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '9670', 'Tags': '<functional-programming><category-theory>', 'CreationDate': '2013-08-15T08:06:55.107', 'FavoriteCount': '3', 'Id': '13757'},12331:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've recently started casually reading into combinatorial logic, and I noticed that a higher-order function that I regularly use is a combinator. This combinator is actually pretty useful (you can use it to define addition on polynomial equations, for example), but I never gave it a decent name. Does anyone recognise this combinator? (ignoring differences in function currying)</p>\n\n<pre><code>unknown = function (h, f, g)\n    function (x) h( f(x), g(x) )\n}\n</code></pre>\n\n<p>In lambda calculus, the fully curried implementation would be\n$\\lambda h. \\lambda f. \\lambda g. \\lambda x. h (f x) (g x)$. In other words, if $M$ is this mystery combinator, then its defining equation is $M \\, h \\, f \\, g \\, x = h \\, (f \\, x) \\, (g \\, x)$.</p>\n\n<p>If more information is needed, or my question is lacking key information please leave a comment and I will edit my question.</p>\n", 'ViewCount': '115', 'Title': 'What is the name of this combinator?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-25T13:24:35.553', 'LastEditDate': '2013-08-24T08:27:46.530', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '13922', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7554', 'Tags': '<logic><lambda-calculus><functional-programming>', 'CreationDate': '2013-08-24T05:09:45.133', 'Id': '13901'},12332:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>As far as I know idempotent operation is a operation that can be applied many times with the same effect. Also I learnt recently that updating a tuple in a database is also idempotent. I thought that an idempotent operation was like a read-only stateless call (thanks to HTTP world with its famous <code>GET</code> request example). So, is changing data in a file (or database) idempotent? Is appending (extending) data in file/database idempotent? Why?</p>\n', 'ViewCount': '85', 'Title': 'Is changing or appending data an idempotent operation?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-02T10:10:44.830', 'LastEditDate': '2013-09-02T10:10:44.830', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9487', 'Tags': '<terminology><programming-languages><functional-programming>', 'CreationDate': '2013-08-30T20:56:45.240', 'Id': '14044'},12333:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am writing a compiler for my programming language (both almost complete), but they are stuck in the, I would call, "String vs List-of-Char dilemma".\nMaybe some more experienced compiler programmer could help.</p>\n\n<p>It is a functional, strongly typed (with inference) and almost pure (immutable vars) language.\nAs I could perceive, using a list of chars is better for simplicity/generality of the language. But it adds complexity to the runtime/stdlib, because the user may require sometimes to print a List-of-Char as a text and sometimes as a list. </p>\n\n<p>Perhaps a built-in function just to print a List-of-Char as text would be a good compromise? I may be missing something here.</p>\n\n<p>In the other hand, defining a "String" type different from "List", requires duplicity of all list functions like "head", "tail", "replace" etc. to preserve the soundness and simplicity of the type system. It also requires duplicity from the user when implementing similar methods. </p>\n\n<p>Perhaps a built-in function just to convert a List-of-Char to String and vice-versa would be a good compromise? I may also be missing something here.</p>\n\n<p>obs.: The code is in github if anyone has interest into delving in the problem.</p>\n', 'ViewCount': '106', 'Title': 'Pros and cons of representing strings as lists of characters', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-17T11:58:29.307', 'LastEditDate': '2013-09-17T07:55:23.633', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8747', 'Tags': '<programming-languages><compilers><functional-programming>', 'CreationDate': '2013-09-16T18:29:52.983', 'FavoriteCount': '1', 'Id': '14360'},12334:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I really need help with this task here. Im stuck at it and I really would appreciate your help </p>\n\n<p>Here is the task:</p>\n\n<blockquote>\n  <p>Give a recursive function $r$ on $A$ that reverses a string. For instance,\n  $r(logikk) = kkigol$ and $r(moro) = orom$. (given that $A$ the amount of\n  letters in the Norwegian alphabet which has 29 letters.). Define the\n  function in such a way that it is correctly regardless of what $A$ are.</p>\n</blockquote>\n\n<p>Also $logikk$ means $logic$ in norwegian, and $moro$ means $fun$ in norwegian in case you're wondering. </p>\n\n<p><strong>Edit:</strong></p>\n\n<p>I tried to solve one of the recursive functions, $r(logikk)$, but i'm not sure if all of it is correct:</p>\n\n<blockquote>\n  <p>$\\Lambda =$ The empty string</p>\n  \n  <p>$r(\\Lambda) =$ $\\Lambda$, $r(k) = k$, $r(k) = k$, $r(i) = i$, $r(g) = g$, $r(o) = o$, $r(l) = l$</p>\n  \n  <p>For any word $w$ and letter $a$, $r(wa) = wa$</p>\n</blockquote>\n\n<p>Can someone please check if this is correct for $r(logikk)$ I feel like i'm missing something but i'm not sure what.</p>\n", 'ViewCount': '63', 'Title': 'Give a recursive function $r$ on $A$ that reverses a string', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-14T16:01:13.883', 'LastEditDate': '2013-10-14T07:57:31.167', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10709', 'Tags': '<recursion><functional-programming>', 'CreationDate': '2013-10-13T16:07:15.447', 'Id': '16041'},12335:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have  an option to learn a new language for parallel computing.  As a parallel programmer what are the reasons one might want to invest time to learn functional programming for parallel computing?  </p>\n', 'ViewCount': '48', 'Title': 'Functional Programming and Parallelism', 'LastActivityDate': '2013-10-18T15:47:00.990', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6466', 'Tags': '<parallel-computing><functional-programming>', 'CreationDate': '2013-10-18T06:11:32.620', 'Id': '16191'},12336:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '223', 'Title': 'What classes of data structures can be made persistent?', 'LastEditDate': '2013-11-22T20:19:38.030', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '6', 'Body': '<p><b><a href="http://en.wikipedia.org/wiki/Persistent_data_structure">Persistent data structures</a></b> are immutable data structures. Operations on them return a new "copy" of the data structure, but altered by the operation; the old data structure remains unchanged though. Efficiency is generally accomplished by sharing some of the underlying data, and avoiding full copying of the data structure.</p>\n\n<p><b>Questions:</b></p>\n\n<blockquote>\n  <ul>\n  <li><p>Are there results about classes of data structures that can be made to be persistent (while keeping the same or very similar complexities)?</p></li>\n  <li><p>Can <em>all</em> data structures be made persistent (while keeping the same or very similar complexities)?</p></li>\n  <li><p>Are any data structures known to be unable to be made persistent (while keeping the same or very similar complexities)?</p></li>\n  </ul>\n</blockquote>\n', 'Tags': '<reference-request><data-structures><functional-programming>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-12-01T00:30:18.423', 'CommentCount': '8', 'AcceptedAnswerId': '18266', 'CreationDate': '2013-11-22T18:13:18.380', 'Id': '18262'},12337:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A <a href="http://www.youtube.com/watch?v=sqV3pL5x8PI" rel="nofollow">YouTube video</a> I was watching explained the differences between Imperative and Functional programming by demonstrating how the numbers from <code>1</code> to <code>10</code> are summed up in Java and in Haskell respectively. </p>\n\n<p>In Java, you must explicitly state each step and assign the result of each step to a variable - something like the following</p>\n\n<pre><code>int total = 0;\n     for (int i = 1; i &lt;= 10; i++){\n         total = total + i;\n     }\nreturn total;\n</code></pre>\n\n<p>In Haskell, you can simply say:</p>\n\n<pre><code>sum(1..10)\n</code></pre>\n\n<p><strong>My question is:</strong> There obviously is something going on in the background of a Functional language, and that something must be some sort of Imperative process. \nIt seems like Functional Languages are really just some sort of Imperative-Language APIs.\nFor example, I can create part of a functional language by defining a method <code>sum(int start, int end)</code> in Java. Did I really create a new type of language right there, or did I just define a set of Imperative method calls that hide imperative instructions from you?</p>\n\n<p>I hope it\'s clear what I am struggling to understand.</p>\n', 'ViewCount': '133', 'Title': "Isn't Functional Programming just Imperative Programming in disguise?", 'LastActivityDate': '2013-12-03T22:36:58.430', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '18578', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4348', 'Tags': '<programming-languages><functional-programming><programming-paradigms><imperative-programming>', 'CreationDate': '2013-12-03T12:16:26.830', 'FavoriteCount': '1', 'Id': '18570'},12338:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Functional programming has the very elegant Lambda Calculus and its variants as a backup theory. Is there such a thing for OOP? What is an abstraction for the object oriented model?</p>\n', 'ViewCount': '142', 'Title': 'Is there a theory/abstraction behind OOP?', 'LastEditorUserId': '31', 'LastActivityDate': '2013-12-15T15:43:22.080', 'LastEditDate': '2013-12-15T15:43:22.080', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11547', 'Tags': '<terminology><lambda-calculus><functional-programming><object-oriented>', 'CreationDate': '2013-12-13T20:43:26.677', 'Id': '18963'},12339:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>In the pre-history of dependent type theory, Per Martin L\xf6f\nintroduced a calculus that is in some sense the simplest dependent\ntype theory and the most general form of impredicative polymorphism.\nIt is often referred to as <strong><em>Type:Type</em></strong> because the kind <strong><em>Type</em></strong> is\nitself of type <strong><em>Type</em></strong>.  Unfortunately, it is inconsistent as a\nlogic. This was discovered by Girard in his famous dissertation [1],\nwho managed to express the Burali-Forti paradox in <strong><em>Type:Type</em></strong>.\nVarious people have analysed, generalised and simplified Girard's\nanalysis, see e.g. [2, 3]. This analysis seems to involve showing that\nnon-terminating terms can be typed.</p>\n\n<p>I have a question about non-termination: do we get non-normalisation <strong><em>at\nthe level of types</em></strong>? By that I mean, is there a type $T$ such that the\nreduction relation $\\rightarrow$ used, explicitly or implicitly, to\ndefine equality of types, gives rise to an infinite reduction sequence\n$$\n   T \\rightarrow T' \\rightarrow T'' \\rightarrow \\cdots?\n$$</p>\n\n<p>[1] J.-Y.. Girard, Une extension de l'interpretation fonctionelle de\nG\xf6del a l'analyse.</p>\n\n<p>[2] T. Coquand, A New Paradox in Type Theory.</p>\n\n<p>[3] A. J. C. Hurkens, A Simplification of Girard's Paradox.</p>\n", 'ViewCount': '68', 'Title': u"Non-termination of types in Martin-L\xf6f's Type:Type?", 'LastEditorUserId': '2887', 'LastActivityDate': '2013-12-19T12:26:08.823', 'LastEditDate': '2013-12-19T12:26:08.823', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19072', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2887', 'Tags': '<type-theory><functional-programming><dependent-types><curry-howard>', 'CreationDate': '2013-12-17T14:11:17.690', 'Id': '19065'},12340:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In various discussions of the merits of functional programming, the phrase <a href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29" rel="nofollow">referential transparency</a> or <a href="http://www.haskellforall.com/2013/12/equational-reasoning.html" rel="nofollow">equational reasoning</a> is often listed. </p>\n\n<p>My question is - <strong>are these roughly the same thing?</strong> (One being the concept, and the second being the process of applying the concept?</p>\n', 'ViewCount': '43', 'Title': 'Is Equational Reasoning an application of Referential Transparency?', 'LastActivityDate': '2013-12-26T09:18:27.800', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19298', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1709', 'Tags': '<functional-programming>', 'CreationDate': '2013-12-26T08:47:15.297', 'Id': '19297'},12341:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>As there is an untyped lambda calculus, and a simply-typed lambda calculus (as described, for example, in Benjamin Pierce\'s book Types and Programming Languages), is there a simply-typed combinatory logic?</p>\n\n<p>For example, it would seem that natural types for the combinators S, K, and I would be</p>\n\n<pre><code>S : (a -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\nK : a -&gt; b -&gt; a\nI : a -&gt; a\n</code></pre>\n\n<p>where a, b, and c are type variables ranging over some set of types T.  Now, perhaps we could get started with a single base type, Bool.  Our set of types T is then Bool along with whatever types can be formed using the three patterns</p>\n\n<pre><code>(a -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\na -&gt; b -&gt; a\na -&gt; a\n</code></pre>\n\n<p>where a, b, c in T.</p>\n\n<p>There would be two new constants in the language.</p>\n\n<pre><code>T : Bool\nF : Bool\n</code></pre>\n\n<p>So, this language consists of the symbols S, K, I, T, and F, along with parentheses.  It has one base type Bool, and the "function types" that can be made from the S, K, and I combinator patterns.</p>\n\n<p>Can this system be made to work?  For example, is there a well-typed if-then-else construction that can be formed from only S, K, I, T, F?</p>\n', 'ViewCount': '30', 'Title': 'Simply Typed Combinatory Logic?', 'LastActivityDate': '2013-12-29T03:46:31.960', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19353', 'Score': '5', 'OwnerDisplayName': 'Scott Walck', 'PostTypeId': '1', 'Tags': '<functional-programming><logic><lambda-calculus>', 'CreationDate': '2013-12-24T16:12:48.470', 'Id': '19352'},12342:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Foldl and folr are 2 very important functions for FP and Haskell, but I have never heard much about the unsided fold:</p>\n\n<pre><code>fold f [a,b,c,d] = (f (f a b) (f c d))\n</code></pre>\n\n<p>That is, a fold that operates on binary associative functions (so the order of application doesn't matter). If I recall correctly, this is very common in databases as it can be parallelized. So, about it, I ask:</p>\n\n<ol>\n<li>Is it, like foldr, universal?</li>\n<li>Like foldr, can you define every important function using it?</li>\n<li>Is there a fusion rule for it, similar to those for foldr/build and unfoldr/destroy?</li>\n<li>Why is it barely mentioned?</li>\n<li>Any consideration worth mentioning?</li>\n</ol>\n", 'ViewCount': '29', 'Title': 'What are the properties of the unsided fold?', 'LastActivityDate': '2014-01-06T02:07:05.993', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '11547', 'Tags': '<algorithms><algorithm-analysis><proof-techniques><functional-programming>', 'CreationDate': '2014-01-06T02:07:05.993', 'Id': '19524'},12343:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Conc lists are similar to cons lists. In contrast to folds, mapreduce is the main "iterating" operation used on it. Composed mapreduces produce intermediate lists. Is there a fusion law for them, similar to those for foldr/build and unfoldr/destroy?</p>\n', 'ViewCount': '15', 'Title': 'Is there a fusion law for the mapreduce operation used on conc-lists?', 'LastActivityDate': '2014-01-06T04:00:14.660', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11547', 'Tags': '<algorithms><data-structures><programming-languages><functional-programming>', 'CreationDate': '2014-01-06T04:00:14.660', 'Id': '19526'},12344:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider the following function definitions:</p>\n\n<pre><code>(define (lol xs)\n  (if ((equal? xs '()) #t)\n      (wat cdr xs)))\n\n(define (wat xs)\n  (if ((equal? xs '()) #f)\n      (lol cdr xs)))\n</code></pre>\n\n<p><code>lol</code> and <code>wat</code> are both indirect recursions, right? Since the last action is always the recursive function call, they should also be tail recursions. \nBut can an interpreter optimize this to a simple and efficient iteration (Which IMO is the whole point of using tail recursion)?</p>\n", 'ViewCount': '33', 'ClosedDate': '2014-02-25T23:15:19.813', 'Title': 'Can indirect recursion also be tail recursive?', 'LastActivityDate': '2014-02-25T20:49:52.630', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'OwnerDisplayName': 'raffomania', 'PostTypeId': '1', 'OwnerUserId': '13357', 'Tags': '<functional-programming><recursion>', 'CreationDate': '2014-02-03T14:44:35.663', 'Id': '21350'},12345:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Could somebody explain the difference between dependent types and refinement types? As I understand it, a refinement type contains all values of a type fulfilling a predicate. Is there a feature of dependent types which distinguishes them? </p>\n\n<p>If it helps, I came across Refined types via the Liquid Haskell project, and dependent types via Coq and Agda. That said, I'm looking for an explanation of how the theories differ. </p>\n", 'ViewCount': '59', 'Title': 'Dependent types vs refinement types', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-18T05:57:58.417', 'LastEditDate': '2014-02-17T10:00:36.913', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<terminology><programming-languages><type-theory><functional-programming><dependent-types>', 'CreationDate': '2014-02-17T07:54:50.867', 'Id': '21728'},12346:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Why functional programming languages do not use Von-Neumann architecture?Please explain elaborately.It'll be more helpful if you explain it diagrammatically. Thanks in advance. :)</p>\n", 'ViewCount': '25', 'Title': 'von neumann architecture and functional programming languages', 'LastActivityDate': '2014-03-03T18:44:08.043', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15242', 'Tags': '<functional-programming>', 'CreationDate': '2014-03-03T18:44:08.043', 'FavoriteCount': '1', 'Id': '22232'},12347:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>In the book <strong>Type Theory and Functional Programming</strong> <a href="http://www.cs.kent.ac.uk/people/staff/sjt/TTFP/" rel="nofollow">[Thompson, S 1999]</a> the author explains the relationship between specifications, types and proofs of functions:</p>\n\n<blockquote>\n  <p>The equivalent specifications can be thought of as suggesting different program development methods: using the \u2203\u2200 form, we develop the function and its proof as separate entities, either separately or together, whilst in the \u2200\u2203 form we extract a function from a proof, post hoc.</p>\n  \n  <p>This analysis of specifications makes it clear that when we seek a program to meet a specification, we look for the first component of a member of an existential type; the second proves that the program meets the constraint part of the specification.</p>\n</blockquote>\n\n<p>On this same topic, <a href="http://cs.stackexchange.com/a/21332/1709">the commenter writes</a>:</p>\n\n<blockquote>\n  <p>Specifications are in a way "more detailed" types. Or, state the other way, types are more basic specifications. <a href="http://en.wikipedia.org/wiki/Intuitionistic_type_theory" rel="nofollow">Martin-Lof type theory</a> is precisely about fusing the two ideas into one.</p>\n</blockquote>\n\n<p>My question is: <strong>What is the evidence that that types are more basic specifications, and specifications are more detailed types?</strong></p>\n', 'ViewCount': '31', 'Title': 'What is the evidence that that types are more basic specifications, and specifications are more detailed types?', 'LastActivityDate': '2014-03-07T18:34:37.163', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '22377', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1709', 'Tags': '<functional-programming><types>', 'CreationDate': '2014-03-07T12:23:01.227', 'Id': '22371'},12348:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '192', 'Title': 'Why is it important for functions to be anonymous in lambda calculus?', 'LastEditDate': '2014-03-12T11:21:46.183', 'AnswerCount': '4', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '15533', 'FavoriteCount': '2', 'Body': '<p>I was watching the lecture by Jim Weirich, titled \'Adventures in Functional Programming\' (<a href="http://vimeo.com/45140590" rel="nofollow">http://vimeo.com/45140590</a>). In this lecture, he introduces the concept of Y-combinators, which essentially finds the fixed point for higher order functions. One of the motivations, as he mentions it, is to be able to express recursive functions using lambda calculus so that the theory by Church (anything that is effectively computable can be computed using lambda calculus) stays. The problem is that a function cannot call itself simply so, because lambda calculus does not allow named functions, i.e.,</p>\n\n<p>n(x, y) = x + y</p>\n\n<p>cannot bear the name \'n\', it must be defined anonymously:</p>\n\n<p>(x, y) -> x + y</p>\n\n<p>Why is it important for lambda calculus to have functions that are not named? What principle is violated if there are named functions? Or is it that I just misunderstood jim\'s video?</p>\n', 'Tags': '<lambda-calculus><functional-programming>', 'LastEditorUserId': '15533', 'LastActivityDate': '2014-03-13T07:49:23.543', 'CommentCount': '13', 'AcceptedAnswerId': '22503', 'CreationDate': '2014-03-11T11:04:11.983', 'Id': '22497'},12349:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Kaplan and Tarjan came up with the first ones in 1995; Okasaki came up with a simpler, amortized version in 1997 using lazy evaluation (See <a href="http://dl.acm.org/citation.cfm?doid=258948.258956" rel="nofollow">Okasaki</a> for references). Then a couple years later, Kaplan, Okasaki, and Tarjan came up with a simpler implementation using more general mutation in a disciplined manner. Then in 2003, <a href="http://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/Notes%20on%20Catenable%20Deques.doc" rel="nofollow">Mihaesau and Tarjan</a> came up with a simpler, non-bootstrapped strictly functional version.</p>\n\n<h3>My questions</h3>\n\n<ol>\n<li><p>The Mihaesau and Tarjan catenable deques <em>appear</em>, to my untrained eye, to offer O(log n), or possibly even O(log(min{i, n-i})) random access (lookup and modify). Is this correct?</p></li>\n<li><p>Has anyone come up with any simplifications since then?</p></li>\n<li><p>Has anyone either found a way to combine O(log n) (or better, O(log(min{i,n-1})) ) splitting along with O(1) concatenation or proved that it can\'t be done? For that matter, what about O(log n) arbitrary insertion and/or deletion?</p></li>\n</ol>\n', 'ViewCount': '22', 'Title': 'What progress has been made on persistent catenable deques in the last decade?', 'LastEditorUserId': '14740', 'LastActivityDate': '2014-03-25T02:41:50.120', 'LastEditDate': '2014-03-25T00:29:57.533', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '14740', 'Tags': '<data-structures><functional-programming>', 'CreationDate': '2014-03-25T00:06:04.060', 'FavoriteCount': '1', 'Id': '23023'},12350:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In mathematics , an $n$-ary relation is subset of cross product on $n$ sets took under consideration.</p>\n\n<p>Let us take $A_1,A_2,A_3 \\cdots A_n$ be the n sets.</p>\n\n<p>Then relation $R \\subseteq A_1\\times A_2\\times A_3 \\times A_n$ .</p>\n\n<p>Here $X$ represents cross product betwen two sets.</p>\n\n<p>If we consider first $k$ sets as input domain and next $n-k$ sets as output range. </p>\n\n<p>Then $R$ is an $k$-ary function that returns $n-k$ multiple outputs. $0 \\le k \\le n$</p>\n\n<p>As we know function is a well-behaved relation. i.e.., A relation can assign same input to any number of outputs.</p>\n\n<p>In the case of functions (well-beahaved relations)  one input at most maps to one output.</p>\n\n<p>My doubt is whether </p>\n\n<ol>\n<li><p>Any program written in any program language ultimately a mathematical relation.</p></li>\n<li><p>Any program written in any program language ultimately a mathematical function.</p></li>\n<li><p>Some programs written in programming languages cannot be a mathematical relation.</p></li>\n<li><p>Some programs written in programming languages cannot be a mathematical function.</p></li>\n</ol>\n\n<p>We know that 2. $\\implies$ 1. and 3. $\\implies$ 4.</p>\n\n<p>Which of the four arguments above are true for all set of programs in all programming languages?</p>\n\n<p>I am arguing with my colleague that 1.,2. are true independent of programming language and program. </p>\n\n<p>But his argument is that procedural languages like c, c++, pascal etc.., doesn't obey 2. but in case of functional programming languages like Haskell it's true.</p>\n\n<p>So, is  functional programming is syntactical extension of mathematical functions or conceptual extension? </p>\n", 'ViewCount': '70', 'Title': 'Mathematical function vs Computer program', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-13T10:08:41.727', 'LastEditDate': '2014-04-13T10:08:41.727', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23730', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '16721', 'Tags': '<terminology><computability><programming-languages><functional-programming>', 'CreationDate': '2014-04-13T04:36:03.103', 'Id': '23725'},12351:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have following structure\nstruct data{\nint count;\nchar *name;\n}</p>\n\n<p>kthread_run (threadfn,\n    data,\n    namefmt,\n    );</p>\n\n<p>Now from threadfn i am able to access data->count but i am not able to access data->name, it gives kernel cannot handle paging request.</p>\n\n<p>Any ideas how to fix this and access pointers declared in structure from a threadfn.</p>\n\n<p>Thanks</p>\n', 'ViewCount': '7', 'ClosedDate': '2014-04-28T20:57:21.077', 'Title': 'Passing Structure to Thread', 'LastActivityDate': '2014-04-28T16:53:56.677', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15406', 'Tags': '<programming-languages><functional-programming><threads><kernel>', 'CreationDate': '2014-04-28T16:53:56.677', 'Id': '24187'},12352:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I am trying to extend an existing UTP theory package(Isabelle/UTP) by introducing a new type for use in encoding a custom framework built on UTP. <code>MkName</code> is a type constructor, <code>fset</code> basically restricts <code>VAR</code> to finite sets. The type <code>@{term "UTYPE"}</code> consists of the set of types which, according to the typing relation, have at least one defined value. <code>WF_PREDICATE_OVER</code> calculates all predicates which satisfy the given argument(alphabet). <code>\u03c0 p = snd(WF_ALPHA_PREDICATE)</code> . <code>&lt;_&gt;\u21e9f</code> is <code>Rep</code> function for <code>fset</code>.  <code>\u03b9\u03c0 p = snd(WF_ALPHA_PREDICATE)</code></p>\n\n<pre><code>(*--------- from Isabelle/UTP package -------*)\n\ndefinition fsets :: "\'a set set" where "fsets = Collect finite"\ntypedef \'a fset = "fsets :: \'a set set"  by (auto simp add:fsets_def)\nnotation Rep_fset ("&lt;_&gt;\u21e9f")    \n\nclass DEFINED = fixes Defined   :: "\'a \u21d2 bool" ("D")\ndefinition "UTYPES (x::\'a itself) = {t. \u2203 v :: \'a. v :\u21e9u t \u2227 D v}"\ntypedef \'VALUE UTYPE = "UTYPES TYPE(\'VALUE)"    \n\ndatatype NAME = MkName string nat\n\ntype_synonym \'VALUE VAR = "NAME \xd7 \'VALUE UTYPE \xd7 bool"\ndefinition VAR :: "\'VALUE VAR set" where "VAR = UNIV"\n\ntype_synonym \'VALUE ALPHABET = "(\'VALUE VAR) fset"\ntype_synonym \'VALUE ALPHA_PREDICATE = "(\'VALUE ALPHABET) \xd7 \'VALUE WF_PREDICATE"\n\ntype_synonym \'VALUE BINDING = "(\'VALUE VAR) \u21d2 \'VALUE"\ntypedef \'VALUE WF_BINDING   = "WF_BINDING :: \'VALUE BINDING set"\ntypedef \'VALUE WF_PREDICATE = "UNIV :: \'VALUE WF_BINDING set set"\n\ndefinition WF_ALPHA_PREDICATE :: "\'VALUE ALPHA_PREDICATE set" where\n    "WF_ALPHA_PREDICATE = {(a,p) | a p . p \u2208 WF_PREDICATE_OVER &lt;a&gt;\u21e9f}"\n\ntypedef \'a WF_ALPHA_PREDICATE = "WF_ALPHA_PREDICATE :: \'a ALPHA_PREDICATE set"\n\n\n(*--------- My Code -------*)\ntype_synonym \'VALUE LA_PREDICATE = "(\'VALUE ALPHABET) \xd7 (\'VALUE WF_ALPHA_PREDICATE)"\n\ndefinition WF_LA_PREDICATE :: "\'VALUE LA_PREDICATE set" where\n"WF_LA_PREDICATE = {(a::\'VALUE ALPHABET, p::\'VALUE WF_ALPHA_PREDICATE) | a p . \n       (\u03c0 p) \u2208 WF_PREDICATE_OVER (VAR - &lt;a&gt;\u21e9f) }" \n\ntypedef \'VALUE WF_LA_PREDICATE = "WF_LA_PREDICATE :: \'VALUE LA_PREDICATE set"\n\nlift_definition Exists1 ::\n  "\'VALUE ALPHABET \u21d2 \'VALUE WF_LA_PREDICATE \u21d2 \'VALUE WF_LA_PREDICATE" is\n  "\u03bb a p . ( \u03b1 p, \u2203\u21e9\u03b1 Abs_fset(VAR) -\u21e9f a .  \u03b9\u03c0 p)"\n</code></pre>\n\n<p>The lift definition results in the following error.</p>\n\n<p>Lifting failed for the following types:\nRaw type:  (NAME \xd7 \'a UTYPE \xd7 bool) fset \xd7 \'a WF_ALPHA_PREDICATE\nAbstract type:  \'VALUE WF_LA_PREDICATE</p>\n\n<p>Reason:\n  The <em>quotient type</em> "\'VALUE WF_LA_PREDICATE" and the <em>quotient type pattern</em> "?\'a WF_LA_PREDICATE"  don\'t match.</p>\n\n<p>What would be a valid definition for Exists1???\nWhat is the syntax I\'m writing wrong? </p>\n', 'ViewCount': '25', 'ClosedDate': '2014-04-29T22:32:36.733', 'Title': "Isabelle : quotient type and quotient type pattern don't match", 'LastActivityDate': '2014-04-29T14:15:04.437', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17180', 'Tags': '<formal-languages><type-theory><functional-programming><type-inference><type-checking>', 'CreationDate': '2014-04-29T14:15:04.437', 'Id': '24223'},12353:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have seen stated in various places that in order to allow an "increase in polimorphism" functional depency analysis should be performed, and type inference should be used for every declaration group in topological order. It seems like a well-known fact... except that nobody provides any reference or example whatsoever.</p>\n\n<p>In fact I don\'t understand what is really meant by this statement. Does it mean that without doing dependency analysis I wouldn\'t be able to type some programs (i.e. some valid programs would fail type-checking) or only that I would type them with a type that is more specific than what really is?</p>\n\n<p>I\'m particularly interested in consequences in a Haskell-like language/type system. In particular during <em>kind inference</em>, is dependency analysis actually necessary to avoid rejecting valid programs? Can you provide an example that wouldn\'t be well-kinded if typed without performing dependency analysis?</p>\n\n<p>Since kinds are monomorphic I struggle to understand why dependency analysis should matter in this particular case.</p>\n', 'ViewCount': '13', 'Title': 'Is dependency analysis required in order to type a program?', 'LastActivityDate': '2014-05-03T07:29:34.857', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7246', 'Tags': '<functional-programming><typing><type-inference>', 'CreationDate': '2014-05-03T07:29:34.857', 'Id': '24343'}