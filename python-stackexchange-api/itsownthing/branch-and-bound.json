{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a test about the <a href="http://en.wikipedia.org/wiki/Branch_and_bound">branch and bound</a> algorithm. I understand theoretically how this algorithm works but I couldn\'t find examples that illustrates how this algorithm can be implemented practically. </p>\n\n<p>I found some examples such as <a href="http://optlab-server.sce.carleton.ca/POAnimations2007/BranchAndBound.html">this one</a>\nbut I\'m still confused about it. I also looked for travelling salesman problem and I couldn\'t understand it.</p>\n\n<p>What I need is some problems and how can these problems solved by using branch and bound.</p>\n', 'ViewCount': '2222', 'Title': 'Branch and Bound explanation', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-25T17:00:01.013', 'LastEditDate': '2012-10-14T09:28:44.170', 'AnswerCount': '2', 'CommentCount': '11', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '701', 'Tags': '<algorithms><optimization><branch-and-bound>', 'CreationDate': '2012-04-04T00:31:20.227', 'FavoriteCount': '4', 'Id': '1016'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Could anybody please explain what the difference between "bounding" and "pruning" in branch and bound algorithms is?</p>\n\n<p>I\'d also appreciate references (preferably books), where this distinction is made clear.</p>\n', 'ViewCount': '276', 'Title': 'What is the difference between bounding and pruning in branch-and-bound algorithms?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-13T07:40:01.563', 'LastEditDate': '2012-10-14T09:26:51.660', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2914', 'Tags': '<algorithms><terminology><branch-and-bound>', 'CreationDate': '2012-10-13T10:20:34.733', 'Id': '5040'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>For a class project we're developing a software that solves a common optimisation problem. After some research we've found out that our problem is called QAP (Quadratic Asssignment Problem) and the algorithm that is commonly used is Branch and Bound. I understand the basics of the problem and I see the need of a lower bound to compute the sollution. I came up with a trivial bound example but our teacher told us lower bounds were no trivial matter and we should do some research. After a while we've found out that the Gilmore-Lawler bound is a good one to solve our problem (or at least good enough for learning purposes). </p>\n\n<p>Although I have read a couple of papers I can't get the grasp of it. The idea seems to be to convert the QAP into an LAP combining the two matrices of the original problem. I've got completely lost after that. How is the number I'm supposed to find as the lower bound calculated? </p>\n\n<p>Also, I'm aware that the lower bound has to be calculated for partial solutions, but how do I do that? The lower bound, as I understood, it's calculated from the program's matrices, which are a parameter for the branch and bound algorithm and are fixed from the beginning aren't they? I'd also need an explanation for that.</p>\n", 'ViewCount': '110', 'Title': 'Trying to understand the Gilmore-Lawler lower bound', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-28T12:34:17.467', 'LastEditDate': '2014-03-28T12:34:17.467', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12801', 'Tags': '<algorithms><optimization><heuristics><lower-bounds><branch-and-bound>', 'CreationDate': '2014-03-27T17:56:59.077', 'Id': '23146'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let me preface this question by giving some helpful <a href="http://lcm.csa.iisc.ernet.in/dsa/node187.html" rel="nofollow">background material</a>. </p>\n\n<p>I\'m trying to solve the traveling salesman problem using branch and bound. Concretely, for a partial solution, I\'m using the solution the algorithm would attain by making greedy choices as an upper bound, and comparing this bound to the current best solution. If the bound attained using this heuristic is better than the cost of the best known solution, we continue exploring the partial solution. Otherwise, we prune and discard. Note that the greedy solution attained is always valid.</p>\n\n<p>The above link mentions a method for finding a global lower bound. This is fairly intuitive: for each node, we add to the bound the sum of the two minimum cost edges to other nodes (representing the cheapest in/out edges, if you will) and divide by two to avoid double counting. The solution implied by this global bound is almost never a valid solution but instead gives a hard limit on the lowest cost we could ever hope to attain. </p>\n\n<p>Here\'s how I\'m currently trying to calculate a local lower bound (a lower bound for a partial solution) with cost $C(S)$.</p>\n\n<ul>\n<li>Set <code>bound</code> to the current accumulated cost, $C(S)$</li>\n<li>For each unvisited node, add to <code>bound</code> the sum of the two least cost edges, making sure that the edges selected don\'t lead to a node already visited</li>\n<li>return <code>bound/2</code></li>\n</ul>\n\n<p>Here\'s my question: How is the above solution different from the greedy bound? Maybe a better lower bound would be to add to <code>bound</code> the sum of the two least cost edges, paying <strong>no attention to whether these edges lead to nodes already visited</strong>. Also, how do I actually use this bound to prune the search space? Do I compare the local lower bound computed for a partial solution with the global lower bound, pruning if $L(S) &lt; GL$ or if $L(S) &gt; C(B)$, or if $L(S) &gt; L(B)$? (here $GL$ corresponds to the global lower bound; $L(S)$ computes the local lower bound on a partial solution; $C(B)$ represents the trip cost on the best known solution; $L(B)$ is the lower bound on the best solution). Also, how will $L(S)$ ever be less than the global lower bound (i.e. an infeasible solution) if we only ever use (valid) edges to cities we haven\'t yet visited? </p>\n\n<p>Comments and suggestions on using this lower bound as well as its efficacy would be very much appreciated. Thank you. </p>\n', 'ViewCount': '70', 'Title': 'Traveling Salesman: how to use a lower bound?', 'LastEditorUserId': '16389', 'LastActivityDate': '2014-04-08T08:07:23.937', 'LastEditDate': '2014-04-08T03:01:07.293', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16389', 'Tags': '<complexity-theory><optimization><lower-bounds><traveling-salesman><branch-and-bound>', 'CreationDate': '2014-04-07T17:34:38.440', 'Id': '23520'}},