{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm interested in a slight variant of tiling, the 'jigsaw' puzzle: each edge of a (square) tile is labeled with a symbol from $\\{1\\ldots n, \\bar{1}\\ldots\\bar{n}\\}$, and two tiles can be placed adjacent to each other iff the symbol on one tile's facing edge is $k$ and the symbol on the other tile's facing edge is $\\bar{k}$, for some $k\\in\\{1\\ldots n\\}$.  Then, given a set of $m^2$ tiles, can they be placed into an $m\\times m$ square (rotating but not flipping the tiles) with all edges matching correctly?  (There's also a variant on this problem in which four $1\\times m$ 'framing' edges are provided and the pieces must fit correctly into that frame).</p>\n\n<p>I know this problem is NP-complete for sufficiently large $n$, but the bounds that I've seen on $n$ seem to be fairly large; I'm interested in the problem for small values of $n$ and in particular for $n=1$, the 'zero-one' case (where every edge is labeled either $0$ or $1$ and edges with a $0$ must be matched to edges with a $1$).  Here there are (with rotational symmetry) just six tile types (the all-zeroes tile, the all-ones tile, the tile with three zeroes and a one, the tile with three ones and a zero, and two distinct tiles with two zeroes and two ones, '0011' and '0101'), so a problem instance is just a specification of $m$ and a set of five numbers $T_{0000}$, $T_{0001}$, $T_{0011}$, $T_{0101}$, $T_{0111}$ and $T_{1111}$ (representing the count of each type of tile) with $T_{0000}+T_{0001}+T_{0011}+T_{0101}+T_{0111}+T_{1111}=m^2$.  The problem is obviously in NP (with $m$ given in unary) since a solution can simply be exhibited and then checked in polynomial (in $m$) time, but is it known to be NP-complete, or is there some dynamic programming algorithm that can be applied here?  What about the 'framed' case where the problem specification also includes the four edges of the square that are to be matched?  (Obviously if the unframed case is NP-complete the framed case almost certainly is as well)</p>\n", 'ViewCount': '173', 'Title': "Are 'zero-one' jigsaw puzzles NP-complete?", 'LastActivityDate': '2013-08-21T19:26:52.600', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '242', 'Tags': '<complexity-theory><np-complete><tiling>', 'CreationDate': '2013-08-20T21:39:23.030', 'FavoriteCount': '2', 'Id': '13849'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '397', 'Title': 'Tiling an orthogonal polygon with squares', 'LastEditDate': '2013-11-05T17:00:30.150', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1342', 'FavoriteCount': '2', 'Body': '<p>Given an orthogonal polygon (a polygon whose sides are parallel to the axes), I want to find the smallest set of interior-disjoint squares, whose union equals the polygon.</p>\n\n<p>I found several references to slightly different problems, such as:</p>\n\n<ul>\n<li><em>Covering</em> an orthogonal polygon with squares - similar to my problem, but the covering squares are allowed to overlap. This problem has a polynomial solution (<a href="http://cs.smith.edu/~orourke/Papers/ConnJORsquares.pdf">Aupperle, Conn, Keil and O\'Rourke, 1988</a>;  <a href="http://dx.doi.org/10.1142/S021819599600006X">Bar-Yehuda and Ben-Hanoch, 1996</a>).</li>\n<li>Tiling/decomposing/partitioning an orthogonal polygon to <em>rectangles</em>. This problem has a polynomial solution (<a href="http://dx.doi.org/10.1016/B978-044482537-7/50012-7">Keil, 2000</a>; <a href="http://dx.doi.org/10.1007/978-3-642-11409-0_1">Eppstein, 2009</a>).</li>\n<li><em>Covering</em> an orthogonal polygon with <em>rectangles</em> - this problem is known to be NP-complete (<a href="http://dx.doi.org/10.1109/sfcs.1988.21976">Culberson and Reckhow, 1988</a>).</li>\n</ul>\n\n<p>I am looking for an algorithm for minimal <em>tiling</em> with <em>squares</em>.</p>\n', 'Tags': '<algorithms><computational-geometry><tiling>', 'LastEditorUserId': '1342', 'LastActivityDate': '2013-12-10T07:45:32.940', 'CommentCount': '11', 'AcceptedAnswerId': '16801', 'CreationDate': '2013-11-02T23:30:11.247', 'Id': '16661'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '93', 'Title': 'How to prove that the minimum square partition of a 3X2 rectangle has 3 squares', 'LastEditDate': '2013-11-10T10:32:47.813', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '2', 'Body': '<p>This question is motivated by an older question about <a href="http://cs.stackexchange.com/q/16661/2755">tiling an orthogonal polygon with squares</a>.</p>\n\n<p><img src="http://i.stack.imgur.com/4furns.jpg" alt="enter image description here"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="http://i.stack.imgur.com/L8cYGs.jpg" alt="enter image description here"></p>\n\n<p>Given a $3\\times 2$ rectangle like the first image, the second image is a <em>square partition</em> of that rectangle. </p>\n\n<ul>\n<li>A <em>square partitioning</em> is a covering by non-overlapping squares; the entire rectangle must be covered, all the squares must be disjoint.</li>\n<li>A <em>minimum square partitioning</em> is a <em>square partitioning</em>, for which is no <em>square partitioning</em> that is made of a lesser number of squares.</li>\n</ul>\n\n<blockquote>\n  <p>How can we prove that the second image is a <i>minimum square partitioning</i> of the $3\\times 2$ rectangle?</p>\n</blockquote>\n\n<p><sub>Can we generalize this to ${\\rm M{\\small IN}S{\\small QUARES}}(R_{w,h=w-1})=w$? (see <a href="http://cs.stackexchange.com/q/16826/2755">followup question</a> )</sub></p>\n', 'Tags': '<proof-techniques><computational-geometry><tiling>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-10T10:32:47.813', 'CommentCount': '0', 'AcceptedAnswerId': '16812', 'CreationDate': '2013-11-08T01:05:49.080', 'Id': '16809'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '102', 'Title': 'What is the minimum square partition of an almost-square rectangle?', 'LastEditDate': '2013-11-10T10:30:15.757', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '2', 'Body': '<p>This question is motivated by an older question about <a href="http://cs.stackexchange.com/q/16661/2755">tiling an orthogonal polygon with squares</a>.\nIt is a generalisation of my former question about <a href="http://cs.stackexchange.com/q/16809/2755">how to prove that the minimum square partition of a 3X2 rectangle has 3 squares</a>).</p>\n\n<p>Let:</p>\n\n<ul>\n<li>An <em>almost-square-rectangle</em> be a rectangle that has a width  $w$ and height $h=w-1$.</li>\n<li>A <i>square partitioning</i> be a covering by non-overlapping squares; the entire rectangle must be covered, all the squares must be disjoint.</li>\n<li>A <i>minimum-square-partitioning</i> be a <i>square partitioning</i>, for which is no square partitioning that is made of a lesser number of squares.</li>\n</ul>\n\n<p>Illustration:</p>\n\n<p><img src="http://i.stack.imgur.com/OYqPRm.jpg" alt="enter image description here"></p>\n\n<p><sup><b>Top row:</b> The <b>almost-square-rectangles</b> of widths $3$, $4$ and $5$. <b>Bottom row:</b> Are these <b>miminum-square-partitions</b> of their corresponding rectangles?</sup></p>\n\n<p>My question is now:</p>\n\n<blockquote>\n  <p>What is the minimum-square-partitioning of an almost-square-rectangle?</p>\n  \n  <p>Can we prove ${\\rm M{\\small IN}S{\\small QUARES}}(R_{w,h=w-1})=w$?</p>\n</blockquote>\n\n<p><sub>Note a follow-up question, <a href="http://math.stackexchange.com/q/560870/39567">Minimum square partitions for 4x3 and 5x4 rectangles</a>.</sub></p>\n', 'Tags': '<computational-geometry><tiling>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-10T10:30:15.757', 'CommentCount': '5', 'AcceptedAnswerId': '16832', 'CreationDate': '2013-11-08T15:42:18.157', 'Id': '16826'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '638', 'Title': 'Is Dominosa NP-Hard?', 'LastEditDate': '2013-11-12T22:26:57.560', 'AnswerCount': '2', 'Score': '20', 'OwnerDisplayName': 'user987415', 'PostTypeId': '1', 'OwnerUserId': '10573', 'FavoriteCount': '4', 'Body': '<p>Dominosa is a relatively new puzzle game. It is played on an $(n+1)\\times(n+2)$\n  grid. Before the game begins, the domino bones  $\\left(0,0\\right),\\left(0,1\\right),\\ldots,\\left(n,n\\right)$\n  are placed on the grid (constituting a perfect tiling). In the next step, the domino bones are hidden, leaving only the numbers revealed. The purpose of the game is to recover the original arrangement of the domino bones.\nYou can play the game here: <a href="http://www.puzzle-dominosa.com/">http://www.puzzle-dominosa.com/</a>:</p>\n\n<p>Rules:</p>\n\n<blockquote>\n  <p>The rules are simple. You have to find the location of all the dominoes on the grid. A domino is a pair of numbers. You can only have one of each pair.</p>\n</blockquote>\n\n<p>I have some polynomial algorithms that solve a relatively small part of the puzzle. I could also show that typical Dominosa grids have at least $2^{\\frac{n}{2}+o\\left(n\\right)}$ solutions.</p>\n\n<p>Is Dominosa NP-Hard? </p>\n', 'Tags': '<complexity-theory><np-hard><board-games><tiling>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-12-10T15:02:32.800', 'CommentCount': '9', 'CreationDate': '2013-09-12T12:18:43.740', 'Id': '16850'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am writing a sprite sheet generator tool in adobe AIR, and I have to force with the question: How to pack a collection of 2D rectangles to smallest possible 2D rectangle with power of two. (like 1024x444).</p>\n\n<p>I think that this question is NP-Hard. I found good answer for it <a href="http://stackoverflow.com/a/4264497/1129332">here</a>.</p>\n\n<p>I thought about another option. What if I cut my rectangles to smaller rectangles. Will this make my life easier?</p>\n\n<p>My XML data will be more complicated, and I am not sure how this will effect the performance of the application that will use the cut sprite sheet.</p>\n\n<p>How ever the difficulty of such problem is probably belongs to P.</p>\n\n<p>Do you think it\'s possible? What am I missing here?</p>\n', 'ViewCount': '49', 'Title': 'Packing rectangles to generate a sprite sheet', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-23T18:11:51.577', 'LastEditDate': '2014-01-23T18:11:51.577', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10572', 'Tags': '<complexity-theory><tiling>', 'CreationDate': '2014-01-23T16:02:05.563', 'Id': '19915'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><sup>This is a cross-post from a post on <a href="http://math.stackexchange.com/posts/655746/edit">MathSE</a> due to lack of answers.</sup></p>\n\n<p>To illustrate my question I provide the following example.</p>\n\n<p>The website <a href="http://db.ing.puc.cl/turingmachine/" rel="nofollow">Online Turing Machine</a> provides a Turing Machine simulator. The following program adds 1 to any binary number.</p>\n\n<pre><code>q0,1  =&gt;  q0,1,&gt;\nq0,0  =&gt;  q0,0,&gt;\nq0,_  =&gt;  q1,_,&lt;\nq1,0  =&gt;  q3,1,&gt;\nq1,1  =&gt;  q1,0,&lt;\nq1,_  =&gt;  q3,1,&gt;\n</code></pre>\n\n<p>A program line has the following format:</p>\n\n<pre><code>state, character read =&gt; new state, character written, direction tape\n</code></pre>\n\n<p>In the program above q0 is the initial state and q3 is the accepting state.</p>\n\n<p>In Tilings and Patterns by Gruenbaum and Shephard, 11.4 "Computing By Tiles" I read that it is possible to convert any turing machine program to a tiling of the plane using Wang tiles. The book contains an example tiling which calculates the Fibonacci numbers. The procedure, recipe, to convert a Turing machine program to a set of Wang tiles is not entirely clear to me.</p>\n\n<p><strong>Question: What is the algorithm to convert a Turing Machine program line by line to a set of tiling of the plane using Wang Tiles?</strong> And how does it work on the Turing machine in the given example?</p>\n\n<p>Update:</p>\n\n<p>Image is that of a Wang tile that adds 1 to a binary: 111 + 1 = 1000 where 1 is red, 0 is cyan. Aiming to generate tiles like this from any Turing Machine. First row 111, last row 1000.</p>\n\n<p><img src="http://i.stack.imgur.com/w6dl0.png" alt="Wang Tile"></p>\n', 'ViewCount': '81', 'Title': 'How to convert a Turing Machine program to a tiling using Wang Tiles?', 'LastEditorUserId': '13315', 'LastActivityDate': '2014-02-11T04:14:35.720', 'LastEditDate': '2014-02-05T11:13:19.857', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '13315', 'Tags': '<turing-machines><simulation><computation-models><tiling>', 'CreationDate': '2014-02-02T10:11:46.570', 'Id': '20207'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>As an applied person, I\'m facing one practical problem deciding whether a set of Wang tile could tile the plane periodically or aperiodically. Although both problems seem undecidable, but I\'m on a more practical aspect. Say, if the program accidentally ("or systematically") find some "periodic structure", then it stops and tells me there exists periodic pattern. If during running, it enumerates all the use of tile and finds that it simply cannot tile the plane, then it tell me this set of tiles cannot tile the plane. Even if the program didn\'t stop, then after running some steps, it returns me a few most ordered patterns that that could "possibly tile the plane".</p>\n\n<p>For practical purpose, I simply assume if the tessellation are up to some size (maybe 1000*1000) then I say "it could tile the plane practically".</p>\n\n<p>So my most interested question is: is there any established programs or algorithms that "try" to help me analyze a set of tile even if it might not halt ("but I could define some imposed halting condition").</p>\n\n<p>For context why I am interested in this problem, here\'s the links:</p>\n\n<ul>\n<li><p><a href="http://mathoverflow.net/questions/147374/coloring-in-lattice">Coloring in lattice</a></p></li>\n<li><p><a href="http://mathoverflow.net/questions/149565/reference-for-wang-tile">Reference for Wang Tile</a></p></li>\n<li><p><a href="http://mathoverflow.net/questions/157214/periodic-tiling-of-wang-tile">Periodic Tiling of Wang tile</a></p></li>\n</ul>\n\n<p>Also cross posted to <a href="http://mathoverflow.net/questions/157239/computational-approach-deciding-whether-a-set-of-wang-tile-could-tile-the-space">Math Overflow</a>.</p>\n', 'ViewCount': '47', 'Title': 'Computational approach deciding whether a set of Wang Tile could tile the space up to some size', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T21:51:57.717', 'LastEditDate': '2014-02-10T21:51:57.717', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14553', 'Tags': '<reference-request><computational-geometry><tiling><mathematical-software>', 'CreationDate': '2014-02-10T20:27:06.353', 'FavoriteCount': '2', 'Id': '21502'}}