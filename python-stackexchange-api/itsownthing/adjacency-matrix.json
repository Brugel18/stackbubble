{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Does anyone have a pointer to a resource or, even better, a tip to provide on how to efficiently generate a very large matrix representing a connected graph.</p>\n\n<p>Graph can be randomly created although I would ideally generate a graph of desired size and topology similar to what one can do with <a href="https://github.com/jgrapht/jgrapht" rel="nofollow">JGraphT</a>. </p>\n\n<p>My general intent is to create a very large graph representation (billions of nodes and edges) in parallel by first generating an adjacency matrix to ensure connectedness and then create a representation (RDF, etc) in parallel. </p>\n\n<p>Any further suggestions or alternative approaches are welcome.</p>\n', 'ViewCount': '321', 'Title': 'Generating a adjacency matrix representing a DAG', 'LastActivityDate': '2013-01-04T14:30:43.903', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '7758', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2409', 'Tags': '<graphs><adjacency-matrix>', 'CreationDate': '2013-01-04T03:47:37.503', 'Id': '7746'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '852', 'Title': 'What is the complexity of this matrix transposition?', 'LastEditDate': '2013-02-26T02:44:32.997', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5391', 'FavoriteCount': '1', 'Body': "<p>I'm working on some exercises regarding graph theory and complexity. \nNow I'm asked to give an algorithm that computes a transposed graph of $G$, $G^T$ given the adjacency matrix of $G$. So basically I just have to give an algorithm to transpose an $N \\times N$ matrix.</p>\n\n<p>My first thought was to loop through all rows and columns and simply swapping values in each of the $M[i,j]$ place. Giving a complexity of $O(n^2)$ But I immediately realized there's no need to swap more than once, so I can skip a column every time e.g. when I've iterated over row i, there's no need to start iteration of the next row at column i, but rather at column i + 1.</p>\n\n<p>This is all well and good, but how do I determine the complexity of this. When I think about a concrete example, for instance a 6x6 matrix this leads to 6 + 5 + 4 + 3 + 2 + 1 swaps (disregarding the fact that position [i,i] is always in the right position if you want to transpose a $N \\times N$ matrix, so we could skip that as well).\nThis looks alot like the well-known arithmetic series which simplifies to $n^2$, which leads me to think this is also $O(n^2)$. There are actually $n^2/2$ swaps needed, but by convention the leading constants may be ignored, so this still leads to $O(n^2)$. Skipping the i,i swaps leads to $n^2/2 - n$ swaps, which still is $O(n^2)$, but with less work still..</p>\n\n<p>Some clarification would be awesome :)</p>\n", 'Tags': '<graph-theory><time-complexity><algorithm-analysis><linear-algebra><adjacency-matrix>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-07-25T22:31:32.400', 'CommentCount': '3', 'AcceptedAnswerId': '10082', 'CreationDate': '2013-02-25T13:54:53.913', 'Id': '10081'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am working on a solving a graph partitioning problem and have found a way to formulate it as a trace minimization. I am hoping this will allow me to relax the problem to a continuous one. I am wondering if someone is familiar with any similar trace minimization problem or can help reformulate my constraints such that they fit a trace minimization problem.</p>\n\n<p>The initial problem is as follows. Given an undirected connected graph $G=(V,E)$ partition the nodes in the graph into 2 connected components denoted $S$ and $\\bar S$ to maximize $\\frac{(\\sum\\limits_{i \\in S} w_i)^2}{|S|}+\\frac{(\\sum\\limits_{i \\in \\bar S} w_i)^2}{ |\\bar S|}$</p>\n\n<p>I have mapped this problem into the following trace optimization problem.</p>\n\n<p>Let $x,y \\in\\{0,1\\}^n$,$x=\\mathbf{1}-y$. Here the set $S=\\{i:x_i=1\\}$ . We define  $X=[\\alpha x \\ \\beta y]$ for $\\alpha=\\frac{1}{\\sqrt{x'x}}$ and $\\beta=\\frac{1}{\\sqrt{y'y}}$ . $A$ is the adjacency matrix of the undirected graph $G$. Finally $W=ww'$ where $w_i$ is the weight of vertex $i$. We seek</p>\n\n<p>$\\max \\limits_{X'X=I, (A-I)X \\geq 0} trace(X'WX)$</p>\n\n<p>For the case of a complete graph I have been able to show that this maps to an NP-hard problem, but for sparse graphs I am not sure if it is NP-hard, although I suspect that it is and hope a continuous relaxation might give an approximation. Is anyone familiar with any similar optimization problems? Given the 2 constraints if I can rewrite them in the form of $X'BX=I$ then this would be a well known trace minimization. Any ideas would be helpful.</p>\n", 'ViewCount': '76', 'Title': 'Graph partitioning problem', 'LastEditorUserId': '16985', 'LastActivityDate': '2014-04-28T16:00:54.943', 'LastEditDate': '2014-04-28T16:00:54.943', 'AnswerCount': '0', 'CommentCount': '13', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16985', 'Tags': '<graph-theory><optimization><adjacency-matrix>', 'CreationDate': '2014-04-26T12:01:33.800', 'Id': '24127'}}