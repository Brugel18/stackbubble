104_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>We\'re in a shared memory concurrency model where all reads and writes to integer variables are atomic.  </p>\n\n<ul>\n<li><code>do:</code> $S_1$ <code>in parallel with:</code> $S_2$&#160;\xa0 means to execute $S_1$ and $S_2$ in separate threads, concurrently.</li>\n<li><code>atomically(</code>$E$<code>)</code> \xa0 means to evaluate $E$ atomically, i.e. all other threads are stopped during the execution of $E$.</li>\n</ul>\n\n<p>Consider the following program:</p>\n\n<pre><code>x = 0; y = 4\ndo:                 # thread T1\n    while x != y:\n        x = x + 1; y = y - 1\nin parallel with:   # thread T2\n    while not atomically (x == y): pass\n    x = 0; y = 2\n</code></pre>\n\n<p>Does the program always terminate? When it does terminate, what are the possible values for <code>x</code> and <code>y</code>?</p>\n\n<p><sub> Acknowledgement: this is a light rephrasing of exercise 2.19 in <a href="http://www.cs.arizona.edu/~greg/mpdbook/" rel="nofollow"><em>Foundations of Multithreaded, Parallel, and Distributed Programming</em></a> by Gregory R. Andrews. </sub>  </p>\n', 'ViewCount': '150', 'Title': 'termination of two concurrent threads with shared variables', 'LastEditorUserId': '39', 'LastActivityDate': '2012-03-26T16:55:14.447', 'LastEditDate': '2012-03-26T16:55:14.447', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '448', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<concurrency><shared-memory><imperative-programming>', 'CreationDate': '2012-03-16T23:58:16.950', 'Id': '443'},104_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m using the book Introduction to Computer Science by John Zelle and at the end of Chapter 3 (Computing with numbers), I\'m asked to find the nth term of a Fibonacci sequence presumably using a definitive for loop, as no other decision structure has been introduced yet. </p>\n\n<p>Is this possible? I\'ve tried everything I could think of.</p>\n\n<p>**I know how to solve it using if statements and such. But the book hasn\'t yet covered decision structures, yet it asks me to find the nth term(given by the user). So I can only presume to know how to do this using "for" loops as this is all that has been covered so far</p>\n', 'ViewCount': '3602', 'Title': 'Is it possible to find the nth term  of a Fibonacci sequence using a definitive for loop?', 'LastEditorUserId': '2398', 'LastActivityDate': '2013-03-06T21:25:52.477', 'LastEditDate': '2012-08-07T20:56:52.317', 'AnswerCount': '5', 'CommentCount': '6', 'Score': '5', 'OwnerDisplayName': 'qzxt', 'PostTypeId': '1', 'OwnerUserId': '2398', 'Tags': '<algorithms><imperative-programming>', 'CreationDate': '2012-08-07T20:14:42.113', 'Id': '3079'},104_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have this little exercise:</p>\n\n<pre><code>for ( i = 0; i &lt; 2 * n; i += 2 )\n  for ( j = 1; j &lt;= n; j &lt;&lt;= 1 )\n    if ( j &amp; i )\n      foo ();\n</code></pre>\n\n<p>(<code>j &lt;&lt;= 1</code> means <code>j = (j &lt;&lt; 1)</code>, where <code>&lt;&lt;</code> is the bitwise left shift operator. <code>&amp;</code> is the bitwise and operator.)</p>\n\n<p>I am supposed to determine how many times will the <em>foo</em> function be called for some <em>n</em>. The result should be both an exact number (or the most accurate approximation possible) and asymptotic (like O(n)).</p>\n', 'ViewCount': '195', 'Title': 'Double-nested loop with bitwise operation', 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-13T02:07:02.597', 'LastEditDate': '2012-09-22T23:09:47.477', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'OwnerDisplayName': 'Machta', 'PostTypeId': '1', 'OwnerUserId': '12141', 'Tags': '<time-complexity><imperative-programming><binary-arithmetic>', 'CreationDate': '2012-01-12T17:25:30.387', 'Id': '4681'},104_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have two pieces of code in a function which I'm trying to calculate the asymptotic running time for:</p>\n\n<pre><code>for (int x = 0; x &lt; y; x++) {\n    total  +=  total;\n    total  +=  x;\n}\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>while (y &gt; 0) {\n    total  -=  y;\n    y  =  y/2;\n}\n</code></pre>\n\n<p>Combining those two pieces of code, what is the run time of that function and how do I calculate it?</p>\n", 'ViewCount': '258', 'Title': 'Asymptotic time complexity of a two-loop program', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-17T11:59:24.930', 'LastEditDate': '2012-10-17T17:47:31.143', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'OwnerDisplayName': 'Lost', 'PostTypeId': '1', 'Tags': '<time-complexity><imperative-programming><loops>', 'CreationDate': '2012-10-16T16:19:38.743', 'Id': '6126'},104_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A <a href="http://www.youtube.com/watch?v=sqV3pL5x8PI" rel="nofollow">YouTube video</a> I was watching explained the differences between Imperative and Functional programming by demonstrating how the numbers from <code>1</code> to <code>10</code> are summed up in Java and in Haskell respectively. </p>\n\n<p>In Java, you must explicitly state each step and assign the result of each step to a variable - something like the following</p>\n\n<pre><code>int total = 0;\n     for (int i = 1; i &lt;= 10; i++){\n         total = total + i;\n     }\nreturn total;\n</code></pre>\n\n<p>In Haskell, you can simply say:</p>\n\n<pre><code>sum(1..10)\n</code></pre>\n\n<p><strong>My question is:</strong> There obviously is something going on in the background of a Functional language, and that something must be some sort of Imperative process. \nIt seems like Functional Languages are really just some sort of Imperative-Language APIs.\nFor example, I can create part of a functional language by defining a method <code>sum(int start, int end)</code> in Java. Did I really create a new type of language right there, or did I just define a set of Imperative method calls that hide imperative instructions from you?</p>\n\n<p>I hope it\'s clear what I am struggling to understand.</p>\n', 'ViewCount': '133', 'Title': "Isn't Functional Programming just Imperative Programming in disguise?", 'LastActivityDate': '2013-12-03T22:36:58.430', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '18578', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4348', 'Tags': '<programming-languages><functional-programming><programming-paradigms><imperative-programming>', 'CreationDate': '2013-12-03T12:16:26.830', 'FavoriteCount': '1', 'Id': '18570'}