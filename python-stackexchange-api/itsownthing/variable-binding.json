{'Body': "<p>For this term:\n      $\\lambda x.(f (g x))$, what are the free and bound variables?</p>\n\n<p>I'm confused as to how to expand this so it will be easier to see.\nIf I expand this will it be $\\lambda x. \\lambda f. \\lambda g$?</p>\n", 'ViewCount': '72', 'Title': 'Free and bound variables in a lambda-calculus term', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-07T13:11:16.640', 'LastEditDate': '2013-04-07T13:11:16.640', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'OwnerDisplayName': 'user', 'PostTypeId': '1', 'Tags': '<terminology><lambda-calculus><variable-binding>', 'CreationDate': '2013-04-06T23:41:20.587', 'Id': '11083''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am perpetually confused when it comes to static scoping and dynamic scoping and their differences and Wikipedia isn\'t of any help, so here\'s my question:</p>\n\n<blockquote>\n  <p>Given the following pseudo code in a hypothetical programming environment, what are the outputs under the following conditions?</p>\n  \n  <ul>\n  <li>call by need using static scope</li>\n  <li>call by name using dynamic scope</li>\n  </ul>\n  \n  <p></p>\n\n<pre><code>global int n = 100, m = 5;\nvoid fun(x){\n    int n = 10;\n    print(x + 10);\n    n = 200;\n    m = 20;\n    print(x);\n}\nmain(){\n    fun(n + m);\n}\n</code></pre>\n</blockquote>\n\n<p>Additionally, what would be two environments where I can run this code to check the output with the conditions? <a href="http://en.wikipedia.org/wiki/C_%28programming_language%29" rel="nofollow">C</a> uses lexical scope, but it does not support call by need while <a href="http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" rel="nofollow">Bash</a> supports dynamic scope, I guess!</p>\n', 'ViewCount': '145', 'Title': 'Static scope and dynamic scope', 'LastEditorUserId': '1541', 'LastActivityDate': '2013-10-11T16:55:12.883', 'LastEditDate': '2013-09-27T17:57:32.757', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10329', 'Tags': '<programming-languages><variable-binding>', 'CreationDate': '2013-09-26T15:19:51.147', 'Id': '14625''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Would it be possible to apply $(\\lambda x.\\lambda y. x)$ to the argument $y$? It seems to me that this must not be possible as it would give a different answer if applied to a constant, call it $\\alpha$ and $y$. Namely:</p>\n\n<p>$(\\lambda x.\\lambda y. x) \\alpha = \\alpha$</p>\n\n<p>but </p>\n\n<p>$(\\lambda x.\\lambda y. x)y = \\lambda y.y$</p>\n\n<p>I am afraid that I might be making considerable mistakes but this is only the case because I have been studying $\\lambda$-calculus for just one day.</p>\n\n<p>Thank you very much in advance for your comments and suggestions.</p>\n', 'ViewCount': '30', 'Title': 'Is this $\\beta$-reduction well defined?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-06T23:14:47.590', 'LastEditDate': '2013-10-06T23:14:47.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '14865', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10537', 'Tags': '<programming-languages><lambda-calculus><term-rewriting><variable-binding>', 'CreationDate': '2013-10-06T22:23:47.130', 'Id': '14863''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm wondering about the result of this program as I get confused when it comes to lexical scoping and dynamic scoping.</p>\n\n<pre><code>fun bar() {\n   int a = 2\n   void foo(int b) {\n       b = b * a;\n       a = a - b     \n   }\n   {\n       int a = 10;\n       foo(a);\n       print a;\n   }\n}\n</code></pre>\n\n<p>There are a couple of questions of what program will print, and here are my answers</p>\n\n<ul>\n<li>Call-by-value and lexical scoping: <strong>10</strong> because call-by-value does not change the value of variable a after calling foo(a), and within the scope of $ print $ a is 10.</li>\n<li>Call-by-value and dynamic scoping: <strong>10</strong> just as the above, call-by-value does not change the value of a</li>\n<li>Call-by-reference and lexical scoping: </li>\n<li>Call-by-reference and dynamic scoping: </li>\n</ul>\n\n<p>I get confused about the last two options. I'm wondering whether with lexical scoping it will use the value a = 10, or a = 2 in foo function, i.e. I'm not sure what will be printed 20 or 100. The confusion also holds with call-by-reference dynamic scoping</p>\n", 'ViewCount': '131', 'Title': 'lexical scoping vs. dynamic scoping', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-27T11:02:40.977', 'LastEditDate': '2013-12-27T11:02:40.977', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11326', 'Tags': '<programming-languages><parsing><variable-binding>', 'CreationDate': '2013-12-09T00:48:35.130', 'FavoriteCount': '1', 'Id': '18766''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}