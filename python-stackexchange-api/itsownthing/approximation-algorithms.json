359_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The <em>MAXDICUT</em> problem on a directed graph $G$ is where one is given integer $t$ and a graph $G$ and one has to decide if there is a subset $S \\subset \\mathcal{V}(G)$ such that $$|\\{(i\\rightarrow j)\\in\\mathcal{E}(G)\\mid i\\in S \\text{ and } j\\cap S=\\emptyset\\}|\\geq t$$</p>\n\n<p>Consider a $(c^a,d^a)$-regular directed hypergraph $H$ (meaning every hyperedge $\\{i_1\\rightarrow i_2,i_3,i_4,\\dots,i_{c^a}\\}\\in\\mathcal{E}(H)$ has $c^a$ vertices with  $head(i_1\\rightarrow i_2,i_3,i_4,\\dots,i_{c^a})=i_1$ and every vertex is on $d^a$ hyperedges with each vertex being a head on only one hyperedge) on $n^a$ vertices with fixed $n\\geq 4$ and fixed $c,d\\geq 2$ and variable parameter $a\\geq 1$. Consider the problem of given an integer $t$ and a hypergraph $H$ with above parameters, one has to decide if there is a subset $S \\subset \\mathcal{V}(H)$ such that $$|\\{\\mathcal{I}=\\{i_1\\rightarrow i_2,i_3,i_4,\\dots,i_{c^a}\\}\\in\\mathcal{E}(H)\\mid i_1\\in S \\text{ and } \\mathcal{I}\\setminus i_1\\cap S=\\emptyset\\}|\\geq t$$</p>\n\n<p>Call this problem <em>REGULAR-HYPERGRAPH-MAXDICUT</em>. Clearly this problem is NP-complete. Note that a directed $d$-regular graph on $n$ vertices with one outgoing edge per vertex is a $(2,d)$-regular hypergraph on $n$ vertices. So <em>REGULAR-HYPERGRAPH-MAXDICUT</em> $\\leq$ <em>MAXDICUT</em>.</p>\n\n<p>Now consider a $(c^a,d^a)$-regular directed hypergraph $H$ on $n^a$ vertices with fixed $n\\geq 4$ and fixed $c,d\\geq 2$ and variable parameter $a\\geq 1$. Given this graph, form a sequence of $d^a$-regular directed graphs $G_j$ on $n^a$ vertices for $j=1\\rightarrow c^a-1$ by projecting the hyperedge $\\{i_1\\rightarrow i_2,i_3,i_4,\\dots,i_{c^a}\\}\\in\\mathcal{E}(H)$ to the edge $\\{i_1 \\rightarrow i_{j+1}\\}$ and dropping the remaining possibles projections. Conversely given such $G_i$s, we can glue each set of edges from $i_1$ to get back the hypergraph $H$. Note each vertex of $G_i$ lies on $d^a$ edges.</p>\n\n<p>Given this graph, form a sequence of $r^m$-regular directed graphs $\\mathcal{G}_j$ on $N^m$ vertices for $j=1\\rightarrow r^m-1$ by projecting the hyperedge $\\{i_1\\rightarrow i_2,i_3,i_4,\\dots,i_{c^a}\\}\\in\\mathcal{E}(\\mathcal{H}([G,m]))$ to the edge $\\{i_1 \\rightarrow i_{j+1}\\}$ and dropping the remaining possibles projections. Conversely given such $\\mathcal{G}_j$ graphs, we can glue each set of edges from $i_1$ to get back the hypergraph $\\mathcal{H}[G,m]$. Note each vertex of $G_i$ lies on $r^m$ edges. </p>\n\n<p>Now from the $G_j$ construct the graph sum $\\mathcal{G}$ which is the directed graph with the hyperedge $\\{i_1\\rightarrow i_2,i_3,i_4,\\dots,i_{c^a}\\}\\in\\mathcal{E}(\\mathcal{H}([G,m]))$ replaced by a sequence of edges $\\{i_1\\rightarrow i_2,i_1\\rightarrow i_3,i_1\\rightarrow i_4,\\dots,i_1\\rightarrow i_{c^a}\\}\\in\\mathcal{E}(\\mathcal{G}$. It is clear \\emph{MAXDICUT} problem on $\\mathcal{G}$ solves the <em>HYPERGRAPH-MAXDICUT</em> problem in $\\mathcal{H}([G,m])$.</p>\n\n<p>Can the above give <em>MAXDICUT</em> $\\leq$ <em>REGULAR-HYPERGRAPH-MAXDICUT</em>? (THE ISSUE IS WHEN WE CHOOSE AN HYPEREDGE WE CHOOSE ALL ITS VERTICES. THIS IS NOT THE CASE WHEN WE REPLACE THE HYPERGRAPH WITH A DIRECTED GRAPH).</p>\n\n<p>Is <em>REGULAR-HYPERGRAPH-MAXDICUT</em> $\\leq_{APX}$ <em>MAXDICUT</em> and <em>MAXDICUT</em> $\\leq_{APX}$ <em>REGULAR-HYPERGRAPH-MAXDICUT</em>? This will give a constant factor approximation to <em>REGULAR-HYPERGRAPH-MAXDICUT</em> where the constant factor is independent of $a$.</p>\n\n<p>Can we generalize to a possible version of <em>IRREGULAR-HYPERGRAPH-MAXDICUT</em>? Would this yield constant factor approximations to <em>IRREGULAR-HYPERGRAPH-MAXDICUT</em> as well?</p>\n', 'ViewCount': '39', 'Title': 'Constant factor approximation of hypergraph maxdicut', 'LastEditorUserId': '9753', 'LastActivityDate': '2013-10-02T19:15:11.187', 'LastEditDate': '2013-10-02T19:15:11.187', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9753', 'Tags': '<reductions><approximation-algorithms><max-cut>', 'CreationDate': '2013-10-02T08:29:17.627', 'Id': '14751'},359_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In real word problems, the influence of multiple not perfectly known factors results in using heuristics instead of mathemacial solutions that calculates a perfect value from only precisly defined input data. Consequently, any method that does not supply the mathematical maximum or minimum is not an optimisation but an improvement.</p>\n\n<p>Somehow my opinion on this topic differs from the use of the term <code>optimisation</code> in many papers. Are the people just not precise in their language or is my understanding of the term wrong?</p>\n\n<p><code>Improvement</code> doesn't sound as facy as <code>optimisation</code>, but is there maybe some facy word that allows people to still be precise?</p>\n", 'ViewCount': '40', 'Title': 'Is a non-perfect improvement and optimisation?', 'LastActivityDate': '2013-10-14T13:53:07.487', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10634', 'Tags': '<terminology><optimization><approximation><applied-theory><approximation-algorithms>', 'CreationDate': '2013-10-14T13:28:29.267', 'Id': '16071'},359_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In the text book, Introduction to Algorithm, 3rd Edition.</p>\n\n<p>In the chapter, <strong>Approximation Algorithms</strong> and for the problem <strong>Travelling Salesman Problem</strong>, the author says: </p>\n\n<p><img src="http://i.stack.imgur.com/99jYL.png" alt="enter image description here"></p>\n\n<p>I am wondering how triangle inequality gives rise to this assertion? It seems that this property is not that important, as I searched through the rest of this section, it does not appear.</p>\n', 'ViewCount': '143', 'Title': 'without triangle inequality, finding good approximate tours for TSP in polynomial time is impossible unless P=NP?', 'LastActivityDate': '2013-10-18T00:46:42.290', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4662', 'Tags': '<algorithms><complexity-theory><traveling-salesman><approximation-algorithms>', 'CreationDate': '2013-10-16T17:31:49.740', 'Id': '16143'},359_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In the chapter, <em>Approximation Algorithms</em> of <em>Introduction to Algorithm, 3rd Edition</em>, for the approximation problem <strong>Travelling Salesman Problem</strong>, the author proposes a approximation method that first constructs a minimum spanning tree.</p>\n\n<p><img src="http://i.stack.imgur.com/G9Bvx.png" alt="enter image description here"></p>\n\n<p>In order to prove this algorithm is a 2-approximation algorithm, the author claims that:</p>\n\n<p>The weight of the minimum spanning tree $T$ is less than the cost of the optimal tour.</p>\n\n<p>I am wondering if the minimum spanning tree(which is <strong>acyclic</strong>) of $G$ ensures that its weight is <strong>necessarily</strong> smaller than any tour(which is <strong>cyclic</strong>) of the same graph $G$</p>\n\n<p>PS: </p>\n\n<p>The original claim is:</p>\n\n<p><img src="http://i.stack.imgur.com/MGgcu.png" alt="enter image description here"></p>\n', 'ViewCount': '134', 'Title': 'Approximated TSP: weight of minimum spanning tree less than cost of the optimal tour?', 'LastActivityDate': '2013-10-16T17:49:55.960', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4662', 'Tags': '<algorithms><graph-theory><traveling-salesman><approximation-algorithms>', 'CreationDate': '2013-10-16T17:45:18.160', 'FavoriteCount': '1', 'Id': '16144'},359_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm given this problem:</p>\n\n<p>Consider the following closest-point heuristic for building an approximate traveling-salesman  tour. Begin with a trivial cycle consisting of a single arbitrarily chosen vertex. At each step, identify the vertex u that is not on the cycle but whose distance to any vertex on the cycle is minimum. Suppose that the vertex on the cycle that is nearest u is vertex v. Extend the cycle to include u by inserting u just after v. Repeat until all vertices are on the cycle. Prove that this heuristic returns a tour whose total cost is not more than twice the cost of an optimal tour. </p>\n\n<p>This is the same as Prim's algorithm.  Unless I'm missing something, this is not an approximate traveling salesman tour since the traveling salesman requires a Hamiltonian path where we don't revisit any nodes, but on many graphs this algorithm seems to require revisiting nodes to get back to the source node.  Am I wrong or is this problem unclearly worded?</p>\n", 'ViewCount': '120', 'Title': "Traveling Salesman's Tour Approx Algorithm: is this really a Hamiltonian Path?", 'LastActivityDate': '2013-11-19T10:58:35.200', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '18152', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11474', 'Tags': '<traveling-salesman><spanning-trees><approximation-algorithms>', 'CreationDate': '2013-11-19T06:43:05.060', 'Id': '18147'},359_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>Below is a homework problem where we have been asked to alter a greedy algorithm to return n element instance of a set problem. The original algorithm is also below. I was thinking that I could alter line 3 so that it would run until the size of C was equal to n, and change the logic in line 4 so that it would pick and remove vertices until the size of n. A vertex would be removed when the size of C doesn't equal to n but the cover is complete. I can't really think of any other way to do it. The real problem is that I'm not entirely sure how to make the algorithm run in exponential time like they are asking. </p>\n\n<blockquote>\n  <p>GREEDY-SET-COVER can return a number of different solutions, depending on\n  how we break ties in line 4. Give a procedure BAD-SET-COVER-INSTANCE.n/\n  that returns an n-element instance of the set-covering problem for which, depending\n  on how we break ties in line 4, GREEDY-SET-COVER can return a number of\n  different solutions that is exponential in n.</p>\n  \n  <p>$X$ \u2014 some finite set<br>\n  $F$ \u2014 a family of subsets of $X$<br>\n  $C$ \u2014 cover being constructed    </p>\n  \n  <p>GREEDY-SET-COVER($n$)<br>\n  1    let $U = X$<br>\n  2    let $C = \\varnothing$<br>\n  3    while $U \\ne \\varnothing$<br>\n  3a            select an $S \\in F$ that maximizes $\\left|S \\cap U\\right|$<br>\n  3b            set $U = U \\setminus S$<br>\n  3c            set $C = C \\cup \\{S\\}$<br>\n  4    return $C$   </p>\n</blockquote>\n\n<p>Could it be said that since the number of subsets a set has is $2^n$ and that in the worst case this algorithm will end up finding all of those subsets before settling on an n-instance set to return?</p>\n", 'ViewCount': '112', 'Title': 'Finding an instance of an n-element set cover', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-28T21:30:30.133', 'LastEditDate': '2013-11-28T21:30:30.133', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11580', 'Tags': '<algorithms><algorithm-analysis><greedy-algorithms><set-cover><approximation-algorithms>', 'CreationDate': '2013-11-23T23:48:31.680', 'Id': '18287'},359_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given two NP NP-hard functional problems, A and B, one can find a reduction of A to B. Is it possible to find a reduction that would honour approximations? That is, if you have an approximation algorithm for B that yield approximate solutions within accuracy $\\delta$, is it possible to reduce A to B in such a way that one would be able to derive an approximate solution of A within accuracy $\\epsilon = \\epsilon(\\delta)$?</p>\n', 'ViewCount': '85', 'Title': 'Approximation algorithms for NP-complete problems', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-19T05:48:21.523', 'LastEditDate': '2013-12-16T20:06:37.607', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '10447', 'Tags': '<complexity-theory><reductions><approximation-algorithms>', 'CreationDate': '2013-12-16T18:26:00.343', 'Id': '19050'},359_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Does anyone know a good algorithm for quickly finding an approximate solution to the following problem?</p>\n\n<p>Given two square matrices $A$ and $B$, minimize $\\| P A P^\\top - B \\|$ over all permutation matrices $P$.</p>\n\n<p>I have heard that there are several types of algorithms for these kinds of problems, like iterative improvement, simulated annealing, tabu search, genetic algorithms, evolution strategies, ant algorithms, and scatter search. I am looking for existing software.</p>\n', 'ViewCount': '34', 'Title': 'Quadratic programming problem involving permutation matrices', 'LastActivityDate': '2013-12-26T14:22:58.533', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12383', 'Tags': '<algorithms><optimization><permutations><approximation-algorithms>', 'CreationDate': '2013-12-26T14:22:58.533', 'Id': '19303'},359_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In order to plot a curve a set of points is usually calculated based on some formula. The function FPLOT in MATLAB also supports plotting with some error tolerance. Its help says the following about this functionality:</p>\n\n<pre><code>The FPLOT function begins with a minimum step of size (XMAX-XMIN)*TOL.\nThe step size is subsequently doubled whenever the relative error\nbetween the linearly predicted value and the actual function value is\nless than TOL.\n</code></pre>\n\n<p>So, if I plot a curve based on some expression and with some predefined tolerance TOL, is the error of the line segment approximation between any two calculated points always lower than TOL? Unfortunately, this is not obvious for me.</p>\n\n<p>If not, how could one achieve a guaranteed (small) error of a piecewise-linear curve approximation (compared with the "exact" curve).</p>\n', 'ViewCount': '14', 'Title': 'Error estimates of piecewise-linear curve approximations', 'LastActivityDate': '2014-02-06T14:32:19.993', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '21379', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13186', 'Tags': '<approximation><approximation-algorithms><error-estimation>', 'CreationDate': '2014-02-06T14:20:58.570', 'Id': '21376'},359_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If we have a FPRAS for approximating the quantity c, can we get another FPRAS for estimating (c-1) using the estimation of c?</p>\n', 'ViewCount': '17', 'Title': 'Estimating (c-1) from approximation of c', 'LastActivityDate': '2014-03-10T16:49:39.253', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15499', 'Tags': '<approximation-algorithms>', 'CreationDate': '2014-03-10T16:00:59.913', 'Id': '22473'}