128_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2298', 'Title': 'Why has research on genetic algorithms slowed?', 'LastEditDate': '2012-04-06T23:24:25.237', 'AnswerCount': '5', 'Score': '28', 'PostTypeId': '1', 'OwnerUserId': '258', 'FavoriteCount': '6', 'Body': '<p>While discussing some intro level topics today, including the use of genetic algorithms; I was told that research has really slowed in this field. The reason given was that most people are focusing on machine learning and data mining. <br>\n<strong>Update:</strong> Is this accurate? And if so, what advantages does ML/DM have when compared with GA?</p>\n', 'Tags': '<machine-learning><data-mining><evolutionary-computing><history>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-06T23:24:25.237', 'CommentCount': '2', 'AcceptedAnswerId': '565', 'CreationDate': '2012-03-21T01:17:25.527', 'Id': '561'},128_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have to make a quick clustering program but the following formula is gibberish to me:</p>\n\n<blockquote>\n  <p>$\\operatorname{Perf}(X,C) = \\sum\\limits_{i=1}^n\\min\\{||X_i-C_l||^2  \\mid  l = 1,...,K\\}$</p>\n  \n  <p>where $X$ is a set of multi-dimensional data and $C$ is a set of centroids for each data cluster.</p>\n</blockquote>\n\n<p>This formula is a fitness function for an <a href="https://en.wikipedia.org/wiki/Artificial_bee_colony_algorithm" rel="nofollow">artificial bee colony clustering algorithm</a> as a substitute for <a href="https://en.wikipedia.org/wiki/K-means_clustering_algorithm" rel="nofollow">k-means clustering algorithm</a>. It is described as a total\nwithin-cluster variance or the total mean-square quantization error (MSE).</p>\n\n<p>Can anyone translate it to <em>pseudo-code</em>, normal human <em>English</em>, or at least enlighten me?</p>\n', 'ViewCount': '117', 'Title': 'What does this performance formula mean?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-25T10:19:26.157', 'LastEditDate': '2012-05-25T10:19:26.157', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '2068', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1643', 'Tags': '<algorithms><terminology><evolutionary-computing>', 'CreationDate': '2012-05-25T05:45:24.833', 'Id': '2067'},128_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How do you determine the Time Complexity of a Genetic Algorithm(in general)? If possible.</p>\n\n<p>I have been thinking about this a lot, and all of the teaching I have had is related to determining the Time Complexity of problems that are much less stochastic in nature.</p>\n', 'ViewCount': '437', 'Title': 'Time Complexity of Genetic Algorithms', 'LastEditorUserId': '55', 'LastActivityDate': '2013-01-06T21:35:42.127', 'LastEditDate': '2013-01-06T02:35:03.520', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '110', 'Tags': '<time-complexity><evolutionary-computing>', 'CreationDate': '2013-01-05T22:20:22.927', 'FavoriteCount': '2', 'Id': '7793'},128_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was wondering since randomness is embedded in genetic algorithms at almost every level, is there a really fine line between genetic algorithms and pure random search?</p>\n\n<p>Ever since I finished my implementation of a GA , since randomness is present in the mutation function,the initialization part (as well as the reinitialization part) and crossbreeding part as well... other than a encoder which tries to sense of the chromsomes (encoder tailored to make sense of the chromosome in context of the problem) and a fitness function , it feels like genetic algorithms are just random search functions in disguise .</p>\n\n<p>So my question is : are GA implementations just plain old random searches with a shot of memory to make it look like there is some sort of meaningful feedback? </p>\n', 'ViewCount': '108', 'ClosedDate': '2013-04-02T22:15:50.887', 'Title': 'Are genetic algorithms special instances of random search done in an unexpectedly short run-time?', 'LastEditorUserId': '7545', 'LastActivityDate': '2013-04-02T21:07:18.593', 'LastEditDate': '2013-04-02T20:35:30.713', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7545', 'Tags': '<search-algorithms><efficiency><randomness><evolutionary-computing><genetic-algorithms>', 'CreationDate': '2013-04-02T15:57:17.913', 'Id': '10975'},128_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm currently working on my masters thesis, and it's about clustering on graphs. I'm working with an idea using ants to solve the problem. I'm currently working on the implementation and am wondering exactly how well to represent the edges of the graph. </p>\n\n<p>Each edge is augmented with certain information such as its pheromone value and the number of times an ant has visited that edge. I'll be working with undirected graphs, which can be end up being pretty huge (over a million vertices) and I was wondering what is the most efficient way for me to store the edges and look them up? I was thinking of sticking to a convention and store endpoints according to the one which has a lower vertex id for $v_1$ and the higher one for $v_2$ ($v_1$ and $v_2$ are the endpoints of the edge in the data structure). But I'm wondering how would I perform a look up in this case?</p>\n\n<p>There is a mapping I came up with from the adjacency matrix to the edge array, but that works only if the underlying graph is a complete graph. So I came here for some suggestions as to how I should proceed because I need my lookup to be efficient while at the same time I don't want to blow up the storage space for the edges as the graphs will be huge.</p>\n", 'ViewCount': '560', 'LastEditorDisplayName': 'user742', 'Title': 'Data structure for storing edges of a graph', 'LastActivityDate': '2013-09-20T09:27:38.553', 'LastEditDate': '2013-09-20T09:27:38.553', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '13367', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '5020', 'Tags': '<graph-theory><data-structures><evolutionary-computing>', 'CreationDate': '2013-07-20T19:03:15.100', 'Id': '13364'},128_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to use discrete differential evolutionary algorithm for assigning discrete values from set size $L$ to vectors of size $D$ where $L$ could be smaller, equal or larger than $D$. Elements of vector $X$ could take the same values of other elements.  My question is if we have a population of size $NP$ with each vector $X$ in the population of size $D$. How do we actually apply the mutation operand:</p>\n\n<p>$$V_{j,i}^{G+1} = X_{j, r_1}^{G} + F\\cdot (X_{j, r_2}^{G}-X_{j, r_3}^{G})$$</p>\n\n<p>where $i$, $r_1$, $r_2$, $r_3$ are references to vectors in $NP$ and none is equal to the other, $J$ is an index in vector $X$, and $F$ is a random number between $0$ and $1.2$.</p>\n\n<p>Suppose $X_{r_1}^{G}$ is equal to $\\{4, 1, 3, 2, 2, 0\\}$ and  $X_{r_2}^{G}$ is equal to $\\{2, 2, 3, 0, 4, 2\\}$ and $X_{r_3}^{G}$ is equal to $\\{1, 2, 3, 3, 0, 1\\}$\nCould anyone explain in detail the steps (through example if possible) on how to get the mutant vector $V_{j,i}^{G+1}$</p>\n', 'ViewCount': '25', 'Title': 'Mutation and crossover operations in discrete differential evolutionary operations?', 'LastEditorUserId': '15742', 'LastActivityDate': '2014-03-17T01:45:19.773', 'LastEditDate': '2014-03-17T01:45:19.773', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15742', 'Tags': '<algorithms><optimization><heuristics><evolutionary-computing>', 'CreationDate': '2014-03-16T07:22:44.630', 'Id': '22668'}