{'Body': "<p>De Morgan's Law is often introduced in an introductory mathematics for computer science course, and I often see it as a way to turn statements from AND to OR by negating terms.</p>\n\n<p>Is there a more intuitive explanation for why this works rather than just remembering truth tables? To me this is like using black magic, what's a better way to explain this so that it makes sense to a less mathematically inclined individual? </p>\n", 'ViewCount': '1107', 'Title': "What is an intuitive way to explain and understand De Morgan's Law?", 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:28:15.127', 'LastEditDate': '2012-04-22T16:28:15.127', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '351', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '5', 'Tags': '<logic><discrete-mathematics><didactics>', 'CreationDate': '2012-03-14T06:57:17.257', 'Id': '350'}{'Body': '<p>Logic gates are an abstract device which can be implemented with electromagnetic relays, vacuum tubes, or transistors.  These implemenations have been successful in computing in part because of various properties of chainability, durability, and size beyond their basic binary stability.  They also work well because electricity is the energy source which can rather easily be shipped around.</p>\n\n<p>I\'ve seen adders built out of <a href="http://blog.makezine.com/archive/2007/06/binary-marble-adding-mach.html" rel="nofollow">wood, marbles, and gravity</a>.  I\'ve seen <a href="http://www.technologyreview.com/biomedicine/21784/" rel="nofollow">"lab on a chip" capilary-action-driven prototypes</a>.  I\'ve seen all kinds of specialty mechanical calculators (<a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=video&amp;cd=1&amp;ved=0CDsQtwIwAA&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DHYsOi6L_Pw4&amp;ctbm=vid&amp;ei=mrlxT-uoOIq-0QHIqpzHAQ&amp;usg=AFQjCNECIg5HDIV-9uL3GnwU_aSXriVDGA" rel="nofollow">Curta</a>, slide rule).  I\'ve seen <a href="http://www.youtube.com/watch?v=SudixyugiX4" rel="nofollow">domino trails</a> as single-use logic gates.</p>\n\n<p>I\'m interested in other illustrative computing devices that aren\'t <em>necessarily</em> convenient, durable, or fast, but which exploit properties of everyday materials to perform computation and which are directly visible.  The dominoes trails are close, but are a little too complicated to reset.</p>\n\n<p>Magneto-mechanical arrangements?  Water in pipes/troughs?  More general marble contraptions?</p>\n\n<p>PS.  Here\'s a new one.  <a href="http://www.liorelazary.com/index.php?option=com_content&amp;view=article&amp;id=46%3amechanical-cpu-clock&amp;catid=10%3aclocks&amp;Itemid=15" rel="nofollow">Mechanical CPU Clock</a></p>\n', 'ViewCount': '1667', 'Title': 'Logic gates from everyday materials', 'LastEditorUserId': '762', 'LastActivityDate': '2012-04-23T03:43:15.613', 'LastEditDate': '2012-04-16T22:55:09.193', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '762', 'Tags': '<computer-architecture><didactics>', 'CreationDate': '2012-03-27T03:52:57.487', 'Id': '809'}{'ViewCount': '354', 'Title': 'How to fool the plot inspection heuristic?', 'LastEditDate': '2014-01-26T03:54:58.673', 'AnswerCount': '4', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '98', 'FavoriteCount': '6', 'Body': '<p>Over <a href="http://cs.stackexchange.com/a/825/98">here</a>, Dave Clarke proposed that in order to compare asymptotic growth you should plot the functions at hand. As a theoretically inclined computer scientist, I call(ed) this vodoo as a plot is never proof. On second thought, I have to agree that this is a very useful approach that is even sometimes underused; a plot is an efficient way to get first ideas, and sometimes that is all you need.</p>\n\n<p>When teaching TCS, there is always the student who asks: "What do I need formal proof for if I can just do X which always works?" It is up to his teacher(s) to point out and illustrate the fallacy. There is a brilliant set of examples of <a href="http://math.stackexchange.com/q/111440/3330">apparent patterns that eventually fail</a> over at math.SE, but those are fairly mathematical scenarios.</p>\n\n<p>So, how do you fool the plot inspection heuristic? There are some cases where differences are hard to tell appart, e.g.</p>\n\n<p><img src="http://i.stack.imgur.com/cXBip.png" alt="example">\n<img src="http://i.stack.imgur.com/tFr3Z.png" alt="example">\n<img src="http://i.stack.imgur.com/qzOHT.png" alt="example"><br>\n<sup>[<a href="https://github.com/akerbos/sesketches/blob/gh-pages/src/cs_857.gnuplot" rel="nofollow">source</a>]</sup></p>\n\n<p>Make a guess, and then check the source for the real functions. But those are not as spectacular as I would hope for, in particular because the real relations are easy to spot from the functions alone, even for a beginner.</p>\n\n<p>Are there examples of (relative) asymptotic growth where the truth is not obvious from the function definiton and plot inspection for reasonably large $n$ gives you a completely wrong idea? Mathematical functions and real data sets (e.g. runtime of a specific algorithm) are both welcome; please refrain from piecewise defined functions, though.</p>\n', 'Tags': '<asymptotics><didactics>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-26T03:54:58.673', 'CommentCount': '2', 'AcceptedAnswerId': '873', 'CreationDate': '2012-03-29T07:09:18.883', 'Id': '857'}{'ViewCount': '4509', 'Title': 'Quicksort explained to kids', 'LastEditDate': '2012-04-19T21:11:51.423', 'AnswerCount': '4', 'Score': '10', 'OwnerDisplayName': 'd555', 'PostTypeId': '1', 'OwnerUserId': '1152', 'FavoriteCount': '3', 'Body': u'<p>Last year, I was reading a fantastic <a href="http://arxiv.org/abs/quant-ph/0510032">paper on \u201cQuantum Mechanics for Kindergarden\u201d</a>. It was not easy paper.</p>\n\n<p>Now, I wonder how to explain quicksort in the simplest words possible. How can I prove (or at least handwave) that the average complexity is $O(n \\log n)$, and what the best and the worst cases are, to a kindergarden class? Or at least in primary school?</p>\n', 'Tags': '<algorithms><education><algorithm-analysis><didactics><sorting>', 'LastEditorUserId': '5', 'LastActivityDate': '2012-04-20T14:53:59.763', 'CommentCount': '8', 'AcceptedAnswerId': '1369', 'CreationDate': '2012-04-19T20:23:14.023', 'Id': '1367'}{'Body': '<p>How would you explain why the Fast Fourier Transform is faster than the Discrete Fourier Transform, if you had to give a presentation about it for the general (non-mathematical) public?</p>\n', 'ViewCount': '978', 'Title': 'Explaining why FFT is faster than DFT for the general public?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-18T11:54:12.870', 'LastEditDate': '2013-04-18T08:25:48.223', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7239', 'Tags': '<algorithms><efficiency><education><didactics><fourier-transform>', 'CreationDate': '2013-04-17T22:22:57.513', 'Id': '11371'}{'Body': '<p>I have usually been using the Cormen algorithm format to teach some introductory courses in Programming. I mean something like this:</p>\n\n<pre><code>TreeSearch(k,n)\n1. if x==NIL or k==x.key\n2.     return x\n3. if k&lt;x.key\n4.     return TreeSearch(k.left,n)\n5. else return TreeSearch(k.right,n)\n</code></pre>\n\n<p>Actually I have not agree with a couple of lecturers in my institution that they insist to put the type of the variable that they are using in the algorithm. I mean, to do that, will it not be to make a bias toward the programming language and not to focus on the algorithm? For example what would happen if the student grab other programming language, like R or Python, that really do not care about the type of variable.</p>\n\n<p>The other issue that I have is how to represent OOP algorithms in a nice algorithmic way. For example when I make a constructor should I put something like:</p>\n\n<pre><code>Class: car\nAttributes: wheels\nConstructor car()\n</code></pre>\n\n<p>or something like</p>\n\n<pre><code>Class: car\nFunction car()\n</code></pre>\n\n<p>also when I come to the part of inheritance, one of my colleages put the word super() to define inheritance in an algorithmic way, but again I think that is too Java-way to do this part. Usually they teach in that way because the practical part is made in Java, but again I think that the algorithm should be more freely, directly towards the logic, and not to an specific programming language.</p>\n\n<p>Does anybody knows some standard to represent algorithms for OOP?</p>\n', 'ViewCount': '213', 'Title': 'How to represent OOP concepts in algorithms in a standard way?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-29T18:27:24.440', 'LastEditDate': '2013-04-29T18:27:24.440', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6430', 'Tags': '<algorithms><terminology><education><object-oriented><didactics>', 'CreationDate': '2013-04-29T13:30:18.693', 'Id': '11658'}{'Body': '<p>I am involved in a first year programming and algorithms course. In a recent lecture, I decided to present the material using <a href="http://en.wikipedia.org/wiki/Live_coding"><em>live coding</em></a>, which essentially meant that I sit behind the keyboard and write code and evaluate it, using <em>emacs</em> to facilitate the process.</p>\n\n<p>This was quite successful and students commented on how much they appreciated the more (inter)active format. As this was my first attempt using this teaching format, I know that it did not run perfectly. Some of the problems were related to being not as savvy with <em>emacs</em> as I should be, and others were to do with allowing student questions to take me too far from my script. I know I can do better.</p>\n\n<blockquote>\n  <p>What are some guidelines for giving lectures (and other demonstrations) using live coding lectures?<br>\n  What are the pitfalls to avoid?</p>\n</blockquote>\n', 'ViewCount': '109', 'Title': 'Tips for teaching using Live Coding', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-26T04:52:21.313', 'LastEditDate': '2014-01-26T04:52:21.313', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<education><didactics>', 'CreationDate': '2014-01-20T14:02:15.140', 'Id': '19850'}