{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Initially, <a href="http://en.wikipedia.org/wiki/Matroid">Matroids</a> were introduced to generalize the notions of linear independence of a collection of subsets $E$ over some ground set $I$. Certain problems that contain this structure permit greedy algorithms to find optimal solutions. The concept of <a href="http://en.wikipedia.org/wiki/Greedoid">Greedoids</a> was later introduced to generalize this structure to capture more problems that allow for optimal solutions to be found by greedy methods.</p>\n\n<p>How often do these structures arise in algorithm design? </p>\n\n<p>Furthermore, more often than not a greedy algorithm will not be able to fully capture what is necessary to find optimal solutions, but may still find very good approximate solutions (Bin Packing for example). Given that, is there a way to measure how "close" a problem is to a greedoid/matroid?</p>\n', 'ViewCount': '366', 'Title': 'How fundamental are matroids and greedoids in algorithm design?', 'LastActivityDate': '2012-03-08T03:56:04.670', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '124', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '19', 'Tags': '<algorithms><combinatorics><optimization>', 'CreationDate': '2012-03-08T01:48:58.297', 'FavoriteCount': '5', 'Id': '119'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>We know from <a href="http://arxiv.org/abs/1201.0749" rel="nofollow">this paper</a> that there does not exist a puzzle that can be solved starting with 16 or fewer clues, but it implies that there does exist a puzzle that can be solved from 17 clues. Can all valid sudoku puzzles be specified in 17 clues? If not, what is the minimum number of clues that can completely specify every valid puzzle? More formally, does there exist a valid sudoku puzzle (or, I guess it would be a set of puzzles) that cannot be uniquely solved from only 17 clues? If so, then what is the minimum number of clues, $C$, such that every valid sudoku puzzle can be uniquely specified in $C$ or fewer clues?</p>\n', 'ViewCount': '115', 'Title': 'Minimum number of clues to fully specify any sudoku?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-10T15:18:14.037', 'LastEditDate': '2012-03-10T15:18:14.037', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '12', 'Tags': '<sudoku><combinatorics>', 'CreationDate': '2012-03-09T15:50:04.077', 'Id': '163'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Specifying any arbitrary 9x9 grid requires giving the position and value of each square. A na\xefve encoding for this might give 81 (x, y, value) triplets, requiring 4 bits for each x, y, and value (1-9 = 9 values = 4 bits) for a total of 81x4x3 = 972 bits. By numbering each square, one can reduce the positional information to 7 bits, dropping a bit for each square and a total of 891 bits. By specifying a predetermined order, one can reduce this more drastically to just the 4 bits for each value for a total of 324 bits. However, a sudoku can have missing numbers. This provides the potential for reducing the number of numbers that have to be specified, but may require additional bits for indicating positions.  Using our 11-bit encoding of (position, value), we can specify a puzzle with $n$ clues with $11n$ bits, e.g. a minimal (17) puzzle requires 187 bits.  The best encoding I\'ve thought of so far is to use one bit for each space to indicate whether it\'s filled and, if so, the following 4 bits encode the number. This requires $81+4n$ bits, 149 for a minimal puzzle ($n=17$). Is there a more efficient encoding, preferably without a database of each valid sudoku setup? (Bonus points for addressing a general $n$ from $N \\times N$ puzzle)</p>\n\n<p>It just occurred to me that many puzzles will be a rotation of another, or have a simple permutation of digits.  Perhaps that could help reduce the bits required.  </p>\n\n<p>According to <a href="http://en.wikipedia.org/wiki/Sudoku#Mathematics_of_Sudoku">Wikipedia</a>, </p>\n\n<blockquote>\n  <p>The number of classic 9\xd79 Sudoku solution grids is 6,670,903,752,021,072,936,960 (sequence A107739 in OEIS), or approximately $6.67&#215;10^{21}$.</p>\n</blockquote>\n\n<p>If I did my math right ($\\frac{ln{(6,670,903,752,021,072,936,960)}}{ln{(2)}}$), that comes out to 73 (72.498) bits of information for a lookup table.</p>\n\n<p>But:</p>\n\n<blockquote>\n  <p>The number of essentially different solutions, when symmetries such as rotation, reflection, permutation and relabelling are taken into account, was shown to be just 5,472,730,538[15] (sequence A109741 in OEIS).</p>\n</blockquote>\n\n<p>That gives 33 (32.35) bits, so it\'s possible that a clever method of indicating which permutation to use could get below the full 73 bits.</p>\n', 'ViewCount': '312', 'Title': 'Efficient encoding of sudoku puzzles', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:36:39.563', 'LastEditDate': '2012-04-22T16:36:39.563', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '12', 'Tags': '<combinatorics><modelling><information-theory><sudoku>', 'CreationDate': '2012-03-09T17:02:17.730', 'FavoriteCount': '0', 'Id': '165'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In the <a href="http://en.wikipedia.org/wiki/Stable_marriage_problem" rel="nofollow">Stable Matching Problem</a>, it is stated that there can exist cases where the $m$ list of men can be content with their decisions, yet the list of $f$ cannot when the algorithm is run with men\'s proposals.</p>\n\n<p>From what I read, an unstable match occurs when $m$ and $f$ prefer each other to their current partners.</p>\n\n<p>I am a little lost in the definition of Stable Matching for this case. I\'m going over the slides <a href="http://www.cs.princeton.edu/~wayne/kleinberg-tardos/01stable-matching-2x2.pdf" rel="nofollow">here</a>.</p>\n\n<blockquote>\n  <p>Is a pair $(m, f)$ stable as long as the men are content even though the female\'s preferences have not been matched?</p>\n</blockquote>\n', 'ViewCount': '91', 'Title': 'Stability for couples in the Stable Matching Problem', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-13T02:19:03.173', 'LastEditDate': '2012-12-13T02:19:03.173', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '225', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '151', 'Tags': '<combinatorics>', 'CreationDate': '2012-03-11T21:09:51.530', 'Id': '223'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Is it not necessary to encode both the uppercase and lowercase letter while encoding a message with the <a href="http://en.wikipedia.org/wiki/Move-to-front_transform" rel="nofollow">move-to-front transform</a>? From an old computer science course exam, the problem was to encode <code>Matt_ate_the_mat</code> starting with an empty list.</p>\n\n<p>Using the author\'s solution methodology of not taking into account <code>M</code> versus <code>m</code> one arrives at</p>\n\n<p>$C(1)C^\u2217(M)\\\\\r\nC(2)C^\u2217(a)\\\\\r\nC(3)C^\u2217(t)\\\\\r\nC(1)\\\\\r\nC(4)C^\u2217(\\_)\\\\\r\nC(3)\\\\\r\nC(3)\\\\\r\nC(5)C^\u2217(e)\\\\\r\nC(4)\\\\\r\nC(3)\\\\\r\nC(6)C^\u2217(h)\\\\\r\nC(4)\\\\\r\nC(4)\\\\\r\nC(6)\\\\\r\nC(6)\\\\\r\nC(6)$</p>\n\n<p>Seeing that move-to-front works best with items that are repeated this works to one advantage as long as the difference between <code>M</code> and <code>m</code> in the original message is not important, correct?</p>\n\n<p>Though would it not change the last encodings if taking into account <code>m</code> to $C(7)C^*(m)$ or was this done for the sake of brevity within the exam?</p>\n', 'ViewCount': '155', 'Title': 'Distinguishing between uppercase and lowercase letters in the "move-to-front" method', 'LastEditorUserId': '39', 'LastActivityDate': '2012-03-14T05:21:34.080', 'LastEditDate': '2012-03-13T17:56:07.240', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '347', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '151', 'Tags': '<combinatorics><data-compression>', 'CreationDate': '2012-03-13T17:43:13.543', 'Id': '326'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '2403', 'Title': 'Counting binary trees', 'LastEditDate': '2012-03-14T16:35:41.583', 'AnswerCount': '2', 'Score': '16', 'PostTypeId': '1', 'OwnerUserId': '68', 'FavoriteCount': '6', 'Body': '<p>(I\'m a student with some mathematical background and I\'d like to know how to count the number of a specific kind of binary trees.)</p>\n\n<p>Looking at Wikipedia page for <a href="http://en.wikipedia.org/wiki/Binary_tree">Binary Trees</a>, I\'ve noticed this assertion that the number of rooted binary trees of size $n$ would be this <a href="http://en.wikipedia.org/wiki/Catalan_number">Catalan Number</a>:\n$$C_n = \\dfrac{1}{n+1}{2n \\choose n}$$</p>\n\n<p>But I don\'t understand how I could come up with such a result by myself? Is there a method to find this result?</p>\n\n<p>Now, what if the order of sub-trees (which is left, which is right) is not considered? For example, from my point of view, I consider that these two trees are the same:</p>\n\n<pre><code>   /\\   /\\\n  /\\     /\\\n</code></pre>\n\n<p>Would it be possible to apply a similar method to count how many of these objects have exactly $n$ nodes?</p>\n', 'Tags': '<combinatorics><binary-trees><discrete-mathematics>', 'LastEditorUserId': '5', 'LastActivityDate': '2013-02-24T10:49:26.230', 'CommentCount': '2', 'AcceptedAnswerId': '372', 'CreationDate': '2012-03-14T13:57:03.527', 'Id': '368'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Suppose I have two strings. Call them $A$ and $B$. Neither string has any repeated characters.</p>\n\n<p>How can I find the shortest sequence of insert, move, and delete operation that turns $A$ into $B$, where:</p>\n\n<ul>\n<li><code>insert(char, offset)</code> inserts <code>char</code> at the given <code>offset</code> in the string</li>\n<li><code>move(from_offset, to_offset)</code> moves the character currently at offset <code>from_offset</code> to a new position so that it has offset <code>to_offset</code></li>\n<li><code>delete(offset)</code> deletes the character at <code>offset</code></li>\n</ul>\n\n<p>Example application: You do a database query and show the results on your website. Later, you rerun the database query and discover that the results have changed. You want to change what is on the page to match what is currently in the database using the minimum number of DOM operations. There are two reasons why you'd want the shortest sequence of operations. First, efficiency. When only a few records change, you want to make sure that you do $\\mathcal{O}(1)$ rather than $\\mathcal{O}(n)$ DOM operations, since they are expensive. Second, correctness. If an item moved from one position to another, you want to move the associated DOM nodes in a single operation, without destroying and recreating them. Otherwise you will lose focus state, the content of <code>&lt;input&gt;</code> elements, and so forth.</p>\n", 'ViewCount': '238', 'Title': 'Expressing an arbitrary permutation as a sequence of (insert, move, delete) operations', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-15T20:22:27.077', 'LastEditDate': '2012-05-15T20:22:27.077', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '330', 'Tags': '<algorithms><combinatorics><string-metrics>', 'CreationDate': '2012-03-21T03:25:44.267', 'Id': '576'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>A unipathic graph is a directed graph such that there is at most one simple path from any one vertex to any other vertex.</p>\n\n<p>Unipathic graphs can have cycles. For example, a doubly linked list (not a circular one!) is a unipathic graph; if the list has $n$ elements, the graph has $n-1$ cycles of length 2, for a total of $2(n-1)$.</p>\n\n<p>What is the maximum number of edges in a unipathic graph with $n$ vertices? An asymptotic bound would do (e.g. $O(n)$ or $\\Theta(n^2)$).</p>\n\n<p><sub>Inspired by <a href="http://cs.stackexchange.com/questions/625/find-shortest-paths-in-a-weighed-unipathic-graph">Find shortest paths in a weighed unipathic graph</a>; in <a href="http://cs.stackexchange.com/questions/625/find-shortest-paths-in-a-weighed-unipathic-graph/679#679">my proof</a>, I initially wanted to claim that the number of edges was $O(n)$ but then realized that bounding the number of cycles was sufficient.</sub></p>\n', 'ViewCount': '202', 'Title': 'How many edges can a unipathic graph have?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-23T12:33:19.637', 'LastEditDate': '2012-03-23T08:10:31.653', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '694', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<graphs><combinatorics>', 'CreationDate': '2012-03-23T00:57:51.913', 'Id': '680'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $\\Sigma$ be some finite set of characters of fixed size. Let $\\alpha$ be some string over $\\Sigma$. We say that a nonempty substring $\\beta$ of $\\alpha$ is a <em>repeat</em> if $\\beta = \\gamma \\gamma$ for some string $\\gamma$.</p>\n\n<p>Now, my question is whether the following holds:</p>\n\n<blockquote>\n  <p>For every $\\Sigma$, there exists some $n \\in \\mathbb{N}$ such that for every string $\\alpha$ over $\\Sigma$ of length at least $n$, $\\alpha$ contains at least one repeat.</p>\n</blockquote>\n\n<p>I\'ve checked this over the binary alphabet, and this is quite easy for that case, but an alphabet of size 3 is already quite a bit harder to check, amd I\'d like a proof for arbitrarily large grammars.</p>\n\n<p>If the above conjecture is true, then I can (almost) remove the demand for inserting empty strings <a href="http://cs.stackexchange.com/questions/666/is-there-a-string-stack-data-structure-that-supports-these-string-operations">in my other question</a>.</p>\n', 'ViewCount': '336', 'Title': 'Does every large enough string have repeats?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-25T15:29:39.443', 'LastEditDate': '2012-03-25T15:29:39.443', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '758', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '92', 'Tags': '<combinatorics><strings><word-combinatorics>', 'CreationDate': '2012-03-25T14:26:04.570', 'Id': '757'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1315', 'Title': 'Proving a binary tree has at most $\\lceil n/2 \\rceil$ leaves', 'LastEditDate': '2012-03-30T02:27:43.967', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '756', 'FavoriteCount': '3', 'Body': '<p>I\'m trying to prove that a <a href="http://en.wikipedia.org/wiki/Binary_tree">binary tree</a> with $n$ nodes has at most $\\left\\lceil \\frac{n}{2} \\right\\rceil$ leaves. How would I go about doing this with induction?</p>\n\n<p><em>For people who were following in the original question about heaps, it has been moved <a href="http://cs.stackexchange.com/questions/841/proving-a-binary-heap-has-lceil-n-2-rceil-leaves">here</a>.</em></p>\n', 'Tags': '<data-structures><binary-trees><combinatorics><graph-theory><proof-techniques>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-10-01T04:35:17.907', 'CommentCount': '7', 'AcceptedAnswerId': '810', 'CreationDate': '2012-03-26T21:51:56.127', 'Id': '805'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '399', 'Title': 'Number of words in the regular language $(00)^*$', 'LastEditDate': '2012-04-04T20:15:01.173', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '92', 'FavoriteCount': '2', 'Body': '<p><a href="http://en.wikipedia.org/wiki/Regular_language#The_number_of_words_in_a_regular_language">According to Wikipedia</a>, for any regular language $L$ there exist constants $\\lambda_1,\\ldots,\\lambda_k$ and polynomials $p_1(x),\\ldots,p_k(x)$ such that for every $n$ the number $s_L(n)$ of words of length $n$ in $L$ satisfies the equation </p>\n\n<p>$\\qquad \\displaystyle s_L(n)=p_1(n)\\lambda_1^n+\\dots+p_k(n)\\lambda_k^n$.</p>\n\n<p>The language $L =\\{ 0^{2n} \\mid n \\in\\mathbb{N} \\}$ is regular ($(00)^*$ matches it). $s_L(n) = 1$ iff n is even, and $s_L(n) = 0$ otherwise.</p>\n\n<p>However, I can not find the $\\lambda_i$ and $p_i$ (that have to exist by the above). As $s_L(n)$ has to be differentiable and is not constant, it must somehow behave like a wave, and I can\'t see how you can possibly do that with polynomials and exponential functions without ending up with an infinite number of summands like in a Taylor expansion. Can anyone enlighten me?</p>\n', 'Tags': '<formal-languages><regular-languages><combinatorics><word-combinatorics>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-04-15T14:41:18.683', 'CommentCount': '3', 'AcceptedAnswerId': '1040', 'CreationDate': '2012-04-04T15:53:43.390', 'Id': '1039'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '428', 'Title': 'Number of words of a given length in a regular language', 'LastEditDate': '2012-04-05T02:09:41.130', 'AnswerCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '39', 'FavoriteCount': '1', 'Body': '<p>Is there an algebraic characterization of the number of words of a given length in a regular language?</p>\n\n<p><a href="http://en.wikipedia.org/wiki/Regular_language#The_number_of_words_in_a_regular_language">Wikipedia</a> states a result somewhat imprecisely:</p>\n\n<blockquote>\n  <p>For any regular language $L$ there exist constants $\\lambda_1,\\,\\ldots,\\,\\lambda_k$ and polynomials $p_1(x),\\,\\ldots,\\,p_k(x)$\n  such that for every $n$ the number $s_L(n)$ of words of length $n$ in $L$ satisfies the equation\n  $s_L(n)=p_1(n)\\lambda_1^n+\\dotsb+p_k(n)\\lambda_k^n$.</p>\n</blockquote>\n\n<p>It\'s not stated what space the $\\lambda$\'s live in ($\\mathbb{C}$, I presume) and whether the function is required to have nonnegative integer values over all of $\\mathbb{N}$. I would like a precise statement, and a sketch or reference for the proof.</p>\n\n<p>Bonus question: is the converse true, i.e. given a function of this form, is there always a regular language whose number of words per length is equal to this function?</p>\n\n<p><sub> This question generalizes <a href="http://cs.stackexchange.com/questions/1039/question-about-the-number-of-words-in-a-regular-language">Question about the number of words in a regular language</a> </sub>  </p>\n', 'Tags': '<formal-languages><regular-languages><word-combinatorics>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-09-22T06:53:52.867', 'CommentCount': '7', 'AcceptedAnswerId': '14481', 'CreationDate': '2012-04-04T20:13:16.497', 'Id': '1045'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I want to count the number of strings $s$ over a finite alphabet $A$, that contain no repeats, and by that I mean for any substring $t$ of $s$, $1&lt; |t| &lt; |s|$, there is no disjoint copy of $t$ in $s$.  For exapmle, let $A=\\{a,b\\}$.  Then $aaa$ <em>is</em> one of the strings I want to count, since for the substring $aa$, there are no disjoint copies.  However, $abab$ contains such a repeat.</p>\n\n<p>If someone's already figured out a useful formula, please link.  Otherwise, I will refer back to this post in any article I write, if I use someone's answer.</p>\n\n<p>Here is another example.  Let's try to construct a long string over $\\{a,b\\}$, that contains no repeats:</p>\n\n<p>aaa (can't be a)  <br>\n&nbsp;&nbsp; aaab (a or b)  <br>\n&nbsp;&nbsp;&nbsp;&nbsp; aaabbb (can't be b) <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aaabbba (can't be b or a) <br>\n&nbsp;&nbsp; aaaba (can't be a or b)  <br></p>\n\n<p>If we built a tree, we could count the number of nodes, but I want a formula.</p>\n\n<p><strong>Edit:</strong>\nWell, it's not as daunting as I first thought if we convert this to a bin-choosing problem.  A set of strings of length k with at least one repeat is equal to the set that is the union of all permutations of the cartesian product:\n$A \\times A \\times \\cdots\\times A \\text{(k-4 times)} \\times R \\times R$ where $R$ is the required repeat.  I don't know if that's helpful, but it sounded pro :)  Anyway, let their be |A| bins, choose any two (even if the same one) to be the repeat, then choose $k-4$ more and multiply (the first 4 are already chosen, see?).  Now I just need to find that formula from discrete math.</p>\n", 'ViewCount': '172', 'Title': 'What is a formula for the number of strings with no repeats?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-19T15:45:22.733', 'LastEditDate': '2012-04-18T05:46:10.587', 'AnswerCount': '1', 'CommentCount': '17', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1118', 'Tags': '<formal-languages><combinatorics><strings><word-combinatorics>', 'CreationDate': '2012-04-17T01:49:50.663', 'Id': '1315'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose I have the given data set of length 11 of scores:</p>\n\n<pre><code>p=[2, 5, 1 ,2 ,4 ,1 ,6, 5, 2, 2, 1]\n</code></pre>\n\n<p>I want to select scores 6, 5, 5, 4, 2, 2 from the data set. How many ways are there?</p>\n\n<p>For the above example answer is: 6 ways</p>\n\n<pre><code>{p[1], p[2], p[4], p[5], p[7], p[8]}\n{p[10], p[2], p[4], p[5], p[7], p[8]}\n{p[1], p[2], p[10], p[5], p[7], p[8]}\n{p[9], p[2], p[4], p[5], p[7], p[8]}\n{p[1], p[2], p[9], p[5], p[7], p[8]}\n{p[10], p[2], p[9], p[5], p[7], p[8]}\n</code></pre>\n\n<p>How can I count the ways in general?</p>\n', 'ViewCount': '105', 'Title': 'How many possible ways are there?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-04-22T19:58:25.570', 'LastEditDate': '2012-04-22T17:27:54.210', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '1446', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1001', 'Tags': '<combinatorics>', 'CreationDate': '2012-04-22T16:58:52.453', 'Id': '1444'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>This question has been prompted by <a href="http://cs.stackexchange.com/questions/1626/efficient-data-structures-for-building-a-fast-spell-checker">Efficient data structures for building a fast spell checker</a>.</p>\n\n<p>Given two strings $u,v$, we say they are <em>$k$-close</em> if their <a href="http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance" rel="nofollow">Damerau\u2013Levenshtein distance</a>\xb9 is small, i.e. $\\operatorname{LD}(u,v) \\geq k$ for a fixed $k \\in \\mathbb{N}$. Informally, $\\operatorname{LD}(u,v)$ is the minimum number of deletion, insertion, substitution and (neighbour) swap operations needed to transform $u$ into $v$. It can be computed in $\\Theta(|u|\\cdot|v|)$ by dynamic programming. Note that $\\operatorname{LD}$ is a <a href="http://en.wikipedia.org/wiki/Metric_%28mathematics%29" rel="nofollow">metric</a>, that is in particular symmetric.</p>\n\n<p>The question of interest is:</p>\n\n<blockquote>\n  <p>Given a set $S$ of $n$ strings over $\\Sigma$ with lengths at most $m$, what is the cardinality of </p>\n  \n  <p>$\\qquad \\displaystyle S_k := \\{ w \\in \\Sigma^* \\mid \\exists v \\in S.\\ \\operatorname{LD}(v,w) \\leq k \\}$?</p>\n</blockquote>\n\n<p>As even two strings of the same length have different numbers of $k$-close strings\xb2 a general formula/approach may be hard (impossible?) to find. Therefore, we might have to compute the number explicitly for every given $S$, leading us to the main question:</p>\n\n<blockquote>\n  <p>What is the (time) complexity of finding the cardinality of the set $\\{w\\}_k$ for (arbitrary) $w \\in \\Sigma^*$?</p>\n</blockquote>\n\n<p>Note that the desired quantity is exponential in $|w|$, so explicit enumeration is not desirable. An efficient algorithm would be great.</p>\n\n<p>If it helps, it can be assumed that we have indeed a (large) set $S$ of strings, that is we solve the first highlighted question.</p>\n\n<hr>\n\n<ol>\n<li>Possible variants include using the <a href="http://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein distance</a> instead.</li>\n<li>Consider $aa$ and $ab$. The sets of $1$-close strings over $\\{a,b\\}$ are $\\{ a, aa,ab,ba,aaa,baa,aba,aab \\}$ (8 words) and $\\{a,b,aa,bb,ab,ba,aab,bab,abb,aba\\}$ (10 words), respectively .</li>\n</ol>\n', 'ViewCount': '268', 'Title': 'How many strings are close to a given set of strings?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-15T20:21:01.853', 'LastEditDate': '2012-05-15T20:21:01.853', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<algorithms><time-complexity><strings><word-combinatorics><string-metrics>', 'CreationDate': '2012-05-09T15:48:12.173', 'FavoriteCount': '1', 'Id': '1758'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>As a follow up to this <a href="http://cs.stackexchange.com/questions/368/counting-binary-trees">question</a> (the number of rooted binary trees of size n), how many possible binary trees can you have if the nodes are now labeled, so that abc is different than bac cab etc ? In other words, order matters. Certainly it will be much more than the Catalan number.</p>\n\n<p>What would the problem be if you have n-ary trees instead of binary ?  </p>\n\n<p>Are these known problems?  reference ?  </p>\n', 'ViewCount': '268', 'Title': 'Counting trees (order matters)', 'LastActivityDate': '2012-05-16T23:10:20.257', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '1876', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1419', 'Tags': '<binary-trees><combinatorics><trees>', 'CreationDate': '2012-05-09T21:20:54.163', 'Id': '1762'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '182', 'Title': 'How do I classify my emulator input optimization problem, and with which algorithm should I approach it?', 'LastEditDate': '2012-05-10T05:41:50.040', 'AnswerCount': '2', 'Score': '9', 'OwnerDisplayName': 'GManNickG', 'PostTypeId': '1', 'OwnerUserId': '1436', 'FavoriteCount': '1', 'Body': '<p>Due to the nature of the question, I have to include lots of background information (because my question is: how do I narrow this down?) That said, it can be summarized (to the best of my knowledge) as:</p>\n\n<p><strong>What methods exist to find local optimums on extremely large combinatorial search spaces?</strong></p>\n\n<h2>Background</h2>\n\n<p>In the tool-assisted superplay community we look to provide specially-crafted (not generated in real-time) input to a video game console or emulator in order to minimize some cost (usually time-to-completion). The way this is currently done is by playing the game frame-by-frame and specifying the input for each frame, often redoing parts of the run many times (for example, the <a href="http://tasvideos.org/2020M.html">recently published</a> run for <em>The Legend of Zelda: Ocarina of Time</em> has a total of 198,590 retries).</p>\n\n<p><strong>Making these runs obtain their goal usually comes down to two main factors: route-planning and traversal.</strong> The former is much more "creative" than the latter.</p>\n\n<p>Route-planning is determining which way the player should navigate overall to complete the game, and is often the most important part of the run. This is analogous to choosing which sorting method to use, for example. The best bubble sort in the world simply isn\'t going to outperform a quick-sort on 1 million elements.</p>\n\n<p>In the desire for perfection, however, traversal (how the route is carried out) is also a huge factor. Continuing the analogy, this is how the sorting algorithm is implemented. Some routes can\'t even be performed without very specific frames of input. This is the most tedious process of tool-assisting and is what makes the production of a completed run takes months or even years. It\'s not a <em>difficult</em> process (to a human) because it comes down to trying different variations of the same idea until one is deemed best, but humans can only try so many variations in their attention-span. The application of machines to this task seems proper here.</p>\n\n<p><strong>My goal now is to try to automate the traversal process in general for the Nintendo 64 system</strong>. The search space for this problem is <em>far</em> too large to attack with a brute-force approach. An n-frame segment of an N64 run has 2<sup>30n</sup> possible inputs, meaning a mere 30 frames of input (a second at 30FPS) has 2<sup>900</sup> possible inputs; it would be impossible to test these potential solutions, let alone those for a full two-hour run.</p>\n\n<p>However, I\'m not interested in attempting (or rather, am not going to even try to attempt) total global optimization of a full run. Rather, <strong>I would like to, given an initial input, approximate the <em>local</em> optimum for a particular <em>segment</em> of a run (or the nearest <em>n</em> local optimums, for a sort of semi-global optimization)</strong>. That is, given a route and an initial traversal of that route: search the neighbors of that traversal to minimize cost, but don\'t degenerate into trying all the cases that could solve the problem.</p>\n\n<p>My program should therefore take a starting state, an input stream, an evaluation function, and output the local optimum by minimizing the result of the evaluation.</p>\n\n<h2>Current State</h2>\n\n<p>Currently I have all the framework taken care of. This includes evaluating an input stream via manipulation of the emulator, setup and teardown, configuration, etc. And as a placeholder of sorts, the optimizer is a very basic genetic algorithm. It simply evaluates a population of input streams, stores/replaces the winner, and generates a new population by mutating the winner stream. This process continues until some arbitrary criteria is met, like time or generation number.</p>\n\n<p><strong>Note that the slowest part of this program will be, by far, the evaluation of an input stream</strong>. This is because this involves emulating the game for <em>n</em> frames. (If I had the time I\'d write my own emulator that provided hooks into this kind of stuff, but for now I\'m left with synthesizing messages and modifying memory for an existing emulator from another process.) On my main computer, which is fairly modern, evaluating 200 frames takes roughly 14 seconds. As such, I\'d prefer an algorithm (given the choice) that minimizes the number of function evaluations.</p>\n\n<p>I\'ve created a system in the framework that manages emulators concurrently. As such <strong>I can evaluate a number of streams at once</strong> with a linear performance scale, but practically speaking the number of running emulators can only be 8 to 32 (and 32 is really pushing it) before system performance deteriorates. This means (given the choice), an algorithm which can do processing while an evaluation is taking place would be highly beneficial, because the optimizer can do some heavy-lifting while it waits on an evaluation.</p>\n\n<p>As a test, my evaluation function (for the game <em>Banjo Kazooie</em>) was to sum, per frame, the distance from the player to a goal point. This meant the optimal solution was to get as close to that point as quickly as possible. Limiting mutation to the analog stick only, it took a day to get an <em>okay</em> solution. (This was before I implemented concurrency.)</p>\n\n<p>After adding concurrency, I enabled mutation of A button presses and did the same evaluation function at an area that required jumping. With 24 emulators running it took roughly 1 hour to reach the goal from an initially blank input stream, but would probably need to run for days to get to anything close to optimal.</p>\n\n<h2>Problem</h2>\n\n<p><strong>The issue I\'m facing is that I don\'t know enough about the mathematical optimization field to know how to properly model my optimization problem</strong>! I can roughly follow the conceptual idea of many algorithms as described on Wikipedia, for example, but I don\'t know how to categorize my problem or select the state-of-the-art algorithm for that category.</p>\n\n<p><strong>From what I can tell, I have a combinatorial problem with an extremely large neighborhood</strong>. On top of that, <strong>the evaluation function is extremely discontinuous, has no gradient, and has many plateaus</strong>. Also, there aren\'t many constraints, though I\'ll gladly add the ability to express them if it helps solve the problem; I would like to allow specifying that the Start button should not be used, for example, but this is not the general case.</p>\n\n<h2>Question</h2>\n\n<p><strong>So my question is: how do I model this? What kind of optimization problem am I trying to solve? Which algorithm am I suppose to use?</strong> I\'m not afraid of reading research papers so let me know what I should read!</p>\n\n<p>Intuitively, a genetic algorithm couldn\'t be the best, because it doesn\'t really seem to learn. For example, if pressing Start seems to <em>always</em> make the evaluation worse (because it pauses the game), there should be some sort of designer or brain that learns: "pressing Start at any point is useless." But even this goal isn\'t as trivial as it sounds, because sometimes pressing start <em>is</em> optimal, such as in so-called "pause backward-long-jumps" in <em>Super Mario 64</em>! Here the brain would have to learn a much more complex pattern: "pressing Start is useless except when the player is in this very specific state <em>and will continue with some combination of button presses</em>." </p>\n\n<p>It seems like I should (or the machine could learn to) represent input in some other fashion more suited to modification. Per-frame input seems too granular, because what\'s really needed are "actions", which may span several frames...yet many discoveries are made on a frame-by-frame basis, so I can\'t totally rule it out (the aforementioned pause backward-long-jump requires frame-level precision). It also seems like the fact that input is processed serially should be something that can be capitalized on, but I\'m not sure how.</p>\n\n<p><strong>Currently I\'m reading about (Reactive) Tabu Search, Very Large-scale Neighborhood Search, Teaching-learning-based Optimization, and Ant Colony Optimization.</strong></p>\n\n<p>Is this problem simply too hard to tackle with anything other than random genetic algorithms? Or is it actually a trivial problem that was solved long ago? Thanks for reading and thanks in advance for any responses.</p>\n', 'Tags': '<reference-request><machine-learning><combinatorics><optimization><search-problem>', 'LastEditorUserId': '1436', 'LastActivityDate': '2014-01-19T16:02:17.470', 'CommentCount': '2', 'AcceptedAnswerId': '2947', 'CreationDate': '2012-05-09T06:34:52.220', 'Id': '1774'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>Consider a board of $n$ x $n$ cells, where $n = 2k, k\u22652$. Each of the numbers from $S = \\left\\{1,...,\\frac{n^2}{2}\\right\\}$ is written to two cells so that each cell contains exactly one number.</p>\n\n<p>How can I show that $n$ cells $c_{i, j}$ can be chosen with one cell per row and one cell per column such that no pair of cells contains the same number.</p>\n\n<p>This was an example problem for an exam I'm studying for. I tried it now for several hours but I can't get it right. I think random permutations can help here but I am not sure.</p>\n", 'ViewCount': '148', 'Title': 'Extracting non-duplicate cells in a particular matrix with repeated entries', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-14T22:26:26.120', 'LastEditDate': '2012-05-13T08:48:33.960', 'AnswerCount': '2', 'CommentCount': '14', 'AcceptedAnswerId': '1817', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1393', 'Tags': '<combinatorics><probability-theory>', 'CreationDate': '2012-05-12T09:44:44.333', 'Id': '1803'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '2080', 'Title': 'dynamic programming exercise on cutting strings', 'LastEditDate': '2012-05-13T18:35:49.400', 'AnswerCount': '2', 'Score': '8', 'OwnerDisplayName': 'Mark', 'PostTypeId': '1', 'OwnerUserId': '1556', 'FavoriteCount': '1', 'Body': '<p>I have been working on the following problem from this <a href="http://www.cs.berkeley.edu/~vazirani/algorithms/chap6.pdf">book</a>.</p>\n\n<blockquote>\n  <p>A certain string-processing language offers a primitive operation which splits a string into two\n  pieces. Since this operation involves copying the original string, it takes n units of time for a\n  string of length n, regardless of the location of the cut. Suppose, now, that you want to break a\n  string into many pieces. The order in which the breaks are made can affect the total running\n  time. For example, if you want to cut a 20-character string at positions $3$ and $10$, then making\n  the first cut at position $3$ incurs a total cost of $20 + 17 = 37$, while doing position 10 first has a\n  better cost of $20 + 10 = 30$.</p>\n</blockquote>\n\n<p>I need a dynamic programming algorithm that given $m$ cuts, finds the minimum cost of cutting a string into $m +1$ pieces.</p>\n', 'Tags': '<algorithms><combinatorics><strings><dynamic-programming>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-08-31T14:56:19.823', 'CommentCount': '0', 'CreationDate': '2012-04-09T03:17:15.270', 'Id': '1822'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '677', 'Title': 'Recurrences and Generating Functions in Algorithms', 'LastEditDate': '2012-09-22T18:14:36.253', 'AnswerCount': '4', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '19', 'FavoriteCount': '5', 'Body': '<p>Combinatorics plays an important role in computer science. We frequently utilize combinatorial methods in both analysis as well as design in algorithms. For example one method for finding a $k$-vertex cover set in a graph might just inspect all $\\binom{n}{k}$ possible subsets. While the binomial functions grows exponentially, if $k$ is some fixed constant we end up with a polynomial time algorithm by asymptotic analysis.</p>\n\n<p>Often times real-life problems require more complex combinatorial mechanisms which we may define in terms of recurrences. One famous example is the <a href="http://en.wikipedia.org/wiki/Fibonacci_number" rel="nofollow">fibonacci sequence</a> (naively) defined as:</p>\n\n<p>$f(n) = \\begin{cases}\n   1 &amp; \\text{if } n = 1 \\\\\n   0 &amp; \\text{if } n = 0 \\\\\n   f(n-1) + f(n-2) &amp; \\text{otherwise}\n  \\end{cases}\n$</p>\n\n<p>Now computing the value of the $n$th term grows exponentially using this recurrence, but thanks to dynamic programming, we may compute it in linear time. Now, not all recurrences lend themselves to DP (off hand, the factorial function), but it is a potentially exploitable property when defining some count as a recurrence rather than a generating function.</p>\n\n<p>Generating functions are an elegant way to formalize some count for a given structure. Perhaps the most famous is the binomial generating function defined as:</p>\n\n<p>$(x + y)^\\alpha = \\sum_{k=0}^\\infty \\binom{\\alpha}{k}x^{\\alpha - k}y^k$</p>\n\n<p>Luckily this has a closed form solution. Not all generating functions permit such a compact description. </p>\n\n<blockquote>\n  <p>Now my question is this: how often are generating functions used in <em>design</em> of algorithms? It is easy to see how they may be exploited to understand the rate of growth required by an algorithm via analysis, but what can they tell us about a problem when creating a method to solve some problem?</p>\n</blockquote>\n\n<p>If many times the same count may be reformulated as a recurrence it may lend itself to dynamic programming, but again perhaps the same generating function has a closed form. So it is not so evenly cut.</p>\n', 'Tags': '<algorithms><algorithm-analysis><combinatorics>', 'LastEditorUserId': '699', 'LastActivityDate': '2013-01-24T03:59:38.067', 'CommentCount': '9', 'AcceptedAnswerId': '1937', 'CreationDate': '2012-05-18T17:13:56.063', 'Id': '1913'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>There is a family of random graphs $G(n, p)$ with $n$ nodes (<a href="https://en.wikipedia.org/wiki/Random_graph">due to Gilbert</a>). Each possible edge is independently inserted into $G(n, p)$ with probability $p$. Let $X_k$ be the number of cliques of size $k$ in $G(n, p)$.</p>\n\n<p>I know that $\\mathbb{E}(X_k)=\\tbinom{n}{k}\\cdot p^{\\tbinom{k}{2}}$, but how do I prove it?</p>\n\n<p>How to show that $\\mathbb{E}(X_{\\log_2n})\\ge1$ for $n\\to\\infty$? And how to show that $\\mathbb{E}(X_{c\\cdot\\log_2n}) \\to 0$ for $n\\to\\infty$ and a fixed, arbitrary constant $c&gt;1$?</p>\n', 'ViewCount': '297', 'Title': 'Number of clique in random graphs', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-28T09:46:02.827', 'LastEditDate': '2012-05-28T09:46:02.827', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '2119', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1393', 'Tags': '<graph-theory><combinatorics><probability-theory><random-graphs>', 'CreationDate': '2012-05-27T23:41:29.403', 'Id': '2118'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '535', 'Title': 'How can I prove that a complete binary tree has $\\lceil n/2 \\rceil$ leaves?', 'LastEditDate': '2012-06-02T00:54:30.613', 'AnswerCount': '2', 'Score': '3', 'OwnerDisplayName': 'Luc Peetersen', 'PostTypeId': '1', 'OwnerUserId': '1722', 'FavoriteCount': '2', 'Body': "<p>Given a complete binary tree with $n$ nodes. I'm trying to prove that a complete binary tree has exactly $\\lceil n/2 \\rceil$ leaves.\nI think I can do this by induction.</p>\n\n<p>For $h(t)=0$, the tree is empty. So there are no leaves and the claim holds for an empty tree.</p>\n\n<p>For $h(t)=1$, the tree has 1 node, that also is a leaf, so the claim holds.\nHere I'm stuck, I don't know what to choose as induction hypothesis and how to do the induction step.</p>\n", 'Tags': '<data-structures><graph-theory><proof-techniques><combinatorics><binary-trees>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-06-02T05:41:15.503', 'CommentCount': '6', 'AcceptedAnswerId': '2196', 'CreationDate': '2012-06-01T21:08:05.543', 'Id': '2193'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '276', 'Title': 'Generating number of possibilites of popping two stacks to two other stacks', 'LastEditDate': '2012-06-13T15:33:40.447', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1784', 'FavoriteCount': '1', 'Body': '<p>Context: I\'m working on <a href="http://stackoverflow.com/questions/10875675/how-to-find-out-all-the-popping-out-possibilities-of-two-stacks">this problem</a>:</p>\n\n<blockquote>\n  <p>There are two stacks here:</p>\n\n<pre><code>A: 1,2,3,4 &lt;- Stack Top\n  B: 5,6,7,8\n</code></pre>\n  \n  <p>A and B will pop out to other two stacks: C and D. For example: </p>\n\n<pre><code> pop(A),push(C),pop(B),push(D).\n</code></pre>\n  \n  <p>If an item have been popped out , it must be pushed to C or D immediately.</p>\n</blockquote>\n\n<p>The goal is to enumerate all possible stack contents of C and D after moving all elements.</p>\n\n<p>More elaborately, the problem is this: If you have two source stacks with $n$ unique elements (all are unique, not just per stack) and two destination stacks and you pop everything off each source stack to each destination stack, generate all unique destination stacks - call this $S$.</p>\n\n<p>The stack part is irrelevant, mostly, other than it enforces a partial order on the result. If we have two source stacks and one destination stack, this is the same as generating all permutations without repetitions for a set of $2N$ elements with $N$ \'A\' elements and $N$ \'B\' elements. Call this $O$.</p>\n\n<p>Thus</p>\n\n<p>$\\qquad \\displaystyle |O| = (2n)!/(n!)^2$</p>\n\n<p>Now observe all possible bit sequences of length 2n (bit 0 representing popping source stack A/B and bit 1 pushing to destination stack C/D), call this B. |B|=22n. We can surely generate B and check if it has the correct number of pops from each destination stack to generate |S|. It\'s a little faster to recursively generate these to ensure their validity. It\'s even faster still to generate B and O and then simulate, but it still has the issue of needing to check for duplicates.</p>\n\n<p>My question</p>\n\n<p>Is there a more efficient way to generate these?</p>\n\n<p>Through simulation I found the result follows <a href="http://oeis.org/A084773" rel="nofollow">this sequence</a> which is related to Delannoy Numbers, which I know very little about if this suggests anything.</p>\n\n<p>Here is my Python code</p>\n\n<pre><code>def all_subsets(list):\n    if len(list)==0:\n        return [set()]\n    subsets = all_subsets(list[1:])\n\n    return [subset.union(set([list[0]])) for subset in subsets] + subsets\n\ndef result_sequences(perms):\n    for perm in perms:\n        whole_s = range(len(perm))\n        whole_set = set(whole_s)\n        for send_to_c in all_subsets(whole_s):\n            send_to_d = whole_set-set(send_to_c)\n            yield [perm,send_to_c,send_to_d]\n\nn = 4\nperms_ = list(unique_permutations([n,n],[\'a\',\'b\'])) # number of unique sequences                                                                                                               \nresult = list(result_sequences(perms_))\n</code></pre>\n', 'Tags': '<algorithms><combinatorics><efficiency>', 'LastEditorUserId': '1784', 'LastActivityDate': '2012-06-14T22:35:54.300', 'CommentCount': '2', 'AcceptedAnswerId': '2305', 'CreationDate': '2012-06-07T16:36:42.153', 'Id': '2257'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '86', 'Title': 'Probabilities of duplicate mail detection by comparing notes among servers', 'LastEditDate': '2012-06-07T21:50:16.117', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1788', 'FavoriteCount': '1', 'Body': '<p>I have the following problem:</p>\n\n<blockquote>\n  <p>We want to implement a filtering strategy in e-mail servers to reduce the number of spam messages. Each server will have a buffer, and before sending an e-mail, it checks whether there is a duplicate of the same message in its own buffer and contacts k distinct neighboring servers at random to check whether the duplicate is in another buffer. In case any duplicate message is detected, it will be deleted as spam, otherwise it will be sent after all negative replies are received.</p>\n  \n  <p>Let us assume that there are N mail servers, and that a spammer sends M copies of each spam mail. We assume that all copies are sent simultaneously and that each mail is routed to a mail server randomly.</p>\n</blockquote>\n\n<p>Given M, N and k I need to find out the probabilities that no spam message is deleted (i.e. no server detects spam), all spam messages are deleted (all servers detect spam) and spam messages are deleted from at at least one server.</p>\n\n<p>So far, I have used combinations without repetition to find out the cases that need to be taken into account for an M and N. Now I need to find out the probability that one server receives at least two copies of a message, but I am at complete loss. Could you please provide some insight into the problem?</p>\n', 'Tags': '<combinatorics><probability-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-08T12:04:59.917', 'CommentCount': '0', 'AcceptedAnswerId': '2266', 'CreationDate': '2012-06-07T21:27:13.443', 'Id': '2263'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I need an algorithm to calculate the number of ways of expressing a number N as sum of numbers inside the interval [a, b] </p>\n', 'ViewCount': '135', 'Title': 'Numbers of ways of expressing the sum of a number between [a,b]', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-08T12:27:19.363', 'LastEditDate': '2012-06-08T12:17:33.120', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'vikt0r', 'PostTypeId': '1', 'Tags': '<algorithms><combinatorics>', 'CreationDate': '2012-06-07T05:43:12.957', 'Id': '2273'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have one puzzle whose answer I have boiled down to finding the total number and which type of permutation they are.</p>\n\n<p>For example if the string is of length ten as $w = aabbbaabba$, the total number of permutations will be </p>\n\n<p>$\\qquad \\displaystyle \\frac{|w|}{|w|_a! \\cdot |w|_b!} = \\frac{10!}{5!\\cdot 5!}$</p>\n\n<p>Now had the string been of distinct characters, say $w'=abcdefghij$, I would have found the permutations by this algorithm : </p>\n\n<pre><code>for i = 1 to |w|\n  w = rotate(w)\nw = rotate(w)\nreturn w.head + rotate(w.tail)\n</code></pre>\n\n<p>Can some one throw new ideas on this - how to find the number of permutations for a string having repeated characters? Is there any other mathematical/scientific name of for what I am trying to do?</p>\n", 'ViewCount': '1544', 'Title': 'Finding the number of distinct permutations of length N with n different symbols', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-24T11:51:51.870', 'LastEditDate': '2012-06-22T09:14:31.023', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'softy', 'PostTypeId': '1', 'OwnerUserId': '1942', 'Tags': '<algorithms><combinatorics><strings><word-combinatorics>', 'CreationDate': '2012-06-21T16:17:23.717', 'Id': '2443'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm writing a small function to alter a graph in a certain way and was wondering if there is a formal name for the operation.  The operation takes two distinct edges, injects a new node between the existing nodes of each edge and then adds an edge between the two new nodes.  For example:</p>\n\n<pre><code>add new nodes a and b to the graph\nlet edge1 = (x,y), let edge2 = (u,v)\n\ndelete edge (x,y)\ncreate edges (x,a), (a,y)\n\ndelete edge(u,v)\ncreate edges(u,b), (b,v)\n\ncreate edge (a,b)\n</code></pre>\n", 'ViewCount': '357', 'Title': 'Is there a formal name for this graph operation?', 'LastEditorUserId': '41', 'LastActivityDate': '2013-08-19T11:01:51.283', 'LastEditDate': '2013-07-20T09:19:50.287', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1989', 'Tags': '<graph-theory><terminology><combinatorics>', 'CreationDate': '2012-06-27T18:48:30.197', 'Id': '2517'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I know the answer <em>without</em> nesting limit is the Catalan number. My question is, specifically, is there a recurrence relation that gives the number of expression containing $n$ pairs of matching brackets such that no more than $l$ open brackets are not closed at any given point?</p>\n\n<p>For instance, for $n=3$ and $l=2$ the answer is $4$. All possible combinations are $(())()$, $()(())$, $()()()$, $(()())$. We cannot have $((()))$ since there are three open brackets that are not closed at the middle.</p>\n', 'ViewCount': '182', 'Title': 'What is the number of expressions containing n pairs of matching brackets with nesting limit?', 'LastEditorUserId': '1718', 'LastActivityDate': '2013-01-02T14:13:08.157', 'LastEditDate': '2012-06-28T19:07:37.053', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1718', 'Tags': '<formal-languages><combinatorics><recurrence-relation><word-combinatorics>', 'CreationDate': '2012-06-28T17:42:20.740', 'Id': '2532'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '2349', 'Title': 'Prove that every two longest paths have at least one vertex in common', 'LastEditDate': '2012-07-17T06:12:37.340', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '778', 'FavoriteCount': '1', 'Body': '<p>If a graph $G$ is connected and has no path with a length greater than $k$, prove that every two paths in $G$ of length $k$ have at least one vertex in common.  </p>\n\n<p>I think that that common vertex should be in the middle of both the paths. Because if this is not the case then we can have a path of length $&gt;k$. Am I right?</p>\n', 'Tags': '<graph-theory><graphs><combinatorics>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-17T06:12:37.340', 'CommentCount': '5', 'AcceptedAnswerId': '2622', 'CreationDate': '2012-07-04T16:17:48.280', 'Id': '2615'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<h2>Context</h2>\n\n<p>If you have to pay an amount of money at a store and have a limited collection of payment items (i.e. coins and banknotes) -- let\'s for simplicity assume there are only coins -- a trivial algorithm is to always greedily pick the biggest coin that is smaller or equal to the remaining value you have to pay. Another is to first pick the next bigger coin, before trying smaller ones. Since you are allowed to pay <em>more</em> than required (and will receive change by the cashier) these algorithms always works, if you have enough money.</p>\n\n<h2>Problem formulation</h2>\n\n<p>However, I pay differently (see below), and while trying to formalise (and perhaps improve) the algorithm that my brain does all by itself, I found that I had trouble to come up with a sound <strong>formal definition of the problem</strong>, not an algorithm to solve it.</p>\n\n<h3>Procedure</h3>\n\n<p>I always try to get rid of as many coins as possible, while assuming the cashier is always forced to return the smallest possible number of coins (supported by the respective currency) to express the change, and has infinitely many coins of each available value.</p>\n\n<h3>Example</h3>\n\n<p>For example, assume we have a currency with $1\\cdot 10^k, 2 \\cdot 10^k, 5 \\cdot 10^k$ coins for all natural $k$ including $0$ (e.g. Euro-cent, considering a $1$ Euro coin as a $100$ cent coin, and a 10 Euro note as a 1000 cent coin). Assume we have to pay $61$, and have the coins $(1,20,20,100)$. The greedy algorithm, would simply pay the $100$ coin and end up with $(1,2,2,5,10,20,20,20)$, while I would pay $(1,20,100)$ and end up with $(10,20,50)$, which looks much better in my wallet.</p>\n\n<h2>Approach</h2>\n\n<p>My first attempt to define the criteria for a good algorithm was this: <em>Minimise the total number of coins you end up after paying</em>. However, this doesn\'t work, because the optimal algorithm would be to simply hand over <em>all money</em> in your wallet to the cashier and have them minimise the number of coins (by definition they are forced, and in reality, they usually do). This is obviously not something that would be considered a good payment algorithm in reality. If I buy some bread at a bakery and empty my entire wallet (paying more by orders of magnitude), the clerk would have all legitimation to give me funny looks.</p>\n\n<h3>Let\'s try again</h3>\n\n<p>I thought I could fix this by using a minimal set of coins that would satisfy the required sum of money, i.e. if you remove any single coin, you end up with less money than you have to pay.<br>\nThis clearly doesn\'t work, because I want to use small coins (e.g. $1$) like in the example above to prevent the cashier from splitting up quantities that can <em>almost</em> be paid with a single coin (e.g. $50$) with a whole bunch of coins (e.g. $(2,2,5,20,20)$).</p>\n\n<p>My last attempt was to say, <em>the <strong>largest</strong> coin in the collection of payment is required to contribute the required sum</em>. So, if I have to pay $10$, it would be admissible (though, useless) to pay with the coins $(5,10)$ but not the coins $(5,5,10)$.</p>\n\n<p>I don\'t think this works, because I should be able to pay $1$ with $(2,2,2)$ in order to get a $5$ back (but I\'m not sure if all cashiers would "support" such a thing).</p>\n\n<h2>Question</h2>\n\n<p>What would be a formal definition for evaluating the performance of a given paying algorithm, according to the previous informal characterisation?</p>\n\n<hr>\n\n<hr>\n\n<h3>Note</h3>\n\n<p>I would refrain from including constraints such as "you shouldn\'t try to buy a car with pennies" as an algorithm that exhibits such behaviour is irrelevant in practice (more precisely, no algorithm will get the chance to exhibit that behaviour in practice). It <em>cannot</em> be formalised at which amount the payment becomes "ridiculous", as it depends on the cashier\'s mood at which point they will reject small change. Also, the amount a cashier will allow you to "overshoot" is subjective. As I said, I would consider it okay to pay a 1\u20ac article with three 2\u20ac coins (thus, overshooting by factor five). Some cashiers will understand and hand me a 5\u20ac note back and some will not and return me my two 2\u20ac coins and one 1\u20ac coin with a puzzled face.</p>\n\n<p>If you start to take <em>such</em> things into account, you will have to take into account whether there is a queue behind you, or how well you will perform in the future (with possibly larger queues) if you take some time now to get rid of small coins. You will need a statistical model for queue lengths at given stores and an estimate of how long your algorithm will take to find the optimal and to find a close-to-optimal solution. You see, it gets overly complicated quite easily.</p>\n', 'ViewCount': '131', 'Title': 'How to formalise efficient payment with a collection of coins in a wallet?', 'LastEditorUserId': '26', 'LastActivityDate': '2012-07-13T21:17:41.933', 'LastEditDate': '2012-07-13T21:17:41.933', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '26', 'Tags': '<combinatorics>', 'CreationDate': '2012-07-13T14:13:25.790', 'Id': '2725'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Mark lives in a tiny country populated by people who tend to over-think things. One day, the king of the country decides to redesign the country's currency to make giving change more efficient. The king wants to minimize the expected number of coins it takes to exactly pay any amount up to (but not including) the amount of the smallest paper bill.</p>\n\n<p>Suppose that the smallest unit of currency is the Coin. The smallest paper bill in the kingdom is worth $n$ Coins. The king decides that there should not be more than $m$ different coin denominations in circulation. The problem, then, is to find a $m$-set $\\{d_1, d_2, ..., d_m\\}$ of integers from $\\{1, 2, ..., n - 1\\}$ which minimizes $\\frac{1}{n-1}\\sum_{i = 1}^{n-1}{c_1(i) + c_2(i) + ... + c_m(i)}$ subject to $c_1(i)d_1 + c_2(i)d_2 + ... c_m(i)d_m = i$.</p>\n\n<p>For instance, take the standard USD and its coin denominations of $\\{1, 5, 10, 25, 50\\}$. Here, the smallest paper bill is worth 100 of the smallest coin. It takes 4 coins to make 46 cents using this currency; we have $c_1(46) = 1, c_2(46) = 0, c_3(46) = 2, c_4(46) = 1, c_5(46) = 0$. However, if we had coin denominations of $\\{1, 15, 30\\}$, it would take only 3 coins: $c_1(46) = 1, c_2(46) = 1, c_3(46) = 1$. Which of these denomination sets minimizes the average number of coins to make any sum up to and including 99 cents?</p>\n\n<p>More generally, given $n$ and $m$, how might one algorithmically determine the optimal set? Clearly, one might enumerate all viable $m$-subsets and compute the average number of coins it takes to make sums from 1 to $n - 1$, keeping track of the optimal one along the way. Since there are around $C(n - 1, m)$ $m$-subsets (not all of which are viable, but still), this would not be terribly efficient. Can you do better than that?</p>\n", 'ViewCount': '1098', 'Title': 'Algorithm to find optimal currency denominations', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-18T01:16:54.940', 'LastEditDate': '2012-07-18T01:01:59.327', 'AnswerCount': '2', 'CommentCount': '7', 'AcceptedAnswerId': '2806', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '69', 'Tags': '<algorithms><optimization><combinatorics><integers>', 'CreationDate': '2012-07-13T18:00:47.967', 'Id': '2734'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Is there any formal definition about the average height of a binary tree?</p>\n\n<p>I have a tutorial question about finding the average height of a binary tree using the following two methods:</p>\n\n<ol>\n<li><p>The natural solution might be to take the average length of all possible\npaths from the root to a leaf, that is</p>\n\n<p>$\\qquad \\displaystyle \\operatorname{avh}_1(T) = \\frac{1}{\\text{# leaves in } T} \\cdot \\sum_{v \\text{ leaf of } T} \\operatorname{depth}(v)$.</p></li>\n<li><p>Another option is to define it recursively, that is the average height for a node is the average over the average heights of the subtrees plus\none, that is </p>\n\n<p>$\\qquad \\displaystyle \\operatorname{avh}_2(N(l,r)) = \\frac{\\operatorname{avh}_2(l) + \\operatorname{avh}_2(r)}{2} + 1$</p>\n\n<p>with $\\operatorname{avh}_2(l) = 1$ for leafs $l$ and $\\operatorname{avh}_2(\\_) = 0$ for empty slots.</p></li>\n</ol>\n\n<p>Based on my current understanding, for example the average height of the tree $T$</p>\n\n<pre><code>    1    \n   / \\\n  2   3\n /\n4\n</code></pre>\n\n<p>is $\\operatorname{avh}_2(T) = 1.25$ by the second method, that is using recursion.</p>\n\n<p>However, I still don't quite understand how to do the first one. $\\operatorname{avh}_1(T) = (1+2)/2=1.5$ is not correct.</p>\n", 'ViewCount': '825', 'Title': 'What is the average height of a binary tree?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-22T09:42:41.200', 'LastEditDate': '2012-07-22T09:42:37.330', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '2859', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1895', 'Tags': '<graph-theory><terminology><combinatorics><binary-trees>', 'CreationDate': '2012-07-16T13:55:13.860', 'Id': '2762'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In computer science, we have often have to solve <a href="http://en.wikipedia.org/wiki/Recurrence_relation">recurrence relations</a>, that is find a <strong>closed form</strong> for a recursively defined sequence of numbers. When considering runtimes, we are often interested mainly in the sequence\'s <a href="http://en.wikipedia.org/wiki/Asymptotic_analysis"><strong>asymptotic</strong> growth</a>.</p>\n\n<p>Examples are </p>\n\n<ol>\n<li><p>The runtime of a tail-recursive function stepping downwards to $0$ from $n$ whose body takes time $f(n)$:</p>\n\n<p>$\\qquad \\begin{align}\n  T(0) &amp;= 0 \\\\\n  T(n+1) &amp;= T(n) + f(n)    \n \\end{align}$</p></li>\n<li><p>The <a href="http://en.wikipedia.org/wiki/Fibonacci_sequence">Fibonacci sequence</a>:</p>\n\n<p>$\\qquad \\begin{align}\n  F_0 &amp;= 0 \\\\\n  F_1 &amp;= 1 \\\\\n  F_{n+2} &amp;= F_n + F_{n+1}    \n \\end{align}$</p></li>\n<li><p>The number of <a href="http://en.wikipedia.org/wiki/Dyck_language">Dyck words</a> with $n$ parenthesis pairs:</p>\n\n<p>$\\qquad\\begin{align}\n    C_0 &amp;= 1 \\\\ \n    C_{n+1}&amp;=\\sum_{i=0}^{n}C_i\\,C_{n-i}\n  \\end{align}$</p></li>\n<li><p>The mergesort runtime recurrence on lists of length $n$:</p>\n\n<p>$\\qquad \\begin{align}\n  T(1) &amp;= T(0) = 0 \\\\\n  T(n) &amp;= T(\\lfloor n/2\\rfloor) + T(\\lceil n/2\\rceil) + n-1\n \\end{align}$</p></li>\n</ol>\n\n<p>What are methods to solve recurrence relations? We are looking for</p>\n\n<ul>\n<li>general methods and</li>\n<li>methods for a significant subclass</li>\n</ul>\n\n<p>as well as</p>\n\n<ul>\n<li>methods that yield precise solutions and</li>\n<li>methods that provide (bounds on) asymptotic growth.</li>\n</ul>\n\n<p><sup>This is supposed to become a reference question. Please post one answer per method and provide a general description as well as an illustrative example.</sup></p>\n', 'ViewCount': '1536', 'Title': 'Solving or approximating recurrence relations for sequences of numbers', 'LastEditorUserId': '6716', 'LastActivityDate': '2014-04-24T15:41:56.573', 'LastEditDate': '2013-06-06T16:02:38.220', 'AnswerCount': '8', 'CommentCount': '1', 'Score': '27', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<asymptotics><proof-techniques><combinatorics><recurrence-relation><reference-question>', 'CreationDate': '2012-07-17T18:31:38.607', 'FavoriteCount': '27', 'Id': '2789'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1705', 'Title': 'Generalised 3SUM (k-SUM) problem?', 'LastEditDate': '2012-08-02T02:55:51.060', 'AnswerCount': '3', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '26', 'FavoriteCount': '7', 'Body': '<p>The <a href="http://en.wikipedia.org/wiki/3SUM">3SUM</a> problem tries to identify 3 integers $a,b,c$ from a set $S$ of size $n$ such that $a + b + c = 0$.</p>\n\n<p>It is conjectured that there is not better solution than quadratic, i.e. $\\mathcal{o}(n^2)$. Or to put it differently: $\\mathcal{o}(n \\log(n) + n^2)$.</p>\n\n<p>So I was wondering if this would apply to the generalised problem: Find integers $a_i$ for $i \\in [1..k]$ in a set $S$ of size $n$ such that $\\sum_{i \\in [1..k]} a_i = 0$.</p>\n\n<p>I think you can do this in $\\mathcal{o}(n \\log(n) + n^{k-1})$ for $k \\geq 2$ (it\'s trivial to generalise the simple $k=3$ algorithm).<br>\nBut are there better algorithms for other values of $k$?</p>\n', 'Tags': '<complexity-theory><combinatorics><complexity-classes>', 'LastEditorUserId': '26', 'LastActivityDate': '2012-08-02T05:04:34.593', 'CommentCount': '0', 'AcceptedAnswerId': '2995', 'CreationDate': '2012-07-31T21:45:29.147', 'Id': '2973'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Call a family of sets $\\mathcal{F} = \\{S_1, \\dotsc, S_k\\}$ "diverse" if each set $S_i \\in \\mathcal{F}$ has at least one unique element.  What are possible approaches for finding the largest diverse set $S$ in a family of sets $\\mathcal{F}$?</p>\n\n<p>One approach is to solve a modified set packing problem.  Suppose $\\mathcal{F}=\\{S_1,\\dotsc,S_k\\}$. Let $K$ be a subset of elements, $K \\subset \\bigcup S_i$, and let $\\mathcal{F}_{-K}=\\{S_1 \\setminus K,\\dotsc, S_k \\setminus K\\}$.  Then the maximal diverse set $S$ corresponds to the largest maximal set packing obtained from $\\mathcal{F}_{-L}$ where $L$ is the set of all non-unique elements in $\\mathcal{F}$.</p>\n\n<p>But, what\'s a good heuristic for choosing $K$?  Or are there better approaches altogether?</p>\n', 'ViewCount': '158', 'Title': 'Problem similar to set packing', 'LastEditorUserId': '19', 'LastActivityDate': '2012-09-04T04:54:39.640', 'LastEditDate': '2012-08-10T18:01:45.850', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1937', 'Tags': '<algorithms><combinatorics><heuristics>', 'CreationDate': '2012-08-05T21:50:03.113', 'FavoriteCount': '2', 'Id': '3052'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '856', 'Title': 'Pizza commercial claim of 34 million combinations', 'LastEditDate': '2012-08-13T14:21:23.170', 'AnswerCount': '1', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '2474', 'FavoriteCount': '1', 'Body': '<p>A pizza commercial claims that you can combine their ingredients to 34 million different combinations. I didn\'t believe it, so I dusted off my rusty combinatorics skills and tried to figure it out.  Here\'s what I have so far:\nFrom the online ordering site I got the choices</p>\n\n<ol>\n<li>crust (4 types, choose 1)</li>\n<li>size  (4 types, choose 1) some crusts are limited to a certain size - not accounting for that, but would like to.</li>\n<li>cheese (5 types, choose 1)</li>\n<li>sauce  (4 types, choose 1)</li>\n<li>sauce level (3 types, choose 1)</li>\n<li>meats (9 types, choose up to 9)</li>\n<li>nonmeats (15 types, choose up to 15)</li>\n</ol>\n\n<p>So I figured this was a combination problem (order is not important) and not an n choose k problem, null is allowed for anything but crust and crust, size, cheese, sauce and sauce level would all be chose only one. Meats and non-meats $2^?$? So that would be:</p>\n\n<ol>\n<li>crust  $\\binom{4}{1}=4$</li>\n<li>size  $\\binom{4}{1}=4$</li>\n<li>cheese $\\binom{5}{1}=5$</li>\n<li>sauce  $\\binom{4}{1}=4$</li>\n<li>sauce level $\\binom{3}{1}=3$</li>\n<li>meats $2^9 = 512$</li>\n<li>non-meats $2^{15} = 32768$</li>\n</ol>\n\n<p>At this point I\'m stuck, how do I combine these to arrive at the total number of possible combinations?</p>\n\n<p>I found this <a href="http://mdm4u1.wetpaint.com/page/5.3+Problem+Solving+With+Combinations+%28Part+1%29">site</a> helpful.</p>\n\n<p><strong>ETA:</strong>\nIf I don\'t account for the limitations on crust size - some crusts are only available in certain sizes - there are over 16 billion; 16,106,127,360 combinations available, so they were off by quite a bit.</p>\n', 'Tags': '<combinatorics><discrete-mathematics>', 'LastEditorUserId': '2474', 'LastActivityDate': '2012-08-13T14:21:23.170', 'CommentCount': '2', 'AcceptedAnswerId': '3142', 'CreationDate': '2012-08-12T21:39:55.657', 'Id': '3141'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let Alice and Bob be two users chosen uniformly at random from a social network (e.g. Facebook). What is the probability that they are friends assuming that they share $k$ mutual friends?</p>\n\n<p>I am interested both in the experimental values (or estimates) from currently existing social networks (e.g. Facebook) and values predicted by random graph models for these social networks.</p>\n', 'ViewCount': '193', 'Title': 'What is the probability of friendship conditioned on the number of mutual friends', 'LastActivityDate': '2012-09-17T07:17:51.607', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<graph-theory><combinatorics><social-networks><random-graphs>', 'CreationDate': '2012-09-16T00:29:01.343', 'Id': '4571'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '122', 'Title': 'How many possible assignments does  a CNF sentence have?', 'LastEditDate': '2012-09-25T15:58:33.800', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2962', 'FavoriteCount': '0', 'Body': u"<p>I'm having some trouble understanding the following:</p>\n\n<p>When we look at satisfiability problems in conjunctive normal form, an underconstrained problem is one with relatively few clauses constraining the variables. For eg. here is a randomly generated 3-CNF sentence with five symbols and five clauses. (Each clause contains 3 randomly selected distinct symbols, each of which is negated with 50% probability.)</p>\n\n<pre><code>(\xacD \u2228 \xacB \u2228 C) \u2227 (B \u2228 \xacA \u2228 \xacC) \u2227 (\xacC \u2228 \xacB \u2228 E) \u2227 (E \u2228 \xacD \u2228 B) \u2227 (B \u2228 E \u2228 \xacC)\n</code></pre>\n\n<p>16 of the 32 possible assignments are models of this sentence, so, on an average, it would take just 2 random guesses to find the model.</p>\n\n<p>I don't understand the last line- saying that there are 32 possible assignments. How is it 32? And how are only 16 of them models of the sentence? Thanks.</p>\n", 'Tags': '<logic><combinatorics><satisfiability>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-25T15:58:33.800', 'CommentCount': '0', 'AcceptedAnswerId': '4730', 'CreationDate': '2012-09-25T13:27:01.757', 'Id': '4729'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am trying to derive the <a href="http://alexandria.tue.nl/repository/freearticles/597601.pdf">classic paper</a> in the title only by elementary means (no generating functions, no complex analysis, no Fourier analysis) although with much less precision. In short, I "only" want to prove that the average height $h_n$ of a tree with $n$ nodes (that is, the maximum number of nodes from the root to a leaf) satisfies $h_n \\sim \\sqrt{\\pi n}$.</p>\n\n<p>The outline is as follows. Let $A_{nh}$ be the number of trees with height less than or equal to $h$ (with the convention $A_{nh} = A_{nn}$ for all $h \\geqslant n$) and $B_{nh}$ the number of trees of $n$ nodes with height greater than or equal to $h+1$ (that is, $B_{nh} = A_{nn} - A_{nh}$). Then $h_n = S_n/A_{nn}$, where $S_n$ is the finite sum\n$$\nS_n = \\sum_{h \\geqslant 1} h(A_{nh} - A_{n,h-1}) = \\sum_{h \\geqslant 1} h(B_{n,h-1} - B_{nh}) = \\sum_{h \\geqslant 0} B_{nh}.\n$$\nIt is well known that $A_{nn} = \\frac{1}{n}\\binom{2n-2}{n-1}$, for the set of general trees with $n$ nodes is in bijection with the set of binary trees with $n-1$ nodes, counted by the Catalan numbers.</p>\n\n<p>Therefore, the first step is to find $B_{nh}$ and then the main term in the asymptotic expansion of $S_n$.</p>\n\n<p>At this point the authors use analytical combinatorics (three pages) to derive\n$$\nB_{n+1,h-1} = \\sum_{k \\geqslant 1} \\left[\\binom{2n}{n+1-kh} - 2\\binom{2n}{n-kh} + \\binom{2n}{n-1-kh}\\right].\n$$</p>\n\n<blockquote>\n  <p>My own attempt is as follows. I consider the bijection between trees with $n$ nodes\n  and monotonic paths on a square grid $(n-1) \\times (n-1)$ from $(0,0)$ to $(n-1,n-1)$ which do not cross the diagonal (and are made of two kinds of steps: $\\uparrow$ and $\\rightarrow$). These paths are sometimes called <em>Dyck paths</em> or <em>excursions</em>. I can express now $B_{nh}$ in terms of lattice paths: it is the number of Dyck paths of length 2(n-1) and height greater than or equal to $h$. (Note: a tree of height $h$ is in bijection with a Dyck path of height $h-1$.)</p>\n  \n  <p>Without loss of generality, I assume that they start with $\\uparrow$ (hence stay above the diagonal). For each path, I consider the first step crossing the line $y = x + h - 1$, if any. From the point above, all the way back to the origin, I change $\\uparrow$ into $\\rightarrow$ and vice versa (this is a <em>reflection</em> wrt the line $y=x+h$). It becomes apparent that the paths I want to count ($B_{nh}$) are in bijection with the monotonic paths from $(-h,h)$ to $(n-1,n-1)$ which avoid the boundaries $y=x+2h+1$ and $y=x-1$. (See <a href="http://www.filedropper.com/lattice">figure</a>.)</p>\n</blockquote>\n\n<p>In the classic book <em>Lattice Path Counting and Applications</em> by Mohanty (1979, page 6) the formula\n$$\n\\sum_{k \\in \\mathbb{Z}} \\left[\\binom{m+n}{m-k(t+s)} - \\binom{m+n}{n+k(t+s)+t}\\right],\n$$\ncounts the number of monotonic paths in a lattice from $(0,0)$ to $(m,n)$, which avoid the boundaries $y = x - t$ and $y = x + s$, with $t &gt; 0$ and $s &gt; 0$. (This result was first established by Russian statisticians in the 50s.) Therefore, by considering a new origin at $(-h,h)$, we satisfy the conditions of the formula: $s=1$, $t=2h+1$ and the destination point (the upper right corner) is now $(n+h-1,n-h-1)$. Then\n$$\nB_{nh} = \\sum_{k \\in \\mathbb{Z}} \\left[\\binom{2n-2}{n+h-1-k(2h+2)} - \\binom{2n-2}{n-h-1+k(2h+2) + 2h+1}\\right].\n$$\nThis can be simplified in\n$$\nB_{n+1,h-1} = \\sum_{k \\in \\mathbb{Z}} \\left[\\binom{2n}{n+1-(2k+1)h} - \\binom{2n}{n-(2k+1)h}\\right],\n$$\nwhich, in turn, is equivalent to\n$$\nB_{n+1,h-1} = \\sum_{k \\geqslant 0} \\left[\\binom{2n}{n+1-(2k+1)h} - 2\\binom{2n}{n-(2k+1)h} + \\binom{2n}{n-1-(2k+1)h}\\right].\n$$\nThe difference with the expected formula is that I sum over the odd numbers ($2k+1$), instead of all positive integers ($k$).</p>\n\n<p>Any idea where the problem is?</p>\n', 'ViewCount': '202', 'Title': 'On "The Average Height of Planted Plane Trees" by Knuth, de Bruijn and Rice (1972)', 'LastEditorUserId': '2993', 'LastActivityDate': '2012-09-30T09:32:05.513', 'LastEditDate': '2012-09-30T09:32:05.513', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2993', 'Tags': '<combinatorics><discrete-mathematics><trees><average-case><random-walks>', 'CreationDate': '2012-09-28T12:20:51.920', 'Id': '4777'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '155', 'Title': 'Reconstructing a data table from cross-tabulation frequencies', 'LastEditDate': '2013-04-05T21:42:23.620', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2847', 'FavoriteCount': '1', 'Body': '<p>Say there is a data table $D$ that we cannot see, with $M$ columns. We are given exact <a href="https://en.wikipedia.org/wiki/Cross_tabulation" rel="nofollow">cross-tabulation</a> frequencies for all ${M \\choose 2}$ pairs of columns, that is how often each combination of two values occurs.</p>\n\n<p>From the cross-tabulations, we can derive a set of possible rows $R$ of $D$ and maximum frequencies for each possible row.</p>\n\n<p>How can we reconstruct the original table $D$? If there is not enough information to do so, how can we construct a possible table $D\'$ that has the same cross-tab frequencies? In this case, is it possible to count the number of possible tables?</p>\n\n<p>(Edit: As Vor noted, define a table as an unordered collection of rows. A permutation of the rows of a table yields the same table.)</p>\n\n<hr>\n\n<p>For example, if $D$ has rows:</p>\n\n<pre><code>X  A  j\nY  A  k\nX  B  j\nX  B  j\n</code></pre>\n\n<p>We have three sets of cross-tab frequencies:</p>\n\n<pre><code>X  A  1\nX  B  2\nY  A  1\nY  B  0\n\nX  j  3\nX  k  0\nY  j  0\nY  k  1\n\nA  j  1\nA  k  1\nB  j  2\nB  k  2\n</code></pre>\n\n<p>I would like an algorithm which will take the cross-tab frequencies as input and output the original table or a possible original table.</p>\n', 'Tags': '<algorithms><complexity-theory><combinatorics><statistics>', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-04-07T14:24:45.853', 'CommentCount': '5', 'AcceptedAnswerId': '11102', 'CreationDate': '2012-09-28T20:16:24.500', 'Id': '4784'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<blockquote>\n  <p>Let $f(N)$ be the average number of full nodes (nodes with two children) in an $N$-node binary search tree.</p>\n  \n  <ol>\n  <li>Determine the values of $f(0)$ and $f(1)$. </li>\n  <li><p>Given that for $N &gt; 1$, </p>\n  \n  <p>$\\qquad \\displaystyle f(N) = \\frac{N-2}{N} + \\frac{1}{N} \\sum_{i=0}^{N-1} [f(i) + f(N - i - 1)]$,</p>\n  \n  <p>show that $f(N) = \\frac{N - 2}{3}$.</p></li>\n  <li>Using this information, show that the average number of nodes with one child in a binary search tree is $\\frac{N + 1}{3}$.</li>\n  </ol>\n</blockquote>\n\n<p>I know that for (1) both values are $0$. I mainly need help proving (2).\nI also found some hints for (2) and (3) but I can't figure it out:</p>\n\n<p>(2) The root contributes $\\frac{N \u2212 2}{N}$ full nodes on average, because the root is full as long as it does not contain the largest or smallest item. The remainder of the equation is the expected contribution of the subtrees.</p>\n\n<p>(3) The average number of leaves is $\\frac{N + 1}{3}$.</p>\n\n<p>Any help would be appreciated, even just pointing me in the right direction. Thanks!</p>\n", 'ViewCount': '517', 'Title': 'Average number of full nodes in a binary search tree', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-22T16:49:13.143', 'LastEditDate': '2012-10-22T15:51:25.087', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'OwnerDisplayName': 'user1758064', 'PostTypeId': '1', 'Tags': '<data-structures><combinatorics><recurrence-relation><binary-trees>', 'CreationDate': '2012-10-19T02:17:50.273', 'Id': '6179'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>When one shuffles playing cards, the goal is evidently to achieve a possibly big derangement\nof a given deck. For manual shuffling there are terms like inshuffle, outshuffle etc. I like\nto know whether there is a sensible general measure of derangements of n objects and\nefficient algorithm to compute that measure and eventually also to determine the set representing maximal derangements.</p>\n', 'ViewCount': '75', 'Title': 'Maximal derangements', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-27T16:09:47.163', 'LastEditDate': '2012-10-26T14:22:26.237', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4349', 'Tags': '<combinatorics><probability-theory><permutations>', 'CreationDate': '2012-10-26T10:31:49.767', 'Id': '6322'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What is the procedure for computing the rank of a <a href="http://mathworld.wolfram.com/Multiset.html" rel="nofollow">multiset</a> after inserting an element?</p>\n\n<p>For instance, lets say we have a set $S = (0,1)$ containing $n = 2$ distinct elements.</p>\n\n<p>The multiset $M = (1,1)$ has rank $5$ because there are $4$ multisets less than it based on lexicographic ordering: $(0), (1), (0,0), (0,1)$.</p>\n\n<p>If we insert $0$, we get $(0,1,1)$ which has rank $8$. If $1$ were inserted instead we\'d have $(1,1,1)$ with rank $9$.</p>\n\n<p>Is there a function $f(r,x,n)$ which takes a rank $r$, an element $x$, and $n$, and returns the new rank after inserting $x$?</p>\n', 'ViewCount': '93', 'Title': 'Computing the rank of a multiset after inserting another element', 'LastEditorUserId': '4223', 'LastActivityDate': '2012-10-27T15:58:34.620', 'LastEditDate': '2012-10-27T07:27:16.467', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '6339', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4223', 'Tags': '<algorithms><combinatorics><sets><binary-arithmetic>', 'CreationDate': '2012-10-27T01:53:27.787', 'Id': '6325'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>How many different max-heaps can I form using a list of $n$ integers. </p>\n\n<p>Example: \nlist [1,2,3,4]</p>\n\n<p>and max-heap is <code>4 3 2 1</code>  or </p>\n\n<pre><code>    4\n   / \\\n  3   2\n /\n1\n</code></pre>\n\n<p>other possible max-heap is <code>4 2 3 1</code></p>\n\n<pre><code>    4 \n   / \\\n  2   3 \n /\n1\n</code></pre>\n', 'ViewCount': '569', 'Title': 'How many max heaps are there?', 'LastEditorUserId': '2205', 'LastActivityDate': '2014-01-27T20:52:32.243', 'LastEditDate': '2012-11-20T08:21:15.937', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6458', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '244', 'Tags': '<graph-theory><data-structures><combinatorics><binary-trees><heaps>', 'CreationDate': '2012-11-02T18:19:35.187', 'Id': '6456'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given a set of coins with different denominations $c1, ... , cn$ and a value v you want to find the least number of coins needed to represent the value v.</p>\n\n<p>E.g. for the coinset 1,5,10,20 this gives 2 coins for the sum 6 and 6 coins for the sum 19. </p>\n\n<p>My main question is: when can a greedy strategy be used to solve this problem?</p>\n\n<hr>\n\n<p>Bonus points: Is this statement plain incorrect? (From: <a href="http://stackoverflow.com/questions/6025076/how-to-tell-if-greedy-algorithm-suffices-for-the-minimum-coin-change-problem/6031625#6031625">How to tell if greedy algorithm suffices for the minimum coin change problem?</a>)</p>\n\n<blockquote>\n  <p>However, this paper has a proof that if the greedy algorithm works for the first largest denom + second largest denom values, then it works for them all, and it suggests just using the greedy algorithm vs the optimal DP algorithm to check it.\n  <a href="http://www.cs.cornell.edu/~kozen/papers/change.pdf">http://www.cs.cornell.edu/~kozen/papers/change.pdf</a></p>\n</blockquote>\n\n<p>Ps. note that the answers in that thread are incredibly crummy- that is why I asked the question anew.</p>\n', 'ViewCount': '3360', 'Title': 'When can a greedy algorithm solve the coin change problem?', 'LastActivityDate': '2012-11-12T03:16:46.283', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '6625', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2826', 'Tags': '<algorithms><combinatorics><greedy-algorithms>', 'CreationDate': '2012-11-08T08:59:30.133', 'FavoriteCount': '0', 'Id': '6552'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a container with a certain dimension. A number of small boxes that may be different in size is to be packed into the container. How to arrange the small boxes such that the container contains as many as possible?</p>\n\n<ul>\n<li>No rotation is allowed.</li>\n<li>The heavier boxes must not be on the top of the lighter ones.</li>\n<li>Approximation is allowed.</li>\n</ul>\n\n<p>I am looking for the algorithm so I can implement it in a software.</p>\n', 'ViewCount': '213', 'Title': 'Algorithm to pack any small boxes into a big box', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:25:11.543', 'LastEditDate': '2013-05-24T03:25:11.543', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4542', 'Tags': '<algorithms><combinatorics><efficiency><approximation><knapsack-problems>', 'CreationDate': '2012-11-10T19:18:01.317', 'Id': '6606'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I recently took a practice exam for the Computer Science GRE and this was one of the questions: </p>\n\n<blockquote>\n  <p>Assume that set $A$ has 5 elements and set $B$ has 4 elements, how many functions exist from set $A$ to set $B$?</p>\n</blockquote>\n\n<p>I had no idea what this means, I don't recall ever studying functions between sets, could someone shed some light on this question for me ?</p>\n", 'ViewCount': '114', 'Title': 'Functions between sets?', 'LastEditorUserId': '19', 'LastActivityDate': '2012-11-11T02:27:20.133', 'LastEditDate': '2012-11-11T01:36:43.140', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '6612', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '678', 'Tags': '<combinatorics><sets>', 'CreationDate': '2012-11-11T01:29:59.903', 'Id': '6611'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Given a universe $U$ consisting of k sets of vectors with each vector $\\vec{v} \\in {\\mathbb{F}_{p^m}}^n $. Given also another vector $\\vec{c} \\in {\\mathbb{F}_{p^m}}^n$.\nNow decide if there is a set $X$ with $|X| = |U|$ and $X_i \\in U_i, i = 1,2,...,k$ such that $\\sum\\limits_i X_i = \\vec{c}$. If there is, output this set.</p>\n\n<p>In other words, I want to find a combination of one element out of each set that sums up to the given vector, given that the vectors' entries can only be the results of modulo operation with a given integer. I hope the problem becomes clear.</p>\n\n<p>I want to find an efficient algorithm to solve this problem. It seems to me that it is NP-complete, but I find no other NP-complete problem that I can reduce. If there is one, existing algorithm (if any) to that other problem could be used for this problem.<br>\nI looked at integer programming, but I did not find anything with respect to finite fields.</p>\n\n<p>Any ideas?</p>\n", 'ViewCount': '129', 'Title': 'Find vectors with elements of finite fields that sum up to given value', 'LastActivityDate': '2013-08-26T02:07:02.137', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '6989', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4769', 'Tags': '<algorithms><combinatorics><discrete-mathematics>', 'CreationDate': '2012-11-27T21:33:15.290', 'Id': '6968'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The <a href="http://en.wikipedia.org/wiki/Josephus_problem" rel="nofollow">Josephus Problem</a> asks where to start taking out every kth person in the circle consisted of n people, such that you are the last "survivor".</p>\n\n<p>The following recursive formula is given:\n$$\\begin{align}\nf(1,k)&amp;=1, \\\\\nf(n,k)&amp;=((f(n-1,k)+k-1) \\bmod n )+1.\n\\end{align}$$</p>\n\n<p>But this is not enough explanation, so I don\'t get where does it come from.</p>\n\n<p>Can anyone help? </p>\n', 'ViewCount': '264', 'Title': 'A Recursive Formula For Generalized Josephus problem', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-01T13:59:08.837', 'LastEditDate': '2012-12-01T13:59:08.837', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '3046', 'Tags': '<combinatorics><recursion>', 'CreationDate': '2012-11-30T13:48:14.960', 'Id': '7048'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I was solving the following problem. But I am not able to think of an efficient algorithm for this modified version of problem. The problem statement is:</p>\n\n<blockquote>\n  <p>We are given <strong>K Rectangles</strong>. The dimensions of $x$-th Rectangle is ($N_x \\times M_x$), where $1\\leq x \\leq K$.\n  From each rectangle $x$ , Alice Cuts  a rect. of dimension ($P_x \\times Q_x$), where $1 \\leq x \\leq K$ ,\n  from the <strong>Top-Right Corner</strong> and trashes the cut portion.</p>\n  \n  <p>Initially Alice placed a robot, at the <strong>top left corner</strong> of <strong>each</strong> rectangle. He is very interested to find the <em>number of ways, each robot</em> can reach the bottom-right corner (target) using the following rules:</p>\n  \n  <ul>\n  <li>The robot can only move 1 unit <em>right</em>* or the robot can only move 1 unit <em>downward</em>.</li>\n  <li>The robot <strong>cannot</strong> move upward, <strong>can't</strong> move even <em>left</em> and <strong>can't</strong> move even <em>diagonally</em>.</li>\n  <li>The robot can move on rectangle boundary.</li>\n  </ul>\n  \n  <p>The number of ways can be very large. Thus, Answer = (Number of ways) mod 10^9+7.</p>\n</blockquote>\n\n<p>Constraints is very large:</p>\n\n<pre><code>1&lt;=K&lt;=10\n2&lt;=(Nx,Mx)&lt;=5*10^5\n1&lt;=Px&lt;Nx\n1&lt;=Qx&lt;Mx\n</code></pre>\n\n<p>The Time Limit is just 1 second.</p>\n\n<p>Example:</p>\n\n<pre><code>K=1\n\nN1=2 M1=2\n\nP1=1 Q1=1\n</code></pre>\n\n<p>Answer: 5 ways</p>\n\n<p>I had <strong>solved the easier version</strong> of this problem (Using Pascal triangle + Combinatorics), when no portion of rectangle is cut/removed. But I don't know how to solve the above modified problem, where a small rectangle is cut from top-right Corner of the original rectangle.</p>\n", 'ViewCount': '325', 'Title': 'Modified paths Counting in a Rectangle', 'LastEditorUserId': '140', 'LastActivityDate': '2012-12-07T15:41:08.113', 'LastEditDate': '2012-12-04T18:01:37.250', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2041', 'Tags': '<algorithms><combinatorics><dynamic-programming>', 'CreationDate': '2012-12-04T10:28:44.047', 'Id': '7152'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Using python need to code a recursive function with one input and no global integers that calculates the number of options to get $x$ using $a*1+b*2+c*3$.</p>\n\n<p>Say $x=3$, there are four options: $\\lbrace (1,1,1),(1,2),(2,1),(3)\\rbrace$.</p>\n', 'ViewCount': '147', 'Title': 'Recursive function calculating number of ways to sum $a + 2 b + 3 c = x$', 'LastEditorUserId': '1329', 'LastActivityDate': '2012-12-18T23:52:18.237', 'LastEditDate': '2012-12-18T18:41:05.697', 'AnswerCount': '3', 'CommentCount': '6', 'AcceptedAnswerId': '7493', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5115', 'Tags': '<combinatorics><recursion>', 'CreationDate': '2012-12-18T16:24:18.243', 'Id': '7490'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>A multiset is an unordered collection of elements where elements may repeat any\nnumber of times. The size of a multiset is the number of elements in it counting\nrepetitions.</p>\n\n<p>(a) What is the number of multisets of size $4$ that can be constructed from $n$\ndistinct elements so that at least one element occurs exactly twice?</p>\n\n<p>(b) How many multisets can be constructed from $n$ distinct elements?</p>\n\n<p>For part b, infinite is correct.</p>\n\n<p>For part a, taking $n=3$ and elements $\\{1,2,3\\}$ we have multisets as:\n$\\{1,1,2,2\\}, \\{1,1,3,3\\}, \\{1,1,2,3\\}, \\{2,2,3,3\\}, \\{2,2,1,3\\}, \\{3,3,1,2\\}$, for a total of $6$.</p>\n\n<p>Similarly for $n=4$ and using elements $\\{1,2,3,4\\}$, we have $18$ multisets. There must be some formula, or we have to develop one!</p>\n\n<p>I am in particular looking for a formula when there is a restriction on the number occurrences in the multiset.</p>\n', 'ViewCount': '150', 'Title': 'Multisets of a given set', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-24T18:06:40.757', 'LastEditDate': '2012-12-24T18:06:40.757', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7579', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4763', 'Tags': '<combinatorics><sets>', 'CreationDate': '2012-12-24T14:36:01.187', 'Id': '7578'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In a bridge game, a deck of 52 cards (13 spades , 13 clubs, 13 diamonds, 13 spades) are dealt to 4 players (13 cards each) then game starts.Game session ends after 13 tricks each having 4 cards.There are 28561 possible non repeated 4 card groups.</p>\n\n<p>What is the best method of generating and storing all possible trick combinations (played according to the bridge rules just for one session) to be further processed by a computer program (i.e., data structures such as game trees, and any open source algorithms written for any computer language if any).</p>\n\n<p>All resources to read to get the theory behind or any references are welcome.\nThank you.</p>\n', 'ViewCount': '407', 'Title': 'Data structures and algorithms for bridge game play?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-30T09:54:03.547', 'LastEditDate': '2013-04-04T06:33:12.213', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5210', 'Tags': '<algorithms><data-structures><combinatorics><board-games>', 'CreationDate': '2012-12-27T12:12:28.953', 'Id': '7618'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '426', 'Title': 'Simplify complexity of n multichoose k', 'LastEditDate': '2013-01-05T23:36:04.090', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '5271', 'FavoriteCount': '4', 'Body': "<p><strong>Edit:</strong>  In my case, $k$ may be greater than $n$ and they grow independently.</p>\n\n<p>I have a recursive algorithm with time complexity equivalent to choosing k elements from n with repetition, and I was wondering whether I could get a more simplified big-O expression.</p>\n\n<p>Specifically, I'd expect some explicit exponential expression.\nThe best I could find so far is that based on Stirling's approximation $O(n!) \\approx O((n/2)^n)$, so I can use that, but I wondered if I could get anything nicer.</p>\n\n<p>$$O\\left({{n+k-1}\\choose{k}}\\right) = O(?)$$</p>\n", 'Tags': '<asymptotics><combinatorics><runtime-analysis>', 'LastEditorUserId': '5271', 'LastActivityDate': '2013-01-05T23:36:04.090', 'CommentCount': '3', 'AcceptedAnswerId': '7694', 'CreationDate': '2013-01-02T10:10:10.627', 'Id': '7691'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '91', 'Title': 'Application of Expander Codes', 'LastEditDate': '2013-02-14T18:42:46.433', 'AnswerCount': '1', 'Score': '5', 'OwnerDisplayName': 'smoes', 'PostTypeId': '1', 'OwnerUserId': '5327', 'Body': '<p>I need to give a talk about <a href="http://en.wikipedia.org/wiki/Expander_code">expander codes</a> at university (I\'m a student of computer science). Since they have been introduced to show a family of codes looking good when thinking of the <a href="http://en.wikipedia.org/wiki/Noisy-channel_coding_theorem">Shannon theorem</a>, I wonder what real world application for expander codes exist.</p>\n\n<p>As far as I know one has a real hard time when encoding but decoding is quite fast. Why aren\'t they used to encode write only media or similar? What is their big disadvantage?</p>\n', 'Tags': '<graph-theory><combinatorics><coding-theory><expanders>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-02-14T22:04:27.807', 'CommentCount': '0', 'AcceptedAnswerId': '9785', 'CreationDate': '2013-01-06T13:47:18.513', 'Id': '7816'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I wonder if two famous (and, IMHO, very nice) recreational problems are been studied in some general form.</p>\n\n<p>Here's the first.\nWe have 13 balls, all looking absolutely the same, with 12 of them having the same weight; we don't know whether the ball that has a different weight is heavier or lighter. We have a balance with two arms and, using it at most 3 times, it is required to identify the ball with different weight. \nFor the generalization below, I will consider a slightly different version of it: same scenario, but requesting the needed minimum number of times by which, in all cases, using the balance we can identify the different ball.</p>\n\n<p>Here's the second.\nWe have three card and we are in front of a door with three slot in which we can insert the cards. Each card is the correct one for exactly one slot and vice versa.\nEach slot is connected to a hidden circuit and, at the beginning, we don't know wheter a circuit is opened or closed (but at least one of them is opened).\nThe door will open only if all three circuits are closed.\nWe can change the state of a circuit solely by inserting all the three cards; when we insert all the cards, the circuits change state according to these rules: if a circuit is closed, it will open; if a circuit is opened, it will close only if the correct card is inserted in its slot.\nIn general, without knowing the initial states of the circuits, what is the minimum number of insertions by which the door will certainly open?</p>\n\n<p>We can generalize the above problems in obvious ways: the first problem by having $n$ balls (possibly, with $k$ of them having different weight), the second problem by having $n$ cards/slots/circuits (possibly, each card being correct for more than a slot/circuit). </p>\n\n<p>Are these general problems new? Any similar and well-studied one?</p>\n", 'ViewCount': '31', 'Title': "On the generalization of two recreational problems: request for references, if there's any", 'LastActivityDate': '2013-01-30T03:26:58.140', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9291', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1665', 'Tags': '<reference-request><combinatorics>', 'CreationDate': '2013-01-30T02:56:52.703', 'Id': '9289'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I find this a bit difficult to describe, but I am interested in the following idea :</p>\n\n<p>The LZ algorithm factors (verb) an input stream into adjacent factors, these are by definition the maximal prefixes of the piece of text that occur in the previous text (or equivalently the previous concatenation of LZ factors). </p>\n\n<p>I know and believe that in the long term (given infinite input and infinite window) this coding scheme can achieve the Shannon limit, that it will find all repeat patterns that exist. </p>\n\n<p>However in <em>any given finite text</em> (but with an unbounded window) how optimal is this?</p>\n\n<p>Do the choice of factors earlier in the input have potential detrimental effects later on? For instance, could LZ converge to a choice of factors that omits certain larger factors, or factor-choices that would result in a better cover of the input (i.e. a choice of factors that  cover more of the text?). </p>\n\n<p>Or is the optimality of LZ only constrained by the window limit, and the finite nature of a text? Please provide some kind of hand waving or intuitive proof.</p>\n', 'ViewCount': '142', 'Title': 'How optimal is Lempel-Ziv at reaching the Shannon limit?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-31T14:25:17.583', 'LastEditDate': '2013-01-30T21:52:12.133', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '9356', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4602', 'Tags': '<complexity-theory><combinatorics><data-compression><lempel-ziv>', 'CreationDate': '2013-01-30T15:05:50.820', 'Id': '9309'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I don\'t know the right name for this problem, or if there is a name, but it is inspired by my initial interpretation of the title of <a href="http://cs.stackexchange.com/questions/9155/streaming-knapsack-problem">this</a> question (my question is very different, so the link may be misleading). Anyways, my question is this:</p>\n\n<p>We are initially given a list of "items" to be filled in a knapsack of fixed size. Each item has a weight (bounded, integral) and value, and we need to maximize the total value of items in the knapsack. So far, this is identical to the 0/1 Knapsack problem. Now, at each step, we perform one of the following:</p>\n\n<ul>\n<li>Remove the first item in the list (first means encountered earliest)</li>\n<li>Add a new item to the list at the end.</li>\n</ul>\n\n<p>To keep the solution space small, we can assume that the maximum size of the list is fixed, so that it will behave like a fixed size buffer overflow - oldest item is removed before new item is added.</p>\n\n<p>Now, the list is smallish, so the initial instance of the knapsack on the original list can be performed to obtain the first solution. Now, <strong>after <em>every</em> operation</strong> on the list (addition or removal of items), we again want to find out the best way to fill a <strong>new (empty) knapsack with the items in the new list</strong>. And we want to do it <strong>without repeating a full knapsack algorithm</strong> on this slightly modified list (since there will be many such operations).</p>\n\n<p>Is there some way the results of the previous state can be utilized to speed up the process? Is there some information from the previous state that can <em>usually</em> speed up the process? Is there any research on this or some related problem? </p>\n\n<p>The pseudo-polynomial time DP algorithm can be adapted for the case where an item is added (since the table depends on the previous items), but I could not figure out how to deal with it in case the first item is removed from the list. Similarly, a branch-and-bound approach seems pointless. Any ideas or references?</p>\n', 'ViewCount': '189', 'Title': 'Dynamic Knapsack Problem - Algorithms and References', 'LastEditorUserId': '4751', 'LastActivityDate': '2013-02-01T19:15:14.520', 'LastEditDate': '2013-02-01T19:15:14.520', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4751', 'Tags': '<algorithms><reference-request><optimization><combinatorics><knapsack-problems>', 'CreationDate': '2013-02-01T11:46:06.723', 'Id': '9384'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '152', 'Title': 'Unique tilings of squares', 'LastEditDate': '2013-02-12T06:32:28.717', 'AnswerCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '96', 'FavoriteCount': '2', 'Body': "<p>We want to tile $m\\times m$-square using two types of tiles: $1 \\times 1$-square tile and $2 \\times 2$-square tile such that every underlying square is covered without overlapping. Let us define a function $f(n)$ that gives the size of largest uniquely tillable square using $n$ $1\\times 1$-squares and any number of $2 \\times 2$-squares.</p>\n\n<p>Is this function computable? What is the algorithm?</p>\n\n<p>EDIT1: Based on Steven's answer, unique tiling means that there is one way to place the $2 \\times 2$-squares inside the $m \\times m$-square with a unique configuration for the positions of the $n$ $1 \\times 1$-squares inside the $m \\times  m$-square.</p>\n", 'Tags': '<computability><combinatorics>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-12T06:32:28.717', 'CommentCount': '14', 'AcceptedAnswerId': '9628', 'CreationDate': '2013-02-09T20:50:43.813', 'Id': '9621'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '705', 'Title': 'Why are there more non-computable functions than computable ones?', 'LastEditDate': '2013-02-11T05:56:31.970', 'AnswerCount': '2', 'Score': '10', 'OwnerDisplayName': 'user1288420', 'PostTypeId': '1', 'OwnerUserId': '6834', 'FavoriteCount': '2', 'Body': "<p>I'm currently reading a book in algorithms and complexity. At the moment I'm, reading about computable and non-computable functions, and my book states that there are many more functions that are non-computable than computable, in fact the majority is non-computable it says. In some sense I can intuitively accept that but the book does not give a formal proof nor does it  elaborate much on the topic.</p>\n\n<p>I just wanted to see a proof/let someone here elaborate about it/understand more strictly why there are so many more non-computable functions than computable ones.</p>\n", 'Tags': '<computability><turing-machines><combinatorics>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-11T05:56:31.970', 'CommentCount': '1', 'AcceptedAnswerId': '9634', 'CreationDate': '2013-02-10T08:57:32.950', 'Id': '9633'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><strong>Motivation</strong>:  This question is motivated by my <a href="http://cs.stackexchange.com/questions/9621/unique-tilings-of-squares">previous question</a> . In that question, my statment of the uniqueness requirement is not interesting since it leads to easily computable function.  I am interested in constructing uncomputable function from a simple combainatorial problem.</p>\n\n<p>We want to tile $m\\times m$-square using two types of tiles: $1 \\times 1$-square tile and $2 \\times 2$-square tile without overlapping. We require packing the maximum number of $2 \\times 2$-squares while posiblliy leaving some of the $m \\times m$-squares uncovered? </p>\n\n<p>Let us define a function $f(n)$ that gives the size of largest tillable square using $n$ $1\\times 1$-squares and maximum number of $2 \\times 2$-squares.</p>\n\n<p>Is this function computable? Is it computable if we use Trominos instead of $2 \\times 2$-squares?</p>\n', 'ViewCount': '105', 'Title': 'Tiling of squares', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-12T06:32:38.140', 'LastEditDate': '2013-02-12T06:32:38.140', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<computability><combinatorics>', 'CreationDate': '2013-02-11T17:51:28.563', 'FavoriteCount': '1', 'Id': '9684'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I think half the battle in answering this question lies in formulating it precisely! A search engine doesn\'t turn up much, so I was wondering if this is a well-known or well-studied question.</p>\n\n<p>My thoughts: I think the most straightforward way to formulate this question is as in my title: Given constants $t,s,k \\in \\mathbb{N}$, how many TMs are there that run in $t$ steps or fewer on all inputs of size $k$, and how many TMs are there that use $s$ tape squares or fewer on all inputs of size $k$? This seems like the most direct and simple way to ask the question, but we might want to restate it in a different way -- for example, given a function $p(k)$, how many TMs are there that run in time $p(k)$ on inputs of size $k$ for all $k$ (or how "dense" are these TMs)? This seems harder to me.</p>\n\n<p>We should probably fix a tape alphabet (or a Godel numbering??). We could consider two TMs with different but isomorphic state diagrams to be the same or different, either way.</p>\n\n<p>The immediate problem is that there are an infinite number: Take any TM that satisfies the criteria and add "dead states". I can think of two ways to deal with this. The first (which I don\'t like) is to add an additional parameter: how many TMs whose description has length $\\leq L$ satisfy the criteria? The second (which I prefer) is to consider two TMs <em>equivalent</em> on inputs of size $\\leq k$ if, for all such inputs, the TMs have exactly the same behavior (enter the same states and write/move on the tape identically). Then we would restrict to the minimal TM in each equivalence class, or just ask how many equivalence classes satisfy the criteria.</p>\n\n<p>Edit: As pointed out by Vor in the comments, the problem with the second approach is that it\'s basically the same as a circuit at that point. So how about the first one? Or is there a nicer way to formalize this question?</p>\n\n<p>Any references/literature, thoughts, or answers would be very interesting and appreciated!</p>\n', 'ViewCount': '129', 'Title': 'How many Turing Machines are there that run in time $t$ or in space $s$ on inputs of length $k$?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-07T12:15:33.460', 'LastEditDate': '2013-03-06T07:13:07.320', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4197', 'Tags': '<complexity-theory><reference-request><turing-machines><combinatorics>', 'CreationDate': '2013-03-05T17:46:58.547', 'Id': '10298'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '139', 'Title': u'Number of Hamiltonian cycles on a Sierpi\u0144ski graph', 'LastEditDate': '2013-03-06T07:09:17.007', 'AnswerCount': '1', 'Score': '10', 'OwnerDisplayName': 'flonk', 'PostTypeId': '1', 'OwnerUserId': '7165', 'Body': '<p>I am new to this forum and just a physicist who does this to keep his brain in shape, so please show grace if I do not use the most elegant language. Also please leave a comment, if you think other tags would be more appropriate.</p>\n\n<p>I am trying to solve <a href="http://projecteuler.net/problem=312">this problem</a> for which I need to compute the number of Hamiltonian cycles $C(n)$ in the $n$th order Sierpinski-graph $S_n$. (Please also see the above link for the definition and pictures of Sierpinski-graphs)</p>\n\n<p>I have found $C(n)$, but I must have messed up something, because my solution does not match the given value $C(5) = 71328803586048$. My argumentation consists of very basic thoughts, and I cannot find the mistake. Any help is greatly appreciated. Even if it seems lengthy, the thoughts become trivial if you <a href="http://projecteuler.net/problem=312">look at the graphs</a> while following.</p>\n\n<p><strong>(a)</strong> In a given graph $S_n$ call the outer corners $A,B,C$. Then I define the following quantities: </p>\n\n<p>$N(n) := $ the number of Hamiltonian paths from $A$ to $C$.</p>\n\n<p>$\\bar{N}(n) := $ the number of paths from $A$ to $C$ which visit each node once except $B$.</p>\n\n<p>I will also call such paths $N$- or $\\bar{N}$-type paths in the following. </p>\n\n<p><strong>(b)</strong> It is easy to see that $N(n)=\\bar{N}(n)$. </p>\n\n<p>The reason is the following: Consider a $N$-type path. Starting at $A$ this path is of the form $(A,...,X_1,B,X_2,...,C)$. By replacing the segment $(X_1,B,X_2)$ by $(X_1,X_2)$ we obtain a $\\bar{N}$-type path. This operation uniquely maps all $N$-type paths to $\\bar{N}$-type paths.</p>\n\n<p><strong>(c)</strong> We derive the recursion $N(n+1)=2N(n)^3$.</p>\n\n<p>Consider an $N$-type path from $A$ to $B$ and denote the subtriangles at the outer corners $A,B,C$ by $T_A,T_B,T_C$, respectively. It is clear that the $N$-type path will visit each subtriangle exactly once starting from $T_A$ over $T_B$ to $T_C$. Now consider the node $Z$ at which the subtriangles $T_A$ and $T_C$ touch. There are two possibilities, when this point is visited by the path, either <strong>(i)</strong> before leaving $T_A$ or <strong>(ii)</strong> after entering $T_C$. In these cases the three subpaths inside $T_A,T_B,T_C$ are of the types <strong>(i)</strong> $N,N,\\bar{N}$ or <strong>(ii)</strong> $\\bar{N},N,N$, respectively. With this in mind we can count </p>\n\n<p>$N(n+1)=N(n)N(n)\\bar{N}(n)+\\bar{N}(n)N(n)N(n)$ and with <strong>(b)</strong> we arrive at the upper recursion.</p>\n\n<p><strong>(d)</strong> We solve the recursion <strong>(c)</strong> with $N(1)=1$ and obtain $N(n)=2^{3^0+3^1+...+3^{n-2}}$.</p>\n\n<p><strong>(e)</strong> Consider a Hamiltonian cycle in the graph $S_n$. As each of three subtriangles is connected to the others via two nodes only, it is clear that the cycle will enter each subtriangle exactly once via one connecting node, then "fill" it, an finally leave it via the other connecting node. Hence the Hamiltonian cycle in $S_n$ consists of three $N$-type subpaths in the subtriangles which all have the structure of $S_{n-1}$. We can conclude for the number of Hamiltonian cycles</p>\n\n<p>$C(n) = N(n-1)^3$.</p>\n\n<p>However it follows for $n=5$</p>\n\n<p>$C(5) = N(4)^3 = 8192^3=549755813888 \\neq 71328803586048$</p>\n\n<p>where the latter should be obtained according to the problem page (link above).</p>\n\n<p>Thanks again for any help or comments.</p>\n', 'Tags': '<graph-theory><combinatorics><check-my-proof>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-24T03:14:30.723', 'CommentCount': '0', 'AcceptedAnswerId': '10306', 'CreationDate': '2013-03-05T10:07:51.497', 'Id': '10305'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>A graph $G$ is <em><a href="http://en.wikipedia.org/wiki/Chordal_graph">chordal</a></em> if it doesn\'t have induced cycles of length 4 or more. Chordal graphs are precisely the class of graphs that admit a <em>clique tree</em> representation. A clique tree $T$ of $G$ is a tree in which the vertices of the tree are the maximal cliques of $G$. An edge in $T$ corresponds to a <em><a href="http://en.wikipedia.org/wiki/Chordal_graph#Minimal_separators">minimal separator</a></em>. In general, $G$ can have more than one clique tree representing it. A graph is said to be <em>geodetic</em> if the shortest path between any pair of vertices is unique.</p>\n\n<p>Consider a chordal graph $G$ in which every minimal separator is a singleton set. I can prove such a graph is geodetic, but this property doesn\'t hold once minimal separators get larger. For example, consider a graph with a minimal separator $S = \\{2,3\\}$ of size 2 below. It already has 2 shortest paths between the vertices 1 and 4. </p>\n\n<p><img src="http://i.stack.imgur.com/QXNrB.png" alt="A chordal graph in which the minimal separator is of size 2."></p>\n\n<p>In fact, consider two adjacent vertices in a clique tree of a chordal graph. Let $S$ be the minimal separator corresponding to the edge between them. Now consider two distinct vertices $u$ and $v$ in these adjacent cliques such that $u,v \\notin S$. The number of shortest paths from $u$ to $v$ is the size of the minimal separator between them. This is because, roughly speaking, it takes one step to move from any vertex in a clique to a separator, and likewise any vertex in a clique can be reached with one step from the separator.</p>\n\n<p>Finally, consider an example like below. The graph has 3 maximal cliques, and the minimal separators are $\\{ 4,5 \\}$ and $\\{ 2,3 \\}$. Now the number of shortest paths from 1 to 6 is $2 \\times 2 = 4$.</p>\n\n<p><img src="http://i.stack.imgur.com/HcoSr.png" alt="enter image description here"></p>\n\n<blockquote>\n  <p>Given a connected chordal graph $G$ (with no loops nor parallel edges), what is the maximum number of shortest paths there can exist between any pair of vertices? How can it be bounded (in terms of $n$ and $m$)?</p>\n</blockquote>\n', 'ViewCount': '240', 'Title': 'What is the maximum number of shortest paths between any pair of vertices in a chordal graph?', 'LastActivityDate': '2013-03-10T23:20:18.047', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10439', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<graph-theory><combinatorics><shortest-path><discrete-mathematics>', 'CreationDate': '2013-03-10T22:13:48.403', 'FavoriteCount': '1', 'Id': '10438'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>A full binary tree seems to be a binary tree in which every node is either a leaf or has 2 children.\nI have been trying to prove that its height is O(logn) unsuccessfully.\nHere is my work so far:</p>\n\n<p>I am considering the worst case of a full binary tree in which each right node has a subtree, and each left node is a leaf.\nIn this case:<br>\n$N = 2x - 1$<br>\n$H = x - 1$<br>\nI am going nowhere trying to prove that $H = O(\\log(N))$</p>\n\n<p>Furthermore, we know that leaves l is bounded by $h+1 &lt;l&lt;2^h$.<br>\nInternal nodes is bounded by $h&lt;i&lt;2^{h-1}$.<br>\nAll this proves is that number of nodes $n=i+e$ is $&lt;= 2^{h+1} - 1$ i.e. $\\log(n) &lt;= h$. But this does not take me anywhere closer to prove that $H = O(\\log(n))$</p>\n', 'ViewCount': '364', 'Title': 'Height of a full binary tree', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-13T14:40:59.037', 'LastEditDate': '2013-03-13T14:40:59.037', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '10508', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7260', 'Tags': '<graph-theory><combinatorics><binary-trees><trees>', 'CreationDate': '2013-03-13T06:53:28.090', 'Id': '10507'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have implemented Gaussian elimination for solving system of linear equations in the field of modulo prime remainders. If there is a pivot equal to zero I assume the system has no solution but how to calculate number of solutions of such systems when all pivots are non-zero? (i.e. one and more solutions)</p>\n', 'ViewCount': '139', 'Title': 'Counting solutions to system of linear equations modulo prime', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-17T18:10:48.970', 'LastEditDate': '2013-03-17T18:10:48.970', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10569', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7287', 'Tags': '<combinatorics><linear-algebra>', 'CreationDate': '2013-03-16T23:52:12.520', 'Id': '10567'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Suppose we are given $n$ variables $X_i, i=1,\\dots,n$, each taking values from $\\{0,1\\}$, and a constant integer $k$ with $ 0\\leq k \\leq n$.</p>\n\n<p>What are some efficient ways to enumerate all possible combinations of values of $X_i$'s subject to the constraint $\\sum_{i=1}^n X_i = k$?</p>\n\n<p>A naive way is to first enumerate one by one all possible combinations of values of $X_i$'s without the constraint  $\\sum_{i=1}^n X_i = k$, and for each combination, check if it satisfies  $\\sum_{i=1}^n X_i = k$ (if it does, keep it; if it doesn't, discard it).  </p>\n\n<p>That naive way may be inefficient.\nFor example, when $k=1$, a more efficient way will be for each $i$, letting $X_i=1$ and $X_j =0, \\forall j \\neq i$.</p>\n\n<p>So I wonder for general $k$, what are some efficient ways to do the above task? </p>\n", 'ViewCount': '190', 'Title': 'How to enumerate all combinations of $n$ binary variables s.t. their sum is $k$?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-28T11:49:26.130', 'LastEditDate': '2013-03-28T10:42:56.347', 'AnswerCount': '1', 'CommentCount': '9', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '336', 'Tags': '<algorithms><combinatorics><enumeration>', 'CreationDate': '2013-03-28T08:21:59.237', 'Id': '10861'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have $n\\times k$ matrix with $k&lt;n$ and I would like to find all its $n\\choose k$ submatrices which are $k\\times k$ matrices that are the concatenations of all possible $k$ rows. Actually I tried to do it with Matlab but it takes too long time specially when $n&gt;20$ and I couldn\'t find a way how to generate in parallel the $n\\choose k$ indices. </p>\n\n<p>I found online a paper titled <a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=1240626" rel="nofollow">A Parallel Algorithm for Enumerating Combinations</a> but they didn\'t provide their code in that paper.</p>\n', 'ViewCount': '116', 'Title': 'How to enumerate combinations in parallel', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-02T07:52:48.890', 'LastEditDate': '2013-04-02T07:52:48.890', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10902', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7487', 'Tags': '<algorithms><combinatorics><parallel-computing><matrices>', 'CreationDate': '2013-03-29T17:29:21.997', 'Id': '10899'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '183', 'Title': 'Number of possible search paths when searching in BST', 'LastEditDate': '2013-04-11T23:41:46.050', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6665', 'FavoriteCount': '1', 'Body': "<p>I have the following question, but don't have answer for this. I would appreciate if my method is correct :</p>\n\n<p>Q. When searching for the key value 60 in a binary search tree, nodes containing the key values 10, 20, 40, 50, 70, 80, 90 are traversed, not necessarily in the order given. How many different orders are possible in which these key values can occur on the search path from the root node containing the value 60? </p>\n\n<p>(A) 35 (B) 64 (C) 128 (D) 5040 </p>\n\n<p>From the question, I understand that all nodes given have to be included in traversal and ultimately we have to reach the key, 60. For example, one such combination would be : </p>\n\n<p>10, 20, 40, 50, 90, 80, 70, 60. </p>\n\n<p>Since we have to traverse all nodes given above, we have to start either with 10 or 90. If we start with 20, we will not reach 10 (since 60 > 20 and we will traverse right subtree of 20)</p>\n\n<p>Similarly, we cannot start with 80, because we will not be able to reach 90, since 80>60, we will traverse in left sub tree of 80 &amp; thus not reaching 90. </p>\n\n<p>Lets take 10. The remaining nodes are 20, 40, 50, 70, 80, 90. Next node could be either 20 or 90. We cannot take other nodes for same earlier mentioned reason.</p>\n\n<p>If we consider similarly, at each level we are having two choices. Since there are 7 nodes, two choices for first 6 &amp; no choice for last one. So there are totally </p>\n\n<p>$2*2*2*2*2*2*1$ permutations = $2^6$ = $64$</p>\n\n<ol>\n<li><p>Is this a correct answer?</p></li>\n<li><p>If not, whats the better approach?</p></li>\n<li><p>I would like to generalize. If $n$ nodes are given then total possible search paths would be $2^{n-1}$</p></li>\n</ol>\n", 'Tags': '<data-structures><combinatorics><binary-trees><search-trees><graph-traversal>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-11T23:41:46.050', 'CommentCount': '0', 'AcceptedAnswerId': '11048', 'CreationDate': '2013-04-05T07:42:32.627', 'Id': '11043'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let's say we a have flow network with $m$ edges and integer capacities. </p>\n\n<p>Prove that there exists a sequence of at most $m$ augmenting paths that yield the maximum flow.</p>\n\n<p>A good way to start thinking about this is to imagine that we know the maximum flow already.  How can we figure the sequence of $m$ paths?</p>\n", 'ViewCount': '310', 'Title': 'Maximum number of augmenting paths in a network flow', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-04-16T02:07:47.667', 'LastEditDate': '2013-04-15T08:17:49.407', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '11351', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Tags': '<graph-theory><combinatorics><network-flow>', 'CreationDate': '2013-04-13T16:06:42.840', 'Id': '11288'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '176', 'Title': 'What is a compact way to represent a partition of a set?', 'LastEditDate': '2013-04-16T00:36:16.213', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7741', 'FavoriteCount': '2', 'Body': '<p>There exist <a href="http://cs.stackexchange.com/q/3414/7741">efficient data\nstructures</a> for representing set\npartitions. These data structures have good time complexities for operations\nlike Union and Find, but they are not particularly space-efficient.</p>\n\n<p><strong>What is a space-efficient way to represent a partition of a set?</strong></p>\n\n<p>Here is one possible starting point:</p>\n\n<p>I know that the <a href="http://en.wikipedia.org/wiki/Partition_of_a_set#Counting_partitions">number of\npartitions</a>\nof a set with $N$ elements is $B_N$, the $N$-th <a href="http://en.wikipedia.org/wiki/Bell_number">Bell\nnumber</a>. So the optimal space\ncomplexity for representing a partition of a set with $N$ elements is\n$\\log_2(B_N)$ bits. To find such a representation, we could look for a\none-to-one mapping between (the set of partitions of a set of $N$ elements) and\n(the set of integers from $1$ to $B_N$).</p>\n\n<p>Is there such a mapping that is efficient to compute? What I mean by\n"efficient" is that I want to convert this compact representation\nto / from an easy-to-manipulate representation (such as a list of lists) in time\npolynomial in $N$ or $\\log_2(B_N)$.</p>\n', 'Tags': '<data-structures><combinatorics><space-complexity><sets><partitions>', 'LastEditorUserId': '7741', 'LastActivityDate': '2013-04-17T19:39:41.237', 'CommentCount': '1', 'AcceptedAnswerId': '11348', 'CreationDate': '2013-04-16T00:14:19.900', 'Id': '11345'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>For a regular language $L$, let $c_n(L)$ be the number of words in $L$ of length $n$. Using Jordan canonical form (applied to the unannotated transition matrix of some DFA for $L$), one can show that for large enough $n$,\n$$ c_n(L) = \\sum_{i=1}^k P_i(n) \\lambda_i^n, $$\nwhere $P_i$ are complex polynomials and $\\lambda_i$ are complex "eigenvalues". (For small $n$, we may have additional terms of the form $C_k[n=k]$, where $[n=k]$ is $1$ if $n=k$ and $0$ otherwise. These correspond to Jordan blocks of size at least $k+1$ with eigenvalue $0$.)</p>\n\n<p>This representation seems to imply that if $L$ is infinite then asymptotically, $c_n(L) \\sim C n^k \\lambda^n$ for some $C,\\lambda&gt;0$. However, this is patently false: for the language $L$ over $\\{0,1\\}$ of all words of even length, $c_{2n}(L) = 2^{2n}$ but $c_{2n+1}(L) = 0$. This suggests that for some $d$ and for all $a \\in \\{0,\\ldots,d-1\\}$, either $c_{dm+a}(L) = 0$ for large enough $m$ or $c_{dm+a} \\sim C_a (dm+a)^{k_a} \\lambda_a^{dm+a}$. This is proved in <a href="http://algo.inria.fr/flajolet/Publications/FlSe02.ps.gz">Flajolet &amp; Sedgewick</a> (Theorem V.3), who attribute the proof to Berstel.</p>\n\n<p>The proof provided by Flajolet and Sedgewick is somewhat technical; so technical, in fact, that they only sketch it. I attempted a more elementary proof using Perron-Frobenius theory. We can regard the transition graph of the DFA as a digraph. If the digraph is primitive then the result follows almost directly from the Perron-Frobenius theorem. If the digraph is irreducible but imprimitive with index $r$, then by considering the "$r$th power" of the DFA (each transition corresponds to $r$ symbols), we get the same result. The difficult case is when the digraph is reducible. We can reduce to the case of a path of strongly connected components, and then we get the result by estimating sums of the form\n$$ \\sum_{m_1+\\cdots+m_k=m} \\prod_{i=1}^k \\lambda_i^{m_i}. $$\n(Each such sum corresponds to a particular way of accepting a word, going through the different components in a certain way.) This sum, in turn, can be estimated by pinpointing the largest term, which corresponds to $m_i \\propto \\log \\lambda_i$. For every eigenvalue which is repeated $r$ times, we get an extra factor of $\\Theta(m^{r-1})$.</p>\n\n<p>The proof has its rough edges: in the reducible case, we need to pass from terms asymptotic to $C \\lambda_i^m$ to the sum mentioned above, and then we need to estimate the sum.</p>\n\n<p>The proof by Flajolet and Sedgewick is perhaps simpler, but less elementary. Its starting point is the rational generating function of $c_n(L)$, and it involves induction on the number of pole magnitudes (!). The basic idea is that all eigenvalues of maximal modulus are roots of unity (if normalized by their modulus), due to a (moderately easy) theorem of Berstel. Choosing an appropriate $d$ and looking at words of length $dm+a$, all these eigenvalues become real. Considering the partial fraction expansion, we get that if the eigenvalue of maximal modulus "survives", then it determines the asymptotics, which are of the form $Cn^k\\lambda^n$. Otherwise, we find a new rational generating function which corresponds just to words of this length (using an Hadamard product), and repeat the argument. The aforementioned quantity keeps decreasing, and so eventually we find the desired asymptotics; $d$ might have to grow in the process, to reflect everything that happens in the inductive steps.</p>\n\n<blockquote>\n  <p>Is there a simple and elementary proof for the asymptotic property of $c_n(L)$?</p>\n</blockquote>\n', 'ViewCount': '449', 'Title': 'Asymptotics of the number of words in a regular language of given length', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-27T16:50:23.943', 'LastEditDate': '2013-04-16T09:30:24.363', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '22', 'PostTypeId': '1', 'OwnerUserId': '683', 'Tags': '<formal-languages><reference-request><regular-languages><asymptotics><combinatorics>', 'CreationDate': '2013-04-16T01:37:16.013', 'FavoriteCount': '6', 'Id': '11350'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I need to construct d-regular expander graph for some small fixed d (like 3 or 4) of n vertices.</p>\n\n<p>What is the easiest method to do this in practice? \nConstructing a random d-regular graph, which is proven to be a.a.s. an expander?</p>\n\n<p>I also read about Margulis constructions and Ramanujan graphs that are expanders and a construction using a zig-zag product. Wikipedia gives a nice but very short overview: <a href="http://en.wikipedia.org/wiki/Expander_graph#cite_note-10">http://en.wikipedia.org/wiki/Expander_graph#cite_note-10</a>\nBut which method do I choose in practice?</p>\n\n<p>For me, these methods seem all very complicated to implement and in particular to understand and maybe quite specific.\nAren\'t there easier methods, maybe based on permutations or so, to practically generate a sequence of d-regular expander graphs?  </p>\n\n<p>Is it maybe easier to construct d-regular bipartite expander graphs?</p>\n\n<p>I also have another question: What about families of bad d-regular expanders? Does such a notion make sense? Can one construct a family of d-regular graphs (that are of course connected) that is as bad as possible in the sense of an expander?</p>\n\n<p>Thanks in advance.</p>\n', 'ViewCount': '200', 'Title': 'How to practically construct regular expander graphs?', 'LastEditorUserId': '7309', 'LastActivityDate': '2014-01-19T18:58:28.767', 'LastEditDate': '2013-04-24T16:42:32.183', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<graph-theory><combinatorics><cryptography><discrete-mathematics><expanders>', 'CreationDate': '2013-04-24T13:37:26.307', 'FavoriteCount': '3', 'Id': '11538'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Recently, I came across <a href="http://www.spoj.com/problems/HANOI/">this problem</a>, a variation of <a href="https://en.wikipedia.org/wiki/Towers_of_hanoi">towers of hanoi</a>.</p>\n\n<p>Problem statement:</p>\n\n<blockquote>\n  <p>Consider the folowing variation of the well know problem Towers of\n  Hanoi:</p>\n  \n  <p>We are given $n$ towers and m disks of sizes $1,2,3,\\dots,m$ stacked on some\n  towers. Your objective is to transfer all the disks to the $k^{\\text{th}}$ tower\n  in as few moves as you can manage, but taking into account the\n  following rules:</p>\n  \n  <ul>\n  <li>moving only one disk at a time, </li>\n  <li>never moving a larger disk one onto a\n  smaller one, </li>\n  <li>moving only between towers at distance at most $d$. </li>\n  </ul>\n  \n  <p>(Limits in the original problem:\n  $3 \\le n \\le 1000$ and $m \\le 100$. Number of test cases $\\le 1000$.\n  You can assume that all the problems can be solved in not more than\n  $20000$ moves.)</p>\n</blockquote>\n\n<p>It\'s an interesting one. The classic towers of hanoi problem has one source, destination and temporary tower that is used to move the disks from source to destination. The problem pitched on that site basically has an initial and final configuration. </p>\n\n<p>How does one approach this problem? </p>\n', 'ViewCount': '496', 'Title': 'Towers of Hanoi but with arbitrary initial and final configuration', 'LastEditorUserId': '139', 'LastActivityDate': '2013-10-26T23:48:26.990', 'LastEditDate': '2013-04-26T15:39:15.363', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '7905', 'Tags': '<algorithms><combinatorics><recursion>', 'CreationDate': '2013-04-26T06:26:18.847', 'FavoriteCount': '1', 'Id': '11562'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>In Bernard Chazelle\'s book <em>The Discrepancy Method</em>, which is <a href="http://www.cs.princeton.edu/~chazelle/pubs/book.pdf" rel="nofollow">available free as a PDF from the author\'s website</a>, the very first statement requiring thought by the reader (on page 3, just before Theorem 1) is obtained by a simple probability argument.  Unfortunately, I fail to follow the intended argument.  Could someone enlighten me?</p>\n\n<p>Here $\\chi(S_i) = \\sum_{v\\in S_i} \\chi(v)$ is the <em>discrepancy</em> of the set $S_i$ with respect to a function $\\chi$ that assigns weights to each element.</p>\n\n<blockquote>\n  <p>Given a set system $(V,S)$, with $|V| = n$ and $|S| = m$, pick a random coloring $\\chi$, meaning that for each $v_j$, the "color" $\\chi(v_j)$ is chosen randomly, uniformly, and independently, in $\\{-1,1\\}$.  We say that $S_i$ is <em>bad</em> if $|\\chi(S_i)| &gt; \\sqrt{2|S_i|\\ln (2m)}$.  By Chernoff\'s bound, we immediately derive\n  $$Pr[S_i \\text{ is bad}] &lt; \\frac{1}{m};$$</p>\n</blockquote>\n\n<p>and now the bit I don\'t follow:</p>\n\n<blockquote>\n  <p>therefore, with nonzero probability, no $S_i$ is bad.</p>\n</blockquote>\n\n<p>Clearly this holds if the $m$ events "$S_i$ is not bad" are mutually independent.  It also holds by a form of the <a href="http://en.wikipedia.org/wiki/Lov%C3%A1sz_local_lemma" rel="nofollow">Lov\xe1sz Local Lemma</a> if these events form the edges of a hypergraph (with $V$ as vertices) that is "nice enough".  But I don\'t see why this is immediately apparent in every case, as the author seems to imply.  If the $n$ individual values $\\chi(v_j)$ are iid, then I simply don\'t see that the $m$ events "$S_i$ is not bad" are necessarily of a nice enough form to use the probabilistic method, and they certainly don\'t seem to be iid.</p>\n\n<p>What am I missing?</p>\n\n<p>Any counterexample must be rather large (with the size of $m$ exponential in $|S_i|$), so I provisionally do believe the statement.  But I would like a convincing proof, or a pointer to another reference.</p>\n', 'ViewCount': '42', 'Title': "Chazelle's discrepancy book: greedy method", 'LastEditorUserId': '5323', 'LastActivityDate': '2013-05-03T10:18:17.243', 'LastEditDate': '2013-05-03T07:01:44.673', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11754', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '5323', 'Tags': '<reference-request><combinatorics><probability-theory><books>', 'CreationDate': '2013-05-03T06:55:55.880', 'Id': '11752'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am trying to solve a problem of finding incompatible jobs set using greedy algorithm. However, I am not sure if greedy algorithm can solve this problem or I need to perform another approach.</p>\n\n<p>I have a set of jobs with start and finish time and I want to find the smallest subset of this jobs such that all the jobs are incompatible with at least one job of this subset.</p>\n\n<p>Suppose</p>\n\n<pre><code>job  start   end\n1    1       3\n2    2       11\n3    4       6\n4    7       8\n</code></pre>\n\n<p>My required job set J is {2} since  all the jobs are incompatible with at least one job of the job set J. I tried to use greedy algorithm like sorting jobs by start time, end time ( adding one  and removing all the ones incompatible and so on) But it is not optimal. As you can see in this example. If I add job 1 and then remove all the job incompatible with it, I will remove job 2, Then I will have to add 3 and 4 in the jobset J.</p>\n\n<p>Am I going the right way?</p>\n', 'ViewCount': '200', 'Title': 'Issues with using greedy algorithm (Interval scheduling variant)', 'LastEditorUserId': '8153', 'LastActivityDate': '2013-05-14T22:45:50.280', 'LastEditDate': '2013-05-14T14:31:20.733', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '8153', 'Tags': '<algorithms><combinatorics><dynamic-programming><scheduling><greedy-algorithms>', 'CreationDate': '2013-05-14T04:16:16.893', 'Id': '12001'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>How to prove that the largest number of leaves in an $n$-tree of height $k$ is $k^n$?</p>\n', 'ViewCount': '236', 'Title': 'Proving that the largest number of leaves in an $n$-ary tree of height $k$ is $k^n$', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-22T17:24:20.150', 'LastEditDate': '2013-05-22T02:31:34.160', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '-4', 'PostTypeId': '1', 'OwnerUserId': '8284', 'Tags': '<combinatorics><trees><discrete-mathematics>', 'CreationDate': '2013-05-21T17:05:29.760', 'Id': '12196'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '185', 'Title': 'Team construction in tri-partite graph', 'LastEditDate': '2013-06-05T04:54:04.320', 'AnswerCount': '5', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1342', 'FavoriteCount': '1', 'Body': '<p>The government wants to create a team with one <em>alchemist</em>, one <em>builder</em>, and one <em>computer-scientist</em>. </p>\n\n<p>In order to have good cooperation, it is important that the 3 team-members like each other. </p>\n\n<p>Therefore, the government gathers $k$ candidates of each profession, and creates their "liking" graph. This is a tri-partite graph, where there is an edge between $a$ and $b$ iff $a$ likes $b$.</p>\n\n<p>(Note that the "like" relation is symmetric but not transitive, i.e.: if $a$ likes $b$ then $b$ likes $a$, but if $a$ likes $b$ and $b$ likes $c$, then not necessarily $a$ likes $c$).</p>\n\n<p>Is this always possible to create a team? Of course not. For example, it is possible that no alchemist likes any builder.</p>\n\n<p>However, suppose the "liking" graph has the following property: <em>in each group of 3 alchemists and 3 builders, there is at least a single alchemist-builder pair that like each other; ditto for alchemists-computerists and builders-computerists</em>.</p>\n\n<p>Given this property, is this always possible to create a team where all 3 members like each other? If so, what is the minimum number of candidates of each type ($k$) that the government will have to gather?</p>\n\n<p>I would like to both find k and prove that it is the minimum.</p>\n\n<p>A possibly related sub-question is: in a group of $k$ alchemists and $k$ builders, what is the minimum number of pairs that like each other? For $k=3$, by the assumption of the question, that number is 1. What about $k&gt;3$?</p>\n\n<p>A third question is: what is the name of this kind of problems?</p>\n', 'Tags': '<graph-theory><graphs><combinatorics>', 'LastEditorUserId': '1342', 'LastActivityDate': '2013-06-27T12:54:50.907', 'CommentCount': '8', 'AcceptedAnswerId': '12926', 'CreationDate': '2013-05-25T19:02:19.567', 'Id': '12275'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>In the 8-queen puzzle, to reduce the search space, we can use an incremental approach. We put the first queen in the first column, then the 2nd queen in the 2nd column etc., avoiding the slots that are already being occupied.</p>\n\n<p>According to Peter Norvig's book, there are only 2057 possible sequences. Where does that number come from?</p>\n", 'ViewCount': '200', 'Title': 'Why is the size of the search space 2057 in the 8-queen puzzle?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-28T00:12:03.727', 'LastEditDate': '2013-05-28T00:12:03.727', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '-1', 'OwnerDisplayName': 'Dzung Nguyen', 'PostTypeId': '1', 'OwnerUserId': '14583', 'Tags': '<combinatorics><artificial-intelligence>', 'CreationDate': '2013-05-23T16:20:13.003', 'Id': '12317'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Recently I got interested in a game called <a href="http://en.wikipedia.org/wiki/Toads_and_Frogs_%28game%29" rel="nofollow">Toads and Frogs</a> and I\'m trying my best to come up with some software which would be able to beat an average (i.e. not knowing the strategy) human though I\'m struggling with the strategy.</p>\n\n<p>I read on it everything I could google out but turns out there\'s not that much to read about it as one may think - the most helpful thing I\'ve found was probably an <a href="http://compgeom.cs.uiuc.edu/~jeffe/pubs/pdf/toads.pdf" rel="nofollow">analysis by Erickson</a> though it concentrates more on evaluating each position rather than some algorithm which would have to decide how to move a toad or a frog given a particular board as input. Same goes for "Winning Ways", where they evaluate a bunch of positions but don\'t give you too much insight on how to optimally play your game</p>\n\n<p>The best playthrough strategy I could come up with is evaluating the value of the current  position (using "Winning Ways" and Erickson\'s tricks), evaluating the values of all the positions we can go to with  our toads/frogs in a given moment and then performing a move which leads to the lowest  value of the board so that our opponent has the worst moves to choose  from. </p>\n\n<p>Is there anything better? Or if all the "good" strategies are very hard (as I said, I\'m just starting out with my game theory interest), what\'s the best one that even someone with my experience could utilize? :)</p>\n', 'ViewCount': '218', 'Title': 'Finding a winning strategy for toads and frogs', 'LastEditorUserId': '5281', 'LastActivityDate': '2013-06-05T16:04:19.097', 'LastEditDate': '2013-06-05T13:20:39.710', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '12473', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '5281', 'Tags': '<algorithms><combinatorics><game-theory>', 'CreationDate': '2013-06-05T12:37:00.333', 'Id': '12471'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>How can I find the serial number of an n-choose-k combination?</p>\n\n<p>I would like a function that gets as input:</p>\n\n<ul>\n<li>$n$,</li>\n<li>$k$, </li>\n<li>a set of $k$ elements out of the set ${0, 1, ... n-1}$.</li>\n</ul>\n\n<p>The output should be a number in the range $[0, C(n,k)-1]$, such that:</p>\n\n<ul>\n<li>Each different combination gets a different number;</li>\n<li>All numbers in the range are covered (i.e. no holes in the index).</li>\n</ul>\n\n<p>For example, for $n=3$, $k=2$, the function could be:</p>\n\n<p>$serial(3, 2, {a,b}) = (a+b-1)$</p>\n\n<p>Since there are only 3 combinations, and their sum is different. Obviously, this doesn't generalize to larger n and k.</p>\n\n<p>One solution is: at the beginning of the program, loop over all combinations, and create a static map from a combination to its index. However, this is very inefficient when n is large.</p>\n", 'ViewCount': '62', 'Title': 'serial number of combination', 'LastActivityDate': '2013-06-09T16:05:02.000', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12577', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<combinatorics>', 'CreationDate': '2013-06-09T14:50:10.480', 'FavoriteCount': '1', 'Id': '12574'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>We define an <strong>onto</strong> function from $[n] \\times [n]$ to $[n-2] \\cup \\{0\\}$ as follows, where $[n] = \\{1,2,3,\\ldots ,n\\}$,</p>\n\n<p>$$f : [n] \\times [n] \\rightarrow [n-2] \\cup \\{0\\}.$$</p>\n\n<p>1) $f(x,x) = 0$.</p>\n\n<p>2) $f(x,y) = f(y,x) &gt; 0$, for $y \u2260 x$.</p>\n\n<p>3) $f(x,y) \\leq \\max\\{f(x,z),f(z,y)\\}$ for all $x,y,z$ belonging to $[n]$.</p>\n\n<p>How many such functions are possible for a given $n$? I have tried my best but I am not able to get any close to the solution! One may even see it as a undirected simple graph with n vertices, f(x,y) representing the edge weights. Any help is appreciated!</p>\n\n<p>EDIT: i have been able to find that there are no such functions for n&lt;3.</p>\n\n<p>for n=3 we have one such function, for n=4, 13 are possible. </p>\n', 'ViewCount': '344', 'Title': 'Count number of special onto functions', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-15T21:05:56.520', 'LastEditDate': '2013-06-15T21:05:56.520', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '12644', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8636', 'Tags': '<combinatorics><permutations>', 'CreationDate': '2013-06-12T12:04:01.787', 'Id': '12636'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have this problem, maybe anybody could help. </p>\n\n<p>Given a graph $G = (V, E)$ and an integer $k \\geq 1$, find the minimum number $l$ of vertices to remove to make the largest connected component of $G \\setminus \\{v_1, \\dots,v_l\\}$ have at most $k$ vertices.</p>\n\n<p>I wonder it this problem can be solved quickly (in polynomial time)?</p>\n\n<p>(Related: <a href="http://cs.stackexchange.com/questions/12789/find-which-vertices-to-delete-from-graph-to-get-smallest-largest-component">finding the vertices when $k$ is small</a>)</p>\n', 'ViewCount': '126', 'LastEditorDisplayName': 'user742', 'Title': 'Minimum number of vertices to remove to bound the largest connected component of a graph', 'LastActivityDate': '2013-09-20T09:28:50.637', 'LastEditDate': '2013-09-20T09:28:50.637', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '12784', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8770', 'Tags': '<graph-theory><np-complete><combinatorics>', 'CreationDate': '2013-06-20T08:47:37.500', 'Id': '12783'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have been searching for long but unable to find a solution for this. My question is "Suppose you have n street lights(cannot be moved) and if you get any m from them then it should have atleast k working.Now in how many ways can this be done"</p>\n\n<p>This seems to be a combination problem, but the problem here is "m" must be sequential.</p>\n\n<p>Eg: 1 2 3 4 5 6 7 (Street lamps) \nLet m=3 \nThen the valid sets are,<br>\n1 2 3<br>\n2 3 4<br>\n3 4 5<br>\n4 5 6<br>\n5 6 7<br></p>\n\n<p>Whereas, 1 2 4 and so are invalid selections.<br><br></p>\n\n<p>So every set must have atleast 2 working lights. I have figured how to find the minimum lamps required to satisfy the condition but how can I find the number of ways in it can be done ?<br></p>\n\n<p>There should certainly some formula to do this but I am unable to find it.. :(<br></p>\n\n<p>Eg: Let n=7,m=4,k=3. The minimum number of lights that must be working to satisfy the condition that "atleast 3 of any 4 lights must be working" is 5. It is if 23467 are working. But there are more ways in which it can be satisfied like if 23467,13457... We have 4 such combinations in all for the taken values of n,m,k. I want to know how can we generalize this?</p>\n\n<p>Can be represented like this :\nn => 1111111<br>\n1 Indicates light working and 0 indicated not working.<br>\n0111110<br>\n0111011<br>\n1011101<br>\n1011110<br></p>\n\n<p>Hope the question is clear.</p>\n', 'ViewCount': '45', 'Title': 'Combination with a minimum number of elements in a fixed length subset', 'LastActivityDate': '2013-06-25T17:01:09.710', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8831', 'Tags': '<algorithms><logic><combinatorics>', 'CreationDate': '2013-06-24T07:59:15.317', 'Id': '12855'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Could anyone help me please to find who was the first person who has proved that the language of all borderless words is not regular and when was that? Could you mention the reference, please?</p>\n\n<p>A word $w$ has a border $u$ if $u$ is both prefix and suffix of $w$ (and $u$ does not equal $\\lambda$ or $w$). </p>\n', 'ViewCount': '75', 'Title': 'The language of all borderless words', 'LastEditorUserId': '4287', 'LastActivityDate': '2013-07-04T08:10:49.713', 'LastEditDate': '2013-07-02T13:59:18.573', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8954', 'Tags': '<regular-languages><pumping-lemma><word-combinatorics>', 'CreationDate': '2013-07-02T10:05:46.077', 'Id': '13035'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '447', 'Title': 'Dynamic Programming To calculate the combinations', 'LastEditDate': '2013-07-03T05:05:31.327', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Body': '<p>This is a problem from a past contest at topcoder : <a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=12338" rel="nofollow">Problem</a>.</p>\n\n<p>Its solution is given here : <a href="http://apps.topcoder.com/wiki/display/tc/SRM+566" rel="nofollow">Solution [Scroll Down to Penguin Emperor]</a></p>\n\n<p>I am unable to understand how the section with subheading "Combinations are associative" works. What is actually going on in this step ? How is the convolution property being used ? Or the Associative property of Combination ? How is the exponentiation squaring being performed ?</p>\n\n<p><strong>EDIT</strong></p>\n\n<p><em>Problem Statement</em> </p>\n\n<p>You are Given N cities numbered from 0 to N-1 in a circular order.\nYou are currently at city index 0.\nOn <strong>first</strong> day you can move from your your current city with index <strong>i</strong> to a city with index <strong>j</strong> such that </p>\n\n<pre><code>j = (i+N-1)MOD N \nor\nj = (i+1)MOD N  \n</code></pre>\n\n<p>On <strong>second</strong> day you can move from your your current city with index <strong>i</strong> to a city with index <strong>j</strong> such that </p>\n\n<pre><code>j = (i+N-2)MOD N \nor\nj = (i+2)MOD N  \n</code></pre>\n\n<p>and so on. So on Day <strong>x</strong>, you can move from your your current city with index <strong>i</strong> to a city with index <strong>j</strong> such that </p>\n\n<pre><code>j = (i+N-(X MOD N))MOD N \nor\nj = (i+(X MOD N))MOD N \n</code></pre>\n\n<p>You <strong>have</strong> to travel on each day.</p>\n\n<p>Given the number of Days <strong>M</strong>, find the total number of ways, you can travel starting from city index 0 such that at the end of M days you are back to city index 0 , modulo 1000000007.</p>\n\n<p>The solution given is as following :</p>\n\n<pre><code>final int MOD = 1000000007;\n// Discrete convolution:\nint[] combine(int[] A, int[] B)\n{\n    int n = A.length;\n    int[] C = new int[n];\n    // Skipping when B[i] = 0, is a key optimization:\n    for (int i=0; i&lt;n; i++) if (B[i] != 0) {\n        for (int j=0; j&lt;n; j++) {\n            int k = (j - i + n) % n;\n            C[k] += (int)( (A[j]*(long)B[i]) % MOD );\n            if (C[k] &gt;= MOD) {\n                C[k] -= MOD;\n            }\n        }\n    }\n    return C;\n}\n// Exponentiation by squaring, for our convolution operation:\nint[] power(int[] A, long x)\n{\n    int n = A.length;\n    int[] R = new int[n];\n    R[0] = 1;\n    while (x &gt; 0) {\n        if ( (x &amp; 1) != 0) {\n            R = combine(R, A);\n        }\n        A = combine(A, A);\n        x &gt;&gt;= 1;\n    }\n    return R;\n}\n\npublic int countJourneys(int numCities, long  daysPassed)\n{\n    // Generate R and Q:\n    int[] Q;\n    int[] R = new int[numCities];\n    R[0] = 1;\n    Q = R;\n    for (int i=1; i&lt;=numCities; i++) {\n        //B holds T[i]\n        int[] B = new int[numCities];\n        B[i % numCities] = 1;\n        B[numCities - i] = 1;\n\n        R = combine(R, B);\n\n        if (i == daysPassed % numCities) {\n            Q = R;\n        }\n    }\n    R = power(R, daysPassed / numCities);\n    R = combine(R, Q);\n    return R[0];\n}\n</code></pre>\n\n<p>countJourneys(N, M) is called to get the answer.</p>\n', 'ClosedDate': '2013-07-16T10:21:00.390', 'Tags': '<combinatorics><dynamic-programming>', 'LastEditorUserId': '8655', 'LastActivityDate': '2013-07-03T05:55:13.927', 'CommentCount': '7', 'AcceptedAnswerId': '13046', 'CreationDate': '2013-07-02T16:05:27.457', 'Id': '13039'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I've developed the following backtrack algorithm, and I'm trying to find out it time complexity.</p>\n\n<p>A set of $K$ integers defines a set of modular distances between all pairs of them. In this\nalgorithm, I considered the inverse problem of reconstructing all integer sets which realize a given distance multiset. i.e. :</p>\n\n<p><br>\nInputs: $D=\\{p_i\u2212p_j \\mod N, i\u2260j \\},K $\n<br>\nOutput : $P=\\{p_1,p_2,...,p_K\\},\\qquad p_i \\in \\{0,1,2,...,N-1\\},\\qquad p_i &gt; p_j $ for $i&gt;j$\n<br></p>\n\n<p>Simply saying, the algorithm puts $K$ blanks to be filled. Initially, puts 1 in the first blank. For the second blank it looks for the first integer that if we add to P, it doesn't produce any difference exceeding the existent differences in $D$. Then, it does so, for next blanks. While filling a blank if it checked all possible integers and found no suitable integer for that blank, it turns back to the previous blank and looks for next suitable integer for it. If all blanks are filled, it has finished his job, otherwise it means that there weren't any possible $P$'s for this $D$.</p>\n\n<p>Here's my analysis so far.\nSince the algorithm checks at most all members of $\\{2,...,N\\}$ for each blank (upper bound) there is $N-1$ search for each blank. If each visited blank was filled in visiting time, the complexity would be $O((K-1)(N-1))$ since we have $K-1$ blank (assuming first one is filled with 1). But the algorithm is more complex since for some blanks it goes backward and some blanks may be visited more that once. I'm looking for the worst case complexity i.e. the case that all blanks are visited and no solution is found.</p>\n", 'ViewCount': '1179', 'Title': 'Time complexity of a backtrack algorithm', 'LastEditorUserId': '9098', 'LastActivityDate': '2013-07-13T23:34:21.333', 'LastEditDate': '2013-07-12T07:56:41.700', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9098', 'Tags': '<algorithms><algorithm-analysis><combinatorics><search-algorithms><greedy-algorithms>', 'CreationDate': '2013-07-09T18:22:51.307', 'FavoriteCount': '2', 'Id': '13181'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am not entirely sure if the title is the correct way to phrase what is occurring. There is a recurring process which I decided to attempt to model using production rules similar to those used in a context-free grammar.</p>\n\n<p>The real world process is a production line. It takes 1 unit, after 2 weeks, produces 1 unit, after 4 weeks, that unit will produce another unit - and also 2 of the starting units. After 4 weeks the "another unit" will produce "that unit" - and also 3 of the starting units. This continues semi indefinitely, but the range I am looking at is roughly 52 weeks.</p>\n\n<p>I came up with this model of production rules</p>\n\n<p>$S\\rightarrow A$</p>\n\n<p>$A\\rightarrow S^2B$</p>\n\n<p>$B\\rightarrow S^3A$</p>\n\n<p>I attempted to expand this so that I could formulate a generating function and solve for n=52 (52 being the 1 year mark).</p>\n\n<p>$S$,$A$,$S^2B$,$S^5A$,$S^7B$, ...</p>\n\n<p>However, I was unable to determine if I was taking the correct approach to solving this situation. I believe that an error here lies in the fact that the duration of time is ignored. Namely that from $S\\rightarrow A$ 2 weeks elapse, from $A\\rightarrow S^2B$ 4 weeks elapse, and from $B\\rightarrow S^3A$ 4 weeks elapse.</p>\n\n<p>In order to better understand this situation, I decided to code an example so I could at least see the totals. However, it did not lend itself to producing a summation function.</p>\n\n<p>So, given all this, how is it possible to come up with a summation function instead of having to manually iterate through it like this c# approach does? Or, is there a similar/alternate approach to modeling this which will allow an easier summation process?</p>\n\n<p>Please feel free to correct any misunderstandings I may have.</p>\n\n<p><strong>edits</strong></p>\n\n<p>For example:</p>\n\n<p>Week 1: We have 1 unit (S). It sits for 2 weeks until it is ready to become 1 of the next type(A).</p>\n\n<p>Week 3: The first unit is now here. It sits for 4 weeks until it is ready to become 1 of the next type(A). At that time, it also becomes 2 of the first type(S).</p>\n\n<p>Week 7: The unit from Week 3 has now become 2 of the first type of unit(S). It also created 1 of the second type(A). The 2 units of type S will now sit for 2 weeks until they make 2 units of type A. The 1 unit of type A will now sit for 4 weeks until it makes 1 unit of type B and 2 units of type S.</p>\n\n<p>Week 9: The 2 units of type S from week 7 have now sat for 2 weeks. Now they have become 2 units of type A. These two units of type A will sit for 4 weeks and produce 4 units of type S and 2 units of type B.</p>\n\n<p>Week 11: The 1 unit of type A from week 7 has now sat for 4 weeks and has now made 1 unit of type B and 2 units of type S. The 1 unit of type B will sit for 4 weeks and then make 1 unit of type A and 3 units of type S. The 2 units of type S will now sit for 2 weeks and make 2 units of type A.</p>\n\n<p>Also, the 2 units of type S from week 9 have now sat for 2 weeks and become 2 units of type A. These two units will sit for 4 weeks and become 2 units of type B and will also become 6 units of type S.</p>\n\n<p>etc.</p>\n\n<p>This can perhaps be represented by a series of recurring relations</p>\n\n<p>$s(n) = a(n) + b(n) + c(n)$</p>\n\n<p>$a(n) = 2*b(n-4) + 3*c(n-4)$</p>\n\n<p>$b(n) = a(n-2) + c(n-4)$</p>\n\n<p>$c(n) = b(n-4)$</p>\n\n<p>where</p>\n\n<p>$s(n) = a(n) = b(n) = c(n) = 0$ for $n &lt; 1$</p>\n\n<p>$a(1) = 1$</p>\n', 'ViewCount': '86', 'Title': 'How can I produce a summation function from this set of production rules for a grammar?', 'LastEditorUserId': '9118', 'LastActivityDate': '2013-07-30T13:33:51.537', 'LastEditDate': '2013-07-11T18:54:36.783', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '13216', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9118', 'Tags': '<context-free><formal-grammars><combinatorics>', 'CreationDate': '2013-07-10T19:39:52.290', 'Id': '13213'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '151', 'Title': 'Recurrence formula for a known sequence?', 'LastEditDate': '2013-07-13T22:32:30.113', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9000', 'FavoriteCount': '1', 'Body': "<p>Problem: How do we can generate some mathematical close form of the following sequence, which has following 256 entries:</p>\n\n<p>1   7   7   7   7   9   9   9   7   9   9   9   7   9   9   9   7   11  11  11  11  13  13  13  11  13  13  13  11  13  13  13  7   11  11  11  11  13  13  13  11  13  13  13  11  13  13  13  7   11  11  11  11  13  13  13  11  13  13  13  11  13  13  13  7   11  11  11  11  13  13  13  11  13  13  13  11  13  13  13  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  7   11  11  11  11  13  13  13  11  13  13  13  11  13  13  13  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  7   11  11  11  11  13  13  13  11  13  13  13  11  13  13  13  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15  9   13  13  13  13  15  15  15  13  15  15  15  13  15  15  15</p>\n\n<p>Origin/background of Problem:\n                              These number are generated from a divide and conquer algorithm. For example if we have a 8 bit binary-string and we are asked to find the location of 1's in minimal number of questions then, the above sequence is the # of questions asked for each possible binary 8-bit word i.e from 00000000, 00000001 ....11111111 the corresponding # of questions are elements of above sequence i.e 1,7,..15, respectively.</p>\n\n<p>Algorithm:</p>\n\n<p>Lets take 0000 0001, for instance:</p>\n\n<p>1) First question: Is it (i-e 0000 0001) equal to ZERO (i-e 0000 0000) ? The answer is No, for our case. </p>\n\n<p>2) Then divide the original 8 bit word into two 4 bit segments, and again ask the same question for each of the two 4 bit words. So for our case it would be YES for the first segment (0000) and NO for the other segment (0001)?</p>\n\n<p>3) Now, this time I will be questioning only the segment where I got NO. In our case it was 0001. Then, I will now again divide  this 4-bit segment into two segments and pose the same question. Hence, is 00 equal to ZERO? answer : YES. For the other segment , 01, the answer is NO.</p>\n\n<p>4) This is the final step. I will again divide the 2-bit word into two 1-bits, i-e 0 and 1. So, my first question: is 0 equal to 0? answer is YES. And for the other remaining bit, is 1 equal to 0? Answer is NO.</p>\n\n<p>So, I asked a total of 7 questions to find the location of 1 in a binary word of 0000 0001. Similarly, we will go through other binary words.</p>\n", 'Tags': '<combinatorics><recurrence-relation>', 'LastEditorUserId': '9000', 'LastActivityDate': '2013-07-13T22:32:30.113', 'CommentCount': '11', 'AcceptedAnswerId': '13263', 'CreationDate': '2013-07-10T23:28:41.760', 'Id': '13218'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given two sets of vertices $U$ (size $n$) and $V$ (size $m$), how many possibilities of set of edges $E$ exist that make the bipartite graph $G = (U, V, E)$ connected?</p>\n\n<p>Obviously there are $2^{n m}$ different set of edges but many will be disconnected.</p>\n', 'ViewCount': '133', 'Title': 'Number of Combinations of Connected Bipartite Graphs', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-16T11:09:14.920', 'LastEditDate': '2013-07-12T13:42:57.077', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '13297', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9133', 'Tags': '<graph-theory><combinatorics>', 'CreationDate': '2013-07-11T15:33:50.653', 'Id': '13229'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>This problem is the same as\nnumber of ways to partition n into exactly m parts. </p>\n\n<p>The recurrence given in <a href="http://en.wikipedia.org/wiki/Partition_%28number_theory%29#Intermediate_function" rel="nofollow">Wikipedia</a> has </p>\n\n<p>p(n,k) =  the number of partitions of n using only natural numbers \u2265 k </p>\n\n<p>How to find no of partitions of n which has exactly k non-zero parts? Is there a recurrence relation to solve this?</p>\n', 'ViewCount': '97', 'ClosedDate': '2013-08-11T16:41:29.990', 'Title': 'No of ways in which n indistinguishable items can be placed in m indistinguishable boxes', 'LastActivityDate': '2013-08-11T16:27:34.213', 'AnswerCount': '1', 'CommentCount': '15', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4980', 'Tags': '<combinatorics><discrete-mathematics>', 'CreationDate': '2013-08-04T14:09:43.667', 'Id': '13597'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '189', 'Title': 'When testing n items, how to cover all t-subsets by as few s-subsets as possible?', 'LastEditDate': '2013-08-17T13:23:45.250', 'AnswerCount': '3', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '6850', 'FavoriteCount': '1', 'Body': '<p>This problem arose from software testing. The problem is a bit difficult to explain. I will first give an example, then try to generalize the problem.</p>\n\n<p>There are 10 items to be tested, say A to J, and a testing tool that can test 3 items at the same time. Order of items in the testing tool does not matter. Of course, for exhaustive testing, we need $^{10}C_{3}$ combinations of items.</p>\n\n<p>The problem is more complex. There is an additional condition that once a pair of items has been tested together, than the same pair does not need to be tested again.</p>\n\n<p>For example, once we executed the following three tests:</p>\n\n<p>A B C</p>\n\n<p>A D E</p>\n\n<p>B D F</p>\n\n<p>we do not have to execute:</p>\n\n<p>A B D</p>\n\n<p>because the pair A,B was covered by the first test case, A,D was covered by the second, and B,D was covered by the third.</p>\n\n<p>So the problem is, what is the minimum number of test cases that we need to ensure that all pairs are tested?</p>\n\n<p>To generalize, if we have n items, s can be tested at the same time, and we need to ensure that all possible t tuples are tested (such that s > t), what is the minimum number of test cases that we need in terms of n, s and t?</p>\n\n<p>And finally, what would be a good algorithm to generate the required test cases?</p>\n', 'Tags': '<algorithms><combinatorics><software-testing>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-11T09:46:09.560', 'CommentCount': '4', 'AcceptedAnswerId': '13797', 'CreationDate': '2013-08-17T09:47:04.113', 'Id': '13788'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am new to this and an amateur... please help.</p>\n\n<p><strong>My Question in practical terms:</strong>\nGiven The three following inputs... determine the number of <em>unique</em> group arrangements as an ordered set.</p>\n\n<p><strong>INPUT:</strong>\n\'a\' = Students\n\'b\' = Groups\n\'c\' = students per group</p>\n\n<p><strong>OUPUT ANSWER:</strong>\n\'z\' as an integer</p>\n\n<p><strong>OUTPUT RULES:</strong>\n - All elements considered are ordered from left to right starting with the smallest number.\n - Order is not important... (1,2,3)=(2,3,1)=(3,2,1)=(3,1,2)=(1,3,2)=(2,1,3)...THEREFORE (1,2,3) is the only unique group that is to be counted.</p>\n\n<hr>\n\n<p><strong>Problem Example #1:</strong>\nI have 12 students that I need to arrange into 4 groups.  I want the 4 groups to each contain 3 students with no student appearing in more than one group. How many arrangements are there? In this instance there are 880 ordered arrangements. \n[Output Format: (1,2,3)(4,5,6)(7,8,9)(10,11,12)]</p>\n\n<p><strong>Problem Example #2:</strong>\nI have 12 students that I need to arrange into 3 groups.  I want the 3 groups to each contain 2 students with no student appearing in more than one group. How many arrangements are there? In this instance there are 13,860 ordered arrangements.\n[Output Format: (1,4)(3,6)(7,11)]</p>\n\n<p><strong>Problem Example #3:</strong>\nI have 24 students that I need to arrange into 3 groups.  I want the 3 groups to each contain 6 students with no student appearing in more than one group. How many arrangements are there? In this instance there are 125,847,260 ordered arrangements.\n[Output Format: (1,2,3,4,5,6)(9,10,11,12,13)(15,16,17,18,19,20)]</p>\n\n<hr>\n\n<p>Unless I am mistaken, these are not \'combinations\' or \'permutation\'s or \'complete sets\' or \'hoyosa index\'.  So, for lack of better terms I am calling them <em>ordered sets within ordered groups</em> for now. </p>\n\n<p>Is there a known formula to generate the answer without generating all possible solutions and searching? </p>\n\n<p><strong>20130822---ADDENDUM---</strong>\nThe numbers provided are accurate. The closest description tat I can call relate this to would be "Independent Edge Set AKA Matching"... except that I BELIEVE matching has a limit of two students per group. Sticking to the "Two Students per group" this can be determined using factorials similar to those you have provided.  HOWEVER, I cannot find a formula that allows for the three INPUTS a,b,c as provided and ONLY accounts for unique ordered sets. </p>\n\n<p>Using Problem Example #2:  12 Students (a), 2 groups (b), 3 students (c), = 13,860 unique ordered sets\nSet #1[(1,2,3,)(4,5,6)]\nSet #2[(1,2,3,)(4,5,7)]\nSet #3[(1,2,3,)(4,5,8)]\n... Set #13,860 [(7,8,9)(10,11,12)]</p>\n', 'ViewCount': '76', 'Title': "Is there a formula to state the number of 'sets' of 'ordered sets within ordered groups'?", 'LastEditorUserId': '9773', 'LastActivityDate': '2013-08-22T17:41:58.063', 'LastEditDate': '2013-08-22T15:45:07.363', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '13872', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9773', 'Tags': '<combinatorics><sets><matching>', 'CreationDate': '2013-08-21T22:05:30.310', 'Id': '13861'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Ramsey's theorem states that every graph with $n$ nodes contains either a clique or an independent set with at least $\\frac{1}{2}\\log_2 n$ nodes.</p>\n\n<p>I tried to look it up at a few places (including Sipser) but I could not make out a lot of sense from the proofs. I would appreciate it if someone can give me a proof (or clear intuition) on this.</p>\n", 'ViewCount': '259', 'Title': "Proof of Ramsey's theorem: the number of cliques or anti cliques in a graph", 'LastEditorUserId': '472', 'LastActivityDate': '2013-08-26T15:30:54.327', 'LastEditDate': '2013-08-25T11:36:47.523', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '13921', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '9736', 'Tags': '<graph-theory><proof-techniques><combinatorics><discrete-mathematics>', 'CreationDate': '2013-08-25T08:49:06.623', 'Id': '13920'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given two integers $n$ and $m$, how many numbers exist such that all integers have all digits from $0$ to $n-1$, the difference between two adjacent digits is exactly $1$, and the number of digits in the integer is at most $m$?</p>\n\n<p>The integer cannot start with a $0$. All digits from $0$ to $n-1$ must be present.</p>\n\n<p>Example: for $n = 3$ and $m = 6$ there are $18$ such numbers ($210, 2101, 21012, 210121 \\ldots$)</p>\n\n<p>I know there is a dynamic programming method to solve this. After looking the solution, I am not able to understand it. Can anybody please give any good solution to me?</p>\n', 'ViewCount': '78', 'Title': 'Count the number of integers satisfying two conditions using DP', 'LastEditorUserId': '472', 'LastActivityDate': '2013-08-29T10:35:38.797', 'LastEditDate': '2013-08-29T10:35:38.797', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '14005', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8819', 'Tags': '<algorithms><combinatorics><dynamic-programming>', 'CreationDate': '2013-08-28T20:32:31.977', 'Id': '14002'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let's say we have an inequality, $p \\le {a \\choose b}$ where $p$ is a fixed constant and $a, b$ are variables. The problem is that, we are trying to find the minimum $a$ with respect to the inequality $p \\le {a \\choose b}$. Is there a closed form solution (can be approximate as well/doesn't have to be exact) for that combinatorial optimization problem? </p>\n", 'ViewCount': '62', 'Title': 'Solution for a combinatorial minimization problem', 'LastActivityDate': '2013-09-05T14:11:02.100', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '14138', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2956', 'Tags': '<optimization><combinatorics>', 'CreationDate': '2013-09-04T23:03:35.267', 'Id': '14135'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '117', 'Title': 'Probability that a uniformly random sequence is already sorted', 'LastEditDate': '2013-09-09T02:32:58.133', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1198', 'FavoriteCount': '1', 'Body': "<p>Now I tried tackling this question from different perspectives (and already asked a couple of questions here and there), but perhaps only now can I formulate it well and ask you (since I have no good ideas).</p>\n\n<p>Let there be $k, n \\in\\mathbb{Z_+}$. These are fixed.</p>\n\n<p>Consider a set of $k$ integers $S=\\{0, 1, 2, ... k-1\\}$.</p>\n\n<p>We form a sequence  $a_1, a_2, ..., a_n$ by picking numbers from $S$ at random with equal probability $1/k$.</p>\n\n<p>The question is - what is the probability of that sequence to be sorted ascending, i.e. $a_1 \\leq a_2 \\leq ... \\leq a_n$? </p>\n\n<p>Case $k \\to \\infty$:</p>\n\n<p>This allows us to assume (with probability tending to $1$) that all elements $a_1, ..., a_n$ are different. It means that only one ordering out of $n!$ possible is sorted ascending. </p>\n\n<p>And since all orderings are equally likely (not sure why though), the probability of the sequence to be sorted is</p>\n\n<p>$$\\frac{1}{n!}.$$</p>\n\n<p>Case k = 2:</p>\n\n<p>Now we have zeroes and ones which come to the resulting sequence with probability $0.5$ each. So the probability of any particular n-sequence is $\\frac{1}{2^n}$. </p>\n\n<p>Let us count the number of possible sorted sequences:</p>\n\n<p>$$0, 0, 0, \\ldots, 0, 0$$\n$$0, 0, 0, \\ldots, 0, 1$$\n$$0, 0, 0, \\ldots, 1, 1$$\n$$\\ldots$$\n$$0, 0, 1, \\ldots, 1, 1$$\n$$0, 1, 1, \\ldots, 1, 1$$\n$$1, 1, 1, \\ldots, 1, 1$$</p>\n\n<p>These total to $(n+1)$ possible sequences. Now again, any sequence is equally likely, so the probability of the sequence to be sorted is </p>\n\n<p>$$ \\frac{n+1}{2^n}. $$</p>\n\n<p>Question:</p>\n\n<p>I have no idea how to generalize it well for arbitrary $k, n$. Maybe we can tackle it together since my mathematical skills aren't really that high. </p>\n", 'Tags': '<combinatorics><probability-theory><sorting>', 'LastEditorUserId': '755', 'LastActivityDate': '2013-09-09T02:32:58.133', 'CommentCount': '0', 'AcceptedAnswerId': '14211', 'CreationDate': '2013-09-08T07:29:56.110', 'Id': '14209'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m looking for an algorithm that provides a <a href="http://en.wikipedia.org/wiki/Graph_canonization" rel="nofollow">canonical string</a> for a given colored graph. Ie. an algorithm that returns a string for a graph, such that two graphs get the same string if and only if they are isomorphic. </p>\n\n<p>In particular, I\'m looking for a simple algorithm that is easy to implement with a reasonable performance on most graphs (worst case super-polynomial, of course). I\'m expecting small graphs, so performance doesn\'t have to be stellar, just good enough.</p>\n\n<p>Unfortunately, most things I\'ve found are highly complex and more interested in expressing deep mathematical connections than simply describing the algorithm. I\'m afraid I don\'t have the time to dive that deep. Can anyone give me a shortcut?</p>\n\n<p>I\'m hoping for something like the Floyd-Warshall algorithm. Not optimal, but good enough, and easy to implement.</p>\n', 'ViewCount': '174', 'LastEditorDisplayName': 'user742', 'Title': 'Simple graph canonization algorithm', 'LastActivityDate': '2013-10-20T09:59:54.030', 'LastEditDate': '2013-09-20T09:25:40.343', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1428', 'Tags': '<algorithms><graph-theory><combinatorics>', 'CreationDate': '2013-09-16T14:11:06.023', 'Id': '14354'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Consider the following random process.  We have a $10\\times 10$ grid.  At each time step, we pick a random empty grid cell (selected uniformly at random from among all empty cells) and place a marker in that grid cell.  As soon as we have five contiguous markers in a line (in a row, column, or diagonal), we stop.</p>\n\n<p>I'm given a grid containing some markers in some positions, and I'd like to estimate how long until the process stops if we start from that configuration (i.e., the number of additional time steps until five-in-a-line occurs).  I would be happy with any reasonable metric for that: e.g., the expected time until it stops, or the value $t$ such that there's a probability $0.5$ that the process will stop in $\\le t$ time steps.  I'd be happy with an estimate of any such metric.</p>\n\n<p>Is there any efficient algorithm to estimate this metric, given a configuration where some markers have already been placed?  I'm hoping for something faster than random simulation (repeatedly simulating the process and computing an estimate based upon the resulting empirical distribution).</p>\n", 'ViewCount': '129', 'Title': 'Estimating the time until we obtain five-in-a-row?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-25T20:05:32.690', 'LastEditDate': '2013-10-04T06:45:50.277', 'AnswerCount': '1', 'CommentCount': '12', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><combinatorics><probability-theory><approximation>', 'CreationDate': '2013-10-02T04:18:07.603', 'FavoriteCount': '1', 'Id': '14745'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m reading <a href="http://www.pps.univ-paris-diderot.fr/~mellies/mpri/mpri-ens/articles/harmer-hyland-mellies-categorical-combinatorics.pdf" rel="nofollow">this</a> article about game semantics and I\'m a bit puzzled with the definition given for $\\Upsilon$ in section $3.3$. There are some points that are either unintelligible or that don\'t make sense at all.</p>\n\n<p>The definition provided is based on the concept of <em>schedule</em>:</p>\n\n<blockquote>\n  <p>A schedule $e:\\{1, \\ldots, n\\} \\rightarrow {0, 1}$ is a sequence of\n  $0$ and $1$s. We also define $|e| = n$, $|e|_0$ is the number of $0$s\n  in $e$ and $|e|_1$ is the number of $1$s. The notation $e \\upharpoonright m$ denotes the restriction of $e$ to its first $m$ terms.</p>\n</blockquote>\n\n<p>(Where $e$ is actually a function, but we can view $e$ as the sequence $e(1)\\cdot e(2)\\cdots e(n)$.)</p>\n\n<p>Now the definition of the category $\\Upsilon$ is:</p>\n\n<blockquote>\n  <ul>\n  <li>The objects are the natural numbers. We think of $p \\in \\Upsilon_0$ as the totally ordered set $(p) = \\{1, \\ldots, p\\}$. We\n  write $(p)^+$ for the set of even elements and $(p)^-$ for the set of\n  odd elements of $(p)$.</li>\n  <li><p>The morphism in $\\Upsilon(p, q)$ are schedules $e$ such that $|e|_0 = p$ and $|e|_1 = q$. </p>\n  \n  <p><strong>A schedule $e: p \\rightarrow q$ corresponds to obvious order preserving (collectively surjective) embeddings $l:(p) \\rightarrow (p+q)$\n  and $r : (q) \\rightarrow (p+q)$ and thus to order relations\n  $l(x) &lt; r(y)$ from $(p)^+$ to $(q)^+$ and $r(y) &lt; l(x)$ from $(q)^-$\n  to $(p)^-$</strong></p></li>\n  <li><p>The identity in $\\Upsilon(p, p)$ is the copy-cat function $c$ of length $2p$, such that $c(2k+1) \\neq c(2k+2)$. <strong>The induced orders are\n  $\\leq$ on $(p)^+$ and on $(p)^-$</strong></p></li>\n  <li><p>Let $e:p \\rightarrow q$ and $f: q \\rightarrow r$ be morphisms in $\\Upsilon$, then their composition $e;f:p \\rightarrow r$ is defined by\n  taking the corresponding order relations , composing them as relations\n  and <strong>reconstructing the function</strong></p></li>\n  </ul>\n</blockquote>\n\n<p>Where I emphasized in bold the parts I don\'t understand. In particular:</p>\n\n<ul>\n<li><p>What\'s the meaning of <em>embedding</em> when he defined morphisms? I know what an embedding <em>functor</em> is, but this definition doesn\'t apply here.</p></li>\n<li><p>What does "$l(x) &lt; r(y)$ from $(p)^+$ to $(q)^+$" mean? Where do $x$ and $y$ come from? My <em>guess</em> is: $x \\in (p)^+$ and $y \\in (q)^+$. What are $l$ and $r$? My <em>guess</em> would be that $l$, given the index $x$ of a $0$ returns its index in $e$ and $r$ does the same for $1$s but then the $l(x) &lt; r(y)$ part doesn\'t make any sense to me.</p></li>\n<li><p>What\'s an <em>induced order</em>?</p></li>\n<li><p>What does <em>reconstructing a function</em> mean?</p></li>\n</ul>\n\n<hr>\n\n<p>I hope my question is on-topic here. I didn\'t ask it on tcs because it doesn\'t look like a research level question to me.</p>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<p>Reading carefully the rest of the paper, later mentions that $l$ and $r$ are <em>injections</em>, so maybe for <em>embedding</em> he simply meant injection(?).</p>\n\n<p>Assuming this, this is what I thought:\nthe point about morphism means that $e$ could be seen to represent two injective functions $l:\\{1, \\ldots, p\\} \\rightarrow \\{1, \\ldots, p+q\\}$ and $r:\\{1, \\ldots, q\\} \\rightarrow \\{1, \\ldots, p+q\\}$ such that the union of their images is $\\{1, \\ldots, p+q\\}$.\nThese functions have the property that, for $x \\in (p)^+, y \\in (q)^+$, $l(x) &lt; r(y)$ and for $x \\in (p)^-, y \\in (q)^-, r(y) &lt; l(x)$ (although in the text this seems like a consequence of an "obvious order preserving ...". no idea what order he\'s talking about and how it\'s obvious.)</p>\n\n<p>We can obtain these functions assigning the lowest values to even arguments for $l$, the next lower values for even arguments to $r$, then the next lower values to odd arguments for $r$ and finally the remaining values for $l$.\n(i.e. $r(2) = 1, r(4) = 2, \\ldots, r(2k) = k$ then $l(1) = k+1, \\ldots l(2t+1) = k+t+1$ etc.) </p>\n\n<p><em>However</em> such $l$ and $r$ are <em>not</em> unique, which <em>is</em> a problem in the rest of the paper since he later uses $l$ and $r$ in some definitions, which cannot be done if $l$ and $r$ aren\'t unique.</p>\n\n<p><strong>Edit2</strong></p>\n\n<p>Maybe the <em>embedding</em> means <a href="http://en.wikipedia.org/wiki/Order-embedding" rel="nofollow">order-embedding</a>. However even in this case I don\'t see how $e$ can be related with <em>one</em> obvious couple of order embeddings.\nI mean: the most obvious choice is to put $l(x)$ to be the index of the $x$th $0$ in $e$ and similarly for $r(y)$ and $1$s, but then the last statement in the description is wrong(take $e = 010$ we have that $r(1) = 2 &gt; l(1) = 1$ but we should have $r(y) &lt; l(x)$ for odd $x$ and $y$.</p>\n\n<p>Is there any obvious way to define two embeddings $l$ and $r$ in a unique way?</p>\n', 'ViewCount': '45', 'Title': "What's the correct definition of the $\\Upsilon$ category of schedules?", 'LastEditorUserId': '7246', 'LastActivityDate': '2013-10-14T12:52:33.647', 'LastEditDate': '2013-10-11T18:08:07.680', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16070', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7246', 'Tags': '<combinatorics><category-theory><game-semantics>', 'CreationDate': '2013-10-10T13:54:23.550', 'Id': '14986'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>We define a <em>regular tree language</em> as in the book <a href="http://tata.gforge.inria.fr/" rel="nofollow">TATA</a>: It is the set of trees accepted by a non-deterministic finite tree automaton (Chapter 1) or, equivalently, the set of trees generated by a regular tree grammar (Chapter 2). Both formalisms hold close resemblances to the well-known string analogues.</p>\n\n<blockquote>\n  <p>Is there a regular tree language in which the average height of a tree of size $n$ is neither $\\Theta(n)$ nor $\\Theta(\\sqrt{n})$?</p>\n</blockquote>\n\n<p>Obviously there are tree languages such that the height of a tree is linear in its size; and in the book <a href="http://algo.inria.fr/flajolet/Publications/books.html" rel="nofollow">Analytic Combinatorics</a> it is shown e.g. that binary trees of size $n$ have average height $2\\sqrt{ \\pi n}$. If I understand Proposition VII.16 (p.537) of the mentioned book correctly, then there is a wide subset of regular tree languages that have average height of $\\Theta(\\sqrt{n})$, namely those in which the tree language is also a <em>simple variety of trees</em> fulfilling some extra conditions.</p>\n\n<p>So I was wondering whether there is a regular tree language showing a different average height or if there is a true dichotomy for regular tree languages.</p>\n', 'ViewCount': '316', 'Title': 'Is there a regular tree language in which the average height of a tree of size $n$ is neither $\\Theta(n)$ nor $\\Theta(\\sqrt{n})$?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-10-18T08:11:24.593', 'LastEditDate': '2013-10-18T08:11:24.593', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '10734', 'Tags': '<formal-languages><regular-languages><combinatorics><trees><tree-grammars>', 'CreationDate': '2013-10-14T14:19:09.910', 'FavoriteCount': '4', 'Id': '16073'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $\\Sigma$ be the alphabet $\\{a, b, c, d\\}$ and let $R$ be the following relation on $\\Sigma^*$: $R(x, y)$ is true if every letter in string $x$ also occurs in $y$, and every letter in string $y$ also occurs in $x$.  (For example, $R(abba, babbb)$ is true and $R(abcb, cbbcb)$ is false.)  How many (non-empty) sets are in the partition of $\\Sigma^*$ corresponding to $R$?  (That is, how many equivalence classes does R have?)</p>\n\n<p>Any help will help.</p>\n', 'ViewCount': '38', 'Title': 'Counting involving equivalence classes and languages', 'LastEditorUserId': '204', 'LastActivityDate': '2013-10-21T14:37:08.860', 'LastEditDate': '2013-10-21T14:37:08.860', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'OwnerDisplayName': 'user2833171', 'PostTypeId': '1', 'Tags': '<logic><combinatorics><counting>', 'CreationDate': '2013-10-01T01:52:14.287', 'Id': '16282'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p>A ranking algorithm determines the position (or rank) of a combinatorial object among all the objects (with respect to a given order); an unranking algorithm finds the object having a specified rank. Thus, ranking and unranking can be considered as inverse operations.</p>\n</blockquote>\n\n<p>The following lattice has 9 unique max length paths from {} to {1,2,3,4,5}, which can be obtained by a depth first search.</p>\n\n<p><img src="http://i.stack.imgur.com/wGYHo.png" alt="lattice">(The graph is directed, with arrows pointing down)</p>\n\n<p>Is it possible to write a function that generates the N\'th path without enumerating paths 1..N-1.</p>\n\n<p>see: <a href="http://math.stackexchange.com/questions/510911/computing-all-simple-paths-in-a-distributive-lattice-in-parallel">http://math.stackexchange.com/questions/510911/computing-all-simple-paths-in-a-distributive-lattice-in-parallel</a> for more problem details.</p>\n', 'ViewCount': '53', 'Title': 'Unranking paths in a graph/lattice', 'LastActivityDate': '2013-10-26T02:10:56.440', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16437', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10979', 'Tags': '<graph-theory><combinatorics><lattices>', 'CreationDate': '2013-10-25T21:37:10.387', 'Id': '16433'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>So say we have a bipartite graph G=(X,Y,E). Let\'s make a game out of it.</p>\n\n<p>I go first. I pick a node in X. You go next. You pick a node in Y that is connected by an edge to the node I picked. Next it\'s my turn. I pick another node in X (must be a new one that hasn\'t been used before) that is also connected to the node in Y you just picked. We continue playing in this manner, until someone cannot pick a node (i.e. all edges out of the current node have already been used). When that happens, the person who cannot pick a next node loses.</p>\n\n<p>I\'m supposed to find a polynomial time algorithm to decide which of the two players (you or me) can force a "win" for a given bipartite graph.</p>\n\n<p>I\'m stumped. I\'ve approached this in many different ways, including the following two:</p>\n\n<p>1) 1) each node in the xy "path" played will use two edges, except for the first and last nodes which will only use one edge. Idea: add one new node on each side of the bipartite graph, and connect to all opposite nodes. Then check for a perfect (or maximal) matching twice, removing the edges used in the first perfect (maximal) matching when finding the second one. I don\'t think this really helps us with the problem, though, as there are many different nodes you could visit next given a current node.</p>\n\n<p>2) A second idea was to work with alternating/augmenting paths (as we "zig-zag" between the two sides). I again got stuck since at any given node there are many possible nodes to visit next.</p>\n\n<p>Does anyone have any suggestions for this problem? I\'m thinking it has to do with matching, but I could be wrong.</p>\n\n<p>Thanks in advance!</p>\n', 'ViewCount': '120', 'Title': 'Bipartite Graph Game', 'LastActivityDate': '2013-11-13T08:27:30.500', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '17976', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10680', 'Tags': '<graph-theory><graphs><combinatorics><computer-networks><bipartite-matching>', 'CreationDate': '2013-11-12T22:58:47.500', 'Id': '17974'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>here is a competitive programming question:</p>\n\n<p>You have a number of chores to do. You can only do one chore at a time and some of them depend on others. \nSuppose you have four tasks to complete. For convenience, we assume the\ntasks are numbered from 1 to 4. Suppose that task 4 depends on both task 2 and task\n3, and task 2 depends on task 1. One possible sequence in which we can complete the\ngiven tasks is [3,1,2,4] - in this sequence, no task is attempted before any of the other\ntasks that it depends on. The sequence [3,2,1,4] would not be allowed because task\n2 depends on task 1 but task 2 is scheduled before task 1. In this example, you can\ncheck that there exactly three possible sequences compatible with the dependencies:\n[3,1,2,4], [1,2,3,4] and [1,3,2,4].\nIn each of the cases below, you have N tasks numbered 1 to N with some dependencies\nbetween the tasks. You have to calculate the number of ways you can reorder all N\ntasks into a sequence that does not violate any dependencies.</p>\n\n<p>[Task, Dependency(s)] : [1, NA], [2,1], [3,2], [4,1], [5,4], [6, 3 and 5], [7,6], [8,7], [9,6], [10, 8 and 9].</p>\n\n<p>I inferred the following:</p>\n\n<ul>\n<li>Any sequence will always start with 1, since it has no dependencies.</li>\n<li>6 will always be in the 6th position of any sequence.</li>\n<li>10 will always be at the last position.</li>\n</ul>\n\n<p>Then, by trial and error, and listing all possibilities for the two separate parts of the sequence (1 _ _ _ _ 6 and 6 _ _ _ 10), I got 6x3 = 18 possibilities. However, for a larger set of data, these deductions would not be easy. What is the way to calculate this logically and find the number of possibilities, and how can this be integrated into a program?</p>\n\n<p>(I have tried to represent the question as clearly as possible, but you can visit this link to view the question (Q. No 4): <a href="http://www.iarcs.org.in/inoi/2013/zio2013/zio2013-qpaper.pdf" rel="nofollow">http://www.iarcs.org.in/inoi/2013/zio2013/zio2013-qpaper.pdf</a>)</p>\n\n<p>I am a high school student preparing for a programming competition, and I haven\'t taken many courses on algorithm design, so this might be a trivial question - please excuse me!</p>\n', 'ViewCount': '89', 'Title': 'Task Dependency/Combinatorics', 'LastActivityDate': '2013-11-17T00:54:12.167', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11415', 'Tags': '<algorithms><algorithm-analysis><combinatorics>', 'CreationDate': '2013-11-16T09:24:13.547', 'FavoriteCount': '1', 'Id': '18067'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>For clarity, I attach below a concise implementation of the algorithm in Python. I understand that it checks all possible element swaps, but I don't see how that necessarily means that all possible orderings of the elements will be reached, and/or that no ordering will be duplicated.</p>\n\n<p>For example, what if the elements at index 0 and 1 are swapped, then 1 and 2 are swapped?  How does the algorithm guarantee this won't result in a duplicate ordering?</p>\n\n\n\n<pre><code>P = []\ndef permute(l, n=0):\n    if n == len(l):\n        return P.append(list(l))\n    for i in xrange(n, len(l)):\n        l[i], l[n] = l[n], l[i]\n        permute(l, n+1)\n        l[i], l[n] = l[n], l[i]\n</code></pre>\n", 'ViewCount': '53', 'Title': 'Is there a proof of the recursive algorithm for generating all permutations of a sequence?', 'LastActivityDate': '2013-11-28T02:19:16.190', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10768', 'Tags': '<algorithms><combinatorics><correctness-proof>', 'CreationDate': '2013-11-27T21:26:26.657', 'Id': '18423'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I want to know if there is any good book or material that fully explains and fully covers all combinatorics.I even did not find even Kenneth H.Rousan for this.So can anyone tell me any Discrete Mathematics book or any material to fully  explain Combinatorics even to advance level.that provide classification to combinatorics problems(most important).</p>\n', 'ViewCount': '71', 'ClosedDate': '2013-12-16T05:42:21.447', 'Title': 'help regarding combinatorics', 'LastActivityDate': '2013-12-14T14:07:16.647', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10380', 'Tags': '<combinatorics><discrete-mathematics>', 'CreationDate': '2013-12-13T14:38:54.267', 'Id': '18953'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>(This may be more fitting for CSTheory, I\'m not sure.)</p>\n\n<p>I\'m looking for an practical or theoretical work (that is, academic papers, online jots, pseudocode or code) regarding efficient algorithms for the following problem:</p>\n\n<h2>Unknown-Number-of-Bins Histogram</h2>\n\n<p><strong>Inputs:</strong></p>\n\n<ul>\n<li>An array of integers $a$, of length $n$.</li>\n</ul>\n\n<p><strong>Outputs:</strong> </p>\n\n<ul>\n<li>An array of integers $\\text{bins}$ of length $m &lt;= n$.</li>\n<li>An array of unsigned integers $\\text{counts}$, also of length $m$.</li>\n</ul>\n\n<p><strong>Output Requirements:</strong> </p>\n\n<ul>\n<li><p>For every $i \\in \\{0...m-1\\}$ it must be the case that </p>\n\n<p>$\\bigl|\\bigl\\{ j \\in \\{0...n-1\\} \\mid a_j = \\text{bins}_i \\bigr\\}\\bigr|$\n$ = \\text{counts}_i$</p>\n\n<p>In other words, $\\text{bins}$ and $\\text{counts}$ constitute a histogram of $a$, with one bin for every unique value in $a$.</p></li>\n<li>It is <strong>not</strong> required for $\\text{bins}$ or $\\text{counts}$ to be sorted.</li>\n</ul>\n\n<p><strong>Other Notes:</strong></p>\n\n<ul>\n<li>Complexity is considered as a function of <strong>both $n$ and $m$</strong>. </li>\n<li>Low time complexity is required both asymptotically for relatively low values $m$ - but not for low values of $n$.</li>\n<li>No hiding monstrosities in the $\\mathop{O}(\\cdot)$ constants please!</li>\n<li>A parallel(izable) approach? You are most welcome :-)</li>\n<li>Low space complexity is a benefit.</li>\n<li>Deterministic algorithms preferred, and barring that, go easy on those coin flips.</li>\n</ul>\n\n<p>Clearly, there are many way to go about this, some very straightforward, e.g. "sort the input, then build a sorted histogram in a single pass", in $\\mathop{O}(n \\log{n})$ time. Of course I wanted something better....</p>\n', 'ViewCount': '62', 'Title': 'Computing a histogram with the number of extant values not known in advance', 'LastEditorUserId': '11796', 'LastActivityDate': '2013-12-16T09:13:58.833', 'LastEditDate': '2013-12-16T09:13:58.833', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11796', 'Tags': '<algorithms><combinatorics><integers><counting>', 'CreationDate': '2013-12-14T12:42:42.897', 'Id': '18979'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am trying to construct all inequivalent $8\\times 8$ matrices (or $n\\times n$ if you wish) with elements 0 or 1. The operation that gives equivalent matrices is the simultaneous exchange of the i and j row AND the i and j column. eg. for $1\\leftrightarrow2$\n\\begin{equation}\n\\left( \\begin{array}{ccc}\n0 &amp; 0 &amp; 0 \\\\\n0 &amp; 1 &amp; 1 \\\\\n1 &amp; 0 &amp; 0 \\end{array} \\right) \\sim\n\\left( \\begin{array}{ccc}\n1 &amp; 0 &amp; 1 \\\\\n0 &amp; 0 &amp; 0 \\\\\n0 &amp; 1 &amp; 0 \\end{array} \\right)\n\\end{equation}</p>\n\n<p>Eventually, I will also need to count how many equivalent matrices there are within each class but I think Polya's counting theorem can do that. For now I just need an algoritmic way of constructing one matrix in each inequivalence class. Any ideas?</p>\n", 'ViewCount': '127', 'Title': 'Constructing inequivalent binary matrices', 'LastEditorUserId': '98', 'LastActivityDate': '2014-05-03T13:13:25.200', 'LastEditDate': '2014-01-28T22:50:40.620', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '12348', 'Tags': '<algorithms><combinatorics>', 'CreationDate': '2013-12-24T15:30:07.377', 'FavoriteCount': '1', 'Id': '19250'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given two sets A and B of sizes |A| = n and |B| = m, where m >= n.\nThere are edges from set A to set B.\nI need to find the <code>number</code> of matchings where all of vertices in set A have been matched with one vertex in set B.\nIs it possible to caclulate this quantity ?</p>\n\n<p>(I have very little knowledge of Graph Thory and Bipartite Matching or how it is computed)</p>\n', 'ViewCount': '38', 'Title': 'Number of Matchings in a Bipartite', 'LastActivityDate': '2013-12-25T14:20:27.127', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19276', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Tags': '<graphs><combinatorics><bipartite-matching><matching>', 'CreationDate': '2013-12-25T14:06:18.887', 'Id': '19275'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>This question was asked in the onsite regionals for ACM ICPC 2013 at Amritapuri.\nIn short, the question asked to find the number of ways to fill a $ 2\\times N$ grid with $M$ colors such that no two cells with the same row or same column have the same color.</p>\n\n<p>The limits given are $1 \\leq N$, and $M \\leq 1000$ with 1000 test cases per input. </p>\n\n<p>Based on the constraints the approach that comes to my mind after a long struggle includes having a precomputed DP table which can be used for every test case. I tried to apply the inclusion-exclusion principle but could not come up with any solution. I also tried to solve it using bipartite perfect matchings, but no success. How should I approach this question?</p>\n', 'ViewCount': '276', 'Title': 'Number of ways to fill a 2xN grid with M colors', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-27T17:23:20.610', 'LastEditDate': '2013-12-27T17:23:20.610', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '19291', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Tags': '<graph-theory><combinatorics><permutations><bipartite-matching>', 'CreationDate': '2013-12-25T20:33:19.390', 'Id': '19288'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>An adversary gives you a set of items whose total size is $x$ (he gets to choose how $x$ is distributed. e.g. there may be $k-1$ items of size $\\frac{x}{k}$ and 2 items of size $\\frac{x}{2k}$).</p>\n\n<p>The item are now randomly distributed into $2x$ bins (you may assume $2x\\in \\mathbb{N}$).</p>\n\n<p>What\'s the probability (i.e. what can we guarantee to achieve for any adversarial choice)  no bin contains items with total size > 1?</p>\n\n<hr>\n\n<p>For example, if the adversary chose all items (except for the last one) to be of size $\\frac{1}{2} + \\epsilon$ , then we have $2x-1$ items that no two of them can fit in a single bin. The last item can fit everywhere. hence the probability is bounded by (relaxing to $2x-1$ bins):</p>\n\n<p>$\\frac{(2x-1)!}{(2x-1)^{2x-1}} &lt; e^{-(2x-1)}$ .</p>\n\n<p>On the other hand, all I know for a general item set is that a "good" coloring exist (easy to see using the first fit algorithm).</p>\n\n<p>Any ideas?</p>\n', 'ViewCount': '27', 'Title': 'Adversarial bin packing', 'LastEditorUserId': '12486', 'LastActivityDate': '2013-12-31T09:37:08.750', 'LastEditDate': '2013-12-31T09:37:08.750', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12486', 'Tags': '<combinatorics><probability-theory><lower-bounds><knapsack-problems><packing>', 'CreationDate': '2013-12-31T09:24:16.570', 'Id': '19398'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In the theory of NP-completeness, researchers refer to the concept of combinatorial  explosion. Some researchers use it as justification for intractability or NP-completeness. Others use it to refer to the exponential growth of possible solutions of an intractable problem while others use to refer to the apparent exponential time required to solve NP-complete problems. I am interested in formal connection to combinatorics.</p>\n\n<blockquote>\n  <p>Is there combinatorial basis that captures and explains the phenomena of combinatorial explosion?</p>\n</blockquote>\n', 'ViewCount': '295', 'Title': 'What is combinatorial explosion?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-03T06:40:58.943', 'LastEditDate': '2014-01-03T06:40:58.943', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><terminology><combinatorics>', 'CreationDate': '2014-01-02T17:49:02.183', 'FavoriteCount': '2', 'Id': '19459'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Short version: I want to know where the $-2$ comes from in the formula on p. 221 of <a href="https://mitpress.mit.edu/books/introduction-algorithms" rel="nofollow">CLRS 3rd edition</a>.</p>\n\n<p>Long version: CLRS (3rd ed.) give an algorithm for $O(n)$ worst case arbitrary order statistic of $n$ distinct numbers.  The algorithm is roughly:</p>\n\n<blockquote>\n  <p><strong>Input</strong>: an array of $n$ elements and $i$, the number of the order statistic to return from the elements.</p>\n  \n  <ol>\n  <li>Divide the $n$ elements into $\\lfloor n/5 \\rfloor$ groups of 5 elements each along with an optional group containing $n\\mod{5}$ elements (resulting in $\\lceil n/5 \\rceil$ groups.)</li>\n  <li>Find the median of each of the groups by sorting.</li>\n  <li>Recurse, using the $\\lceil n/5 \\rceil$ medians as the array and $\\lfloor\\lceil n/5 \\rceil/2\\rfloor$ as the order statistic, resulting in the median-of-medians.</li>\n  <li>Partition the $n$ elements around the median-of-medians (using a quicksort-like $O(n)$ partitioning algorithm.</li>\n  <li>Letting $k-1$ be the number of elements less than the median-of-medians, if $i = k$, return the median-of-medians.  Otherwise recurse: if $i &lt; k$ then recurse finding the $i$th order statistic of the $k-1$ elements less than the median-of-medians; if $i &gt; k$,  then recurse finding the $i-k$th order statistic of the $n-k$ elements greater than the median-of-medians.</li>\n  </ol>\n  \n  <p><strong>Output</strong>: the $i$th order statistic of the $n$ numbers.</p>\n</blockquote>\n\n<p>In the proof of the runtime, CLRS argue that the number of elements greater than the median-of-medians is at least:</p>\n\n<p>$$\n3 \\bigg(\\bigg\\lceil  \\frac{1}2 \\bigg\\lceil{\\frac{n}5} \\bigg\\rceil \\bigg\\rceil - 2\\bigg)\n$$</p>\n\n<p>The reasoning is that half of the medians are greater than the median-of-medians, and each of those medians\' groups has at least three elements greater than the median-of-medians (the median itself plus the two elements greater than the median.)  That would result in </p>\n\n<p>$$\n3 \\bigg(\\bigg\\lceil  \\frac{1}2 \\bigg\\lceil{\\frac{n}5} \\bigg\\rceil \\bigg\\rceil\\bigg)\n$$</p>\n\n<p>for the lower bound on the number of elements greater than the median-of-medians.  </p>\n\n<p>But we must account for two things: the group containing the median-of-medians (the median-of-medians is not greater than itself) and the group that contains the modulo leftovers.  To account for the group containing the median-of-medians, we subtract 1, resulting in:</p>\n\n<p>$$\n3 \\bigg(\\bigg\\lceil  \\frac{1}2 \\bigg\\lceil{\\frac{n}5} \\bigg\\rceil \\bigg\\rceil\\bigg) - 1\n$$</p>\n\n<p>and I <em>think</em> that for the modulo leftovers group, we should subtract 4, because the least number of elements in the group is 1.  So that would give:</p>\n\n<p>$$\n3 \\bigg(\\bigg\\lceil  \\frac{1}2 \\bigg\\lceil{\\frac{n}5} \\bigg\\rceil \\bigg\\rceil\\bigg) - 5\n$$</p>\n\n<p>which can be transformed into </p>\n\n<p>$$\n3 \\bigg(\\bigg\\lceil  \\frac{1}2 \\bigg\\lceil{\\frac{n}5} \\bigg\\rceil \\bigg\\rceil - 2\\bigg) + 1\n$$</p>\n\n<p>Why does my analysis lead to a lower-bound 1 greater than that given in CLRS?</p>\n', 'ViewCount': '87', 'Title': 'Counting elements that are greater than the median of medians', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-07T19:33:23.323', 'LastEditDate': '2014-01-07T11:46:43.480', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19563', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12635', 'Tags': '<algorithm-analysis><combinatorics><discrete-mathematics>', 'CreationDate': '2014-01-06T20:02:49.843', 'Id': '19542'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Forgive this seemingly "troll-ish" question, but I must lack the ability to understand how one byte (two nibbles, eight bits, however you wish to describe it) can hold <strong>256 different states, possibilities, values or such.</strong></p>\n\n<p>First of all, one bit would look like this:</p>\n\n<p><img src="http://i.stack.imgur.com/NwCYJ.png" alt="enter image description here"></p>\n\n<p>Any way of being able to input two states (in the poor example above, two separate circuits at different voltages can be treated logically as "yes" or "no").</p>\n\n<p>So if one bit is two possible states, multiplication factors yield that by two:</p>\n\n<p>Bit = 2 values</p>\n\n<p>Two bits = 4 values</p>\n\n<p>Three bits = 6 values</p>\n\n<p>Four bits = 8 values</p>\n\n<p>Five bits = 10 values</p>\n\n<p>Six bits = 12 values</p>\n\n<p>Seven bits = 14 values</p>\n\n<p>Eight bits = 16 values</p>\n\n<p>In total, I get a sum of sixteen values multiplying the factors by two for every increasing bit. How would it make sense that one byte can hold 256 different values in a circuit?</p>\n\n<p>In a four bit adder, we\'d have something like this:</p>\n\n<p><img src="http://i.stack.imgur.com/8u3uW.png" alt="enter image description here"></p>\n\n<p>This also yields 8 possible values. How would it get 128? Could anyone clarify this confusion??</p>\n\n<p>NOTE: This doesn\'t have to just apply to adders circuits with transistors and logic gates, but to the pits and lands on an optic disc, the platter representation of data on a disk drive, flash drive binary storage, RAM, anything. I just want to know how increasing factors of two is multiplied by (seemingly) powers thereof.</p>\n', 'ViewCount': '328', 'Title': 'How can one byte hold 256 possibilities?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-10T13:19:30.230', 'LastEditDate': '2014-01-08T08:45:42.740', 'AnswerCount': '4', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12658', 'Tags': '<combinatorics>', 'CreationDate': '2014-01-07T23:18:50.683', 'Id': '19568'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>This was asked in a recent contest.\nThe question asked to count the number of ways to color an $M \\times N$ matrix with $K$ colours such that no two adjacent cells (sharing an edge) have the same color.\nIn other words, I want to count the number of different graph colorings of a grid graph: the graph of a $N \\times M$ grid. The limits were $1 \\le N,M \\le 8$ and $1 \\le K \\le 1000000000$.</p>\n\n<p>Is it possible to count the number of colors using the inclusion-exclusion principle, and if so, how? I saw <a href="http://cs.stackexchange.com/q/19288/98">another question</a> that solves the special case (where $M=2$) using inclusion-exclusion, so I\'m wondering if that kind of approach can be generalized here.</p>\n', 'ViewCount': '89', 'Title': 'Calculate number of ways to color matrix using inclusion-exclusion principle', 'LastEditorUserId': '755', 'LastActivityDate': '2014-03-21T08:14:00.150', 'LastEditDate': '2014-03-21T08:04:40.733', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8655', 'Tags': '<graph-theory><combinatorics><counting><colorings>', 'CreationDate': '2014-01-19T07:03:15.513', 'Id': '19822'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>We have $M$ bits. $M\\le10^5$ Also we have N ranges in the form $[L,R]$. $N\\le10^5$ We can choose any range from the given ranges and flip all bits in our number from $L$ to $R$, both inclusive. We can apply each operation any number of times and in any order. We have to calculate the number of $M$ bit numbers that can be formed thus.</p>\n\n<p>for Example if $N=3$\nand our ranges are : $[0,0]$, $[1,1]$, $[2,2]$.\nNow if we need to find number of three bit numbers that can be formed using the above restrictions, our answer would be 8, since we can form everything from 0 to 7.</p>\n\n<p>Example 2: if we have 3 bits and two ranges $[0,1]$, $[1,2]$, we can form $4$ distinct numbers : $0 (000)$, $3 (011)$, $6 (110)$ and $5 (101)$.</p>\n\n<p>I was thinking of doing something like if we could just obtain the $i^{th}$ bit as $1$ after performing some operations we could simply take $2^X$ for all such bits and that many numbers can be formed. But this approach doesn't seem to work in general. </p>\n", 'ViewCount': '166', 'Title': 'Count numbers that can be generated by flipping bits according to position intervals', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T17:14:38.183', 'LastEditDate': '2014-02-08T16:04:43.167', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8505', 'Tags': '<combinatorics>', 'CreationDate': '2014-02-08T13:01:17.923', 'Id': '21448'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm curious if there is a name for this way of ordering finite sets of natural numbers (shown here for the case 3 elements, but can be extended to any number of them):</p>\n\n<pre><code>{0, 1, 2} &lt; {0, 1, 3}\n          &lt; {0, 2, 3}\n          &lt; {1, 2, 3}\n          &lt; {0, 1, 4}\n          &lt; {0, 2, 4}\n          &lt; {1, 2, 4}\n          &lt; {0, 3, 4}\n          &lt; {1, 3, 4}\n          &lt; {2, 3, 4}\n          &lt; {0, 1, 5}\n          &lt; ...\n</code></pre>\n\n<p>The sets are generated recursively: increase the highest number and reset all the other elements to the lowest possible numbers, then apply this algorithm recursively to the remaining numbers.</p>\n\n<p>The position within this ordering is given by:</p>\n\n<pre><code>C(x[1], 1) + C(x[2], 2) + C(x[3], 3) + ...\n</code></pre>\n\n<p>where <code>x[i]</code> is the <code>i</code>-th element in the <em>sorted</em> set and <code>C(n, k)</code> is the binomial coefficient.</p>\n\n<p>Does anyone know of a name for this kind of total ordering?  Furthermore, what other common ways are there to order sets containing a fixed number of totally ordered elements?</p>\n", 'ViewCount': '28', 'Title': 'Total ordering of sets of fixed size', 'LastEditorUserId': '14625', 'LastActivityDate': '2014-02-13T11:31:24.640', 'LastEditDate': '2014-02-13T01:52:42.027', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '21597', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14625', 'Tags': '<combinatorics><sets><order-theory>', 'CreationDate': '2014-02-13T01:45:22.763', 'Id': '21583'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>How can we prove a binary search tree with $n$ internal vertices has height $h = \\lceil \\log(n+1) \\rceil$? </p>\n', 'ViewCount': '31', 'ClosedDate': '2014-02-18T21:34:52.390', 'Title': 'Binary search tree with $n$ internal vertices', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-18T21:35:18.720', 'LastEditDate': '2014-02-18T21:35:18.720', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14815', 'Tags': '<data-structures><combinatorics><trees><search-trees>', 'CreationDate': '2014-02-18T17:27:13.633', 'Id': '21781'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '40', 'Title': 'the height of a tree given n nodes and a condition', 'LastEditDate': '2014-02-23T20:33:45.123', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12545', 'Body': '<p>I came across a question on which I got totally stuck :( a sort of homework question)</p>\n\n<p>A weight-balanced tree is a binary tree in which for each node. The number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on n nodes is best described by which of the following? </p>\n\n<pre><code>a) log_2 n  \nb) log_{4/3} n  \nc) log_3 {n} \nd) log_{3/2} n\n</code></pre>\n\n<p>I cant imagine to solve this one. Intuitive based answer is most welcome.</p>\n', 'ClosedDate': '2014-02-23T20:33:23.810', 'Tags': '<combinatorics><trees><discrete-mathematics>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-23T20:33:45.123', 'CommentCount': '6', 'AcceptedAnswerId': '21943', 'CreationDate': '2014-02-23T13:32:38.407', 'Id': '21942'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a cost function $f(X)=\\|\\hat{X}-X\\|_2$ to minimize which depends on a $s\\times s$ matrix $X$ where $\\hat{X}$ is given and $\\|X\\|_2=\\big(\\sum_{i,j}x_{ij}^2\\big)^{1/2} $. This matrix $X$ is generated by selecting only $s$ different rows from a matrix $B$ of dimension $n\\times s$. At the end, we are going to choose one matrix $X$ that generates the least cost $f(X)$ within all possible $n\\choose s$ submatrices of B. And so, this is a combinatorial problem that becomes complicated mostly when $n$ is big. </p>\n\n<p>So my question is can we find a suboptimal solution without going through all possible $n\\choose s$ submatrices and what kind of algorithm that I can apply to find such solution.</p>\n\n<p>My second question is can we apply a feature selection algorithm to find a suboptimal solution for a combinatorial problem.</p>\n', 'ViewCount': '156', 'Title': 'Suboptimal Solution for a combinatorial problem', 'LastEditorUserId': '7487', 'LastActivityDate': '2014-03-06T15:28:34.257', 'LastEditDate': '2014-03-06T01:52:17.043', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '22323', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7487', 'Tags': '<optimization><combinatorics><parallel-computing>', 'CreationDate': '2014-03-05T20:54:09.867', 'Id': '22316'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I have an unknown $n$-dimensional vector $x$ whose analytical expression depends on the following sum $x = z + Ba$ where the vector $z$ and the matrix $B\\in \\mathbb{R}^{n\\times s}$ are given. So the $s$-dimensional vector $a$ is to be computed to find $x$.</p>\n\n<p>The only assumption that we have is $x=0$ when we project $x$ onto the space spanned by $s$ different rows (that we don\u2019t know their indices) of the matrix $B$ which has $n$ rows. To do this projection we can use $P_s\\in \\mathbb{R}^{n\\times n}$  which is $1$ on the diagonal entries that correspond to the $s$ selected rows of $B$ and $0$ elsewhere. Hence, $P_s x= P_s z + P_s Ba=0 \\implies a=-(P_sB)^{-1}P_sz$.</p>\n\n<p>The main issue is that we don\u2019t know the positions of these $s$ rows, so the problem is combinatorial and we need to go through all possible $n\\choose s$ projections to find the exact $x$ which corresponds to the least cost $f(x)=\\|y-Ax\\|_2$ where $\\|v\\|_2=\\big(\\sum_iv_i^2\\big)^{1/2}$, $y\\in \\mathbb{R}^{m\\times 1}$ and the matrix $A\\in \\mathbb{R}^{m\\times n}$ are given. </p>\n\n<p>So my question is how I can reformulate my problem as a mixed-integer quadratic programming to go through all possible $n\\choose s$ submatrices of $B$ formed by the $s$ selected rows and finally find the set of rows which corresponds to the least $f(x)$.</p>\n', 'ViewCount': '42', 'Title': 'How to reformulate my problem as a mixed-integer quadratic problem', 'LastEditorUserId': '7487', 'LastActivityDate': '2014-03-06T17:56:47.790', 'LastEditDate': '2014-03-06T16:54:52.230', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '22348', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7487', 'Tags': '<optimization><combinatorics><parallel-computing><integer-programming>', 'CreationDate': '2014-03-06T09:30:18.030', 'Id': '22333'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I need to make a recursive relationship for a function <code>f(m, n)</code> nonrecursive to make it more efficient and succinct in my code.</p>\n\n<p>I stumbled across an important recurrence relationship dealing with the number of vertices, edges, faces, and solids (<a href="http://en.wikipedia.org/wiki/Polytope" rel="nofollow">m-polytopes</a>) in an n-cube which is based off of a simpler algorithm for an n-simplex which uses Pascal\'s triangle:</p>\n\n<p>For a simplex:\nnCm gives you the number of m-polytopes (m = 1 for points, 2 for lines, 3 for faces) in an n-simplex (1-simplex is a line, 2-simplex is a triangle, 3-simplex is a tetrahedron).</p>\n\n<p>The pattern between the n-simplex m-polytopes and the n-cube m-polytopes are very similar:</p>\n\n<pre><code>Here is the n-cube up to 10\n10-polytopes:                                                            \n9-polytopes:                                                           1\n8-polytopes:                                                     1    16\n7-polytopes:                                               1    14   112\n6-polytopes:                                         1    12    84   448\n5-polytopes:                                   1    10    60   280  1120\n4-polytopes:                             1     8    40   160   560  1792\n3-polytopes:                       1     6    24    80   240   672  1792\n2-polytopes:                 1     4    12    32    80   192   448  1024\n1-polytopes:           1     2     4     8    16    32    64   128   256\nHere is the n-simplex up to 10\n10-polytopes:                                                            \n9-polytopes:                                                           1\n8-polytopes:                                                     1     9\n7-polytopes:                                               1     8    36\n6-polytopes:                                         1     7    28    84\n5-polytopes:                                   1     6    21    56   126\n4-polytopes:                             1     5    15    35    70   126\n3-polytopes:                       1     4    10    20    35    56    84\n2-polytopes:                 1     3     6    10    15    21    28    36\n1-polytopes:     1     1     2     3     4     5     6     7     8     9\n</code></pre>\n\n<p>And here is the c code that generated that:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\n#define TOP 10\n\n// nothing to see here\nint factorial(int n)\n{\n    if (n &lt; 2)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n// a recursive implementation for the number of \n// m-polytopes in an n-cube\nint ncubeRecursive(int n, int m)\n{\n    if (n == 0 &amp;&amp; m == 0)\n        return 1;\n    else if(n &lt; 0 || m &lt; 0)\n        return 0;\n    else\n    {\n        return (ncubeRecursive(n - 1, m - 1) + 2 * ncubeRecursive(n - 1, m));\n    }\n}\n// missing a nonrecursive algorithm\n// YOUR JOB TO FIX THIS\n\n\n// a recursive implementation for the number of\n// m-polytopes in an n-simplex\nint nsimplexRecursive(int n, int m)\n{\n    if (n == 0 &amp;&amp; m == 0)\n        return 1;\n    else if(n &lt; 0 || m &lt; 0)\n        return 0;\n    else\n    {\n        return (nsimplexRecursive(n - 1, m - 1) + nsimplexRecursive(n - 1, m));\n    }\n}\n// a nonrecursive algorithm\nint nsimplexNonrecursive(int n, int m)\n{\n    return factorial(n)/(factorial(n - m) * factorial(m));\n}\n\nint main()\n{\n    printf("Here is the n-cube up to %i\\n", TOP);\n    for (int n = TOP; n &gt; 0; --n)\n    {\n        printf("%i-polytopes:", n);\n        for (int m = 0; m &lt; TOP; ++m)\n        {\n            int val = ncubeRecursive(m, n);\n            if (val == 0)\n                printf("%6c", \' \');\n            else\n                printf("%6i", val);\n        }\n        printf("\\n");\n    }\n    printf("Here is the n-simplex up to %i\\n", TOP);\n    for (int n = TOP; n &gt; 0; --n)\n    {\n        printf("%i-polytopes:", n);\n        for (int m = 0; m &lt; TOP; ++m)\n        {\n            int val = nsimplexNonrecursive(m, n);\n            if (val == 0)\n                printf("%6c", \' \');\n            else\n                printf("%6i", val);\n        }\n        printf("\\n");\n    }\n\n    return 0;\n}\n</code></pre>\n\n<p>Does anyone here see a non-recursive pattern? I just don\'t know how to analyze a recursive relationship like this for a function that takes to inputs like <code>f(m, n)</code> instead of just <code>f(x)</code>. </p>\n', 'ViewCount': '44', 'ClosedDate': '2014-03-24T18:49:20.950', 'Title': 'How to make this recursive relationship nonrecursive?', 'LastActivityDate': '2014-03-20T18:03:35.190', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '22874', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15918', 'Tags': '<algorithms><combinatorics><computational-geometry><recurrence-relation>', 'CreationDate': '2014-03-20T15:28:41.100', 'Id': '22869'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Imagine we have N houses, on a standard euclidean 2D plane. We also have N "packages", each of which contains several "objects" of different types, let\'s call them A, B, C, etc. We know the content of all boxes beforehand, but can\'t change them (they\'re randomly generated).</p>\n\n<p>We need to send one package to every house, and we know that the person who lives in the house will need to use one or more of the objects, but we can\'t know which of them they will need. To use the object, they will travel to the nearest house that has it (ideally their own), use it there, and go back to their house. We need to assign a package to each house to minimize the potential distance they will have to travel.</p>\n\n<p>For example:</p>\n\n<ul>\n<li>Package 1 contains B, C, D, E  </li>\n<li>Package 2 contains A, B, D, F  </li>\n<li>Package 3 contains A, E, F, G  </li>\n<li>House 1 is at (0,0)  </li>\n<li>House 2 is at (0, 5)</li>\n<li>House 3 is at (12, 0)</li>\n</ul>\n\n<p>We send packages 1, 2 and 3 to houses 1, 2 and 3: </p>\n\n<ul>\n<li>Owner of house 1 needs A and B: travels 5 to house 2 to get A (and back, but we\'re not counting that).</li>\n<li>Owner of house 2 needs C and G: travels 5 to house 1 to get C, goes back, then 13 to house 3 to get G (total = 18)</li>\n<li>Owner of house 3 needs A and G: travels 0 to their own house.</li>\n</ul>\n\n<p>Total distance = 23</p>\n\n<p>Since we can\'t know what they will want, we assume everyone needs everything. This means I need to minimize the sum of the shortest distance between every location and every type of object. Is this a known problem? How can I make an approximation algorithm for it? It sounds simple enough but I\'m stumped, I have no idea how to search for it.</p>\n\n<p>I was thinking along the lines of calculating a "differentness" of every package to every other one, then trying to place the "most different" packages closer to each other and the more similar ones further, but I don\'t really know how to do that either. </p>\n', 'ViewCount': '22', 'Title': 'Assigning packages to different points by minimizing distance: is this a known problem?', 'LastActivityDate': '2014-03-20T20:39:36.420', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15940', 'Tags': '<algorithms><optimization><combinatorics>', 'CreationDate': '2014-03-20T20:39:36.420', 'Id': '22879'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '89', 'Title': 'What are efficient ways to compute the derivatives of iterated functions?', 'LastEditDate': '2014-03-26T18:45:29.407', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16143', 'FavoriteCount': '1', 'Body': u'<p>The derivatives of iterated functions at a fixed point $z_0$ are useful in constructing a Taylors series of iterated analytic functions - in other words, the Taylors series of a dynamical system $f^t(z_0)$. </p>\n\n<p>A simpler version of the problem casts light on possible approaches. Instead of iterated functions, consider composite functions and <a href="http://en.wikipedia.org/wiki/Fa%C3%A0_di_Bruno%27s_formula" rel="nofollow">Fa\xe0 di Bruno\'s formula</a> The combinatorial structure <a href="http://en.wikipedia.org/wiki/Integer_partition" rel="nofollow">integer partitions</a> serves as the index to the summations in Fa\xe0 di Bruno\'s formula. So the first step of evaluation is to enumerate all integer partitions of a given order.  </p>\n\n<p>While combinatorial structure <a href="http://oeis.org/A000041" rel="nofollow">integer partitions</a> are associated with the derivatives of composite functions, <a href="http://oeis.org/A000669" rel="nofollow">the unlabeled version of the labeled combinatorial structure total partitions</a> are associated with iterated functions. See <a href="http://tetration.org/Combinatorics/PartitionDiagrams.htm" rel="nofollow">Partition Diagrams</a> for more information on the different relevant combinatorial structures. The following Mathematica code does what I need, but the cost of simplicity is that it first enumerates the labeled total partitions to compute the unlabeled total partitions. So for $n=10$, $D^{10}f^t(z_0)$, there are 282,137,824 labeled total partitions, while there are only 2,312 unlabeled partitions. </p>\n\n<h2>Combinatorial Examples</h2>\n\n<p>a(4)=5 unlabeled total partitions: (oooo),(oo(oo)),(o(ooo)),(o(o(oo))),((oo)(oo)).</p>\n\n<p>b(4)=26 labeled total partitions: ((1,4),2,3), (1,(2,4),3), (1,2,(3,4)), (((1,4),2),3), ((1,(2,4)),3), ((1,2),(3,4)), (((1,4),3),2), ((1,(3,4)),2), ((1,3),(2,4)), ((1,4),(2,3)), (1,((2,4),3)), (1,(2,(3,4))), (1,2,3,4), ((1,2,4),3), ((1,2),3,4), ((1,3,4),2), ((1,3),2,4), (1,(2,3,4)), (1,(2,3),4), ((1,2,3),4), (((1,2),4),3), (((1,2),3),4), (((1,3),4),2), (((1,3),2),4), (1,((2,3),4)), ((1,(2,3)),4)</p>\n\n<p>b(4) = 12 (o(o(oo))) + 3 ((oo)(oo)) + 6 ((oo(oo)) + 4 (o(ooo)) + (oooo) = 26</p>\n\n<p>I would like to have an efficient way to reproduce the preceding results.</p>\n\n<h2>Mathematica code</h2>\n\n<pre><code>TotalPartitions[0] = {{}};\nTotalPartitions[1] = {{1}};\nTotalPartitions[2] = {{1, 2}};\nMatch[l_List, pattern_] := Extract[l, Position[l, pattern]];\nTP1[l_List, next_Integer] := \n  Map[( l /. # -&gt; {#, next}) &amp;, Match[l, _Integer] ];\nTP2[l_List, next_Integer] := \n  Map[( l /. # -&gt; Append[#, next]) &amp;, Match[l, _List] ];\nTP3[l_List, next_Integer] := \n  Map[( l /. # -&gt; {#, next}) &amp;, Match[l, _List] ];\nTotalPartitions[n_Integer] := \n  TotalPartitions[n] = \n   Flatten[ {Map[(TP1[#, n] ) &amp;, TotalPartitions[n - 1]], \n     Map[(TP2[#, n] ) &amp;, TotalPartitions[n - 1]], \n     Map[(TP3[#, n] ) &amp;, TotalPartitions[n - 1]]}, 2];\n\nu = TotalPartitions[4] /. _Integer -&gt; 1\n&gt; {{{{1, 1}, 1}, 1}, {{1, {1, 1}}, 1}, \n&gt;  {{1, 1}, {1, 1}}, {{1, 1}, {1, 1}}, \n&gt;  {1, {{1, 1}, 1}}, {1, {1, {1, 1}}}, \n&gt;  {{1, 1}, 1, 1}, {1, {1, 1}, 1}, \n&gt;  {1, 1, {1, 1}}, {{{1, 1}, 1}, 1}, \n&gt;  {{1, {1, 1}}, 1}, {{1, 1}, {1, 1}}, \n&gt;  {{1, 1, 1}, 1}, {{1, 1}, 1, 1}, \n&gt;  {1, {1, 1, 1}}, {1, {1, 1}, 1}, \n&gt;  {1, 1, 1, 1}, {{1, 1, 1}, 1}, \n&gt;  {{1, 1}, 1, 1}, {{{1, 1}, 1}, 1}, \n&gt;  {{{1, 1}, 1}, 1}, {1, {{1, 1}, 1}}, \n&gt;  {{1, {1, 1}}, 1}, {{1, 1, 1}, 1}, \n&gt;  {{{1, 1}, 1}, 1}, {{{1, 1}, 1}, 1}}\n\nSetAttributes[Z, Orderless];\nTally[Apply[List, Apply[Z, u, Infinity], Infinity]]\n&gt;  {{{1, {1, {1, 1}}}, 12}, {{{1, 1}, {1, 1}}, 3}, {{1, 1, {1, 1}}, 6}, \n&gt;   {{1, {1, 1, 1}}, 4}, {{1, 1, 1, 1}, 1}}\n</code></pre>\n\n<p>Note that the Tally function displays the number of occurrences of labeled total partitions for each unlabeled total partition, so that $12+3+6+4+1=26$ shows how the 5 unlabeled total partitions of order 4 map to the 26 labeled total partitions. I\'ve tried pure analytic approaches, combinatorial approaches and a hybrid of the two in my Mathematica programs <a href="http://tetration.org/Resources/Files/Mathematica/SchroederSummations.nb" rel="nofollow">Schroeder Summations and Iterate.</a> I believe this is a useful problem in dynamics and combinatorics and merits an efficient answer.</p>\n', 'Tags': '<algorithms><combinatorics><recursion>', 'LastEditorUserId': '16143', 'LastActivityDate': '2014-03-30T07:36:14.487', 'CommentCount': '5', 'AcceptedAnswerId': '23108', 'CreationDate': '2014-03-26T14:00:31.227', 'Id': '23076'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>What is average number of cycles in an undirected ordered graph of size $n$? \nI've tried finding out sum of number of cycles in all sorts of a graph of size n but I couldn't find that out.</p>\n", 'ViewCount': '108', 'Title': 'What is average number of cycles in an undirected ordered graph of size n?', 'LastEditorUserId': '16351', 'LastActivityDate': '2014-04-01T20:03:42.260', 'LastEditDate': '2014-04-01T11:48:30.700', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16351', 'Tags': '<graph-theory><combinatorics>', 'CreationDate': '2014-04-01T10:18:30.250', 'Id': '23315'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose that $G$ and $H$ are both expander graphs on the same node set with a second largest eigenvalue of $\\lambda_G$ resp. $\\lambda_H$.</p>\n\n<ul>\n<li>What can be said about the expansion of graph $G \\cup H$? In particular, is the spectral gap of $G \\cup H$ at least as large as the minimum of the spectral gaps of $G$ and $H$? </li>\n<li>Does it make a difference whether $G$ and $H$ both have constant node degree?</li>\n</ul>\n\n<p>This is certainly true for the <em>edge expansion</em> of $G \\cup H$, since it can only increase by adding edges. \nI know that spectral expansion and edge expansion are related by the <a href="http://en.wikipedia.org/wiki/Cheeger_constant_%28graph_theory%29#Cheeger_Inequalities">Cheeger inequality</a>, but using this route we only get a bound on the <em>spectral expansion</em> of $G \\cup H$ that is <strong>worse</strong> than $\\lambda_G$ and $\\lambda_H$. </p>\n', 'ViewCount': '36', 'ClosedDate': '2014-04-04T01:17:03.140', 'Title': 'Union of 2 expander graphs', 'LastActivityDate': '2014-04-03T01:04:20.107', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '16400', 'Tags': '<graph-theory><combinatorics><expanders>', 'CreationDate': '2014-04-03T01:04:20.107', 'Id': '23379'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>For simplicity, we can assume that only NAND gates are allowed.  An asymptotically correct solution is all I really need.</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '25', 'ClosedDate': '2014-04-11T19:31:41.863', 'Title': 'How many size $s$ circuits from $\\{0, 1\\}^n \\to \\{0, 1\\}$ are there?', 'LastActivityDate': '2014-04-08T02:48:45.610', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '23530', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16172', 'Tags': '<combinatorics><circuits>', 'CreationDate': '2014-04-07T23:58:47.293', 'Id': '23528'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I got a problem related to graph theory - </p>\n\n<p>Consider an undirected graph \u0729 where self-loops are not allowed. The vertex set of G is\n{(i,j):1&lt;=i,j &lt;=12}. There is an edge between (a, b) and (c, d) if |a-c|&lt;=1 and |b-d|&lt;=1\nThe number of edges in this graph is </p>\n\n<p>Answer is given as 506\nbut I am calculating it as 600, please see attachment.</p>\n\n<p>I am unable to get why it is coming as 506 instead of 600.</p>\n\n<p>Thanks<img src="http://i.stack.imgur.com/IKmgx.png" alt="enter image description here"></p>\n', 'ViewCount': '53', 'Title': 'number of edges in a graph', 'LastEditorUserId': '16546', 'LastActivityDate': '2014-04-08T14:01:25.283', 'LastEditDate': '2014-04-08T07:50:57.403', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '23533', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11750', 'Tags': '<graph-theory><graphs><combinatorics><counting>', 'CreationDate': '2014-04-08T06:39:12.977', 'Id': '23532'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am coding a procedure that takes an integer $d$, and generates $d$ finite lists $X_1 \\ldots, X_d$ of elements. I would then like for it to output a list of the elements in the product set $X_1 \\times \\cdots \\times X_d$. </p>\n\n<p>I can't use nested for-loops because $d$ can vary so I wouldn't know how many to nest. I'm sure there's a totally standard solution to this problem, but I don't know enough to search for it successfully either here on online.</p>\n\n<p>For what it's worth, here's one dumb solution I came up with. Let $b$ be the maximum cardinality of the sets $X_i$. Then run a single loop for $n$ running from $0$ to $b^d$; for each $n$, write it in base $b$ and use the $i^{\\rm th}$ digit to read off the element of $X_i$ corresponding to that digit (and ignore if any of those digits are too big for the cardinality of the corresponding set). This will work, but feels like a pretty stupid solution. </p>\n\n<p>What's the standard way of doing this? </p>\n", 'ViewCount': '79', 'Title': 'How to enumerate a product set?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T22:42:28.783', 'LastEditDate': '2014-04-09T21:28:51.973', 'AnswerCount': '3', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16561', 'Tags': '<algorithms><combinatorics><sets>', 'CreationDate': '2014-04-08T17:45:31.770', 'Id': '23556'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>On math.stackexchange, someone asked how to count the number of ways to place $1$'s into a $10 \\times 10$ matrix so that every row and column has $5$ $1$'s.  Each element of the matrix must be either zero or one.</p>\n\n<p>I came up with a recursive solution for an $N \\times 10$ matrix.  Subproblems are indexed by the counts $c_k$ of how many columns have $k$ $1$'s, for $k =0, 1,2,3,4,5$. The counts $c_k$ have to satisfy $\\sum_k c_k = 10$, and they also have to satisfy $\\sum_k kc_k = 5N$ and $c_k = 0$ for $k &gt; N$. The complexity of this algorithm basically boils down to how many distinct sets of valid indices $(c_k)_k$ there are.</p>\n\n<p>For a $10 \\times 10$ matrix I think this approach should work out nicely, but I worry the complexity might get prohibitively large if we wanted to count how many ways to get $M/2$ $1$'s in every row and column of an $M \\times M$ matrix. So I'm wondering, is there a more efficient way to solve this counting problem?  In other words, a better way than solving for $N \\times M$ in increasing order of $N$ and keeping track of subcases indexed by $(c_k)_k$ such that $\\sum_k c_k = M$ and $\\sum_k k c_k = NM/2$? Also, for my solution, can anybody work out a good bound for how many sub-cases I have as a function of $M$?</p>\n", 'ViewCount': '75', 'Title': 'Count number of ways to place ones in an $M \\times M$ matrix so that every row and column has $k$ ones?', 'LastEditorUserId': '9584', 'LastActivityDate': '2014-04-18T18:41:58.363', 'LastEditDate': '2014-04-18T15:35:14.763', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9584', 'Tags': '<algorithms><time-complexity><combinatorics>', 'CreationDate': '2014-04-16T19:56:14.717', 'FavoriteCount': '1', 'Id': '23869'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>So both the 0/1 subset sum problem (find a subset of given numbers that add up to a target sum) and the subset sum problem with "multiplicities" (find non-negative integer coefficients for the set elements so that the linear combination of set elements equals a target sum) are NP-complete. Is there some fairly easy reduction from 0/1 subset-sum to subset sum with multiplicities? This seems perhaps non-trivial, because just because there is a solution with multiplicities doesn\'t mean there is a 0/1 solution.</p>\n\n<p>Some ideas I had that don\'t seem to work: For element $s$, solve the subset sum with multiplicity problem both for total sum $S$ and $S-s$ with element $s$ removed from the set. Then try to argue that $s$ either is or is not included in the 0/1 solution depending on the answer.</p>\n', 'ViewCount': '22', 'Title': 'Is it possible to easily reduce 0/1 subset sum to subset sum with multiplicities?', 'LastEditorUserId': '9584', 'LastActivityDate': '2014-04-26T17:40:13.273', 'LastEditDate': '2014-04-25T21:25:14.210', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '24135', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9584', 'Tags': '<complexity-theory><combinatorics>', 'CreationDate': '2014-04-25T20:29:34.413', 'Id': '24117'}},