{'Body': '<p>Today, a talk by Henning Kerstan ("Trace Semantics for Probabilistic Transition Systems") confronted me with category theory for the first time. He has built a theoretical framework for describing probablistic transition systems and their behaviour in a general way, i.e. with uncountably infinite state sets and different notions of traces. To this end, he goes up through several layers of abstraction to finally end up with the notion of <a href="https://en.wikipedia.org/wiki/Monad_%28category_theory%29">monads</a> which he combines with measure theory to build the model he needs.</p>\n\n<p>In the end, it took him 45 minutes to (roughly) build a framework to describe a concept he initially explained in 5 minutes. I appreciate the beauty of the approach (it <em>does</em> generalise nicely over different notions of traces) but it strikes me as an odd balance nevertheless.</p>\n\n<p>I struggle to see what a monad really <em>is</em> and how so general a concept can be useful in applications (both in theory and practice). Is it really worth the effort, result-wise?</p>\n\n<p>Therefore this question: </p>\n\n<blockquote>\n  <p>Are there problems that are natural (in the sense of CS) on which\n  the abstract notion of monads can be applied and helps (or is even\n  instrumental) to derive desired results (at all or in a nicer way \n  than without)?</p>\n</blockquote>\n', 'ViewCount': '145', 'Title': 'Natural occurrences of monads that make use of the category-theoretical framework', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-11T08:35:19.520', 'LastEditDate': '2012-03-10T13:37:19.050', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '205', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<applied-theory><category-theory>', 'CreationDate': '2012-03-08T20:45:24.383', 'Id': '138'}{'Body': "<p>I'm learning Haskell and I'm fascinated by the language. However I have no serious math or CS background. But I am an experienced software programmer.</p>\n\n<p>I want to learn category theory so I can become better at Haskell. </p>\n\n<p>Which topics in category theory should I learn to provide a good basis for understanding Haskell?</p>\n", 'ViewCount': '5369', 'Title': 'Is Category Theory useful for learning functional programming?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-30T22:52:54.973', 'LastEditDate': '2012-08-10T18:24:10.300', 'AnswerCount': '5', 'CommentCount': '2', 'Score': '35', 'OwnerDisplayName': 'dan', 'PostTypeId': '1', 'Tags': '<programming-languages><functional-programming><category-theory>', 'CreationDate': '2012-08-03T17:52:13.360', 'FavoriteCount': '36', 'Id': '3028'}{'Body': '<p>Many common operations are <a href="http://en.wikipedia.org/wiki/Monoid">monoids</a>. Haskell has leveraged this observation to make many higher-order functions more generic (<code>Foldable</code> being one example).</p>\n\n<p>There is one obvious way in which using monoids can be used to improve performance: the programmers is asserting the operation\'s associativity, and so operations can be parallelized. </p>\n\n<p>I\'m curious if there are any other ways a compiler could optimize the code, knowing that we\'re dealing with a monoid. </p>\n', 'ViewCount': '129', 'Title': 'Are monoids useful in optimization?', 'LastActivityDate': '2012-11-24T08:10:13.990', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '6860', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1590', 'Tags': '<optimization><compilers><category-theory>', 'CreationDate': '2012-11-23T15:34:10.673', 'FavoriteCount': '2', 'Id': '6858'}{'ViewCount': '490', 'Title': 'How are programming languages and foundations of mathematics related?', 'LastEditDate': '2013-02-15T00:34:04.040', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '3', 'Body': '<p>Basically I am aware of three foundations for math</p>\n\n<ol>\n<li>Set theory</li>\n<li>Type theory</li>\n<li>Category theory</li>\n</ol>\n\n<p>So in what ways are programming languages and foundations of mathematics related?</p>\n\n<p>EDIT</p>\n\n<p>The original question was "Programming languages based on foundations of math" </p>\n\n<p>with the added paragarph of</p>\n\n<p>And implementations of theory<br>\n1. Type theory in <a href="http://coq.inria.fr/">Coq</a><br>\n2. Set theory in <a href="http://c2.com/cgi/wiki?SetlLanguage">SETL</a><br>\n3. Category theory in <a href="http://www.haskell.org/haskellwiki/Category_theory">Haskell</a></p>\n\n<p>Based on a suggestion this was changed to "How are programming languages and foundations of mathematics related"</p>\n\n<p>Since this is one of those questions were I did not know enough about what I was asking but wanted to learn something, I am modifing the question to make it more valuable for learning and others, yet leaving the details in so as not to make the <a href="http://cs.stackexchange.com/a/9763/268">current answer</a> by Andrej Bauer seem off topic.</p>\n\n<p>Thanks for all the comments and the answer so far, I am learning from them.</p>\n', 'Tags': '<programming-languages><history><type-theory><category-theory>', 'LastEditorUserId': '699', 'LastActivityDate': '2013-02-15T00:37:33.880', 'CommentCount': '2', 'AcceptedAnswerId': '9763', 'CreationDate': '2013-02-14T00:48:23.320', 'Id': '9756'}{'ViewCount': '410', 'Title': 'What is the relation between functors in SML and Category theory?', 'LastEditDate': '2013-02-15T18:36:48.697', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '1', 'Body': '<p>Along the same thinking as this statement by <a href="http://cs.stackexchange.com/users/1329/andrej-bauer">Andrej Bauer</a> in this <a href="http://cs.stackexchange.com/a/9763/268">answer</a></p>\n\n<blockquote>\n  <p>The Haskell community has developed a number of techniques inspired by\n  category theory, of which <a href="http://en.wikipedia.org/wiki/Monad_%28category_theory%29">monads</a> are best known but should not be\n  confused with <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29">monads</a>.</p>\n</blockquote>\n\n<p>What is the relation between <a href="http://en.wikipedia.org/wiki/Standard_ML#Module_system">functors</a> in SML and <a href="http://en.wikipedia.org/wiki/Functor">functors</a> in Category theory?</p>\n\n<p>Since I don\'t know about the details of functors in other languages such as Haskell or OCaml, if there is info of value then please also add sections for other languages.</p>\n', 'Tags': '<programming-languages><functional-programming><category-theory>', 'LastEditorUserId': '268', 'LastActivityDate': '2013-02-15T18:36:48.697', 'CommentCount': '1', 'AcceptedAnswerId': '9789', 'CreationDate': '2013-02-14T12:50:21.617', 'Id': '9769'}{'Body': '<p>In reading <a href="http://cs.stackexchange.com/users/207/uday-reddy">Uday Reddy\'s</a> <a href="http://cs.stackexchange.com/a/9815/268">answer</a> to <a href="http://cs.stackexchange.com/q/9769/268">What is the relation between functors in SML and Category theory?</a> Uday states</p>\n\n<blockquote>\n  <p>Category theory doesn\'t yet know how to deal with higher-order\n  functions. Some day, it will.</p>\n</blockquote>\n\n<p>As I thought Category theory was able to serve as a foundation for math, then it should be possible to derive all of math and higher-order functions.</p>\n\n<p>So, what is meant by Category theory doesn\'t yet know how to deal with higher-order functions? Is it valid to consider Category theory as a foundation for math?</p>\n', 'ViewCount': '378', 'Title': "What is meant by Category theory doesn't yet know how to deal with higher-order functions?", 'LastActivityDate': '2013-02-16T14:48:05.947', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '9819', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<functional-programming><category-theory>', 'CreationDate': '2013-02-15T18:58:19.433', 'FavoriteCount': '5', 'Id': '9818'}{'Body': '<p><em>Following the article\'s notation, I write $\\mathcal{F}$ for the\ncategory of presheaves on a (suitable) category $\\mathbb{F}$, $TV$ for the\npresheaf of terms, $\\delta$ for the context extension, and\n$\\bullet$ for the product of the $\\mathcal{F}$-monoid.</em></p>\n\n<p>In <a href="http://www.dcs.ed.ac.uk/home/dt/abstractsyn.html" rel="nofollow">Abstract Syntax and Variable Binding</a> [Fiore, Plotkin, Turi], the\nauthors set out to define substitution by structural recursion\n(Section 3). I was expecting to see substitution expressed as an\ninitial algebra of some sort.</p>\n\n<p>Instead, from what I understand, the authors:</p>\n\n<ol>\n<li> Construct the substitution $\\sigma : \\delta(TV) \\times TV \\to TV$ by some universal construction ("Definition of substitution by structural recursion") </li>\n<li> Show that it forms a substitution algebra (Theorem 3.2) </li>\n<li> Show that the categories of substitution algebras and clones are equivalent (Theorem 3.3) </li>\n<li> Show that the categories of clones and monoids in $\\mathcal{F}$ are equivalent (Proposition 3.4) </li>\n<li> Show that subtitution is the multiplication of such a monoid (Proposition 3.5) </li>\n<li> Conclude that $\\sigma$, the substitution, is defined by structural recursion (Corollary 3.6). </li>\n</ol>\n\n<p>I\'m failing to appreciate their motive in moving from substitution\nalgebras to clones to monoids. Is that a natural thing to do for a\nmathematician? </p>\n\n<p>In particular, why not stay focused on substitution algebras and, I\nguess, present substitution as the initial one?</p>\n\n<p>Conversely, they claim that Corollary 3.6 gives a definition of\nsubstitution by structural recursion: how is that? It is just said\nthat "$\\sigma$ is the unique homomorphic extension of $V \\bullet TV\n\\cong TV$": how did they derive their example (substitution for the\nlambda calculus, very end of Section 3) from this statement?</p>\n', 'ViewCount': '80', 'Title': 'Substitution by structural recursion', 'LastActivityDate': '2013-02-17T21:13:47.763', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '9872', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6922', 'Tags': '<lambda-calculus><category-theory>', 'CreationDate': '2013-02-17T20:48:52.867', 'FavoriteCount': '1', 'Id': '9871'}{'Body': "<p>Being a programmer I appreciate the errors given by a compiler for a programming language and come to rely on the compiler's error as a safety net.</p>\n\n<p>In learning category theory I would like to have some tool that also acted as a safety net letting me experiment with diagrams and pointing out my mistakes when I make one. Does such a tool/app exist?</p>\n\n<p>I know this is more of a math question, but I am asking here because I am looking for an answer from those with and understanding for computer science.</p>\n", 'ViewCount': '133', 'Title': 'Tool/app for learning category theory?', 'LastActivityDate': '2013-02-20T12:22:30.733', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '9900', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<category-theory>', 'CreationDate': '2013-02-18T18:11:38.350', 'FavoriteCount': '2', 'Id': '9897'}{'Body': '<p>I have been reading some notes on Category Theory. One question that is posed is to verify the definition of $\\operatorname{List}$ is a functor...</p>\n\n<p>$\\operatorname{List}(g \\circ f) = (\\operatorname{List} g) \\circ (\\operatorname{List} f)$</p>\n\n<p>I can see this makes sense in programming terms whereby a function $f$ is mapped to a function $\\operatorname{map} f$ but how do you prove this in a mathematically rigorous way?</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '75', 'Title': 'The List functor', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-04-22T18:31:29.003', 'LastEditDate': '2013-04-22T18:31:29.003', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7837', 'Tags': '<category-theory>', 'CreationDate': '2013-04-22T14:23:47.343', 'Id': '11488'}{'Body': '<p>After learning Haskell and other not so pure FP languages I decided to read about Category theory. After gaining good understanding of Category theory I started thinking about how the concepts of category theory can be used to think about <strong>designing programs</strong> but no matter how hard I tried it seems this is not the way to go. </p>\n\n<p>After spending many unsuccessful attempts to relate category theory to <strong>designing programs</strong> I came to the conclusion that:</p>\n\n<ul>\n<li>Category theory is useful when <strong>designing a programming language</strong>.</li>\n<li>Category theory is not something that you use when <strong>designing programs</strong> (even when using a language which was designed based on category principles). For example: When programming in Haskell you will use types, types constructor, functions, higher order functions etc to design your program, not category theory concepts.</li>\n</ul>\n\n<p>In summary we have below layer system (order is low to high):</p>\n\n<p><strong>Category theory -> Programming language -> Program</strong></p>\n\n<p>At a particular layer you use the concepts of the <strong>immediate underlying layer</strong>.</p>\n\n<p>Is this understanding correct? If not and you believe that in <strong>designing programs</strong> we can directly use category theory concepts, please refer some articles or blog posts where it is being demonstrated.</p>\n\n<p>NOTE: By <strong>designing programs</strong> I mean designing programs based on different concepts, like concurrency, parallelism, reactive, message passing etc.</p>\n', 'ViewCount': '347', 'Title': 'Category theory (not) for Programming?', 'LastActivityDate': '2013-08-19T19:02:16.370', 'AnswerCount': '2', 'CommentCount': '11', 'AcceptedAnswerId': '13813', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '9670', 'Tags': '<functional-programming><category-theory>', 'CreationDate': '2013-08-15T08:06:55.107', 'FavoriteCount': '3', 'Id': '13757'}{'Body': '<p>I\'m reading <a href="http://www.pps.univ-paris-diderot.fr/~mellies/mpri/mpri-ens/articles/harmer-hyland-mellies-categorical-combinatorics.pdf" rel="nofollow">this</a> article about game semantics and I\'m a bit puzzled with the definition given for $\\Upsilon$ in section $3.3$. There are some points that are either unintelligible or that don\'t make sense at all.</p>\n\n<p>The definition provided is based on the concept of <em>schedule</em>:</p>\n\n<blockquote>\n  <p>A schedule $e:\\{1, \\ldots, n\\} \\rightarrow {0, 1}$ is a sequence of\n  $0$ and $1$s. We also define $|e| = n$, $|e|_0$ is the number of $0$s\n  in $e$ and $|e|_1$ is the number of $1$s. The notation $e \\upharpoonright m$ denotes the restriction of $e$ to its first $m$ terms.</p>\n</blockquote>\n\n<p>(Where $e$ is actually a function, but we can view $e$ as the sequence $e(1)\\cdot e(2)\\cdots e(n)$.)</p>\n\n<p>Now the definition of the category $\\Upsilon$ is:</p>\n\n<blockquote>\n  <ul>\n  <li>The objects are the natural numbers. We think of $p \\in \\Upsilon_0$ as the totally ordered set $(p) = \\{1, \\ldots, p\\}$. We\n  write $(p)^+$ for the set of even elements and $(p)^-$ for the set of\n  odd elements of $(p)$.</li>\n  <li><p>The morphism in $\\Upsilon(p, q)$ are schedules $e$ such that $|e|_0 = p$ and $|e|_1 = q$. </p>\n  \n  <p><strong>A schedule $e: p \\rightarrow q$ corresponds to obvious order preserving (collectively surjective) embeddings $l:(p) \\rightarrow (p+q)$\n  and $r : (q) \\rightarrow (p+q)$ and thus to order relations\n  $l(x) &lt; r(y)$ from $(p)^+$ to $(q)^+$ and $r(y) &lt; l(x)$ from $(q)^-$\n  to $(p)^-$</strong></p></li>\n  <li><p>The identity in $\\Upsilon(p, p)$ is the copy-cat function $c$ of length $2p$, such that $c(2k+1) \\neq c(2k+2)$. <strong>The induced orders are\n  $\\leq$ on $(p)^+$ and on $(p)^-$</strong></p></li>\n  <li><p>Let $e:p \\rightarrow q$ and $f: q \\rightarrow r$ be morphisms in $\\Upsilon$, then their composition $e;f:p \\rightarrow r$ is defined by\n  taking the corresponding order relations , composing them as relations\n  and <strong>reconstructing the function</strong></p></li>\n  </ul>\n</blockquote>\n\n<p>Where I emphasized in bold the parts I don\'t understand. In particular:</p>\n\n<ul>\n<li><p>What\'s the meaning of <em>embedding</em> when he defined morphisms? I know what an embedding <em>functor</em> is, but this definition doesn\'t apply here.</p></li>\n<li><p>What does "$l(x) &lt; r(y)$ from $(p)^+$ to $(q)^+$" mean? Where do $x$ and $y$ come from? My <em>guess</em> is: $x \\in (p)^+$ and $y \\in (q)^+$. What are $l$ and $r$? My <em>guess</em> would be that $l$, given the index $x$ of a $0$ returns its index in $e$ and $r$ does the same for $1$s but then the $l(x) &lt; r(y)$ part doesn\'t make any sense to me.</p></li>\n<li><p>What\'s an <em>induced order</em>?</p></li>\n<li><p>What does <em>reconstructing a function</em> mean?</p></li>\n</ul>\n\n<hr>\n\n<p>I hope my question is on-topic here. I didn\'t ask it on tcs because it doesn\'t look like a research level question to me.</p>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<p>Reading carefully the rest of the paper, later mentions that $l$ and $r$ are <em>injections</em>, so maybe for <em>embedding</em> he simply meant injection(?).</p>\n\n<p>Assuming this, this is what I thought:\nthe point about morphism means that $e$ could be seen to represent two injective functions $l:\\{1, \\ldots, p\\} \\rightarrow \\{1, \\ldots, p+q\\}$ and $r:\\{1, \\ldots, q\\} \\rightarrow \\{1, \\ldots, p+q\\}$ such that the union of their images is $\\{1, \\ldots, p+q\\}$.\nThese functions have the property that, for $x \\in (p)^+, y \\in (q)^+$, $l(x) &lt; r(y)$ and for $x \\in (p)^-, y \\in (q)^-, r(y) &lt; l(x)$ (although in the text this seems like a consequence of an "obvious order preserving ...". no idea what order he\'s talking about and how it\'s obvious.)</p>\n\n<p>We can obtain these functions assigning the lowest values to even arguments for $l$, the next lower values for even arguments to $r$, then the next lower values to odd arguments for $r$ and finally the remaining values for $l$.\n(i.e. $r(2) = 1, r(4) = 2, \\ldots, r(2k) = k$ then $l(1) = k+1, \\ldots l(2t+1) = k+t+1$ etc.) </p>\n\n<p><em>However</em> such $l$ and $r$ are <em>not</em> unique, which <em>is</em> a problem in the rest of the paper since he later uses $l$ and $r$ in some definitions, which cannot be done if $l$ and $r$ aren\'t unique.</p>\n\n<p><strong>Edit2</strong></p>\n\n<p>Maybe the <em>embedding</em> means <a href="http://en.wikipedia.org/wiki/Order-embedding" rel="nofollow">order-embedding</a>. However even in this case I don\'t see how $e$ can be related with <em>one</em> obvious couple of order embeddings.\nI mean: the most obvious choice is to put $l(x)$ to be the index of the $x$th $0$ in $e$ and similarly for $r(y)$ and $1$s, but then the last statement in the description is wrong(take $e = 010$ we have that $r(1) = 2 &gt; l(1) = 1$ but we should have $r(y) &lt; l(x)$ for odd $x$ and $y$.</p>\n\n<p>Is there any obvious way to define two embeddings $l$ and $r$ in a unique way?</p>\n', 'ViewCount': '45', 'Title': "What's the correct definition of the $\\Upsilon$ category of schedules?", 'LastEditorUserId': '7246', 'LastActivityDate': '2013-10-14T12:52:33.647', 'LastEditDate': '2013-10-11T18:08:07.680', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16070', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7246', 'Tags': '<combinatorics><category-theory><game-semantics>', 'CreationDate': '2013-10-10T13:54:23.550', 'Id': '14986'}{'Body': '<p>After asking this question <a href="http://stackoverflow.com/questions/19649183/are-there-generalized-mathematical-operators-in-cs">on stackoverflow</a>, it has changed slightly.  Is there a way to represent a grammar as a basis for a vector space and represent a program as an object that lives in that vector space?</p>\n\n<p>I\'m interested in the parallels between mathematical operators (like the Hamiltonian, ladder operators, momentum operators, etc) and programming languages.  The operators that I\'m talking about can be thought of as transformation matrices that act on (potentially) infinite vectors.  It seems like a good place to start might be a tree algebra?</p>\n\n<p>An alternative would be to force the program into some sort of allowed bitwise representation, and then perform transforms on it.  Is such a thing possible?</p>\n', 'ViewCount': '50', 'Title': 'Generalized operators for programming languages', 'LastActivityDate': '2013-10-29T15:32:44.927', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16550', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11027', 'Tags': '<formal-grammars><linear-algebra><category-theory>', 'CreationDate': '2013-10-29T04:41:02.697', 'FavoriteCount': '0', 'Id': '16529'}{'Body': '<p>Basically, how much math background do you need to understand how category theory is applied to Haskell? If you already have mathematical maturity, can you jump right into it, or should you be familiar with certain subjects in algebra?</p>\n', 'ViewCount': '46', 'Title': 'How much math background do you need to understand how category theory is applied to Haskell?', 'LastActivityDate': '2013-11-03T16:36:58.457', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11152', 'Tags': '<category-theory>', 'CreationDate': '2013-11-03T16:36:58.457', 'Id': '16675'}{'Body': u'<p>I see how objects in a category stand for types, but where do I find the terms and more specifically the rules which tell me which of them are allowed? When I e.g. consider a <a href="http://en.wikipedia.org/wiki/Cartesian_closed_categories#Definition" rel="nofollow">Cartesian closed category</a> as model of a type theory, how are term constructors represented? </p>\n\n<p>I guess this is the same as asking how do I know or specify appropriately what the homsets of this category are, which I assume are in bijection with the lambda terms. The Curry\u2013Howard\u2013Lambek correspondence as presented at the end of the Wikipedia page <a href="http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence" rel="nofollow">Curry\u2013Howard\u2013Lambek correspondence</a> presents all terms conventionally as in a type theory, but if I start out with a category, the model, then I must have specified them in a more algebraic sense. </p>\n\n<p>And once given, does the model also represent $\\beta$ and $\\eta$ conversion? I actually read on the (quite too high level for me) <a href="http://ncatlab.org/nlab/show/syntactic+category" rel="nofollow">nLab</a> that morphisms relate to substitutions. Then I guess the lambda terms are somehow elements of the objects.</p>\n', 'ViewCount': '81', 'Title': 'What do functions look like, if I stated out with the categoical model of my type theory?', 'LastEditorUserId': '1329', 'LastActivityDate': '2013-12-18T09:07:40.443', 'LastEditDate': '2013-12-18T07:30:07.547', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19089', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2695', 'Tags': '<lambda-calculus><type-theory><category-theory>', 'CreationDate': '2013-12-17T22:59:56.883', 'Id': '19074'}{'Body': "<p>I've read the wikipedia article, but I don't speak category theory (and I'm not sure how to start so I'm just picking something that sounds interesting). So, can someone give me a simple, possibly incorrect (for learning/clarity), pragmatic (if it applies to programming, which I'm pretty sure it does) explanation of what they are and why they're cool?</p>\n\n<p>I'm trying to get through some reading about the polyadic pi calculus. Perhaps that will be enlightening.</p>\n", 'ViewCount': '28', 'Title': 'What is a polyad?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-31T08:05:22.030', 'LastEditDate': '2014-03-31T08:05:22.030', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11027', 'Tags': '<terminology><category-theory>', 'CreationDate': '2014-03-30T23:09:01.347', 'FavoriteCount': '1', 'Id': '23272'}{'Body': '<p>I read that Category Theory has alot to do with how programs and information can be organised.Can Category theory simplify various programming strategies? If a specific Category is represented as a directed graph is this similar to flow charts used in programming?</p>\n', 'ViewCount': '18', 'ClosedDate': '2014-04-17T08:21:01.630', 'Title': 'About computer science and category theory', 'LastActivityDate': '2014-04-17T01:15:30.567', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16843', 'Tags': '<programming-languages><category-theory>', 'CreationDate': '2014-04-17T01:15:30.567', 'Id': '23872'}{'Body': '<p>Could most categories , or a finite part of them be represented on a subset of a complete graph of N vertices (Kn) which is connected. and partly directed? Could all the axioms of category theory be written for such graphs?</p>\n', 'ViewCount': '41', 'Title': 'Category theory and graphs', 'LastActivityDate': '2014-04-17T02:12:37.420', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16843', 'Tags': '<graph-theory><category-theory>', 'CreationDate': '2014-04-17T01:52:59.513', 'Id': '23875'}