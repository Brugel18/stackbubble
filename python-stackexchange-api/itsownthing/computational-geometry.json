{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>When placing geometric objects in a quadtree (or octree), you can place objects that are larger than a single node in a few ways:</p>\n\n<ol>\n<li>Placing the object\'s reference in every leaf for which it is contained</li>\n<li>Placing the object\'s reference in the deepest node for which it is fully contained</li>\n<li>Both #1 and #2</li>\n</ol>\n\n<p>For example:</p>\n\n<p><img src="http://i.stack.imgur.com/Z2Bj7.jpg" alt="enter image description here"></p>\n\n<p>In this image, you could either place the circle in all four of the leaf nodes (method #1) or in just the root node (method #2) or both (method #3).</p>\n\n<p>For the purposes of querying the quadtree, which method is more commonplace and why?</p>\n', 'ViewCount': '125', 'Title': 'Which method is preferred for storing large geometric objects in a quadtree?', 'LastEditorUserId': '11', 'LastActivityDate': '2012-03-06T20:22:05.510', 'LastEditDate': '2012-03-06T19:47:07.427', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '11', 'Tags': '<graphics><data-structures><computational-geometry>', 'CreationDate': '2012-03-06T19:34:22.793', 'Id': '7'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In a <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=4S-sx5_cmLU#!" rel="nofollow">video</a> discussing the merits of <a href="http://en.wikipedia.org/wiki/Particle_filter" rel="nofollow">particle filters</a> for localization, it was implied that there is some ambiguity about the complexity cost of particle filter implementations.  Is this correct?  Could someone explain this?</p>\n', 'ViewCount': '138', 'Title': 'What Is The Complexity of Implementing a Particle Filter?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-08T16:27:23.470', 'LastEditDate': '2012-03-08T16:27:23.470', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '133', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '65', 'Tags': '<computational-geometry><knowledge-representation><reasoning><statistics>', 'CreationDate': '2012-03-08T02:38:08.510', 'Id': '122'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I would like to write a simple program that accepts a set of windows (width+height) and the screen resolution and outputs an arrangement of those windows on the screen such that the windows take the most space. Therefore it is possible to resize a window, while maintaining  <code>output size &gt;= initial size</code> and the aspect ratio. So for window $i$, I'd like the algorithm to return a tuple $(x, y, width, height)$.</p>\n\n<p>I believe this is might be a variation of 2D Knapsack. I've tried going over results around the web but they mostly had a lot of background (and no implementation) that made it hard for me to follow.</p>\n\n<p>I'm less interested in the fastest possible algorithm, but more in something that is practical for my specific need.</p>\n", 'ViewCount': '458', 'Title': 'How to devise an algorithm to arrange (resizable) windows on the screen to cover as much space as possible?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-04-14T12:28:42.977', 'LastEditDate': '2012-04-11T21:05:32.490', 'AnswerCount': '2', 'CommentCount': '12', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '1042', 'Tags': '<algorithms><computational-geometry><packing><user-interface>', 'CreationDate': '2012-04-10T21:20:21.423', 'Id': '1217'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>(this is related to my other question, see <a href="http://cs.stackexchange.com/questions/1217/how-to-devise-an-algorithm-to-arrange-resizable-windows-on-the-screen-to-cover">here</a>)</p>\n\n<p>Imagine a screen, with 3 windows on it:</p>\n\n<p><img src="http://i.stack.imgur.com/vVUl3.jpg" alt="enter image description here"></p>\n\n<p>I\'d like to find an efficient data structure to represent this, while supporting these actions:</p>\n\n<ul>\n<li>return a list of coordinates where a given window can be positioned without overlapping with others\n<ul>\n<li>for the above example, if we want to insert a window of size 2x2, possible positions will be (8, 6), (8, 7), ..</li>\n</ul></li>\n<li>resizing a window on the screen without overlapping other windows while maintaining aspect ratio</li>\n<li>insert window at position x, y (assuming it doesn\'t overlap)</li>\n</ul>\n\n<p>Right now my naive approach is keeping an array of windows and going over all points on the screen, checking for each one if it\'s in any of the windows. This is $O(n\\cdot m\\cdot w)$ where $n, m$ are the width, height of the screen and $w$ is the number of windows in it. Note that in general $w$ will be small (say &lt; 10) where each window is taking a lot of space.</p>\n', 'ViewCount': '93', 'Title': 'Efficient queriable data structure to represent a screen with windows on it', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T11:39:14.260', 'LastEditDate': '2012-04-22T11:39:14.260', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1042', 'Tags': '<algorithms><computational-geometry><user-interface><modelling>', 'CreationDate': '2012-04-14T12:08:18.573', 'Id': '1268'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>(this is related to my other question, see <a href="http://cs.stackexchange.com/questions/1217/how-to-devise-an-algorithm-to-arrange-resizable-windows-on-the-screen-to-cover">here</a>)</p>\n\n<p>I would like to write a function that scores a given arrangement of windows on a screen.</p>\n\n<p>The purpose of this function is to determine whether a particular layout is good and by going over other possible layouts, finding the one with the highest score.</p>\n\n<p>Here are some characteristics that I think make a good layout:</p>\n\n<ol>\n<li>maximizing amount of space used by windows (or in other words, the free space on the screen should be minimized)</li>\n<li>windows are (more or less) evenly sized</li>\n</ol>\n\n<p>Bonus: assigning each window a priority and giving a higher score for layouts where windows with a higher priority take more space.</p>\n\n<p>Here\'s an example: Suppose our screen is 11x11 and we want to put two windows on it. Window A\'s initial size is 1x1 and window B is 2x1.</p>\n\n<p>When we resize windows, we preserve their aspect ratio. So here are two possible layout:</p>\n\n<p><img src="http://i.stack.imgur.com/zG3bg.jpg" alt="enter image description here"></p>\n\n<p>The function should give the one on the right a higher score.</p>\n\n<p>Another nice thing to have is the option to \'dock\' a window to one or more sides of the screen. Then suppose we want to dock A to the bottom-left of the screen, the scoring function should prefer this layout than the above one on the right:</p>\n\n<p><img src="http://i.stack.imgur.com/Ol6Vw.jpg" alt="enter image description here"></p>\n', 'ViewCount': '89', 'Title': 'How to score a given arrangement of windows on a screen to produce good layouts', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T15:58:40.977', 'LastEditDate': '2012-04-22T15:58:40.977', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1042', 'Tags': '<computational-geometry><user-interface><modelling>', 'CreationDate': '2012-04-14T15:24:22.837', 'Id': '1274'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '743', 'Title': 'Rectangle Coverage by Sweep Line', 'LastEditDate': '2012-04-22T11:19:33.100', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1170', 'FavoriteCount': '0', 'Body': '<p>I am given an exercise unfortunately I didn\'t succeed by myself.</p>\n\n<blockquote>\n  <p>There is a set of rectangles $R_{1}..R_{n}$ and a rectangle $R_{0}$. Using plane sweeping algorithm determine if $R_{0}$ is completely covered by the set of $R_{1}..R_{n}$.</p>\n</blockquote>\n\n<p>For more details about the principle of sweep line algorithms see <a href="http://en.wikipedia.org/wiki/Sweep_line_algorithm" rel="nofollow">here</a>.</p>\n\n<p>Let\'s start from the beginning. Initially we know sweep line algorithm as the algorithm for finding <a href="http://en.wikipedia.org/wiki/Line_segment_intersection" rel="nofollow">line segment intersections</a>which requires two data structures:</p>\n\n<ul>\n<li>a set $Q$ of event points (it stores endpoints of segments and intersections points)</li>\n<li>a status $T$ (dynamic structure for the set of segments the sweep line intersecting)</li>\n</ul>\n\n<p><strong>The General Idea:</strong> assume that sweep line $l$ is a vertical line that starts approaching the set of rectangles from the left. Sort all $x$ coordinates of rectangles and store them in $Q$ in increasing order - should take $O(n\\log n)$. Start from the first event point, for every point determine the set of rectangles that intersect at given $x$ coordinate, identify continuous segments of intersection rectangles and check if they cover $R_{0}$ completely at current $x$ coordinate. With $T$ as a binary tree it\'s gonna take $O(\\log n)$. If any part of $R_{0}$ remains uncovered that $R_{0}$ is not completely covered.</p>\n\n<p><strong>Details:</strong> The idea of segment intersection algorithm was that only adjacent segments intersect. Based on this fact we built status $T$ and maintained it throughout the algorithm. I tried to find a similar idea in this case and so far with no success, the only thing I can say is two rectangles intersect if their corresponding $x$ and $y$ coordinates overlap. </p>\n\n<p>The problem is how to build and maintain $T$, and what the complexity of building and maintain $T$ is. I assume that <a href="http://en.wikipedia.org/wiki/R_Trees" rel="nofollow">R trees</a> can be very useful in this case, but as I found it\'s very difficult to determine the minimum bounding rectangle using R trees. </p>\n\n<p>Do you have any idea about how to solve this problem, and particularly how to build $T$?</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T11:19:33.100', 'CommentCount': '4', 'AcceptedAnswerId': '1396', 'CreationDate': '2012-04-20T15:04:57.143', 'Id': '1393'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm trying to use a color camera to track multiple objects in space. Each object will have a different color and in order to be able to distinguish well between each objects I'm trying to make sure that each color assigned to an object is as different from any color on any other object as possible.</p>\n\n<p>In RGB space, we have three planes, all with values between 0 and 255. In this cube $(0,0,0) / (255,255,255)$, I would like to distribute the $n$ colors so that there is as much distance between themselves and others as possible. An additional restriction is that $(0, 0, 0)$ and $(255, 255, 255)$ (or as close to them as possible) should be included in the $n$ colors, because I want to make sure that none of my $(n-2)$ objects takes either color because the background will probably be one of these colors.</p>\n\n<p>Probably, $n$ (including black and while) will not be more than around 14.</p>\n\n<p>Thanks in advance for any pointers on how to get these colors.  </p>\n", 'ViewCount': '253', 'Title': 'Distribute objects in a cube so that they have maximum distance between each other', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T11:55:42.867', 'LastEditDate': '2012-04-22T11:55:42.867', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '1411', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1176', 'Tags': '<algorithms><optimization><computational-geometry>', 'CreationDate': '2012-04-20T20:56:07.157', 'Id': '1399'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '2524', 'Title': 'Circle Intersection with Sweep Line Algorithm', 'LastEditDate': '2012-04-23T19:38:51.163', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1170', 'FavoriteCount': '1', 'Body': u'<p>Unfortunately I am still not so strong in understanding <a href="http://en.wikipedia.org/wiki/Sweep_line_algorithm">Sweep Line Algorithm</a>. All papers and textbooks on the topic are already read, however understanding is still far away. Just in order to make it clearer I try to solve as many exercises as I can. But, really interesting and important tasks are still a challenge for me.</p>\n\n<p>The following exercise I found in lecture notes of <a href="http://theory.cs.uiuc.edu/~jeffe/teaching/algorithms/notes/xo-sweepline.pdf">Line Segment Intersection</a> by omnipotent Jeff Erickson.</p>\n\n<blockquote>\n  <p><strong>Exercise 2.</strong> Describe and analyze a sweepline algorithm to determine, given $n$ circles in the plane, whether any two intersect, in $O(n \\log n)$ time. Each circle is speci\ufb01ed by its center and its radius, so the input consists of three arrays $X[1.. n], Y [1.. n]$, and $R[1.. n]$. Be careful to correctly implement the low-level primitives.</p>\n</blockquote>\n\n<p>Let\'s try to make a complex thing easier. What do we know about intersection of circles? What analogue can be found with intersection of lines. Two lines might intersect if they adjacent, which property two circle should have in order to intersect? Let $d$ be the distance between the center of the circles, $r_{0}$ and $r_{1}$ centers of the circles. Consider few cases:</p>\n\n<ul>\n<li><p>Case 1: If $d &gt; r_{0} + r_{1}$ then there are no solutions, the circles are separate.</p></li>\n<li><p>Case 2: If $d &lt; |r_{0} - r_{1}|$ then there are no solutions because one circle is contained within the other.</p></li>\n<li><p>Case 3: If $d = 0$ and $r_{0} = r_{1}$ then the circles are coincident and there are an infinite number of solutions.</p></li>\n</ul>\n\n<p>So, it looks like conditions of intersection are ready, of course it may be wrong conditions. Please correct if it\'s so.</p>\n\n<p><strong>Algorithm.</strong> Now we need to find something in common between two intersecting circles. With analogue to line intersection, we need to have insert condition and delete condition to event queue. Let\'s say event point are x coordinate of the first and the last points which vertical sweep line touches. On the first point we insert circle to <em>status</em>\n and check for intersection (3 cases for checking are mentioned above) with nearest circles, on the last point we delete circle from <em>status</em>.</p>\n\n<p>It looks like is enough for sweep line algorithm. If there is something wrong, or may be there is something what should be done different, feel free to share your thoughts with us.</p>\n\n<p><strong>Addendum</strong>:</p>\n\n<p>I insert a circle when vertical sweep line touches the circle for the first time, and remove a circle from the status when sweep line touches it for the last time. The check for intersection should be done for the nearest previous circle. If we added a circle to <em>status</em> and there was already  another circle which we added before and it was still there, therefore the pervious circle was not "closed", so there might be an intersection.</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '1170', 'LastActivityDate': '2013-02-27T20:58:21.923', 'CommentCount': '7', 'AcceptedAnswerId': '1468', 'CreationDate': '2012-04-23T18:50:58.747', 'Id': '1466'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I know that the 2D and 3D Knapsack problems are NPC, but is there any way to solve them in reasonable time if the instances are not very complicated? Would dynamic programming work?</p>\n\n<p>By 2D (3D) Knapsack I mean I have a square (cube) and a I have list of objects, all data are in centimeters and are at most 20m.</p>\n', 'ViewCount': '1006', 'Title': 'Algorithms for two and three dimensional Knapsack', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-29T10:36:33.367', 'LastEditDate': '2012-04-24T05:50:51.137', 'AnswerCount': '2', 'CommentCount': '9', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1219', 'Tags': '<algorithms><complexity-theory><np-complete><computational-geometry><knapsack-problems>', 'CreationDate': '2012-04-24T03:35:25.657', 'FavoriteCount': '1', 'Id': '1478'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '263', 'Title': 'Runtime of the optimal greedy $2$-approximation algorithm for the $k$-clustering problem', 'CommunityOwnedDate': '2012-05-23T23:00:33.923', 'LastEditDate': '2012-05-23T23:00:33.923', 'AnswerCount': '2', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '472', 'FavoriteCount': '1', 'Body': '<p>We are given a set 2-dimensional points $|P| = n$ and an integer $k$. We must find a collection of $k$ circles that enclose all the $n$ points such that the radius of the largest circle is as large as possible. In other words, we must find a set $C = \\{ c_1,c_2,\\ldots,c_k\\}$ of $k$ center points such that the cost function $\\text{cost}(C) = \\max_i \\min_j D(p_i, c_j)$ is minimized. Here, $D$ denotes the Euclidean distance between an input point $p_i$ and a center point $c_j$. Each point assigns itself to the closest cluster center grouping the vertices into $k$ different clusters.</p>\n\n<p>The problem is known as the (discrete) $k$-clustering problem and it is $\\text{NP}$-hard. It can be shown with a reduction from the $\\text{NP}$-complete dominating set problem that if there exists a $\\rho$-approximation algorithm for the problem with $\\rho &lt; 2$ then $\\text{P} = \\text{NP}$. </p>\n\n<p>The optimal $2$-approximation algorithm is very simple and intuitive. One first picks a point $p \\in P$ arbitrarily and puts it in the set $C$ of cluster centers. Then one picks the next cluster center such that is as far away as possible from all the other cluster centers. So while $|C| &lt; k$, we repeatedly find a point $j \\in P$ for which the distance $D(j,C)$ is maximized and add it to $C$. Once $|C| = k$ we are done.</p>\n\n<p>It is not hard to see that the optimal greedy algorithm runs in $O(nk)$ time. This raises a question: can we achieve $o(nk)$ time? How much better can we do?</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-05-23T23:05:25.433', 'CommentCount': '0', 'AcceptedAnswerId': '1675', 'CreationDate': '2012-04-25T19:34:33.163', 'Id': '1507'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It\'s well known that <a href="http://en.wikipedia.org/wiki/Monotone_polygon">Monotone polygon</a> plays a crucial role in <a href="http://en.wikipedia.org/wiki/Polygon_triangulation">Polygon triangulation</a>. </p>\n\n<blockquote>\n  <p><strong>Definiton:</strong> monotone polygon - a polygon $P$ in the plane is called monotone with respect to a straight line $L$, if every line orthogonal to $L$ intersects $P$ at most twice.</p>\n</blockquote>\n\n<p>I am interested in building an algorithm for testing any given polygon for monotonicity.</p>\n\n<p>In my opinion, we should consider every vertex with inner angle $&gt;180^{\\circ}$, because a perpendicular from $L$ might intersect only adjacent edges of reflex vertex ($>180^{\\circ}$). In addition, slope of $L$ also should be taken into account, and should be between the slopes of adjacent edges of reflex vertex. </p>\n\n<p>It looks like the above theory should be enough for constructing an algorithm. </p>\n\n<p>What\'s your opinion? How to test polygon for monotonicity?</p>\n', 'ViewCount': '168', 'Title': 'Testing Polygon for Monotonicity', 'LastEditorUserId': '472', 'LastActivityDate': '2012-04-30T12:47:55.563', 'LastEditDate': '2012-04-29T18:29:49.203', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1588', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1170', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-04-29T18:01:16.830', 'Id': '1577'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '116', 'Title': 'Connection between castability and convexity', 'LastEditDate': '2012-05-10T13:53:55.323', 'AnswerCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1379', 'FavoriteCount': '1', 'Body': "<p>I am wondering if there are any connection between convex polygon and castable object? What can we say about castability of the object if we know that the object is convex polygon and vice versa.</p>\n\n<p>Let's gather together few basic things that we have to know.</p>\n\n<blockquote>\n  <p>The object is castable if it can removed from the mold.</p>\n  \n  <p>The polyhedron P can be removed from its mold by a translation in direction $\\vec{d}$  if and only if $\\vec{d}$ makes an angle of at  least $90^{\\circ}$ with the outward normal of all ordinary facets of P.</p>\n</blockquote>\n\n<p>For a arbitrary object testing for castability has time complexity $O(n^2)$. In my opinion, for a convex polygon if could be improved to linear time, because for every new top facet we should test that the vector $\\vec{d}$ makes an angle at least $90^{\\circ}$ with outward normal not of all but only of two adjacent ordinary facets of P. </p>\n\n<p>If this is true at least we have improvement in testing for castability in case of convex polygon.</p>\n\n<p>We else can we state about castability and convexity. Especially interesting to know, if castability tells us something about convexity.</p>\n", 'Tags': '<complexity-theory><time-complexity><computational-geometry>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-10T18:39:41.280', 'CommentCount': '5', 'AcceptedAnswerId': '1677', 'CreationDate': '2012-05-05T14:52:23.943', 'Id': '1671'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '550', 'Title': 'Line separates two sets of points', 'LastEditDate': '2012-05-10T13:54:35.603', 'AnswerCount': '3', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '1170', 'FavoriteCount': '0', 'Body': '<p>If there is a way to identify if two sets of points can be separated by a line?</p>\n\n<blockquote>\n  <p>We have two sets of points $A$ and $B$ if there is a line that separates $A$ and $B$ such that all points of $A$ and only $A$ on the one side of the line, and all points of $B$ and only $B$ on the other side.</p>\n</blockquote>\n\n<p>The most naive algorithm I came up with is building convex polygon for $A$ and $B$ and test them for intersection. It looks time the time complexity for this should be $O(n\\log h)$ as for constructing a convex polygon. Actually I am not expecting any improvements in time complexity, I am not sure it can be improved at all. But al least there should be a more beautiful way to determine if there is such a line.</p>\n', 'Tags': '<algorithms><machine-learning><computational-geometry>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-10T13:54:35.603', 'CommentCount': '0', 'AcceptedAnswerId': '1687', 'CreationDate': '2012-05-05T15:18:04.503', 'Id': '1672'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '396', 'Title': 'Maximum Enclosing Circle of a Given Radius', 'LastEditDate': '2012-05-13T19:14:54.947', 'AnswerCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1170', 'FavoriteCount': '1', 'Body': '<p>I try to find an approach to the following problem:</p>\n\n<blockquote>\n  <p>Given the set of point $S$ and radius $r$, find the center point of circle, such that the circle contains the maximum number of points from the set. The running time should be $O(n^2)$.</p>\n</blockquote>\n\n<p>At first it seemed to be something similar to smallest enclosing  circle problem, that easily can be solved in $O(n^2)$. The idea was to set an arbitrary center and encircle all point of $S$. Next, step by step, replace the circle to touch the left/rightmost points and shrink the circle to the given radius, obviously, this is not going to work.</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '31', 'LastActivityDate': '2012-05-14T03:24:33.840', 'CommentCount': '0', 'AcceptedAnswerId': '1832', 'CreationDate': '2012-05-13T18:33:29.710', 'Id': '1825'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The exercise is </p>\n\n<blockquote>\n  <p>Given a set of point $S$ and a point $p$. Decide in $O(n)$ time if $p$ is a vertex  of convex polygon formed from points of $S$.</p>\n</blockquote>\n\n<p>The problem is I am a little bit confused with time complexity $O(n)$. The more naive solution would be to construct convex polygon in $O(n\\log n)$ and test if $p$ is one of the vertices. </p>\n', 'ViewCount': '272', 'Title': 'If a point is a vertex of convex hull', 'LastEditorUserId': '472', 'LastActivityDate': '2012-05-25T13:05:40.863', 'LastEditDate': '2012-05-20T14:41:43.617', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '1941', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-05-20T03:47:59.837', 'Id': '1940'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am trying to solve the following computational geometry problem. </p>\n\n<blockquote>\n  <p>Let $S$ be a set of $n$ axis-parallel rectangles in the plane, so that the bottom edge of each rectangle in $S$ lies on the $x$-axis.</p>\n  \n  <ol>\n  <li>What is (an upper bound on) the combinatorial complexity of the union $K$ of the rectangles in $S$?</li>\n  <li>Give an efficient algorithm for computing the union and its area.</li>\n  </ol>\n</blockquote>\n\n<p>I suggest using sweep line algorithm for the purpose of computing union of areas. \nFirst we should consider queue of events. Events are just the leftmost and the rightmost $x$'s of rectangle. As in standard interpretation all $x$'s should be sorted. </p>\n\n<p>Start iterations on event queue (like in standard algorithm). On every new event we can compute an area we've already covered. When two or more rectangles intersect (can be identified by data structure) we should pick the rectangle with the biggest $y$-coordinate until the next event.</p>\n\n<p>That's a general idea. The main difference from the classic sweep line algorithm is that we don't have to compute intersection and inserting them to queue.  All we are interested in is intersection of rectangles which occur on vertical lines of leftmost $x$ and rightmost $x$.</p>\n\n<p>I am not completely sure that the solution I presented is the correct one. This exercice was marked with high complexity grade. Maybe I missed something?</p>\n\n<p>In addition, I don't know how to answer the first question. </p>\n", 'ViewCount': '488', 'Title': 'Area of the union of rectangles anchored on the x-axis', 'LastEditorUserId': '39', 'LastActivityDate': '2012-05-23T20:23:50.673', 'LastEditDate': '2012-05-23T20:23:50.673', 'AnswerCount': '0', 'CommentCount': '17', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1170', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-05-23T11:25:08.457', 'Id': '2019'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I try to solve the following coverage problem.</p>\n\n<blockquote>\n  <p>There are $n$ transmitters with coverage area of 1km and $n$ receivers. Decide in $O(n\\log n)$ that all receivers  are covered by any transmitter. All reveivers and transmiters are represented by their $x$ and $y$ coordinates.</p>\n</blockquote>\n\n<p>The most advanced solution I can come with takes $O(n^2\\log n)$. For every receiver sort all transmitter by it distance to this current receiver, then take the transmitter with shortest distance and this shortest distance should be within 0.5 km.</p>\n\n<p>But the naive approach looks like much better in time complexity $O(n^2)$. Just compute all distance between all pairs of transmitter and receiver.</p>\n\n<p>I am not sure if I can apply range-search algorithms in this  problem. For example kd-trees allow us to find such ranges, however I never saw an example, and I am not sure if there are kind of range-search for circles. </p>\n\n<p>The given complexity $O(n\\log n)$ assumes that the solution should be somehow similar to sorting.</p>\n', 'ViewCount': '220', 'Title': 'Coverage problem (transmitter and receiver)', 'LastEditorUserId': '157', 'LastActivityDate': '2012-09-14T14:03:11.483', 'LastEditDate': '2012-05-25T06:24:54.113', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1170', 'Tags': '<algorithms><computational-geometry><search-problem>', 'CreationDate': '2012-05-25T06:06:23.963', 'FavoriteCount': '3', 'Id': '2069'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've been looking around for an algorithm that would optimize the distance between 2 list of coordinates and choose which coordinate should go together.</p>\n\n<p>Say I have List 1:</p>\n\n<pre><code>205|200\n220|210\n200|220\n200|180\n</code></pre>\n\n<p>List 2:</p>\n\n<pre><code>210|200\n207|190\n230|200\n234|190\n</code></pre>\n\n<p>Calculated Distance between Coords:</p>\n\n<pre><code>205|200 to 210|200 == 5.00\n205|200 to 207|190 == 10.20\n205|200 to 230|200 == 25.00\n205|200 to 234|190 == 30.68\n\n220|210 to 210|200 == 14.14\n220|210 to 207|190 == 23.85\n220|210 to 230|200 == 14.14\n220|210 to 234|190 == 24.41\n\n200|220 to 210|200 == 22.36\n200|220 to 207|190 == 30.81\n200|220 to 230|200 == 36.06\n200|220 to 234|190 == 45.34\n\n200|180 to 210|200 == 22.36\n200|180 to 207|190 == 12.21\n200|180 to 230|200 == 36.06\n200|180 to 234|190 == 35.44\n</code></pre>\n\n<p>This Algorithm would pick:</p>\n\n<pre><code>205|200 to 230|200 == 25.00\n220|210 to 207|190 == 23.85\n200|220 to 210|200 == 22.36\n200|180 to 234|190 == 35.44\n</code></pre>\n\n<p>The Algorithm would pick these numbers as they would be the group that would have the littlest variance between the distance.\nConditions:</p>\n\n<ol>\n<li>A Coordinate may only be used ones from each list</li>\n<li>If List 1 or List2 is larger than it still only uses each coordinate once, but it tries to get the smallest distance variance and does nothing with the unused coordinates.</li>\n</ol>\n\n<p>If you need more clarification please ask.</p>\n\n<p>P.S. I've looked at the Hungarian algorithm and it seems like it will sort of do the job, but not exactly how I was expecting. The Hungarian algorithm will only try and make the least distance from all the coordinates, which can mean the smallest variance, but not every time as variance is more important here then least distance optimization.</p>\n\n<p><strong>Additional Information</strong></p>\n\n<p>I will have an array of List1, List2, and then the distances:</p>\n\n<pre><code>Distance[List1_item_0][List2_item_0] = 5;\nDistance[List1_item_0][List2_item_1] = 10.20;\nDistance[List1_item_0][List2_item_2] = 25.00;\nDistance[List1_item_0][List2_item_3] = 30.68;\n\nDistance[List1_item_1][List2_item_0] = 14.14;\nDistance[List1_item_1][List2_item_1] = 23.85;\nDistance[List1_item_1][List2_item_2] = 14.14;\nDistance[List1_item_1][List2_item_3] = 24.41;\n\nDistance[List1_item_2][List2_item_0] = 22.36;\nDistance[List1_item_2][List2_item_1] = 30.81;\nDistance[List1_item_2][List2_item_2] = 36.06;\nDistance[List1_item_2][List2_item_3] = 45.34;\n\nDistance[List1_item_3][List2_item_0] = 22.36;\nDistance[List1_item_3][List2_item_1] = 12.21;\nDistance[List1_item_3][List2_item_2] = 36.06;\nDistance[List1_item_3][List2_item_3] = 35.44;\n</code></pre>\n\n<p>From the Distance['List1_item_#] I would need to pick a distance. Once that distance is picked the [List2_item_#] CANNOT be picked by a different [List1_item_#]. The distances picked for each [List1_item_#] element would need to be picked in a way that the variance between them all is minimal. So distance for each [List1_item_#] should be as close as possible to each other without reusing a [List2_item_#] more than once.</p>\n", 'ViewCount': '232', 'Title': 'Algorithm to minimize distance variance between 2D coordinates', 'LastEditorUserId': '1654', 'LastActivityDate': '2012-11-04T16:06:16.810', 'LastEditDate': '2012-05-26T09:49:46.280', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1654', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-05-25T20:52:40.690', 'FavoriteCount': '1', 'Id': '2082'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '141', 'Title': 'Finding the point nearest to the x-axis over some segment', 'LastEditDate': '2012-05-27T12:09:06.050', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1379', 'FavoriteCount': '1', 'Body': "<p>I have problem with solving the following exercise</p>\n\n<blockquote>\n  <p>Given the set $P$ on $n$ points in two dimensions, build in time $O(n\\log n)$ a data structure of $P$ such that given a horizontal segment $s$ find the first point that $s$ touches when moving upwards from the x-axis in time $O(\\log^2n)$.</p>\n</blockquote>\n\n<p>The preprocessing time is equivalent to sorting, so we can perform sorting by one dimension.</p>\n\n<p>The query time is a little bit confusing - $\\log^2$n. I would say it's $\\log n$ binary searchs but it doesn't make sense.</p>\n", 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-13T23:48:36.627', 'CommentCount': '1', 'AcceptedAnswerId': '2105', 'CreationDate': '2012-05-27T07:29:21.960', 'Id': '2101'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p><strong>Definition</strong>: monotone polygon - a polygon $P$ in the plane is called monotone with respect to a straight line $L$, if every line orthogonal to $L$ intersects $P$ at most twice.</p>\n</blockquote>\n\n<p>I am wondering if and how it is possible to test whether there is a line $L$ for a given polygon $P$ so that $P$ is monotone with respect to $L$.</p>\n\n<p>Previously I\'ve asked for help with the <a href="http://cs.stackexchange.com/questions/1577/testing-polygon-for-monotonicity">similar problem when $L$ is the x-axis</a>, and now I am interested in the case when $L$ is not given in advance.</p>\n', 'ViewCount': '460', 'Title': 'Testing Polygon for Monotonicity with respect to any arbitrary line', 'LastEditorUserId': '1170', 'LastActivityDate': '2012-06-06T09:13:40.597', 'LastEditDate': '2012-06-04T13:30:00.020', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '2227', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1170', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-06-02T07:45:32.713', 'Id': '2197'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I consider <a href="http://en.wikipedia.org/wiki/Point_in_polygon" rel="nofollow">Point Location Problem in Polygon</a> in repetitive mode in the case of simple polygon.</p>\n\n<p>In computational geometry,Point Location Problem in Polygon problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon.</p>\n\n<p>There are few method that work in Single-Shot approach, where the input is a polygon $P$ and a single point $q$ (no preprocessing time). Ray casting algorithm is the famous algorithm for single-shot, it takes $O(n)$ to determine whether a point $q$ belongs to polygon $P$. </p>\n\n<p>In addition, there is a repetitive approach, where instead of single point $q$ we should check the sequence of points, therefore the preprocessing is required. Division wedge is a algorithm that works in repetitive mode. Query time of division wedge is $O(\\log n)$ and preprocessing time is $O(n)$. Division wedge assumes that there is a central point in polygon, visible from every vertex of polygon (part of the kernel of the polygon). The problem is a central point can be easily determined in convex polygon as well as in star-shaped polygon, but what to do in the case of simple polygon.</p>\n\n<p>If division wedge is applied in the case of simple polygon how we can determine a central point in simple polygon? If division edge in not applied if there is the more efficient way to solve a problem in simple polygon than in arbitrary planar subdivision.</p>\n', 'ViewCount': '251', 'Title': 'Point Location Problem in Polygon in Repetitive Mode for a Simple Polygon', 'LastEditorUserId': '472', 'LastActivityDate': '2012-06-05T14:46:01.177', 'LastEditDate': '2012-06-04T16:02:22.587', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '2228', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-06-04T15:56:42.037', 'Id': '2225'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I was trying to write some simple code for a "flow layout" manager and what I came up with initially was something like the following (semi-pseudocode):</p>\n\n<pre><code>int rowHeight = 0;\nRECT rect = parent.getClientRect();\nPOINT pos = rect.position;  // Start at top-left corner, row by row\n\nforeach (Window child in parent.children)\n{\n    // POINT is a tuple of: (x, y)\n    // SIZE is a tuple of: (width, height)\n    // RECT is a tuple of: (left, top, right, bottom)\n    RECT proposed1 = RECT(rect.left + pos.x, rect.top + pos.y, rect.right, rect.bottom),\n         proposed2 = RECT(rect.left, rect.top + pos.y + rowHeight, rect.right, rect.bottom);\n    SIZE size1 = child.getPreferredSize(proposed1),\n         size2 = child.getPreferredSize(proposed2);\n    if (size1.width &lt;= proposed1.width)\n    {\n        child.put(proposed1);  // same row\n        pos.x += size1.width;\n        rowHeight = max(rowHeight, size1.height);\n    }\n    else\n    {\n        child.put(proposed2);  // new row\n        pos.x = rect.left;\n        pos.y += rowHeight;\n        rowHeight = size2.height;\n    }\n}\n</code></pre>\n\n<p>In other words, the algorithm is very simple:<br>\nThe layout manager asks every component, "is the remaining portion of the row enough for you?" and, if the component says "no, my width is too long", it places the component on the next row instead.</p>\n\n<p>There are two major problems with this approach:</p>\n\n<ul>\n<li><p>This algorithm results in very long, thin components, because it is essentially greedy with the width of each component -- if a component wants the whole row, it will use the whole row (ugly), even if it could use a smaller width (but larger height).</p></li>\n<li><p>It only works if you already <em>know</em> what the parent\'s size is -- but you might not! Instead, you might simply have a restriction, "the parent\'s size must be between these two dimensions", but the rest might be open-ended.</p></li>\n</ul>\n\n<p>I am, however, at a loss of how to come up with a better algorithm -- how do I figure out what would be a good size to to \'propose\' to the component?   And even when I figure that out, what should I try to optimize, exactly? (The area, the width, the aspect ratio, the number of components on the screen, or something else?)</p>\n\n<p>Any ideas on how I should approach this problem?</p>\n', 'ViewCount': '280', 'Title': '"Flow layouts" inside a GUI -- how do I come up with a good algorithm?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-10T11:26:48.527', 'LastEditDate': '2012-06-10T11:26:48.527', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '836', 'Tags': '<algorithms><computational-geometry><greedy-algorithms><user-interface>', 'CreationDate': '2012-06-09T23:51:40.070', 'FavoriteCount': '0', 'Id': '2306'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In the book <a href="http://www.cs.uu.nl/geobook/">"Computational Geometry: Algorithms and Applications"</a> by Mark de Berg et al., there is a very simple brute force algorithm for computing Delaunay triangulations. The algorithm uses the notion of <em>illegal edges</em> -- edges that may not appear in a valid Delaunay triangulation and have to be replaced by some other edges. On each step, the algorithm just finds these illegal edges and performs required displacements (called <em>edge flips</em>) till there are no illegal edges.</p>\n\n<blockquote>\n  <p>Algorithm <strong>LegalTriangulation</strong>($T$)</p>\n  \n  <p><em>Input</em>. Some triangulation $T$ of a point set $P$.<br>\n  <em>Output</em>. A legal triangulation of $P$.</p>\n  \n  <p><strong>while</strong> $T$ contains an illegal edge $p_ip_j$<br>\n  <strong>do</strong><br>\n  $\\quad$ Let $p_i p_j p_k$ and $p_i p_j p_l$ be the two triangles adjacent to $p_ip_j$.<br>\n  $\\quad$ Remove $p_ip_j$ from $T$, and add $p_kp_l$ instead.<br/>\n  <strong>return</strong> $T$.</p>\n</blockquote>\n\n<p>I\'ve heard that this algorithm runs in $O(n^2)$ time in worst case; however, it is not clear to me whether this statement is correct or not. If yes, how can one prove this upper bound?</p>\n', 'ViewCount': '769', 'Title': 'Brute force Delaunay triangulation algorithm complexity', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-21T13:44:11.817', 'LastEditDate': '2012-06-17T13:28:32.350', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '162', 'Tags': '<algorithms><time-complexity><algorithm-analysis><computational-geometry><runtime-analysis>', 'CreationDate': '2012-06-16T22:01:33.543', 'FavoriteCount': '2', 'Id': '2400'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '912', 'Title': 'Shortest distance between a point in A and a point in B', 'LastEditDate': '2012-06-20T07:35:54.063', 'AnswerCount': '4', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1170', 'FavoriteCount': '1', 'Body': '<blockquote>\n  <p>Given two sets $A$ and $B$ each containing $n$ disjoint points\n  in the plane, compute the shortest distance between a point in $A$ and a point in $B$, i.e., $\\min \\space \\{\\mbox{ } \\text{dist}(p, q) \\mbox{ } | \\mbox{ } p \\in A \\land q \\in B \\space \\} $.</p>\n</blockquote>\n\n<p>I am not sure if I am right, but this problem very similar to problems that can be solved by linear programming in computational geometry. However, the reduction to LP is not straightforward. Also my problem looks related to finding the thinnest stip between two sets of points which obviously can be solved by LP in $O(n)$ in 2-dimensional space.</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-06-23T08:50:58.580', 'CommentCount': '4', 'AcceptedAnswerId': '2416', 'CreationDate': '2012-06-19T18:28:30.493', 'Id': '2415'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p>For a given planar graph $G(V,E)$ embedded in the plane, defined by list of segments $E= \\left \\{ e_1,...,e_m \\right \\} $, each segment $e_i$ is represented by its endpoints $\\left \\{ L_i,R_i \\right \\}$. Construct a DCEL data structure for the planar subdivision, describe an algorithm, prove it\'s  correctness and show the complexity.</p>\n</blockquote>\n\n<p>More information about DCEL (double connected edge list) you can find on <a href="http://en.wikipedia.org/wiki/DCEL" rel="nofollow">wikipedia - DCEL</a>.</p>\n\n<p>According to description of DCEL and connections between different objects of DCEL (vertices, edges and faces) the required data structure must be complicated.</p>\n\n<p>I found that <em>doubly-linked lists</em> can be used as data structure for DCEL, I am not sure how to build and maintain connections between vertices - edges and edges - faces.</p>\n\n<p>I tried to find any hint in textbook, but the construction of DCEL wasn\'t described, map overlay is more popular topic.</p>\n\n<p>Regarding the algorithm, plane sweep algorithm with $O((n+l)\\log n)$ should do the job, but it seems to be overkill, because segments are intersected not in arbitrary points, but only in endpoints, therefore $O(n\\log n)$ seems more reasonable.</p>\n\n<p>The main problem is the data structure, so far I haven\'t seen any good example with at least similar complexity.</p>\n\n<p>Please, if you have any idea about a data structure for DCEL or about algorithm for constructing DCEL, share it with us.</p>\n', 'ViewCount': '1495', 'Title': 'Constructing of Double Connected Edge List (DCEL)', 'LastEditorUserId': '1379', 'LastActivityDate': '2013-09-22T03:25:45.343', 'LastEditDate': '2012-06-22T15:37:35.383', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '2516', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><data-structures><computational-geometry><lists>', 'CreationDate': '2012-06-22T12:58:26.957', 'Id': '2450'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p>Given a set $S$ of points $p_1,..,p_2$ give the most efficient algorithm for determining if any 3 points of the set are collinear.</p>\n</blockquote>\n\n<p>The problem is I started with general definition but I cannot continue to actually solving the problem.</p>\n\n<p>What can we say about collinear points in general, 3 points $a,b,c$ are collinear if the distance $d(a,c) = d(a,b)+d(b,c)$ in the case when $b$ is between $a$ and $c$.</p>\n\n<p>The naive approach has $O(n(n-1)(n-2))=O(n^3)$ time complexity.</p>\n\n<p>How to solve this problem, what should be the next step?</p>\n', 'ViewCount': '756', 'Title': 'If any 3 points are collinear', 'LastActivityDate': '2012-06-22T18:23:20.000', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2456', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1379', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-06-22T17:09:13.053', 'FavoriteCount': '1', 'Id': '2453'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose we are given a list of $n$ points, whose $x$ and $y$ coordinates are all non-negative. Suppose also that there are no duplicate points. We can only go from point $(x_i, y_i)$ to point $(x_j, y_j)$ if $x_i \\le x_j$ and $y_i \\le y_j$. The question is: given these $n$ points, what is the maximum number of points that we can reach if we are allowed to draw two paths that connect points using the above rule? Paths must start from the origin and may contain repeated points. $(0, 0)$ is of course not included in the points reached.</p>\n\n<p>An example: given $(2, 0), (2, 1), (1, 2), (0, 3), (1, 3), (2, 3), (3, 3), (2, 4), (1, 5), (1, 6)$, the answer is $8$ since we can take $(0, 0) \\rightarrow (2, 0) \\rightarrow (2, 1) \\rightarrow (2, 3) \\rightarrow (2, 4)$ and $(0, 0) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (1, 5) \\rightarrow (1, 6)$.</p>\n\n<p>If we are allowed to draw only one path, I can easily solve the question by dynamic programming that runs in $O(n^2)$. I first sort the points by decreasing $x_i+y_i$. Let $D[i]$ be the maximum number of coins that one can pick up from coins $1$ to $i$ in the sorted list. Then $D[1] = 1$ and $D[i] = \\max\\limits_{1\\le j &lt; i, x_j \\le x_i, y_j \\le y_i} D[j] + 1$. The answer then is just $\\max\\limits_{1\\le i \\le n} D[i] + 1$.</p>\n\n<p>But I cannot come up with a recurrence relation for two paths. If anyone has any idea about such a recurrence relation, I would be happy to hear what they are.</p>\n', 'ViewCount': '199', 'Title': 'Maximum number of points that two paths can reach', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-02T14:30:00.137', 'LastEditDate': '2012-06-30T17:40:21.150', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '2562', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1718', 'Tags': '<computational-geometry><dynamic-programming><recurrence-relation>', 'CreationDate': '2012-06-29T23:42:31.997', 'Id': '2553'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm searching papers about the history and evolution of 2D geometry manipulation and engines, but I can't find what I'm looking for. Can someone help me with some recommended papers or recommended keywords? I'm looking for different approaches on the manipulation of 2D objects like rectangles, triangles, ellipses. </p>\n", 'ViewCount': '76', 'Title': '2D Geometry manipulation papers/search keywords', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-09T08:54:35.237', 'LastEditDate': '2012-07-09T08:54:35.237', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'OwnerDisplayName': 'canha', 'PostTypeId': '1', 'OwnerUserId': '2182', 'Tags': '<reference-request><computational-geometry>', 'CreationDate': '2012-07-06T22:16:15.143', 'Id': '2640'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '320', 'Title': 'Polygons generated by a set of segments', 'LastEditDate': '2012-07-18T11:08:48.960', 'AnswerCount': '1', 'Score': '5', 'OwnerDisplayName': 'Antoine', 'PostTypeId': '1', 'OwnerUserId': '2151', 'FavoriteCount': '1', 'Body': '<p>Given a set of segments, I would like to compute the set of closed polygons inside the convex hull of the set of the end of those segments. The vertices of the polygons are the intersections of the segments. For example, if you draw the 6 lines restricted which equations are: $x=-1$, $x=0$, $x=1$, $y=-1$, $y=0$, $y=1$, I would like the algorithm to output the four unit squares around the origin.<img src="http://i.stack.imgur.com/I6qmZ.png" alt="The polygons I\'m trying to compute"></p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '2151', 'LastActivityDate': '2012-07-18T11:08:48.960', 'CommentCount': '5', 'AcceptedAnswerId': '2732', 'CreationDate': '2012-04-16T17:15:21.840', 'Id': '2717'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The problem is as follows:</p>\n\n<p>Given a finite set of rectangles ($S\\subset\\mathbb{R}\\times\\mathbb{R}$), build a data structure that will support the following operations:</p>\n\n<ul>\n<li>Check, receives a rectangle $r\\in\\mathbb{R}\\times\\mathbb{R}$, and returns true iff there is a rectangle $c\\in S$ so that $r_x \\leq c_x$ and $r_y \\leq c_y$.</li>\n<li>Get, receives a rectangle $r\\in\\mathbb{R}\\times\\mathbb{R}$, and returns the minimal member of $S$ (that is, a member with a minimal area - $c_x c_y$) that contains $r$ (i.e., $r_x \\leq c_x$ and $r_y \\leq c_y$).</li>\n<li>Insert, receives a rectangle $r\\in\\mathbb{R}\\times\\mathbb{R}$, and adds it to $S$.</li>\n<li>Remove, receives a rectangle $r\\in\\mathbb{R}\\times\\mathbb{R}$, and removes it from $S$.</li>\n</ul>\n\n<p>The four procedures have to be efficient, measuring efficiency by $m$ and $n$, where $m$ is the number of different widths in $S$ and $n$ is the number of different heights in $S$.</p>\n\n<p>Space efficiency has to be no worse than $O(mn)$ (that is, linear to the number of elements in $S$).</p>\n', 'ViewCount': '215', 'Title': 'Finding a minimal containing rectangle from a given set of rectangles', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-18T11:09:53.763', 'LastEditDate': '2012-07-18T10:18:12.310', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2197', 'Tags': '<algorithms><data-structures><computational-geometry>', 'CreationDate': '2012-07-18T08:41:16.803', 'FavoriteCount': '1', 'Id': '2810'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>For fun I am trying to make a wire-frame viewer for the <a href="http://0x10c.com/doc/dcpu-16.txt" rel="nofollow">DCPU-16</a>. I understand how do do everything except how to hide the lines that are hidden in the wire frame. All of the questions here on SO all assume you have access to OpenGL, unfortunately I do not have access to anything like that for the DCPU-16 (or any kind of hardware acceleration).</p>\n\n<p>I found a fairly good description of Appel\'s algorithm on <a href="http://books.google.com/books?id=aVQnUfL3yEwC&amp;lpg=PA251&amp;ots=zCOEvuKqve&amp;dq=Arthur%20Appel%27s%20algorithm.&amp;pg=PA252#v=onepage&amp;q&amp;f=true" rel="nofollow">Google Books</a>. However there is one issue I am having trouble figuring out.</p>\n\n<blockquote>\n  <p>Appel defined contour line as an edge shared by a front-facing and a\n  back-facing polygon, or unshared edge of a front facing polygon that\n  is not part of a closed polyhedron. An edge shared by two front-facing\n  polygons causes no change in visibility and therefore is not a contour\n  line. In Fig. 8.4, edges AB, EF, PC, GK and CH are contour lines,\n  whereas edges ED, DC and GI are not.</p>\n</blockquote>\n\n<p><img src="http://i.stack.imgur.com/Gajc7.png" alt="Fig. 8.4"></p>\n\n<p>I understand the rules of the algorithm and how it works once you have your contour lines, however I do not understand is what I need to do to determine if a edge is "<em>shared by a front-facing and a back-facing polygon, or unshared edge of a front facing polygon that is not part of a closed polyhedron</em>" from a coding point of view. I can look at a shape and I can know what lines are contour lines in my head but I don\'t have a clue on how to transfer that "understanding" in to a coded algorithm.</p>\n\n<hr>\n\n<h2>Update</h2>\n\n<p>I have made some progress in determining contour lines. I found <a href="http://www.eng.buffalo.edu/courses/mae573/handouts/lecture13.pdf" rel="nofollow">these</a> <a href="http://www.eng.buffalo.edu/courses/mae573/handouts/appel.pdf" rel="nofollow">two</a> lecture notes from a University of Buffalo class on computer graphics.</p>\n\n<p><img src="http://i.stack.imgur.com/xoe49.png" alt="enter image description here"></p>\n\n<blockquote>\n  <p>Consider the edges. These fall into three categories. </p>\n  \n  <ol>\n  <li>An edge joining two invisible faces is itself invisible. This will be deleted from the list and ignored. </li>\n  <li>An edge joining two potentially-visible faces is called a \'material edge\' and will require further processing. </li>\n  <li>An edge joining a potentially-visible face and an invisible face is a special case of a \'material edge\' and is also called a \'contour\n  edge\'.</li>\n  </ol>\n</blockquote>\n\n<p>Using the above two pieces of information I am able to get closer to being able to write this out as code, but I still have a long way to go.</p>\n', 'ViewCount': '299', 'Title': "How to find contour lines for Appel's Hidden Line Removal Algorithm", 'LastEditorUserId': '39', 'LastActivityDate': '2012-12-03T16:18:12.797', 'LastEditDate': '2012-08-12T20:25:09.697', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '9', 'OwnerDisplayName': 'Scott Chamberlain', 'PostTypeId': '1', 'OwnerUserId': '2710', 'Tags': '<algorithms><computational-geometry><graphics>', 'CreationDate': '2012-04-22T21:16:34.033', 'Id': '3139'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I like to implement an arc-length Parameterization of a cubic bezier curve. So far I have implemented the method of calculating the arc length of the curve and now I\'m stuck at calculating the times to divide the original curve into equal arc length segments.</p>\n\n<p>What i have:</p>\n\n<ul>\n<li>$m = 5$ The number of segments to create</li>\n<li>$i = 0,1, ...., m$ </li>\n<li>$s = \\text{arc length}$</li>\n<li>$l = s / m$</li>\n<li>$t_0,t_1,...,t_n$ The parameter values of the original bezier curve.</li>\n</ul>\n\n<p>The formula I have:\n$$\\int_{t_0}^{\\tilde{t_i}} ds/dt = i * \\tilde{l}$$</p>\n\n<p>To calculate the value of $\\tilde{t_i}$ I would have to go through 2 steps:</p>\n\n<ol>\n<li>Calculate a spline segment indexed by $j$ which satisfies $\\sum_{p=0}^{j-1} l_p \\le i * \\tilde{l} &lt; \\sum_{p=0}^{j}l_p$</li>\n<li>Compute $\\tilde{t_i}$ such that $\\int_{t_j}^{\\tilde{t_i}}ds/dt * dt = i  * \\tilde{l} - \\sum_{p=0}^{j-1}l_p$</li>\n</ol>\n\n<p>To my questions:</p>\n\n<ol>\n<li><p>What is $\\tilde{l}$? I know it is an approximated value but is it neccesery to be different or could just use $l$?</p></li>\n<li><p>The first calculation of $j$ makes sense, but how would I solve the second to $\\tilde{t_i}$?</p></li>\n</ol>\n\n<p>Maybe I just don\'t understand correctly what the integral $\\int_a^bds/dt*dt$ is or how I can calculate it programmatically.</p>\n\n<p>I am following <a href="http://homepage.cs.uiowa.edu/~hank/publications/images/ArcLength03.pdf" rel="nofollow">this paper</a>.</p>\n', 'ViewCount': '282', 'Title': 'Arc-Length parameterization of a cubic bezier curve', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-11T20:52:56.190', 'LastEditDate': '2012-10-11T20:52:56.190', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '3156', 'Tags': '<algorithms><computational-geometry><numerical-analysis>', 'CreationDate': '2012-10-11T15:33:30.873', 'Id': '5021'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>We are given an interval $I$ and several points $p_1,p_2,...,p_n$. We are also given a set of sensors. Each sensor can be represented by an interval on the same line, which means all points lie within the interval can be monitored by the corresponding sensor. The sensors may not have the equal range.</p>\n\n<p>Given the current positions of points and sensors, some (or maybe none) points in $I$ may not be monitored by any sensor. We would like to ask the following question: </p>\n\n<blockquote>\n  <p>Given a distance $\\delta$, is it possible to shift each sensor (to the left or to the right) by a distance at most $\\delta$, such that every point in $I$ can be covered by some sensor?</p>\n</blockquote>\n\n<p>PS: I tried to solve this by greedy algorithm. But there is always an exception to any greedy paradigm I came up with. If we want to cover the whole interval with the sensors, I am sure it can be solved by greedy algorithm. But if we only want to "monitor" finite discrete points, is there an efficient algorithm?</p>\n', 'ViewCount': '136', 'Title': 'Sensor Cover Problem', 'LastEditorUserId': '848', 'LastActivityDate': '2012-10-17T23:24:33.717', 'LastEditDate': '2012-10-15T01:35:07.993', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '848', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-10-14T13:26:04.793', 'FavoriteCount': '1', 'Id': '6062'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The <a href="https://en.wikipedia.org/wiki/Radon_transform" rel="nofollow">Radon transform</a> is used to take 2d projections of an object and create a 3d representation.</p>\n\n<p>It seems like it would be possible to apply such a transform in 3d graphics in games (although possibly too slow to be practical).</p>\n\n<p>For example, a very simple way to display an object is to use a 3d rectangle and texture map each side. This is relatively fast but the 3d detail is limited. When a side is parallel with the visual plane it will represent the detail 100% (so the visual detail would be limited to that of the texture map). Of course it won\'t represent external 3d effects properly, like lighting.</p>\n\n<p>But by using the Radon transform one could gain a true 3d approximation of the object from the six textures/projections used. By increasing the number of textures/projections the approximation is better.</p>\n\n<p>I\'m curious if the idea has potential. Possibly for high-quality 3d models it might pay off in performance and size. Of course 3d models can be optimized to limit their size which also increases speed but visually doesn\'t change much.</p>\n', 'ViewCount': '207', 'Title': 'Radon transform for advanced 3d graphics and games?', 'LastEditorUserId': '4244', 'LastActivityDate': '2013-07-17T02:17:03.387', 'LastEditDate': '2012-10-19T06:48:32.120', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4244', 'Tags': '<algorithms><computational-geometry><efficiency><graphics>', 'CreationDate': '2012-10-18T05:20:19.123', 'FavoriteCount': '1', 'Id': '6147'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Intro:</p>\n\n<p>I'm working with huge data set that i need to plot in browser, and since there may be up to 1M points my idea was to create different representations for different zoom levels</p>\n\n<p>lets say i have 100k points, i would average two-by-two until i get 50k, then i would repeat that until i get below 500 points (my arbitrary threshold)</p>\n\n<p>so on the most zoomed-out level i would draw all 500 points, or part of it, depending of the chart size, and as i zoom in, i would switch to next zoom level (and stream data if user drags selection l/r), and ultimately if user wants to see fine grain details he can zoom to 0 zoom level and see all the fine details.</p>\n\n<p>I actually created this prototype, and its working quite well, except for one thing: side-effect of this is, as you can imagine, that peaks are lost in those iterations of averaging.</p>\n\n<p>I did some research and find about Douglas-Peucker algorithm, and how it can perserve peaks, i did some tests, and it works quite well, but the problem with that is that if it encounters a series of data (y values) [1,1,1,1,5,6,1,1,1,1,1,1] it will smooth that to something like [1,6,1,1] which doesn't work for me since i need to keep ratio of zoom levels like this</p>\n\n<p>n (length of original data) > n/2 > n/4 > n/8 > .....</p>\n\n<p>I read quite few papers on line smoothing, but all algorithms that i found are accepting distance threshold, that they use for smoothing as a parameter, and none of those can accept number of desired output elements, and also, since their goal is to smooth the line, they will transform sequence like this (y values) [1,1,1,1,1,1,1,1,1,1,1] into [1,1]</p>\n\n<p>So, finally, my question:</p>\n\n<p>Is there an algoritm that:</p>\n\n<ul>\n<li>instead of usual distance threshold accepts the desired number of output elements</li>\n<li>tries to perserve peaks (as Douglas-Peucker does)</li>\n<li>will smooth data uniformly, so even if it gets (y values) [1,1,1,1,1,1] and i say i want 3 outputs, event if it IS in theory correct to smooth as [1,1] i would need to get [1,1,1] instead</li>\n</ul>\n\n<p>Also, please don't be confused by lack of X axis information because it is irrelevant since all data are measured from 1 to n in steps of 1, so there are no N/A values, or blank spots, or values like [1.3,1.4,3]</p>\n\n<p>x is always [1,2,3....n]</p>\n", 'ViewCount': '366', 'Title': 'Line smoothing algorithm that perserve data uniformity', 'LastEditorUserId': '4366', 'LastActivityDate': '2012-10-30T18:22:35.023', 'LastEditDate': '2012-10-26T14:23:52.147', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4366', 'Tags': '<computational-geometry><approximation><graphics>', 'CreationDate': '2012-10-26T04:04:35.900', 'FavoriteCount': '2', 'Id': '6321'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>By making use of the fact that sorting $n$ numbers requires \n$\\Omega(n \\log n)$ steps for any optimal algorithm (which uses \'comparison\' for sorting), how can I prove that finding the <a href="http://en.wikipedia.org/wiki/Convex_hull" rel="nofollow">convex-hull</a> of $n$ points is bounded by $\\Omega (n \\log n)$ steps?</p>\n', 'ViewCount': '254', 'Title': 'Lower bound for Convex hull', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-29T18:56:12.077', 'LastEditDate': '2012-10-29T18:56:12.077', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4190', 'Tags': '<complexity-theory><computational-geometry><lower-bounds>', 'CreationDate': '2012-10-29T07:20:12.997', 'Id': '6369'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have encountered the following problem.</p>\n\n<p>We have $N$ points in discrete coordinates,distributed through a plane with vertical axis $[1..Y]$ and horizontal axis $[1..X]$.\nWe can perform the action of removing all points with vertical coordinate $y$, in short removing $y$.</p>\n\n<p><img src="http://i.stack.imgur.com/jcs9u.png" alt="example"></p>\n\n<p>What is the least number of $y$\'$s$ we must remove so that the number of $x$ that have points is less than $X/2$.\nFor example in the graph above removing 1 and 2 leaves points only in 1,3,6,9.</p>\n\n<p>This seems like a NP-complete problem to me so the only solution I have developed is removing all combinations of $y\'$s. I would be grateful if someone experienced in computation-theory could point me to a similar known problem (or maybe a problem this could be reduced to), any suggestion is welcome.</p>\n', 'ViewCount': '164', 'Title': 'Is the following NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-09T08:00:56.913', 'LastEditDate': '2012-11-09T08:00:56.913', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '5', 'OwnerDisplayName': 'manix', 'PostTypeId': '1', 'OwnerUserId': '4496', 'Tags': '<complexity-theory><np-complete><computational-geometry>', 'CreationDate': '2012-11-07T17:35:21.283', 'Id': '6542'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm just curious about the pseudocode (or real source code, doesn't matter) of the recursive version of this algorithm. In almost every book chapter/paper when describing this topic, they mention that the recursive version takes exponential time and then they give the code for the dynamic programming approach. I understand how the iterative version (dynamic programming ie. memoization) works. But i just wonder about the recursive version.\nFor the info, the key part in the iterative code is: <br/></p>\n\n<blockquote>\n  <p>$\\ell$ ... left <br/>\n  $r$ ... right <br/>\n  $a$ ... apex <br/>\n  $T$ ... triangulation </p>\n  \n  <p>$T_{\\ell,r}= \\min\\{T_{\\ell,a} + \\text{perimeter}_{\\ell,a,r} + T_{a,r}\\}$</p>\n</blockquote>\n\n<p>So how does the recursive function <code>findOT()</code> seem in <br/>\npseudocode or one of these languages (C#, Java, C/C++, PHP, Javascript, SML)?</p>\n", 'ViewCount': '240', 'Title': 'Minimum weight triangulation', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-18T16:49:03.613', 'LastEditDate': '2012-11-18T08:27:23.633', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '6743', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4610', 'Tags': '<algorithms><computational-geometry><recursion>', 'CreationDate': '2012-11-17T19:29:10.790', 'Id': '6720'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I want to draw a Voronoi diagram with 9 sites and with </p>\n\n<ol>\n<li>no vertex, </li>\n<li>1 vertex, </li>\n<li>4 vertices, and</li>\n<li>7 vertices.</li>\n</ol>\n\n<p>How do I approach this question. The one with no vertex is easy, it can be done by collinear points. What about the others.</p>\n\n<p>A figure for each would be appreciated.</p>\n', 'ViewCount': '86', 'Title': 'Voronoi diagram with given number of vertices and sites', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-19T09:56:50.057', 'LastEditDate': '2012-11-19T09:27:47.853', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6760', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4635', 'Tags': '<computational-geometry>', 'CreationDate': '2012-11-19T05:52:04.410', 'Id': '6755'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p><strong>Topic:</strong><br>\nThe <a href="http://risorse.dei.polimi.it/maxfs/" rel="nofollow">maximum feasible subsystem problem</a>, which is generally NP-hard [1].</p>\n\n<p><strong>Question:</strong><br>\nAre there special algorithms in case of only 2 variables (2D linear constraints)? The problem seems to be a lot less complex in my humble opinion but is this true? Can you guys point me to any algorithms/papers for this limited case with reduced computational complexity?</p>\n\n<p><strong>References:</strong><br>\n[1] E. Amaldi and V. Kann, <a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=E5F2A09B65113E8B30F82BEF29FF00FD?doi=10.1.1.43.9283&amp;rep=rep1&amp;type=pdf" rel="nofollow">The complexity and approximability of finding maximum feasible subsystems of linear relations</a> Theoretical Computer Science, vol. 147, pp. 181\u2013210, 1993.</p>\n', 'ViewCount': '43', 'Title': 'Maximum feasible subsystem problem (MaxFS) in 2 variables', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-19T13:41:31.257', 'LastEditDate': '2012-11-19T13:41:31.257', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4653', 'Tags': '<computational-geometry><linear-programming><linear-algebra>', 'CreationDate': '2012-11-19T13:11:51.377', 'Id': '6765'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have ordered a few leather sheets from which I would like to build juggling balls by sewing edges together. I\'m using the Platonic solids for the shape of the balls.</p>\n\n<p>I can scan the leather sheets and generate a polygon that approximates the shape of the leather sheet (as you know, it\'s animal skin, and it doesn\'t come in rectangles).</p>\n\n<p>So now, I would like to maximize the size of my juggling ball.</p>\n\n<p>In my example, the polygons are regular ones, but I\'m looking for a solution with simple polygons.</p>\n\n<p>What is the largest scale factor that I can apply to my polygons so that they all fit inside the sheet ?</p>\n\n<p>I am trying to minimize the waste by using as much as material as possible.</p>\n\n<p>Obviously, cutting the polyhedron net into individual polygon will increase the space of possible combination, but also decrease the quality of the final geometry, because there is more sewing involved and accumulated errors. But this question is not about enumerating the different ways of unfolding a polyhedron. They can be considered independently. So the polygons are simple polygons.</p>\n\n<p><em>Formally:</em></p>\n\n<p>Input:</p>\n\n<ul>\n<li>$P$ : a simple polygon (the target)</li>\n<li>$S$ : the set of polygons I want to place</li>\n<li>$G$ : a graph of $n$ simple polygons - each node represents a simple polygon in $S$, and there is one edge edge between each pair of polygons that share a common edge   </li>\n<li>$\\alpha &gt;= 0, \\beta &gt;= 0$ (usage of material and connectivity)</li>\n</ul>\n\n<p>Output:</p>\n\n<ul>\n<li>a scale factor $f$</li>\n<li>$H$, a subgraph of $G$ </li>\n<li>$Loc$: a location and an angle for each polygon in $V(G)$</li>\n<li>a measure of the quality $m$ of the solution: $ m = \\alpha.f + \\beta. {|E(H)|\\over|E(G)|} $</li>\n</ul>\n\n<p>Maximize $m$ subject to these conditions:</p>\n\n<ul>\n<li>$ | V(H) | =  |V(G)| $  (1)</li>\n<li>$ | E(H) | &lt;= |E(G)| $  (2)</li>\n<li>for every polygon $S_i$ in $S$, $S_i$ scaled by a factor $f$ at location $Loc(S_i)$ is inside $P$ (3)</li>\n<li>polygons in $V(H)$ don\'t overlap (4)</li>\n</ul>\n\n<p>( V(G) are the vertices in the graph, and S is the set of polygons, but they describe the same set of objects. Maybe there is a more compact way to do this.) </p>\n\n<p>Explanation of the conditions:</p>\n\n<ul>\n<li>(1) I want all the polygons to be in the final layout</li>\n<li>(2) Some connections may be broken if necessary</li>\n<li>(3) (4) the ball is made of leather</li>\n</ul>\n\n<p>Here is the target polygon\n<img src="http://i.stack.imgur.com/mopxJ.jpg" alt="Leather sheet"></p>\n\n<p>Here is the set of polygons I want to pack:\n<img src="http://i.stack.imgur.com/H4LEi.png" alt="Polyhedron net"></p>\n', 'ViewCount': '337', 'Title': 'How to pack polygons inside another polygon?', 'LastEditorUserId': '2151', 'LastActivityDate': '2012-11-22T11:14:54.447', 'LastEditDate': '2012-11-22T11:14:54.447', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '15', 'PostTypeId': '1', 'OwnerUserId': '2151', 'Tags': '<optimization><computational-geometry><packing>', 'CreationDate': '2012-11-21T06:14:34.403', 'FavoriteCount': '1', 'Id': '6800'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am investigating a convex hull algorithm that involves sorting. In fact, its running time is limited by sorting, so it is $O(n \\log n)$, where $n$ is the number of points on the plane.</p>\n\n<p>That algorithm first sorts the points by x-coordinates. It then includes the first and last points in the convex hull. From there on, I am confused. How could an algorithm like this get the other points of the hull?</p>\n', 'ViewCount': '143', 'Title': 'How does sorting come into play with convex hull?', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-08-20T19:10:17.393', 'LastEditDate': '2012-11-30T07:53:04.263', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2860', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2012-11-30T07:42:55.877', 'Id': '7037'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m familiar with the classical convex hull calculation algorithms. The lower bound for computing the CH of a set of points $P$ is $n\\log(n)$. </p>\n\n<p>However, what if I\'m given a sequence of points and told they form a CH? One check is to "walk the points" in order and check for "left turns" (CCW). However, this doesn\'t handle the case of self-intersections (you could imagine a counter-example that "winds around starting from the center" making only CCW turns. </p>\n\n<p>I\'ve been told this "validation" can be done in $O(n)$ time, but to check for self-intersection naively, I see $O(n^2)$ time.</p>\n\n<p>My next thought is to run <a href="http://en.wikipedia.org/wiki/Graham_scan" rel="nofollow">Graham\'s Scan</a>. Since the points are presumably on a CH, it takes $O(n)$ to find the lower left point, say $p_0$, and from there, <strong>I THINK you can guarantee</strong> that all points $p_1, p_2,\\dots,p_n$ are already sorted by angle between $p_0$ and $x$-axis. As you move the three-point-window forward along the hull, the points ahead are still properly sorted. The reasoning for $O(n)$ then follows per normal reasoning for Graham\'s scan, minus the need for $O(n\\log n)$ sorting.</p>\n\n<p>1) Is my assumption, in bold, correct? <br>\n2) Is there an easier method that wouldn\'t involve running Graham\'s scan?</p>\n', 'ViewCount': '85', 'Title': 'Validating a sequence of points as a convex hull', 'LastEditorUserId': '5044', 'LastActivityDate': '2012-12-12T07:49:42.247', 'LastEditDate': '2012-12-11T23:53:01.120', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '2', 'OwnerDisplayName': 'Jmoney38', 'PostTypeId': '1', 'OwnerUserId': '5044', 'Tags': '<computational-geometry>', 'CreationDate': '2012-12-11T01:58:36.587', 'Id': '7344'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am trying to create an <a href="http://en.wikipedia.org/wiki/Isochrone_map" rel="nofollow">isochrone</a> based on the OpenStreetMap data set. Everything works fine, I extracted data, processed it into a DAG, ran a Dijkstra algorithm over it. The result is a subset of the complete graph. This is an impression of the covered parts of the subset displayed over Google Maps:</p>\n\n<p><img src="http://i.stack.imgur.com/EwERW.png" alt="all vertices of graph"></p>\n\n<p>However, when the area gets larger, the number of reached vertices gets very large and displaying like this gets slow. What I would like to do is convert the set of edges and vertices into a polygon. Basically, this should be posible by removing all of the inner edges, leaving just the edges around the boundary of the area and the edges pointing out from it. I know coordinates for all vertices and approximating each edge as a line would be fine. Larger inner areas should become holes inside the polygon.</p>\n\n<p>My first attempt was to use an geospatial library (in my case the SqlServer spatial extensions), create a multiline from all of the edges and doing an ST_Buffer on it. Turns out to be very slow and memory consuming for large numbers of edges (> 1000)</p>\n\n<p>I was thinking along the lines of finding small polygons in the set (turning left at every turn?) and removing every edge that is part of 2 of these polygons. </p>\n\n<p>Extra image to use in comment below:\n<img src="http://i.stack.imgur.com/M2SWO.png" alt="sample graph"></p>\n', 'ViewCount': '526', 'Title': 'Algorithm for getting the outer boundary of a large graph', 'LastEditorUserId': '5116', 'LastActivityDate': '2013-01-09T12:18:08.840', 'LastEditDate': '2013-01-09T12:18:08.840', 'AnswerCount': '3', 'CommentCount': '3', 'AcceptedAnswerId': '7498', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '5116', 'Tags': '<algorithms><computational-geometry><graph-traversal>', 'CreationDate': '2012-12-18T17:46:49.200', 'Id': '7491'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>For 2D polygonal meshes, the QuadEdge and HalfEdge data structure representations are sufficient to store and enable efficient query of all topological and incidence information. Are there compact and efficient data structures for 3D polyhedral meshes? I know there has been some recent work on compact representations for tetrahedral meshes, like, for example <a href="http://www.gvu.gatech.edu/people/official/jarek/papers/sot.pdf" rel="nofollow">SOT</a>. I don\'t know enough about these to know if they generalize to unstructured non-tetrahedral meshes.</p>\n\n<p>I can imagine that half-edges might generalize to half-faces with associated half-edges, but it seems like that is a lot of data to store, and there might be more compact representations. I should add that I really only care about retrieving facet information (like which facets are on the boundary, which facets belong to a certain cell); the edge incidence information is not as useful.</p>\n', 'ViewCount': '97', 'Title': 'Data structures for general (non-tetrahedral) cell complexes', 'LastActivityDate': '2012-12-20T17:58:45.383', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '5126', 'Tags': '<data-structures><computational-geometry>', 'CreationDate': '2012-12-19T09:28:14.227', 'FavoriteCount': '0', 'Id': '7509'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I already understood how the well-known algorithms like Graham, Quickhull etc. work, but i have difficulties in understanding 2 naive versions of convex hull algorithms:</p>\n\n<pre><code>Let S={p1, ..., pn} a set of points and CH(S) the convex hull of S.\n</code></pre>\n\n<p>("any_sentence" is a quote from different course books.)</p>\n\n<p><hr/>\n<strong>A1)</strong> "find the smallest subset R &#8834; S for CH(R) = CH(S). Since there are 2<sup>n</sup> subsets, the complexity is O(2<sup>n</sup>)."<br/>\nWell my question is: since we don\'t know CH(S) - and indeed it\'s our goal to achieve CH(S) - , how can we check if CH(R) == CH(S)? This makes no sense. Pseudocode version:</p>\n\n<pre><code>foreach (s in S.subsets)\n    if (CH(R) == CH(S))\n        return R\n</code></pre>\n\n<hr/>\n\n<p><strong>A2)</strong> "Let p,q,r,s &#8712; S."<br/>\n"s &#8712; CH(S) if s is NOT &#8712; triangle(p,q,r)"<br/>\nAnd here is the algorithm:<br/>\n<img src="http://i.stack.imgur.com/cygZ6.png" alt="enter image description here"><br/>\nMy question: Is the first part of the sentence not wrong? According to my opinion, it should be: Let p,q,r &#8712; CH(S) and s &#8712; S. (But we would have the same problem again, i.e. that we don\'t know at the beginning what CH(S) is.) My counter example why this algorithm wouldn\'t work: <br/>\n<img src="http://i.stack.imgur.com/FKFpe.png" alt="enter image description here"><br>\nat the start we check the triangle(1,2,3) and see that 4 is not in the triangle, and mark 4 as not an element of convex hull, which is FALSE.</p>\n', 'ViewCount': '111', 'Title': 'naive convex hull algorithms', 'LastActivityDate': '2013-01-15T10:53:03.300', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '8945', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5222', 'Tags': '<computational-geometry>', 'CreationDate': '2013-01-15T09:45:37.487', 'Id': '8944'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The <a href="http://en.wikipedia.org/wiki/Graham_scan" rel="nofollow">Graham scan</a> algorithm computes the convex hull of a finite sets of points. It works only in the plane but is also fast (time $O(n \\log n)$).</p>\n\n<p>An old exam question asks, why does the algorithm not extend for three dimensional space? I just can\'t find an answer; it seems to me as if it should work.</p>\n\n<ul>\n<li>Sorting the points according to a pivot should not be a problem.</li>\n<li>Detecting a Left/Right turn (or measering the inner angle) neither.</li>\n</ul>\n\n<p>Then what is the problem when we try to extend the algorithm to three dimensions?</p>\n', 'ViewCount': '264', 'Title': 'Why does Graham Scan not extend to three dimensions?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-26T17:58:48.267', 'LastEditDate': '2013-01-26T17:58:48.267', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5222', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-01-26T00:14:19.143', 'Id': '9161'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I read a <a href="http://cstheory.stackexchange.com/q/9750/13562">post</a> which talks about pretty much the same problem. But here I simplify the problem hoping that a concrete proof can be offered.</p>\n\n<p>There is a set $A$ which contains some discrete points (one-dimensional), like $\\{1, 3, 37, 59\\}$. I want to pick one point from $A$ which minimizes the sum of distances between this point and others.</p>\n\n<p>There may be lot of posts out there, and my problem is just the one-dimensional version of those. I know how to prove it if $A$ is not discrete, but I fail when $A$ is discrete like above.</p>\n\n<p>Please answer with a concrete proof.</p>\n', 'ViewCount': '91', 'Title': 'Choose a "middle" point from a set', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-03T03:07:38.757', 'LastEditDate': '2013-02-02T21:33:57.517', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '3', 'OwnerDisplayName': 'loganecolss', 'PostTypeId': '1', 'OwnerUserId': '6686', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-02-02T12:27:53.440', 'Id': '9435'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have an $n$-dimensional grid space with two points on it defined by ordered pairs. I want to find the shortest path between the two points, but I can only increase one number in the ordered pair at a time. Is there an algorithm for this or at least one I can refer to?</p>\n', 'ViewCount': '142', 'Title': 'Finding the shortest path in a n-dimensional grid', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-01T07:21:34.287', 'LastEditDate': '2013-08-01T07:21:34.287', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'Johm Don', 'PostTypeId': '1', 'Tags': '<computational-geometry>', 'CreationDate': '2013-02-27T23:31:41.633', 'Id': '10198'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Say I have a set of points on a 2d plane, how do I find the point(s) where the maximum euclidian distance to any of the points in the set is minimized?</p>\n', 'ViewCount': '210', 'Title': 'Find the point with minimum max distance to any point in a set', 'LastEditorUserId': '39', 'LastActivityDate': '2013-03-04T02:48:13.057', 'LastEditDate': '2013-03-04T00:48:22.573', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'OwnerDisplayName': 'BvdBijl', 'PostTypeId': '1', 'Tags': '<computational-geometry>', 'CreationDate': '2013-03-03T09:54:40.097', 'Id': '10247'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have a kind of cutting problem. There is an irregular polygon that doesn't have any holes and a list of standard sized of rectangular tiles and their values.</p>\n\n<p>I want an efficient algorithm to find the single best valued tile that fit in this polygon; or an algorithm that just says if a single tile can fit inside the polygon. And it should run in deterministic time for irregular polygons with less than 100 vertices.</p>\n\n<p>Please consider that you can rotate the polygon and tiles. Answers/hints for both convex and non-convex polygons are appreciated.</p>\n", 'ViewCount': '383', 'Title': 'An algorithm for fitting a rectangle inside a polygon', 'LastActivityDate': '2013-03-14T18:32:50.853', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7279', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-03-14T10:26:51.393', 'Id': '10522'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>This may be basic to some of you, but excuse my inexperience with comp. geometry: </p>\n\n<p>Given a set of $n$ circles with centers $(x_i, y_i)$ for $1 \\leq i \\leq n$  and each having radii $r$. Also given a rectangle. All objects are on a plane. How to verify that every point inside the rectangle (including its edges) is fully covered by the circles. That is, each point in the rectangle lay on at least one of the circles. </p>\n\n<p>Anyone have hints ? I am currently trying with voronoi diagrams. </p>\n', 'ViewCount': '179', 'Title': 'Circles covering a rectangular, how to verify it?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-10T08:59:01.673', 'LastEditDate': '2013-04-10T08:59:01.673', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11164', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '867', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-04-09T14:01:11.527', 'Id': '11163'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p>Note that I had asked this question in <a href="http://gis.stackexchange.com/questions/41724/space-filling-between-random-2d-lines">GIS forum</a>, although it\n  has gotten many up-votes, still has not received any answer. Hope you can\n  break the silence, some collaboration :)</p>\n</blockquote>\n\n<p>Consider a region (2D) filled with lines randomly (following Figure). We are interested in filling the empty spaces between lines including four boundary edges in a way:</p>\n\n<p><strong>0-</strong> maximizing the size of parcels;<br>\n<strong>1-</strong> shape of filling parcels is square aligned horizontally or vertically;<br>\n<strong>2-</strong> shape of filling parcels is square, <em>i.e., relaxed alignment</em>;<br>\n<strong>3-</strong>  <strong>shape of filling parcels is any quadrangle.</strong> <em>our original question</em>  </p>\n\n<p>So for now there are three different scenarios.<br>\n<strong><em>Note</strong> that the lines are of the form <code>[x1,y1,x2,y2]</code> point set, real numbers.</em></p>\n\n<p>[* * *] <strong><em>Ideas of possible solutions/algorithms/code snippets/etc are more than welcome.</em></strong></p>\n\n<p><img src="http://i.stack.imgur.com/K0gTM.png" alt="enter image description here"></p>\n\n<hr>\n\n<p>For the first case i.e., horizontally/vertically aligned squares, our proposal as a solution is:<br>\n<strong>1-</strong> <em>rasterising input lines into bitmap (matrix) using e.g., <a href="http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" rel="nofollow">Bresenham\'s algorithm</a></em><br>\n<strong>2-</strong> <em>searching nearby cells for each cell of desired colour (i.e., the same colour) with an objective function to maximize the associated area i.e., the number of pixels.</em>  </p>\n\n<p><img src="http://i.stack.imgur.com/Pb8pZ.png" alt="enter image description here">  </p>\n\n<p>We assumed that the reader is familiar with the concept of space-filling-tiling. You may follow <a href="http://paulbourke.net/texture_colour/randomtile/" rel="nofollow">this link</a> for inspiration. However, note that our problem is different. As we do not fill the empty space randomly and we do not choose the size of filler shapes randomly. The solution should be iterative, starting from largest to smallest permitted. The size boundary can be defined, for example, according to our explanation below for a particular study (our interest). For all the cases, there is no limit on the number of parcel being fitted. Indeed, it is up to user to limit the iteration number, by choosing a minimum area for parcels, for example. This is obvious in the example given above in which we discretised lines into pixels with specified size. That is, the procedure should run until entire empty area is filled respecting the criterion e.g., the maximum area of parcels.</p>\n\n<p><strong>A mathematical view for the problem can be stated as follows:</strong><br>\n<strong>2D:</strong> Find all rectangles that could be extracted from a given 2D region with some lines optimized for larger rectangle size as possible.<br>\n<strong>3D:</strong> Find all rectangular cubes that could be extracted from a given 3D region with some sub-planes (better: polygons) optimized for larger block size as possible. </p>\n\n<p><strong>- Application:</strong><br>\nOne application is to find out the distribution of extractable intact \'rock\' blocks in a heavily fractured \'mine\'. This could be very helpful for many aspects including drilling design, financial evaluation and so on.  </p>\n\n<p><em>-- Details:</em><br>\nFor a mine of decorative rock (stone) the products which are the blocks of intact rocks cut as rectangular cubes the price is closely dependent to the size of the block.  Extraction of a block from a suitable area i.e., with no major fracture will be desired if the amount of remaining parts is small as possible. Usually, the small pieces of rocks have no economic value relatively and are considered so as waste.<br>\nThe question in this post investigates solutions for this kind of problem.  </p>\n\n<p><strong>Size Constrains:</strong><br>\nYou may put some restrictions on the solution for the ultimate question, although, we believe it is always possible to add more later.  For example, follow these:\n{2D case}<br>\nThe best size of a block (economically optimum rectangle) to be extracted under the conditions mentioned above, is <code>1x1 m</code> given <code>10x10 m</code> for the region in the example. This is one constraint defined based on economical value. The minimum workable size for cutting etc, let be <code>0.15x0.15 m</code>; so this the second size limit.<br>\n<img src="http://i.stack.imgur.com/akj12.jpg" alt="enter image description here"><br>\nThe figure above shows the economic value function depending to the block size. So for this particular case every rock piece smaller than <code>0.15x0.15 m</code> is just waste. There will be no block size larger than <code>1.7x1.7 m</code> due to operation limits.</p>\n', 'ViewCount': '121', 'Title': 'Space filling between random 2D lines', 'LastEditorUserId': '7712', 'LastActivityDate': '2013-04-14T10:49:45.397', 'LastEditDate': '2013-04-14T10:49:45.397', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7712', 'Tags': '<algorithms><computational-geometry><image-processing>', 'CreationDate': '2013-04-13T12:03:42.897', 'FavoriteCount': '2', 'Id': '11282'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I read that the Bernstein operator</p>\n\n<p>$$\n\\mathfrak{B}_f(t) = \\sum_{i=0}^n f\\left(\\frac{i}{n}\\right) \\; B^n_i(t)\n$$</p>\n\n<p>applied to a polynomial $f(x)$ of degree $m \\leq n$ with the Bernstein polynomial</p>\n\n<p>$$\nB^n_i(t) = \\binom{n}{i} \\; t^i \\; (1-t)^{n-i}\n$$</p>\n\n<p>returns a new polynomial also of degree $m$. In other words, the Bernstein operator does not increase its degree when applied to $f$.</p>\n\n<p>How is this possible? Since we're only sampling $f$ at a certain interval, wouldn't the original degree of $f$ become irrelevant? How can the degree of the result be smaller than $n$, since we will have at least one $t^n$ in the expression resulting from one of the Bernstein polynomials?</p>\n", 'ViewCount': '81', 'Title': 'How come the Bernstein operator creates a polynomial of the same degree as its input function?', 'LastEditorUserId': '139', 'LastActivityDate': '2013-04-29T16:49:20.590', 'LastEditDate': '2013-04-29T16:49:20.590', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7962', 'Tags': '<computational-geometry>', 'CreationDate': '2013-04-29T11:33:25.283', 'Id': '11655'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given $n$ points in $\\mathbf{R}^2$, define the optimal Euclidean Steiner tree to be a minimum (Euclidean) length tree containing all $n$ points and any other subset of points from $\\mathbf{R}^2$.\nProve that each of the additional points must have degree 3, with all three angles being $120^\\circ$.</p>\n', 'ViewCount': '113', 'Title': 'Euclidean Steiner Tree Question in Approximation Algorithms', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-05-08T07:18:28.980', 'LastEditDate': '2013-05-08T07:18:28.980', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11881', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7300', 'Tags': '<algorithms><algorithm-analysis><computational-geometry><approximation><trees>', 'CreationDate': '2013-05-08T06:34:08.107', 'Id': '11880'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have recently been asked in an interview to devise an algorithm that divides a set of points in a coordinate system so that half of the points lie on one side of the line, and the rest on the other side.</p>\n\n<p>The points are unevenly placed and the line must not pass through any of the points.</p>\n\n<p>Can any one give any approach to solve the problem? Analysis of the algorithm is appreciated.</p>\n\n<p>Hints: Count the points, use medians.</p>\n\n<p>The number of points is assumed to be even.</p>\n', 'ViewCount': '168', 'Title': 'Algorithm to find a line that divides the number of points equally', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-19T14:54:52.617', 'LastEditDate': '2013-05-19T14:54:52.617', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '12114', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '6699', 'Tags': '<algorithms><machine-learning><computational-geometry><classification>', 'CreationDate': '2013-05-18T13:51:24.557', 'Id': '12111'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>[Input]: the begin and end points of an arbitrary line (small red points) and the line width (green line)\n<br/>[Example]: begin=(20,20), end=(100,50), width=5</p>\n\n<p><img src="http://i.stack.imgur.com/WKabw.png" alt="enter image description here"></p>\n\n<p>[Output]: The set of pixels (not the total area) that are in the yellow rectangle\n<br/>[Example]: {(20,20), (20,21), (20,22),...etc.}</p>\n\n<p>How can i calculate the output set?</p>\n', 'ViewCount': '64', 'Title': 'Bounding rectangle of a line', 'LastEditorUserId': '5222', 'LastActivityDate': '2013-05-21T15:45:01.207', 'LastEditDate': '2013-05-21T14:23:51.863', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5222', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-05-21T10:54:37.237', 'Id': '12181'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've been recently studying Monte-Carlo and other randomized methods for a lot of applications, and one that popped into my mind was making an (approximate) convex hull by examining random points, and try to get them inside the convex hull. I would like to know if there are algorithms for convex hulls that can improve the $O(n \\log n)$ bound of comparison based algorithms, and the $O(n\\cdot h)$ bound for Jarvis march and related to $O(n)$, either by building an approximate convex hull in $O(n)$ (with or without some approximation criteria) or by building an exact convex hull in expected linear time.</p>\n", 'ViewCount': '43', 'Title': 'Randomized convex hull', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-05-21T23:02:42.530', 'LastEditDate': '2013-05-21T19:34:43.807', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '12208', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2138', 'Tags': '<algorithms><asymptotics><computational-geometry><randomized-algorithms>', 'CreationDate': '2013-05-21T19:30:47.060', 'Id': '12199'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>First I apologize if the title is unclear, but I didn\'t find anything better.</p>\n\n<p>I\'m solving a differential equation that has two parameters , here denoted by points of a plane.These parameters are real numbers. For some points of the plane (or, equivalently, for some parameters of the differential equation) , the solution of the equation satisfies some condition and we denote such points of the plane with 1. This points make a simply-connected region in the plane, and I know that this region lies somewhere in $0&lt;x&lt;1.6, -.7&lt;y&lt;.3$ rectangle. My goal is to find this region.Remember that this region is on the real plane.($\\mathbf R^2$)</p>\n\n<p><strong>My main question is this:</strong> I already know these two things about the wanted region:</p>\n\n<ol>\n<li><p>The set of points on the plane that satisfy the conditions (the wanted region) , form a simply-connected region</p></li>\n<li><p>This region lies somewhere in $0&lt;x&lt;1.6, -.7&lt;y&lt;.3$ rectangle</p></li>\n</ol>\n\n<p>for example it may be something like this:</p>\n\n<p><img src="http://i.stack.imgur.com/Q8lvC.png" alt="enter image description here"></p>\n\n<p>I want to use this two facts to find the region with less computations; i.e. instead of checking the condition on all points on the rectangle, actually , on a very high-resolution grid (this the first approach below), use an algorithm (below : Variant 2) that more quickly converges to <strong>the boundary</strong> (and so determines the region without inspecting all points).  </p>\n\n<p>(If you know a better approach ,I\'ll be happy to hear) </p>\n\n<h3>Variant 1 (the naive approach, noted above)</h3>\n\n<p>Divide each axis to identical steps (of length $\\Delta$ ) and check the condition on each node to find the region.$\\Delta$ must be as small as possible to find the region with an acceptable accuracy ($\\Delta0.001$ suffices for my purpose) . (in the picture : nodes = intersections). This method needs a huge number of check operations , but can be used to find all kinds of regions; I mean if I didn\'t know that the wanted region is connected or it had sharp edges, etc. ,this method was the only way.</p>\n\n<p><img src="http://i.stack.imgur.com/P9RoC.png" alt="http://i.stack.imgur.com/MvhRH.png"></p>\n\n<h3>Variant 2</h3>\n\n<p>(It may be a famous method, but I haven\'t seen it before) </p>\n\n<p>Because the region will be simply connected, it suffices to find its boundary .We use a <strong>recursive</strong> approach. We start from a grid (like the first step, but with much larger distance between nodes, say, $100\\Delta$) and check the condition on this grid.For the next step, I assume the interval between two adjacent 1s is 1 everywhere and between two adjacent 0s is 0 everywhere. <em>If two adjacent nodes gave different results (1 on one them and 0 on the other) , I put a point between them and check the condition on that point (red points in the picture) check this point. If it was 1, I put a new point between this point and the adjacent 0 and check that point; and if it was 0, I put a new point between this zero and adjacent 1 and check that point</em>. I continue till I arrive at a distance of $\\Delta$ between points.So I\'ve found the boundary. (This method is like bisection method  for finding the roots of a function)</p>\n\n<p>In the picture, the first iteration is shown.Black and yellow points are the points of the initial grid (that are distributed on the whole rectangle) and red points are those that are added after checking the initial grid nodes. Black points are points that are determined to satisfy the condition (are 1) and so are certainly inside the region. Yellow points are those that did not satisfy the condition and so are outside, and red points are those added in the 2nd iteration , between adjacent nodes with different results (between a 1 and a 0) ,according to the  above paragraph.</p>\n\n<p><img src="http://i.stack.imgur.com/CMgqT.png" alt="http://i.stack.imgur.com/ZqtFN.png"></p>\n\n<p>So , using this method I\'ve found the region with the same accuracy as in the first method, and saved a lot of time too.</p>\n\n<p>I want to know <em>how much this method is faster.</em> A qualitative answer that shows if it is better to implement this method , suffices. My problem is so computational intensive that I can\'t use the first approach.</p>\n', 'ViewCount': '124', 'Title': 'Complexity of an algorithm for bounding a region in 2D', 'LastEditorUserId': '8381', 'LastActivityDate': '2013-05-28T18:01:59.797', 'LastEditDate': '2013-05-28T18:01:59.797', 'AnswerCount': '2', 'CommentCount': '13', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8381', 'Tags': '<algorithms><algorithm-analysis><runtime-analysis><computational-geometry>', 'CreationDate': '2013-05-27T10:46:57.837', 'Id': '12305'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>This question is an extension of <a href="http://cs.stackexchange.com/questions/12305/complexity-of-an-algorithm-for-bounding-a-region-in-2d">a previous question</a> I\'ve asked.</p>\n\n<p>Consider the rectangle $a&lt;x&lt;b , c&lt;y&lt;d$ in the $\\mathbf R^2$ plane. Each point in this rectangle can be of kind #1 or #2 (We have to check each point to know its kind).</p>\n\n<p>Assume that somehow we know that the points of kind 1 (and so the points of kind 2) form a connected region (i.e. , 1s and 2s are not scattered in the plane arbitrarily). Given the condition of being of kind 1 or 2, The goal is to find the region occupied by 1s (a <em>search</em> problem). Consider somehow we know the following attributes of the region occupied by 1s: (one at a time)</p>\n\n<ol>\n<li>The region occupied by 1s forms a convex set (so it is <a href="http://en.wikipedia.org/wiki/1-connected" rel="nofollow">1-connected</a> too).\n<img src="http://i.stack.imgur.com/xKMBb.png" alt="enter image description here"></li>\n</ol>\n\n<p>2.The region occupied by 1s forms a simply connected region , but not necessarily convex.</p>\n\n<p><img src="http://i.stack.imgur.com/7fId9.png" alt="enter image description here"></p>\n\n<p>The simplest algorithm for finding the region of 1s is to simply start from bottom of the rectangle and sweep it and check all of the points in the rectangle to determine their kind and this way find the region.This is not an efficient algorithm, because we can use the known fact of convexity (or simply-connectivity) of the region of 1s to find it more easily without inspecting all of the points.</p>\n\n<p>What more efficient algorithms are there to find the region , as fast as possible? (with an acceptable accuracy, which is about 0.001 in my work). The regions may have sharp edges. But their detection is limited to the mentioned accuracy too. (It is clear that finding the boundary of the region suffices)</p>\n\n<p>Please don\'t forget that the problem is <em>to find an unknown set of points</em>, not <em>bound a known set of points</em>. i.e., <strong>it\'s a search problem , not a convex hull finding problem.</strong></p>\n\n<p><strong>(also, speed is very important for me)</strong></p>\n\n<p><strong>EDIT1:</strong> </p>\n\n<p>After some suggestions (in the comments) I should say that I think we can take advantage of simply-connectivity of the region to write an algorithm that tries to find the boundary of the region instead of checking more points to find the region directly.</p>\n', 'ViewCount': '105', 'Title': 'Efficient algorithms for finding a region in $\\mathbf R^2$', 'LastEditorUserId': '8381', 'LastActivityDate': '2013-05-29T00:24:16.510', 'LastEditDate': '2013-05-28T23:26:13.947', 'AnswerCount': '1', 'CommentCount': '12', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8381', 'Tags': '<algorithms><computational-geometry><search-problem>', 'CreationDate': '2013-05-28T20:28:05.040', 'Id': '12343'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there any convex hull algorithm that can be extended to non-euclidean metric, such as the geodesic distance on the surface of a sphere?</p>\n', 'ViewCount': '54', 'Title': 'Convex Hull on a Spherical Surface', 'LastActivityDate': '2013-05-31T21:24:10.647', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7524', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-05-31T21:24:10.647', 'Id': '12405'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The problem is defined as:</p>\n\n<blockquote>\n  <p>Given $N$ points on an infinite line, find the least number of line segments of length $L$ that cover all points (including endpoints) after changing one point.</p>\n</blockquote>\n\n<p>That means that if I have the points $P = 1,10,15,28$ , $L = 10$ , 3 line segments are needed , changes will occur that the point $i$ will move to position $X$ , after each change , get the number of line segments needed.</p>\n\n<p>Example:</p>\n\n<p>$P = 1,5,11,21,25$ , $L = 6$\n, Changes are</p>\n\n<p>$$\n1 , 29\n$$</p>\n\n<p>$$\n2,36\n$$</p>\n\n<p>after change #1 : $P = 5,11,21,25,29$ , number of line segments needed is 3</p>\n\n<p>after change #2 : $P = 11,21,25,29,36$ , number of line segments needed is 4</p>\n\n<p>What would be the best approach to do this? , Given that number of points can be $50,000$ and the number of changes can be $50,000$.</p>\n', 'ViewCount': '183', 'Title': 'Finding least number of line segments with length $L$ that cover $N$ points', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-03T23:19:59.423', 'LastEditDate': '2013-06-02T22:48:05.320', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8044', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-06-01T17:08:19.347', 'Id': '12410'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '854', 'Title': 'Convex polygon formulation', 'LastEditDate': '2013-06-08T08:41:20.797', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '8505', 'FavoriteCount': '1', 'Body': '<p>We have a sorted list of side lengths that can be used to form a polygon. There are $n$ such values ($n \\le 1000$).</p>\n\n<p>Now we need to find if we can use any 10 of these values to form a non-degenerate convex polygon.</p>\n\n<p>How do we approach this? Anything up to the order of $O(n^2 \\log n)$ is acceptable. Better if possible. I need the general idea on how to proceed, the properties of convex polygons which can be exploited here, etc.</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '220', 'LastActivityDate': '2013-06-13T16:35:04.607', 'CommentCount': '5', 'AcceptedAnswerId': '12519', 'CreationDate': '2013-06-07T19:16:14.993', 'Id': '12516'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What are degenerate polygons? How to check whether a given pair of polygons is degenerate or not?</p>\n', 'ViewCount': '829', 'Title': 'What are degenerate polygons?', 'LastActivityDate': '2013-06-09T11:25:39.123', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '12547', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '8505', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-06-07T23:24:57.893', 'FavoriteCount': '1', 'Id': '12521'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I was admiring this rendition of the Mona Lisa from <a href="http://www.flickr.com/photos/quasimondo/4652406419/" rel="nofollow">quasimondo</a>\'s Flickr account.  He says:</p>\n\n<blockquote>\n  <p>Combining circle packing with data visualization. The pie charts show\n  the distribution of the dominant colors under the circle area.</p>\n  \n  <p>The circle packing technique used here is a combination of an image\n  segmentation with a distance transform and the first one who came up\n  with it is John Balestrieri: www.flickr.com/photos/tinrocket/</p>\n</blockquote>\n\n<p>I have traced it to an app called <a href="http://www.percolatorapp.com/blog/" rel="nofollow">Percolator</a></p>\n\n<p>How are such circle packings calculated? How are the pie charts calculated from the image?</p>\n\n<p><img src="http://farm5.staticflickr.com/4004/4652406419_f071593885.jpg"></p>\n', 'ViewCount': '350', 'Title': 'circle packing algorithm used by Percolator', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-27T15:34:34.887', 'LastEditDate': '2013-06-27T14:19:40.753', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12930', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '3131', 'Tags': '<algorithms><computational-geometry><discrete-mathematics><image-processing>', 'CreationDate': '2013-06-27T12:06:27.987', 'Id': '12925'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '64', 'Title': 'Pairwise comparisons with confidence', 'LastEditDate': '2013-07-03T11:53:51.223', 'AnswerCount': '2', 'Score': '1', 'OwnerDisplayName': 'Bob Davidson', 'PostTypeId': '1', 'OwnerUserId': '8989', 'Body': "<p>There is a lot of information available on the subject of Pairwise Comparisons but I haven't found any guidance on how to optimize pair measurements that have confidence values attached to them.</p>\n\n<p>Imagine that an AI black box has been trained on many pairs of objects in order to predict the distance between the objects in novel pairs. All objects are colinear. The black box also provides a confidence level for each distance. Here is a simple example of outputs based on a set of 5 objects ($a$ to $e$):</p>\n\n<pre><code>Pair, Distance, Confidence\n\na-b,  5,        0.4\na-c,  9,        0.7\na-d,  -3,       0.9\na-e,  2,        0.6\nb-c,  6,        0.8\nb-d,  -10,      0.7\nb-e,  -2,       1.0\nc-d,  -6,       0.5\nc-e,  -2,       0.6\nd-e,  7,        0.9\n</code></pre>\n\n<p>So, the distance between $a$ and $b$ is predicted to be 5 units ($b$ is to the right of $a$) and the black box's confidence in that measurement is 0.4 (0.0 = no confidence and 1.0 = perfect confidence). The distance between $a$ and $d$ is -3 units ($d$ is to the left of $a$) and the confidence is 0.9.</p>\n\n<p>I would like to understand the process for deriving the solution, which is the optimization of the four distances between these objects given the predicted distances and their associated confidence levels.</p>\n", 'Tags': '<machine-learning><artificial-intelligence><computational-geometry>', 'LastEditorUserId': '8989', 'LastActivityDate': '2013-07-03T17:15:20.740', 'CommentCount': '4', 'AcceptedAnswerId': '13048', 'CreationDate': '2013-07-01T00:00:55.800', 'Id': '13015'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have an  algorithmic problem.</p>\n\n<p>I have a set of different polygons in the 2D space. Each polygon is represented according to its vertex representation (<code>x</code> and <code>y</code> coordinates) and may contain up to <code>N</code> different vertices. </p>\n\n<p>Assuming I have a set of <code>N</code> polygons, then for a new polygon <code>k</code>, how do I determine whether or not <code>k</code> overlaps with each one of the <code>N</code> polynomials in the set AND what is the overlapping reign percentage?</p>\n\n<p>This is a purely algorithmic question but I plan on writing the algorithm in parallel using the CUDA platform, therefore any highly parallel solution would be preferred.   </p>\n', 'ViewCount': '57', 'Title': 'How to find polygons overlap reign', 'LastActivityDate': '2013-07-06T12:56:54.447', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9046', 'Tags': '<algorithms><graphs><computational-geometry>', 'CreationDate': '2013-07-06T09:43:23.897', 'Id': '13107'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>We need to convert wireframe representations of 3D objects into a representation consisting of 6 orthogonal views each containing nested (non intersecting) closed contours, each having a Z (depth/height) value. We are only concerned with 3D shapes compatible with the target representation. Can someone at least point us to any related existing algorithms?</p>\n', 'ViewCount': '81', 'Title': '3D wireframe algorithm', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-07-08T14:17:48.260', 'LastEditDate': '2013-07-08T14:17:48.260', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9084', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-07-08T13:23:13.637', 'Id': '13162'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given a linear system of the form:</p>\n\n<p>$$\\begin{array}{c}\nx_r = a \\quad x_j = b \\\\\nc_1x_1 + c_2x_2 + \\ldots + c_nx_n = N \\\\\nx_1+x_2 + x_3 + \\ldots + x_n = k\\\\\n0 \\le a,b,x_1,x_2,x_3...x_n \\le 1\\\\\nk \\ge 0\n\\end{array}$$</p>\n\n<p>How quickly can the feasibility of the system be checked? To clarify: $x_r,x_j$ are members of $x_1,x_2...x_n$. Would it be $O(n^{3.5})$ since I believe that is the general complexity for running a linear program or would it be less? Can one use gaussian elimination to quickly reduce the first 4 equations in $O(n^3)$ and after that systematically move through the equations starting from the terms with largest coefficient and moving to terms with smallest coefficient assigning values that bring the equations as close to satisfactory as possible?</p>\n\n<p>Additional info:</p>\n\n<p>I am assuming that the number of variables scales linearly. $n \\ne N$ (I think that was clear though). </p>\n', 'ViewCount': '439', 'Title': 'Checking Feasibility of Linear Program in Polynomial Time', 'LastEditorUserId': '7678', 'LastActivityDate': '2013-07-22T06:23:52.420', 'LastEditDate': '2013-07-22T06:23:52.420', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '13371', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9271', 'Tags': '<complexity-theory><time-complexity><computational-geometry><linear-programming><linear-algebra>', 'CreationDate': '2013-07-20T23:16:43.717', 'Id': '13370'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m conflicted whether to post this here or in either math.stackexchange or mathematica.stackexchange.</p>\n\n<p>Define a "<strong>simple zonotope</strong>" to be a regular $2n$-gon which is tiled by the following rule: all tiles are rhombi. They key point here is that rhombuses have equal side lengths (say equal to 1), but their shapes are allowed to vary arbitrarly. Here\'s an example of a 12-gon zonotope:</p>\n\n<p><img src="http://i.stack.imgur.com/YATPS.png" alt="Zonotope"></p>\n\n<p>There are many characterizations and properties of these objects. For example, one can encode a zonotope using $2n$ vectors (one for each outer edge) since we can just translate copies of each vector.</p>\n\n<p><strong>What I would like to do is the following:</strong> I have the adjacency matrix of a graph that I believe to be a simple zonotope. Specifically, you can assume that we are starting with a <em>planer geometric graph</em>, in that I have an adjacency matrix, in addition to having (x,y) coordinates of each point. In other words, it\'s fairly straightforward to identify which vertices go to the outer vertices of the $2n$-polygon.Here\'s an example of a geometric graph that I could have:</p>\n\n<p><img src="http://i.stack.imgur.com/TFPlL.png" alt="enter image description here"></p>\n\n<p>In the above picture, the two red vertices indicate the north/south poles of the zonotope they are mapped to (which happens to be the zonotope in the first picture). </p>\n\n<blockquote>\n  <p>Question: What is the most painless way of drawing the simple zonotope from a given adjacency matrix plus geometric graph coordinates? </p>\n</blockquote>\n\n<p>Some observations: part of the algorithm is somewhat clear to me: one should work from the outside in. Once a specific rhombus side has been identified, all sides below it must be the same until we run into the opposite side of the zonotope. However this all seems very computationally expensive. I am honestly not preferential to any specific solution. I would even accept something akin to attaching springs to vertices and then running the algorithm until the graph converges to a zonotope.</p>\n', 'ViewCount': '79', 'Title': 'Drawing Zonotopes from an Adjacency Matrix', 'LastEditorUserId': '9472', 'LastActivityDate': '2013-08-01T18:59:46.497', 'LastEditDate': '2013-08-01T18:59:46.497', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9472', 'Tags': '<graph-theory><computational-geometry><mathematical-programming>', 'CreationDate': '2013-08-01T18:52:44.327', 'Id': '13568'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am looking for geometry algorithm.</p>\n\n<p>I have an axis-aligned box $B$ and a triangle $T$ in 3D space. I want to compute an axis-aligned bounding box of their intersection.</p>\n\n<p>Both $B$ and $T$ are convex polytopes and $B\\cap T$ is also convex polytope. I don\'t need general algorithm, I need something fast and simple.</p>\n\n<p>Have you heard about such an algorithm? Or is it trivial and I can\'t see it?</p>\n\n<p>I got an idea to "crop" the triangle with each of 6 box\'s faces. Cropping triangle with each plane can add 1 new vertex, so the resulting object may have up to 9 vertices. Then I compute the bounding box of that object. Am I right? Can it be simplified to get only bounding box output?</p>\n', 'ViewCount': '136', 'Title': 'Box and triangle intersection', 'LastEditorUserId': '755', 'LastActivityDate': '2013-08-03T18:56:25.267', 'LastEditDate': '2013-08-03T18:56:25.267', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'OwnerDisplayName': 'Ivan Kuckir', 'PostTypeId': '1', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-07-16T14:12:03.177', 'Id': '13573'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I\'m trying to find an algorithm for a motion planning problem. I have $N$ points, $P_1$ to $P_N$, in $k$-dimensional cartesian space, defining $N-1$ segments. The problem is about constructing the fastest motion plan, that is, a function $p(t)$, <em>approximating</em> the path along the segments, bound by some constraints:</p>\n\n<ul>\n<li><p>For each segment defined by the points $P_i$ and $P_{i+1}$, let $M_i$ be some point on this segment ($M_i$ is part of the solution, not the input). For now, let\'s assume it\'s strictly within the segment. Now, the constraint is that our sought plan $p(t)$ starts with an initial segment from $P_1$ to $M_1$, is followed by $N-2$ second-order B\xe9zier curves, each defined by the control points $(M_i, P_{i+1}, M_{i+1})$, and finally followed by a segment from $M_{n-1}$ to $P_n$.</p></li>\n<li><p>Velocity is preserved on boundaries between the curves and the start/end segments. Note that the <em>direction</em> of velocity is implicitly preserved by the above constraint. (because the vector from $P_i$ to $M_i$ is parallel to the one from $M_i$ to $P_{i+1}$)</p></li>\n<li><p>Along each of the B\xe9zier curves, as well as on the initial and final segment, the acceleration of the plan $p(t)$ is constant. This means that, if the plan specifies that we arrive to $M_i$ at time $T_i$, and it takes $t_i$ time to traverse the curve that begins there, this part of the motion plan is equal to $p(t)=B_i((t-T_i)/t_i)$, where $B_i$ is standard B\xe9zier formula for this curve. Informally, we cannot manually accelerate along the B\xe9zier curves, all we can do is scale the speed/acceleration across an entire curve.</p></li>\n<li><p>The absolute value of acceleration along each dimension $d$ must be no more than $A_d$. The maximum velocity limit may also be defined for each dimension, and I\'m not sure whether or not that would make the problem significantly harder.</p></li>\n<li><p>The initial and final velocity is zero (or possibly a constant).</p></li>\n</ul>\n\n<p>Here\'s a picture of such a path composed of B\xe9zier curves.<img src="http://i.stack.imgur.com/uSjZr.jpg" alt="enter image description here"></p>\n\n<p>Notice that the shape of the path is defined by $N-1$ real numbers $m_i \\in(0, 1)$, which define the position of the points $M_i$ as a convex combination of $P_i$ and $P_{i+1}$. The difficulty of this problem is in determining these numbers. The constraints imply that, given $m_i$, the velocities on every point of the plan are determined up to a common factor. Therefore, knowing $m_i$ of the optimal solution, it is not hard to finish the plan by finding the smallest total plan time which does not violate the acceleration constraints on any of the individual components of the plan.</p>\n\n<p>Ideally, the algorithm would work incrementally - given an optimal solution for the first $n$ points, and the next point, it would fix this solution into an optimal plan for the first $n+1$ points.</p>\n\n<p><strong>Some initial work</strong></p>\n\n<p>Let\'s define $D_i=P_{i+1}-P_i$. Also define $V_i$ to be the velocity of the plan at point $M_i$. But since $V_i$ is parallel to $D_i$, we write $V_i=v_i D_i$, for some $v_i \\in \\mathbb{R}$. Let\'s call $v_i$ the <em>relative speeds</em>.</p>\n\n<p>We will now use some knowledge about B\xe9zier curves to express a relationship between the relative velocities on the ends of a single curve, resulting in an equation involving $v_i$ and $v_{i+1}$. Let\'s forget about our points for a moment and assume we have a quadratic B\xe9zier curve with the control points $(A, B, C)$. If we start with the standard formula for B\xe9zier curves, and factor by $t$, we arrive at:</p>\n\n<p>$$ B(t) = A + 2(B-A)t + (A-2B+C)t^2 $$</p>\n\n<p>The parameter in this curve is $t \\in [0, 1]$, and it is easy to see that $B(0)=A$ and $B(1)=C$. We can also take the derivative of this function and compute it at the ends of the curve:</p>\n\n<p>$$ B\'(0) = 2(B-A) $$\n$$ B\'(1) = 2(C-B) $$</p>\n\n<p>Now return to the problem of finding a relationship between $v_i$ and $v_{i+1}$. The above formula tells us how to compute the velocities at the start and end of a quadratic B\xe9zier curve, however we have to take into account that the B\xe9zier curves in our plan are scaled proportionally in time. So, assume the plan takes $t_i$ time to traverse the i-th B\xe9zier curve. Then, the initial and final velocities along this curve are given by:</p>\n\n<p>$$ V_i = \\frac{2(1-m_i)D_i}{t_i} $$\n$$ V_{i+1} = \\frac{2m_{i+1}D_{i+1}}{t_i} $$</p>\n\n<p>since $(1-m_i)D_i$ corresponds to $B-A$ above, and $m_{i+1}D_{i+1}$ corresponds to $C-B$. Then we substitute $V_i=v_i D_i$ and $V_{i+1}=v_{i+1} D_{i+1}$, which turns the vector equations into real equations. Eradicating $t_i$ gives the following:</p>\n\n<p>$$ v_{i+1} = \\frac{m_{i+1}}{1-m_i}v_i $$</p>\n\n<p>This equation captures many of the constraints of the problem, in terms of real numbers $m_i$ (the relative positions of the splice points) and $v_i$ (the relative velocities at the splice points).\nIn fact, given all $m_i$, this effectively defines the ratios between all $v_i$. Therefore, if after choosing $m_i$ we also choose a value for $v_1$, the plan is completely defined.</p>\n\n<p>Though I don\'t know yet how this helps with finding the optimal $m_i$, taking into account the other constraints (maximum acceleration, starting and ending velocity). While the last equation looks nice, its non-linearity in terms of $m_i$ is not encouraging.</p>\n', 'ViewCount': '156', 'Title': u'Motion planning using second order B\xe9zier curves', 'LastEditorUserId': '4213', 'LastActivityDate': '2013-08-08T01:04:59.303', 'LastEditDate': '2013-08-08T01:04:59.303', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4213', 'Tags': '<optimization><computational-geometry><online-algorithms>', 'CreationDate': '2013-08-07T19:41:56.430', 'Id': '13667'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>If $u,v \\in \\mathbb{R}^d$ are two $d$-dimensional vectors, say that $u\\le v$ if $u_i \\le v_i$ for all $i=1,\\dots,d$.  In other words, comparisons on vectors will be pointwise.</p>\n\n<p>Let $S,T$ be two subsets of $\\mathbb{N}^d$ of size $m$.  Is there an efficient way to test whether there exists $s\\in S, t \\in T$ such that $s\\le t$?  The naive algorithm does $m^2$ comparisons between vectors; is there a more efficient algorithm?</p>\n\n<p>If $d=1$, this is very easy: we simply find the smallest element in $S$ and the largest element in $T$, which can be done with $O(m)$ comparisons.  But already when $d=2$, it seems much harder.  Any ideas?</p>\n', 'ViewCount': '132', 'Title': 'Comparing sets of vectors', 'LastEditorUserId': '755', 'LastActivityDate': '2013-08-29T22:53:35.173', 'LastEditDate': '2013-08-26T02:14:02.180', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><data-structures><computational-geometry><linear-algebra>', 'CreationDate': '2013-08-26T02:08:59.753', 'FavoriteCount': '1', 'Id': '13927'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>Given $n$ nodes in the plane, connect the nodes by a spanning tree.\nFor each node $v$ we construct a disk centered at $v$ with radius equal to the distance to $v$\u2019s furthest neighbor in the spanning tree. The <strong>interference</strong> of a node $v$ is then de\ufb01ned as the number of such disks that include the node $v$.</p>\n\n<p>The problem I'm interested is to find a spanning tree that <strong>minimizes the maximum interference</strong>.</p>\n\n<p>What is known about the problem in terms of computational complexity? Is it NP-hard? Can it be solved efficiently? What is its inapproximability threshold?</p>\n\n<p>Apparently this problem is still not understood well. I do not know the complexity of the problem (solvable optimally in polynomial time, or NP-complete), and as far as I know it is unknown whether efficient approximation algorithms exist.</p>\n", 'ViewCount': '124', 'Title': 'Complexity of finding a spanning tree that minimizes the maximum interference', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-08T11:04:52.237', 'LastEditDate': '2013-08-29T12:17:16.040', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '14202', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '9665', 'Tags': '<complexity-theory><graph-theory><computational-geometry>', 'CreationDate': '2013-08-28T19:48:05.097', 'Id': '13999'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a system of mono-disperse spheres inside a cubic box. I am studying the volume distribution inside the sample, after tessellating it with either Voronoi and Delaunay tessellations. I am interested on some properties which should not depend on the tessellation.</p>\n\n<p>Currently, I am comparing with the values obtained from Voronoi and Delaunay. I would like to know if you are familiar with another space partition approach (It is important that the final sum of the individual cells add up to the total volume, and the cells should be disjoint). Furthermore, in case you know another kind of tessellation, do you also know a library which already implements it, preferable in C/C++ or python?</p>\n\n<p>Some variations, like Laguerre partitions, coincide with my current Voronoi approach since the spheres are mono-disperse. Another candidate will be the Centroidal Voronoi tessellation, although I have not found yet a library to do that (although it could lead to evenly spaced cells which does not reflect the disorder inside the system, which is not desirable).</p>\n\n<p>For a given tessellation, the spheres\' centers are used to perform the tessellation. In the case of Voronoi, each cell wil enclose the sphere. </p>\n\n<p>Thanks in advance for your kind help.</p>\n\n<p>NOTE: I have asked this at stackoverflow. I was suggested to ask here, but I do not have enough points to migrate a question. The original question link is : <a href="http://stackoverflow.com/q/16598913/505047">http://stackoverflow.com/q/16598913/505047</a>  </p>\n', 'ViewCount': '69', 'Title': 'Suggestions for alternative 3D space partition tessellation, different from Voronoi and Delaunay', 'LastActivityDate': '2013-08-30T20:59:35.803', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9910', 'Tags': '<computational-geometry>', 'CreationDate': '2013-08-30T20:59:35.803', 'Id': '14045'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Consider how one would represent the following image in vector graphics:</p>\n\n<p><img src="http://www.321coloringpages.com/images/heart-coloring-pages-3/heart-coloring-pages-4.png" alt="A heart shape with mirrored spiral tails at the bottom."></p>\n\n<p>Pretty simple, right?  The entire shape can be represented by a single path element.</p>\n\n<p>But suppose additionally that you want to color the heart at the top red.  The path element is an open shape, so trying to fill it results in an appropriately red heart but also implementation-dependent bleeding between the spiral endpoints.</p>\n\n<p>Obviously, one could just draw the heart and the spiral tails as separate elements, but then the vector graphics representation no longer mirrors how a human being would draw the same image, and makes it more difficult to manipulate as a single object.  One needs a way to communicate to the computer that two particular path segments within the larger path intersect in such a manner that they close a sub-shape.</p>\n\n<p>Is there a vector graphics format capable of doing this?  More relevantly, how is it implemented and are there any papers on it?</p>\n', 'ViewCount': '188', 'Title': 'Closing shapes at non-endpoints', 'LastActivityDate': '2013-09-03T18:11:41.823', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '14108', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9947', 'Tags': '<computational-geometry><graphics>', 'CreationDate': '2013-09-02T14:30:47.570', 'Id': '14086'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>If I have a polygone with $n$ edges and 2 points, $a$ and $p$. I would like to formulate some constraints so that a given point $a$ can "see" the whole polygon. \nSo for eg. on this polygon, $a$ can "see" $p$ when $p = y$ but not when $p = x$. </p>\n\n<p><img src="http://i.stack.imgur.com/fczYI.png" alt="enter image description here"></p>\n\n<p>I am trying to formulate this as a linear program. I started using the $y=ax+b$ equations of each side and look for constraints on intersections, but I don\'t end up with an actual linear program.</p>\n', 'ViewCount': '70', 'ClosedDate': '2014-04-01T21:59:06.650', 'Title': 'Linear program for points that can see all points inside a polygon', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-18T18:10:43.397', 'LastEditDate': '2013-09-18T18:10:43.397', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10206', 'Tags': '<computational-geometry><linear-programming>', 'CreationDate': '2013-09-18T16:37:45.390', 'Id': '14415'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>In a three dimensional Cartesian space, given a ray in its parametric form: \n$r(t) = [1, 1, 1] + t[-1, -1, -1]$ find the intersection points between the ray and the following primitives. </p>\n\n<p><strong>a)</strong> A sphere centered at the origin with a radius of $1$, and</p>\n\n<p><strong>b)</strong> a triangle with vertices $\\{[1,0,0]^T , [0,1,0]^T , [0,0,1]^T \\}$.</p>\n\n<p>Represent the intersections in their Cartesian coordinates as well as the ray parameters. Write down the intermediate steps of your derivations clearly.</p>\n\n<p>The next part asks me to choose another primitive 3D shape, decide on implicit or parametric surface functions, then make an equation for ray-surface intersection and derive the analytic solution. </p>\n\n<p>I am a little confused on this assignment because I haven't had a physics class before and I don't understand the basics of 3D shapes' geometry or vectors. It's not entirely clear to me what I am supposed to find as an answer or in what form the answers should be written. I looked up the formulas for sphere and triangle intersection, but I can't find a similar example, so I don't know how to solve the problems.</p>\n", 'ViewCount': '92', 'Title': 'Sphere, triangle, and other primitive shape intersection', 'LastEditorUserId': '472', 'LastActivityDate': '2013-09-19T08:24:50.833', 'LastEditDate': '2013-09-19T08:24:50.833', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10215', 'Tags': '<computational-geometry><graphics>', 'CreationDate': '2013-09-19T02:53:54.783', 'Id': '14430'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am new to StackExchange, and I already made the mistake of posting a new question as a response to a previous question. Here, I rewrote my question more clearly and separately.</p>\n\n<p>I am trying to store an existing 2D triangulation in a DCEL data structure, and I have all of the vertices and edges.\nI was able to store all of the information correctly except the half_edge representative for each triangle. Here is the algorithm I used:\n(taken from <a href="http://cs.stackexchange.com/questions/2450/constructing-of-double-connected-edge-list-dcel">Constructing of Double Connected Edge List (DCEL)</a>)</p>\n\n<blockquote>\n  <p>Algorithm:</p>\n  \n  <p>For each endpoint, create a vertex. For each input segment, create two\n  half-edges and assign their tail vertices and twins. For each\n  endpoint, sort the half-edges whose tail vertex is that endpoint in\n  clockwise order. For every pair of half-edges e1, e2 in clockwise\n  order, assign e1->twin->next = e2 and e2->prev = e1->twin. Pick one of\n  the half-edges and assign it as the representative for the endpoint.\n  (Degenerate case: if there\'s only one half-edge e in the sorted list,\n  set e->twin->next = e and e->prev = e->twin.) The next pointers are a\n  permutation on half-edges. For every cycle, allocate and assign a face\n  structure.</p>\n</blockquote>\n\n<p>The last sentence seems to be easier said than done. How can I ensure that every triangle will have a representative, and that a representative will be assigned only once for each triangle? Furthermore, which cycle is it referring to? If you have any other ideas, please share.</p>\n\n<p>Thank you very much for your help. I\'ve been struggling with this for a while.</p>\n\n<p>PS- I am working in C++. Also, I am using the same structure as provided in the link above.</p>\n', 'ViewCount': '118', 'Title': 'Problem with storing an existing triangulation in a DCEL', 'LastActivityDate': '2013-11-20T14:54:13.830', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18167', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10269', 'Tags': '<algorithms><data-structures><computational-geometry>', 'CreationDate': '2013-09-25T07:24:18.060', 'Id': '14591'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let $S$ be a convex polygon on $n$ points. Given two points $A$ and $B$, where $A$ is left of $S$, and $B$ is right of $S$, what's an algorithm to find the shortest path from $A$ to $B$, that avoids the interior of $S$? What about the longest path?</p>\n", 'ViewCount': '114', 'Title': 'Finding both the longest and shortest path in a convex polygon', 'LastEditorUserId': '9665', 'LastActivityDate': '2013-10-31T17:09:25.687', 'LastEditDate': '2013-10-01T16:38:51.820', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9665', 'Tags': '<algorithms><complexity-theory><algorithm-analysis><computational-geometry>', 'CreationDate': '2013-10-01T16:03:11.983', 'FavoriteCount': '1', 'Id': '14736'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>We have two sets of vectors of positive numbers, $X$ and $Y$ where for\n$x\\in X$ we write $x=(x_1,x_2,\\ldots,x_k)$ and similarly for $y\\in Y$\nwe write $y=(y_1,y_2,\\ldots,y_k$).</p>\n\n<p>We are given two vectors $l=(l_1,l_2,\\ldots,l_k)$, and\n$u=(u_1,u_2,\\ldots,u_k)$ such that $l_i\\le u_i$ for all $i$.</p>\n\n<p>We want to find all pairs $(x,y)$, $x\\in X$, and $y\\in Y$ such that \n$l_i\\le x_i+y_i\\le u_i$</p>\n\n<p>Handwaving a bit, we can do this in a divide and conquer sort of way,\nseparating each set into pieces that are larger and smaller than\n$l_i/2$ and throwing away the pairs where both are in the smaller\nhalf.\nThis gives a recurrence\n$$T(m,n) = T(m,n/2) + T(m/2, n/2) + c(m+n)$$\nwhere $m=|X|$ and $n=|Y|$.  For equal size sets, this gives\n$T(n,n) = O(n^{1.7})$, which is better than quadratic, but less than I\nwould hope for.</p>\n\n<p>A similar question could be asked for three or more sets.  </p>\n', 'ViewCount': '83', 'Title': 'Range query for sum of vectors', 'LastEditorUserId': '10576', 'LastActivityDate': '2013-10-09T05:26:48.523', 'LastEditDate': '2013-10-08T15:53:44.703', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '10576', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-10-08T14:33:14.263', 'FavoriteCount': '1', 'Id': '14910'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have an euclidean graph, I want to add new node to it, and create edges between that node and all the rest of the nodes, keeping it euclidean. Now I want to sort all the nodes in the graph by distance from the node that I just added.</p>\n\n<p>What would be the best way to do it? Is there any solution better than $O(NLog(N))$?</p>\n', 'ViewCount': '149', 'Title': 'Find neighbors of node in euclidean graph', 'LastEditorUserId': '10572', 'LastActivityDate': '2013-10-21T22:38:13.503', 'LastEditDate': '2013-10-21T08:19:28.800', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10572', 'Tags': '<graphs><computational-geometry>', 'CreationDate': '2013-10-21T07:01:17.450', 'FavoriteCount': '1', 'Id': '16279'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Cutting problems are problems where a certain large object should be cut to several small objects. For example, imagine you have a factory that works with large boards of raw glass, of width W and length L. There are several buyers, each of which wants an unbounded number of small glass boards. Buyer $i$ wants boards of length $l_i$ and width $w_i$. Your goal is to cut small boards from the large board, such that the total used is maximized and the waste is minimized (There are also <a href="http://www.citeulike.org/user/erelsegal-halevi/article/1695945">other types of cutting and packing problems</a>).</p>\n\n<p>One common restriction in cutting problems is, that the cuts must be <strong>guillotine cuts</strong>, i.e., each existing rectangle can be cut only to two smaller rectangles; it is impossible to make L-shapes etc. Obviously, the maximum used area with guillotine cuts might be smaller than the maximum used area without restriction.</p>\n\n<p>My question is: <strong>Are there upper and lower bounds on the ratio between the optimal guillotine cut and the optimal general cut?</strong></p>\n\n<p>Related work: <a href="http://www.citeulike.org/user/erelsegal-halevi/article/7153709">Song et al. (2009)</a> describe an algorithm that uses a restricted type of guillotine cuts - <em>twice-guillotine cuts</em>. They prove, using geometric constraints, that the ratio between the maximum twice-guillotine cut to the maximum guillotine cut is bounded by <strong>$\\frac{6}{7}$</strong>. I am looking for a comparable result about the ratio between the maximum guillotine cut to the maximum general cut.</p>\n', 'ViewCount': '61', 'Title': 'guillotine cuts versus general cuts', 'LastEditorUserId': '1342', 'LastActivityDate': '2013-10-29T07:48:31.090', 'LastEditDate': '2013-10-29T07:48:31.090', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<reference-request><computational-geometry><lower-bounds><packing>', 'CreationDate': '2013-10-29T07:40:13.090', 'Id': '16533'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '397', 'Title': 'Tiling an orthogonal polygon with squares', 'LastEditDate': '2013-11-05T17:00:30.150', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1342', 'FavoriteCount': '2', 'Body': '<p>Given an orthogonal polygon (a polygon whose sides are parallel to the axes), I want to find the smallest set of interior-disjoint squares, whose union equals the polygon.</p>\n\n<p>I found several references to slightly different problems, such as:</p>\n\n<ul>\n<li><em>Covering</em> an orthogonal polygon with squares - similar to my problem, but the covering squares are allowed to overlap. This problem has a polynomial solution (<a href="http://cs.smith.edu/~orourke/Papers/ConnJORsquares.pdf">Aupperle, Conn, Keil and O\'Rourke, 1988</a>;  <a href="http://dx.doi.org/10.1142/S021819599600006X">Bar-Yehuda and Ben-Hanoch, 1996</a>).</li>\n<li>Tiling/decomposing/partitioning an orthogonal polygon to <em>rectangles</em>. This problem has a polynomial solution (<a href="http://dx.doi.org/10.1016/B978-044482537-7/50012-7">Keil, 2000</a>; <a href="http://dx.doi.org/10.1007/978-3-642-11409-0_1">Eppstein, 2009</a>).</li>\n<li><em>Covering</em> an orthogonal polygon with <em>rectangles</em> - this problem is known to be NP-complete (<a href="http://dx.doi.org/10.1109/sfcs.1988.21976">Culberson and Reckhow, 1988</a>).</li>\n</ul>\n\n<p>I am looking for an algorithm for minimal <em>tiling</em> with <em>squares</em>.</p>\n', 'Tags': '<algorithms><computational-geometry><tiling>', 'LastEditorUserId': '1342', 'LastActivityDate': '2013-12-10T07:45:32.940', 'CommentCount': '11', 'AcceptedAnswerId': '16801', 'CreationDate': '2013-11-02T23:30:11.247', 'Id': '16661'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '53', 'Title': 'Job sites for applied/interdisciplinary mathematics related to computer science?', 'LastEditDate': '2013-11-27T13:43:45.137', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11167', 'FavoriteCount': '0', 'Body': "<p>I'm looking for job sites in applied/interdisciplinary mathematics, more specially, say postdocs or higher positions in mathematics and medical imaging, mathematics and computer vision. I'm aware of mostly all the popular job sites, mathjobs, euro math jobs, jobs.ac.uk, nordic math jobs etc etc, but most of the jobs there are of 'pure' nature, with very few for applied/interdisciplinary.</p>\n\n<p>I'm trying to find postdoctoral position in mathematical imaging problems, which would use significant amount of conformal/quasiconformal mappings, Riemann surfaces, differential geometry etc. Looking into individual group's webpage is too much work. But if there's an webpage containing all the information, that'll be much better! </p>\n\n<p>So, if you know any such website for the above (for Europe(preferable) and US), I'd appreciate if you could pass them onto me. Thanks! </p>\n", 'ClosedDate': '2013-11-27T19:41:43.750', 'Tags': '<computational-geometry><image-processing><computer-vision>', 'LastEditorUserId': '9550', 'LastActivityDate': '2013-11-27T13:43:45.137', 'CommentCount': '1', 'CreationDate': '2013-11-04T09:22:05.450', 'Id': '16697'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let's say I have a 11x11 grid with a few points (around 8) marked in the grid. One of the points is in the center cell. Call it point P.</p>\n\n<p>I choose a point other than P and connect it with a line segment to P. Call that point C1</p>\n\n<p>I choose another point that is not C1 and connect it with a line segment to P. Call that point C2.</p>\n\n<p>Now, if we extend the line segments out from P to the edges of the grid, then the grid will be split into two regions A and B.</p>\n\n<p>How can I determine which of the remaining points are in A and B efficiently?</p>\n", 'ViewCount': '65', 'Title': 'Partition points on a 2d plane with arbitrary line segment', 'LastActivityDate': '2013-11-06T07:46:09.757', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11215', 'Tags': '<computational-geometry>', 'CreationDate': '2013-11-06T07:02:20.740', 'Id': '16764'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am aware of a logarithmic-time algorithm to maintain the connected components of graphs in the Euclidean plane <a href="http://web.cs.swarthmore.edu/~adanner/cs97/s08/pdf/eppstein92maintenance.pdf" rel="nofollow">(D. Eppstein, GF Italiano, R. Tamassia, RE Tarjan, J. Westbrook, and M. Yung. Maintenance of a minimum spanning forest in a dynamic plane graph. <em>J. Algorithms</em>, 13 (1): 33 {54, 1992.).</a></p>\n\n<p>Does anyone know if there is an implementation of this work or if there are other results that are easier to implement?</p>\n', 'ViewCount': '50', 'Title': 'Help for implementing the maintenance of the connected components in the Euclidean plane in logarithmic time', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-11-06T16:03:25.510', 'LastEditDate': '2013-11-06T16:03:25.510', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11227', 'Tags': '<graph-theory><graphs><computational-geometry>', 'CreationDate': '2013-11-06T14:54:30.473', 'FavoriteCount': '1', 'Id': '16773'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '93', 'Title': 'How to prove that the minimum square partition of a 3X2 rectangle has 3 squares', 'LastEditDate': '2013-11-10T10:32:47.813', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '2', 'Body': '<p>This question is motivated by an older question about <a href="http://cs.stackexchange.com/q/16661/2755">tiling an orthogonal polygon with squares</a>.</p>\n\n<p><img src="http://i.stack.imgur.com/4furns.jpg" alt="enter image description here"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="http://i.stack.imgur.com/L8cYGs.jpg" alt="enter image description here"></p>\n\n<p>Given a $3\\times 2$ rectangle like the first image, the second image is a <em>square partition</em> of that rectangle. </p>\n\n<ul>\n<li>A <em>square partitioning</em> is a covering by non-overlapping squares; the entire rectangle must be covered, all the squares must be disjoint.</li>\n<li>A <em>minimum square partitioning</em> is a <em>square partitioning</em>, for which is no <em>square partitioning</em> that is made of a lesser number of squares.</li>\n</ul>\n\n<blockquote>\n  <p>How can we prove that the second image is a <i>minimum square partitioning</i> of the $3\\times 2$ rectangle?</p>\n</blockquote>\n\n<p><sub>Can we generalize this to ${\\rm M{\\small IN}S{\\small QUARES}}(R_{w,h=w-1})=w$? (see <a href="http://cs.stackexchange.com/q/16826/2755">followup question</a> )</sub></p>\n', 'Tags': '<proof-techniques><computational-geometry><tiling>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-10T10:32:47.813', 'CommentCount': '0', 'AcceptedAnswerId': '16812', 'CreationDate': '2013-11-08T01:05:49.080', 'Id': '16809'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '102', 'Title': 'What is the minimum square partition of an almost-square rectangle?', 'LastEditDate': '2013-11-10T10:30:15.757', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '2', 'Body': '<p>This question is motivated by an older question about <a href="http://cs.stackexchange.com/q/16661/2755">tiling an orthogonal polygon with squares</a>.\nIt is a generalisation of my former question about <a href="http://cs.stackexchange.com/q/16809/2755">how to prove that the minimum square partition of a 3X2 rectangle has 3 squares</a>).</p>\n\n<p>Let:</p>\n\n<ul>\n<li>An <em>almost-square-rectangle</em> be a rectangle that has a width  $w$ and height $h=w-1$.</li>\n<li>A <i>square partitioning</i> be a covering by non-overlapping squares; the entire rectangle must be covered, all the squares must be disjoint.</li>\n<li>A <i>minimum-square-partitioning</i> be a <i>square partitioning</i>, for which is no square partitioning that is made of a lesser number of squares.</li>\n</ul>\n\n<p>Illustration:</p>\n\n<p><img src="http://i.stack.imgur.com/OYqPRm.jpg" alt="enter image description here"></p>\n\n<p><sup><b>Top row:</b> The <b>almost-square-rectangles</b> of widths $3$, $4$ and $5$. <b>Bottom row:</b> Are these <b>miminum-square-partitions</b> of their corresponding rectangles?</sup></p>\n\n<p>My question is now:</p>\n\n<blockquote>\n  <p>What is the minimum-square-partitioning of an almost-square-rectangle?</p>\n  \n  <p>Can we prove ${\\rm M{\\small IN}S{\\small QUARES}}(R_{w,h=w-1})=w$?</p>\n</blockquote>\n\n<p><sub>Note a follow-up question, <a href="http://math.stackexchange.com/q/560870/39567">Minimum square partitions for 4x3 and 5x4 rectangles</a>.</sub></p>\n', 'Tags': '<computational-geometry><tiling>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-10T10:30:15.757', 'CommentCount': '5', 'AcceptedAnswerId': '16832', 'CreationDate': '2013-11-08T15:42:18.157', 'Id': '16826'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I would like to find for any given vertex in a polygon stored in a doubly-connected edge list if the polygon is to its right or not. How do I do that without having a bunch of nested if statements?</p>\n\n<p>It seems reasonable to expect a more elegant solution that uses the DCEL.</p>\n\n<p>Thank you.</p>\n\n<p>EDIT: the vertices have coordinates and are stored in a normal DCEL data structure along with the half edges and polygons. </p>\n', 'ViewCount': '96', 'Title': 'How do you find out with a DCEL if the face is to the right of a vertex?', 'LastEditorUserId': '10269', 'LastActivityDate': '2013-11-20T15:10:47.230', 'LastEditDate': '2013-11-17T09:27:16.113', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '18165', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10269', 'Tags': '<algorithms><data-structures><computational-geometry>', 'CreationDate': '2013-11-17T06:39:35.590', 'Id': '18092'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What is an $O(n \\log n)$ algorithm to find how big the largest subset of $n$ axis-aligned rectangles (in the plane) that contain a common point is? Perhaps by reducing this to a problem with such runtime?</p>\n\n<p>An $O(n^{3})$ algorithm could be </p>\n\n<pre><code>for each of the n rectangles      \n    for each of the 4 sides of the rectangle\n        find the points where it intersects other rectangles and keep the set of those points \n        loop through the intersection points set and update the count\n</code></pre>\n', 'ViewCount': '348', 'Title': 'Efficient algorithm for finding maximum subset of intersecting rectangles', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-06T06:43:42.183', 'LastEditDate': '2014-01-06T06:43:42.183', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10950', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-12-04T14:50:43.893', 'FavoriteCount': '1', 'Id': '18611'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am looking for an algorithm to solve the following problem:</p>\n\n<p>INPUT: a set of $n$ points in the plane, $(x_1,y_1),...,(x_n,y_n)$.</p>\n\n<p>OUTPUT: a set of $n-1$ axis-parallel interior-disjoint squares, such that the boundary of each square contains at least two points. (*)</p>\n\n<p>Here is an example of input (left) and possible output (right) for $n=4$:</p>\n\n<p><img src="http://i.stack.imgur.com/jBzRL.png" alt="enter image description here"></p>\n\n<p>Efficiency is not a concern right now - the time complexity may be exponential in $n$ (since I will usually use this algorithm with small $n$\'s).</p>\n\n<p>My first thought was along the following lines:</p>\n\n<ol>\n<li>For every pair of points, find a square that touches these two points.</li>\n<li>In the resulting set of $n(n-1)/2$ squares, find a subset with $n-1$ squares that are interior-disjoint, or report that such a set does not exist.</li>\n</ol>\n\n<p>The problem is that, for every two points, there may be infinitely many squares that touch them. For example, the points $(0,0)$ and $(10,7)$ are touched by any square with a side-length of 10 and lower-left corner in $0 \\times [-3,0]$. </p>\n\n<p>How would you approach this problem?</p>\n\n<p>(*) NOTE: I don\'t know whether such a set of $n-1$ squares always exists. I want to play with points in order to gain some intuition about this question and maybe find a counter-example.</p>\n', 'ViewCount': '69', 'Title': 'Finding squares touching points', 'LastEditorUserId': '1342', 'LastActivityDate': '2013-12-23T21:46:05.337', 'LastEditDate': '2013-12-23T20:34:40.807', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19224', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2013-12-23T20:17:00.867', 'Id': '19222'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Given are a 2D plane and a array of points in this plane, with every point having an integer value assigned.</p>\n\n<p>Is there an algorithm which, when given a ratio a/b, divides the plane with a straight line, so that the values of the points are distributed as close as possible to the given ratio? </p>\n\n<p>Points may be on the dividing line, then the are counted to the 'left/upper' partition.</p>\n", 'ViewCount': '53', 'Title': 'Partition points in a plane with a straigth line', 'LastActivityDate': '2013-12-28T20:30:41.743', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19346', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11258', 'Tags': '<algorithms><computational-geometry><partition>', 'CreationDate': '2013-12-26T12:46:45.640', 'FavoriteCount': '0', 'Id': '19299'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I would like to be able to represent circles in x-y coordinates.</p>\n\n<p>Each circle contains an x and y coordinates and radius in double data type.</p>\n\n<p>My goal is to compare circles with each other whether they are partially or completely overlapping.</p>\n\n<p>I am looking for efficient ideas. Honestly the only idea that comes to my mind is draw a line(let's say l1) from x1,y1 to x2,y2 and the length of this line is larger than addition of r1 and r2 then it does not overlap, if r1+r2 =&lt; l1 then it overlaps, but I don't know how to find whether it is completely overlapping or partially. Also this wouldn't work for cases where I am combining more than one circle.</p>\n", 'ViewCount': '74', 'Title': 'How to represent circles in x-y coordinates', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-07T09:54:25.833', 'LastEditDate': '2014-01-07T09:54:25.833', 'AnswerCount': '0', 'CommentCount': '10', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8849', 'Tags': '<algorithms><computational-geometry><modelling>', 'CreationDate': '2014-01-06T03:30:29.157', 'Id': '19525'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I have the following problem:</p>\n\n<blockquote>\n  <p>In a 2D space with polygonal obstacles, find the shortest path between two given point.</p>\n</blockquote>\n\n<p>Without additional constraints, we can reduce it to a graph problem by constructing a visibility graph and then solve it by searching.</p>\n\n<p>If the following constraints are added, how can we solve it?</p>\n\n<p>Let's define a path as a set of line segments.</p>\n\n<ol>\n<li>Each segment must be longer than a given value.</li>\n<li>Each segment must be horizontal or vertical. (simplified version)<br/>\nEach segment must be parallel or perpendicular to other segments. (general version)</li>\n</ol>\n\n<p><strong>Clarification</strong></p>\n\n<ul>\n<li>The problem is in continuous 2D space.</li>\n<li>To simply the problem, the direction of the first and the last segments is given.</li>\n</ul>\n\n<p><strong>Application</strong></p>\n\n<p>This can be considered as a routing problem. I am going to use the algorithm for MEP services routing (e.g. duct, pipe, cable tray).</p>\n\n<p>We need a connector to connect two services when the direction is changed.</p>\n\n<ul>\n<li>As the connector consumes some space, we have constraint (1).</li>\n<li>As we only have limited choices of the connector (90\xb0, 60\xb0, 45\xb0, 30\xb0), we have constraint (2). To simplified the problem, I only use connector for right angle.</li>\n</ul>\n", 'ViewCount': '99', 'Title': 'Any algorithm for finding Euclidean shortest path with specific constraints in 2D?', 'LastEditorUserId': '12662', 'LastActivityDate': '2014-01-09T01:47:04.127', 'LastEditDate': '2014-01-09T01:47:04.127', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12662', 'Tags': '<algorithms><computational-geometry><shortest-path>', 'CreationDate': '2014-01-08T06:21:37.013', 'Id': '19573'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is a 3d Voronoi diagram of line segments and polylines (determined by 2 ... n points) a "simple" extension of the diagram for points?</p>\n\n<p>I found qhull to be very usable for diagrams in arbitrary dimensions for single points, but found no hint to use it with lines or line segments, so I wonder if this is just too obvious or if this is a completely different problem (and thus not supported by qhull).</p>\n\n<p>In the latter case (not supported) I think about implementing the line sweep idea (<a href="http://en.wikipedia.org/wiki/Fortune%27s_algorithm" rel="nofollow">Fortune\'s algorithm</a>) for 3d (plane sweep), and then for lines.</p>\n\n<p>Another idea was to approximate this by "stacking" 2d diagrams: discretze the third dimension, and use the intersections with the line segments in this (2d) plane. Obviously, this would only work for segments which are not coplanar in this dimension.</p>\n\n<p>Can anyone provide thoughts or hints?</p>\n', 'ViewCount': '32', 'Title': 'Voronoi in 3d: line segmens and polylines (probably with qhull)', 'LastActivityDate': '2014-01-10T09:36:39.613', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10293', 'Tags': '<computational-geometry>', 'CreationDate': '2014-01-10T09:36:39.613', 'Id': '19624'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I am having a plane in N dimension. Th distance between 2 points (a1,a2,...,aN) and (b1,b2,...,bN) is max{|a1-b1|, |a2-b2|, ..., |aN-bN|}.</p>\n\n<p>I need to to know how many K-sets exist(here K-set refers to set of points whose distance between 2 points of set is K).But as there can be infinite number of these K-sets. Thus, we would only like to count the number of classes of K-sets, such that any two K-sets which belong to the same class are equivalent if they follow given conditions.Two K-sets X and Y are considered equivalent (and belong to the same class) if:</p>\n\n<pre><code>They contain the same number of points \nThere exists N integer numbers (t1, ..., tN) such that by translating each point of X  \n by the amount ti in dimension i (1\u2264i\u2264N) we obtain the set of points Y.\n</code></pre>\n\n<p>Let's consider N=2, K=4 and the following sets of points X={(1,2), (5,5), (4,3)} and Y={(2,5), (5,6), (6,8)}. Let's consider now the tuple (1,3). By translating each point of X by the amounts specified by this tuple we obtain the set {(2,5), (6,8), (5,6)}, which is exactly the set Y. Thus, the two sets X and Y are equivalent and belong to the same class.</p>\n\n<p>Example let say N=2 and K=1 .</p>\n\n<p>There are 9 classes of K-sets. One K-set from each class is given below:</p>\n\n<pre><code>{(0,0), (0,1)}\n{(0,0), (1,0)}\n{(0,0), (1,1)}\n{(0,1), (1,0)}\n{(0,0), (0,1), (1,0)}\n{(0,0), (0,1), (1,1)}\n{(0,0), (1,0), (1,1)}\n{(0,1), (1,0), (1,1)}\n{(0,0), (0,1), (1,0), (1,1)}\n</code></pre>\n\n<p>So answer here will be 9.</p>\n", 'ViewCount': '76', 'ClosedDate': '2014-02-12T09:15:23.047', 'Title': 'Number of K-sets', 'LastActivityDate': '2014-02-12T08:29:00.027', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12759', 'Tags': '<algorithms><computational-geometry><sets><number-theory>', 'CreationDate': '2014-01-11T15:36:25.203', 'Id': '19656'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let $\\mathbb{M}$ be the set of all 3D triangle meshes.</p>\n\n<p>Let $a:\\mathbb{M} \\rightarrow \\mathbb{R}$ be a function that computes surface area of the mesh.</p>\n\n<p>Let $\\mathbb{T}$ be the set of 3D affine transformation matrices.</p>\n\n<p>Let $t:\\mathbb{M} \\times \\mathbb{T} \\rightarrow \\mathbb{M}$ be a function that transforms mesh $M$ with matrix $T$.</p>\n\n<p>Let $\\mathbb{C}$ be a set of values of unknown (at the moment) structure, with the following properties:</p>\n\n<ul>\n<li>There is a function $c:\\mathbb{M} \\rightarrow \\mathbb{C}$ that maps meshes to these values.</li>\n<li>There is a function $a:\\mathbb{C} \\rightarrow \\mathbb{R}$, such that $(\\forall M \\in \\mathbb{M})(a(c(M)) = a(M))$, i.e. computes surface area of the mesh indirectly, via first mapping it to $\\mathbb{C}$.</li>\n<li>There is a function $t:\\mathbb{C} \\times \\mathbb{T} \\rightarrow \\mathbb{C}$ such that $(\\forall M \\in \\mathbb{M})(\\forall T \\in \\mathbb{T})(t(c(M), T) = c(t(M, T)))$, i.e. $C$s can be transformed with the same effect on computed surface area as if transformation was applied to the mesh itself.</li>\n</ul>\n\n<p>So, is there such $\\mathbb{C}$? Obviously I don't want $\\mathbb{C} = \\mathbb{M}$, and prefer $a(C)$ and $t(C)$ to be of constant asymptotic complexity with respect to amount of triangles in the mesh.</p>\n", 'ViewCount': '63', 'Title': 'Triangle mesh surface area after affine transformation', 'LastActivityDate': '2014-01-14T16:45:09.260', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12837', 'Tags': '<algorithms><data-structures><computational-geometry>', 'CreationDate': '2014-01-14T16:45:09.260', 'Id': '19718'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '105', 'Title': 'Find the centre of a circle given two points lying on it and its radius', 'LastEditDate': '2014-01-25T21:53:25.530', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6823', 'FavoriteCount': '1', 'Body': '<p>We have been given 2 points on a circle and its radius. Now I want to find out the centre point of such a circle. How can I code this efficiently without solving the quadratic equations?</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-26T13:19:19.007', 'CommentCount': '3', 'AcceptedAnswerId': '19974', 'CreationDate': '2014-01-25T20:05:04.313', 'Id': '19970'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '191', 'Title': 'detect closed shapes formed by points', 'LastEditDate': '2014-02-02T13:48:57.277', 'AnswerCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '13186', 'FavoriteCount': '0', 'Body': '<p>I plot several arrays containing xy-coordinates of points (using plot(x,y)) and obtain a plot with some curves. The curves form some very distinctive closed shapes (that is, the points describing the curves lie close to each other).</p>\n\n<p>Now I need to find the (possibly approximate) centers of the closed shapes. Alternatively, it\'s good to "recognize" the closed shapes and to fill them. I don\'t know what is easier given the coordinates of points forming the shapes.</p>\n\n<p>A possible example with 3 closed shapes to detect is given below.</p>\n\n<p><img src="http://i.stack.imgur.com/qDacQ.jpg" alt="enter image description here"></p>\n\n<p>Points can be also added along the image\'s borders, thus, closing all open shapes. Then all "regions" in the figure will be closed, but the question persists.</p>\n', 'Tags': '<algorithms><computational-geometry>', 'LastEditorUserId': '13186', 'LastActivityDate': '2014-02-05T09:43:25.447', 'CommentCount': '7', 'AcceptedAnswerId': '20247', 'CreationDate': '2014-01-28T14:19:16.247', 'Id': '20039'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a set of piecewise-linear curves (i.e. "points connected by line segments") as shown in the figure below:</p>\n\n<p><img src="http://i.stack.imgur.com/pHNJY.jpg" alt="enter image description here"></p>\n\n<p>additional points are added on the borders (drawn in red) "closing" the open regions of the figure. In fact, the figure can be any plot with some closed piecewise-linear shapes on it (i.e. there are no lines or curves with open ends).</p>\n\n<p>I need to find some (one is enough, but more is OK too if it doesn\'t significantly slow down the algorithm) testing points inside of <strong>EVERY</strong> closed contour (see e.g. the figure above). By adding the border lines all "open" regions become closed ones, so the whole figure consists of simple "closed" regions. However, this condition is not necessary in general.</p>\n\n<p>The test points should also lie on some minimal distance from the boundary (this condition assures the meaningful results).</p>\n\n<p><em>I also have a possible solution to the problem:</em></p>\n\n<p>1) By a curve intersection algorithm all intersection points of any curve (incl. the "borders") with any other curve were found. By this procedure every curve was divided into <strong>segments</strong> by the intersection points lying on the curve.</p>\n\n<p>2) Next, two normals are drawn from some linear piece of a segment to "infinity" (i.e. the length of the normals is big enough to place their endpoints outside of the plotted/bounded region). </p>\n\n<p>3) The two nearest intersections are found, and the two test points are chosen at the half of the distance between the normals\' origins and their two nearest intersections. If the distance is too small - choose another piece of the segment and repeat (2) and (3).\nThis should work since every curve is a border of some closed contour. </p>\n\n<p>4) repeat (2) and (3) for all segments found in (1)</p>\n\n<p>The proposed solution doesn\'t require that the closed contours are "detected" (i.e. that they are available as ordered lists of points). However, it can be assumed that the closed contours are "known" (their detection was discussed e.g. in <a href="http://cs.stackexchange.com/questions/20039/detect-closed-shapes-formed-by-points">detect closed shapes formed by points</a>)</p>\n\n<p><strong>The main concern about the proposed solution is that it might be not quite efficient</strong>, because we need first N*N/2 intersection checks (since the curves are checked pair by pair) in order to find all intersections. N is the number of curves. And then we need at least M*N/2 intersection checks in order to analyze every segment. M is the number of curve segments.</p>\n\n<p>However, in this problem the speed IS an issue.</p>\n', 'ViewCount': '60', 'Title': 'test points inside of polygons/piecewise-linear contours', 'LastEditorUserId': '13186', 'LastActivityDate': '2014-02-11T14:55:30.343', 'LastEditDate': '2014-02-11T14:55:30.343', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13186', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-02-07T09:59:43.807', 'Id': '21426'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>As an applied person, I\'m facing one practical problem deciding whether a set of Wang tile could tile the plane periodically or aperiodically. Although both problems seem undecidable, but I\'m on a more practical aspect. Say, if the program accidentally ("or systematically") find some "periodic structure", then it stops and tells me there exists periodic pattern. If during running, it enumerates all the use of tile and finds that it simply cannot tile the plane, then it tell me this set of tiles cannot tile the plane. Even if the program didn\'t stop, then after running some steps, it returns me a few most ordered patterns that that could "possibly tile the plane".</p>\n\n<p>For practical purpose, I simply assume if the tessellation are up to some size (maybe 1000*1000) then I say "it could tile the plane practically".</p>\n\n<p>So my most interested question is: is there any established programs or algorithms that "try" to help me analyze a set of tile even if it might not halt ("but I could define some imposed halting condition").</p>\n\n<p>For context why I am interested in this problem, here\'s the links:</p>\n\n<ul>\n<li><p><a href="http://mathoverflow.net/questions/147374/coloring-in-lattice">Coloring in lattice</a></p></li>\n<li><p><a href="http://mathoverflow.net/questions/149565/reference-for-wang-tile">Reference for Wang Tile</a></p></li>\n<li><p><a href="http://mathoverflow.net/questions/157214/periodic-tiling-of-wang-tile">Periodic Tiling of Wang tile</a></p></li>\n</ul>\n\n<p>Also cross posted to <a href="http://mathoverflow.net/questions/157239/computational-approach-deciding-whether-a-set-of-wang-tile-could-tile-the-space">Math Overflow</a>.</p>\n', 'ViewCount': '47', 'Title': 'Computational approach deciding whether a set of Wang Tile could tile the space up to some size', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-10T21:51:57.717', 'LastEditDate': '2014-02-10T21:51:57.717', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14553', 'Tags': '<reference-request><computational-geometry><tiling><mathematical-software>', 'CreationDate': '2014-02-10T20:27:06.353', 'FavoriteCount': '2', 'Id': '21502'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have two algorithms which I would like to implement:</p>\n\n<p>First, given a (very long) list $\\{\\mathbf{r}_{i}\\}_{i=1}^{n}\\subset \\mathbb{R}^{3}$, a point $p \\in \\mathbb{R}^{3}$, and a distance $d&gt;0$, find all $i$ such that $|\\mathbf{r}_{i} - \\mathbf{p}| &lt; d$.</p>\n\n<p>Currently, I sort the list over the $x$-coordinate, so that if $x_{i}$ is the $x$-coordinate of $\\mathbf{r}_{i}$, then $x_{1} \\le x_{2} \\le \\cdots \\le x_{n}$. Then I use the condition $(x_{i}-\\mathbf{p}_{x})^{2} &gt; d^2 \\implies |\\mathbf{r}_{i} - \\mathbf{p}|^2 &gt; d^{2}$. This allows me to filter the list by binary search. This leaves me with a subset $\\{\\mathbf{r}_{i}\\}_{i=j_{1}}^{i=j_{2}}$ of the original list where for all $i \\in [j_{1}, j_{2}]$, $(x_{i}-\\mathbf{p}_{x})^{2} &lt;= d^2$. Then I have to bite the bullet and do an explicit test on each one of these to see if $|\\mathbf{r}_{i} - \\mathbf{p}| &lt; d$.</p>\n\n<p>This algorithm strikes me as weird and not optimal; is there a better way?</p>\n\n<p>Next: A related problem: Given a list $\\{\\mathbf{r}_{i}\\}_{i=1}^{n}\\subset \\mathbb{R}^{3}$ and a point $\\mathbf{p} \\in \\mathbf{R}^{3}$, find $j \\in [1,n]$ such that $d_{j}:=|\\mathbf{r}_{j} - \\mathbf{p}| = \\min_{i} |\\mathbf{r}_{i} - \\mathbf{p}|$.  Is there an efficient algorithm to find $j$?</p>\n\n<p>Finally, I should note that any one-time ``sorting'' expense is tolerable, since this operation is repeated many times. </p>\n", 'ViewCount': '65', 'Title': 'Find all neighbors at a certain distance, in 3 dimensions', 'LastEditorUserId': '755', 'LastActivityDate': '2014-02-13T22:18:22.163', 'LastEditDate': '2014-02-13T22:18:22.163', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '21615', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14616', 'Tags': '<algorithms><computational-geometry><search-algorithms>', 'CreationDate': '2014-02-12T22:55:41.277', 'Id': '21580'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I believe the following question in summary is: How to approximate Euclidean distance in a digital plane?</p>\n\n<blockquote>\n  <p>When a pebble falls on a calm surface of water a circular wave propagates. I want to color the pixels with time to show this effect. So I discretize the time and in each time step, starting  from the center, I color one pixel away in all directions. But this gives a square wave. I guess what is wrong is that I have approximated the Euclidean distance with the infinity norm.</p>\n</blockquote>\n\n<p>How do I approximate Euclidean distance to get the a circular wave on the pixels? I don't want to measure the distance from each pixel to the center in each time slot. That will be very heavy. I am looking for a simple algorithm like coloring the next pixel adjacent to last colored pixel.</p>\n", 'ViewCount': '38', 'Title': 'Wave propagation in digital image', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-02-13T16:56:21.790', 'LastEditDate': '2014-02-13T16:56:21.790', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '21589', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<algorithms><computational-geometry><approximation>', 'CreationDate': '2014-02-13T02:10:38.453', 'Id': '21585'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>If we constructed a Voronoi diagram of a set of points, and then 'lost' the set of points, can we recover the set of points from the Voronoi diagram we constructed before? What information should be kept? Looking forward to hearing your suggestions!</p>\n", 'ViewCount': '28', 'ClosedDate': '2014-02-16T18:34:37.767', 'Title': 'The method of recover the set of points of Voronoi diagram', 'LastActivityDate': '2014-02-15T14:28:52.743', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '-1', 'OwnerDisplayName': 'Monkey D Bear', 'PostTypeId': '1', 'OwnerUserId': '14754', 'Tags': '<computational-geometry>', 'CreationDate': '2014-02-15T01:51:25.900', 'Id': '21667'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose I wanted to find all valid <a href="http://en.wikipedia.org/wiki/Net_%28polyhedron%29" rel="nofollow">nets</a> of a polyhedron. Is this kind of problem NP-Hard?</p>\n\n<p>My guess is that it is. If you were to increase the "complexity" of the polyhedron (maybe this is the number of faces?), there is no "shortcut" to discovering all the nets; you would have to enumerate all combinations. This sort of "listing all combinations" without any shortcuts seems to be similar to other kind of NP problems I\'ve seen. Is my thinking correct? Can someone else explain their thought process that helps them decide whether this problem is NP-Hard or not?</p>\n\n<p>If this problem is not NP-Hard, how do you classify this and why?</p>\n', 'ViewCount': '68', 'Title': 'Is finding all valid nets of a polyhedron NP-hard?', 'LastEditorUserId': '472', 'LastActivityDate': '2014-02-17T09:40:02.893', 'LastEditDate': '2014-02-17T09:40:02.893', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14728', 'Tags': '<complexity-theory><computational-geometry><np-hard>', 'CreationDate': '2014-02-16T21:54:30.863', 'Id': '21708'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose in a given plain there are  fixed number of lines. A point P lies on one of the line. How to find which line intersects the point P ? I am giving an example<img src="http://i.stack.imgur.com/0CN2J.png" alt="enter image description here"> </p>\n\n<p>In the above graph point P is on the line CE. We can determine it visually.But my problem is how to make the computer understand it. Is there any algorithm available to make it so ?</p>\n', 'ViewCount': '134', 'Title': 'How to find whether a point is in a line or not', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-18T16:53:15.867', 'LastEditDate': '2014-02-18T16:36:45.730', 'AnswerCount': '3', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14806', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-02-18T15:15:49.593', 'Id': '21770'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>What is the problem in \u201cclosest pair of points algorithm\u201d if all points share the same x-coordinate or the same y-coordinate? and how the algorithm will change?</p>\n', 'ViewCount': '16', 'ClosedDate': '2014-02-20T11:13:49.043', 'Title': 'Closest pair of points on a line', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-02-20T09:33:33.917', 'LastEditDate': '2014-02-20T09:33:33.917', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '-1', 'OwnerDisplayName': 'Roy411', 'PostTypeId': '1', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-02-19T19:57:03.630', 'Id': '21838'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '126', 'Title': 'Selecting random points at general position', 'LastEditDate': '2014-03-01T22:33:17.750', 'AnswerCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1342', 'FavoriteCount': '1', 'Body': '<p>How will you find a random collection of $n$ points in the plane, all with integer coordinates in a specified range (e.g. -1000 to 1000), such that no 3 of them are on the same line?</p>\n\n<p>The following algorithm eventually works, but seems highly inefficient:</p>\n\n<ol>\n<li>Select $n$ points at random.</li>\n<li>Check all $O(n^3)$ triples of points. If any of them are on the same line, then discard one of the points, select an alternative point at random, and go back to 2.</li>\n</ol>\n\n<p>Is there a more efficient algorithm?</p>\n', 'Tags': '<algorithms><computational-geometry><randomized-algorithms>', 'LastEditorUserId': '1342', 'LastActivityDate': '2014-03-01T22:50:12.840', 'CommentCount': '1', 'AcceptedAnswerId': '22171', 'CreationDate': '2014-03-01T20:49:34.203', 'Id': '22167'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>My question is very similar to <a href="http://cs.stackexchange.com/questions/1825/maximum-enclosing-circle-of-a-given-radius">another</a> solved question. As the title indicates, the major difference in my question is that I need to find the <strong>convex polygon</strong> that encloses the maximum number of points with a given <strong>area</strong> (<em>instead</em> of finding the <strong>circle</strong> that encloses the maximum number of points with a given <strong>radius</strong>).</p>\n\n<p>So my question is as the following:</p>\n\n<blockquote>\n  <p>Given $n$ points $p_1,\\dots,p_n$ in the plane and an area $A$, find a convex polygon $\\mathcal{P}$ whose area is $\\le A$ and that contains as many of the $n$ points as possible.</p>\n</blockquote>\n\n<p>I already checked on the <a href="http://en.wikipedia.org/wiki/Minimum_bounding_box_algorithms" rel="nofollow">Minimum bounding box algorithms</a> and <a href="http://en.wikipedia.org/wiki/Convex_hull_algorithms" rel="nofollow">Convex hull algorithms</a>. I also found some <a href="http://alienryderflex.com/smallest_enclosing_polygon/" rel="nofollow">implementations</a> for Minimum bounding polygon. However, those previous algorithms don\'t consider the concept of determining the convex polygon that encloses <strong>as many points as possible</strong> of a given set of points and <strong>a given area</strong>. Finally I invented an approach to solve the problem but it doesn\'t work in some cases.</p>\n\n<p>The idea of my approach is to start by finding <strong>the minimum bounding box</strong> for all the points. If the resulting polygon\'s area is greater than the given area, I cut off one of the edge points according to some technique, then I re-compute the minimum bounding box and test the area. I keep looping until I reach the desired area. I won\'t get into details with my approach as it\'s not working properly. </p>\n\n<p><strong>EDIT</strong></p>\n\n<p>As a simplified solution, finding <strong>any rectangle</strong> (it doesn\'t have to be axis-aligned) that encloses the maximum number of points with a given area would be very beneficial and works as a temporary solution for my problem. </p>\n', 'ViewCount': '101', 'Title': 'Maximum Enclosing Convex Polygon of a Given Area', 'LastEditorUserId': '15187', 'LastActivityDate': '2014-03-04T00:28:51.230', 'LastEditDate': '2014-03-04T00:28:51.230', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15187', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-03-02T07:18:47.567', 'Id': '22183'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a sphere (radius R) on a rectilinear grid. Some cells intersect the edge of that sphere, call them \'edge cells\'. Designate a given cell by indices [i,j,k] which refer to the lowest-index vertex of that cell (i.e. the inner-most cell, in the [+x,+y,+z] octant would be designated as [0,0,0]). For any given \'edge cell\', how can I calculate what fraction of its volume is within the sphere of radius R?</p>\n\n<p>In this figure, the purple surface is the surface of the sphere passing through some arbitrary cell, with origin [x0,y0,z0]. I want to know what fraction of the cell\'s volume is within this surface.</p>\n\n<p><img src="http://i.stack.imgur.com/vF22q.png" alt="enter image description here"></p>\n\n<p>I think \'edge cells\' can be calculated by finding the cells whose vertex [i,j,k] is at a radius R.</p>\n\n<p>I think there should be an analytic formula to calculate the volume fraction, but I can\'t figure out how to setup the integral. Any help would be greatly appreciated!</p>\n', 'ViewCount': '19', 'ClosedDate': '2014-03-06T12:01:43.700', 'Title': 'fraction of volume of a rectilinear grid cell within some radius of the origin', 'LastActivityDate': '2014-03-04T17:36:17.757', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15276', 'Tags': '<algorithms><computational-geometry><simulation>', 'CreationDate': '2014-03-04T17:36:17.757', 'Id': '22276'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Suppose that I have a set of $N$ points in $k$-dimensional space ($k&gt;1$), such as in <a href="http://cs.stackexchange.com/q/22693/15794">this question</a>, and that I need to find all pairs with a distance\xb9 smaller than a certain threshold $t$.  The brute-force method would require $N(N-1)$ distance calculations, which is not acceptable.  I attack the problem by first sorting the cells in a grid\xb9, such as in <a href="http://cs.stackexchange.com/a/22707/15794">this answer</a>, followed by brute-force within each grid cell and a number of neighbours (which is easily calculated from the cell size $w*h$ and the maximum distance $t$).</p>\n\n<p>My solution seems to work acceptably well for my purposes, and the results appear to be correct.  However I\'m neither a computer scientist nor a mathematician, and I\'m not sure what tools I could use to calculate the optimal cell size.  In fact, I developed the aforementioned possibly naive algorithm because it seemed like a reasonably okay method.  I <em>guess</em> the optimal cell size depends in some way on $N$, $t$, on the cost of the distance function, and on the implementation of the sorting in cells, on the distribution of points, and on other things.  How would I make a guess of the optimal values of $w$ and $h$, with or without a priori knowledge on the approximate number of pairs I expect to find?</p>\n\n<p>Does the answer change if the N points are divided in two sets $S_1$ and $S_2$, and each pair shall consist of one element from each set?</p>\n\n<hr>\n\n<p>\xb9<sup>Not necessarily euclidian.  The points may, for example, be locations on a sphere, i.e. on Earth, with latitude and longitude.</sup></p>\n', 'ViewCount': '172', 'Title': 'How do I choose an optimal cell size when searching for close pairs of points, and using cells to implement this?', 'LastEditorUserId': '15794', 'LastActivityDate': '2014-03-17T23:35:41.607', 'LastEditDate': '2014-03-17T21:42:18.320', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15794', 'Tags': '<algorithms><computational-geometry><matching>', 'CreationDate': '2014-03-17T21:25:27.787', 'FavoriteCount': '1', 'Id': '22722'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have two shapes in a 2D space, not necessarily convex, and I\'d like to compare how similar they are. How can I define a robust distance metric to measure their similarity, and how can I compute it?</p>\n\n<p><img src="http://i.stack.imgur.com/COt2d.png" alt="Distance between two shapes"></p>\n\n<p>I am looking for a method which provides a short distance in case of:</p>\n\n<ol>\n<li>scaling;</li>\n<li>rotation;</li>\n<li>perhaps local scaling or rotation.</li>\n</ol>\n\n<hr>\n\n<p>I see two possible solutions:</p>\n\n<ol>\n<li>transform the shapes into <strong>pixel-based matrices</strong> (bitmap) and compute a Levenshtein distance (but without enough robustness in the distance, in case of rotation for instance);</li>\n<li>transform the shapes into <strong>graphs</strong> and try to define a distance between them.</li>\n</ol>\n', 'ViewCount': '58', 'Title': 'Similarity between two geometric shapes', 'LastEditorUserId': '755', 'LastActivityDate': '2014-03-19T00:40:49.737', 'LastEditDate': '2014-03-19T00:40:49.737', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15843', 'Tags': '<algorithms><graph-theory><computational-geometry><computer-vision>', 'CreationDate': '2014-03-18T23:43:32.437', 'FavoriteCount': '2', 'Id': '22781'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I need to make a recursive relationship for a function <code>f(m, n)</code> nonrecursive to make it more efficient and succinct in my code.</p>\n\n<p>I stumbled across an important recurrence relationship dealing with the number of vertices, edges, faces, and solids (<a href="http://en.wikipedia.org/wiki/Polytope" rel="nofollow">m-polytopes</a>) in an n-cube which is based off of a simpler algorithm for an n-simplex which uses Pascal\'s triangle:</p>\n\n<p>For a simplex:\nnCm gives you the number of m-polytopes (m = 1 for points, 2 for lines, 3 for faces) in an n-simplex (1-simplex is a line, 2-simplex is a triangle, 3-simplex is a tetrahedron).</p>\n\n<p>The pattern between the n-simplex m-polytopes and the n-cube m-polytopes are very similar:</p>\n\n<pre><code>Here is the n-cube up to 10\n10-polytopes:                                                            \n9-polytopes:                                                           1\n8-polytopes:                                                     1    16\n7-polytopes:                                               1    14   112\n6-polytopes:                                         1    12    84   448\n5-polytopes:                                   1    10    60   280  1120\n4-polytopes:                             1     8    40   160   560  1792\n3-polytopes:                       1     6    24    80   240   672  1792\n2-polytopes:                 1     4    12    32    80   192   448  1024\n1-polytopes:           1     2     4     8    16    32    64   128   256\nHere is the n-simplex up to 10\n10-polytopes:                                                            \n9-polytopes:                                                           1\n8-polytopes:                                                     1     9\n7-polytopes:                                               1     8    36\n6-polytopes:                                         1     7    28    84\n5-polytopes:                                   1     6    21    56   126\n4-polytopes:                             1     5    15    35    70   126\n3-polytopes:                       1     4    10    20    35    56    84\n2-polytopes:                 1     3     6    10    15    21    28    36\n1-polytopes:     1     1     2     3     4     5     6     7     8     9\n</code></pre>\n\n<p>And here is the c code that generated that:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\n#define TOP 10\n\n// nothing to see here\nint factorial(int n)\n{\n    if (n &lt; 2)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n// a recursive implementation for the number of \n// m-polytopes in an n-cube\nint ncubeRecursive(int n, int m)\n{\n    if (n == 0 &amp;&amp; m == 0)\n        return 1;\n    else if(n &lt; 0 || m &lt; 0)\n        return 0;\n    else\n    {\n        return (ncubeRecursive(n - 1, m - 1) + 2 * ncubeRecursive(n - 1, m));\n    }\n}\n// missing a nonrecursive algorithm\n// YOUR JOB TO FIX THIS\n\n\n// a recursive implementation for the number of\n// m-polytopes in an n-simplex\nint nsimplexRecursive(int n, int m)\n{\n    if (n == 0 &amp;&amp; m == 0)\n        return 1;\n    else if(n &lt; 0 || m &lt; 0)\n        return 0;\n    else\n    {\n        return (nsimplexRecursive(n - 1, m - 1) + nsimplexRecursive(n - 1, m));\n    }\n}\n// a nonrecursive algorithm\nint nsimplexNonrecursive(int n, int m)\n{\n    return factorial(n)/(factorial(n - m) * factorial(m));\n}\n\nint main()\n{\n    printf("Here is the n-cube up to %i\\n", TOP);\n    for (int n = TOP; n &gt; 0; --n)\n    {\n        printf("%i-polytopes:", n);\n        for (int m = 0; m &lt; TOP; ++m)\n        {\n            int val = ncubeRecursive(m, n);\n            if (val == 0)\n                printf("%6c", \' \');\n            else\n                printf("%6i", val);\n        }\n        printf("\\n");\n    }\n    printf("Here is the n-simplex up to %i\\n", TOP);\n    for (int n = TOP; n &gt; 0; --n)\n    {\n        printf("%i-polytopes:", n);\n        for (int m = 0; m &lt; TOP; ++m)\n        {\n            int val = nsimplexNonrecursive(m, n);\n            if (val == 0)\n                printf("%6c", \' \');\n            else\n                printf("%6i", val);\n        }\n        printf("\\n");\n    }\n\n    return 0;\n}\n</code></pre>\n\n<p>Does anyone here see a non-recursive pattern? I just don\'t know how to analyze a recursive relationship like this for a function that takes to inputs like <code>f(m, n)</code> instead of just <code>f(x)</code>. </p>\n', 'ViewCount': '44', 'ClosedDate': '2014-03-24T18:49:20.950', 'Title': 'How to make this recursive relationship nonrecursive?', 'LastActivityDate': '2014-03-20T18:03:35.190', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '22874', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15918', 'Tags': '<algorithms><combinatorics><computational-geometry><recurrence-relation>', 'CreationDate': '2014-03-20T15:28:41.100', 'Id': '22869'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I have points of self-intersecting polygon, its edges and also I am able to find points where it intersects itself using Bentley\u2013Ottmann algorithm.</p>\n\n<p>I planned to build non-self intersecting polygons by editing edges around intersection points, but problem is when you have two edges that intersect, you don't know which two of the four sides are inside, and which are outside of polygon.</p>\n\n<p>I could use ray crossing algorithm to resolve this, but it is too slow. Its time complexity is O(n), and I'd have two do it at least two times for every intersection point. So it would be extremely slow with around 200k points of polygon.</p>\n\n<p>So what I'm asking is, is there any faster way to divide self intersecting polygon into non-self intersecting ones.</p>\n\n<p>I need this because I am doing polygon triangulation. I already done sweep-line triangulation algorithm for triangulating non-self intersecting polygons with holes. So I just need tho have array of these polygons as input.</p>\n", 'ViewCount': '27', 'Title': 'Divide self-intersecting polygon', 'LastActivityDate': '2014-03-27T16:46:50.083', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16207', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-03-27T16:46:50.083', 'Id': '23137'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><strong>Context</strong></p>\n\n<p>In a 2-dimensional space, suppose $p_0$ is the origin - the lowest point of the Convex Hull (CH), and suppose $p_1, ..., p_{n-1}$ are sorted by their polar angles. When applying Graham scam, I always observe that $p_1$ and $p_{n-1}$ are vertices of the Convex Hull (CH). For instance, consider the <a href="http://kiharalab.org/3d-surfer/v1.0/convex_hull.gif" rel="nofollow">graph</a>, for which $p_{n-1}$ is $p_{12}$.</p>\n\n<p><strong>Question</strong></p>\n\n<p>How can I show this formally, that $p_{n-1} \\in CH$ and $p_1 \\in CH$ for all instances?</p>\n\n<p><strong>My answer</strong></p>\n\n<ul>\n<li><p>$p_1 \\in CH$ because $\\angle p_{n-1}p_0p_1$ must be a left turn, since $p_0$ is the lowest point and $p_1$ has the smallest polar angle above $p_0$; similarly,</p></li>\n<li><p>$p_{n-1} \\in CH$ because $\\angle p_{n-2}p_{n-1}p_{0}$ must be a left turn, since $p_0$ is the lowest point and $p_{n-1}$ has the largest polar angle above $p_0$.</p></li>\n</ul>\n\n<p>Does this sound like a convincing proof?</p>\n\n<p>Thank you in advance.</p>\n', 'ViewCount': '41', 'Title': 'Graham Scan - Why does the first and last points always belong to the convex hull?', 'LastEditorUserId': '657', 'LastActivityDate': '2014-03-27T18:41:48.727', 'LastEditDate': '2014-03-27T18:41:48.727', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15072', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-03-27T17:24:56.727', 'Id': '23142'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>This is my problem:</p>\n\n<pre><code>There are n collections of M geometric shapes (not necessarily disjoint).\nPick a single shape from each collection,\n     such that the n selected shapes are pairwise interior-disjoint.\n</code></pre>\n\n<p>This problem is NP-complete even when the shapes are restricted to axis-parallel squares (see this <a href="http://cstheory.stackexchange.com/questions/20297/is-set-packing-easier-when-the-sets-are-squares">cstheory.SE question</a> ). The naive algorithm is to check all $M^n$ combinations in the cartesian product. Assuming we can check intersection of two shapes in time O(1), the naive algorithm takes time $O(n\\cdot M^n)$. What heuristics can be used to reduce the run-time?</p>\n\n<p>NOTE: About 2 months ago I asked <a href="http://cs.stackexchange.com/questions/20126/a-heuristic-for-finding-a-maximum-disjoint-set">a related question</a>, in which there is only a single collection of candidate shapes. In that case, I used a geometerically-based divide-and-conquer heuristic, combined with branch-and-bound as recommended by D.W. Careful tuning lead to a dramatic reduction in run-time (50-80 times faster). </p>\n\n<p>However, I don\'t see a way to use divide-and-conquer in the current problem. I can partition the collections, but, a disjoint set in one partition won\'t necessarily be compatible with a disjoint set in the other partition (the sets might contain shapes from the same collection...)</p>\n\n<p>Can you suggest any heuristics, either divide-and-conquer or otherwise, for solving this problem more efficiently?</p>\n', 'ViewCount': '23', 'Title': 'A heuristic for finding a disjoint set of representatives', 'LastEditorUserId': '1342', 'LastActivityDate': '2014-03-28T13:28:05.197', 'LastEditDate': '2014-03-28T13:28:05.197', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<computational-geometry><heuristics>', 'CreationDate': '2014-03-28T13:13:57.203', 'Id': '23175'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><strong>Context</strong></p>\n\n<p>Consider this algorithm. If the set $\\{\\angle p_ip_{i+1}p_{i+2} : i=0,...,n-1\\}$  does not contain left and right turns, output "yes the polygon is convex"; otherwise, "no".</p>\n\n<p><strong>My answer</strong>  </p>\n\n<p>Consider this nonsimple polygon having 4 vertices; the algorithm above will output "yes" as the set of points does not contain both left and right turns, yet the polygon is not convex. Is this a good counterexample rendering the above algorithm incorrect? </p>\n\n<p><img src="http://i.stack.imgur.com/hHEck.png" alt="enter image description here"></p>\n\n<p>Thanks in advance.</p>\n', 'ViewCount': '37', 'Title': 'Show that this algorithm does not work for determining convex polygons', 'LastEditorUserId': '15072', 'LastActivityDate': '2014-03-29T11:42:03.130', 'LastEditDate': '2014-03-29T11:42:03.130', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '23202', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15072', 'Tags': '<algorithms><graph-theory><computational-geometry>', 'CreationDate': '2014-03-28T21:33:44.823', 'Id': '23193'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m writing a balanced $n_d$-Hyperoctree data structure in which the only fundamental operations I provide are edge traversals between parent and child nodes. I\'m storing the nodes using a Morton z-curve.</p>\n\n<p>Using only this information:</p>\n\n<ul>\n<li>The level of a node can be computed by traversing to the root of the tree. </li>\n<li>Neighbor searches are performed by traversing the tree up until a common parent is found, and then traversing the tree back down again. </li>\n</ul>\n\n<p>I can compute the following constants depending on the number of spatial dimensions $n_d$:</p>\n\n<ul>\n<li>the #of children of a node: $2^{n_d}$,</li>\n<li><p>the #of $n_d - m$ dimensional neighbors for each node (in 3D, $n_d - 1$ neighbors are faces, $n_d - 2$ neighbors are edges, $n_d - 3$ neighbors are corners):</p>\n\n<p>$2^{n_d} \\begin{pmatrix} n_d \\\\ m \\end{pmatrix}$ </p></li>\n</ul>\n\n<p>The neighbors sharing a $n_d - 1$-dimensional face with each Hypercube form the set $\\mathcal{N}_{n_d - 1}$. They are numerated within this set as follows. The neighbor at the negative side from the node center comes first, then it comes the neighbor at the positive side. That is, for $n_d = 1$ I just have $\\mathcal{N}_{n_d - 1} = \\lbrace 0, 1 \\rbrace = \\lbrace \\mathrm{Left}, \\mathrm{Right} \\rbrace$. </p>\n\n<ul>\n<li><p>In $n_d = 2$, $\\mathcal{N}_{n_d - 1} = \\lbrace 0, 1, 2, 3 \\rbrace = \\lbrace \\mathrm{L}, \\mathrm{R}, \\mathrm{Top}, \\mathrm{Bottom} \\rbrace$. </p></li>\n<li><p>In $n_d = 3$ it is $\\mathcal{N}_{n_d - 1} = \\lbrace 0, 1, 2, 3, 4, 5 \\rbrace = \\lbrace \\mathrm{L}, \\mathrm{R}, \\mathrm{T}, \\mathrm{B}, \\mathrm{Front}, \\mathrm{Back} \\rbrace$</p></li>\n</ul>\n\n<p>and so on. </p>\n\n<p>I haven\'t been able yet to generalize the algorithm for finding the $n_d - 1$ neighbor located at a given position to arbitrary dimensions. My current algorithm traverses the tree up until a common parent node is found. During the up traversal it stores the child positions w.r.t. their parents of the nodes traversed. Then it traverses the tree back down using the reversed path of the up traversal. The child positions are found by finding the siblings of the child positions during the up traversal in the inverted neighbor direction, which can be computed as:</p>\n\n<p>$\\mathrm{inverted\\_neighbor\\_position}_{n_d - 1}(p) = (p + 1) * (p \\% 2 = 0) + (p - 1) * (p \\% 2 \\neq 0)$</p>\n\n<p>However, to know if a common parent has been found, it checks if a parent node has a childe at a given relative position of another child which expressed as a neighbor position, i.e., it checks if a node has a sibling in a given neighbor direction within its parent. I have only a hand-coded stencil for this check and haven\'t been able to generalized.</p>\n\n<ul>\n<li><p>Can this check for a "common parent" be generalized to arbitrary dimensions? How?</p></li>\n<li><p>Example up to 3D: for a child and a neighbor position, returns the child position of the sibling:</p>\n\n<pre><code>// i means, there is no sibling for that child in that direction\n//0  1  2  3  4  5     &lt;&lt; nghbr position\n{ i, 1, i, 2, i, 4},  // child 0\n{ 0, i, i, 3, i, 5},  // child 1\n{ i, 3, 0, i, i, 6},  // child 2\n{ 2, i, 1, i, i, 7},  // child 3\n{ i, 5, i, 6, 0, i},  // child 4\n{ 4, i, i, 7, 1, i},  // child 5\n{ i, 7, 4, i, 2, i},  // child 6\n{ 6, i, 5, i, 3, i}   // child 7\n</code></pre></li>\n</ul>\n\n<p>Assuming that the $n_d - 1$ dimensional neighbors can be found:</p>\n\n<ul>\n<li><p>How can I find $n_d - m$ dimensional neighbors?</p>\n\n<ul>\n<li>Right now, I hand-coded traversals that perform $m$ times searches for $(n_d - 1)$ neighbors. Is there a general way to generate these traversals for $n_d$ dimensions and the $n_d - m$ neighbors?</li>\n</ul></li>\n<li><p>What is a suitable order for $n_d - m$ dimensional neighbors where $m &gt; 1$ ?</p></li>\n</ul>\n\n<p>Most of the research I\'ve found in the literature uses hand coded stencils for, 1,2,3 and 4 dimensions, but no general ways of generating these stencils. So if anyone can point me to relevant literature I would appreciate it.</p>\n', 'ViewCount': '50', 'Title': 'Finding nd - m dimensional neighbors for a given node within a balanced hyperoctree', 'LastEditorUserId': '16250', 'LastActivityDate': '2014-04-14T14:53:55.267', 'LastEditDate': '2014-04-14T14:53:55.267', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16250', 'Tags': '<algorithms><data-structures><computational-geometry>', 'CreationDate': '2014-03-28T21:36:29.753', 'Id': '23194'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there any algorithm which takes edges (given by its two end points), and determines in which cell (or cells) of grid it is?</p>\n\n<p>Grid has fixed dimensions and number of cells. Grid is represented by its cells with matrix. And every cell has list of edges that intersect that cell.</p>\n\n<p>Input is set of pair points, but I can also transform it in just set of points, or any other needed representation.\nOutput should be the mentioned grid with cells who contain list of edges that intersect that cell.</p>\n\n<p>Algorithm should be fast and robust, and by that I mean it covers special (degenerated) cases and that its time complexity is good.</p>\n\n<p>What I want to be able is to use that grid later for search, for example to answer me question like "Which cells does given edge AB(with end points A and B) intersect?" or "Give me all edges that intersect cell 12"(First row, second column).</p>\n', 'ViewCount': '44', 'Title': 'Algorithm for storing polygon edges into grid', 'LastEditorUserId': '16207', 'LastActivityDate': '2014-04-02T12:08:49.930', 'LastEditDate': '2014-04-02T12:08:49.930', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16207', 'Tags': '<reference-request><computational-geometry><search-algorithms>', 'CreationDate': '2014-04-01T16:03:33.280', 'Id': '23321'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there a standard way to check if two edges of a graph cross? I\'m having trouble coming up with an algorithm to do this, and any insight/intuition into how this can be done would be great. </p>\n\n<p>To be clear, here\'s an example: </p>\n\n<p><img src="http://i.stack.imgur.com/ANBWN.png" alt="enter image description here"></p>\n\n<p>The algorithm would ideally return that the edge shared by 7 and 8 crosses with that between 5 and 11. Similarly for 11 and 10, 8 and 9.</p>\n', 'ViewCount': '61', 'ClosedDate': '2014-04-04T12:30:08.293', 'Title': 'Determine if two edges of a graph cross?', 'LastEditorUserId': '683', 'LastActivityDate': '2014-04-02T18:27:36.373', 'LastEditDate': '2014-04-02T18:23:33.313', 'AnswerCount': '1', 'CommentCount': '11', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16389', 'Tags': '<computational-geometry>', 'CreationDate': '2014-04-02T17:14:25.537', 'Id': '23352'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m trying to find a linear solution with a small constant factor but I\'m not sure what to search for, or even how to succinctly describe it.  The best I\'ve come up with is:</p>\n\n<blockquote>\n  <p>Given a set of rectangles on a plane find the set(s) which allow the same <code>y</code> value for some largest contiguous set of <code>x</code> values.  All rectangles are axis aligned, the same width, and do not overlap.</p>\n</blockquote>\n\n<p>I find this much easier to visualize so below is an example problem instance and solution.</p>\n\n<p><img src="http://i.stack.imgur.com/uKphj.png" alt="Longest horizontal intersection of contiguous blocks"></p>\n\n<p>Edit:</p>\n\n<p>We have a linear solution that has a constant factor on the order $y_{max} - y_{min}$ which can be pretty big.  Here is an idea of the algorithm I\'ve been trying to work out since originally posting this.</p>\n\n<ul>\n<li>Rectangles are already sorted by $x$ position.</li>\n<li>Maintain an ordered list $I$ of the intervals currently allowing a contiguous line.</li>\n<li>Maintain two variables $(i_{min}, i_{max})$ which are the min and max\n$y$ value of the current intersection (in the example solution $(5, 5.25)$).</li>\n<li>Iterate from $x_0$ to $x_{max}$</li>\n<li><p>At each $x$ position test if any of the current rectangle(s) intersect $(i_{min}, i_{max})$.</p>\n\n<ul>\n<li>1) If yes, add the rectangle to $I$ and update $(i_{min}, i_{max})$.</li>\n<li>2) If no, find the longest suffix of $I$ s.t. it allows overlap with current rectangle.</li>\n<li>3) If no suffix exists or the current $x$ position has no rectangles skip to the next $x$ position with rectangles and reinitialize $I$, and $(i_{min}, i_{max})$.</li>\n</ul></li>\n<li><p>In #2 and #3 save the current $I$ if it allows the widest contiguous line so far.</p></li>\n</ul>\n', 'ViewCount': '51', 'Title': 'What is this problem? Largest set of contiguous x values for which the same y value can be held', 'LastEditorUserId': '527', 'LastActivityDate': '2014-04-03T00:34:55.823', 'LastEditDate': '2014-04-02T23:59:58.480', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '527', 'Tags': '<algorithms><data-structures><computational-geometry><intervals>', 'CreationDate': '2014-04-02T19:00:40.687', 'FavoriteCount': '1', 'Id': '23361'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>On the following picture, we have overlapping polygons: we know the positions of vertices and the edges for each polygons, and the intersections are exactly known (vertices at the intersection are represented on the figure). Is it possible to \'partition\' the domain spanned by the union of these polygons into \'disjoint\' polygons (with contacts only at the boundary)? To be more precise, I\'d like to associate to all edges the surfaces for which the edge is contained in its boundary.</p>\n\n<p><img src="http://i.imgur.com/rQ3uxmf.png" alt="try"></p>\n\n<p>Please advise if I\'m not clear enough and thanks in advance for any suggestions!</p>\n', 'ViewCount': '25', 'Title': 'Partition overlapping polygons', 'LastActivityDate': '2014-04-04T13:08:20.263', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16439', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-04-04T11:38:42.093', 'FavoriteCount': '1', 'Id': '23416'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The <a href="http://en.wikipedia.org/wiki/K-d_tree" rel="nofollow">link</a> in wikipedia about kd-trees store points in the inner nodes. I have to perform NN queries and I <strong>think</strong> (newbie here), I am understanding the concept.</p>\n\n<p>However, I was said to study Kd-trees from Computational Geometry Algorithms and Applications (De Berg, Cheong, Van Kreveld and Overmars), section 5.2, page 99. The main difference I can see is that Overmars places the splitting data in the inner nodes and the actual points of the dataset in the leaves. For example, in 2D, an inner node will hold the splitting line.</p>\n\n<p>Wikipedia on the other hand, seems to store points in inner nodes and leaves (while Overmars only on leaves).</p>\n\n<p>In this case, how do we perform nearest neighbour search? Moreover, why there is this difference?</p>\n', 'ViewCount': '36', 'Title': 'kd-tree stores points in inner nodes? If yes, how to search for NN?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-10T14:43:00.437', 'LastEditDate': '2014-04-10T14:43:00.437', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16638', 'Tags': '<data-structures><computational-geometry><search-algorithms><search-trees><nearest-neighbour>', 'CreationDate': '2014-04-10T13:20:27.113', 'Id': '23636'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I read that in a 2D space, the two points farthest away must be in the convex hull (CH).</p>\n\n<p>Intuitively, I can see why. If the two farthest points are not in the convex hull, then there must be a point that is outside the convex hull (contradiction). I know that a vertex of CH has two adjacent edges that converge at that point, which is of further distance from any other vertex or point within CH, than  the non-vertices beside it. What I mean is shown in the image below: a vertex (p) with two adjacent edges,</p>\n\n<p><img src="http://i.stack.imgur.com/AU0YX.png" alt="enter image description here"></p>\n\n<p><strong>Problem is</strong>, I don\'t see how I can prove this more formally.  I am looking for a more concrete proof.</p>\n\n<p>Thank you in advance.</p>\n', 'ViewCount': '62', 'Title': 'Why are the two farthest points vertices of the Convex Hull?', 'LastEditorUserId': '15072', 'LastActivityDate': '2014-04-21T19:03:15.407', 'LastEditDate': '2014-04-10T15:55:19.067', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23647', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15072', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-04-10T15:48:47.490', 'Id': '23646'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Has the following problem been studied before? If yes, what approaches/algorithms were developed to solve it?</p>\n\n<blockquote>\n  <p><strong>Problem ("Maximum Stacking Height Problem")</strong></p>\n  \n  <p>Given $n$ polygons, find their stable, non-overlapping arrangement\n  that <strong>maximizes their stacking height</strong> on a fixed floor under the\n  influence of gravity.</p>\n</blockquote>\n\n<p><br></p>\n\n<h2>Example</h2>\n\n<p>Three polygons:</p>\n\n<p><img src="http://i.stack.imgur.com/SbCt3.png" alt="enter image description here"></p>\n\n<p>and three of their infinitely many stable, non-overlapping arrangements, with different stacking heights:</p>\n\n<p><img src="http://i.stack.imgur.com/h938i.png" alt="enter image description here"></p>\n\n<p><br></p>\n\n<h2>Clarifications</h2>\n\n<ul>\n<li>All polygons have uniform mass and equal density</li>\n<li>Friction is zero</li>\n<li>Gravity is acting on every point into the downwards direction (i.e. the force vectors are all parallel)</li>\n<li>A configuration is not considered stable if it rests on an unstable equilibrium point (for example, the green triangle in the pictures can not balance on any of its vertices, even if the mass to the left and the right of the balance point is equal)</li>\n<li>To further clarify the above point: A polygon is considered unstable ("toppling") <em>unless</em> it rests on at least one point <em>strictly to the left</em> <strong>and</strong> at least one point <em>strictly to the right</em> of its center of gravity (this definition greatly simplifies simulation and in particular makes position integration etc. unnecessary for the purpose of evaluating whether or not an arrangement is stable.</li>\n<li>The problem in its "physical" form is a continuous problem that can only be solved approximately for most cases. <strong>To obtain a discrete problem that can be tackled algorithmically, constrain both the polygon vertices and their placement in the arrangement to suitable lattices.</strong></li>\n</ul>\n\n<p><br></p>\n\n<h2>Notes</h2>\n\n<ul>\n<li>Brute force approaches of any kind are clearly infeasible. Even with strict constraints on the placement of polygons inside the lattice (such as providing a limited region "lattice space") the complexity simply explodes for more than a few polygons.</li>\n<li>Iterative algorithms must bring some very clever heuristics since it is easy to construct arrangements where removing any single polygon results in the configuration becoming unstable and such arrangements are unreachable by algorithms relying on every intermediate step being stable.</li>\n<li>Since the problem smells at least NP- but more likely EXPTIME-complete in the total number of vertices, even heuristics would be of considerable interest. <strong>One thing that gives hope is the fact that most humans will recognize that the third arrangement in the example is optimal.</strong></li>\n</ul>\n', 'ViewCount': '46', 'Title': 'Maximum Stacking Height Problem', 'LastActivityDate': '2014-04-10T18:20:35.550', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '16652', 'Tags': '<algorithms><time-complexity><optimization><computational-geometry><heuristics>', 'CreationDate': '2014-04-10T17:14:32.580', 'Id': '23651'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '265', 'Title': 'Possible to connect arbitrary number of dots without intersections?', 'LastEditDate': '2014-04-11T19:03:57.950', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16060', 'FavoriteCount': '0', 'Body': "<p>A (now closed) question on SO made me think about the following problem:</p>\n\n<blockquote>\n  <p>Given an arbirtary number of points (2D), draw a path that consists of\n  straight lines between points, visits each point exactly once and does\n  not intersect with itself.</p>\n</blockquote>\n\n<p>I came to the conclusion that this is easy if I can chose starting and ending point:</p>\n\n<pre><code>sort points by their x coordinate\nuse point with mininmal x coordinate as starting point\nconnect remaining points in left-to-right order\n</code></pre>\n\n<p>If there are multiple points with the same x value, start with the point with minimal y value and go bottom-up. This way, no intersections can occur.</p>\n\n<p>Now my question is: <strong>is this still possible if start and end point are fixed?</strong>\nI assume that there are well known algorithms for this problem, but my search didn't reveal any useful results.</p>\n\n<p>As @hyde points out, there is no solution if more than two points are on a straight line and start/end points are not the outermost points.</p>\n", 'Tags': '<graphs><computational-geometry>', 'LastEditorUserId': '16060', 'LastActivityDate': '2014-04-11T19:12:40.240', 'CommentCount': '3', 'AcceptedAnswerId': '23672', 'CreationDate': '2014-04-11T12:35:50.710', 'Id': '23671'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there any way to determine inner angle of twisted polygon? (Here\'s a picture of "normal" and "twisted" polygon <a href="http://courses.be.washington.edu/ARCH/481/1.Tapestry%20Reader/1.Data/6.Problems/graphics.invis/fulltwist.gif" rel="nofollow">http://courses.be.washington.edu/ARCH/481/1.Tapestry%20Reader/1.Data/6.Problems/graphics.invis/fulltwist.gif</a> )</p>\n\n<p>I know how to determine inner angle of polygon if I know its orientation (CW or CCW), however twisted polygon changes orientation after intersection, so if I check angle for CCW orientation, the CW part will have inverse angle values.</p>\n\n<p>I thought about using winding numbers algorithm and see if values are negative or positive, but it is too slow to check that for every angle.</p>\n', 'ViewCount': '27', 'Title': 'Determine inner angles of twisted polygon', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-12T15:03:13.590', 'LastEditDate': '2014-04-12T15:03:13.590', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16207', 'Tags': '<computational-geometry>', 'CreationDate': '2014-04-11T14:06:59.680', 'Id': '23675'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm looking for a sweep line algorithm for finding all intersections in a set of line segments that doesn't necessarily respects the general position constraint of Bentley-Ottman's algorithm (taken from Wikipedia):</p>\n\n<ul>\n<li>No two line segment endpoints or crossings have the same x-coordinate</li>\n<li>No line segment endpoint lies upon another line segment</li>\n<li>No three line segments intersect at a single point.</li>\n</ul>\n\n<p>Is there any sweep line solution to this problem? If not, is there any other algorithm that solves this problem in O((n+k)log(n))?</p>\n", 'ViewCount': '17', 'Title': 'Is there a general-case sweep line algorithm for line segment intersection?', 'LastActivityDate': '2014-04-17T16:19:41.867', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11109', 'Tags': '<computational-geometry>', 'CreationDate': '2014-04-17T12:09:40.943', 'Id': '23886'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Say I want to compute a covnex hull of given points on the plane. I would like to write an algorithm, that only compares the points and doesn't do any arithmetic operations. Wikipedia states, that:</p>\n\n<blockquote>\n  <p>The standard $\\Omega(n \\log n)$ lower bound for sorting is proven in the decision tree model of computing, in which only numerical comparisons but not arithmetic operations can be performed; however, in this model, convex hulls cannot be computed at all. </p>\n</blockquote>\n\n<p>Why is it so? I can't find any justification for it anywhere, I know it to be intuitively true, but how come it's a necessity?</p>\n", 'ViewCount': '331', 'Title': "Convex Hull algorithm - why it can't be computed using only comparisons", 'LastEditorUserId': '657', 'LastActivityDate': '2014-04-18T14:32:41.873', 'LastEditDate': '2014-04-18T14:15:34.753', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23911', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16876', 'Tags': '<algorithms><computational-geometry><computation-models>', 'CreationDate': '2014-04-18T11:55:18.920', 'Id': '23910'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '52', 'Title': 'Algorithm for computing volume of union or intersection of n-dimensional convex polytopes given their facets?', 'LastEditDate': '2014-04-21T01:48:48.920', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16919', 'FavoriteCount': '0', 'Body': u'<p>I\'ve googled this problem somewhat pretty extensively, and all the relevant literature understandably deals with 2-d or 3-d cases, rather than the n-d case.</p>\n\n<p>EDIT: Yes, \u211d<sup>n</sup>. I\'ve done many searches combining terms like union, intersection, volume, convex hulls, polytope, etc. I\'ve come across papers like <a href="http://www.cs.princeton.edu/~chazelle/pubs/IntersectThreeDimConvexPolyhedra.pdf" rel="nofollow">this</a> and <a href="http://kam.mff.cuni.cz/~hansraj/publications/minkowski_dcg.pdf" rel="nofollow">this</a>. My math and CS background is weak, but I can tell from the latter paper that this is a difficult problem that I am after.</p>\n\n<p>I appreciate both answers given, unless I misunderstand (probable), I\'m not sure that they answer my question? The first answer is just about finding the volume of a polytope given its facets or vertices. I\'m aware of algorithms to do so. The second answer may be more on track, but it still raises the question of how to determine IF two polytopes intersect, and where?</p>\n\n<p>Thanks, everyone, for your help so far. </p>\n', 'Tags': '<computational-geometry>', 'LastEditorUserId': '16919', 'LastActivityDate': '2014-04-22T03:04:28.360', 'CommentCount': '1', 'AcceptedAnswerId': '23947', 'CreationDate': '2014-04-19T20:25:12.457', 'Id': '23942'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given $n$ points $x_1, x_2, ..., x_n \\in \\mathbb{R}^k$, where $\\mathbb{R}^k$ can be high dimensional. Is it possible to devise a fast algorithm </p>\n\n<p>(1) Preparation: first take the n points as an input, do whatever preprocessing necessary. </p>\n\n<p>(2) Query: for each query $f_i = w^\\top x$ being a hyperplane and a constant $b$, find the subset of points $\\{x_i | w^\\top x_i \\geq b\\}$.</p>\n\n<p>such that the asymptotic complexity for the query is less than $\\Theta(k \\cdot n)$ ?</p>\n', 'ViewCount': '40', 'Title': 'Fast algorithm to find points on one side of hyperplane?', 'LastActivityDate': '2014-04-21T19:33:24.670', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '24003', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '848', 'Tags': '<algorithms><complexity-theory><computational-geometry>', 'CreationDate': '2014-04-20T20:49:00.997', 'FavoriteCount': '1', 'Id': '23961'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a set of vertices $V$ and a set of segments $S$. I want to know whether a segment in the set $S$ is <em>Delaunay</em> against the vertices in $V$.</p>\n\n<p>I would like to state my assumed definition of a <em>Delaunay edge</em>: An edge is <em>Delaunay</em>, iff there exists a circumsphere of its endpoints not containing any other vertex <em>inside</em> it. </p>\n\n<p>I would like to know <em>practical</em> approaches/algorithms for such <em>Delaunay-edge</em> test.</p>\n', 'ViewCount': '45', 'Title': 'Practical algorithm for testing whether an edge is Delaunay', 'LastEditorUserId': '2205', 'LastActivityDate': '2014-04-29T10:10:48.570', 'LastEditDate': '2014-04-29T08:04:32.033', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15154', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-04-29T07:23:14.200', 'Id': '24215'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m presented with the question on the practice exam:</p>\n\n<blockquote>\n  <p>Sketch the curve and control points for the cubic B-spline basis\n  function N^3_2 over the knot sequence with 8 knots, full multiplicity\n  at the ends, and simple knots in between.</p>\n</blockquote>\n\n<p>There is almost no information about it in the book. I understand what a cubic B-spline curve is, but I\'m not sure I understand the basis function. In the "N^3_2", I\'m assuming the "3" is the degree, but I don\'t know what the "2" represents. The knot sequence should be something like:</p>\n\n<p>|||-----|-----|-----|||</p>\n\n<p>As I understand it, but what is the final sketch supposed to be?</p>\n\n<p>This is for one of my Computer Science classes, but if someone knows of a better forum, please let me know. </p>\n', 'ViewCount': '12', 'Title': 'How do you sketch a B-spline basis function?', 'LastEditorUserId': '17226', 'LastActivityDate': '2014-04-30T20:37:21.147', 'LastEditDate': '2014-04-30T20:37:21.147', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17226', 'Tags': '<computational-geometry>', 'CreationDate': '2014-04-30T19:11:32.253', 'Id': '24272'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Assume that I have a set of coplanar points $P = \\{p_1, p_2, ... , p_n\\}$ \nThe equation of the plane is unknown.\n$\\forall p_i,p_j \\in P$, pairwise euclidian distance $d(p_ip_j)$ is known. </p>\n\n<p>And I have a set of points of whose coordinates are known $Q = \\{q_1, q_2, ..., q_m\\}$</p>\n\n<p>If I know some of the pairwise distances $d(pq)$ $p \\in P$, $q \\in Q$;</p>\n\n<p>At least how many $d(pq)$ distance measurements do I need to find the equation of the plane that points in $P$ lie on?</p>\n', 'ViewCount': '21', 'Title': 'Localizing a plane in 3-D using distance geometry', 'LastEditorUserId': '17185', 'LastActivityDate': '2014-04-30T22:34:52.150', 'LastEditDate': '2014-04-30T22:34:52.150', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17185', 'Tags': '<algorithms><computational-geometry>', 'CreationDate': '2014-04-30T21:46:58.557', 'Id': '24276'}}