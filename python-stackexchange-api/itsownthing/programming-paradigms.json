{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I would like to know in which classification is the R programming language. It has elements of the imperative paradigm and object oriented paradigm (some things like that even a number is an object and they can be freely mixed). I am not quite sure if it has functional programming characteristics. So it can be considered a scripting language?</p>\n\n<p>What would be its classification in one of the paradigms?</p>\n\n<p>R can do tasks in batches so it can be considered also a scripting language, is that so?</p>\n', 'ViewCount': '208', 'Title': 'What would be the classification of R according to paradigms?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-28T09:48:35.097', 'LastEditDate': '2013-01-19T18:07:24.590', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '6430', 'Tags': '<programming-languages><programming-paradigms>', 'CreationDate': '2013-01-15T15:59:14.183', 'Id': '8948'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>FRP is about streaming events and behaviours through pure functions. The Actor model - at least, as implemented in Akka - is about streaming immutable messages (which can be considered to be discrete events) through potentially impure objects, called actors.</p>\n\n<p>So on the surface they seem related.</p>\n\n<p>What else can we say about how they related? Also, what can say about which of them might be more appropriate for different application domains?</p>\n', 'ViewCount': '1008', 'Title': 'How do Functional Reactive Programming and the Actor model relate to each other?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-19T18:05:36.947', 'LastEditDate': '2013-01-19T18:05:36.947', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1617', 'Tags': '<distributed-systems><functional-programming><programming-paradigms>', 'CreationDate': '2013-01-19T10:45:05.057', 'FavoriteCount': '5', 'Id': '9038'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '536', 'Title': 'Why do we use persistent data structures in functional programming?', 'LastEditDate': '2013-02-24T17:51:40.223', 'AnswerCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '6466', 'FavoriteCount': '1', 'Body': '<p>Functional programming employs persistent data structures and immutable objects. My question is why is it crucial to have such data structures here? I want to understand <strong>at a low level</strong> what would happen if the data structure is not persistent? Would the program crash more often? </p>\n', 'Tags': '<data-structures><functional-programming><programming-paradigms>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-24T17:51:40.223', 'CommentCount': '1', 'AcceptedAnswerId': '10006', 'CreationDate': '2013-02-21T07:10:16.707', 'Id': '10002'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The theorem of structured programming says that any algorithm can be expressed by those three control structures:</p>\n\n<ol>\n<li>Sequence</li>\n<li>Selection</li>\n<li>Iteration</li>\n</ol>\n\n<p>Isn't it possible to rewrite any loop using a finite sequence of statements and choice between statements? Isn't this what compilers do? Can't we thus omit the third structure and stay equally expressive?</p>\n", 'ViewCount': '27', 'Title': 'Can a loop be expressed by only the sequence of statements and the choice of statements?', 'LastActivityDate': '2013-09-23T14:57:06.717', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8623', 'Tags': '<programming-languages><computation-models><programming-paradigms>', 'CreationDate': '2013-09-23T14:05:04.723', 'Id': '14553'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A <a href="http://www.youtube.com/watch?v=sqV3pL5x8PI" rel="nofollow">YouTube video</a> I was watching explained the differences between Imperative and Functional programming by demonstrating how the numbers from <code>1</code> to <code>10</code> are summed up in Java and in Haskell respectively. </p>\n\n<p>In Java, you must explicitly state each step and assign the result of each step to a variable - something like the following</p>\n\n<pre><code>int total = 0;\n     for (int i = 1; i &lt;= 10; i++){\n         total = total + i;\n     }\nreturn total;\n</code></pre>\n\n<p>In Haskell, you can simply say:</p>\n\n<pre><code>sum(1..10)\n</code></pre>\n\n<p><strong>My question is:</strong> There obviously is something going on in the background of a Functional language, and that something must be some sort of Imperative process. \nIt seems like Functional Languages are really just some sort of Imperative-Language APIs.\nFor example, I can create part of a functional language by defining a method <code>sum(int start, int end)</code> in Java. Did I really create a new type of language right there, or did I just define a set of Imperative method calls that hide imperative instructions from you?</p>\n\n<p>I hope it\'s clear what I am struggling to understand.</p>\n', 'ViewCount': '133', 'Title': "Isn't Functional Programming just Imperative Programming in disguise?", 'LastActivityDate': '2013-12-03T22:36:58.430', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '18578', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4348', 'Tags': '<programming-languages><functional-programming><programming-paradigms><imperative-programming>', 'CreationDate': '2013-12-03T12:16:26.830', 'FavoriteCount': '1', 'Id': '18570'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When I started to learn about imperative programming and declarative programming it raised many doubts, like, how are structured, modular and object-oriented programming classified: declarative or imperative?</p>\n', 'ViewCount': '41', 'ClosedDate': '2014-02-25T11:37:25.930', 'Title': 'How are programming paradigms classified?', 'LastEditorUserId': '31', 'LastActivityDate': '2014-02-25T05:40:51.600', 'LastEditDate': '2014-02-25T05:40:51.600', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14998', 'Tags': '<programming-languages><object-oriented><programming-paradigms>', 'CreationDate': '2014-02-24T19:26:47.200', 'Id': '21998'}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have studied the book <a href="http://www.amazon.in/C-Demystified-Jeff-Kent/dp/0072253703" rel="nofollow">"C++ Demystified"</a>. Now I have started to read <a href="http://rads.stackoverflow.com/amzn/click/1878739069" rel="nofollow"><em>"Object-Oriented Programming in Turbo C++ first edition (1st edition)"</em></a> by Robert Lafore. I do not have any knowledge of programming which is beyond these books. This book might be outdated because it\'s 20 years old. I do have the latest edition, I am using the old because I like it, mainly I am just studying the basic concepts of OOP used in C++ through the first edition of Lafore\'s book.  </p>\n\n<p>Lafore\'s book emphasizes that "OOP" is only useful for <em>larger</em> and <em>complex</em> programs. It is said in every OOP book (also in Lafore\'s book) that procedural paradigm is prone to errors e.g. the global data as easily vulnerable by the functions. It is said that programmer can make <em>honest</em> errors in procedural languages e.g. by making a function that accidentally corrupts the data.    </p>\n\n<p>Honestly speaking I am posting my question because I am not grasping the explaination given in this book: <a href="http://rads.stackoverflow.com/amzn/click/0672323087" rel="nofollow">Object-Oriented Programming in C++ (4th Edition)</a> I am not grasping these statements written in Lafore\'s book:</p>\n\n<blockquote>\n  <p>Object-oriented programming was developed because limitations were discovered in\n  earlier approaches to programming....\n  As programs grow ever larger and more complex, even the structured programming approach begins to show signs of strain... \n  ....Analyzing the reasons for these failures reveals that there are weaknesses in the procedural paradigm itself. No matter how well the structured programming approach is implemented, large programs become excessively complex....\n  ...There are two related problems. First, functions have unrestricted access to global data. Second, unrelated functions\n  and data, the basis of the procedural paradigm, provide a poor model of the real world...</p>\n</blockquote>\n\n<p>I have studied the book "dysmystified C++" by Jeff Kent, I like this book very much, in this book mostly procedural programming is explained. I do not understand why procedural(structured) programming is weak!</p>\n\n<p>Lafore\'s book explains the concept very nicely with some good examples. Also I have grasped an intuition by reading Lafore\'s book that OOP is better than procedural programming but I am curious to know how exactly in practice procedural programming is weaker than OOP.</p>\n\n<p>I want to see myself what are the practical problems that one would face in procedural programming, how the OOP will make the programming easier. I think I will got my answer just by reading Lafore\'s book contemplatively but I want to see with my own eyes the problems in the procedural code, I want to see how the OOP style code of a program removes the foregoing errors that would happen if the same program were to be written using procedural paradigm.</p>\n\n<p>There are many features of OOP and I understand it is not possible for someone to explain me how all these features removes the foregoing errors that would generate by writing the code in procedural style.</p>\n\n<p>So, here is my question:</p>\n\n<blockquote>\n  <p>Which limitations of procedural programming does OOP address and how does it effectively remove these limitations in practice?</p>\n</blockquote>\n\n<p>In particular, are there examples for programs which are hard to design using the procedural paradigm but are easily designed using OOP?</p>\n', 'ViewCount': '219', 'Title': 'What problems of procedural programming does OOP solve in practice?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-28T04:02:51.607', 'LastEditDate': '2014-03-25T08:30:22.733', 'AnswerCount': '6', 'CommentCount': '5', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '11633', 'Tags': '<object-oriented><programming-paradigms><procedural-programming>', 'CreationDate': '2014-03-20T14:47:25.803', 'FavoriteCount': '2', 'Id': '22867'}