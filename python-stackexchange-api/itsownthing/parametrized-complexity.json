325_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am currently confused by the following situation: </p>\n\n<p>1) The metric $k$-center problem is inapproximable in polynomial time within $2-\\epsilon$ unless $P=NP$. <br>\n2) The metric $k$-center problem can approximated within $1+\\epsilon$ in time $O(k^{O(k/ \\epsilon)})$</p>\n\n<p>Did I just win a million dollars or why isn\'t this a contradiction?\nI guess my confusion comes from the unprecise statement  "in polynomial time" in 1).</p>\n', 'ViewCount': '151', 'Title': '$1+\\epsilon$ approximation for inapproximable problems', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:15:42.897', 'LastEditDate': '2013-05-10T12:15:42.897', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '10302', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7159', 'Tags': '<complexity-theory><np-complete><approximation><p-vs-np><parametrized-complexity>', 'CreationDate': '2013-03-05T19:27:39.220', 'Id': '10300'},325_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Do you know of any kind of decomposition of graphs that involves centers, especially in the context of parametrized complexity? If so, please provide some reference. If not, do you see any reason (other than the potentially large size of centers) why such a notion isn\'t fruitful (e.g. subsumed by other notion)?</p>\n\n<p>I\'m looking for something similar to this:</p>\n\n<p>Let $G=(V,E)$ be an undirected graph. Its <em>central decomposition</em> is</p>\n\n<ul>\n<li>If $G$ is not connected: the set of central decompositions of its connected components.</li>\n<li>If $G$ is self-centered (radius equals diameter): $G$</li>\n<li>If $G$ is connected and not self-centered and its center is $C$: the pair $(I,O)$ where $I$ is the central decomposition of $G[C]$ and $O$ is the central decomposition of $G[V\\setminus C]$ (induced subgraphs of center and its complement)</li>\n</ul>\n\n<p>Its <em>central width</em> shall be the size of largest self-centered graph which appears in its central decomposition.</p>\n\n<p>The notion may also use other concepts (like complements, trees etc.), but it should use centers recursively. There is no need for uniqueness.</p>\n\n<p>I\'m <strong>not looking for</strong> e.g. <em>path distance decompositions</em> (see <a href="http://igitur-archive.library.uu.nl/math/2007-0104-200209/bodlaender_97_isomorphism.pdf" rel="nofollow">here</a>) where the root is the center, i.e. a map $d$ of a path $\\{p_0,\\dots,p_k\\}$ to $V$ where $d(p_i)=\\{v\\in V\\mid \\min_{c \\in C}\\mathrm{dist}(v,c) = i\\}$ ($C$ being the center of $G$).</p>\n', 'ViewCount': '58', 'Title': 'Decomposition of graphs that uses centers', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-04-03T15:31:28.617', 'LastEditDate': '2013-04-03T15:31:28.617', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '6716', 'Tags': '<complexity-theory><graph-theory><reference-request><parametrized-complexity>', 'CreationDate': '2013-03-29T21:09:20.307', 'Id': '10903'},325_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have seen some problems that are NP-hard but polynomially solvable in fixed dimension.</p>\n\n<p>Examples, I think, are Knapsack that is polynomial time solvable if the number of items is fixed and Integer Linear Programming with fixed number of variables or constraints by Lenstras result.</p>\n\n<p>Questions:</p>\n\n<p>What are other examples of NP-hard problems that become polynomial time solvable if the dimension is fixed?</p>\n\n<p>Are there problems for which this is not the case?</p>\n\n<p>Is this always the case for problems that admit an FPTAS/pseudo-polynomial time algorithm such as Knapsack?</p>\n', 'ViewCount': '441', 'Title': 'NP complete problems that are solvable in polynomial time if the input (e.g. number of variables) is fixed?', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:17:04.700', 'LastEditDate': '2013-05-10T12:17:04.700', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11762', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<np-complete><optimization><decision-problem><linear-programming><parametrized-complexity>', 'CreationDate': '2013-05-03T15:30:53.200', 'Id': '11761'},325_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Assume there exists some algorithm that solves vertex cover problem in time polynomial in terms of $n$ and exponential for $k$ with the run time that looks like this $O(k^2 55^k n^3)$. Can we claim that independent set can also be solved in time polynomial in terms of $n$ and exponential in terms of $k$ ? ($k$ here stands for the minimum size of an independent set) </p>\n', 'ViewCount': '831', 'Title': 'Reduction from Vertex Cover to an Independent Set problem', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:12:20.603', 'LastEditDate': '2013-05-10T12:12:20.603', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11905', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7336', 'Tags': '<graphs><np-complete><np><p-vs-np><parametrized-complexity>', 'CreationDate': '2013-05-08T23:39:30.063', 'Id': '11904'},325_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '217', 'LastEditorDisplayName': 'user742', 'Title': 'Find which vertices to delete from graph to get smallest largest component', 'LastEditDate': '2013-09-20T09:28:39.900', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '8770', 'FavoriteCount': '1', 'Body': '<p>Given a graph $G = (V, E)$, find $k$ vertices $\\{v^*_1,\\dots,v^*_k\\}$, which removal would result in a graph with smallest largest component.  </p>\n\n<p>I assume for large $n = |V|$ and large $k$ the problem is difficult (NP-hard), but I am interested in small values of $k$ ($k \\in \\{1, 2, 3, 4\\}$).</p>\n\n<p>For $k = 1$, I think it is possible to find best vertex $\\{v^*_1\\}$ to remove by performing single depth-first-search of the graph (i.e., checking articulation points).</p>\n\n<p>For $k = 2$, it would be possible to find best vertices $\\{v^*_1, v^*_2\\}$ by performing $n$ depth-first searches (each of them for graph $G_i = G / \\{v_i\\}$). A similar approach could be applied in the case $k &gt; 2$.</p>\n\n<p>I wonder if there is any better solution than that.</p>\n\n<p>(Related: <a href="http://cs.stackexchange.com/questions/12783/find-min-no-of-vertices-to-remove-to-make-graph-max-component-k">counting the minimum number of vertices without necessarily enumerating them</a>)</p>\n', 'Tags': '<algorithms><complexity-theory><graph-theory><parametrized-complexity>', 'LastActivityDate': '2014-03-30T17:24:55.313', 'CommentCount': '4', 'AcceptedAnswerId': '12809', 'CreationDate': '2013-06-20T14:40:37.167', 'Id': '12789'},325_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '162', 'LastEditorDisplayName': 'user742', 'Title': 'Why are all problems in FPTAS also in FPT?', 'LastEditDate': '2013-09-08T10:00:18.023', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2131', 'FavoriteCount': '1', 'Body': '<p>According to <a href="https://en.wikipedia.org/wiki/Polynomial-time_approximation_scheme" rel="nofollow">the Wikipedia article on polynomial-time approximation schemes</a>:</p>\n\n<blockquote>\n  <p>All problems in FPTAS are fixed-parameter tractable.</p>\n</blockquote>\n\n<p>This result surprises me - these classes seem to be totally different from one another.  FPTAS characterizes problems by how easy they are to approximate, while FPT characterizes problems by their difficulty relative to some parameter.  Unfortunately, Wikipedia (as of the time I\'m asking this question) doesn\'t provide a citation for this.</p>\n\n<p>Is there a standard proof of this result?  Or is there a source I could consult to learn more about this connection?</p>\n', 'Tags': '<complexity-theory><reference-request><approximation><parametrized-complexity>', 'LastActivityDate': '2013-09-08T10:00:18.023', 'CommentCount': '5', 'AcceptedAnswerId': '13681', 'CreationDate': '2013-08-08T21:07:15.470', 'Id': '13679'},325_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '92', 'Title': "Courcelle's Theorem: Looking for papers", 'LastEditDate': '2013-10-22T09:51:25.143', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1382', 'FavoriteCount': '1', 'Body': '<p>I am looking for an easy and introductory paper on the proof of <a href="http://en.wikipedia.org/wiki/Courcelle%27s_theorem">Courcelle\'s Theorem</a>. I am also interested in its connection to <a href="http://en.wikipedia.org/wiki/Parameterized_complexity">parameterized complexity</a> regarding the <a href="http://en.wikipedia.org/wiki/Treewidth">treewidth</a>.</p>\n\n<p>I am only a beginner in this field.</p>\n\n<p>Any suggestions?</p>\n', 'Tags': '<complexity-theory><graph-theory><reference-request><discrete-mathematics><parametrized-complexity>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-12T21:25:05.823', 'CommentCount': '0', 'AcceptedAnswerId': '16326', 'CreationDate': '2013-10-22T09:20:33.627', 'Id': '16324'},325_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have been attempting to learn parameterized complexity on my own, and decided to go through all of the FPT race problems, and defining easy FPT algorithms for them, using concepts such as bounded search tree. I am stuck on figuring out an FPT algorithm for edge dominating set, defined as follows:</p>\n\n<p><strong>EdgeDominatingSet</strong></p>\n\n<p>Instance: A graph $G=(V,E)$; a positive integer $k$. </p>\n\n<p>Question: Is there a subset $D\\subseteq E$ with $|D|\\leq k$ such that for each $e\\in E$, either $e\\in D$ or $e$ shares an endpoint with an $e'\\in D$. </p>\n\n<p>Parameter: $k$</p>\n\n<p>I'm not looking to define anything fancy, just a simple FPT result. Any help would be great! </p>\n", 'ViewCount': '40', 'Title': 'FPT algorithm for edge dominating set', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-25T08:46:17.463', 'LastEditDate': '2014-03-25T08:46:17.463', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16086', 'Tags': '<algorithms><complexity-theory><parametrized-complexity>', 'CreationDate': '2014-03-25T04:47:51.053', 'Id': '23028'},325_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am trying to figure out a reduction to prove $W[1]$-hardness for this, but I am having significant trouble. Here is the problem:</p>\n\n<p><strong>Bag Automaton</strong>: \nA non deterministic finite state automaton $M=(Q,I,s,F,d)$. $Q$ is the set of states, $I$ is the set of items, $s\\in Q$ is the start state, $F\\subseteq Q$ is the set of accepting states, $d\\subseteq Q\\times 2^I\\times Q\\times 2^I$ is the set of transitions, where $2^I$ is the set of all subsets of $I$. \nA computation of a Bag Automaton starts in $s$, with given item set $I' \\subseteq I$. At each step the bag automaton in state $q$ and associated item set  $I^* \\subseteq I$ does a state transition $(q,A,q',B)$, $A\\subseteq I^*$, which sets the state to $q'$ and the bag automaton's item set to $(I'-A) \\cup B $. $M$ accepts if there is a sequence of transitions from $s$ to an $f \\in F$.</p>\n\n<p><strong>Bag Automaton Computation</strong>\nInput: A Bag Automaton $M=(Q,I,s,F,d)$, a set $I' \\subseteq I$ and a positive integer $k$.</p>\n\n<p>Parameters: $k$</p>\n\n<p>Question: Can $M$ accept on $I'$ by executing at most $k$ transitions?</p>\n\n<p>I am almost certain a reduction from clique where the initial bag contains all vertices will work, but I cannot figure out how to formalize it.</p>\n", 'ViewCount': '51', 'Title': 'Reduction from clique to bag automata', 'LastEditorUserId': '13022', 'LastActivityDate': '2014-04-01T15:00:21.597', 'LastEditDate': '2014-04-01T15:00:21.597', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '16079', 'Tags': '<complexity-theory><automata><reductions><parametrized-complexity>', 'CreationDate': '2014-03-31T00:46:42.120', 'Id': '23276'}