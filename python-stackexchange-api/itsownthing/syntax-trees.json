401_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Im trying to draw an annotated parse tree for <code>3*5+4n</code>, the text book shows the following:</p>\n\n<p><img src="http://i.stack.imgur.com/TilDt.png" alt="enter image description here"><br>\n<sup>[<em>Compilers - Principles, techniques and tools (Dragon Book) by Aho, p308</em>]</sup></p>\n\n<p>I have a few questions regarding this</p>\n\n<ol>\n<li><p>Why is <code>3*5+4</code> considered as a single string? Can\'t I draw a parse tree something like \nfor the same string ie:with operator at the node <img src="http://i.stack.imgur.com/PRd1R.jpg" alt="enter image description here"> </p></li>\n<li><p>What is the need for giving <code>T.VAL=3</code> and then giving another child <code>F.VAL=3</code>. (I understand that the integer attribute for digit needs to be supplied by the lexical analyzer)</p></li>\n</ol>\n', 'ViewCount': '226', 'ClosedDate': '2014-02-03T00:27:50.477', 'Title': 'Drawing Annotated Parse Tree for Syntax Directed Definition', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-30T11:40:12.120', 'LastEditDate': '2014-01-30T11:13:37.357', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12993', 'Tags': '<formal-grammars><compilers><parsing><syntax-trees>', 'CreationDate': '2014-01-30T08:37:50.427', 'Id': '20098'},401_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Context-free grammars, as well as other types of grammars, can naturally\nassociate structure with the strings of the defined language, for\nexample tree structures in the case of context-free language.</p>\n\n<p>What kind of structural features can be thus described by regular grammars,\nand associated with the strings of the language.</p>\n\n<p>One answer is of course that it can associate a non-terminals with\neach prefix (or suffix) of the string. That sorts the prefixes (or\nsuffixes) into sets that may intersect, depending on the grammar.\nBut what else would you see?</p>\n\n<p>related question : <a href="http://cs.stackexchange.com/questions/21306">Why CFG can specify structure of sentence but Regular grammar cannot?</a></p>\n', 'ViewCount': '38', 'Title': 'What kind of structural features of strings can be described by regular grammars?', 'LastActivityDate': '2014-02-20T16:22:49.207', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8321', 'Tags': '<formal-languages><regular-languages><context-free><formal-grammars><syntax-trees>', 'CreationDate': '2014-02-20T16:22:49.207', 'Id': '21852'},401_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was wondering if anyone had any good references or book recommendations that cover abstract syntax trees (ASTs). Specifically, I am interested in the abstract syntax trees of different evaluation strategies (call by value vs. call by name) of the pure lambda calculus. I would like to be able to draw the AST of some pure lambda calculus expression such as\n$$and \\, true \\, false = (\\lambda a. \\lambda b. a \\, b \\, (\\lambda t. \\lambda f. f))(\\lambda t. \\lambda f. t)(\\lambda t. \\lambda f. f).$$</p>\n\n<p>I would like to know if/how evaluation strategies affect the structure of ASTs, or how order of operation is reflected in the AST of an expression. This seems trivial for any pure lambda calculus interpreter; so perhaps there is some AST generator out there somewhere? I did some searching on Google but found nothing.</p>\n\n<p>I think if I could just get some practice with the AST representation of some non-trivial functions in any language, I will be okay.</p>\n', 'ViewCount': '27', 'Title': 'Abstract Syntax Tree of Pure Lambda Calculus', 'LastActivityDate': '2014-03-23T05:29:48.010', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22958', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15660', 'Tags': '<lambda-calculus><syntax-trees>', 'CreationDate': '2014-03-22T22:44:40.753', 'Id': '22949'}