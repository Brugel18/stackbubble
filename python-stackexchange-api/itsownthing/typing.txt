{'Body': "<p>Our professor asked us to think of a function in OCaml that has the type</p>\n\n<pre><code>'a -&gt; 'b\n</code></pre>\n\n<p>i.e. a function of one argument that could be anything, and that can return a different anything.</p>\n\n<p>I thought of using <code>raise</code> in a function that ignores its argument:</p>\n\n<pre><code>let f x = raise Exit\n</code></pre>\n\n<p>But the professor said there was a solution that doesn't require any function in the standard library. I'm confused: how can you make a <code>'b</code> if you don't have one in the first place?</p>\n\n<p><sub> I'm asking here rather than on Stack Overflow because I want to understand what's going on, I don't want to just see a program with no explanation. </sub></p>\n", 'ViewCount': '317', 'Title': "ML function of type 'a -> 'b", 'LastEditorUserId': '708', 'LastActivityDate': '2012-03-25T15:51:47.710', 'LastEditDate': '2012-03-25T15:51:47.710', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '303', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<programming-languages><typing><functional-programming>', 'CreationDate': '2012-03-13T11:21:21.667', 'Id': '302'}{'Body': '<p>I\'m learning programming in ML (OCaml), and earlier I asked about <a href="http://cs.stackexchange.com/questions/302/ml-function-of-type-a-b">ML functions of type <code>\'a -&gt; \'b</code></a>. Now I\'ve been experimenting a bit with functions of type <code>\'a list -&gt; \'b list</code>. There are some obvious simple examples:</p>\n\n<pre><code>let rec loop l = loop l\nlet return_empty l = []\nlet rec loop_if_not_empty = function [] -&gt; []\n                                   | l -&gt; loop_if_not_empty l\n</code></pre>\n\n<p>What I can\'t figure out is how to make a function that does something other than return the empty list or loop (without using any library function). Can this be done? Is there a way to return non-empty lists?</p>\n\n<p>Edit: Yes, if I have a function of type <code>\'a -&gt; \'b</code>, then I can make another one, or a function of type <code>\'a list -&gt; \'b list</code>, but what I\'m wondering here is how to make the first one.</p>\n', 'ViewCount': '168', 'Title': 'ML functions from polymorphic lists to polymorphic lists', 'LastEditorUserId': '708', 'LastActivityDate': '2014-04-20T22:26:40.853', 'LastEditDate': '2012-03-25T15:51:46.010', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '23967', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<programming-languages><typing><functional-programming>', 'CreationDate': '2012-03-14T00:11:34.063', 'Id': '341'}{'Body': "<p>I am working on an expression based language of ML genealogy, so it naturally needs type inference >:)</p>\n\n<p>Now, I am trying to extend a constraint-based solution to the problem of inferring types, based on a simple implementation in EOPL (Friedman and Wand), but they elegantly side-step algebraic datatypes.</p>\n\n<p>What I have so far works smoothly; if an expression <code>e</code> is <code>a + b</code>, <code>e : Int</code>, <code>a : Int</code> and <code>b : Int</code>. If <code>e</code> is a match,</p>\n\n<pre><code>match n with\n  | 0 -&gt; 1\n  | n' -&gt; n' * fac(n - 1)`, \n</code></pre>\n\n<p>I can rightly infer that the <code>t(e) = t(the whole match expression)</code>, <code>t(n) = t(0) = t(n')</code>, <code>t(match) = t(1) = t(n' * fac(n - 1)</code> and so on...</p>\n\n<p>But I am very unsure when it comes to algebraic datatypes. Suppose a function like filter:</p>\n\n<pre><code>let filter pred list =\n  match list with\n    | Empty -&gt; Empty\n    | Cons(e, ls') when pred e -&gt; Cons (e, filter ls')\n    | Cons(_, ls') -&gt; filter \n</code></pre>\n\n<p>For the list type to remain polymorphic, Cons needs to be of type <code>a * a list -&gt; a list</code>. So, in establishing these constraints, I obviously need to look up these types of my algebraic constructors - the problem I now have is the 'context-sensitivity' of multiple uses of algebraic constructors - how do I express in my constraint equations that the <code>a</code> in each case needs to be the same?</p>\n\n<p>I am having trouble finding a general solution to this, and I am unable to find much literature on this. Whenever I find something similar - expression based language with constraint-based type inference - they stop just short of algebraic datatypes and polymorphism.</p>\n\n<p>Any input is much appreciated!</p>\n", 'ViewCount': '214', 'Title': 'Constraint-based Type Inference with Algebraic Data', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-20T10:07:16.937', 'LastEditDate': '2012-04-06T23:30:01.300', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '979', 'Tags': '<programming-languages><type-theory><functional-programming><inductive-datatypes><typing>', 'CreationDate': '2012-04-06T23:09:22.253', 'Id': '1092'}{'Body': u'<p>I would like to know whether a universally-quantified type $T_a$: $$T_a = \\forall X: \\left\\{ a\\in X,f:X\u2192\\{T, F\\} \\right\\}$$ is a sub-type, or special case, of an existentially-quantified type $T_e$ with the same signature: $$T_e = \\exists X: \\left\\{ a\\in X,f:X\u2192\\{T, F\\} \\right\\}$$</p>\n\n<p>I\'d say "yes": If something is true "for all X" ($\\forall X$), then it must also be true "for some X" ($\\exists X$). That is, a statement with \'$\\forall$\' is simply a more restricted version of the same statement with \'$\\exists$\': $$\u2200X, P(X) \\overset?\\implies \u2203X, P(X).$$</p>\n\n<p>Am I wrong somewhere?</p>\n\n<blockquote>\n  <p><strong>Background: Why am I asking this?</strong></p>\n  \n  <p>I am studying existential types in order to understand why and how <a href="http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf">"Abstract [Data] Types Have Existential Type"</a>. I cannot get a good grasp of this concept from theory alone; I need concrete examples, too.</p>\n  \n  <p>Unfortunately, good code examples are hard to find because most programming languages have only limited support for existential types. (For instance, <a href="http://www.haskell.org/haskellwiki/Existential_type">Haskell\'s <code>forall</code></a>, or <a href="http://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html">Java\'s <code>?</code> wildcards</a>.) On the other hand, universally-quantified types are supported by many recent languages via "generics".</p>\n  \n  <p>What\'s worse, <em>generics seems to easily get mixed up with existential types</em>, too, making it even harder to tell apart existential from universal types. <em>I\'m curious why this mix-up occurs so easily.</em> An answer to this question might explain it: If universal types are indeed only a special case of existential types, then it\'s no wonder that generic types, e.g. Java\'s <code>List&lt;T&gt;</code>, can be interpreted either way.</p>\n</blockquote>\n', 'ViewCount': '225', 'Title': 'Are universal types a sub-type, or special case, of existential types?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-13T21:58:00.160', 'LastEditDate': '2012-04-20T10:20:47.280', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '12', 'OwnerDisplayName': 'stakx', 'PostTypeId': '1', 'Tags': '<logic><type-theory><typing>', 'CreationDate': '2012-01-02T12:55:49.437', 'FavoriteCount': '1', 'Id': '1382'}{'Body': "<p>Languages like Java, C#, Eiffel, and C++ have subtype hierarchies which are directed acyclic graphs, due to interfaces in Java and C# and multiple inheritance in Eiffel and C++. An obvious way to check whether type $A$ is a subtype of type $B$ is to traverse the graph of the subtype hierarchy starting at $A$ to see whether type $B$ appears 'above' it. This surely is not the most efficient way to implement subtype tests.</p>\n\n<blockquote>\n  <p>What techniques exist to efficiently implement subtype testing for modern OO languages?</p>\n</blockquote>\n\n<p>I'm interested in efficiency both in terms of time and memory and any trade-offs between the two.</p>\n", 'ViewCount': '142', 'Title': 'Efficient subtype testing', 'LastEditorUserId': '31', 'LastActivityDate': '2012-06-03T12:29:13.423', 'LastEditDate': '2012-06-02T14:51:02.927', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<programming-languages><compilers><typing>', 'CreationDate': '2012-06-02T11:00:24.770', 'FavoriteCount': '2', 'Id': '2198'}{'ViewCount': '191', 'Title': 'Is the type inference here really complicated?', 'LastEditDate': '2012-07-17T06:14:48.490', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1689', 'FavoriteCount': '0', 'Body': '<p>There\'s a <a href="http://stackoverflow.com/questions/9058430/why-doesnt-immutablemap-builder-build-pick-the-correct-type-parameters">question on SO</a> asking why in Java the right type doesn\'t get picked in a concrete case. I know that Java can\'t do it in such "complicated" cases, but I\'m asking myself <em>WHY</em>?</p>\n\n<p>The (for simplicity slightly modified) line failing to compile is</p>\n\n<pre><code>Map&lt;String, Number&gt; m = ImmutableMap.builder().build();\n</code></pre>\n\n<p>and the methods are defined as<sup>1</sup></p>\n\n<pre><code>class ImmutableMap {\n    public static &lt;K1, V1&gt; Builder&lt;K1, V1&gt; builder() {...}\n    ...\n}\n\nclass Builder&lt;K2, V2&gt; {\n    public ImmutableMap&lt;K2, V2&gt; build() {...}\n    ...\n}\n</code></pre>\n\n<p>The solution <code>K1=K2=String</code> and <code>V1=V2=Number</code> is obvious to everyone but the compiler. There are 4 variables here and I can see 4 trivial equations, so what\'s the problem with type inference here?</p>\n\n<p><sup>1</sup>I simplified the <a href="http://guava-libraries.googlecode.com/git/guava/src/com/google/common/collect/ImmutableMap.java" rel="nofollow">code piece from Guava</a> for this example and numbered the type variables to make it (hopefully) clearer.</p>\n', 'Tags': '<programming-languages><typing><java><type-inference>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-17T06:14:48.490', 'CommentCount': '5', 'AcceptedAnswerId': '2529', 'CreationDate': '2012-06-28T00:23:38.443', 'Id': '2521'}{'ViewCount': '150', 'Title': 'Algorithm for type conversion / signature matching', 'LastEditDate': '2012-07-13T11:10:36.447', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1642', 'FavoriteCount': '1', 'Body': u"<p>I'm working on an expression typing system and looking for insights on what algorithms may be available which solve my problem -- or a proof that its complexity is too high to be reasonable to implement. The problem is defined below.</p>\n\n<p>I have a set of types which form a directed graph $T = (V,E)$ (assume no cycles). This graph represents the allowed type conversions in a language. For example an edge $e_i = v_1 \\rightarrow v_2$ indicates that $v_1$ can be implicitly converted to type $v_2$.</p>\n\n<p>I have a set of parameter types for a function expressed as a set $P = { p_1 ... p_n : p_i \u2208 V }$. I also have a list of functions $F$ that might be applicable at this point. Each function has a signature (the types it accepts) $F_j = { f_1 ... f_n : t_i \u2208 V }$.</p>\n\n<p>The goal is to use a series of type conversions allowed by $T$ to convert $P$ into a signature compatible with any function in $F$. Conversion means moving along an edge in the graph to another type. Compatible means the converted parameter types match the function types.</p>\n\n<p>If each conversion has a cost of 1, which function, if selected, has the minimum total conversion cost for all parameters?</p>\n\n<hr>\n\n<p><em>A very simple example</em>: Assume we have a graph of types <code>integer -&gt; real -&gt; complex</code>. Our parameters have the types <code>{ integer, real }</code>. We have a function with types <code>{ complex, complex }</code>. The first integer takes two conversion to match complex, and the real takes one conversion, for a total cost of three. We have another function with types <code>{ real, real }</code>. This has a cost of one and is thus the better match.</p>\n\n<hr>\n\n<p>My initial idea is to treat the search as a path through a graph and use a modified A* algorithm. Each of the possible functions is a goal in that graph, and each path between nodes represents the conversion of a single parameter type. With even a modest number of allowed type conversions however this becomes very inefficient.</p>\n", 'Tags': '<algorithms><typing>', 'LastEditorUserId': '29', 'LastActivityDate': '2012-07-13T11:10:36.447', 'CommentCount': '0', 'AcceptedAnswerId': '2685', 'CreationDate': '2012-07-10T18:28:31.157', 'Id': '2677'}{'Body': '<p>I have a question about inheritance in Java-like OO programming languages. It came up\nin my compiler class, when I explained how to compile methods and their invocation. I was using Java as example source language to compile. </p>\n\n<p>Now consider this Java program.</p>\n\n<pre><code>class A {\n  public int x = 0;\n  void f () { System.out.println ( "A:f" ); } }\n\nclass B extends A {\n  public int x = 1;\n  void f () { System.out.println ( "B:f" ); } }\n\npublic class Main {\n  public static void main ( String [] args ) {\n    A a = new A ();\n    B b = new B ();\n    A ab = new B ();\n\n    a.f();\n    b.f();\n    ab.f();\n    System.out.println ( a.x );\n    System.out.println ( b.x );\n    System.out.println ( ab.x ); } }\n</code></pre>\n\n<p>When you run it, you get the following result.</p>\n\n<pre><code>A:f\nB:f\nB:f\n0\n1 \n0\n</code></pre>\n\n<p>The interesting cases are those that happen with the object <code>ab</code> of\nstatic type <code>A</code>, which is <code>B</code> dynamically. As <code>ab.f()</code> prints out</p>\n\n<pre><code>B:f\n</code></pre>\n\n<p>it follows that method invocations are not affected by the compile-time type of the object the method is invoked with.  But\n<code>System.out.println ( ab.x )</code> prints out <code>0</code>, so member access is affected by compile-time types. </p>\n\n<p>A student asked about this difference: should not the access of members and methods be\nconsistent with each other?\nI could not come up with a better answer than "that\'s the semantics of Java".</p>\n\n<p>Would you know a crisp <em>conceptual</em> reason why members and methods are\ndifferent in this sense? Something I could give my students?</p>\n\n<p><strong>Edit</strong>: Upon further investigation, this seems to be a Java idiosyncrasy: C++ and C# act differently, see e.g. Saeed Amiri\'s comment below.</p>\n\n<p><strong>Edit 2</strong>: I just tried out the corresponding Scala program:</p>\n\n<pre><code>class A {\n  val x = 0;\n  def f () : Unit = { System.out.println ( "A:f" ); } }\n\nclass B extends A {\n  override val x = 1;\n  override def f () : Unit = { System.out.println ( "B:f" ); } }\n\nobject Main {\n  def main ( args : Array [ String ] ) = {\n    var a : A = new A ();\n    var b : B = new B ();\n    var ab : A = new B ();\n    a.f();\n    b.f();\n    ab.f();\n    System.out.println ( "a.x = " + a.x );\n    System.out.println ( "b.x = " + b.x );\n    System.out.println ( "ab.x = " + ab.x ); } }\n</code></pre>\n\n<p>And to my surprise this results in</p>\n\n<pre><code>A:f\nB:f\nB:f\na.x = 0\nb.x = 1\nab.x = 1\n</code></pre>\n\n<p>Note that the <code>overrise</code> modifiers are necessary. This surprises me because Scala compiles to the JVM, and moreover, when I compile and execute the Java program at the top using the Scala compiler/runtime, it behaves like the Java program. </p>\n', 'ViewCount': '270', 'Title': 'Inheritance, and dynamic access to members/attributes and methods in Java-like languages', 'LastEditorUserId': '39', 'LastActivityDate': '2014-03-24T13:58:31.023', 'LastEditDate': '2014-03-24T13:58:31.023', 'AnswerCount': '3', 'CommentCount': '5', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2887', 'Tags': '<programming-languages><semantics><typing><object-oriented><java>', 'CreationDate': '2012-11-20T13:08:40.163', 'FavoriteCount': '1', 'Id': '6782'}{'Body': u'<p>I posted <a href="http://programmers.stackexchange.com/q/177037/6638">the same Q at programmers.SE</a>, but nobody really helps.</p>\n\n<p>In the paper \u201c<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.110.122&amp;rep=rep1&amp;type=pdf" rel="nofollow">An Extended Comparative Study of Language Support for Generic Programming</a>\u201d by Garcia et al. an interesting comparison of programming languages features for generic programming is given:</p>\n\n<p><img src="http://i.stack.imgur.com/8kNzR.png" alt="table with comparison of GP-features"></p>\n\n<p>with the brief explanation of terminology:</p>\n\n<p><img src="http://i.stack.imgur.com/LuQLi.png" alt="legend for the table"></p>\n\n<p>Can anyone assess Scala programming language support for generic programming in a view of this framework? I.e. add a column in the first table with explanations and examples if possible.</p>\n', 'ViewCount': '174', 'Title': 'Scala as a language for Generic Programming', 'LastEditorUserId': '25', 'LastActivityDate': '2012-11-26T06:50:01.153', 'LastEditDate': '2012-11-25T19:44:51.623', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '6908', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '25', 'Tags': '<programming-languages><typing>', 'CreationDate': '2012-11-25T19:15:36.523', 'Id': '6895'}{'Body': u'<p>I stumbled upon the <a href="http://msdn.microsoft.com/en-us/library/bb871031.aspx" rel="nofollow">MSDN Best Practices for Code Review</a>.</p>\n\n<p>Under the section \u201cUntrusted Inputs\u201d, I found following which I didn\'t understand properly. Why is the following considered safe?</p>\n\n<pre><code>printf("%s", buffer);\n</code></pre>\n\n<p>What kinds of guarantees does the C language give regarding the behavior of this snippet? Given that both <code>printf(buffer)</code> and <code>printf("%s", buffer)</code> are accepted by the compiler, why is one considered safer than the other \u2014\xa0shouldn\'t the unsafe version be rejected?</p>\n\n<hr>\n\n<p>Copied following text from the source:</p>\n\n<blockquote>\n  <p>Untrusted Inputs</p>\n  \n  <p>If the input buffer comes from an untrusted source, this can result in a security attack, as the input can contain formatting specifiers that will pull data off the stack. Additionally, it can cause buffer overflows by expanding the resulting string beyond expected limits:</p>\n  \n  <p><code>printf(buffer);</code></p>\n  \n  <p>These should always be converted to the following:</p>\n  \n  <p><code>printf("%s", buffer);</code></p>\n</blockquote>\n', 'ViewCount': '228', 'ClosedDate': '2013-10-04T18:48:55.540', 'Title': 'Handling untrusted string input in printf in C', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-09T18:42:36.423', 'LastEditDate': '2013-10-09T18:42:36.423', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4981', 'Tags': '<programming-languages><memory-management><security><typing><c>', 'CreationDate': '2012-12-10T05:08:17.723', 'Id': '7287'}{'Body': "<p>This question is not homework but it's related to material in a general course I take about programming languages, so I don't know whats the site policy about this</p>\n\n<p>In ML the following expression:</p>\n\n<pre><code>fun f x y z = x (y , z) = x (z, y) ;\n</code></pre>\n\n<p>Evaluates to this:</p>\n\n<pre><code>val ('a, ''b) f = fn : ('a * 'a -&gt; ''b) -&gt; 'a -&gt; 'a -&gt; bool\n</code></pre>\n\n<p>I understand the type inference done here, but not the structure of the expression returned.</p>\n\n<p>Can someone explain how this works ?</p>\n\n<p>Thanks</p>\n", 'ViewCount': '35', 'Title': 'How is the following ML Curry expression evaluated', 'LastEditorUserId': '39', 'LastActivityDate': '2013-02-20T00:02:53.963', 'LastEditDate': '2013-02-20T00:02:53.963', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '9944', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1907', 'Tags': '<programming-languages><functional-programming><typing>', 'CreationDate': '2013-02-19T19:34:54.980', 'Id': '9941'}{'Body': '<p>When trying to decide on the choice of a programming language for a\nspecific task, people will often tell me: "use this language because it\nhas the best library for the type of problems you are addressing".</p>\n\n<p>I would rather choose my language for its intrinsic qualities as a\nprogramming medium. That implies that libraries should be more\nuniversally usable.</p>\n\n<p>What work has there been to create programming libraries that could be\nprogrammed and used in different languages, being mechanically adapted\nfrom one to the other on the basis of a standardized interface\nlanguage/formalism (or any other mean)? How succesful has it been?</p>\n\n<p>For example, I found one system that claims to do that : <a href="http://msdn.microsoft.com/en-us/library/12a7a7h3.aspx" rel="nofollow">Microsoft\'s .NET\nFramework</a>.\nThey say it is based on a Common Language Specification (CLS) which is defined in the <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm" rel="nofollow">ECMA-335 Standard: Common Language Infrastructure</a>. </p>\n\n<p>Are there others? What about free-software frameworks?</p>\n\n<p>Pointers to relevant papers or web sites are an answer. A survey would\nbe best.</p>\n\n<p><strong>Note</strong> (June 7, 2013): this question is more controversial than is visible.\nHowever, I cannot fathom the nature of the controversy. Some people\nsupport the question and/or make cogent comments. But the people who\nseem unhappy about it just downvote without a word of explanation. I\nam sure they have a good reason to do so. But it would better help our\nunderstanding of the issues, or possibly of the lack of issues, if\nthey were a little more explicit as to what irks them.</p>\n', 'ViewCount': '123', 'Title': 'Language independent software libraries', 'LastEditorUserId': '8321', 'LastActivityDate': '2013-06-07T23:42:46.673', 'LastEditDate': '2013-06-07T23:42:46.673', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8321', 'Tags': '<programming-languages><formal-methods><typing>', 'CreationDate': '2013-06-03T16:40:06.870', 'FavoriteCount': '1', 'Id': '12447'}{'Body': '<p>Is it possible to use <a href="http://en.wikipedia.org/wiki/Dependent_type" rel="nofollow">Dependent Types</a> in the existing <a href="http://docs.racket-lang.org/ts-guide/" rel="nofollow">Typed Racket</a> implementation? (ie do they exist in it?)</p>\n\n<p>Is it reasonably possible to implement a Dependent Types System using Typed Racket?</p>\n', 'ViewCount': '148', 'Title': 'Is it possible to do Dependent Types in Typed Racket?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-22T00:32:15.773', 'LastEditDate': '2013-10-09T18:43:51.303', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '19183', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1709', 'Tags': '<programming-languages><typing><type-checking><dependent-types><lisp>', 'CreationDate': '2013-10-08T11:39:46.047', 'Id': '14905'}{'Body': '<p><a href="http://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/" rel="nofollow">Some claim</a> that dynamically typed languages are in reality statically typed, unityped languages. This would imply to me that this one type should be expressible as a static, finite type expression, so can anyone provide such an expression? You can make whatever assumptions you need to make about the base types in the language, but please make sure the language would support types of unbounded size, e.g., lists, recursive types. It would also be nice if it supported records and variants, but whatever helps to illustrate the point will work. I\'m also assuming that the language will be required to support some form of sum type, right?</p>\n', 'ViewCount': '57', 'Title': 'If dynamically typed languages are truly statically typed, unityped languages, what is the (finite) type expression of the one type?', 'LastActivityDate': '2014-02-07T21:24:14.177', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '5291', 'Tags': '<programming-languages><type-theory><typing>', 'CreationDate': '2013-12-11T00:05:49.997', 'Id': '18847'}{'Body': u'<p>Say I have Simply typed lambda calculus, and add an assignment rule:</p>\n\n<pre><code>&lt;identifier&gt; : &lt;type&gt; = &lt;abstraction&gt;\n</code></pre>\n\n<p>Where <code>&lt;identifier&gt;</code> is the name of the function, <code>&lt;type&gt;</code> is the function type and <code>&lt;abstraction&gt;</code> is the abstraction to be assigned to the identifier. </p>\n\n<p>Then I add a typing rule that says that when you see an assignment such as the above, you use a temporary type context, in which the declared type (the one in <code>&lt;identifier&gt; : &lt;type&gt;</code>) is associated with the identifier, to type check <code>&lt;abstraction&gt;</code> and then make sure the declared type equals the abstraction\'s type.</p>\n\n<p>And finally I add another rule that would let me have a list of assignments on top of a lambda term which is the one I\'d evaluate, such that all these assignments would be added to the global scope before the term is evaluated.</p>\n\n<p>Seems to me that this alone would make it Turing complete since I\'d be able to do stuff like:</p>\n\n<pre><code>stackoverflow: NUM -&gt; NUM = \u03bbn:NUM.(stackoverflow n)\n(stackoverflow 0)\n</code></pre>\n\n<p>And at the same time, everything I can define in this language would be "well typed" in the sense that it wouldn\'t be able to define infinite types (I wouldn\'t be able to define the Y combinator).</p>\n\n<p>So my questions are, is this really Turing complete? And, am I missing something when I say everything would be "well typed" (like for instance, I could define the Y combinator in a way I haven\'t yet realized or is there any gotcha in this type system)?</p>\n', 'ViewCount': '63', 'Title': 'Would adding recursive named functions to Simply typed lambda calculus make it Turing complete?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-22T17:08:16.207', 'LastEditDate': '2013-12-22T17:08:16.207', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19193', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10401', 'Tags': '<lambda-calculus><recursion><type-theory><turing-completeness><typing>', 'CreationDate': '2013-12-22T05:19:44.457', 'Id': '19187'}{'Body': '<p>I\'m reading about this algorithm while writing an implementation, and see that, as long as every variable is bound, you\'ll always get either atomic types or types where the arguments will determine the final type, such as <code>t1 -&gt; t1</code> or <code>(t1 -&gt; t2) -&gt; (t1 -&gt; t2)</code>. </p>\n\n<p>I cannot think of a way you\'d get something like <code>t1 -&gt; t2</code> or simply <code>t1</code>, which I understand would mean the algorithm is broken since there would be no way to determine the actual type of the expression. How do you know you\'ll never get a type such as these "broken" ones as long as every variable is bound?</p>\n\n<p><strong>EDIT</strong> Seems that you can get these "broken" types in ML, but I\'m asking about lambda calculus.</p>\n', 'ViewCount': '97', 'Title': 'Why will the Hindley-Milner algorithm never yield a type like t1 -> t2?', 'LastEditorUserId': '10401', 'LastActivityDate': '2014-01-01T17:44:44.103', 'LastEditDate': '2014-01-01T17:44:44.103', 'AnswerCount': '1', 'CommentCount': '9', 'AcceptedAnswerId': '19431', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10401', 'Tags': '<lambda-calculus><type-theory><typing><type-inference>', 'CreationDate': '2014-01-01T03:28:39.107', 'Id': '19430'}{'Body': '<p>I\'m going to take the few pieces of knowledge I have about lambda calculi and ask a pair of very uninformed questions :-)</p>\n\n<p>Is it possible to "embed" the corners of the lambda cube within the untyped lambda calculus?  </p>\n\n<p>It would seem that this might lead to a language where the programmer implements the type system in the language, rather than having it already implemented in the compiler.  Also, maybe the concept of type system could be generalized to "any arbitrary compile-time or run-time constraint checking".  Does such a language already exist?</p>\n', 'ViewCount': '65', 'Title': 'Can type information be encoded in the untyped lambda calculus?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-17T08:42:03.753', 'LastEditDate': '2014-01-17T08:42:03.753', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12900', 'Tags': '<programming-languages><lambda-calculus><typing><type-checking>', 'CreationDate': '2014-01-16T17:13:25.953', 'Id': '19767'}{'Body': '<p>In another <a href="http://cs.stackexchange.com/q/19767/268">question</a> about Lambda Calculus, Andrej Bauer made the comment:</p>\n\n<blockquote>\n  <p>Lambda calculi of various forms are formal systems. They consist of\n  abstract syntax (for terms and for types, if present), judgments\n  (typing judgments and equations), and rules of inference. They are not\n  programming languages (unless we prescribe operational semantics) and\n  neither is it the case that a type system equals a program that checks\n  types. So I think this whole question is a bit misdirected, still. Of\n  course, an important aspect of a type system is how to implement it on\n  a computer, which brings in questions about algorithms, etc. But a\n  priori, the type system has none of that.</p>\n</blockquote>\n\n<p>I understand most of this, but I cannot wrap a logical understanding around:</p>\n\n<blockquote>\n  <p>neither is it the case that a type system equals a program that checks types.</p>\n</blockquote>\n\n<p>My understanding of a type system is that it is a set of rules in a formal system used to determine if a type is valid in a context and that those rules, via implementation, are used to establish the validity of a use of a type in a context in a programming language. </p>\n\n<p>However the statement has me thinking there is no connection, or that there is more meaning to the statement but I don\'t see the details to separate a type system from a program or make a logical connection between the two so that the statement makes sense.</p>\n\n<p>What is the relation between a type system and a program?</p>\n', 'ViewCount': '65', 'Title': 'How is a type system related to a progam?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T21:46:04.050', 'LastEditDate': '2014-01-17T21:44:52.757', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '21329', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<programming-languages><type-theory><typing><type-checking>', 'CreationDate': '2014-01-17T18:35:03.183', 'Id': '19789'}{'Body': '<p>I am taking a programming languages course, and we have had to use the Inversion Lemma many times in our proofs of preservation. We have been given the Inversion Lemma in each of these examples, but is there a general statement of the inversion lemma that can be applied to any proof of preservation? Can someone write that out for me/explain it a little bit?</p>\n', 'ViewCount': '40', 'Title': 'What is the Inversion Lemma', 'LastActivityDate': '2014-03-21T20:19:16.023', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22913', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14861', 'Tags': '<programming-languages><typing>', 'CreationDate': '2014-02-19T21:59:17.200', 'Id': '21825'}{'Body': '<p>Java seems to be categorized as a statically-typed language<a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29" rel="nofollow"> [1]</a>, but I\'m wondering if it would be accurate to describe it as generally statically-typed but having some dynamic typing because of the run-time type checks performed when downcasts are performed.</p>\n', 'ViewCount': '44', 'Title': 'Can Java be accurately described as statically and dynamically typed?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-08T08:10:46.977', 'LastEditDate': '2014-04-07T23:33:02.310', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23536', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '40', 'Tags': '<terminology><programming-languages><typing><type-checking>', 'CreationDate': '2014-04-07T17:47:03.420', 'Id': '23521'}{'Body': "<p>I'm working on a graph representation of software for a static analysis project, and I'm finding a distinction that I have no name for between different types of variables.</p>\n\n<p>On one side of the division, we have local variables and parameters, which are not subject to modification by other threads during the execution of a method. For these variables, static single assignment form is valid.</p>\n\n<p>On the other side of the division, we have global variables, fields, and C/C++ static local variables, which can be modified by other threads, meaning static single assignment form is not necessarily valid, as the variable may be modified by a separate thread during the execution of the method.</p>\n\n<p>Is there any existing term for this division?</p>\n", 'ViewCount': '30', 'Title': 'Is there a term for the common semantics of global variables, static local variables, and fields?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-05-01T02:46:38.767', 'LastEditDate': '2014-05-01T02:46:38.767', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16841', 'Tags': '<terminology><typing>', 'CreationDate': '2014-04-30T23:38:51.307', 'Id': '24277'}{'Body': '<p>I have seen stated in various places that in order to allow an "increase in polimorphism" functional depency analysis should be performed, and type inference should be used for every declaration group in topological order. It seems like a well-known fact... except that nobody provides any reference or example whatsoever.</p>\n\n<p>In fact I don\'t understand what is really meant by this statement. Does it mean that without doing dependency analysis I wouldn\'t be able to type some programs (i.e. some valid programs would fail type-checking) or only that I would type them with a type that is more specific than what really is?</p>\n\n<p>I\'m particularly interested in consequences in a Haskell-like language/type system. In particular during <em>kind inference</em>, is dependency analysis actually necessary to avoid rejecting valid programs? Can you provide an example that wouldn\'t be well-kinded if typed without performing dependency analysis?</p>\n\n<p>Since kinds are monomorphic I struggle to understand why dependency analysis should matter in this particular case.</p>\n', 'ViewCount': '13', 'Title': 'Is dependency analysis required in order to type a program?', 'LastActivityDate': '2014-05-03T07:29:34.857', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7246', 'Tags': '<functional-programming><typing><type-inference>', 'CreationDate': '2014-05-03T07:29:34.857', 'Id': '24343'}