{'Body': "<p>I have this simple 'assignment' problem:</p>\n\n<p>We have a set of agents $A = \\{a_1, a_2, \\dotso, a_n\\}$ and set of tasks $T= \\{t_1, 1_2, \\dotso, t_m\\}$. Note that $m$ is not necessarily equal to $n$. Unlike the general assignment formulation in Wikipedia, a task $t_c$ can only be assigned to an agent based on the task's preferred agents $ta_c \\subseteq A$. For example, if we have $ta_1= \\{a_1, a_3\\}$, that means that task $t_1$ can only be assigned to either agents $a_1$ or $a_3$. Now, each agent $t_d$ has a qouta $q_d$ where $q_d$ is positive integer. This means that $a_d$ must be assigned with $q_d$ number of tasks. </p>\n\n<p><strong>The Problem</strong></p>\n\n<p>Given above and a set of qoutas $\\{q_1, q_2, \\dotso, q_n\\}$, is there an assignment of tasks to agents such that all agents meet their respective qouta $q$. Note that it is not necessarily that all tasks be assigned to an agent. </p>\n\n<p><strong>Possible Solution</strong></p>\n\n<p>I have tried reformulating this problem in terms of a bipartite graph $G(A, T, E = \\cup ta_c)$ and expressed as a form of matching problem where given a matching $M$, a vertex agent $a_d\\in A$ is matched up to $q_d$ times or is incident to $q_d$ edges in $M$ but the vertices in $T$ is incident to only one edge in $M$. Not really like the usual matching problem which requires that the edges in $M$ are pairwise non-adjacent.</p>\n\n<p>However, it was suggested by someone (from cstheory, he knows who he is) that I could actually work this out as a maximum matching problem, by replicating an agent $a_d$ into $q_d$ vertices and 'conceptually' treat them as different vertices as input to the matching algorithm. The set of edges $E$ is also modified accordingly. Call the modified graph as $G'$</p>\n\n<p>It is possible to have more than 1 maximum matchings from graph $G'$. Now, if I understand this correctly, I still have to check each of the resulting maximum matchings and see that at least one of them satisfies the $qouta$ constraint of each $agent$ to actually provide the solution to the problem.</p>\n\n<p>Now, I want to prove that not finding one maximum matching $M$ $\\in$ set of all maximum matchings of the graph $G'$ that satisfies the $qouta$ constraint of the problem guarantees that there really exists no solution to the problem instance, otherwise a solution exist which is $M$.</p>\n\n<p><strong>I want to show that this algorithm always give correct result.</strong> </p>\n\n<p><strong>Question</strong></p>\n\n<p>Can you share to me some intuition on how I might go to show this?</p>\n", 'ViewCount': '294', 'Title': 'Simple Task-Assignment Problem', 'LastEditorUserId': '2922', 'LastActivityDate': '2012-09-23T00:13:44.433', 'LastEditDate': '2012-09-23T00:13:44.433', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '4684', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2922', 'Tags': '<algorithms><graph-theory><proof-techniques><assignment-problem>', 'CreationDate': '2012-09-22T23:22:25.637', 'Id': '4683''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>In my variant of the assignment problem I have a set $A$ of agents and a set (of possibly different cardinality) $T$ of tasks. Each agent needs to be assigned exactly $n$ or $n+1$ tasks, and each task needs to be assigned to exactly $m$ or $m+1$ agents.</p>\n\n<p>It is guaranteed this this is possible: the segment $\\left[ |A|n, |A|(n+1) \\right]$ intersects the segment $\\left[ |B|m, |B|(m+1) \\right]$.</p>\n\n<p>Each agent-task combination yields a profit, and I want to maximize the profit.</p>\n\n<p>Is this a special case of one of the known problems? How can this be solved? If not practical for n=100,000, what are good approximations and what is their complexity?</p>\n\n<p><sub> Not a comp.scientist, but have done the basic research. Please excuse me if I've overlooked anything obvious. </sub></p>\n", 'ViewCount': '289', 'Title': 'A variant of the Assignment Problem', 'LastEditorUserId': '4283', 'LastActivityDate': '2012-10-21T11:52:13.743', 'LastEditDate': '2012-10-21T08:07:04.320', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4283', 'Tags': '<optimization><linear-programming><assignment-problem>', 'CreationDate': '2012-10-20T06:30:51.020', 'Id': '6186''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '313', 'Title': 'Assignment problem for multiple days', 'LastEditDate': '2012-10-21T09:32:46.587', 'AnswerCount': '1', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '4298', 'FavoriteCount': '2', 'Body': '<p>I have a problem that can be reduced to an assignment problem.\n(In a previous <a href="http://cstheory.stackexchange.com/questions/12850/matching-on-bipartite-graph-multiple-edges">question</a> i found out how to do that.)</p>\n\n<p>Which means we have a set $A$ of agents and a set $T$ of tasks as well as a cost function $c(i,j)$. We need to find an assignment so that the total cost is minimal.</p>\n\n<p>The <a href="http://en.wikipedia.org/wiki/Hungarian_algorithm">hungarian algorithm</a> can find an optimal solution in at least $O(n^4)$. Which sounds good to me.</p>\n\n<p>My new Problem is:\nThere is a given number of days. I have to solve the assignment problem for each day so that <strong>every task is done every day</strong> and <strong>no agent does the same task twice</strong>.</p>\n\n<p>What I have tried:\nWe could run the hungarian algorithm separately for each day and limit the number of possible combinations based on the result of the previous day. But this would get us into trouble at some of the later days, where most likely it will be impossible to find a feasibly solution.</p>\n\n<p>Another idea is to somehow integrate local search to change decisions made at a previous day. But I think we can\'t rely on this.</p>\n\n<p>The problem instances I have to face will be somewhere around $|A| = |T| = 500$. The cost matrix $C(i,j)$ will have lots of same values (E.g. mostly 1 or infinity, only some 2 or 3). So during the hungarian algorithm there is a lot of space to create different optimal solutions for a single day.</p>\n\n<p>I\'d be glad to hear some ideas or advises how to find a good solution for the problem.\nThanks in advance.</p>\n', 'Tags': '<algorithms><graph-theory><assignment-problem>', 'LastEditorUserId': '4298', 'LastActivityDate': '2012-10-21T16:52:13.963', 'CommentCount': '1', 'AcceptedAnswerId': '6216', 'CreationDate': '2012-10-21T08:44:43.650', 'Id': '6210''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '213', 'Title': 'XOR-like behavior in flow networks', 'LastEditDate': '2013-03-03T11:44:38.840', 'AnswerCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4298', 'FavoriteCount': '2', 'Body': '<p><em>XOR is not the correct name, but I am looking for some kind of exclusive behavior.</em></p>\n\n<p>I am currently solving a set of different (assignment) problems by modeling flow networks and running a min-cost-max-flow algorithm. Flow networks are quite handy because a lot of problems can be reduced to them in an easy and understandable way. In my case these are matchings with some additional constraints. As these constraints are getting more complex I\'ve been wondering if there are some existing constructions to model specific behaviors.</p>\n\n<p>In this case I want to restrict the outgoing flow of a node to a single edge.</p>\n\n<p>Given a graph $G=(V, E)$, integral capacities $c(u,v)$ and costs $k(u,v)$. An arbitrary node is called $A$. It\'s direct neighbors are called $B_1, ..B_n$. Can we replace the edges $AB_1,...AB_n$ (red) with some construction so that <strong>only one edge can receive flow</strong>? Which means that if $AB_1$ gets some flow (e.g. $5/10$) no other (red) edge can receive flow.</p>\n\n<p><img src="http://i.stack.imgur.com/1Cli7.png" alt=""></p>\n\n<p>We could add intermediate nodes/edges and play with costs and capacities. The total capacity of our new construction has to stay the same and the cost of the different alternatives have to stay somehow proportional.</p>\n\n<p>So my questions are:</p>\n\n<ol>\n<li>Are there constructions like this in general? (Any keywords, links, papers)</li>\n<li>Can you suggest a solution to my specific problem?</li>\n</ol>\n', 'Tags': '<algorithms><graph-theory><graphs><network-flow><assignment-problem>', 'LastEditorUserId': '4298', 'LastActivityDate': '2013-10-29T15:14:57.683', 'CommentCount': '9', 'AcceptedAnswerId': '7623', 'CreationDate': '2012-12-26T22:37:50.973', 'Id': '7610''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have a problem that I was able to conceptualize as following:</p>\n\n<h2>Problem</h2>\n\n<p>We have a set of n people. And m subsets representing their ethnicity like White, Hispanic, Asian etc. Given any combination of these people, I want to check if it is a diverse group.</p>\n\n<p>A diverse group is a group that satisfies several requirements, each requirement is of the form "at least $k_i$ persons in the group belong to subset $S_i$". Here is the tricky part, one person can only be used to satisfy one requirement. As in, you can\'t use him/her for multiple requirements.</p>\n\n<h2>Example:</h2>\n\n<p>Given:</p>\n\n<p>At least two people from Hispanic= {a,b,c}</p>\n\n<p>At least two people from African={a,d,e}</p>\n\n<p>Is the group {a,c,d} a diverse group?</p>\n\n<p>The group {a,c,d} is not diverse because you cant count a as Hispanic and African. But, the group {a,c,d,e} is diverse because we have two Hispanics a and c and two African d and e.</p>\n\n<h2>Attempt:</h2>\n\n<p>I think this is an instance of the Assignment problem. The jobs are the ethnicity and we can put as many ethnicity as the requirement dictate. For example, if we need two Hispanic, then we put two Hispanic jobs. However there only some people are able to do a particular job. Is there a name for such a problem? any algorithms somewhere in the internet? If not how would the implementation look like? </p>\n\n<p>This is my attempt so far:</p>\n\n<p>I will construct a bipartite graph with the set of people $P$ on one hand and the set of ethnicity on the other $S$. We will put an edge between a person $p_i$ and an ethnicity $S_i$ if he/she belongs to the ethnicity.\n Now, we will modify the graph, for every ethnicity $S_i$ duplicate it $k_i$ times ($S_{i,1}, S_{i,2}, ... , S_{i,k_i}$). And add new edges accordingly. Find the maximum matching M of this graph. </p>\n\n<p>Now, merge the $S_{i,j}$s into one $S_i$ and there you have a diverse group. However, a maximum matching is only a possible solution to to the problem. And my problem is a decision problem, I want to check if a given group is a solution or not. </p>\n', 'ViewCount': '217', 'Title': 'Assignment problem with no cost', 'LastActivityDate': '2013-03-20T13:40:37.340', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7320', 'Tags': '<graph-theory><bipartite-matching><matching><assignment-problem>', 'CreationDate': '2013-03-17T23:04:11.883', 'FavoriteCount': '1', 'Id': '10591''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I want to solve job assignment problem using <em>Hungarian algorithm of Kuhn and Munkres</em> in case when matrix is not square. Namely we have more jobs than workers.\nIn this case adding additional row is recommended to make matrix square.\nFor example in the following \n<a href="http://books.google.kz/books?id=yXYzLm1e_IUC&amp;pg=PA94&amp;lpg=PA94&amp;dq=job%20assignment%20problem%20matrix%20is%20non%20square&amp;source=bl&amp;ots=1LU3_P-Ss5&amp;sig=k4hlPV0GLjUDT9PxoLEsomt0K6Q&amp;hl=en&amp;sa=X&amp;ei=lFODUcW_FcKQOJfUgPgJ&amp;ved=0CFIQ6AEwBQ#v=onepage&amp;q=job%20assignment%20problem%20matrix%20is%20non%20square&amp;f=false" rel="nofollow">link</a>.</p>\n\n<p><img src="http://i.stack.imgur.com/tWzYi.png" alt="enter image description here">\nAnd here task IV is assumed to be done.\nBut in real we do not have man D. Who will actually do task IV?\nCan someone explain this phenomena?</p>\n\n<p>In general I want to complete all tasks by loading workers uniformly and get maximum cost.\nSo how to implement this task by using job assignment algorithm above?</p>\n', 'ViewCount': '122', 'Title': 'Job assignment problem', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-29T20:11:29.027', 'LastEditDate': '2013-11-29T20:11:29.027', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5207', 'Tags': '<algorithms><linear-programming><assignment-problem>', 'CreationDate': '2013-05-03T06:52:36.190', 'FavoriteCount': '1', 'Id': '11751''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Can someone suggest an algorithm to solve job assignment problem with condition?</p>\n\n<p>With condition means that some jobs cannot be done by some workers. For example table as shown below:</p>\n\n<p><img src="http://i.stack.imgur.com/48Tqv.png" alt="enter image description here"></p>\n\n<p>In this table x - means that it is impossible to do. For example, worker 1 cannot do jobs 1,3 and 5.</p>\n\n<p>I encountered such situation and there may be cases as shown above when usual Hungarian algorithm seems cannot solve such task because there is no way to complete all tasks by distributing one task per worker. </p>\n\n<p>However, my main case it is allowed that one worker wil do several tasks (tasks, which worker can do). Main task is to complete all jobs using existing workers, but it is desirable that, all workers do roughly same number of tasks.</p>\n\n<p>So is there some solution of such problem? May be any algorithms do exist?</p>\n', 'ViewCount': '137', 'Title': 'Algorithm to solve job assignment problem', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-19T14:51:50.040', 'LastEditDate': '2013-05-19T14:51:50.040', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5207', 'Tags': '<algorithms><optimization><linear-programming><scheduling><assignment-problem>', 'CreationDate': '2013-05-18T19:39:04.773', 'Id': '12122''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>The problem is a scheduling problem with n jobs and k machines. Each job i can be started at any time, but its duration is not exactly known except a time span interval. For example, a job may take anything from 5 mins to 10 mins. The list of jobs and their duration interval is given to the scheduler and the aim is to minimize the time all jobs would be finished. \nIn interval scheduling, the job start and end time is given and the length is fixed. Here, the job can start and end anytime (should be done in whole though) but its duration (length) is not exactly known.</p>\n\n<p>I searched the literature for this problem but couldn't find it. Is there any keywords I can use or any reference for this problem? Is it well-defined?</p>\n", 'ViewCount': '159', 'Title': 'A variant of job assignment (scheduling) problem with variable time span', 'LastActivityDate': '2013-08-02T19:50:55.893', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8995', 'Tags': '<optimization><scheduling><process-scheduling><assignment-problem>', 'CreationDate': '2013-07-03T18:47:45.597', 'Id': '13066''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}