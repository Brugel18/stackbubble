{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '198', 'Title': 'Characterization of lambda-terms that have union types', 'LastEditDate': '2012-03-07T11:03:44.950', 'AnswerCount': '2', 'Score': '16', 'PostTypeId': '1', 'OwnerUserId': '39', 'FavoriteCount': '3', 'Body': '<p>Many textbooks cover intersection types in the lambda-calculus. The typing rules for intersection can be defined as follows (on top of the simply typed lambda-calculus with subtyping):</p>\n\n<p>$$\r\n\\dfrac{\\Gamma \\vdash M : T_1 \\quad \\Gamma \\vdash M : T_2}\r\n      {\\Gamma \\vdash M : T_1 \\wedge T_2}\r\n      (\\wedge I)\r\n\\qquad\\qquad\r\n\\dfrac{}\r\n      {\\Gamma \\vdash M : \\top}\r\n      (\\top I)\r\n$$</p>\n\n<p>Intersection types have interesting properties with respect to normalization:</p>\n\n<ul>\n<li>A lambda-term can be typed without using the $\\top I$ rule iff it is strongly normalizing.</li>\n<li>A lambda-term admits a type not containing $\\top$ iff it has a normal form.</li>\n</ul>\n\n<p>What if instead of adding intersections, we add unions?</p>\n\n<p>$$\r\n\\dfrac{\\Gamma \\vdash M : T_1}\r\n      {\\Gamma \\vdash M : T_1 \\vee T_2}\r\n      (\\vee I_1)\r\n\\qquad\\qquad\r\n\\dfrac{\\Gamma \\vdash M : T_2}\r\n      {\\Gamma \\vdash M : T_1 \\vee T_2}\r\n      (\\vee I_2)\r\n$$</p>\n\n<p>Does the lambda-calculus with simple types, subtyping and unions have any interesting similar property? How can the terms typable with union be characterized?</p>\n', 'Tags': '<lambda-calculus><type-theory><logic>', 'LastEditorUserId': '68', 'LastActivityDate': '2012-03-08T10:06:42.440', 'CommentCount': '2', 'AcceptedAnswerId': '116', 'CreationDate': '2012-03-07T02:07:40.470', 'Id': '62'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Consider an inductive type which has some recursive occurrences in a nested, but strictly positive location. For example, trees with finite branching with nodes using a generic list data structure to store the children.</p>\n\n<pre><code>Inductive LTree : Set := Node : list LTree -&gt; LTree.\n</code></pre>\n\n<p>The naive way of defining a recursive function over these trees by recursing over trees and lists of trees does not work. Here\'s an example with the <code>size</code> function that computes the number of nodes.</p>\n\n<pre><code>Fixpoint size (t : LTree) : nat := match t with Node l =&gt; 1 + (size_l l) end\nwith size_l (l : list LTree) : nat := match l with\n    | nil =&gt; 0\n    | cons h r =&gt; size h + size_l r\n  end.\n</code></pre>\n\n<p>This definition is ill-formed (error message excerpted):</p>\n\n<pre><code>Error:\nRecursive definition of size_l is ill-formed.\nRecursive call to size has principal argument equal to\n"h" instead of "r".\n</code></pre>\n\n<p>Why is the definition ill-formed, even though <code>r</code> is clearly a subterm of <code>l</code>? Is there a way to define recursive functions on such a data structure?</p>\n\n<hr>\n\n<p>If you aren\'t fluent in Coq syntax: <code>LTree</code> is an inductive type corresponding to the following grammar.</p>\n\n<p>$$\\begin{align}\r\n  \\mathtt{LTree} ::= &amp; \\\\\r\n  \\vert &amp; \\mathtt{list}(\\mathtt{LTree}) \\\\\r\n\\end{align}$$</p>\n\n<p>We attempt to define the <code>size</code> function by induction over trees and lists. In OCaml, that would be:</p>\n\n<pre><code>type t = Node of t list\nlet rec size = function Node l -&gt; 1 + size_l l\nand size_l = function [] -&gt; 0\n                    | h::r -&gt; size h + size_l r\n</code></pre>\n', 'ViewCount': '481', 'Title': 'Recursive definitions over an inductive type with nested components', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-29T18:24:01.597', 'LastEditDate': '2012-03-29T18:24:01.597', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<logic><coq><type-theory><recursion><proof-assistants>', 'CreationDate': '2012-03-07T17:38:37.210', 'Id': '104'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>It's a known fact that every LTL formula can be expressed by a B\xfcchi $\\omega$-automaton. But, apparently, B\xfcchi automata are a more powerful, expressive model. I've heard somewhere that B\xfcchi automata are equivalent to linear-time $\\mu$-calculus (that is, $\\mu$-calculus with usual fixpoints and only one temporal operator: $\\mathbf{X}$). </p>\n\n<p>Is there an algorithm (constructive proof) of this equality?</p>\n", 'ViewCount': '445', 'Title': u'Equivalence of B\xfcchi automata and linear $\\mu$-calculus', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-14T13:06:54.697', 'LastEditDate': '2012-07-14T13:06:54.697', 'AnswerCount': '2', 'CommentCount': '13', 'Score': '20', 'PostTypeId': '1', 'OwnerUserId': '147', 'Tags': '<logic><automata><formal-methods><linear-temporal-logic><buchi-automata>', 'CreationDate': '2012-03-07T20:53:40.587', 'FavoriteCount': '4', 'Id': '108'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>De Morgan's Law is often introduced in an introductory mathematics for computer science course, and I often see it as a way to turn statements from AND to OR by negating terms.</p>\n\n<p>Is there a more intuitive explanation for why this works rather than just remembering truth tables? To me this is like using black magic, what's a better way to explain this so that it makes sense to a less mathematically inclined individual? </p>\n", 'ViewCount': '1107', 'Title': "What is an intuitive way to explain and understand De Morgan's Law?", 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:28:15.127', 'LastEditDate': '2012-04-22T16:28:15.127', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '351', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '5', 'Tags': '<logic><discrete-mathematics><didactics>', 'CreationDate': '2012-03-14T06:57:17.257', 'Id': '350'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I\'ve always thought vaguely that the answer to the above question was affirmative along the following lines. G\xf6del\'s incompleteness theorem and the undecidability of the halting problem both being negative results about decidability and established by diagonal arguments (and in the 1930\'s), so they must somehow be two ways to view the same matters. And I thought that Turing used a universal Turing machine to show that the halting problem is unsolvable. (See also <a href="http://math.stackexchange.com/questions/108964/halting-problem-and-universality">this math.SE</a> question.)</p>\n\n<p>But now that (teaching a course in computability) I look closer into these matters, I am rather bewildered by what I find. So I would like some help with straightening out my thoughts. I realise that one one hand G\xf6del\'s diagonal argument is very subtle: it needs a lot of work to construct an arithmetic statement that can be interpreted as saying something about it\'s own derivability. On the other hand the proof of the undecidability of the halting problem I found <a href="http://en.wikipedia.org/wiki/Halting_problem#Sketch_of_proof">here</a> is extremely simple, and doesn\'t even explicitly mention Turing machines, let alone the existence of universal Turing machines.</p>\n\n<p>A practical question about universal Turing machines is whether it is of any importance that the alphabet of a universal Turing machine be the same as that of the Turing machines that it simulates. I thought that would be necessary in order to concoct a proper diagonal argument (having the machine simulate itself), but I haven\'t found any attention to this question in the bewildering collection of descriptions of universal machines that I found on the net. If not for the halting problem, are universal Turing machines useful in any diagonal argument?</p>\n\n<p>Finally I am confused by <a href="http://en.wikipedia.org/wiki/Halting_problem#Relationship_with_G.C3.B6del.27s_incompleteness_theorem">this further section</a> of the same WP article, which says that a weaker form of G\xf6del\'s incompleteness follows from the halting problem: "a complete, consistent and sound axiomatization of all statements about natural numbers is unachievable" where "sound" is supposed to be the weakening. I know a theory is consistent if one cannot derive a contradiction, and a complete theory about natural numbers would seem to mean that all true statements about natural numbers can be derived in it; I know G\xf6del says such a theory does not exist, but I fail to see how such a hypothetical beast could possibly fail to be sound, i.e., also derive statements which are false for the natural numbers: the negation of such a statement would be true, and therefore by completeness also derivable, which would contradict consistency.</p>\n\n<p>I would appreciate any clarification on one of these points.</p>\n', 'ViewCount': '2098', 'Title': u"Is there any concrete relation between G\xf6del's incompleteness theorem, the halting problem and universal Turing machines?", 'LastActivityDate': '2012-03-21T06:56:38.617', 'AnswerCount': '4', 'CommentCount': '4', 'AcceptedAnswerId': '585', 'Score': '37', 'PostTypeId': '1', 'OwnerUserId': '136', 'Tags': '<computability><logic>', 'CreationDate': '2012-03-15T16:43:28.693', 'FavoriteCount': '9', 'Id': '419'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>A drink dispenser requires the user to insert a coin ($\\bar c$), then press one of three buttons: $\\bar d_{\\text{tea}}$ requests a cup of tea $e_{\\text{tea}}$, ditto for coffee, and $\\bar r$ requests a refund (i.e. the machine gives back the coin: $\\bar b$). This dispenser can be modeled by the following <a href="http://en.wikipedia.org/wiki/Calculus_of_communicating_systems" rel="nofollow">CCS</a> process:</p>\n\n<p>$$ M \\stackrel{\\mathrm{def}}= c.(d_{\\text{tea}}.\\bar e_{\\text{tea}}.M + d_{\\text{coffee}}.\\bar e_{\\text{coffee}}.M + r.\\bar b.M)$$</p>\n\n<p>A civil war raises the price of coffee to two coins, while the price of tea remains one coin. We want a modified machine that delivers coffee only after two coins, and acquiesces to a refund after either one or two coins. How can we model the modified machine with a CCS process?</p>\n', 'ViewCount': '151', 'Title': 'CCS process for a drink dispenser with two different prices', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-17T17:42:36.120', 'LastEditDate': '2013-09-17T17:42:36.120', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '446', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<logic><concurrency><modelling><process-algebras><ccs>', 'CreationDate': '2012-03-17T00:49:38.620', 'Id': '444'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>To my knowledge, there are three major process algebras that have inspired a vast range of research into formal models of concurrency. These are:</p>\n\n<ul>\n<li>CCS and $\\pi$-calculus both by Robin Milner</li>\n<li>CSP by Tony Hoare and</li>\n<li>ACP by Jan Bergstra and Jan Willem Klop</li>\n</ul>\n\n<p>All three seem to have to this day a quite active following and vast amounts of research has been done on them.</p>\n\n<blockquote>\n  <p>What are the key similarities and differences of these approaches? \n  Why has research in process algebra diverged instead of converged, in the sense that there is no one universal model to unify the field? </p>\n</blockquote>\n', 'ViewCount': '334', 'Title': 'Similarities and differences in major process algebras', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-27T21:07:13.243', 'LastEditDate': '2012-03-26T05:23:03.690', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<logic><concurrency><process-algebras>', 'CreationDate': '2012-03-17T13:58:59.003', 'FavoriteCount': '2', 'Id': '465'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '920', 'Title': 'What is coinduction?', 'LastEditDate': '2012-04-22T15:52:25.520', 'AnswerCount': '2', 'Score': '27', 'PostTypeId': '1', 'OwnerUserId': '31', 'FavoriteCount': '8', 'Body': "<p>I've heard of (structural) induction. It allows you to build up finite structures from smaller ones and gives you proof principles for reasoning about such structures. The idea is clear enough.</p>\n\n<blockquote>\n  <p>But what about coinduction? How does it work? How can one say anything conclusive about an infinite structure?</p>\n</blockquote>\n\n<p>There are (at least) two angles to address, namely, coinduction as a way of defining things and as a proof technique. </p>\n\n<blockquote>\n  <p>Regarding coinduction as a proof technique, what is the relationship between coinduction and bisimulation?</p>\n</blockquote>\n", 'Tags': '<logic><proof-techniques><formal-methods><terminology>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T15:52:25.520', 'CommentCount': '1', 'AcceptedAnswerId': '528', 'CreationDate': '2012-03-19T17:34:08.127', 'Id': '525'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Assume I have two formulae $\\Phi$ and $\\Psi$ (over the same set of atomic propositions $AP$) in <a href="http://en.wikipedia.org/wiki/Computation_tree_logic" rel="nofollow">CTL</a>. We have that $\\Phi \\equiv \\Psi$ iff $Sat_{TS}(\\Phi) = Sat_{TS}(\\Psi)$ for all transition systems $TS$ over $AP$.</p>\n\n<p>Given that there are infinitely many transition systems, it\'s impossible to check them all. I thought about using PNF (Positive Normal Form, allowing negation only next to literals) because judging from its name it should give me the same formula for $\\Phi$ as for $\\Psi$ iff they are equivalent, but I\'m not convinced this works in all cases (you could say, I\'m not convinced PNF is actually a normal form).</p>\n\n<p>For example, take $\\forall \\mathrm{O} \\forall \\lozenge \\Phi_0 \\stackrel{?}{\\equiv} \\forall \\lozenge \\forall \\mathrm{O} \\Phi_0$ (where $\\mathrm{O}$ is the <code>next</code> operator and $\\lozenge$ is the <code>eventually</code> operator). I\'m looking for a way do do this by hand.</p>\n', 'ViewCount': '284', 'Title': 'How can I decide manually whether two CTL formulae are equivalent?', 'LastEditorUserId': '26', 'LastActivityDate': '2013-06-09T13:33:37.627', 'LastEditDate': '2012-03-22T18:25:12.003', 'AnswerCount': '4', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '26', 'Tags': '<logic><model-checking>', 'CreationDate': '2012-03-21T16:09:34.530', 'Id': '616'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '404', 'Title': 'What is beta equivalence?', 'LastEditDate': '2012-04-22T16:20:23.093', 'AnswerCount': '2', 'Score': '9', 'OwnerDisplayName': 'atticae', 'PostTypeId': '1', 'OwnerUserId': '594', 'FavoriteCount': '2', 'Body': '<p>In the script I am currently reading on the lambda calculus, beta equivalence is defined as this:</p>\n\n<blockquote>\n  <p>The $\\beta$-equivalence $\\equiv_\\beta$ is the smallest equivalence that contains $\\rightarrow_\\beta$.</p>\n</blockquote>\n\n<p>I have no idea what that means. Can someone explain it in simpler terms? Maybe with an example?</p>\n\n<p>I need it for a lemma following from the Church-Russer theorem, saying</p>\n\n<blockquote>\n  <p>If M $\\equiv_\\beta$ N then there is a L with M $\\twoheadrightarrow_\\beta$ L and N $\\twoheadrightarrow_\\beta$ L.</p>\n</blockquote>\n', 'Tags': '<logic><terminology><lambda-calculus><type-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:20:23.093', 'CommentCount': '1', 'AcceptedAnswerId': '635', 'CreationDate': '2012-03-21T18:42:56.037', 'Id': '634'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am currently learning the lambda calculus and was wondering about the following two different kinds of writing a lambda term. </p>\n\n<ol>\n<li>$\\lambda xy.xy$  </li>\n<li>$\\lambda x.\\lambda y.xy$</li>\n</ol>\n\n<p>Is there any difference in meaning or the way you apply beta reduction, or are those just two ways to express the same thing?</p>\n\n<p>Especially this definition of pair creation made me wonder:</p>\n\n<blockquote>\n  <p><strong>pair</strong> = $\\lambda xy.\\lambda p.pxy$</p>\n</blockquote>\n', 'ViewCount': '470', 'Title': 'Is there a difference between $\\lambda xy.xy$ and $\\lambda x.\\lambda y.xy$?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-25T16:36:14.043', 'LastEditDate': '2012-03-25T16:36:14.043', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '657', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '594', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2012-03-22T14:20:58.330', 'Id': '653'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1708', 'Title': 'Learning Automated Theorem Proving', 'LastEditDate': '2012-03-31T07:58:46.967', 'AnswerCount': '5', 'Score': '14', 'OwnerDisplayName': 'Guy Coder', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '6', 'Body': '<p><sup><em>I am learning <a href="http://en.wikipedia.org/wiki/Automated_theorem_proving">Automated Theorem Proving</a> / <a href="http://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories">SMT solvers</a> / <a href="http://en.wikipedia.org/wiki/Proof_assistant">Proof Assistants</a> by myself and post a series of questions about the process, starting here.</em></sup>  </p>\n\n<p><sup><em>Note that these topics are not easily digested without a background in (mathematical) logics. If you have problems with basic terms, please read up on those, for instance <a href="http://www.cs.bham.ac.uk/research/projects/lics/">Logics in Computer Science</a> by M. Huth and M. Ryan (in particular chapters one, two and four) or <a href="http://gtps.math.cmu.edu/tttp.html">An Introduction to Mathematical Logic and Type Theory</a> by P. Andrews.</em><br>\n<em>For a short introduction into higher order logic (HOL) see <a href="http://www.lix.polytechnique.fr/Labo/Dale.Miller/papers/AIencyclopedia/">here</a>.</em></sup></p>\n\n<p>I looked at <a href="http://coq.inria.fr/">Coq</a> and read the first chapter of the intoduction to <a href="http://www.cl.cam.ac.uk/research/hvg/isabelle/">Isabelle</a> amongst others; <a href="http://cs.stackexchange.com/q/868/268">Types of Automated Theorem Provers</a></p>\n\n<p>I have known Prolog for a few decades and am now learning F#, so ML, O\'Caml and LISP are a bonus. Haskell is a different beast.</p>\n\n<p>I have the following books</p>\n\n<p><a href="http://books.google.com/books/about/Handbook_of_automated_reasoning.html?id=X3z8ujBRgmEC">"Handbook of Automated Reasoning"</a> edited by Alan Robinson and Andrei Vornkov</p>\n\n<p><a href="http://books.google.com/books/about/Handbook_of_automated_reasoning.html?id=X3z8ujBRgmEC">"Handbook of Practical Logic and Automated Reasoning"</a> by John Harrison</p>\n\n<p><a href="http://www4.in.tum.de/~nipkow/TRaAT/">"Term Rewriting and All That"</a> by Franz Baader and Tobias Nipkow</p>\n\n<ol>\n<li><p>What are the differences between Coq and Isabelle?</p></li>\n<li><p>Should I learn either Isabelle or Coq, or both?</p></li>\n<li><p>Is there an advantage to learning either Isabelle or Coq first?</p></li>\n</ol>\n\n<p><sup><em>Find the series\' next question <a href="http://cs.stackexchange.com/questions/868/types-of-automated-theorem-provers">here</a>.</em></sup></p>\n', 'Tags': '<logic><proof-assistants><automated-theorem-proving><coq>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-15T15:10:57.490', 'CommentCount': '5', 'AcceptedAnswerId': '823', 'CreationDate': '2012-03-27T11:18:38.243', 'Id': '820'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '243', 'Title': 'Polymorphism and Inductive datatypes', 'LastEditDate': '2012-03-30T02:36:02.300', 'AnswerCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '68', 'FavoriteCount': '1', 'Body': u'<p>I\'m curious. I\'ve been working on this datatype in <em>OCaml</em>:</p>\n\n<pre><code>type \'a exptree =\n  | Epsilon\n  | Delta of \'a exptree * \'a exptree\n  | Omicron of \'a\n  | Iota of \'a exptree exptree\n</code></pre>\n\n<p>Which can be manipulated using explicitly typed recursive functions (a feature that has been added quite recently). Example:</p>\n\n<pre><code>let rec map : \'a \'b. (\'a -&gt; \'b) -&gt; \'a exptree -&gt; \'b exptree =\n  fun f -&gt;\n    begin function\n    | Epsilon -&gt; Epsilon\n    | Delta (t1, t2) -&gt; Delta (map f t1, map f t2)\n    | Omicron t -&gt; Omicron (f t)\n    | Iota tt -&gt; Iota (map (map f) tt)\n    end\n</code></pre>\n\n<p>But I\'ve never been able to define it in <em>Coq</em>:</p>\n\n<pre><code>Inductive exptree a :=\n  | epsilon : exptree a\n  | delta : exptree a -&gt; exptree a -&gt; exptree a\n  | omicron : a -&gt; exptree a\n  | iota : exptree (exptree a) -&gt; exptree a\n.\n</code></pre>\n\n<p><em>Coq</em> is whining. It doesn\'t like the last constructor, and says something I don\'t completely understand or agree with:</p>\n\n<pre><code>Error: Non strictly positive occurrence of "exptree" in "exptree (exptree a) -&gt; exptree a".\n</code></pre>\n\n<p>What I can understand is that inductive types using a negation inside their definition like <code>type \'a term = Constructor (\'a term -&gt; \u2026)</code> are rejected, because they would lead to ugly non well-founded beasts like (untyped) \u03bb-terms.\nHowever this particular <code>exptree</code> datatype seems genuine enough: looking at its <em>OCaml</em> definition, it\'s argument <code>\'a</code> is never used in negative positions.</p>\n\n<p>It seems that <em>Coq</em> is overcautious here.\nSo is there really a problem with this particular inductive datatype?\nOr could <em>Coq</em> be slightly more permissive here?</p>\n\n<p>Also, what about other proof assistants, are they able to cope with such an inductive definition (in a natural way)?</p>\n', 'Tags': '<logic><programming-languages><coq><inductive-datatypes>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-30T02:36:02.300', 'CommentCount': '0', 'AcceptedAnswerId': '885', 'CreationDate': '2012-03-28T11:47:06.847', 'Id': '851'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '317', 'Title': 'Types of Automated Theorem Provers', 'LastEditDate': '2012-03-30T07:02:19.973', 'AnswerCount': '1', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '1', 'Body': '<p><sup><em>I am learning <a href="http://en.wikipedia.org/wiki/Automated_theorem_proving" rel="nofollow">Automated Theorem Proving</a> / <a href="http://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories" rel="nofollow">SMT solvers</a> / <a href="http://en.wikipedia.org/wiki/Proof_assistant" rel="nofollow">Proof Assistants</a> by myself and post a series of questions about the process, starting <a href="http://cs.stackexchange.com/questions/820/learning-automated-theorem-proving">here</a>.</em></sup></p>\n\n<p>Which are the relevant automated theorem provers? I found <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;frm=1&amp;source=web&amp;cd=6&amp;ved=0CGgQFjAF&amp;url=http%3A%2F%2Fwww.cs.cornell.edu%2FNuprl%2FPRLSeminar%2FPRLSeminar01_02%2FNogin%2FPRLseminar7b.pdf&amp;ei=Nkx0T-XMMqjc0QGv-Nj_Ag&amp;usg=AFQjCNGslr0mgMKpFQg1NdtEmA-BxY-eTA" rel="nofollow">A Review of Theorem Provers</a></p>\n\n<p>Is this still current?</p>\n\n<p>Which ones are still very active, i.e. which are currently used beyond the group that created it?</p>\n\n<p><sup><em>Find the series\' next question <a href="http://cs.stackexchange.com/questions/879/why-do-some-inference-engines-need-human-assistance-while-others-dont">here</a>.</em></sup></p>\n', 'Tags': '<logic><automated-theorem-proving><proof-assistants>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-30T07:02:19.973', 'CommentCount': '0', 'AcceptedAnswerId': '869', 'CreationDate': '2012-03-29T12:00:18.817', 'Id': '868'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '188', 'Title': "Why do some inference engines need human assistance while others don't?", 'LastEditDate': '2012-03-30T07:02:09.643', 'AnswerCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '3', 'Body': '<p><sup><em>I am learning <a href="http://en.wikipedia.org/wiki/Automated_theorem_proving" rel="nofollow">Automated Theorem Proving</a> / <a href="http://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories" rel="nofollow">SMT solvers</a> / <a href="http://en.wikipedia.org/wiki/Proof_assistant" rel="nofollow">Proof Assistants</a> by myself and post a series of questions about the process, starting <a href="http://cs.stackexchange.com/questions/820/learning-automated-theorem-proving">here</a>.</em></sup></p>\n\n<p>Why is it that automated theorem provers, i.e. <a href="http://en.wikipedia.org/wiki/ACL2" rel="nofollow">ACL2</a>, and SMT solvers do not need human assistance while proof assistants, i.e. <a href="http://en.wikipedia.org/wiki/Isabelle_%28theorem_prover%29" rel="nofollow">Isabelle</a> and <a href="http://en.wikipedia.org/wiki/Coq" rel="nofollow">Coq</a>, do?</p>\n\n<p><sup><em>Find the series\' next question <a href="http://cs.stackexchange.com/questions/882/why-is-unification-so-important-to-inference-engines">here</a>.</em></sup></p>\n', 'Tags': '<logic><proof-assistants><automated-theorem-proving><smt-solvers>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-04T13:44:42.637', 'CommentCount': '0', 'AcceptedAnswerId': '881', 'CreationDate': '2012-03-29T20:51:43.170', 'Id': '879'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '584', 'Title': 'Why is unification so important to inference engines?', 'LastEditDate': '2012-03-30T07:01:26.807', 'AnswerCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '1', 'Body': '<p><sup><em>I am learning <a href="http://en.wikipedia.org/wiki/Automated_theorem_proving">Automated Theorem Proving</a> / <a href="http://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories">SMT solvers</a> / <a href="http://en.wikipedia.org/wiki/Proof_assistant">Proof Assistants</a> by myself and post a series of questions about the process, starting <a href="http://cs.stackexchange.com/questions/820/learning-automated-theorem-proving">here</a>.</em></sup></p>\n\n<p>I keep reading about the <a href="http://en.wikipedia.org/wiki/Unification_%28computer_science%29">Unification Algorithm</a>. </p>\n\n<ul>\n<li>What is it and why is so important to <a href="http://en.wikipedia.org/wiki/Inference_engine">Inference Engines</a>?</li>\n<li>Why is it so important to Computer Science?</li>\n</ul>\n', 'Tags': '<logic><proof-assistants><automated-theorem-proving><smt-solvers><unification>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-30T13:35:19.713', 'CommentCount': '0', 'AcceptedAnswerId': '900', 'CreationDate': '2012-03-29T23:05:40.840', 'Id': '882'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I know this is a simple question but can someone show me how\n$(\\lambda y. \\lambda x. \\lambda y.y) (\\lambda x. \\lambda y. y)$ reduces to $\\lambda x. \\lambda y. y$.</p>\n', 'ViewCount': '184', 'Title': 'Lambda Calculus Evaluation', 'LastEditorUserId': '916', 'LastActivityDate': '2012-04-07T11:49:25.153', 'LastEditDate': '2012-04-07T11:49:25.153', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '1013', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '926', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2012-04-03T21:47:38.827', 'Id': '1012'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '315', 'Title': 'Confluence proof for a simple rewriting system', 'LastEditDate': '2012-04-06T04:32:54.413', 'AnswerCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '17', 'FavoriteCount': '2', 'Body': "<p>Assume we have a simple language that consists of the terms:</p>\n\n<ul>\n<li>$\\mathtt{true}$</li>\n<li>$\\mathtt{false}$</li>\n<li>if $t_1,t_2,t_3$ are terms then so is $\\mathtt{if}\\: t_1 \\:\\mathtt{then}\\: t_2 \\:\\mathtt{else}\\: t_3$</li>\n</ul>\n\n<p>Now assume the following logical evaluation rules:</p>\n\n<p>$$ \\begin{gather*}\r\n\\dfrac{}\r\n      {\\mathtt{if}\\: \\mathtt{true} \\:\\mathtt{then}\\: t_2 \\:\\mathtt{else}\\: t_3 \\to t_2}\r\n      \\text{[E-IfTrue]} \\quad\r\n\\dfrac{}\r\n      {\\mathtt{if}\\: \\mathtt{false} \\:\\mathtt{then}\\: t_2 \\:\\mathtt{else}\\: t_3 \\to t_3}\r\n      \\text{[E-IfFalse]} \\\\\r\n\\dfrac{t_1 \\to t_1&#39;}\r\n      {\\mathtt{if}\\: t_1 \\:\\mathtt{then}\\: t_2 \\:\\mathtt{else}\\: t_3 \\to \\mathtt{if}\\: t_1&#39; \\:\\mathtt{then}\\: t_2 \\:\\mathtt{else}\\: t_3}\r\n      \\text{[E-If]} \\\\\r\n\\end{gather*} $$</p>\n\n<p>Suppose we also add the following funky rule:</p>\n\n<p>$$\r\n\\dfrac{t_2 \\to t_2&#39;}\r\n      {\\mathtt{if}\\: t_1 \\:\\mathtt{then}\\: t_2 \\:\\mathtt{else}\\: t_3 \\to \\mathtt{if}\\: t_1 \\:\\mathtt{then}\\: t_2&#39; \\:\\mathtt{else}\\: t_3}\r\n      \\text{[E-IfFunny]}\r\n$$</p>\n\n<p>For this simple language with the given evaluation rules I wish to prove the following:</p>\n\n<p><strong>Theorem: If $r \\rightarrow s$ and $r \\rightarrow t$ then there is some term $u$ such that $s \\rightarrow u$ and $t \\rightarrow u$.</strong></p>\n\n<p>I am proving this by induction on the structure of $r$. Here is my proof so far, it all worked out well, but I am stuck at the very last case. It seems like induction on the structure of $r$ is not sufficing, can anyone help me out?</p>\n\n<p><em>Proof.</em> By induction on $r$, we will seperate all the forms that $r$ can take:</p>\n\n<ol>\n<li>$r$ is a constante, nothing to prove since a normal form does not evaluate to anything.</li>\n<li>$r=$ if true then $r_2$ else $r_3$. (a) both derivations were done with the E-IfTrue rule. In this case $s=t$, so there is nothing to prove. (b) one deriviation was done with the E-IfTrue rule, the other with the E-Funny rule. Assume $r \\rightarrow s$ was done with E-IfTrue, the other case is equivalently proven. We now know that $s = r_2$. We also know that $t =$ if true then $r&#39;_2$ else $r_3$ and that there exists some deriviation $r_2 \\rightarrow r&#39;_2$ (the premise). If we now choose $u = r&#39;_2$, we conclude the case.</li>\n<li>$r=$ if false then $r_2$ else $r_3$. Equivalently proven as above.</li>\n<li>$r=$ if $r_1$ then $r_2$ else $r_3$ with $r_1 \\neq $ true or false. (a) both deriviations were done with the E-If rule. We now know that $s =$ if $r&#39;_1$ then $r_2$ else $r_3$ and $t =$ if $r&#39;&#39;_1$ then $r_2$ else $r_3$. We also know that there exists deriviations $r_1 \\rightarrow r&#39;_1$ and $r_1 \\rightarrow r&#39;&#39;_1$ (the premises). We can now use the induction hypothese to say that there exists some term $r&#39;&#39;&#39;_1$ such that $r&#39;_1 \\rightarrow r&#39;&#39;&#39;_1$ and $r&#39;&#39;_1 \\rightarrow r&#39;&#39;&#39;_1$. We now conclude the case by saying $u =$ if $r&#39;&#39;&#39;_1$ then $r_2$ else $r_3$ and noticing that  $s \\rightarrow u$ and $t \\rightarrow u$ by the E-If rule. (b) one derivation was done by the E-If rule and one by the E-Funny rule.</li>\n</ol>\n\n<p>This latter case, where one derivation was done by E-If and one by E-Funny is the case I am missing... I can't seem to be able to use the hypotheses.</p>\n\n<p>Help will be much appreciated.</p>\n", 'Tags': '<logic><semantics><proof-techniques><term-rewriting>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-06T04:32:54.413', 'CommentCount': '3', 'AcceptedAnswerId': '1061', 'CreationDate': '2012-04-05T18:36:04.420', 'Id': '1060'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In the discussion around <a href="http://cs.stackexchange.com/q/1157/98">this question</a>, Gilles mentions correctly that any correctness proof of an algorithm that uses arrays has to prove that there are no out-of-bounds array accesses; depending on the runtime model, this would cause a runtime error or access to non-array elements.</p>\n\n<p>One common technique to perform such correctness proofs (at least in undergrad studies and probably in automated verification) is by using <a href="https://en.wikipedia.org/wiki/Hoare_logic">Hoare logic</a>. I am not aware that the standard set of rules containes anything relating to arrays; they seem to be restricted to monadic variables.</p>\n\n<p>I can imagine adding axioms of the form</p>\n\n<p>$\\qquad \\displaystyle \\frac{}{\\{0 \\leq i \\lt A.\\mathrm{length} \\land {P[A[i]/E]} \\}\\ A[i] := E;\\ \\{P\\}}$</p>\n\n<p>However, it is not clear to me how you would deal with an array access on the right hand side, i.e. if it is part of a complex expression $E$ in some statement $x := E$.</p>\n\n<blockquote>\n  <p>How can arrays accesses be modelled in Hoare logic so that the absence of invalid accesses can and has to be proven for program correctness?</p>\n</blockquote>\n\n<p>Answers may assume that we disallow array elements to be used in statements other than $A[i] := E$ or as part of some $E$ in $x := E$ as this does not restrict expressiveness; we can always assign a temporary variable the desired value, i.e. write $t := A[i];\\ \\mathtt{if} ( t &gt; 0 ) \\dots$ instead of $\\mathtt{if} ( A[i] &gt; 0 )\\dots$.</p>\n', 'ViewCount': '317', 'Title': 'How to deal with arrays during Hoare-style correctness proofs', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-10T16:17:41.297', 'LastEditDate': '2012-04-10T16:17:41.297', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '98', 'Tags': '<proof-techniques><semantics><arrays><hoare-logic><software-verification>', 'CreationDate': '2012-04-10T08:00:09.683', 'FavoriteCount': '1', 'Id': '1200'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I would like to know whether a universally-quantified type $T_a$: $$T_a = \\forall X: \\left\\{ a\\in X,f:X\u2192\\{T, F\\} \\right\\}$$ is a sub-type, or special case, of an existentially-quantified type $T_e$ with the same signature: $$T_e = \\exists X: \\left\\{ a\\in X,f:X\u2192\\{T, F\\} \\right\\}$$</p>\n\n<p>I\'d say "yes": If something is true "for all X" ($\\forall X$), then it must also be true "for some X" ($\\exists X$). That is, a statement with \'$\\forall$\' is simply a more restricted version of the same statement with \'$\\exists$\': $$\u2200X, P(X) \\overset?\\implies \u2203X, P(X).$$</p>\n\n<p>Am I wrong somewhere?</p>\n\n<blockquote>\n  <p><strong>Background: Why am I asking this?</strong></p>\n  \n  <p>I am studying existential types in order to understand why and how <a href="http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf">"Abstract [Data] Types Have Existential Type"</a>. I cannot get a good grasp of this concept from theory alone; I need concrete examples, too.</p>\n  \n  <p>Unfortunately, good code examples are hard to find because most programming languages have only limited support for existential types. (For instance, <a href="http://www.haskell.org/haskellwiki/Existential_type">Haskell\'s <code>forall</code></a>, or <a href="http://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html">Java\'s <code>?</code> wildcards</a>.) On the other hand, universally-quantified types are supported by many recent languages via "generics".</p>\n  \n  <p>What\'s worse, <em>generics seems to easily get mixed up with existential types</em>, too, making it even harder to tell apart existential from universal types. <em>I\'m curious why this mix-up occurs so easily.</em> An answer to this question might explain it: If universal types are indeed only a special case of existential types, then it\'s no wonder that generic types, e.g. Java\'s <code>List&lt;T&gt;</code>, can be interpreted either way.</p>\n</blockquote>\n', 'ViewCount': '225', 'Title': 'Are universal types a sub-type, or special case, of existential types?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-13T21:58:00.160', 'LastEditDate': '2012-04-20T10:20:47.280', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '12', 'OwnerDisplayName': 'stakx', 'PostTypeId': '1', 'Tags': '<logic><type-theory><typing>', 'CreationDate': '2012-01-02T12:55:49.437', 'FavoriteCount': '1', 'Id': '1382'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am trying to learn Lambda calculus from <a href="http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf" rel="nofollow">here</a></p>\n\n<p>and while trying to solve some problems, I got stuck. I was trying to solve the following problem (page 14, excercise 2.6 part (i):</p>\n\n<p>Simplify $M \\equiv (\\lambda xyz.zyx) aa (\\lambda pq. q)$.</p>\n\n<p>My evaluation using the beta rule reduces it to $(\\lambda z. z)$ as follows:\nFirst I replace occurences of $x$ in $M$ by $aa (\\lambda pq. q)$, and then since there are no occurences of $y$ in the resulting $\\lambda$ term, the expression simply evaluates to $(\\lambda z. z)$.</p>\n\n<p>Is my reasoning correct? (Since there were no solutions to these notes, I want to ensure my understanding is correct. Any corrections, will be much appreciated! Thanks in advance.</p>\n', 'ViewCount': '894', 'Title': 'Lambda Calculus beta reduction', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-22T16:08:38.917', 'LastEditDate': '2012-04-22T16:08:38.917', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1199', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2012-04-22T13:03:13.390', 'Id': '1434'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m working through Simon Peyton Jones\' "The Implementation of Functional Programming Languages" and on page 20 I see:</p>\n\n<pre>\nIF TRUE ((&#955;p.p) 3) &#8596; IF TRUE 3         (per &#946; red)   (1)\n                   &#8596; (&#955;x.IF TRUE 3 x)  (per &#951; red)   (2)\n                   &#8596; (&#955;x.3)                          (3)\n</pre>\n\n<p>Step 1 to 2 is explained as &#951;-conversion. But from 2 to 3 it says "The final step is the reduction rule for IF." I\'m not sure what this reduction rule is. </p>\n', 'ViewCount': '213', 'Title': 'Reduction rule for IF?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-10T03:26:39.087', 'LastEditDate': '2012-05-10T03:26:39.087', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '7', 'OwnerDisplayName': 'galaxybeing', 'PostTypeId': '1', 'OwnerUserId': '1335', 'Tags': '<logic><programming-languages><lambda-calculus><term-rewriting><operational-semantics>', 'CreationDate': '2012-05-01T03:47:18.940', 'Id': '1607'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '392', 'Title': 'Example of Soundness & Completeness of Inference', 'LastEditDate': '2012-05-01T08:53:13.963', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '152', 'FavoriteCount': '1', 'Body': '<p>Is the following example correct about whether an <em>inference</em> algorithm is <em>sound</em> and <em>complete</em>? </p>\n\n<p>Suppose we have needles a, b, c in a haystack, and have also an inference algorithm that is designed to find needles.</p>\n\n<ul>\n<li><p><em>sound</em> - Only needles a, b and c are obtained.</p></li>\n<li><p><em>complete</em> - Needles a, b and c are obtained. Other hay may also be obtained.</p></li>\n</ul>\n', 'Tags': '<logic>', 'LastEditorUserId': '31', 'LastActivityDate': '2012-05-09T13:25:12.873', 'CommentCount': '0', 'AcceptedAnswerId': '1610', 'CreationDate': '2012-05-01T08:41:31.287', 'Id': '1609'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1275', 'Title': 'Reason to learn propositional & predicate logic', 'LastEditDate': '2012-05-28T01:27:15.733', 'AnswerCount': '5', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '152', 'FavoriteCount': '6', 'Body': '<p>I can understand the importance that computer scientists or any software development related engineers should have understood the study of basic logics as a basis. </p>\n\n<p>But is there any tasks/jobs that explicitly require the knowledge about these, other than the tasks that require any kind of knowledge representation using <code>Knowledge Base</code>? I want to hear the types of tasks, rather than conceptual responses.</p>\n\n<p>The reason I ask this is just from my curiosity. While CS students have to spend certain amount of time on this subject, some practicality-intensive courses (e.g. <a href="https://www.ai-class.com/" rel="nofollow">AI-Class</a>) skipped this topic entirely. And I just wonder that for example knowing <code>predicate logic</code> might help drawing <code>ER diagram</code> but might not be a requirement.</p>\n\n<hr>\n\n<p>Update 5/27/2012) Thanks for answers. Now I think I totally understand &amp; agree with the importance of <code>logic</code>in CS with its vast amount of application. I just picked the best answer truly from the impressiveness that I got by the solution for <code>Windows</code>\' blue screen issue.</p>\n', 'Tags': '<logic>', 'LastEditorUserId': '152', 'LastActivityDate': '2012-05-28T01:27:15.733', 'CommentCount': '4', 'AcceptedAnswerId': '1638', 'CreationDate': '2012-05-02T18:00:49.113', 'Id': '1636'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '136', 'Title': 'Why are lambda-abstractions the only terms that are values in the untyped lambda calculus?', 'LastEditDate': '2012-05-04T17:11:00.220', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '17', 'FavoriteCount': '1', 'Body': '<p>I am confused about the following claim: "The only values in the untyped lambda calculus are lambda-abstractions".</p>\n\n<p>Why are the other terms not values? What does it mean for a lambda-abstraction to be a value? The first thing that came to my mind was that maybe lambda-abstractions are the only possible normal forms, but this is not true of course, e.g. $(\\lambda x.\\; x)\\;y \\to y$.</p>\n\n<p>Can someone enlighten me?</p>\n', 'Tags': '<logic><lambda-calculus>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-04T17:49:35.677', 'CommentCount': '7', 'AcceptedAnswerId': '1663', 'CreationDate': '2012-05-04T14:23:15.200', 'Id': '1662'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Most of us know the correspondence between <a href="http://en.wikipedia.org/wiki/Combinatory_logic" rel="nofollow">combinatory logic</a> and <a href="http://en.wikipedia.org/wiki/Lambda_calculus" rel="nofollow">lambda calculus</a>. But I\'ve never seen (maybe I haven\'t looked deep enough) the equivalent of "typed combinators", corresponding to the simply typed lambda calculus. Does such thing exist? Where could one find information about it?</p>\n', 'ViewCount': '218', 'Title': 'Is there a typed SKI calculus?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-14T15:47:46.390', 'LastEditDate': '2012-05-14T15:47:16.223', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '1818', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1300', 'Tags': '<logic><reference-request><lambda-calculus><type-theory>', 'CreationDate': '2012-05-13T01:39:47.143', 'Id': '1816'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am trying to understand Hoare logic presented at Wikipedia,\n<a href="http://en.wikipedia.org/wiki/Hoare_logic" rel="nofollow">Hoare logic at Wikipedia</a>\nApparently, if I  understand correctly, a Hoare triple $$\\{P\\}~ C ~\\{Q\\}$$ means</p>\n\n<blockquote>\n  <p>if P just before C, then Q holds immediately after C, as long as C terminates. (A)</p>\n</blockquote>\n\n<p>However, the assignment axiom schema seems to be interpreted in a different way:</p>\n\n<p>$$\\frac{}{\\{P[x/E]\\} ~~x:=E~~   \\{P\\}}$$</p>\n\n<p>The wikipedia says:</p>\n\n<p>The assignment axiom means that the truth of $\\{P[x/E]\\}$ is equivalent to the after-assignment truth of $\\{P\\}$. Thus were $\\{P[x/E]\\}$ true prior to the assignment, by the assignment axiom, then $\\{P\\}$ would be true subsequent to which. Conversely, were $\\{P[x/E]\\}$ false prior to the assignment statement, $\\{P\\}$ must then be false consequently.</p>\n\n<p>I think the Hoare triple only affirms that if P[x/E] before x:=E, then P(x) holds after x:=E. It DOES NOT affirm, by its definition, that if P(x) holds after x:=E, then P[x/E] holds before x:=E. </p>\n\n<p>My naive question is, how can $\\{P[x/E]\\}$ before the assignment can be equivalent to $\\{P\\}$ after the assignment? Does this contradict with point (A) at the beginning of my post?</p>\n', 'ViewCount': '245', 'Title': 'Hoare triple for assignment P{x/E} x:=E {P}', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-16T21:09:01.143', 'LastEditDate': '2012-05-16T21:09:01.143', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '1867', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '694', 'Tags': '<logic><programming-languages><semantics><hoare-logic><program-verification>', 'CreationDate': '2012-05-16T09:09:24.887', 'Id': '1864'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '630', 'Title': 'Can constraint satisfaction problems be solved with Prolog?', 'LastEditDate': '2012-05-31T16:25:50.040', 'AnswerCount': '3', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '1621', 'FavoriteCount': '2', 'Body': '<p>Is <a href="http://iggyfernandez.wordpress.com/2012/05/21/sql-vs-nosql-third-international-nocoug-sql-nosql-challenge-sponsored-by-pythian/">"party attendance"</a> type of problems solvable in Prolog? For example:</p>\n\n<blockquote>\n  <p>Burdock Muldoon and Carlotta Pinkstone both said they would come if Albus Dumbledore came. Albus Dumbledore and Daisy Dodderidge both said they would come if Carlotta Pinkstone came. Albus Dumbledore, Burdock Muldoon, and Carlotta Pinkstone all said they would come if Elfrida Clagg came. Carlotta Pinkstone and Daisy Dodderidge both said they would come if Falco Aesalon came. Burdock Muldoon, Elfrida Clagg, and Falco Aesalon all said they would come if Carlotta Pinkstone and Daisy Dodderidge both came. Daisy Dodderidge said she would come if Albus Dumbledore and Burdock Muldoon both came.\n  Whom is needs to be persuaded to attend the party in order to ensure that all her invitees attend?</p>\n</blockquote>\n\n<p>I have tried to express this in GNU Prolog:</p>\n\n<pre><code>attend(BM) :- attend(AD).\nattend(CP) :- attend(AD).\nattend(AD) :- attend(CP).\nattend(DD) :- attend(CP). \nattend(AD) :- attend(EC).\nattend(BM) :- attend(EC).\nattend(CP) :- attend(EC). \nattend(CP) :- attend(FA).\nattend(DD) :- attend(FA).\nattend(BM) :- attend(CP),attend(DD).\nattend(EC) :- attend(CP),attend(DD).\nattend(FA) :- attend(CP),attend(DD).\nattend(DD) :- attend(AD),attend(BM).\n\nattend(FA). /* try different seed invitees in order to see if all would attend*/\n\n/* input:\nwrite(\'invited:\'),nl,\n  attend(X),write(X),nl,\n  fail.*/\n</code></pre>\n\n<p>I\'m experiencing stack overflow (no pun), and have no knowledge of prolog evaluation, this is why I\'m asking.</p>\n\n<p>Generally speaking, this problem can be cast into Boolean CNF satisfaction formula (with 6 boolean variables). Therefore, does the prolog perspective have any merit?</p>\n', 'Tags': '<logic><constraint-programming><prolog><logic-programming>', 'LastEditorUserId': '1621', 'LastActivityDate': '2012-06-01T18:39:25.400', 'CommentCount': '3', 'AcceptedAnswerId': '2086', 'CreationDate': '2012-05-23T21:21:24.983', 'Id': '2031'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '267', 'Title': 'Simple explanation as to why certain computable functions cannot be represented by a typed term?', 'LastEditDate': '2012-05-26T14:40:07.843', 'AnswerCount': '3', 'Score': '7', 'OwnerDisplayName': 'ixtmixilix', 'PostTypeId': '1', 'OwnerUserId': '1693', 'FavoriteCount': '1', 'Body': '<p>Reading the paper <a href="ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf">An Introduction to the Lambda Calculus</a>, I came across a paragraph I didn\'t really understand, on page 34 (my italics):</p>\n\n<blockquote>\n  <p>Within each of the two paradigms there are several versions of typed\n  lambda calculus. In many important systems, especially those a la\n  Church, it is the case that terms that do have a type always possess a\n  normal form. By the unsolvability of the halting problem this\n  implies that not all computable functions can be represented by a\n  typed term, see Barendregt (1990), Theorem 4.2.15. This is not so bad\n  as it sounds, because in order to find such computable functions that\n  cannot be represented, one has to stand on one\'s head. For example in\n  2, the second order typed lambda calculus, only those partial\n  recursive functions cannot be represented that happen to be total,\n  but not provably so in mathematical analysis (second order\n  arithmetic).</p>\n</blockquote>\n\n<p>I am familiar with most of these concepts, but not the concept of a partial recursive function, nor the concept of a provably total function. However, this is not what I am interested in learning.</p>\n\n<p>I am looking for a simple explanation as to why certain computable functions cannot be represented by a typed term, as well as to why such functions can only be found \'by standing on one\'s head.\'</p>\n', 'Tags': '<computability><logic><lambda-calculus><type-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-27T11:43:59.000', 'CommentCount': '0', 'CreationDate': '2012-05-25T17:39:06.803', 'Id': '2092'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '165', 'Title': 'Depth-2 circuits with OR and MOD gates are not universal?', 'LastEditDate': '2012-05-28T00:53:31.890', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1661', 'FavoriteCount': '1', 'Body': '<p>It is well-known that every boolean function $f:\\{0,1\\}^n\\to \\{0,1\\}$ can be realized using a boolean circuit of depth 2 (over the variables, their negation and constant values) containing AND gates in the first level and one single OR gate in the upper level; this is simply the <a href="http://en.wikipedia.org/wiki/Disjunctive_normal_form" rel="nofollow">DNF representation</a> of $f$.</p>\n\n<p>Another type of gate which is of great interest in circuit complexity is the $MOD_m$ gate. The usual definition is the following:</p>\n\n<p>$$\\mathrm{MOD}_m(x_1,\\dots,x_k)=\\cases{\n  1 &amp; if \\(\\sum x_i \\equiv 0 \\mod m\\) \\\\\n  0 &amp; if \\(\\sum x_i \\not\\equiv 0 \\mod m\\) \\\\\n}$$</p>\n\n<p>These gates sometimes have surprising power; for example, any boolean function can be represented by a depth-2 circuit having only $\\mathrm{MOD}_6$ gates (this is folklore but I can elaborate is someone is interested).</p>\n\n<p>However, another folklore is that circuits with a single OR gate at the top and $\\mathrm{MOD}_m$ gates in the bottom layer (with $m$ being fixed once and for all, and in particular being the same for all the gates) is not universal, i.e. for any value of $m$, there are boolean functions that cannot be computed by $\\mathrm{OR} \\circ \\mathrm{MOD}_m$ circuit.</p>\n\n<p>I\'m looking for a proof for this claim, or at least some direction.</p>\n', 'Tags': '<complexity-theory><logic><circuits>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-28T00:53:31.890', 'CommentCount': '8', 'AcceptedAnswerId': '2109', 'CreationDate': '2012-05-27T10:29:22.540', 'Id': '2103'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '338', 'Title': 'How to read typing rules?', 'LastEditDate': '2012-05-29T17:09:34.050', 'AnswerCount': '3', 'Score': '7', 'OwnerDisplayName': 'suls', 'PostTypeId': '1', 'OwnerUserId': '1745', 'FavoriteCount': '1', 'Body': '<p>I started reading more and more language research papers. I find it very interesting and a good way to learn more about programming in general. However, there usually comes a section where I always struggle with (take for instance part three of <a href="http://math.andrej.com/wp-content/uploads/2012/03/eff.pdf">this</a>) since I lack the theoretical background in computer science: Type Rules.</p>\n\n<p>Are there any good books or online resources available to get started in this area? <a href="http://en.wikipedia.org/wiki/Type_rules">Wikipedia</a> is incredibly vague and doesn\'t really help a beginner.</p>\n', 'Tags': '<logic><reference-request><terminology><type-theory>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-29T19:29:45.030', 'CommentCount': '2', 'AcceptedAnswerId': '2160', 'CreationDate': '2012-05-29T07:18:09.443', 'Id': '2155'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>EDIT: ad hoc speed-ups are excluded.</p>\n\n<p>We have the result that <a href="http://homepages.cwi.nl/~rdewolf/resolutionlowerbound.pdf" rel="nofollow">propositional resolution requires exponential time</a>. The resolution result uses the proof of the pigeonhole principle as an example of a proof that takes exponential time. </p>\n\n<p>Let\'s also say we have a hypothetical algorithm M for SAT that runs in polynomial time. \n<strong>EDIT : M is correct, complete, sound, and general-purpose; it contains no ad hoc speed-up rules for the pigeonhole principle or any other theorem that requires exponential length in resolution.</strong> M takes its input in clausal form; we\'ll set up the input like a resolution proof where the consequent is negated to lead to unsatisfiability if the theorem is true. Now let\'s consider how the proof of the pigeonhole principle works in algorithm M with a strong condition C added:</p>\n\n<p>C. We are given that M simply transforms one clause (or set of clauses) to another clause (or set of clauses). Every such transformation is logically sound.</p>\n\n<p>Some questions; please point out the most fatal flaws:</p>\n\n<ol>\n<li>Given condition C above, and since M\'s rule system must be finite, correct, and complete, can we conclude that there is a translation from M\'s rule system to an equivalent set of expansions based on resolution?</li>\n<li>Are we now in a place where we can conclude that M would produce a computation that could be mapped by the translation in point 1 above into an impossible polynomial-time resolution proof of the pigeonhole principle?</li>\n</ol>\n', 'ViewCount': '178', 'Title': 'Resolution complexity versus a constrained SAT algorithm', 'LastEditorUserId': '41', 'LastActivityDate': '2012-06-05T20:21:32.660', 'LastEditDate': '2012-06-05T20:21:32.660', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1295', 'Tags': '<complexity-theory><logic><satisfiability><sat-solvers>', 'CreationDate': '2012-06-05T04:12:51.750', 'FavoriteCount': '1', 'Id': '2230'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I\u2019m working on a compiler for a concatenative language and would like to add type inference support. I understand Hindley\u2013Milner, but I\u2019ve been learning the type theory as I go, so I\u2019m unsure of how to adapt it. Is the following system sound and decidably inferable?</p>\n\n<p>A term is a literal, a composition of terms, a quotation of a term, or a primitive.</p>\n\n<p>$$ e ::= x \\:\\big|\\: e\\:e \\:\\big|\\: [e] \\:\\big|\\: \\dots $$</p>\n\n<p>All terms denote functions. For two functions $e_1$ and $e_2$, $e_1\\:e_2 = e_2 \\circ e_1$, that is, juxtaposition denotes reverse composition. Literals denote niladic functions.</p>\n\n<p>The terms other than composition have basic type rules:</p>\n\n<p>$$\n\\dfrac{}{x : \\iota}\\text{[Lit]} \\\\\n\\dfrac{\\Gamma\\vdash e : \\sigma}{\\Gamma\\vdash [e] : \\forall\\alpha.\\:\\alpha\\to\\sigma\\times\\alpha}\\text{[Quot]}, \\alpha \\text{ not free in } \\Gamma\n$$</p>\n\n<p>Notably absent are rules for application, since concatenative languages lack it.</p>\n\n<p>A type is either a literal, a type variable, or a function from stacks to stacks, where a stack is defined as a right-nested tuple. All functions are implicitly polymorphic with respect to the \u201crest of the stack\u201d.</p>\n\n<p>$$\n\\begin{aligned}\n\\tau &amp; ::= \\iota \\:\\big|\\: \\alpha \\:\\big|\\: \\rho\\to\\rho \\\\\n\\rho &amp; ::= () \\:\\big|\\: \\tau\\times\\rho \\\\\n\\sigma &amp; ::= \\tau \\:\\big|\\: \\forall\\alpha.\\:\\sigma\n\\end{aligned}\n$$</p>\n\n<p>This is the first thing that seems suspect, but I don\u2019t know exactly what\u2019s wrong with it.</p>\n\n<p>To help readability and cut down on parentheses, I\u2019ll assume that $a\\:b = b \\times (a)$ in type schemes. I\u2019ll also use a capital letter for a variable denoting a stack, rather than a single value.</p>\n\n<p>There are six primitives. The first five are pretty innocuous. <code>dup</code> takes the topmost value and produces two copies of it. <code>swap</code> changes the order of the top two values. <code>pop</code> discards the top value. <code>quote</code> takes a value and produces a quotation (function) that returns it. <code>apply</code> applies a quotation to the stack.</p>\n\n<p>$$\n\\begin{aligned}\n\\mathtt{dup} &amp; :: \\forall A b.\\: A\\:b \\to A\\:b\\:b \\\\\n\\mathtt{swap} &amp; :: \\forall A b c.\\: A\\:b\\:c \\to A\\:c\\:b \\\\\n\\mathtt{pop} &amp; :: \\forall A b.\\: A\\:b \\to A \\\\\n\\mathtt{quote} &amp; :: \\forall A b.\\: A\\:b \\to A\\:(\\forall C. C \\to C\\:b) \\\\\n\\mathtt{apply} &amp; :: \\forall A B.\\: A\\:(A \\to B) \\to B \\\\\n\\end{aligned}\n$$</p>\n\n<p>The last combinator, <code>compose</code>, ought to take two quotations and return the type of their concatenation, that is, $[e_1]\\:[e_2]\\:\\mathtt{compose} = [e_1\\:e_2]$. In the statically typed concatenative language <a href="http://www.cat-language.com/" rel="nofollow">Cat</a>, the type of <code>compose</code> is very straightforward.</p>\n\n<p>$$\n\\mathtt{compose} :: \\forall A B C D.\\: A\\:(B \\to C)\\:(C \\to D) \\to A\\:(B \\to D)\n$$</p>\n\n<p>However, this type is too restrictive: it requires that the production of the first function <em>exactly match</em> the consumption of the second. In reality, you have to assume distinct types, then unify them. But how would you write that type?</p>\n\n<p>$$ \\mathtt{compose} :: \\forall A B C D E. A\\:(B \\to C)\\:(D \\to E) \\to A \\dots $$</p>\n\n<p>If you let $\\setminus$ denote a <em>difference</em> of two types, then I <em>think</em> you can write the type of <code>compose</code> correctly.</p>\n\n<p>$$\n\\mathtt{compose} :: \\forall A B C D E.\\: A\\:(B \\to C)\\:(D \\to E) \\to A\\:((D \\setminus C)\\:B \\to ((C \\setminus D)\\:E))\n$$</p>\n\n<p>This is still relatively straightforward: <code>compose</code> takes a function $f_1 : B \\to C$ and one $f_2 : D \\to E$. Its result consumes $B$ atop the consumption of $f_2$ not produced by $f_1$, and produces $D$ atop the production of $f_1$ not consumed by $f_2$. This gives the rule for ordinary composition.</p>\n\n<p>$$\n\\dfrac{\\Gamma\\vdash e_1 : \\forall A B.\\: A \\to B \\quad \\Gamma\\vdash e_2 : \\forall C D. C \\to D}{\\Gamma\\vdash e_1 e_2 : ((C \\setminus B)\\:A \\to ((B \\setminus C)\\:D))}\\text{[Comp]}\n$$</p>\n\n<p>However, I don\u2019t know that this hypothetical $\\setminus$ actually corresponds to anything, and I\u2019ve been chasing it around in circles for long enough that I think I took a wrong turn. Could it be a simple difference of tuples?</p>\n\n<p>$$\n\\begin{align}\n\\forall A. () \\setminus A &amp; = () \\\\\n\\forall A. A \\setminus () &amp; = A \\\\\n\\forall A B C D. A B \\setminus C D &amp; = B \\setminus D \\textit{ iff } A = C \\\\\n\\text{otherwise} &amp; = \\textit{undefined}\n\\end{align}\n$$</p>\n\n<p>Is there something horribly broken about this that I\u2019m not seeing, or am I on something like the right track? (I\u2019ve probably quantified some of this stuff wrongly and would appreciate fixes in that area as well.)</p>\n', 'ViewCount': '240', 'Title': 'Type inference with product types', 'LastEditorUserId': '41', 'LastActivityDate': '2012-06-13T19:17:41.510', 'LastEditDate': '2012-06-12T18:08:36.097', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '2346', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1821', 'Tags': '<programming-languages><logic><compilers><type-theory><type-checking>', 'CreationDate': '2012-06-11T04:14:50.140', 'Id': '2326'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>In Logic In Computer Science (2nd Edition - Michael Huth and Mark Ryan), exercise 2.4.12.k is the following:</p>\n\n<blockquote>\n  <p>For each of the formulas of predicate logic below, either find a model which\n  does not satisfy it, or prove it is valid. </p>\n</blockquote>\n\n<p>This one is difficult: </p>\n\n<blockquote>\n  <p>(\u2200x \u2203y (P(x) \u2192 Q(y))) \u2192 (\u2203y \u2200x (P(x) \u2192 Q(y)))</p>\n</blockquote>\n\n<p>Not only am I not sure how to prove this, I'm not sure whether it is valid or not. I came across this question when revising for an exam and always hit a dead end with it.</p>\n\n<p>Any suggestions or insight is appreciated.</p>\n", 'ViewCount': '158', 'Title': 'Is switching quantifiers allowed in this instance?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-17T00:58:03.923', 'LastEditDate': '2012-06-15T15:07:47.633', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1864', 'Tags': '<logic><logical-validity>', 'CreationDate': '2012-06-15T14:15:47.773', 'Id': '2379'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I was trying to come up with a system that would evaluate bylaws for an organization as to determine their underlying logic.</p>\n\n<p>I think a first-order predicate system would work for representing the rules, which could be translated from the text via part-of-speech tagging and other NLP techniques.  </p>\n\n<p>Is there a systematic way to interpret the first-order logic rules as a whole, or some type of ML architecture that would work as a second layer to find similarities between the elements.</p>\n\n<p>For example,</p>\n\n<blockquote>\n  <p>List of fun activities:</p>\n  \n  <ul>\n  <li>golf</li>\n  <li>coffee break</li>\n  <li>pizza</li>\n  </ul>\n  \n  <p>Bylaws:</p>\n  \n  <ol>\n  <li><p>On Friday, we play golf</p></li>\n  <li><p>On Friday or Saturday, we take a quick coffee break, and if it's Saturday, we get pizza</p></li>\n  </ol>\n</blockquote>\n\n<p>Conclusion: our group has fun on weekends</p>\n\n<p>It sounds far fetched, but I'm curious if it's possible.  I also realize that perhaps more first-order logic would be a better fit for driving the conclusions of the second layer.  </p>\n", 'ViewCount': '80', 'Title': 'Methods to evaluate a system of written rules', 'LastActivityDate': '2012-08-13T22:49:33.717', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '3160', 'Score': '10', 'OwnerDisplayName': 'jonsca', 'PostTypeId': '1', 'OwnerUserId': '88', 'Tags': '<machine-learning><algorithms><pattern-recognition><logic>', 'CreationDate': '2012-02-16T07:32:59.457', 'Id': '2382'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '202', 'Title': 'What is the type theory judgement symbol?', 'LastEditDate': '2012-06-22T09:49:43.210', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1642', 'FavoriteCount': '1', 'Body': '<p>In type theory judgements are often presented with the following syntax:</p>\n\n<p><img src="http://i.stack.imgur.com/7V5r2.png" alt="enter image description here"></p>\n\n<p>My question is what is that symbol in the middle called? All the papers I\'ve found seem to use an image rather than a unicode character so I can\'t look it up. I\'ve also not found any type-theory reference which says what that symbol is (they explain what it means however).</p>\n\n<p>So what character is that symbol and what is its proper name?</p>\n', 'Tags': '<logic><terminology><type-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-22T09:49:43.210', 'CommentCount': '5', 'AcceptedAnswerId': '2439', 'CreationDate': '2012-06-21T18:47:51.477', 'Id': '2437'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I have a problem with the proof for constructing a GNBA (<a href="https://en.wikipedia.org/wiki/Generalized_B%C3%BCchi_automaton" rel="nofollow">generalized nondeterministic B\xfcchi automaton</a>) for a <a href="https://en.wikipedia.org/wiki/Linear_temporal_logic" rel="nofollow">LTL formula</a>:</p>\n\n<p><strong>Theorem:</strong> For any  LTL formula $\\varphi$ there exists a GNBA $G_{\\varphi}$ over alphabet $2^{AP}$ such that:</p>\n\n<ol>\n<li><p>$\\operatorname{Word}(\\varphi)=L_{\\omega}(G_{\\varphi})$.</p></li>\n<li><p>$G_{\\varphi}$ can be costructed in time and space $2^{O(|\\varphi|)}$, where $|\\varphi|$ is the size of $\\varphi$.</p></li>\n<li><p>The number of accepting states of $G_{\\varphi}$ is bounded above by $O(|\\varphi|)$.</p></li>\n</ol>\n\n<p>My problem lies in the proof of (2), that is, in the proof it says that the number of states in $G_{\\varphi}$ is bounded by  $2^{|\\operatorname{subf}(\\varphi)|}$ but since $|\\operatorname{subf}(\\varphi)| \\leq 2\\cdot|\\varphi|$ (where $\\operatorname{subf}(\\varphi)$ is the set of all subformulae) the number of states is bounded by  $2^{O(|\\varphi|)}$. </p>\n\n<p>But why does $|\\operatorname{subf}(\\varphi)| \\leq 2\\cdot|\\varphi|$ hold? </p>\n', 'ViewCount': '75', 'Title': 'Time to construct a GNBA for LTL formula', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-30T12:27:09.250', 'LastEditDate': '2012-06-30T12:27:09.250', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2533', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1999', 'Tags': '<logic><automata><formal-methods><model-checking><linear-temporal-logic>', 'CreationDate': '2012-06-28T17:27:44.363', 'Id': '2531'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Consider the <a href="http://en.wikipedia.org/wiki/Kripke_structure" rel="nofollow">Kripke structure</a>:\n$$\n\\begin{array}{ccccccc}\n  \\to &amp; (p, \\neg q) &amp; \\to &amp; (\\neg p, \\neg q) &amp; \\to &amp; (\\neg p, q) \\\\\n  &amp; \\circlearrowright &amp; &amp; \\circlearrowright &amp; &amp; \\circlearrowright &amp; \\\\\n\\end{array}\n$$</p>\n\n<p>where $(p, \\neg q)$ means \u201c$p$ and not $q$\u201d and $\\circlearrowright$ is a self loop. We number the states $s_1, s_2, s_3$ from left to right.\nNow consider the three <a href="http://en.wikipedia.org/wiki/Linear_temporal_logic" rel="nofollow">LTL</a> properties:\n$$\n\\begin{array}{ll}\n  M \\vDash \\mathbf{G}\\,\\mathbf{F}\\,p \\to \\mathbf{G}\\,\\mathbf{F}\\,q &amp; \\text{false} \\\\\n  M \\vDash \\mathbf{G}\\,\\mathbf{F}\\,p &amp; \\text{false} \\\\\n  M \\vDash \\mathbf{G}\\,\\mathbf{F}\\,q &amp; \\text{false} \\\\\n\\end{array}$$</p>\n\n<p>The oddity is this: how can $\\text{false} \\to \\text{false}$ be false?</p>\n\n<p>P.S.: I am sure of the results because I used NuSMV with the following code:</p>\n\n<pre><code>MODULE main\nVAR\n   state : {a, b, c};\n   p : boolean;\n   q : boolean;\n\nASSIGN\n   init(state) := a;\n   next(state) := \n       case\n         state=a : {a,b};\n         state=b : c;\n         state=c : c;\n   esac;\np :=\n  case\n    state=a : TRUE;\n    state=b : FALSE;\n    state=c : FALSE;\n  esac;\nq :=\n  case\n    state=a : FALSE;\n    state=b : FALSE;\n    state=c : TRUE;\n  esac;\n\nLTLSPEC \n   ((G ( F p = TRUE)) -&gt;  (G ( F q = TRUE)))\nLTLSPEC \n   (G ( F p = TRUE))\nLTLSPEC\n   (G ( F q = TRUE))\n</code></pre>\n', 'ViewCount': '131', 'Title': 'Why is GFp -> GFq false in LTL, even though GFp and GFq are false?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-04T08:00:08.620', 'LastEditDate': '2012-06-30T00:58:24.300', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2012', 'Tags': '<logic><modal-logic><linear-temporal-logic>', 'CreationDate': '2012-06-29T18:59:41.583', 'FavoriteCount': '1', 'Id': '2548'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>There are obvious analogs (pardon the pun) between Boolean algebra and algebra. They have similar laws, operators and properties. I can't figure out why Karnaugh Maps and sum of products, which are used to derive a Boolean function from a truth table, doesn't have an equivalent in algebra.  Perhaps it does, but I haven't seen it. </p>\n\n<p>My only explanation is that if it were possible, you could theoretically find a function for any arbitrary series of numbers (0, 2, 4, 6, 8 f(n)=2n). Thus, you could solve a ton of very difficult problems. I'm not necessarily looking for a formal proof but an explanation. </p>\n\n<p>Right now, I am having fleeting ideas that it has something to do with infinite outputs and inputs, something to do with place values, or true or false equivalents in algebra. There's something here that's difficult to put my finger on.</p>\n", 'ViewCount': '435', 'Title': 'Can truth tables be used in non-boolean algebra to derive functions?', 'LastEditorUserId': '2029', 'LastActivityDate': '2012-09-16T01:05:18.613', 'LastEditDate': '2012-07-01T21:12:14.550', 'AnswerCount': '1', 'CommentCount': '9', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2029', 'Tags': '<algorithms><computability><logic>', 'CreationDate': '2012-06-30T22:00:28.147', 'FavoriteCount': '2', 'Id': '2566'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a problem with the application of the <a href="http://en.wikipedia.org/wiki/Shannon_expansion" rel="nofollow">Shannon expansion</a> for to obtain the negation of a formula boolean, than will need for implement the negation operator on OBDD (<a href="http://en.wikipedia.org/wiki/Binary_decision_diagram" rel="nofollow">Order Binary Decision Diagram</a>) that is, show that:</p>\n\n<p>$\\qquad \\displaystyle \\neg f(x_1,\\ldots,x_n) = (\\neg x_1 \\wedge \\neg f|_{x_1=0}) \\vee  (x_1 \\wedge \\neg f|_{x_1=1})$</p>\n\n<p>where $f|_{x_i=b}$ is the function boolean in which replaces $x_i$ with b, that is:</p>\n\n<p>$\\qquad \\displaystyle f|_{x_i=b}(x_1,\\ldots,x_n)=f(x_1,\\ldots,x_{i-1},b,x_{i+1},\\ldots,x_n)$.</p>\n\n<p>The proof says:</p>\n\n<p>$\\qquad \\displaystyle\\neg f(x_1,\\ldots,x_n) = \\neg((\\neg x_1 \\wedge f|_{x_1=0}) \\vee  (x_1 \\wedge f|_{x_1=1}))$. </p>\n\n<p>Applying the negation (skip the intermediate steps), we get:</p>\n\n<p>$\\qquad \\displaystyle (x_1 \\wedge \\neg x_1) \\vee (\\neg x_1 \\wedge \\neg f|_{x_1=0}) \\vee  (x_1 \\wedge \\neg f|_{x_1=1}) \\vee (\\neg f|_{x_1=0} \\wedge \\neg f|_{x_1=1}) $. </p>\n\n<p>Now $(x_1 \\wedge \\neg x_1)= \\mathrm{false}$ can be dropped, which leads to</p>\n\n<p>$\\qquad \\displaystyle (\\neg x_1 \\wedge \\neg f|_{x_1=0}) \\vee  (x_1 \\wedge \\neg f|_{x_1=1}) \\vee (\\neg f|_{x_1=0} \\wedge \\neg f|_{x_1=1}) $ </p>\n\n<p>which in turn is, finally, equal to  </p>\n\n<p>$\\qquad \\displaystyle (\\neg x_1 \\wedge \\neg f|_{x_1=0}) \\vee  (x_1 \\wedge \\neg f|_{x_1=1})$.</p>\n\n<p>Why does this hold?</p>\n', 'ViewCount': '153', 'Title': "Operations on OBDD: negation through Shannon's expansion", 'LastEditorUserId': '472', 'LastActivityDate': '2012-07-04T11:00:31.067', 'LastEditDate': '2012-07-04T11:00:31.067', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2597', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1999', 'Tags': '<logic><information-theory>', 'CreationDate': '2012-07-03T09:02:20.773', 'Id': '2595'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m looking for a simple calculus that supports reasoning about <a href="http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29">reflection</a>, namely, the introspection and manipulation of running programs.</p>\n\n<blockquote>\n  <p>Is there an untyped $\\lambda$-calculus extension that enables one to convert $\\lambda$-terms into a form that can be syntactically manipulated and then subsequently evaluated?</p>\n</blockquote>\n\n<p>I imagine that the calculus has two main additional terms:</p>\n\n<ul>\n<li>$\\mathtt{reflect}\\ v$: takes $v$ and produces a representation of $v$ amendable to\nsyntactic manipulation.</li>\n<li>$\\mathtt{eval}\\ v$: takes a syntactic representation of a term and evaluates it.</li>\n</ul>\n\n<p>In order to support reflection, a syntactic representation of terms is required. It would look something like:</p>\n\n<ul>\n<li>$\\lambda x.e$ would be represented as a term $(\\mathsf{LAM}\\ R(e))$, where\n$R(e)$ is the reflected version of $e$,</li>\n<li>$e\\ e\'$ would be represented as term $(\\mathsf{APP}\\ R(e)\\ R(e\'))$, and</li>\n<li>$x$ would be represented as $(\\mathsf{VAR}\\ x)$.</li>\n</ul>\n\n<p>With this representation, pattern matching could be used to manipulate terms.</p>\n\n<p>But we run into a problem. $\\mathtt{reflect}$ and $\\mathtt{eval}$ need to be encoded as terms, as does pattern matching. Dealing with this seems to be straightforward,\nadding $\\mathsf{REFLECT}$, $\\mathsf{EVAL}$ and $\\mathsf{MATCH}$, but will I need to add other terms to support the manipulation of these?</p>\n\n<p>There are design choices that need to be made. What should the $R(-)$ function alluded to above do with \nthe body of $\\mathtt{reflect}$ and $\\mathtt{eval}$? Should $R(-)$ transform the body or\nnot?</p>\n\n<p>As I am not so much interested in studying reflection itself -- the calculus would serve as a vehicle for other research -- I do not want to reinvent the wheel.</p>\n\n<blockquote>\n  <p>Are there any existing calculi that match what I have just described?</p>\n</blockquote>\n\n<p>As far as I can tell, calculi such as MetaML, suggested in a comment, go a long way, but they do not include the ability to pattern match and deconstruct code fragments that have already been built.</p>\n\n<p>One thing I would like to be able to do is the following:</p>\n\n<ul>\n<li>$\\mathtt{let}\\ x=\\lambda y.y\\ \\mathtt{in}\\ \\mathtt{reflect}\\ x \n\\to (\\mathsf{LAM}\\ (\\mathsf{VAR}\\ y)\\ (\\mathsf{VAR}\\ y))$</li>\n</ul>\n\n<p>And then perform pattern matching on the result to build a completely different\nexpression. </p>\n\n<p>This is certainly not a conservative extension to the $\\lambda$-calculus and the meta-theory is likely to be ugly, but this is kind of the point for my application. I want to break $\\lambda$-abstractions apart.</p>\n', 'ViewCount': '284', 'Title': '$\\lambda$-calculus with reflection', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-27T06:09:52.923', 'LastEditDate': '2012-07-16T23:37:11.120', 'AnswerCount': '2', 'CommentCount': '8', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<logic><lambda-calculus><semantics><reflection>', 'CreationDate': '2012-07-12T11:26:19.763', 'FavoriteCount': '2', 'Id': '2707'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '147', 'Title': u'Algorithm to translate a deterministic B\xfcchi automaton to LTL (when possible)', 'LastEditDate': '2012-07-14T13:05:53.293', 'AnswerCount': '1', 'Score': '5', 'OwnerDisplayName': 'Ayrat', 'PostTypeId': '1', 'OwnerUserId': '2260', 'Body': u'<p><a href="http://en.wikipedia.org/wiki/Linear_temporal_logic" rel="nofollow">Linear temporal logic</a> and deterministic <a href="http://en.wikipedia.org/wiki/B%C3%BCchi_automaton" rel="nofollow">B\xfcchi automata</a> are incomparable: DBA cannot express $FGa$, and LTL cannot express <em>"at least each odd letter is \'a\'"</em>. But sometimes it is interesting to know whether the language of a DBA can be expressed in LTL.</p>\n\n<p>I need an algorithm that decides whether a language of a given DBA is describable in LTL. Do you know algorithms for that?</p>\n', 'Tags': '<logic><automata><linear-temporal-logic><buchi-automata>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-14T13:05:53.293', 'CommentCount': '5', 'AcceptedAnswerId': '2740', 'CreationDate': '2012-03-02T13:16:26.227', 'Id': '2739'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>At work I\u2019ve been tasked with inferring some type information about a dynamic language. I rewrite sequences of statements into nested <code>let</code> expressions, like so:</p>\n\n<pre><code>return x; Z            =&gt;  x\nvar x; Z               =&gt;  let x = undefined in Z\nx = y; Z               =&gt;  let x = y in Z\nif x then T else F; Z  =&gt;  if x then { T; Z } else { F; Z }\n</code></pre>\n\n<p>Since I\u2019m starting from general type information and trying to deduce more specific types, the natural choice is refinement types. For example, the conditional operator returns a union of the types of its true and false branches. In simple cases, it works very well.</p>\n\n<p>I ran into a snag, however, when trying to infer the type of the following:</p>\n\n<pre><code>function g(f) {\n  var x;\n  x = f(3);\n  return f(x);\n}\n</code></pre>\n\n<p>Which is rewritten to:</p>\n\n<pre><code>\\f.\n  let x = undefined in\n    let x = f 3 in\n      f x\n</code></pre>\n\n<p>HM would infer $\\mathtt{f} : \\mathtt{Int} \\to \\mathtt{Int}$ and consequently $\\mathtt{g} : (\\mathtt{Int} \\to \\mathtt{Int}) \\to \\mathtt{Int}$. The actual type I want to be able to infer is:</p>\n\n<p>$$\\mathtt{g} : \\forall \\tau_1 \\tau_2. \\:(\\mathtt{Int} \\to \\tau_1 \\land \\tau_1 \\to \\tau_2) \\to \\tau_2$$</p>\n\n<p>I\u2019m already using functional dependencies to resolve the type of an overloaded <code>+</code> operator, so I figured it was a natural choice to use them to resolve the type of <code>f</code> within <code>g</code>. That is, the types of <code>f</code> in all its applications together uniquely determine the type of <code>g</code>. However, as it turns out, fundeps don\u2019t lend themselves terribly well to variable numbers of source types.</p>\n\n<p>Anyway, the interplay of polymorphism and refinement typing is problematic. So is there a better approach I\u2019m missing? I\u2019m currently digesting \u201cRefinement Types for ML\u201d and would appreciate more literature or other pointers.</p>\n', 'ViewCount': '147', 'Title': 'Inferring refinement types', 'LastEditorUserId': '41', 'LastActivityDate': '2012-08-02T06:20:29.877', 'LastEditDate': '2012-08-02T06:20:29.877', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2980', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1821', 'Tags': '<programming-languages><logic><type-theory><type-inference>', 'CreationDate': '2012-07-26T23:18:16.810', 'Id': '2919'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>While I am learning a lot from others here at the Computer Science site, I must admit that I don\'t get as much out of some questions and answers since I typically don\'t understand the theorems to the level necessary. I am currently reading <a href="http://rads.stackoverflow.com/amzn/click/0910319375" rel="nofollow">How To Prove It - A Structured Approach</a> which is starting to make the theorems easier to read, but still does not get me to the point of being able to understand the theorems to the point that they add great insight to the question or answer.</p>\n\n<p>For this question <a href="http://cs.stackexchange.com/q/2646/268">Is it possible to always construct a hamiltonian path on a tournament graph by sorting?</a></p>\n\n<p>there is a use of a peroid in the premise.</p>\n\n<blockquote>\n  <p>$\\qquad \\displaystyle a \\leq b \\iff (a,b) \\in E \\lor \\left(\\exists\\, c \\in V. a \\leq c \\land c \\leq b\\right)$</p>\n</blockquote>\n\n<p>What does the period mean? I would be expecting either a comma to mean conjuction or or to mean disjunction, but not a period. I don\'t see how this could be converted to logical statements.</p>\n\n<p>Note: <a href="http://meta.cs.stackexchange.com/users/232/jukka-suomela">Jukka Suomela</a> has already provided the answer in this <a href="http://meta.cs.stackexchange.com/q/493/268">CS meta question</a>.</p>\n', 'ViewCount': '200', 'Title': 'Period in postulate; what does it mean?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-08-02T06:21:18.240', 'LastEditDate': '2012-08-02T06:21:18.240', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2963', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<terminology><logic>', 'CreationDate': '2012-07-31T13:09:20.260', 'Id': '2962'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '291', 'Title': 'Looking for books on creating and understanding theorems targeted at Computer Science', 'LastEditDate': '2012-08-13T05:45:40.903', 'AnswerCount': '6', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '2', 'Body': '<p>In studying logic to understand verifying programs I have found that there are books on logic targeted at Computer Science e.g.</p>\n\n<ul>\n<li><a href="http://rads.stackoverflow.com/amzn/click/052154310X" rel="nofollow">Logic in Computer Science: Modelling and Reasoning about Systems </a></li>\n<li><a href="http://rads.stackoverflow.com/amzn/click/1447141288" rel="nofollow">Mathematical Logic for Computer Science </a></li>\n<li><a href="http://rads.stackoverflow.com/amzn/click/0521701465" rel="nofollow">Computability and Logic </a></li>\n<li><a href="http://rads.stackoverflow.com/amzn/click/0521899575" rel="nofollow">Handbook of Practical Logic and Automated Reasoning </a></li>\n</ul>\n\n<p>With regards to books on understating theorems targeted at Computer Science I find only one that may fit. As I don\'t have the book I can\'t say for sure.</p>\n\n<ul>\n<li><a href="http://rads.stackoverflow.com/amzn/click/081764220X" rel="nofollow">Handbook of Logic and Proof Techniques for Computer Science </a></li>\n</ul>\n\n<p>Are there any books for understating theorems targeted at Computer Science? In other words are there books for understating syntax, semantics and construction of theorems that don\'t rely on a heavy math background and that give examples more from the world of computer science and explain in a style more natural to a person in computer science.</p>\n\n<p>EDIT</p>\n\n<p>After seeking more on this topic I have come upon the phrases "informal mathematics" and "mathematical discourse" which are starting to turn up useful info from Google. In particular the following: <a href="https://sites.google.com/site/clauszinn/verifying-informal-proofs/37_04.pdf?attredirects=0" rel="nofollow">Understanding Informal Mathematical Discourse</a> found at <a href="https://sites.google.com/site/clauszinn/verifying-informal-proofs/" rel="nofollow">Understanding Informal Mathematical Proofs</a></p>\n', 'Tags': '<logic><proof-techniques><books>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-12-03T00:50:57.973', 'CommentCount': '6', 'AcceptedAnswerId': '2969', 'CreationDate': '2012-07-31T14:38:51.147', 'Id': '2965'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am self studying discrete math and I am going through MIT Mathematics for CS lecture notes but they do not have solutions available. I got stuck at <a href="http://www.scribd.com/doc/101941032/3cf" rel="nofollow">Problem 3.14</a> (pages 64-65 of <a href="http://courses.csail.mit.edu/6.042/spring12/part1.pdf" rel="nofollow">this document</a>). The problem is about the construction, given an arbitrary propositional formula $F$, of a proposition $C(F)$ such that:</p>\n\n<ul>\n<li>$C(F)$ is in 3-conjunctive form (3CF), i.e. it is a conjunction of disjunctions of at most literals (a literal is a variable or a negation of a variable);</li>\n<li>$C(F)$ has at most 24 times as many occurrences of variables as $F$;</li>\n<li>$C(F)$ is satisfiable iff $F$ is.</li>\n</ul>\n\n<p>The idea is to introduce a new variable for each operator that occurs in $F$. For example, given\n$$ F_1 = ((P \\oplus Q) \\oplus R) \\vee (\\neg P \\wedge S)) $$\nassign $X_1, X_2, O, A$ to the 4 operators in $F_1$, and define four <em>constraining formulas</em>:\n$$ \\begin{align*}\n C_1^1 &amp;= X_1 \\Leftrightarrow (P \\oplus Q) \\\\\n C_1^2 &amp;= X_2 \\Leftrightarrow (X_1 \\oplus R) \\\\\n C_1^3 &amp;= A \\Leftrightarrow (\\neg P \\wedge S) \\\\\n C_1^4 &amp;= O \\Leftrightarrow (X_2 \\oplus A) \\\\\n\\end{align*} $$\nand $C_1 = C_1^1 \\wedge C_1^2 \\wedge C_1^3 \\wedge C_1^4 \\wedge O$.</p>\n\n<p>The questions are:</p>\n\n<ol>\n<li>Why is $C_1$ satisfiable iff $F_1$ is satisfiable?</li>\n<li>Why is each constraining formula equivalent to a 3CF formula with at most 24 occurrences of variables?</li>\n<li>Generalize from the example to construct $C(F)$ for an arbitrary formula $F$.</li>\n</ol>\n\n<p>For question 1, I don\'t see why $X_1$ is satisfiable.</p>\n\n<p>I think question 2 is wrong, beacuse you can form a 3CF formula with at most 24 occurrences of variables, only if you have a 3-conjunctive <strong>normal</strong> form but here the author only says 3 conjunctive form. </p>\n\n<p>(For 3CNF, 8 different triple terms can be formed using 3 variables with a total of 24 variables, For 3CF, 26 different single,double and triple terms can be formed with a total of ? variables.)</p>\n\n<p>No idea about question 3.</p>\n', 'ViewCount': '201', 'Title': '3CF 3-conjunctive form satisfiability', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-05T12:04:52.527', 'LastEditDate': '2012-08-04T15:49:17.937', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2348', 'Tags': '<logic><satisfiability><3-sat><normal-forms>', 'CreationDate': '2012-08-03T15:14:38.117', 'Id': '3021'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The following predicate logic formula is invalid (<em>i.e.</em> not a tautology):</p>\n\n<p>$\\Bigl[\\forall x \\,\\exists y {\\,.\\,} P(x,y)\\Bigr] \\implies \\Bigl[\\exists y \\, \\forall x {\\,.\\,} P(x,y)\\Bigr]$</p>\n\n<p>Which of the following are counter-models (<em>i.e.</em> counterexamples) for it?</p>\n\n<ol>\n<li>The predicate $P(x,y) \\equiv  \\bigl[ y \\cdot x = 1 \\bigr]$, where the domain of discourse is $\\mathbb{Q}$.</li>\n<li>The predicate $P(x,y) \\equiv \\bigl[ y&lt;x \\bigr]$, where the domain of discourse is $\\mathbb{R}$.</li>\n<li>The predicate $P(x,y) \\equiv \\bigl[ y \\cdot x = 2 \\bigr]$, where the domain of discourse is $\\mathbb{R} \\smallsetminus \\{ 0 \\}$.</li>\n<li>The predicate $P(x,y) \\equiv \\bigl[y \\,x \\,y = x\\bigr]$, where the domain of discourse is $\\{0,1\\}^\\ast$<br> &mdash; that is, the\nset of all binary strings, including the empty string).</li>\n</ol>\n\n<p><strong>Is my answer below true  ?</strong></p>\n\n<p><strong>Answer:</strong>\nI think the first model is not a counter model since 0 is a member of rational numbers there exists no rational y for which $x \\cdot y = 1$. So $\\forall x \\,\\exists y {\\,.\\,} P(x,y)$ is false, thereby validating the conditional for this choice of predicate $P$. Also sentence 4 is not a counter model. The other two are counter-models.</p>\n', 'ViewCount': '468', 'Title': 'Validity of predicate logic formulas', 'LastEditorUserId': '31', 'LastActivityDate': '2013-02-05T08:56:45.870', 'LastEditDate': '2012-10-17T15:16:13.810', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2348', 'Tags': '<logic><logical-validity>', 'CreationDate': '2012-08-04T11:18:12.950', 'Id': '3034'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '311', 'Title': 'Is there a repository for the hierarchy of proofs?', 'LastEditDate': '2012-08-13T05:42:14.743', 'AnswerCount': '4', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '268', 'FavoriteCount': '4', 'Body': '<p>I am self-learning <a href="http://en.wikipedia.org/wiki/Proof_assistant">proof assistants</a> and decided to start on some basic proofs and work my way up. Since proofs are based on other proofs and so form a hierarchy, is there a repository of the hierarchy of proofs?</p>\n\n<p>I know I can pick a particular proof-assistant and analyze its library to extract its hierarchy, however if I want to find the next proof in a chain to prove, I can\'t when it is not in the library.</p>\n\n<p>In my mind I picture a graph, probably a <a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a>, of all of the known mathematical proofs that can be expressed using English statements, not <a href="http://www.billthelizard.com/2009/07/six-visual-proofs_25.html">proofs using pictures</a>. This would be the master map (a map in the sense of starting at one point and traveling to another point via intermediate points), and for a particular proof assistant, one would have a subgraph of the master map. Then if one wanted to create a proof using a proof assistant found on the master not on the subgraph, by comparing the two graphs one could get an idea of the work needed to create the missing proof(s) for the proof assistant. </p>\n\n<p>I am aware that mathematical proofs are not necessarily easily convertable for use with a proof assistant, however having a general idea of what to do is much better than none at all.</p>\n\n<p>Also by having the master map, I can see if there are mulitple paths from one point to antoher and choose a path that is more amenable for the particualr proof assistant.</p>\n\n<p>EDIT</p>\n\n<p>In searching I found something similar for <a href="http://dlmf.nist.gov/">mathematical functions</a>. I did not find one for proofs at the <a href="http://www.nist.gov/index.html">NIST</a></p>\n', 'Tags': '<reference-request><logic><proof-assistants>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-10T13:35:25.587', 'CommentCount': '4', 'AcceptedAnswerId': '3490', 'CreationDate': '2012-08-08T00:13:21.220', 'Id': '3086'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '205', 'Title': 'Introduction into first order logic verification', 'LastEditDate': '2012-08-13T05:27:52.237', 'AnswerCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2436', 'FavoriteCount': '1', 'Body': '<p>I am trying to teach myself different approaches to software verification. I have read some articles. As far as I learned, propositional logic with temporal generally uses model checking with SAT solvers (in ongoing - reactive systems), but what about first order Logic with temporal? Does it use theorem provers? Or can it also use SAT?</p>\n\n<p>Any pointers to books or articles for beginners in this matter is much appreciated.</p>\n', 'Tags': '<reference-request><logic><formal-methods><sat-solvers><software-verification>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-08-13T05:27:52.237', 'CommentCount': '2', 'AcceptedAnswerId': '3114', 'CreationDate': '2012-08-09T20:52:33.677', 'Id': '3110'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>If we suppose that we start with an instance of $k$-SAT, and try converting the problem to an instance of $(k+m)$-SAT, where there are $(k+m)$ literals per clause, can we guarantee a reduction in the total amount of clauses?</p>\n\n<p><em>I realized after posting that we can\'t guarantee that the number of clauses can be reduced.  However, I wonder if we have $n$ clauses, could we get something like $n/k + O(1)$ clauses by some "reduction" technique?</em></p>\n\n<p>If so, how much can we guarantee the total number of clauses can be reduced by? For instance, if we start with $k$-SAT with $n_k$ clauses, what is the smallest guaranteed $n_{k+m}$, the new amount of clauses, that will result if we convert this instance to $(k+m)$-SAT?</p>\n\n<p>More importantly, how do we carry out this conversion?</p>\n', 'ViewCount': '179', 'Title': 'How much can we reduce the number of clauses by converting from $k$-SAT to $(k+m)$-SAT?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-20T21:25:20.007', 'LastEditDate': '2012-08-21T21:28:54.100', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1667', 'Tags': '<complexity-theory><logic><satisfiability>', 'CreationDate': '2012-08-21T10:18:09.717', 'FavoriteCount': '4', 'Id': '3270'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I was solving exercises on Lambda calculus. However, my solutions are different from the answers and I cannot see what is wrong.</p>\n\n<ol>\n<li><p>Find free variables of $(\\lambda x.xy)x$.<br>\nMy workings: $FV((\\lambda x.xy)x)=FV(\\lambda x.xy) \\cup FV(x)=\\{y\\} \\cup \\{x\\}=\\{x,y\\}$.<br>\nThe model answer: $FV((\\lambda x.xy)x)=\\{x\\}$.</p></li>\n<li><p>Find bound variables of $\\lambda xy.x$.<br>\nMy workings: A variable $y$ has its binding but since it is not present in the body of the $\\lambda$-abstraction it cannot be bound and thus $BV(\\lambda xy.x)=\\{x\\}$ only.<br>\nThe model answer: $BV(\\lambda xy.x)=\\{x, y\\}$.</p></li>\n</ol>\n', 'ViewCount': '232', 'Title': u'Free variables of (\u03bbx.xy)x and bound variables of \u03bbxy.x', 'LastEditorUserId': '29', 'LastActivityDate': '2012-08-26T16:15:56.437', 'LastEditDate': '2012-08-26T16:15:56.437', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '3277', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2598', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2012-08-21T15:48:13.773', 'Id': '3274'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is the following FOL-problem (equality is a logical symbol) \neffectively decidable?</p>\n\n<p><strong>Given.</strong>  A finite equation system $E$ and an equation $s = t$.</p>\n\n<p><strong>Question.</strong>  Is there a substitution $\\sigma$, such that $\\sigma(E)\n\\models \\sigma(s = t)$?</p>\n\n<p><strong>Some useful information.</strong>  </p>\n\n<ol>\n<li><p>Obviously one can restrict $\\sigma$ to be a ground substitution.</p></li>\n<li><p>This problem is decidable:  Given a finite system $E$ of<br>\nground equations and a ground equation $s = t$, does $E \\models s = t$<br>\nhold? (c.f. [1: Corollary 4.3.6]) </p></li>\n</ol>\n\n<p><strong>References</strong></p>\n\n<p>[1] Franz Baader, Tobias Nipkow: Term Rewriting and All That,\n&copy; 1998 Cambridge University Press.</p>\n', 'ViewCount': '90', 'Title': 'Is the validity of some instance of an equational problem decidable?', 'LastEditorUserId': '2626', 'LastActivityDate': '2012-08-25T10:02:52.893', 'LastEditDate': '2012-08-24T20:50:16.470', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '3329', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2626', 'Tags': '<computability><logic><decision-problem><equality>', 'CreationDate': '2012-08-24T11:30:29.003', 'Id': '3312'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In resolution theorem proving, it is normally assumed variables in different clauses are distinct. This is not something that happens automatically; it requires significant extra code and computation to implement. Given that, I\'m looking for a test case for it.</p>\n\n<p>The problem is, in all the test cases I\'ve tried so far, it makes no difference. Presumably it matters only in unusual edge cases. As <a href="http://en.wikipedia.org/wiki/Resolution_%28logic%29">Wikipedia</a> puts it, "variables in different clauses are distinct... Now, unifying Q(X) in the first clause with Q(Y) in the second clause means that X and Y become the same variable anyway."</p>\n\n<p>Are there any known test cases that will actually give the wrong answer if different clauses use the same variables?</p>\n', 'ViewCount': '160', 'Title': 'Distinct variables for different clauses', 'LastActivityDate': '2012-10-01T19:58:13.247', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '3432', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '2739', 'Tags': '<logic><automated-theorem-proving>', 'CreationDate': '2012-09-05T10:35:58.503', 'FavoriteCount': '1', 'Id': '3431'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '154', 'Title': u'The meaning of modulo in \u201cformula modulo a background theory\u201d', 'LastEditDate': '2012-09-05T14:02:06.013', 'AnswerCount': '2', 'Score': '6', 'OwnerDisplayName': 'Cemre', 'PostTypeId': '1', 'OwnerUserId': '2743', 'Body': u'<p>I have been reading some papers where I keep reading stuff like \u201cfirst-order formula modulo a background theory\u201d. Does anyone know what modulo means in this case ? Is it something like \u201cwith respect to\u201d?</p>\n', 'Tags': '<terminology><logic><term-rewriting>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-06T00:12:20.367', 'CommentCount': '0', 'AcceptedAnswerId': '3436', 'CreationDate': '2012-09-05T12:21:36.783', 'Id': '3435'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>The problem is:</p>\n\n<p>$$\\exists x \\forall y (x \\ge y)$$</p>\n\n<p>With a domain of all real positive integers.</p>\n\n<p>The negation is:</p>\n\n<p>$$\\forall x \\exists y (x &lt; y)$$</p>\n\n<p>so, if $y = x + 1$, the negation is true.</p>\n\n<p>That means the negation of the negation (i.e. the original problem) is false.</p>\n\n<p>My question is, that if the original problem is $\\exists x \\forall y (x \\ge y)$, why can't I take $x = y$ and prove the problem true?</p>\n", 'ViewCount': '179', 'Title': 'Negation of nested quantifiers', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-08T14:14:31.510', 'LastEditDate': '2012-09-08T14:14:31.510', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '3464', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2756', 'Tags': '<logic><first-order-logic>', 'CreationDate': '2012-09-08T02:28:48.533', 'Id': '3463'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/3463/negation-of-nested-quantifiers">Negation of nested quantifiers</a>  </p>\n</blockquote>\n\n\n\n<p>The problem is:</p>\n\n<p>\u2203x\u2200y(x \u2265 y)</p>\n\n<p>With a domain of all real positive integers.</p>\n\n<p>The negation is:</p>\n\n<p>\u2200x\u2203y(x &lt; y)</p>\n\n<p>so, if y = x + 1</p>\n\n<p>the negation is true.</p>\n\n<p>That means the negation of the negation (or, the original problem) is false.</p>\n\n<p>My question is, that if the original problem is \u2203x\u2200y(x \u2265 y), why can\'t x = y and prove the problem true?</p>\n', 'ViewCount': '243', 'ClosedDate': '2012-09-09T07:03:27.990', 'Title': 'Predicate Logic Paradox', 'LastActivityDate': '2012-09-08T22:40:18.973', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'david.keck', 'PostTypeId': '1', 'OwnerUserId': '2756', 'Tags': '<logic><discrete-mathematics>', 'CreationDate': '2012-09-07T22:04:13.460', 'Id': '3474'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>General satisfiability (with a few exceptions such as Horn Clauses) is not believed to have an algorithmic solution. However, the following algorithm appears to be a solution for general satisfiability. What exactly is the flaw with the following algorithm?      </p>\n\n<ol>\n<li>Let $W$ be an empty set which will contain all variables that necessarily have to be true or false.</li>\n<li>Let $L$ be the set of clauses.</li>\n<li>Loop through $L$.</li>\n<li>Every time a non-conditional variable<sup>\u2020</sup> is found, remove it from $L$ and insert it into $W$.</li>\n<li>If this leaves an empty AND implication<sup>\u2021</sup>, remove all variables in that empty implication from $L$ and insert into $W$.</li>\n<li>If this leaves an empty OR implication<sup>\u2021</sup>, create new instances of the algorithm, where each instance deals with one variable in the implication (i.e. if the implication is: $x V \\implies y$, create one instance where $x$ is inserted into $W$, one where $y$ is inserted into $W$ and one where $x$ and $y$ are inserted into $W$).</li>\n<li>Set all variables in $W$ to the value they necessarily have to be.</li>\n<li>Reinsert the variables in $W$ in $L$ with their changed values and check if all clauses  are satisfied.</li>\n<li>If satisfiability is met, then return $L$, else return "Not Satisfiable".</li>\n</ol>\n\n<p><sup>\u2020</sup> A non conditional variable is defined as a variable that is necessary true or false, e.g. $\\implies x$ or $\\implies \\neg y$.</p>\n\n<p><sup>\u2021</sup> An empty implication is defined as an implication where one side is empty (e.g. $\\implies x \\wedge y$) or the other side is necessarily true (e.g. $\\mathrm{true} \\vee a \\implies b$.</p>\n\n<p>To get a more intuitive understanding of the algorithm consider the following set of clauses $L$:</p>\n\n<p>$$\\begin{align}\n  a \\wedge b &amp;\\implies c &amp; \\text{(i)} \\\\\n  &amp;\\implies f \\wedge g &amp; \\text{(ii)} \\\\\n  f &amp;\\implies \\neg a &amp; \\text{(iii)} \\\\\n  f \\vee a &amp;\\implies b &amp; \\text{(iv)} \\\\\n  &amp;\\implies c &amp; \\text{(v)} \\\\\n\\end{align}$$</p>\n\n<p>The algorithm will do the following:</p>\n\n<p>1) Since $c$, $f$, $g$ are non-conditional variables, the algorithm will insert them into $W$. $W = \\{c, f, g\\}$.</p>\n\n<p>2) Removing $c$, $f$ and $g$ will leave the empty clauses: $\\implies \\neg a, a \\wedge b, b$. These will be added to $W$. $W = \\{c, f, g, b, \\neg a\\}$.</p>\n\n<p>3) Reinserting the variables into $L$ will result in the first clauses being violated: $a \\wedge b \\implies c$. Since $a$ is false, $c$ is false, meaning clause (v) is violated. The algorithm will return "Not Satisfiable"</p>\n\n<p>I am aware that the algorithm appears confusing. Please feel free to ask for clarification.</p>\n\n<hr>\n\n<p>From comments I now realize that there is no known <em>efficient</em> general satisfiability algorithm. I\'m still interested in feedback about my algorithm. Does it work? How does it compare with common algorithms?</p>\n', 'ViewCount': '238', 'Title': 'A tentative satisfiability algorithm', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-19T00:28:48.400', 'LastEditDate': '2012-09-12T19:31:09.140', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '7', 'OwnerDisplayName': 'user1422', 'PostTypeId': '1', 'Tags': '<algorithms><logic><satisfiability><constraint-programming>', 'CreationDate': '2012-08-15T02:42:26.293', 'FavoriteCount': '1', 'Id': '3516'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>When proving theorems with the superposition calculus, we deal with three kinds of rules:</p>\n\n<ol>\n<li><p>Generating rules: from pair of clauses A and B, generate new clause C while keeping the original pair, e.g. superposition in the general case.</p></li>\n<li><p>Rewriting rules: from clause A generate new clause B, e.g. equality reflexivity, equality factoring; superposition with a unit equation can also be regarded as a rewriting rule.</p></li>\n<li><p>Eliminating rules: delete a clause, e.g. subsumption, tautology elimination.</p></li>\n</ol>\n\n<p>The question is, regarding the second category, can we perform a strict rewrite, <em>replacing</em> the original clause with the new one, or do we have to keep the original <em>as well as</em> the new one? In the case of equality reflexivity it looks like we can do the former, but for equality factoring and superposition with a unit equation it's not immediately clear whether this would preserve completeness.</p>\n\n<p>Is there a general way of knowing which is the case? Or a list of which needs to be done in each case?</p>\n", 'ViewCount': '132', 'Title': 'Redundancy elimination in the superposition calculus', 'LastActivityDate': '2012-09-30T16:43:20.903', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2739', 'Tags': '<logic><automated-theorem-proving>', 'CreationDate': '2012-09-21T09:41:47.380', 'Id': '4653'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '123', 'Title': 'definition of formula validity', 'LastEditDate': '2012-09-25T15:57:33.193', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2879', 'FavoriteCount': '1', 'Body': u'<p>I read in some sources that valid formulas are tautologies (valid under every evaluation). In the others, I read that these are formulas that have conclusions true when premises are true. Are these just equivalent definitions because \u22a8 P \u2192 Q is equivalent to P \u22a8 Q?</p>\n', 'Tags': '<terminology><logic><logical-validity>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-25T15:57:33.193', 'CommentCount': '0', 'AcceptedAnswerId': '4728', 'CreationDate': '2012-09-25T07:55:00.977', 'Id': '4727'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '122', 'Title': 'How many possible assignments does  a CNF sentence have?', 'LastEditDate': '2012-09-25T15:58:33.800', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2962', 'FavoriteCount': '0', 'Body': u"<p>I'm having some trouble understanding the following:</p>\n\n<p>When we look at satisfiability problems in conjunctive normal form, an underconstrained problem is one with relatively few clauses constraining the variables. For eg. here is a randomly generated 3-CNF sentence with five symbols and five clauses. (Each clause contains 3 randomly selected distinct symbols, each of which is negated with 50% probability.)</p>\n\n<pre><code>(\xacD \u2228 \xacB \u2228 C) \u2227 (B \u2228 \xacA \u2228 \xacC) \u2227 (\xacC \u2228 \xacB \u2228 E) \u2227 (E \u2228 \xacD \u2228 B) \u2227 (B \u2228 E \u2228 \xacC)\n</code></pre>\n\n<p>16 of the 32 possible assignments are models of this sentence, so, on an average, it would take just 2 random guesses to find the model.</p>\n\n<p>I don't understand the last line- saying that there are 32 possible assignments. How is it 32? And how are only 16 of them models of the sentence? Thanks.</p>\n", 'Tags': '<logic><combinatorics><satisfiability>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-25T15:58:33.800', 'CommentCount': '0', 'AcceptedAnswerId': '4730', 'CreationDate': '2012-09-25T13:27:01.757', 'Id': '4729'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have a formula $ \\neg((q \\implies \\neg q) \\vee p \\vee (\\neg q \\implies (r \\wedge p))) $.</p>\n\n<p>As it contains 3 subformulas between the $\\vee$'s, how can i put it into a parse tree, as a parse tree contains 2 branches from each node.</p>\n", 'ViewCount': '242', 'Title': 'How to make a parse tree for the following propositional logic formula?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-23T09:21:21.817', 'LastEditDate': '2012-10-07T16:22:33.433', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '4921', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '3088', 'Tags': '<formal-languages><logic><binary-trees><parsing>', 'CreationDate': '2012-10-07T12:33:25.243', 'Id': '4918'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Below is the lambda expression which I am finding difficult to reduce i.e. I am not able to understand how to go about this problem.</p>\n\n<p>$$(\\lambda mn.(\\lambda sz.ms(nsz)))(\\lambda sz.sz)(\\lambda sz.sz)$$</p>\n\n<p>I am lost with this.</p>\n\n<p>if anyone could lead me in the right direction that would be much appreciated</p>\n', 'ViewCount': '355', 'Title': 'Lambda Calculus simplification', 'LastEditorUserId': '2448', 'LastActivityDate': '2013-01-25T20:46:15.443', 'LastEditDate': '2012-10-10T09:00:22.700', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '5', 'OwnerDisplayName': 'Bob Dylan', 'PostTypeId': '1', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2012-10-10T07:26:46.720', 'FavoriteCount': '1', 'Id': '4990'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm trying to figure out why NOT and CNOT gates are not sufficient to create all bijective functions in classical circuits. I have been struggling on this for hours, and just can't make sense of it.</p>\n\n<p>I feel it has something to do with the Toffoli gate, as it contains an (implicit) AND operation, and I feel that's what missing in the NOT and CNOT gates. However I can't find a proper way to actually 'show' this.</p>\n", 'ViewCount': '84', 'Title': 'Universality of NOT and CNOT', 'LastEditorUserId': '683', 'LastActivityDate': '2012-10-18T18:49:28.290', 'LastEditDate': '2012-10-18T18:49:28.290', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '6142', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4238', 'Tags': '<logic><circuits>', 'CreationDate': '2012-10-17T23:01:11.503', 'Id': '6139'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let\'s have two statements</p>\n\n<ol>\n<li><strong>(value > 10)</strong></li>\n<li><strong>(value &lt; 25)</strong></li>\n</ol>\n\n<p>And a list of items with the following values</p>\n\n<ul>\n<li>10</li>\n<li>20</li>\n<li>30</li>\n</ul>\n\n<p>This is what a truth table would give</p>\n\n<pre><code>Item  Value  (value &gt; 10)  (value &lt; 25)\n----  -----  ------------  ------------\n1     10     FALSE         TRUE\n2     20     TRUE          TRUE\n3     30     TRUE          FALSE\n</code></pre>\n\n<h2>Example 1</h2>\n\n<pre><code>Where ALL of the following are TRUE\n   value &gt; 10\n   value &lt; 25\n</code></pre>\n\n<p>This one is easy and we get the following</p>\n\n<pre><code>Where (value &gt; 10) AND (value &lt; 25)\n</code></pre>\n\n<p>The result is then a single value of 20</p>\n\n<h2>Example 2</h2>\n\n<pre><code>Where NONE of the following are TRUE\n   value &gt; 10\n   value &lt; 25\n</code></pre>\n\n<p>This is where I am not sure of what to generate.</p>\n\n<p>This would be "simple" as it is only a NOT of the whole expression</p>\n\n<pre><code>Where NOT ((value &gt; 10) AND (value &lt; 25))\n</code></pre>\n\n<p>However, the result is then two values (10 and 30)</p>\n\n<p>From what someone would think of NONE of the two statements would be something like:</p>\n\n<pre><code>Where NOT ((value &gt; 10) OR (value &lt; 25))\n</code></pre>\n\n<p>And the result would be that no items are produced.</p>\n\n<p>What is the correct meaning of NONE here?</p>\n', 'ViewCount': '44', 'Title': 'Given the phrase "Where NONE of the following are TRUE" and two statements how should a boolean logic be composed?', 'LastActivityDate': '2012-10-19T07:36:08.707', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '6166', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4260', 'Tags': '<logic>', 'CreationDate': '2012-10-18T20:39:18.977', 'Id': '6154'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Consider the following specification technique.</p>\n\n<p>A specification consists of a finite set of triples $\\langle C, A, C\' \\rangle$,\nwhere $A$ is the name of an action and $C, C\'$ are conditions, that is,\npropositional formulas over propositional variables.</p>\n\n<p>Example rules (in a more suggestive notation):</p>\n\n<ul>\n<li>$C_1 \\wedge \\neg(C_2 \\vee C_3) \\stackrel{A_1}{\\longrightarrow} C_1 \\wedge \\neg C_2$</li>\n<li>$C_1 \\vee C_3 \\stackrel{A_2}{\\longrightarrow} C_2 \\vee C_3$</li>\n</ul>\n\n<p>Each triple specifies an event together with its preconditions and postconditions:\nthe semantics can be defined by saying that the system being described has a state space consisting of the set of possible truth value assignments to the propositional variables, and that the actions may take the system from any state in which the precondition of a rule for that action holds to any state in which the postcondition of that same rule holds.</p>\n\n<p>This formalism, or a restriction (e.g. no negation in formulas, or only Horn clauses) will only suit my purposes if software exists that can answer questions such as</p>\n\n<ul>\n<li>Given a condition, which events may happen?</li>\n<li>Given a condition, may it lead to deadlock (a condition in which no event can happen)?</li>\n<li>Given a condition, will it <em>never</em> lead to deadlock?</li>\n<li>Do deadlock conditions exist at all?</li>\n<li>Given a condition, which events can never happen?</li>\n</ul>\n\n<p>in under a second.</p>\n\n<p>My question: what to Google for?</p>\n\n<p>Does this formalism have a name?\nCan it be converted to one for which equivalent problems have been studied?\nI\'m thinking of safe Petri nets, for which I\'ve found <a href="http://www.imsc.res.in/~kamal/old/pc1safe.pdf" rel="nofollow">some</a> <a href="http://people.cs.aau.dk/~srba/courses/MCS-07/safePN-atva04.pdf" rel="nofollow">papers</a>, Hoare logic, dynamic logic, no doubt there is more.</p>\n\n<p>Does such software exist?  How do I Google for it?</p>\n', 'ViewCount': '60', 'Title': 'Spot the formalism (some kind of process logic)', 'LastEditorUserId': '917', 'LastActivityDate': '2012-10-19T17:53:22.403', 'LastEditDate': '2012-10-19T17:53:22.403', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '917', 'Tags': '<logic><model-checking><linear-temporal-logic><hoare-logic>', 'CreationDate': '2012-10-19T17:47:54.750', 'Id': '6174'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've read first-order logic is in general undecidable, and that could be decidable only when working with unary operators. (I think that's propositional logic, correct me if I am wrong)</p>\n\n<p>The question is <strong>why arity leads to undecidable problems?</strong></p>\n\n<p>I would like to see some reference material, or at least some simple <em>example</em> of it, as a way to think in this passage from unary to n-ary and why it leads to undecidable problems. </p>\n", 'ViewCount': '157', 'Title': 'First-order logic arity defines decidability?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-06T10:58:10.357', 'LastEditDate': '2012-11-05T17:16:52.103', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '6489', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1396', 'Tags': '<reference-request><logic><undecidability><satisfiability><first-order-logic>', 'CreationDate': '2012-11-05T15:10:08.337', 'Id': '6488'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '101', 'Title': 'Resolution and incomplete Knowledge Base', 'LastEditDate': '2012-11-05T17:22:38.353', 'AnswerCount': '1', 'Score': '0', 'OwnerDisplayName': 'Aida T.', 'PostTypeId': '1', 'OwnerUserId': '2717', 'Body': '<p>Assume I have an incomplete knowledge base, for example:</p>\n\n<pre><code>(rich(dave), poor(dave))  // dave is either poor or rich\n\n(not rich(dave), not poor(dave))  // dave is not poor and rich at the same time.\n</code></pre>\n\n<p>My questions are:\n1. If I do resolution on the above clauses, will I get the empty clause?  and 2. If Yes, Does that mean my knowledge base is inconsistent?</p>\n', 'Tags': '<logic><knowledge-representation><reasoning>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-05T17:22:38.353', 'CommentCount': '1', 'AcceptedAnswerId': '6492', 'CreationDate': '2012-11-04T17:45:26.043', 'Id': '6491'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '87', 'Title': 'Equivalence of GFp and Gp in LTL', 'LastEditDate': '2012-11-09T08:11:06.900', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '3143', 'FavoriteCount': '1', 'Body': u"<p>In linear time logic, is $\\mathbf{GF}p$ equivalent to $ \\mathbf{G}p$ ?</p>\n\n<p><em>$\\mathbf{GF}p$ means that it is always the case that p is true eventually.</em></p>\n\n<p>Let $\\mathbf{G} p$ be defined as: $\\forall j \\ge0,\\  p$ holds in the suffix $q_j, q_{j+1}, q_{j+2},\\ldots$</p>\n\n<p>and since: \n<em>formula $\u03c6$ holds for state machine $M$ if $\u03c6$ holds for all possible traces of $M$</em></p>\n\n<p>Isn't $\\mathbf{G}$ in $\\mathbf{GF}p$ redundant then? </p>\n", 'Tags': '<logic><linear-temporal-logic>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-09T08:11:06.900', 'CommentCount': '0', 'AcceptedAnswerId': '6533', 'CreationDate': '2012-11-07T11:49:00.443', 'Id': '6532'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there a clear reference, with pseudo-code, on how to go about implementing a Prolog interpreter in a purely functional language? That which I have found so far seems to deal only with imperative languages, is merely a demonstration of Prolog implemented in itself, or offers no concrete algorithm to use for interpretation. I would be very appreciative of an answer.</p>\n', 'ViewCount': '973', 'Title': 'How to implement a prolog interpreter in a purely functional language?', 'LastActivityDate': '2012-11-12T14:52:51.913', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '6622', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '4555', 'Tags': '<functional-programming><prolog><logic-programming>', 'CreationDate': '2012-11-11T20:21:42.027', 'FavoriteCount': '3', 'Id': '6618'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I know that if you try and make the theory</p>\n\n<p>$$\\lambda\\beta+\\{s = t\\ |\\text{ s, t are terms without }\\lambda\\beta\\text{ normal forms}\\}$$</p>\n\n<p>then that theory becomes inconsistent. Are two terms where one is without a $\\lambda\\beta$ normal form also unconvertible in $\\lambda\\beta$, ie can it ever be true that $\\lambda\\beta \\vdash s=t$ if $s$ dosen't have a normal form?</p>\n", 'ViewCount': '67', 'Title': 'Are two terms where one is without a $\\lambda\\beta$ normal form unconvertible in $\\lambda\\beta$?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-13T11:54:01.047', 'LastEditDate': '2012-11-12T11:31:26.100', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1579', 'Tags': '<terminology><logic><lambda-calculus>', 'CreationDate': '2012-11-12T01:03:00.430', 'Id': '6624'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><a href="http://www.scotthyoung.com/blog/mit-challenge/#1" rel="nofollow">http://www.scotthyoung.com/blog/mit-challenge/#1</a></p>\n\n<p>This guy\'s work is mind blowing. He learned the 4 year MIT CS curriculum in 1 year, at home through opencourseware. I want to get into artificial neural networks and machine learning, and I thought doing some of the courses he did would help. Problem is, I have no idea which ones, and in what order! Some of the ones I think I should do are the single and multivariable calc, logic 1 and 2, artificial intelligence, mathematics for cs, etc.</p>\n\n<p>Which ones should I do, and what order?</p>\n\n<p>Thank you all!</p>\n', 'ViewCount': '109', 'ClosedDate': '2012-11-19T14:53:52.027', 'Title': 'What courses to learn for artificial neural networks and machine learning?', 'LastActivityDate': '2012-11-19T06:10:23.297', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4647', 'Tags': '<logic><machine-learning><artificial-intelligence>', 'CreationDate': '2012-11-19T05:28:14.343', 'Id': '6754'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Are there programming languages(or logic) that can implement(or express) a function $f:\\mathbb{N}\\to \\mathbb{N}$ if and only if $f$ is a computable bijective functions?</p>\n', 'ViewCount': '180', 'Title': 'A programming language that can only implement computable bijective functions?', 'LastEditorUserId': '13299', 'LastActivityDate': '2014-02-02T10:36:16.947', 'LastEditDate': '2014-02-02T10:36:16.947', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '6852', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<reference-request><programming-languages><logic><reversible-computing>', 'CreationDate': '2012-11-22T20:32:44.933', 'Id': '6840'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Given $n \\in \\mathbb{N}$ and  $p,q \\in \\mathbb{N}[x_1,\\ldots,x_n]$  one can define the following formula in the language of formal arithmetics</p>\n\n<p>$$\\varphi(n,p,q) = \\forall x_1 \\cdots \\forall x_n : \\neg (p(x_1,\\ldots,x_n) = q(x_1,\\ldots,x_n))$$</p>\n\n<p>I would like to show that there are infinitely many triples $(n,p,q)$ such that neither $\\varphi(n,p,q)$ nor $\\neg \\varphi(n,p,q)$ is a theorem of formal arithmetic. </p>\n\n<p>In showing this I can use the fact that the problem of deciding if a polynomial $r \\in \\mathbb{Z}[x_1,\\ldots,x_n]$ has a natural zero is undecidable.</p>\n\n<p>Knowing the above fact we know that there is a polynomial $r \\in \\mathbb{Z}[x_1,\\ldots,x_n]$ such that neither $$\\varphi' = \\forall x_1 \\cdots \\forall x_n : \\neg (r(x) = 0)$$ nor $\\neg \\varphi'$ is a theorem. (Here the quantifiers are over the naturals which I am not sure if I can use deliberately?)</p>\n\n<p>Once we have such $r$ we can write it as $$r(x_1,\\ldots,x_n) = p(x_1,\\ldots,x_r) - q(x_1,\\ldots,x_n)$$ for $p,q \\in \\mathbb{N}[x_1,\\ldots,x_n]$ and hence $\\varphi(n,p,q)$ and $\\neg \\varphi(n,p,q)$ are also not theorems since $\\varphi$ is logically equivalent to $\\varphi'$ and we have shown that this is not a theorem.</p>\n\n<p>Once we have one such triple $(n,p,q)$ we have infinitely many of them since we can just take $(n,p+k,q+k)$ for $k \\in \\mathbb{N}.$</p>\n\n<p>Since I never did such things before I am wondering if the above reasoning is correct?</p>\n", 'ViewCount': '105', 'Title': "Question related to Hilbert's 10th problem", 'LastEditorUserId': '3092', 'LastActivityDate': '2012-12-23T05:46:13.213', 'LastEditDate': '2012-11-28T14:42:50.287', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '3092', 'Tags': '<computability><logic><undecidability>', 'CreationDate': '2012-11-28T14:33:42.353', 'Id': '6993'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '105', 'Title': 'How is verifying whether an assignment satisfies a boolean formula possible in polynomial time?', 'LastEditDate': '2012-12-03T21:32:10.107', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2860', 'FavoriteCount': '1', 'Body': '<p>How can I prove that I can verify whether a boolean assignment of variables $a$ satisfies some boolean formmula $\\phi$ in polynomial time?</p>\n\n<p>I know that we can just plug the boolean assignment into the formula, but this seems to be a very high-level description, and I am not sure that it is a reliable one since we must simplify the formula.</p>\n', 'Tags': '<complexity-theory><logic><satisfiability>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-03T21:38:26.133', 'CommentCount': '0', 'AcceptedAnswerId': '7135', 'CreationDate': '2012-12-03T21:03:03.350', 'Id': '7134'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '207', 'Title': 'Has someone seen this structure before?', 'LastEditDate': '2012-12-07T11:19:19.687', 'AnswerCount': '0', 'Score': '3', 'OwnerDisplayName': u'Enrique P\xe9rez Arnaud', 'PostTypeId': '1', 'OwnerUserId': '4898', 'FavoriteCount': '1', 'Body': '<p>I am working <a href="https://github.com/enriquepablo/terms/blob/master/terms/core/tests/shegets.test" rel="nofollow">1</a> with a certain structure,\nand I wonder if someone has seen it before.\nI am no mathematician, so all I can say is that\nI will do my best to describe this structure.\nIt is actually very simple.\nI am sure I have seen it (and its interpretation) somewhere, years ago,\nperhaps in some old first year university textbook on the philosophy of language,\nbut haven\'t been able to find it.</p>\n\n<p>The structure is a first order theory, with predicates similar to those\nof a formal set theory (of the ZFC type).\nThe main difference with set theory is that it doesn\'t incorporate\nthe axioms Fraenkel called "constructive"\n(e.g. in the introduction to Paul Bernays\' "Axiomatic set theory" [2]),\nand limits itself to the basic axioms of equality and extensionality\nand definition of subset.</p>\n\n<p>Appart from this, the theory only defines a tuple operator and a few primitive atoms (see <a href="https://github.com/enriquepablo/terms/blob/master/terms/core/tests/shegets.test" rel="nofollow">1</a>, the "words" section). This, and a few relations among these atoms (given by the quasy-set-theoretic predicates outlined above),\nresult in a very simple and limited structure,\nconsistent and complete - as its full expansion is just a handful of sentences.</p>\n\n<p>This structure is used by extending it with new ad hoc atoms, relations among the atoms, and rules (implications),\nto model natural language "texts".\nThe interesting thing here is to model assertive, factual natural sentences\nas tuples, instead of as actual formal sentences.\nAs an example, we might have</p>\n\n<p>(john loves sue) belongs_to fact.</p>\n\n<p>Here, \'john\', \'loves\', \'sue\', and \'fact\' would be atomic terms,\nindividuals; \'(john loves sue)\' would be an operation, valued as an individual;\n\'()\' would be the tuple operator; and \'belongs_to\' would be a predicate symbol.</p>\n\n<p>This allows us to reason about (sufficient enough) sentences of the natural language\nwithout any restriction,\nand use first order variables indistinctly for "facts", "verbs", "nouns", or "names".</p>\n\n<p>I oppose this to the idea of representing natural sentences\nas formal sentences, using predicate symbols to represent all verbs,\nand running to limitations with classes, quantification of predicates, and Russell\'s paradox.</p>\n\n<p>"Copular" sentences (formed with copular verbs, such as "to be")\nare excluded from the above, and are represented as formal sentences;\ni.e., the formal predicates are interpreted as the copular verbs.\nSo "a person is a thing", or "john is a person", might be expressed as:</p>\n\n<p>person subset_of thing.</p>\n\n<p>john belongs_to person.</p>\n\n<p>And that\'s it, more or less.</p>\n\n<p>Does this make any sense?\nMy memory may have failed me and I may have implemented some deranged half baked scheme;\nOn the other hand, I do think that my work with it is allowing me to express some "ontologies" that,\nin my (limited) experience, cannot be easily expressed with other systems.</p>\n\n<hr>\n\n<ol>\n<li><p><a href="https://github.com/enriquepablo/terms#the-terms-knowledge-store" rel="nofollow">Terms knowledge store</a></p></li>\n<li><p><a href="http://books.google.es/books/about/Axiomatic_set_theory.html?id=aHi4AAAAIAAJ" rel="nofollow">Axiomatic Set Theory</a> by Paul Bernays (1958)</p></li>\n</ol>\n\n<hr>\n\n<p>Edit in response to the comment:</p>\n\n<p>You are making Triple Knowledge Base. You may find this interesting: ILP &amp; Triple Knowledge Bases\nAnton</p>\n\n<hr>\n\n<p>@Anton:\nWhat I see as a technological advantage is the separation\nbetween copular verbs and other verbs. Consider this:</p>\n\n<pre><code>john isa man.\n(john loves sue) isa fact.\n</code></pre>\n\n<p>It allows you to take advantage of the obvious\nand hard earned correspondence between "to be" and set theory,\nand at the same time allows you to use other verbs without problems -\nwithout running into fundamental antinomies.</p>\n\n<p>In your references, I see the the possibility of saying:</p>\n\n<pre><code>john isa man.\njohn loves sue.\n</code></pre>\n\n<p>Inmediately after this, you need unrestricted comprehension;\nyou need variables ranging over verbs and predicates. Google for "OWL Full semweb" if you want proof of that need.</p>\n\n<p>That is what Gottlob Frege was doing that\nBertrand Russell showed was wrong.</p>\n\n<p>With the first expression, you don\'t need\nunrestricted comprehension to keep talking.\nIt\'s amazing, see [3] for an example.</p>\n\n<p>3.- <a href="https://github.com/enriquepablo/terms/blob/master/terms/core/tests/shegets.test" rel="nofollow">https://github.com/enriquepablo/terms/blob/master/terms/core/tests/shegets.test</a></p>\n', 'Tags': '<logic><natural-lang-processing>', 'LastEditorUserId': '4898', 'LastActivityDate': '2012-12-07T11:19:19.687', 'CommentCount': '6', 'CreationDate': '2012-11-27T21:50:01.753', 'Id': '7207'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '81', 'Title': 'LTL: Show $\\neg(aUb) \\Leftrightarrow \\neg b U (\\neg a \\land \\neg b) \\lor G \\neg b$', 'LastEditDate': '2013-01-14T22:18:17.580', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4886', 'FavoriteCount': '1', 'Body': '<p>I got as far as\n\\begin{align}\nw \\vDash \\neg (a U b) &amp;\\Leftrightarrow  \\neg (w \\vDash a U b) \n\\Leftrightarrow \\neg (\\exists_{i\\geq0} : w^i \\vDash b \\land \\forall_{0\\leq k &lt; i} : w^k \\vDash a)  \\\\\n&amp;\\Leftrightarrow \\forall_{i\\geq0} :  \\neg(w^i \\vDash b) \\lor \\exists_{0\\leq k &lt; i} : \\neg(w^k \\vDash a)\n\\end{align}</p>\n\n<p>but got stuck. </p>\n\n<p>If you could offer some advice as on where to start I would very much appreciate it. Thanks in advance</p>\n', 'Tags': '<logic><linear-temporal-logic>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-14T22:18:17.580', 'CommentCount': '0', 'AcceptedAnswerId': '7389', 'CreationDate': '2012-12-13T17:12:51.620', 'Id': '7383'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am solving one of the past exams and I am not certain with my solution to one of the exercises. The exercise is asking to give intuitive meaning to modal $\\mu$-calculus formula:</p>\n\n<p>$$ \\phi = \\mu Z. \\langle - \\rangle tt \\wedge [-a]Z $$</p>\n\n<p>According to an article <em>Modal logics and mu-calculi: an introduction</em> by Bradfield and Stirling[1] the intuition behind $\\mu$ operator is "<em>finite looping</em>". So my reasoning is following: on every path through states in $Z$ there must be only a finite number of transitions with labels different from $a$ and then we must reach a state which is both non-terminal (from the first condition) and all transitions from it are labelled $a$ (from finiteness).</p>\n\n<p>Hence on every path through states in $Z$ there must eventually be a transition labelled $a$. (similar to CTL formula $\\forall F(a)$).</p>\n\n<p>Is my reasoning correct? I am unable to find any formal reason for my solution to be right, can you give me a little hint?</p>\n\n<p>[1] <a href="http://homepages.inf.ed.ac.uk/jcb/Research/bradfield-stirling-HPA-mu-intro.ps.gz" rel="nofollow">http://homepages.inf.ed.ac.uk/jcb/Research/bradfield-stirling-HPA-mu-intro.ps.gz</a></p>\n', 'ViewCount': '157', 'Title': 'Intuitive meaning of modal $\\mu$-calculus formula', 'LastEditorUserId': '2303', 'LastActivityDate': '2013-03-10T11:41:47.677', 'LastEditDate': '2012-12-18T11:38:50.680', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7503', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2303', 'Tags': '<modal-logic><mu-calculus>', 'CreationDate': '2012-12-15T09:58:05.747', 'Id': '7406'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>For a given propositional formula f in DNF, one can decide in polynomial time, if the formula is satisfiable:\nJust walk through all subformulas (l_1 and ... and l_k) and check, wheter it has NO complementary pair of literals. Formula f is satisfiable iff such subformula exists.</p>\n\n<p>Is my approach above correct ?</p>\n\n<p>If yes, I'm wondering why all modern SAT solvers get a CNF as input format, and don't just use DNF.</p>\n", 'ViewCount': '338', 'Title': 'Propositional formula in DNF can be decided in polynomial time?', 'LastEditorUserId': '2313', 'LastActivityDate': '2012-12-17T22:49:05.543', 'LastEditDate': '2012-12-17T22:49:05.543', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7476', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2313', 'Tags': '<logic><polynomial-time>', 'CreationDate': '2012-12-17T21:20:07.437', 'Id': '7473'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I am particularly interested in solutions to the problem that encapsulated search can depend on the order of evaluation.</p>\n\n<p>According to [1], encapsulated search in PAKCS depends on the order of evaluation, while in MCC, it does not, but using it requires knowledge of the compiler implementation and it does not follow the Curry language specification. This was written in 2007, so it may of course be out of date now.</p>\n\n<p>KiCS2 returns results from encapsulated search in the IO monad, but I do not understand why.</p>\n\n<p>[1] Bra\xdfel and Huch, <em>On a Tighter Integration of\nFunctional and Logic Programming</em>, Proc. APLAS 2007</p>\n', 'ViewCount': '120', 'Title': 'What is the state of the art in encapsulated search in functional logic programming?', 'LastActivityDate': '2013-07-25T20:41:16.697', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1617', 'Tags': '<nondeterminism><functional-programming><logic-programming>', 'CreationDate': '2012-12-23T15:47:11.007', 'Id': '7564'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '964', 'Title': '"Applicative order" and "Normal order" in lambda-calculus', 'LastEditDate': '2013-01-02T19:15:08.873', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4409', 'FavoriteCount': '1', 'Body': '<blockquote>\n  <p><strong>Applicative order:</strong> Always fully evaluate the arguments of a function\n  before evaluating the function itself , like -</p>\n  \n  <p>$(\\lambda x. x^2(\\lambda x.(x+1) \\ \\ 2))) \\rightarrow (\\lambda x.\n x^2(2+1))\\rightarrow \\  (\\lambda x. x^2(3)) \\rightarrow \\  3^2 \\\n \\rightarrow \\ 9$</p>\n  \n  <p><strong>Normal order:</strong> The expression would be reduced from the outside in ,\n  like  -</p>\n  \n  <p>$(\\lambda x.x^2 (\\lambda x.(x+1) \\  2)) \\rightarrow \\ (\\lambda x.(x+1)\n \\ \\ \\   2)^  2 \\rightarrow\\ (2+1)^2 \\ \\rightarrow 3^2 \\ \\rightarrow \\\n 9 $</p>\n</blockquote>\n\n<p>Let $M = (\\lambda x.y \\  (\\lambda x.(x \\  \\ x) \\  \\lambda x.(x \\ \\  x)))$</p>\n\n<p>Why is it that under applicative order, $M \\rightarrow$  infinite loop,<br>\nbut under normal order, $M \\rightarrow y$?</p>\n', 'Tags': '<logic><lambda-calculus><normal-forms>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-02T20:10:18.520', 'CommentCount': '2', 'AcceptedAnswerId': '7703', 'CreationDate': '2013-01-02T17:45:42.587', 'Id': '7702'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '826', 'Title': 'The difference between a sequence and a set', 'LastEditDate': '2013-01-13T13:14:58.283', 'AnswerCount': '2', 'Score': '2', 'OwnerDisplayName': 'MHZ', 'PostTypeId': '1', 'OwnerUserId': '5404', 'Body': "<p>I am new to discrete mathematics and the theory of computation I am trying to learn and understand the terminology. </p>\n\n<p>I am having a difficult time understanding the difference between a set and a sequence. I understand that unlike a set, in a sequence order and repetition does matter and sequences contain objects rather than elements or members. However, I don't see how sequences can be logically applied to the real world. </p>\n\n<p>Can someone please give a clear and simple example of when a sequence would be used as opposed to a set and explain how is a sequence is different that a set?</p>\n\n<p>I appreciate any clarification.</p>\n", 'Tags': '<computability><terminology><logic>', 'LastEditorUserId': '5404', 'LastActivityDate': '2013-01-13T13:14:58.283', 'CommentCount': '0', 'AcceptedAnswerId': '7920', 'CreationDate': '2013-01-13T01:29:02.113', 'Id': '7912'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Going through <a href="http://www.cs.toronto.edu/~sheila/384/w11/">some knowledge representation tutorials</a> on resolution at the moment, and I came across <a href="http://www.cs.toronto.edu/~sheila/384/w11/Lectures/csc384w11-Lecture-05-KR.pdf">slide 05.KR, no77</a>.</p>\n\n<p>There it is mentioned that "the procedure is also complete". </p>\n\n<p>I think this completeness can not mean that if a sentence is entailed by KB, then it will be derived by resolution. For example, resolution can not derive $(q \\lor \\neg q)$ from a KB with single clause $\\neg p$. (Example from KRR, Brachman and Levesque, page 53).</p>\n\n<p>Could anyone help me figure out what is meant in this slide? Is the completeness of slide refer to being refutaton-complete and not a complete proof procedure?</p>\n', 'ViewCount': '439', 'Title': 'Is resolution complete or only refutation-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-11T06:34:56.667', 'LastEditDate': '2013-01-22T21:05:22.287', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '9096', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '6508', 'Tags': '<logic><first-order-logic>', 'CreationDate': '2013-01-22T17:44:02.287', 'Id': '9095'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a CTL* formula: $\\mathsf{EF}[p\\land \\mathsf{AX}[q\\ \\mathsf{U}\\ r]]$ but in my application, I am limited to CTL. To my understanding, this formula is no valid CTL and I wonder whether I can transform it (preserving semantic, of course). The CTL* formula should express "there exists a path on which $p$ holds and from that point, in all subsequent states, $q$ holds until $r$ eventually holds". </p>\n\n<p>Is this correct and is there a way to convert it to CTL?</p>\n', 'ViewCount': '69', 'Title': 'Convert CTL* formula to CTL', 'LastEditorUserId': '31', 'LastActivityDate': '2013-02-22T15:14:24.517', 'LastEditDate': '2013-01-23T06:06:16.000', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'OwnerDisplayName': 'user13397', 'PostTypeId': '1', 'Tags': '<logic>', 'CreationDate': '2013-01-21T21:12:50.137', 'Id': '9103'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have been reading on converting first order logic sentences to conjunctive normal form, and then performing resolution.</p>\n\n<p>One of the steps of converting to CNF, is to Standardize variables: rename all variables so that each quantifier has its own unique variable name.</p>\n\n<p>Most general Unifier is the least specialized unification of two clauses.</p>\n\n<p>Question 1: I have been searching to find an example that shows what are the potential problems if I don\'t standardize variables, but all the online resources I found only explain the "How" and not the "Why". Could you provide me with an example of a potential problem?</p>\n\n<p>Question 2: The same problem as the first question. What if we don\'t use MGU, and use a more specialized unifier? What are the potential problems? Could you provide me with an example?</p>\n\n<p>My sincere thanks.\nFelipe</p>\n', 'ViewCount': '112', 'Title': 'MGU and Variable Standardization - CNF', 'LastActivityDate': '2013-01-27T21:31:17.487', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9224', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2436', 'Tags': '<logic><artificial-intelligence><knowledge-representation><first-order-logic>', 'CreationDate': '2013-01-27T02:24:52.357', 'Id': '9186'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '157', 'Title': 'Building functionally complete boolean circuits out of trinary logic', 'LastEditDate': '2013-02-22T02:18:36.030', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '699', 'FavoriteCount': '1', 'Body': '<p>There are some not-very-commonly considered forms of <a href="http://en.wikipedia.org/wiki/Three-valued_logic" rel="nofollow">trinary logic</a> using 3 truth values. Even entire (unusual/rare) <a href="http://en.wikipedia.org/wiki/Ternary_computer" rel="nofollow">ternary computers</a> have been built from it.</p>\n\n<blockquote>\n  <p>Is there some knowledge or reference of how to convert some trinary logic systems into functionally complete boolean circuits/logic?</p>\n</blockquote>\n\n<p>"Functionally complete" means all boolean functions can be computed. I am asking the more general question above in case the following more specific question does not have an answer. The motivation is more this specific following case. Consider the following "trinary truth table" for a single trinary operator.</p>\n\n<pre><code>   a b c\n\na  a c a\nb  c b b\nc  a b c\n</code></pre>\n\n<blockquote>\n  <p>Is it possible to somehow create functionally complete boolean circuits out of the single above trinary truth table operator? Or, maybe it can be definitively proven it\'s not possible?</p>\n</blockquote>\n\n<p>I am also looking for any reference to that or something similar. </p>\n', 'Tags': '<reference-request><logic><reductions><circuits>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-22T02:18:36.030', 'CommentCount': '4', 'AcceptedAnswerId': '9215', 'CreationDate': '2013-01-27T18:15:08.947', 'Id': '9211'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>SAT [5] can be solved with resolution definitively, i.e. if the formula has a true assignment, resolution can find it, and if it cant be satisfied, resolution can show that no assignment exists (at least in exponential time/space.). [4] </p>\n\n<blockquote>\n  <p>Is there a good fully-self contained description somewhere of solving SAT with resolution?</p>\n</blockquote>\n\n<p>The descriptions on Wikipedia of resolution are focused on a single logical operation, not how to use it in an algorithm to solve SAT, and the Davis Putnam algorithm is described mostly in terms of 1st order logic. I am looking for a description of solving SAT with resolution that does not refer to 1st order logic, just in terms of boolean input variables. Online description is preferred if possible. The connection with DPLL would be helpful also.</p>\n\n<hr>\n\n<p>[1] <a href="http://en.wikipedia.org/wiki/Davis-Putnam_algorithm" rel="nofollow">Davis Putnam algorithm</a>, Wikipedia</p>\n\n<p>[2] <a href="http://en.wikipedia.org/wiki/Resolution_%28logic%29" rel="nofollow">Resolution in logic</a>, Wikipedia</p>\n\n<p>[3] <a href="http://en.wikipedia.org/wiki/DPLL_algorithm" rel="nofollow">Davis Putnam Logemann Loveland algorithm</a>, Wikipedia</p>\n\n<p>[4] <a href="http://cs.stackexchange.com/questions/9095/is-resolution-complete-or-only-refutation-complete">Is resolution complete or only refutation-complete?</a></p>\n\n<p>[5] <a href="http://en.wikipedia.org/wiki/Propositional_satisfiability" rel="nofollow">The boolean satisfiability problem</a></p>\n', 'ViewCount': '118', 'Title': 'Description of resolution algorithm as it applies to SAT', 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-18T22:02:44.297', 'LastEditDate': '2013-02-18T22:02:44.297', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '9235', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '699', 'Tags': '<algorithms><complexity-theory><reference-request><logic><np-complete>', 'CreationDate': '2013-01-28T01:57:42.843', 'Id': '9233'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am currently reading "Artificial Intelligence - A modern approach" and I really do not get the difference between intended interpretation and extended interpretation in first-order logic.</p>\n\n<p>Are extended interpretations all possible assignments from a symbol in my knowledge base to an object in the world? And is the intended interpretation the interpretation the "author" of the sentences wanted to have?</p>\n\n<p>So when there is a symbol like "John" in my sentences does that mean that it really refers to the human being John in the real world (if I have intended interpretation).</p>\n\n<p>And the extended interpretation could be: "John" in my sentences refers to the human being Mary in the real world.</p>\n\n<p>Are the extended interpretations a set of all possible interpretations and is the intended interpretation one specific interpretation in this set?</p>\n\n<p>So do I interpret my sentences either intended or extended?</p>\n\n<p>And if I say in my interpretation that John and Mary (as constants) refer to the same object in my model can I unify them then, i.e. UNIFY(John,Mary) = {John/Mary}?</p>\n', 'ViewCount': '124', 'Title': 'Difference between intended interpretation and extended interpretation in first-order logic', 'LastActivityDate': '2013-02-08T10:00:40.560', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6735', 'Tags': '<logic><artificial-intelligence><first-order-logic>', 'CreationDate': '2013-02-06T17:26:31.733', 'Id': '9552'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '599', 'Title': 'Clear, intuitive derivation of the fixed-point combinator (Y combinator)?', 'LastEditDate': '2013-02-10T23:47:01.757', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '5291', 'FavoriteCount': '6', 'Body': '<p>The fixed-point combinator FIX (aka the Y combinator) in the (untyped) lambda calculus ($\\lambda$) is defined as:</p>\n\n<p>FIX $\\triangleq \\lambda f.(\\lambda x. f~(\\lambda y. x~x~y))~(\\lambda x. f~(\\lambda y. x~x~y))$</p>\n\n<p>I understand its purpose and I can trace the execution of its application perfectly fine; <strong>I would like to understand how to derive FIX from first principles</strong>.</p>\n\n<p>Here is as far as I get when I try to derive it myself:</p>\n\n<ol>\n<li>FIX is a function: FIX $\\triangleq \\lambda_\\ldots$</li>\n<li>FIX takes another function, $f$, to make it recursive: FIX $\\triangleq \\lambda f._\\ldots$</li>\n<li>The first argument of the function $f$ is the "name" of the function, used where a recursive application is intended. Therefore, all appearances of the first argument to $f$ should be replaced by a function, and this function should expect the rest of the arguments of $f$ (let\'s just assume $f$ takes one argument): FIX $\\triangleq \\lambda f._\\ldots f~(\\lambda y. _\\ldots y)$</li>\n</ol>\n\n<p>This is where I do not know how to "take a step" in my reasoning. The small ellipses indicate where my FIX is missing something (although I am only able to know that by comparing it to the "real" FIX).</p>\n\n<p>I already have read <a href="http://rads.stackoverflow.com/amzn/click/0262162091" rel="nofollow">Types and Programming Languages</a>, which does not attempt to derive it directly, and instead refers the reader to <a href="http://mitpress.mit.edu/books/little-schemer" rel="nofollow">The Little Schemer</a> for a derivation. I have read that, too, and its "derivation" was not so helpful. Moreover, it is less of a direct derivation and more of a use of a very specific example and an ad-hoc attempt to write a suitable recursive function in $\\lambda$.</p>\n', 'Tags': '<computability><logic><programming-languages><lambda-calculus>', 'LastEditorUserId': '41', 'LastActivityDate': '2013-02-10T23:47:01.757', 'CommentCount': '3', 'AcceptedAnswerId': '9651', 'CreationDate': '2013-02-08T14:23:39.617', 'Id': '9604'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p><strong>Task</strong>:\nDesign a 2 bit comparator.</p>\n\n<p>Input: 2x 2 bit (I take it as 2 2-bit values, let them be unsigned for simplicity) \nOutput: 1 if result input1>input2 is true, 0 otherwise</p>\n\n<p>Develop truth table and derive circuits.</p>\n\n<p><strong>The problem</strong>: I'm completely new to this so I have not even a idea where where to look for the lighthouse. </p>\n\n<p><strong>The question</strong>: I'M NOT LOOKING FOR COMPLETE SOLUTION, instead I'm looking for a guidance through topics/materials which I should check to be able to solve it myself. </p>\n\n<p><strong>Done so far</strong>: I started with understanding logical gates and those seem to be pretty straight forward.</p>\n\n<p>P.S.: Purpose of posting this question is to boost the speed with which I will get to the actual solution. </p>\n\n<p><strong>SOLUTION:</strong>\nf(A,B,C,D) = !AB!C!D + A!C + ABC!D. (! - used for negation or NOR, ABC notations means A AND B AND C). I had three adjacent rectangles two of which were of unit cell size and one of 4 cells size (one cell was actually far away, but there's this toroidally connection property, not sure about terminology). A and B are MSD and LSD of the first number respectfully and B and C are same for second number. <em>As for the circuit image:</em> sorry folks my hand drawing requires strong mental stability.</p>\n", 'ViewCount': '61', 'Title': 'Creating a logical circuit', 'LastEditorUserId': '6793', 'LastActivityDate': '2013-02-09T21:19:13.900', 'LastEditDate': '2013-02-09T21:14:19.490', 'AnswerCount': '2', 'CommentCount': '8', 'AcceptedAnswerId': '9622', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6793', 'Tags': '<logic><circuits>', 'CreationDate': '2013-02-09T19:50:07.537', 'Id': '9620'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What are anonymous (lambda) functions? What is the formal definition of an anonymous function in a functional programming language? </p>\n\n<p>In my simple terms, when I am programming in scheme/lisp I would say an anonymous (lambda) function is a function that is not bound to an identifier.</p>\n\n<p>Is that all that you can say formally about a lambda function? I think there is more detail that can be added to this simple definition. Please elaborate, and thank you!</p>\n', 'ViewCount': '262', 'Title': 'anonymous lambda functions (functional programming)', 'LastEditorUserId': '41', 'LastActivityDate': '2013-02-20T06:25:28.973', 'LastEditDate': '2013-02-11T05:42:39.403', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '9663', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '6815', 'Tags': '<logic><programming-languages><lambda-calculus><functional-programming>', 'CreationDate': '2013-02-11T01:41:11.730', 'Id': '9655'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In boolean circuit complexity, a circuit is just defined by a Directed Acyclic Graphs with designated input and output nodes, where the intermediate nodes compute a specific boolean function. A circuit is called a formula if the underlying graph is a tree. i.e., the fan-out of each node is $1$. Is it true that for a formula, (given that its fan-out is already $1$, by defintion) the fan-in is also constant? </p>\n\n<p>In the usual definition of formulas, this is never spelt out(Its always defined as a circuit where all gates have fan-out $1$). But somehow I seem to carry around this intuitively that formulas are always bounded fan-in. (It might be partly due to the fact that poly-sized boolean formulas correspond to $\\mathsf{NC^1}$ which is a complexity class defined by bounded fan-in circuits of logarithmic depth).</p>\n\n<p>So my question is, if you bound the fan-out of the circuit to be $1$, does it imply even the fan-in should be constant for every gate? I tried to use a counting argument, that says that the indegree and outdegree of the graphs must sum to the same, but somehow a water tight proof eludes me. First of all, is my intuition correct?</p>\n', 'ViewCount': '124', 'Title': 'Formulas vs Circuits', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-21T19:09:38.490', 'LastEditDate': '2013-02-20T07:01:24.137', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6954', 'Tags': '<complexity-theory><logic><circuits>', 'CreationDate': '2013-02-19T19:27:27.227', 'Id': '9940'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Assuming I have shown part of the knowledge base in the clausal format:</p>\n\n<pre><code>[1] p1(banana).\n\n[2] not p1(X) or p2(Y).\n[3] p1(X) or not p3(F).\n</code></pre>\n\n<p>... and more rules.</p>\n\n<p>Most of the books, would do something like this:</p>\n\n<pre><code>[1,2] {X=banana} p2(Y).\n</code></pre>\n\n<p>and more steps.</p>\n\n<p>First question: is it equally correct to do something like follows:</p>\n\n<pre><code>[2,3] {X=X} p2(Y) or not p3(F).\n</code></pre>\n\n<p>and then continue with resolution.</p>\n\n<p>Second question: What if different variables were used in each clause, could I do the same as above, for example we had:</p>\n\n<pre><code>[2] not p1(X1) or p2(Y1).\n[3] p1(X2) or not p3(F2).\n\n[2,3] {X1=X2} p2(Y) or not p3(F2).\n</code></pre>\n\n<p>Thank you in advance</p>\n', 'ViewCount': '197', 'Title': 'first order logic resolution unification', 'LastEditorUserId': '6966', 'LastActivityDate': '2013-02-24T23:10:37.647', 'LastEditDate': '2013-02-24T23:10:37.647', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10060', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6966', 'Tags': '<artificial-intelligence><first-order-logic><knowledge-representation>', 'CreationDate': '2013-02-24T18:11:41.153', 'Id': '10059'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>To say simply, can PSPACE problems be written as $\\Pi_1$ formula? Or how can these problems be written in terms of (first-order) arithmetic hierarchy?</p>\n\n<p>edit:also currently, by what arithmetic hierarchy formula can P=PSPACE be written?</p>\n\n<p>and what would be the consequence of being able to write P=PSPACE as $\\Pi_1$ formula?</p>\n', 'ViewCount': '236', 'Title': 'Can P=PSPACE and PSPACE problems be formulated as $\\Pi_1$ formula?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-25T17:41:41.727', 'LastEditDate': '2013-02-25T17:04:55.383', 'AnswerCount': '3', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'mars', 'PostTypeId': '1', 'Tags': '<complexity-theory><logic>', 'CreationDate': '2013-02-25T04:21:24.923', 'Id': '10083'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I currently have a system that has <code>{f(a) = b, f(f(x)) = x}</code> (part of an <a href="http://folk.uio.no/peterol/INF3230V13/Oppgaver/midterm06.pdf" rel="nofollow">exam question</a> - look at page 5 - exercise 1).</p>\n\n<p>To start off with proving non-confluency, I am thinking along these lines:</p>\n\n<pre><code>f(f(x)) and f(a) can be unified by using {a -&gt; f(x)}. \n</code></pre>\n\n<p>Then we can rewrite:</p>\n\n<pre><code>f(f(x)) = x                 [eq.1]\nf(f(x)) = b                 [eq.2]\n</code></pre>\n\n<p>The above two cannot be reduced any further, and do not have any common ancestor or successor. Therefore the system is not confluent.</p>\n\n<p>To make this confluent, we can add a third equation to the system:</p>\n\n<pre><code>x = b\n</code></pre>\n\n<p>This way, the equation will both be confluent and terminate. Another alternative would be:</p>\n\n<pre><code>f(x) = b\n</code></pre>\n\n<p>Is there anything I have missed? Or is this pretty much the gist of it?</p>\n', 'ViewCount': '73', 'Title': 'Proving non-confluency and adding an equation to make it confluent and terminating', 'LastActivityDate': '2013-07-15T16:03:03.313', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '10108', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6867', 'Tags': '<logic><proof-techniques><semantics><term-rewriting>', 'CreationDate': '2013-02-25T21:26:12.353', 'Id': '10096'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Can anyone show how to express complexity class P using first-order logic with LFP? (descriptive complexity)</p>\n', 'ViewCount': '56', 'Title': 'Expressing complexity class P using first-order logic with LFP', 'LastEditorUserId': '7118', 'LastActivityDate': '2013-03-03T18:55:04.377', 'LastEditDate': '2013-03-03T04:05:32.463', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7118', 'Tags': '<logic><descriptive-complexity>', 'CreationDate': '2013-03-03T03:42:28.370', 'Id': '10220'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Would it be correct to characterize loop invariants as a type of tautology?  I ask since the invariant must basically always be true, before the loop starts, before each iteration and after the loop terminates.  I realize that there is the possibility that the invariant could become false during the body of the loop.  But since inside the loop "doesn\'t count" is it fair to characterize the invariant as a tautology?</p>\n', 'ViewCount': '92', 'Title': 'Loop Invariants as Tautologies', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T21:25:07.547', 'LastEditDate': '2013-03-12T14:08:56.163', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '10471', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6728', 'Tags': '<algorithm-analysis><logic><correctness-proof><loop-invariants><program-correctness>', 'CreationDate': '2013-03-12T07:57:56.437', 'Id': '10469'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose $\\sigma$ is a vocabulary of First Order logic consisting of one binary relation $E$ and let $\\phi$ be a $\\sigma$ sentence (FO formula with no free variables). Is it decidable whether there is a finite directed graph $G$, with all in- and out-degrees $0$ or $1$, such that $G\\models \\phi$ ?</p>\n', 'ViewCount': '114', 'Title': 'Decidability over finite graphs of small degree', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-14T15:24:32.167', 'LastEditDate': '2013-03-14T15:24:32.167', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7264', 'Tags': '<graphs><logic><undecidability><first-order-logic><finite-model-theory>', 'CreationDate': '2013-03-13T10:55:07.910', 'Id': '10509'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have come across about RS Flip Flop &amp; I have tried implementing that on a simulator &amp; using actual logic gates. But I'm still not sure whether I have correctly understood the case unstable or the forbidden case S=1, R=1 in Flip flop. Can anyone tell me what exactly is that?</p>\n\n<p>By the way I have used 2-INPUT NAND Gates to implement the flip Flop. What is the difference between the NAND Gate Flip Flop &amp; NOR Gate Flip Flop, ?</p>\n", 'ViewCount': '126', 'ClosedDate': '2013-04-07T15:18:49.800', 'Title': 'Why S=1, R=1 Is forbidden in RS-Flip Flop', 'LastActivityDate': '2013-04-05T10:15:56.783', 'AnswerCount': '1', 'CommentCount': '11', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7395', 'Tags': '<logic><circuits><sequential-circuit>', 'CreationDate': '2013-03-27T00:29:49.737', 'Id': '10816'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '521', 'Title': 'Understanding DPLL algorithm', 'LastEditDate': '2013-03-31T14:44:46.170', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7509', 'FavoriteCount': '1', 'Body': u'<p>I\'m trying to understand <a href="http://en.wikipedia.org/wiki/DPLL_algorithm" rel="nofollow">DPLL algorithm</a> for solving SAT problem. And here it is:</p>\n\n<pre><code>Algorithm DPLL\n  Input: A set of clauses \u03a6.\n  Output: A Truth Value.\nfunction DPLL(\u03a6)\n   if \u03a6 is a consistent set of literals\n       then return true;\n   if \u03a6 contains an empty clause\n       then return false;\n   for every unit clause l in \u03a6\n      \u03a6 \u2190 unit-propagate(l, \u03a6);\n   for every literal l that occurs pure in \u03a6\n      \u03a6 \u2190 pure-literal-assign(l, \u03a6);\n   l \u2190 choose-literal(\u03a6);\n   return DPLL(\u03a6 \u2227 l) or DPLL(\u03a6 \u2227 not(l));\n</code></pre>\n\n<p>At first, I don\'t clearly understand how <code>unit-propagate(l, \u03a6)</code>, <code>pure-literal-assign(l, \u03a6)</code> and <code>choose-literal(\u03a6)</code> work. I\'ll try to guess on particular examples. Correct me please if I do something wrong. </p>\n\n<ul>\n<li><p>For the first one </p>\n\n<p><code>unit-propagate(a, (0 v -a) \u2227 (a v b) \u2227 (b v d) \u2227 (f v g) v ...)</code> </p>\n\n<p>we will have </p>\n\n<p><code>((0 v -0) \u2227 (0 or 1) \u2227 (1 v d) \u2227 (f v g) \u2227 ... = (f v g) v ...</code>,</p>\n\n<p>having <code>a = 0</code>, <code>b = 1</code>.</p></li>\n<li><p>For second procedure</p>\n\n<p><code>pure-literal-assign(a, (a v b v c) \u2227 (d v -b v a) \u2227 (-d v b))</code></p>\n\n<p>result is </p>\n\n<p><code>(b v c) \u2227 (d v -b) \u2227 (-d v b)</code>,</p>\n\n<p>assigning <code>a = 1</code>.</p></li>\n<li><p>And finally <code>choose-literal(\u03a6)</code> just returns some random (in common case) unassigned literal for further computations.</p></li>\n</ul>\n\n<p>Now, I don\'t understand why algorithm has such strange conditions for finishing? Why does it work?</p>\n\n<p>Thanks!</p>\n', 'Tags': '<algorithms><logic><satisfiability><sat-solvers>', 'LastEditorUserId': '7509', 'LastActivityDate': '2013-03-31T17:36:48.023', 'CommentCount': '0', 'AcceptedAnswerId': '10933', 'CreationDate': '2013-03-31T08:26:51.050', 'Id': '10932'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>From what I have understood :</p>\n\n<ol>\n<li>A Flip Flop is a clocked latch i.e. flip flop = latch + clock</li>\n<li>Latch continuously checks for inputs &amp; changes the output whenever there is a change in input</li>\n<li>Flip Flop also continuously checks input, but changes the output time determined by clock. [so, even though if inputs are changed, it may not change the output at the same time]</li>\n<li>A latch with enable [i.e. gated latch], is different from that of clocked latch. </li>\n</ol>\n\n<p>I am reading from Digital Logic by Morris Mano &amp; Wikipedia.</p>\n', 'ViewCount': '1012', 'Title': 'What is the exact difference between a latch & a flipflop?', 'LastEditorUserId': '6665', 'LastActivityDate': '2014-03-23T06:58:20.183', 'LastEditDate': '2013-04-07T06:07:48.347', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '11092', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6665', 'Tags': '<logic><circuits><sequential-circuit>', 'CreationDate': '2013-04-07T05:57:32.400', 'Id': '11090'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>My teacher describes <a href="https://en.wikipedia.org/wiki/TQBF" rel="nofollow">true quantified boolean formula</a> (TQBF) as an interactive game between two players $\\exists$ and $\\forall$, and asks us to show a winning strategy for the existential player $\\exists$. Can someone describe what this game is? I feel like this is background knowledge I am missing.</p>\n', 'ViewCount': '86', 'Title': 'TQBF as interactive game', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-11T13:13:05.990', 'LastEditDate': '2013-04-11T13:03:10.897', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '4', 'OwnerDisplayName': 'user15599', 'PostTypeId': '1', 'Tags': '<terminology><logic>', 'CreationDate': '2013-04-10T15:57:29.263', 'Id': '11225'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am looking for some sort of temporal logic for expressing invariants in interfaces. Since interfaces do not specify data representation, the invariants must rely solely on the publicly available functions of the interface.</p>\n\n<p>For example, suppose we have a simple interface (Java style) Sum:</p>\n\n<pre><code>interface Sum {\n    public void add (int a);\n    public int getSum();\n}\n</code></pre>\n\n<p>I want to express in an invariant that <code>getSum</code> returns the summation of <code>a</code> in all calls to <code>add(a)</code>, without using any data representation of this sum.</p>\n\n<p>The only way I can think of doing this is by using some form of temporal logic. Is there any literature on this subject available I can read? Any pointers would be much appreciated.</p>\n', 'ViewCount': '46', 'Title': 'Temporal logic for interface invariants', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-14T02:59:49.377', 'LastEditDate': '2013-04-12T07:15:00.573', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '11298', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7690', 'Tags': '<logic><object-oriented><linear-temporal-logic><software-verification>', 'CreationDate': '2013-04-12T00:18:07.817', 'Id': '11247'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Suppose you have some loop and and integer k:</p>\n\n<pre><code>int k = 5;\nfor (int i = 0 ; i &lt; N; i++)\n{\n  //(*)\n  //do something \n}\n</code></pre>\n\n<p>The loop invariant at (*) is:\n$\\{ K=k\\}$</p>\n\n<p>Does that guarantee that $k$ doesn't change in between iterations? if not, is there any otherway to guarantee that?</p>\n", 'ViewCount': '35', 'Title': 'Does this loop invariant guarantee that the variable never changes?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-12T23:04:59.827', 'LastEditDate': '2013-04-12T23:04:59.827', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11270', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7706', 'Tags': '<loop-invariants><program-correctness><hoare-logic>', 'CreationDate': '2013-04-12T16:12:13.507', 'Id': '11269'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In the proof of Trakhtenbrot\'s theorem (as given in "Elements of Finite Model Theory" by Leonid Libkin), for every Turing machine $M$, author constructs a FO sentence $\\Phi_M$ of vocabulary $\\sigma$ such that $\\Phi_M$ is finitely satisfiable iff $M$ halts on the empty input. Then he says that as the latter is known to be undecidable so the theorem holds.</p>\n\n<p>My doubt is, the vocabulary $\\sigma$ that was constructed depends on the Turing Machine $M$. But the theorem holds for any relational vocabulary with at least one binary relation symbol and also it should not depend on the machine $M$. Perhaps the claim of author is enough to imply the theorem for arbitrary vocabulary, but I am unable to see how.</p>\n', 'ViewCount': '161', 'Title': "Proof of Trakhtenbrot's theorem", 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-15T09:57:57.300', 'LastEditDate': '2013-04-15T09:54:06.163', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7264', 'Tags': '<turing-machines><logic><reductions><undecidability><finite-model-theory>', 'CreationDate': '2013-04-15T08:38:12.270', 'Id': '11327'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a question concerning an universal program (goto program). Well, let $f(n)$ be the output of an universal goto program $U$ with input $(n,n)$, where the first $n$ describes the encoding and the second a string. </p>\n\n<p>1) Is $f$ recursive now?</p>\n\n<p>2) Is $g(n)=f(n)+1$ recursive?</p>\n', 'ViewCount': '68', 'Title': 'f(n) output of universal program', 'LastEditorUserId': '140', 'LastActivityDate': '2013-05-16T09:09:05.407', 'LastEditDate': '2013-05-16T09:09:05.407', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'OwnerDisplayName': 'Voyage', 'PostTypeId': '1', 'Tags': '<logic-programming><logic>', 'CreationDate': '2013-05-16T00:28:39.590', 'Id': '12062'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>What i actually want to do is to turn a math problem ,i have to solve,to a Boolean Satisfiability problem and solve it using a SAT Solver.\nI wonder if someone knows any manual,guide or anything that will help me to make my problem solve using a SAT Solver.From what i found so far,SAT Solver's do not have any good documentations..  </p>\n", 'ViewCount': '40', 'ClosedDate': '2013-05-19T02:06:13.393', 'Title': 'Start using SAT Solvers', 'LastActivityDate': '2013-05-18T10:50:31.373', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'OwnerDisplayName': 'Dchris', 'PostTypeId': '1', 'OwnerUserId': '7443', 'Tags': '<complexity-theory><logic>', 'CreationDate': '2013-05-17T15:03:13.950', 'Id': '12108'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '84', 'Title': 'Equivalence of logical Formula (Kripke structures)', 'LastEditDate': '2013-05-19T14:49:39.450', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8241', 'FavoriteCount': '1', 'Body': '<p>Can someone explain me how to find if these formulas are equivalent with Kripke structures?</p>\n\n<p>AG(Fp or Fq) , A(GFp or GFq)</p>\n\n<p>AGF(p and q) , A(GFp and GFq)</p>\n\n<p>AFG(p and q) , A(FGp and FGq)</p>\n\n<p>Thank you in advance for your help :)</p>\n', 'Tags': '<logic><linear-temporal-logic>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-19T14:49:39.450', 'CommentCount': '1', 'AcceptedAnswerId': '12110', 'CreationDate': '2013-05-18T12:50:18.547', 'Id': '12109'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The rules I am considering are $\\frac{\\neg A, \\ \\Gamma \\implies \\Delta}{\\Gamma \\implies \\Delta, \\ A} (\\neg L)$ and $\\frac{\\Gamma \\implies \\Delta, \\ \\neg A}{A, \\ \\Gamma \\implies \\Delta} (\\neg R)$</p>\n\n<p>I am trying to get my head around some of the sequent calculus rules, and while I think I understand most of them, I am struggling to apply any intuition to the negation rules shown above.</p>\n\n<p>The intuition of looking at the left as a conjunction of literals and the right as a disjunction of literals seems to break down, and I am unclear how to explain these rules to myself.</p>\n\n<p>What is a sensible way to view such rules and put some understanding on them?</p>\n', 'ViewCount': '100', 'Title': 'Why do the sequent calculus NOT left and NOT right rules work?', 'LastActivityDate': '2013-05-20T10:42:06.080', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '12151', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7928', 'Tags': '<logic><first-order-logic>', 'CreationDate': '2013-05-20T09:48:59.810', 'Id': '12150'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am reading an article called <a href="http://www.sciencedirect.com/science?_ob=MiamiImageURL&amp;_cid=271538&amp;_user=32321&amp;_pii=0304397581901109&amp;_check=y&amp;_origin=article&amp;_zone=toolbar&amp;_coverDate=31-Dec-1981&amp;view=c&amp;originContentFamily=serial&amp;wchp=dGLzVlV-zSkWb&amp;md5=2073f527aa2be434886953d7aaa0f7d3&amp;pid=1-s2.0-0304397581901109-main.pdf" rel="nofollow">The temporal semantics of concurrent programs</a>\n.</p>\n\n<p>On page $9$, there is a small section (numbered as $2$) called "clean behavior".</p>\n\n<p>I think that there is a problem with this part, what does Pnueli meant by "Let $\\lambda_i$ be the leagality condition for <strong>the</strong> statement departing from $m^i$" ?</p>\n\n<p>I have marked the word "the" in bold since, as I see it, there can be more than one edge departing from $m^i$, an example can be seen on page $11$, at the beginning of part $5$.</p>\n\n<p>Did I missunderstood something , or is there actually a mistake in the article by not addressing the fact that there can be more than one statement that can be exectuded after $m^i$, and that this expression for clean behavior need to be corrected accordingly ?</p>\n', 'ViewCount': '41', 'Title': "Is there a mistake in the expression for clean behavior in Pnueli's article from 81'?", 'LastActivityDate': '2013-06-24T06:44:33.670', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '3090', 'Tags': '<concurrency><linear-temporal-logic>', 'CreationDate': '2013-05-24T22:43:47.727', 'Id': '12258'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a question about definability of truth assignments. Suppose that I am working in the context of propositional logic. Let me give some definitions first.</p>\n\n<p>Let $L$ be a propositional language with the set $Prop_{L}$ of propositional variables. A truth assignment is a map $v\\colon Prop_{L}\\to\\{F,T\\}$. Denote the collection of truth assignments in $L$ by $TA_{L}$. Note that in a language $L$ with $|Prop_{L}|=n$ for some $n\\in\\mathbb{N}$, $|TA_{L}|=2^{n}$, while in a language with $|Prop_{L}|=\\aleph_{0}$ (denumerably many), $|TA_{L}|=2^{\\aleph_{0}}=\\mathfrak{c}$ (continuum many).</p>\n\n<p><strong>Definition 1.</strong> Let $\\Sigma$ be a set of propositional formulas. The set of <strong>models</strong> of $\\Sigma$ is\n$$Mod(\\Sigma):=\\{v:v\\ \\mbox{is a truth assignment and $v(\\varphi)=T$ for each $\\varphi\\in\\Sigma$}\\}.$$</p>\n\n<p><strong>Definition 2.</strong> Let $K\\subseteq TA_{L}$. Then $K$ is <strong>definable</strong> if $K=Mod(\\Sigma)$ for some set $\\Sigma$ of formulas.</p>\n\n<p>I have tried to prove a couple of things. In a propositional language with <em>only finitely many</em> propositional variables, any set of truth assignments is definable. Now, I want to show that, in a propositional language with <em>denumerably many</em> propositional variables, any <em>finite</em> set of truth assignments is definable. Imitating the idea in the proof about finite language, I have an outline of the proof about infinite language. Here is the detail:</p>\n\n<p><strong>Convention.</strong>\nLet $p$ be a propositional variable and $v$ a truth assignment. Define\n$$\np^{v}:=\n\\begin{cases}\np &amp;\\mbox{if}\\ v(p)=T;\\\\\n\\neg p &amp;\\mbox{otherwise}.\n\\end{cases}\n$$\nThen it can be seen easily that $\\widehat{v}(p^{v})=T$.\n(Here $\\widehat{v}$ denotes the extension of $v$ to the set of propositional formulas.)</p>\n\n<p><strong>Claim.</strong> In a language $L$ with $|Prop_{L}|=\\aleph_{0}$, any finite set of truth assignments is definable.</p>\n\n<p><em>Proof.</em>\nAssume that $Prop_{L}=\\{p_{1},p_{2},\\ldots\\}$. Let $K\\subseteq TA_{L}$. Assume that $K$ is finite. Then $K=\\{v_{1},v_{2},\\ldots,v_{k}\\}$ for some $k\\in\\mathbb{N}$. Let $1\\leq i\\leq k$. For each $j\\in\\mathbb{N}$, define\n$$\\varphi^{i}_{j}:=p^{v_{i}}_{1}\\wedge p^{v_{i}}_{2}\\wedge\\cdots\\wedge p^{v_{i}}_{j}$$\nand define\n$$\\chi_{j}:=\\varphi^{1}_{j}\\vee\\varphi^{2}_{j}\\vee\\cdots\\vee\\varphi^{k}_{j}.$$\nLet $\\Sigma=\\{\\chi_{j}:j\\in\\mathbb{N}\\}$. Claim that $K=Mod(\\Sigma)$.</p>\n\n<p>Now, the part $K\\subseteq Mod(\\Sigma)$ is easy. What is hard for me is the reverse inclusion: any truth assignment satisfying $\\Sigma$ must be $v_{i}$ for some $1\\leq i\\leq k$. Since I am dealing with infinitely many propositional variables, to show that two truth assignments coincide is to show that they agree on infinitely many propositional variables. Yet I have no idea how to show that, because truth assignments in $K$ seem to involve only finitely many propositional variables. Could anyone please advise me about this?</p>\n\n<p>Any suggestions would be greatly appreciated :)</p>\n', 'ViewCount': '136', 'Title': 'Definability of Truth Assignments', 'LastActivityDate': '2013-06-02T06:12:36.250', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '12427', 'Score': '2', 'OwnerDisplayName': 'Pachara', 'PostTypeId': '1', 'OwnerUserId': '8486', 'Tags': '<logic>', 'CreationDate': '2013-06-01T07:55:19.460', 'Id': '12425'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a good understanding of how to program using logic languages, but I\'m currently writing up a paper describing some of my work, and I wanted to ensure that I wasn\'t abusing the proper terminology when describing logic languages. I have a few questions:</p>\n\n<ol>\n<li>What exactly is a predicate? How does a predicate relate to rules/facts? I.e. are rules predicates but not all predicates facts and rules?</li>\n<li>What is a clause, and how does it relate to a predicate?</li>\n<li>When describing how a rule is tested/proven, what is the equivalent term for "calling a function"? Do we say that the rule is called, or that a goal is called?</li>\n<li>What exactly is a goal? Is a goal equivalent to a query?</li>\n</ol>\n\n<p>Like I said, I have a very good understanding of how Prolog works, just not a good knowledge of the right terms to describe the right things.</p>\n', 'ViewCount': '319', 'Title': 'Proper terminology in Prolog/logical programming theory?', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-09-16T14:19:14.387', 'LastEditDate': '2013-06-06T16:06:30.640', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '12601', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<terminology><programming-languages><logic-programming><prolog>', 'CreationDate': '2013-06-06T15:58:32.000', 'Id': '12489'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Constructivist logic is a system which removes the Law of the Excluded Middle, as well as \nDouble Negation, as axioms. It\'s described on Wikipedia <a href="http://en.wikipedia.org/wiki/Constructivist_logic">here</a> and <a href="http://en.wikipedia.org/wiki/Mathematical_constructivism">here</a>. In particular, the system doesn\'t allow for proof by contradiction.</p>\n\n<p>I\'m wondering, is anyone familiar with how this affects results regarding Turing Machines and formal languages? I notice that almost every proof that a language is undecidable relies on proof by contradiction. Both the Diagonalization argument and the concept of a reduction work this way. Can there ever be a "constructive" proof of the existence of an undecidable language, and if so, what would it look like?</p>\n', 'ViewCount': '504', 'Title': 'Do undecidable languages exist in constructivist logic?', 'LastActivityDate': '2013-07-11T06:23:13.290', 'AnswerCount': '4', 'CommentCount': '0', 'AcceptedAnswerId': '12502', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '2253', 'Tags': '<formal-languages><turing-machines><logic><proof-techniques><undecidability>', 'CreationDate': '2013-06-06T16:25:28.620', 'FavoriteCount': '2', 'Id': '12492'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have seen this model question on synchronous circuit , but i could not understand the logic,  can anyone please help me?</p>\n\n<p>"Develop the state diagram for a synchronous sequential circuit which will recognize the bit sequence 1101 (ie, every time the sequence 1101 is detected in the input bit stream, the circuit has to output a 1 and otherwise a 0)."</p>\n\n<p>What is the question here?? do we have consider all possible combinations ( 2^4 - 16 ) to do this ? if so , according to the question , do we have only one occasion where we get the output 1??</p>\n\n<p>please explain it.\n-Regards</p>\n', 'ViewCount': '60', 'Title': 'How to design this synchronous circuit?', 'LastActivityDate': '2013-06-08T16:50:56.530', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7395', 'Tags': '<logic><circuits>', 'CreationDate': '2013-06-08T14:44:11.917', 'Id': '12534'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In Don Knuth\'s famous series of books, <em>The Art of Computer Programming</em>, section 2.3.1, he describes an algorithm to traverse binary tree in inorder, making use of an auxiliary stack:</p>\n\n<blockquote>\n  <p><strong>T1</strong> [Initialize.] Set stack $\\rm A$ empty and set the link variable $\\rm P\\gets T$</p>\n  \n  <p><strong>T2</strong> [$\\rm P=\\Lambda$?] If $\\rm P=\\Lambda$, go to step T4.</p>\n  \n  <p><strong>T3</strong> [Stack$\\rm \\;\\Leftarrow P$] (Now $\\rm P$ points to a nonempty binary tree that is to be traversed.) push the value of $\\rm P$ onto stack $\\rm A$, then set $\\rm P\\gets LLINK(P)$</p>\n  \n  <p><strong>T4</strong> [$\\rm P\\Leftarrow Stack$] If stack $\\rm A$ is empty, the algorithm terminates; otherwise pop the top of $\\rm A$ to $\\rm P$.</p>\n  \n  <p><strong>T5</strong> [Visit $\\rm P$] Visit $\\rm NODE(P)$. Then set $\\rm P\\gets RLINK(P)$ and return to step T2.</p>\n</blockquote>\n\n<p>We can plot a flow chart of the algorithm. In the succeeding paragraph, he gives a <em>formal proof</em> of the algorithm:</p>\n\n<blockquote>\n  <p>Starting at step T2 with $\\rm P$ a pointer to a binary tree of $n$ nodes and with the stack $\\rm A$ containing $\\rm A[1]\\dotsc A[m]$ for some $m\\ge 0$, the procedure of steps T2-T5 will traverse the binary tree in question, in inorder, and will then arrive at step T4 with stack $\\rm A$ returned to its original value $\\rm A[1]\\dotsc A[m]$.</p>\n</blockquote>\n\n<p>However, as far as I know, such a formal proof is quite different from the general method described in section 1.2.1:</p>\n\n<blockquote>\n  <p>for each box in the flow chart, that if an assertion attached to any arrow leading into the box is true before the operation in that box is performed, then all of the assertions on relevant arrows leading away from the box are true after the operation.</p>\n</blockquote>\n\n<p>In fact, such a method is somewhat equivalent to <a href="http://en.wikipedia.org/wiki/Hoare_logic">Hoare logic</a>, which is used to formally check the validity of algorithms.</p>\n\n<p>Can we turn the statement mentioned to prove the traversing algorithm into a schema of Hoare logic, or the assertion-attachment of a flow chart?</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '122', 'Title': 'Question about the formal proof of the inorder traversing', 'LastActivityDate': '2013-06-11T20:17:23.337', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1715', 'Tags': '<algorithms><correctness-proof><graph-traversal><hoare-logic>', 'CreationDate': '2013-06-11T08:47:50.447', 'Id': '12610'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '140', 'Title': 'Differences between basic, complex and terminological facts in a Knowledge Base using First-Order Logic', 'LastEditDate': '2013-06-23T16:02:05.360', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '8759', 'FavoriteCount': '1', 'Body': '<p>I\'ve been reading the excellent book <a href="http://books.google.pt/books/about/Knowledge_representation_and_reasoning.html?id=OuPtLaA5QjoC&amp;redir_esc=y" rel="nofollow">Knowledge Representation and Reasoning</a> by Ronald Brachman and Hector Levesque.</p>\n\n<p>In the beginning of Section 3.2 "Vocabulary" of Chapter 3 "Expressing Knowledge" they state:</p>\n\n<blockquote>\n  <p>In creating a KB (Knowledge Base) it is a good idea to start with the set of domain-dependent predicates and functions that provide the basis for the facts about the KB\'s domain.</p>\n</blockquote>\n\n<p>In the same section these facts are separated in three categories:</p>\n\n<ul>\n<li>Basic facts</li>\n<li>Complex facts</li>\n<li>Terminological facts</li>\n</ul>\n\n<p>After reading the entire chapter I could not entirely understand the differences between these types of facts.</p>\n\n<p>Can someone help me to understand the differences in these concepts?</p>\n', 'Tags': '<terminology><logic><knowledge-representation><first-order-logic><reasoning>', 'LastEditorUserId': '8759', 'LastActivityDate': '2013-08-16T06:14:52.863', 'CommentCount': '0', 'AcceptedAnswerId': '13748', 'CreationDate': '2013-06-23T14:57:35.450', 'Id': '12841'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have been searching for long but unable to find a solution for this. My question is "Suppose you have n street lights(cannot be moved) and if you get any m from them then it should have atleast k working.Now in how many ways can this be done"</p>\n\n<p>This seems to be a combination problem, but the problem here is "m" must be sequential.</p>\n\n<p>Eg: 1 2 3 4 5 6 7 (Street lamps) \nLet m=3 \nThen the valid sets are,<br>\n1 2 3<br>\n2 3 4<br>\n3 4 5<br>\n4 5 6<br>\n5 6 7<br></p>\n\n<p>Whereas, 1 2 4 and so are invalid selections.<br><br></p>\n\n<p>So every set must have atleast 2 working lights. I have figured how to find the minimum lamps required to satisfy the condition but how can I find the number of ways in it can be done ?<br></p>\n\n<p>There should certainly some formula to do this but I am unable to find it.. :(<br></p>\n\n<p>Eg: Let n=7,m=4,k=3. The minimum number of lights that must be working to satisfy the condition that "atleast 3 of any 4 lights must be working" is 5. It is if 23467 are working. But there are more ways in which it can be satisfied like if 23467,13457... We have 4 such combinations in all for the taken values of n,m,k. I want to know how can we generalize this?</p>\n\n<p>Can be represented like this :\nn => 1111111<br>\n1 Indicates light working and 0 indicated not working.<br>\n0111110<br>\n0111011<br>\n1011101<br>\n1011110<br></p>\n\n<p>Hope the question is clear.</p>\n', 'ViewCount': '45', 'Title': 'Combination with a minimum number of elements in a fixed length subset', 'LastActivityDate': '2013-06-25T17:01:09.710', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8831', 'Tags': '<algorithms><logic><combinatorics>', 'CreationDate': '2013-06-24T07:59:15.317', 'Id': '12855'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Do they need to "unwind" exactly to the same set of paths or does it suffice when one set is contained in the other ? </p>\n\n<p>Or is it sufficient to argue that M,s satisfies both LTL formulas for any starting s and a model M, that is, reaching with both at "true" ?</p>\n\n<p><strong>Generally.</strong></p>\n\n<p>Let $M$ be any model. Further, let $s$ be any state $M$ might be in.</p>\n\n<p>Let $\\phi$ and $\\psi$ be two LTL formulas.</p>\n\n<p>If $\\forall$ paths $\\pi$ in $M$ starting at $s$ it holds that $\\pi \\models \\phi \\leftrightarrow \\pi \\models \\psi $ then we say  $\\phi$ and $\\psi$ are equivalent ($\\phi \\equiv \\psi$). </p>\n\n<p>More succinct </p>\n\n<p>$(\\pi \\models \\phi \\leftrightarrow \\pi \\models \\psi) \\rightarrow (\\phi \\equiv \\psi)$.</p>\n\n<p><strong>Example.</strong> <em>Prove that $\\neg G \\chi \\equiv F \\neg \\chi$.</em></p>\n\n<p>If we can show that $(\\pi \\models \\neg G \\chi \\leftrightarrow \\pi \\models F \\neg \\chi)$ we would have proven that $(\\neg G \\chi \\equiv F \\neg \\chi)$. So we reduce to the former.</p>\n\n<p>Step 1. We show that $(\\pi \\models \\neg G \\chi \\rightarrow \\pi \\models F \\neg \\chi)$:</p>\n\n<p>$\\{(\\pi \\models \\neg G \\chi) \\leftrightarrow (\\pi \\not\\models G \\chi) \\leftrightarrow (\\forall i \\geq 1, i \\in \\mathbb{N}. \\pi^i \\not\\models \\chi)\\} \\rightarrow \\{(\\exists i \\geq 1, i \\in \\mathbb{N}. \\pi^i \\not\\models \\chi) \\leftrightarrow (\\exists i \\geq 1, i \\in \\mathbb{N}. \\pi^i \\models \\neg\\chi) \\leftrightarrow (\\pi \\models F \\neg \\chi)\\}.$</p>\n\n<p>Step 2. We show that $(\\pi \\models F \\neg \\chi  \\rightarrow \\pi \\models \\neg G \\chi)$:</p>\n\n<p>$\\{(\\pi \\models F \\neg \\chi) \\leftrightarrow (\\exists i \\geq 1, i \\in \\mathbb{N}. \\pi^i \\models \\neg\\chi) \\leftrightarrow (\\exists i \\geq 1, i \\in \\mathbb{N}. \\pi^i \\not\\models \\chi)\\} \\rightarrow \\{?\\}.$ <em>How do I get back?</em> </p>\n\n<p><strong>Ok.</strong> I can semantically understand that if for every model and any path in it, it is true eventually that $\\neg \\chi$ holds, it cannot be the case that generally for every model and any path in it $\\chi$ will hold. How can I write this down formally?</p>\n\n<p>Would for $\\{?\\}$: $\\{\\neg (\\forall i \\geq 1, i \\in \\mathbb{N}. \\pi^i \\models \\chi) \\leftrightarrow (\\neg (\\pi \\models G \\chi)) \\leftrightarrow (\\pi \\not\\models G \\chi) \\leftrightarrow (\\pi \\models \\neg G \\chi)\\}$ be a valid argumentation ? It looks different than Step 1. and anyway is there a rule to pull $\\neg$ "out" from $\\not\\models$ this way ?</p>\n', 'ViewCount': '169', 'Title': 'Howto formally go about proving that two LTL formulas are equivalent?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-05T14:34:53.770', 'LastEditDate': '2013-07-05T14:34:53.770', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '13096', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6789', 'Tags': '<logic><proof-techniques><linear-temporal-logic>', 'CreationDate': '2013-07-05T05:55:24.307', 'Id': '13092'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>When should I call a definition recursive and when should I call it inductive?</p>\n\n<p>I have read Carl Mummert\'s <a href="http://math.stackexchange.com/a/228870/468">nice answer</a> on MSE. So if I understand correctly we refer to definitions of objects like natural numbers, lists, trees, etc. as inductive whereas we refer to definitions of operations over objects like $+$ or $head$ or $leftchild$ as recursive.</p>\n\n<p>Is this the correct way to distinguish these in programming languages theory?</p>\n\n<p>Are there examples where using either would make sense?</p>\n', 'ViewCount': '187', 'Title': 'Inductive vs. recursive definition', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-17T13:01:02.477', 'LastEditDate': '2013-07-12T10:59:05.280', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<terminology><programming-languages><logic><recursion><inductive-datatypes>', 'CreationDate': '2013-07-11T09:02:21.290', 'FavoriteCount': '1', 'Id': '13225'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I am trying to figure out difference between fully- and quasi-reduced BDDs. I have read a lot of material but still it is not very clear. As I am trying to figure out the quasi reduced version for union between two BDDs.\nThe algorithm for union between two fully-reduced BDDs is </p>\n\n<pre><code>bdd Union(bdd p, bdd q) \n   //fully-reduced version\n   local bdd r;\n1  if p=0 or q=1 then return q;\n2  if q=0 or p=1 then return p;\n3  if p=q then return p;\n4  if Cachecontainsentry\u27e8UnionCODE,{p,q}:r\u27e9 then return r;\n5  if p.lvl = q.lvl then\n6    r \u2190 UniqueTableInsert(p.lvl, Union(p[0], q[0]), Union(p[1], q[1]));\n7  else if p.lvl &gt; q.lvl then\n8    r \u2190 UniqueTableInsert(p.lvl, Union(p[0], q), Union(p[1], q));\n9  else since p.lvl &lt; q.lvl then\n10   r \u2190 UniqueTableInsert(q.lvl, Union(p, q[0]), Union(p, q[1]));\n11 enter\u27e8UnionCODE,{p,q}:r\u27e9inCache;\n12 return r;\n</code></pre>\n\n<p>I have read the paper <em>Binary decision diagrams in theory and practice</em> by Rolf Drechsler, Detlef Sieling for basics of BDD, and <em>Data Representation and Efficient Solution: A Decision Diagram Approach</em> by Gianfranco Ciardo for quasi-reduced and fully reduced definitions. Then I read more papers with more or less same description of quasi- and fully-reduced BDDs. In the former paper I mentioned the authors talk about reduced BDDs, I am not clear whether these BDDs are fully reduced. Quasi-reduced BDDs has no variable skipping so how come they are reduced when they have redundant nodes. I am pretty confused between BDD, quasi-reduced BDD and fully-reduced BDD. Yes, I am trying to find the difference between union algorithm for quasi-reduced and fully-reduced, for this I need to look at the quasi-reduced version of union algorithm.</p>\n\n<p>I figured out an algorithm for union of two quasi reduced BDDs <code>p</code> and <code>q</code> resulting in <code>r</code>.</p>\n\n<pre><code>bdd Union(bdd p, bdd q) \n  local bdd r;\n1 if p=0 or q=1 then return q;\n2 if q=0 or p=1 then return p;\n3 if p=q then return p;\n4 if Cachecontainsentry\u27e8UnionCODE,{p,q}:r\u27e9 then return r;\n  //p.lvl = q.lvl in case of quasi reduced BDDs\n5 r \u2190 UniqueTableInsert(p.lvl, Union(p[0], q[0]), Union(p[1], q[1]));\n6 enter\u27e8UnionCODE,{p,q}:r\u27e9 in Cache;\n7 return r;\n</code></pre>\n\n<p>Since there is no variable skipping, <code>p.lvl</code> is always equal to <code>q.lvl</code>. I have a question about this algorithm.</p>\n\n<p>If I want to implement Xor or Xnor for quasi-reduced BDDs, can it be done the same way as union or should I implement the expression <code>pq' + p'q</code> where <code>q' = !q</code>.</p>\n", 'ViewCount': '86', 'Title': 'Difference between fully-reduced BDD and quasi-reduced BDD', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-13T08:56:46.307', 'LastEditDate': '2013-08-13T08:56:46.307', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9556', 'Tags': '<algorithms><terminology><logic><binary-trees><bdd>', 'CreationDate': '2013-08-06T23:35:14.983', 'Id': '13637'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>Below is an algorithm for union of two quasi reduced BDDs <code>p</code> and <code>q</code> resulting in <code>r</code>.</p>\n\n<pre><code>bdd Union(bdd p, bdd q) \n  local bdd r;\n1 if p=0 or q=1 then return q;\n2 if q=0 or p=1 then return p;\n3 if p=q then return p;\n4 if Cachecontainsentry\u27e8UnionCODE,{p,q}:r\u27e9 then return r;\n  //p.lvl = q.lvl in case of quasi reduced BDDs\n5 r \u2190 UniqueTableInsert(p.lvl, Union(p[0], q[0]), Union(p[1], q[1]));\n6 enter\u27e8UnionCODE,{p,q}:r\u27e9 in Cache;\n7 return r;\n</code></pre>\n\n<p>Since there is no variable skipping, <code>p.lvl</code> is always equal to <code>q.lvl</code>. I have a question about this algorithm.</p>\n\n<p>If I want to implement Xor or Xnor for quasi-reduced BDDs, can it be done the same way as union or should I implement the expression <code>pq' + p'q</code> where <code>q' = !q</code>.</p>\n", 'ViewCount': '21', 'ClosedDate': '2013-08-13T08:54:25.437', 'Title': 'Can xor and xnor for quasi-reduced BDDs be implemented just like union?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-13T08:19:40.103', 'LastEditDate': '2013-08-13T08:19:40.103', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9598', 'Tags': '<algorithms><logic><binary-trees>', 'CreationDate': '2013-08-13T02:32:32.443', 'Id': '13722'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>How can I write an algorithm which inverts a 2-level BDD? It should take as input a 2L-level quasi-reduced BDD rooted at $r$ encoding a relation $R : B^L \u2192 2^{B^L}$ and returns the 2L-level quasi-reduced BDD rooted at $s$ encoding the relation $R^{\u22121} : B^L \u21922^{B^L}$, that is, $j \\in R(i) \\iff i \\in R^{\u22121}(j)$.</p>\n', 'ViewCount': '39', 'Title': 'Inversion of BDD', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-13T08:20:09.527', 'LastEditDate': '2013-08-13T08:20:09.527', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9598', 'Tags': '<algorithms><logic><binary-trees>', 'CreationDate': '2013-08-13T03:47:07.090', 'Id': '13723'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've recently started casually reading into combinatorial logic, and I noticed that a higher-order function that I regularly use is a combinator. This combinator is actually pretty useful (you can use it to define addition on polynomial equations, for example), but I never gave it a decent name. Does anyone recognise this combinator? (ignoring differences in function currying)</p>\n\n<pre><code>unknown = function (h, f, g)\n    function (x) h( f(x), g(x) )\n}\n</code></pre>\n\n<p>In lambda calculus, the fully curried implementation would be\n$\\lambda h. \\lambda f. \\lambda g. \\lambda x. h (f x) (g x)$. In other words, if $M$ is this mystery combinator, then its defining equation is $M \\, h \\, f \\, g \\, x = h \\, (f \\, x) \\, (g \\, x)$.</p>\n\n<p>If more information is needed, or my question is lacking key information please leave a comment and I will edit my question.</p>\n", 'ViewCount': '115', 'Title': 'What is the name of this combinator?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-25T13:24:35.553', 'LastEditDate': '2013-08-24T08:27:46.530', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '13922', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7554', 'Tags': '<logic><lambda-calculus><functional-programming>', 'CreationDate': '2013-08-24T05:09:45.133', 'Id': '13901'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I can define any boolean function (I think) using <strong>and</strong> and <strong>not</strong>, or using <strong>or</strong> and <strong>not</strong> (plus a constant 0 or 1).  And I can define <strong>or</strong> in terms of <strong>xor</strong>.  And then there are <strong>nor</strong> and <strong>nand</strong>.  So I am wondering:</p>\n\n<ol>\n<li><p>Why are we traditionally taught boolean logic using <strong>and</strong>, <strong>or</strong> and <strong>not</strong>?</p></li>\n<li><p>Is there a "simplest" set of boolean functions that can be used to define all the rest?  Or are there "families" of functions that are equivalent in some way?</p></li>\n<li><p>Do we always need 0, 1 and 2-argument functions (eg 0 or 1 constants, <strong>not</strong>, and <strong>and</strong>) to define a family?  Or are there any boolean functions with more than 2 arguments that are fundamental (can appear in an answer to 2)?  Or well-known?  Or common?  If not, what\'s so special about 0, 1 and 2 arguments?</p></li>\n<li><p>Is there some underlying mathematical theory (perhaps based on symmetry?) that makes these kinds of questions easier to answer?  For example, how do you rigorously derive all answers to questions 2 or 3?</p></li>\n</ol>\n\n<p>(I know that a partial answer to 2 (equivalent families) is "yes" because I remember De Morgan\'s theorem from college, but that\'s about as far as I can get).</p>\n', 'ViewCount': '142', 'Title': 'Fundamental Boolean Functions', 'LastEditorUserId': '1326', 'LastActivityDate': '2013-09-09T12:37:22.420', 'LastEditDate': '2013-09-09T12:37:22.420', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '14227', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1326', 'Tags': '<logic>', 'CreationDate': '2013-09-09T05:41:45.523', 'Id': '14226'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>In my descriptive complexity class, we've been asked to find a formula that characterises the language $(aa)^*$ (over the alphabet $\\{a\\}$) with a first order formula over the language $\\{&lt;, P_a\\}$.</p>\n\n<p>This was the first class, so I will recall what we've learned to be sure that I understood. To a $L$-formula $\\phi$ we associate a language $\\mathcal L(\\phi)$ which is the class of all $L$-structures in which $\\phi$ is valid.</p>\n\n<p>In my case, we then are looking for a $\\{&lt;, P_a\\}$-formula for which words of even length are models. I guess I have to say in $\\phi$ that $&lt;$ is a total order, so that I can interpret the models as words, and that $\\forall x, P_a(x)$ to say that all points are labelled as 'a'. But how to say that there has to be an even number of points in the model? The definition of having an even number of points seems recursive, so I get the impression that a formula for $(aa)^*$ should be of infinite length in first-order logic..</p>\n", 'ViewCount': '115', 'Title': 'Characterising $(aa)^*$ in first order logic', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-23T11:22:12.363', 'LastEditDate': '2013-09-23T07:23:27.313', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '14548', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10157', 'Tags': '<formal-languages><regular-languages><logic><first-order-logic>', 'CreationDate': '2013-09-23T06:16:13.087', 'Id': '14545'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '47', 'Title': 'Abduction in ASP', 'LastEditDate': '2013-09-26T05:24:52.123', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10323', 'FavoriteCount': '1', 'Body': '<p>Well, forgive my ignorance about the matter as I have been playing with <a href="http://en.wikipedia.org/wiki/Answer_set_programming" rel="nofollow">ASP</a> for the last couple of days.</p>\n\n<p>Consider this simple example</p>\n\n<pre><code>p.\ns :- p.\n</code></pre>\n\n<p>And the corresponding output generated after running the program in clingo:</p>\n\n<pre><code>$ ./clingo.exe  ex.lp --number=0\nAnswer: 1\np s\nSATISFIABLE\n\nModels      : 1\n...\n</code></pre>\n\n<p>Where possible models are generated having <code>p true</code> and the formula <code>p -&gt; s</code>.</p>\n\n<p>But if I want to ask some query that requires abductive reasoning in order to generate some answers; in other words, I need to know the possible solutions to the fact <code>s true</code>. So the "supposed" example should be like the following:</p>\n\n<pre><code>s.\ns :- p.\n</code></pre>\n\n<p>But unfortunately the answer does not contain <code>p</code> as expected.</p>\n\n<pre><code>$ ./clingo.exe  ex.lp --number=0\n% warning: p/0 is never defined\nAnswer: 1\ns\nSATISFIABLE\n\nModels      : 1\n...\n</code></pre>\n\n<p>Could that be done in any way in ASP?</p>\n', 'Tags': '<logic><logic-programming><answer-set-programming>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-01T11:55:08.060', 'CommentCount': '0', 'AcceptedAnswerId': '14732', 'CreationDate': '2013-09-25T12:08:03.420', 'Id': '14592'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>What would be the best introduction to Per Martin-L\xf6fs ideas about type theory? I've looked at some lectures from the Oregon PL summer school, but I'm still sort of puzzled by the following question:</p>\n\n<p><em>What is a type?</em></p>\n\n<p>I know what a set is, since you can define them by the usual ZF axioms and they have a very intuitive concrete model; just think of a basket filled with stuff. However, I've yet to see a reasonable definition of a type and I was wondering if there is some source that would distill this idea for dummy.</p>\n", 'ViewCount': '320', 'Title': u'Intro to Martin-L\xf6f type theory', 'LastActivityDate': '2013-10-03T06:29:23.547', 'AnswerCount': '3', 'CommentCount': '3', 'AcceptedAnswerId': '14686', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '10394', 'Tags': '<logic><type-theory>', 'CreationDate': '2013-09-29T16:38:12.663', 'FavoriteCount': '2', 'Id': '14674'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $x=(x_1,\\dots,x_n)$ and $y=(y_1,\\dots,y_n)$ be $n$-vectors of boolean variables.  I have a boolean predicate $Q(x,y)$ on $x,y$.  I give my friend Priscilla $Q(x,y)$.  In response, she gives me $P(x)$, a boolean predicate on $x$, and she claims that</p>\n\n<p>$$P(x) \\equiv \\exists y . Q(x,y),$$</p>\n\n<p>or in other words, that</p>\n\n<p>$$\\forall x . [P(x) \\Leftrightarrow \\exists y . Q(x,y)].$$</p>\n\n<p>I would like to verify her claim somehow.  How can Priscilla help me verify this claim?</p>\n\n<p>You can assume that both $P$ and $Q$ are represented as CNF formulas, and that they\'re not too large (polynomial size, or something).</p>\n\n<p>In an ideal world, it\'d be awesome if I could reduce the problem of verifying this claim to SAT: I have a SAT solver, and it\'d be great if I can use the SAT solver to verify this claim.  However, I\'m pretty sure that it\'s not going to be possible to formulate the problem of verifying this claim directly as a SAT instance; <a href="http://cstheory.stackexchange.com/q/11022/5038">testing the validity of a 2QBF formula</a> is almost certainly harder than SAT.  (The $\\Leftarrow$ direction is easy to formulate as a SAT instance, but the $\\Rightarrow$ direction is hard because it inherently involves two alternating quantifiers.)</p>\n\n<p>But suppose Priscilla could give me some additional evidence to support her claim.  Is there some additional evidence or witness Priscilla could give me, which would make it easy for me to verify her claim?  In particular, is there some additional evidence or witness she could give me, which would make it easy for me to formulate the problem of verifying her claim as an instance of SAT (which I can then apply my SAT solver to)?</p>\n\n<p>One unusual aspect of my setting is that I\'m assuming (heuristically) that I have an oracle for SAT.  If you like complexity theory, you can think about it this way: I am taking the role of a machine that can compute things in $P^{NP}$ (i.e., in $\\Delta^P_2$), and I\'m looking to verify Priscilla\'s claim using an algorithm in $P^{NP}$.  My thanks to mdx for this way of thinking about things.</p>\n\n<hr>\n\n<p>My motivation/application: I\'m looking to do formal verification of a system (e.g., symbolic model checking), and a key step in the reasoning involves quantifier elimination (i.e., starting from $Q$, obtain $P$).  I\'m hoping for some clean way to verify that the quantifier elimination was done correctly.</p>\n\n<p>If there\'s no solution that works for all possible $P,Q$, feel free to suggest a solution that is "sound but not complete", i.e., a technique that for many $P,Q$ lets me verify the claimed equivalence. (Even if it fails to verify the claim on some $P,Q$ that do satisfy the claim, I can still try this as a heuristic, as long as it never inappropriately claims to have verified a false claim.  On any given $P,Q$, it might work, or it might not; if it doesn\'t work, I\'m no worse off than where I started.)</p>\n', 'ViewCount': '109', 'Title': 'Verify correctness of quantifier elimination, using SAT', 'LastEditorUserId': '755', 'LastActivityDate': '2013-10-09T00:35:46.483', 'LastEditDate': '2013-10-07T02:09:21.303', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<logic><satisfiability><first-order-logic><software-verification><model-checking>', 'CreationDate': '2013-10-04T20:40:24.817', 'FavoriteCount': '2', 'Id': '14816'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Everybody says that <a href="https://en.wikipedia.org/wiki/Valuation_%28logic%29" rel="nofollow"><em>Valuation</em> is a <strong>truth value</strong> assignment to <strong>all</strong> variables in the formula.</a></p>\n\n<ol>\n<li><p>How do you call the valuation when some (neither single yet nor all) variables are\nassigned a value? </p></li>\n<li><p><code>Truth value</code> implies that variables are binary. How do you call the multivalued\ncase?</p></li>\n<li><p>I know that Haskel uses the term "<a href="https://en.wikipedia.org/wiki/Partial_application" rel="nofollow">partial application</a>". If "partial application" is supplied with optimization, they call it "<a href="https://en.wikipedia.org/wiki/Partial_evaluation" rel="nofollow">partial evaluation</a>". I am not sure whether boolean valuation falls into the <code>application</code> or <code>evaluation</code> or second category?</p></li>\n</ol>\n\n<p><strong>ps, Dec 2013</strong></p>\n\n<ol>\n<li>Is it right that single variable assignment is called <strong>Restrict</strong> operation? I read <code>Restrict(Function F, variable v, constant k)</code> is defined as "Shannon cofactor of $F$ w.r.t. $v=k$" in <a href="https://embedded.eecs.berkeley.edu/eecsx44/lectures/BinaryDecisionDiagrams.pdf" rel="nofollow">Berkly lectures.</a></li>\n</ol>\n', 'ViewCount': '66', 'Title': 'Multivalued, partial evaluation', 'LastEditorUserId': '2879', 'LastActivityDate': '2014-01-14T21:32:08.180', 'LastEditDate': '2013-12-15T20:40:09.053', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2879', 'Tags': '<terminology><logic>', 'CreationDate': '2013-10-15T07:35:29.503', 'Id': '16098'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $\\Sigma$ be the alphabet $\\{a, b, c, d\\}$ and let $R$ be the following relation on $\\Sigma^*$: $R(x, y)$ is true if every letter in string $x$ also occurs in $y$, and every letter in string $y$ also occurs in $x$.  (For example, $R(abba, babbb)$ is true and $R(abcb, cbbcb)$ is false.)  How many (non-empty) sets are in the partition of $\\Sigma^*$ corresponding to $R$?  (That is, how many equivalence classes does R have?)</p>\n\n<p>Any help will help.</p>\n', 'ViewCount': '38', 'Title': 'Counting involving equivalence classes and languages', 'LastEditorUserId': '204', 'LastActivityDate': '2013-10-21T14:37:08.860', 'LastEditDate': '2013-10-21T14:37:08.860', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'OwnerDisplayName': 'user2833171', 'PostTypeId': '1', 'Tags': '<logic><combinatorics><counting>', 'CreationDate': '2013-10-01T01:52:14.287', 'Id': '16282'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I am trying to convert the following 2-sat clauses to implications and then draw the implication graph.</p>\n\n<p>The clauses are: <code>{\xacxvy}, {\xacyvz}, {\xaczvw} ,{\xacwvu},{\xacuv\xacx},{xvw},{\xacwvx}</code></p>\n\n<p>I converted the boolean literals into implications so I could construct the implication graph:</p>\n\n<p><code>{\xacxvy}</code>: I have <code>x--&gt;y</code> and <code>\xacx --&gt;\xacy</code></p>\n\n<p><code>{\xacyvz}</code> : I have <code>y--&gt;z</code> and <code>\xacy--&gt;\xacz</code></p>\n\n<p><code>{\xaczvw}</code> : I have <code>z--&gt;w</code> and <code>\xacz--&gt;\xacw</code></p>\n\n<p><code>{\xacwvu}</code> : I have <code>w--&gt;u</code> and <code>\xacw---&gt;\xacu</code></p>\n\n<p><code>{\xacuv\xacx}</code> : I have <code>u--&gt;\xacx</code> and <code>\xacx--&gt;\xacu</code> </p>\n\n<p><code>{xvw}</code> : I have <code>\xacx--&gt;w</code> and <code>\xacw--&gt;x</code></p>\n\n<p><code>{\xacwvx}</code> : I have <code>w--&gt;x</code> and <code>\xacw--&gt;\xacx</code></p>\n\n<p>Am I doing this right? If so, I have constructed this implication graph to prove it is not satisfiable.</p>\n\n<p><img src="http://i.stack.imgur.com/tdXrm.png" alt="enter image description here"></p>\n\n<p>I would argue that these literals are not satisfiable because of the infinite loops you can have from \xacw \xacx \xacy \xacz \xacw and w x y z w. Is this a sufficient enough explanation?</p>\n\n<p>Thanks in advance!</p>\n', 'ViewCount': '190', 'Title': 'Drawing an implication graph for 2-SAT clauses', 'LastEditorUserId': '472', 'LastActivityDate': '2013-10-22T10:01:51.437', 'LastEditDate': '2013-10-22T10:01:51.437', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '16318', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7173', 'Tags': '<complexity-theory><logic><satisfiability>', 'CreationDate': '2013-10-21T18:35:42.693', 'Id': '16311'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>From the book <em>Computer organization and design</em> by Patterson&amp;Hennessy:</p>\n\n<blockquote>\n  <p><strong>Parity</strong> is a function in which the output depends on the number of 1s in in the input. For an <em>even</em> parity function, the output is 1 if the input has an even number of ones. Suppose a ROM is used to implement an even parity function with a 4-bit input. Then the contents of the ROM is\n  $$\\text{Address} \\ 0 : \\ 0 \\\\ \\text{Address} \\ 1: \\ 1 \\\\ \\text{Address} \\ 2 : \\ 0 \\\\ \\text{Address} \\ 3 : \\ 1 \\\\ \\vdots \\\\ \\text{Address} \\ 13 : \\ 1 \\\\ \\text{Address} \\ 14 : \\ 0 \\\\ \\text{Address} \\ 15 : \\ 1$$</p>\n</blockquote>\n\n<p>As per my understanding, ROM which implements the <em>even</em> parity function should store 0 at both the Address 1 and the Address 2, 1 at the Address 3, ... 0 at both the Address 13 and 14, then 1 at the Address 15, for the Address $k$ to represent the map-value of $(k)_{\\text{base}2}$.</p>\n\n<p>According to this the concept defined above is not clear enough, Can someone clarify the doubt?</p>\n', 'ViewCount': '101', 'Title': 'Shouldn\'t the "even parity" function map 1101 to 0?', 'LastEditorUserId': '11048', 'LastActivityDate': '2013-10-31T12:43:51.523', 'LastEditDate': '2013-10-31T12:43:51.523', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '16600', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10482', 'Tags': '<logic>', 'CreationDate': '2013-10-31T08:13:36.087', 'Id': '16599'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It is known that the temporal logics LTL,CTL,CTL* can be translated/embedded into the $\\mu$-calculus. In other words, the (modal) $\\mu$-calculus subsumes these logics,\n(i.e. it is more expressive.)</p>\n\n<p>Could you please explain/point me to papers/books that elaborate on this matter.\nIn particular, are there concrete fairness, liveness, etc. properties not expressible in the temporal logics but in the $\\mu$-calculus?</p>\n', 'ViewCount': '293', 'Title': 'Why use $\\mu$-calculus and not LTL,CTL,CTL*?', 'LastEditorUserId': '9950', 'LastActivityDate': '2013-11-05T19:02:14.673', 'LastEditDate': '2013-10-31T18:15:11.500', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '11105', 'Tags': '<linear-temporal-logic><mu-calculus>', 'CreationDate': '2013-10-31T16:46:17.190', 'Id': '16603'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>When using <a href="http://en.wikipedia.org/wiki/Resolution_%28logic%29" rel="nofollow">resolution</a>, if the empty set {\xd8} is derived from a formula like {\xacx,\xacy} {x,y}, does that mean the formula is unsatisfiable? </p>\n\n<p>If this is the case, why <strong>is</strong> <code>{x,y},{\xacx,\xacy},{x,\xacy}</code> satisfiable, and </p>\n\n<p><code>{x},{\xacx},{x,y,z,w}</code> <strong>is not</strong> satisfiable? </p>\n', 'ViewCount': '92', 'Title': 'Resolution and what it means to derive the empty set', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-31T07:53:18.520', 'LastEditDate': '2014-03-31T07:53:18.520', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7173', 'Tags': '<algorithms><logic><satisfiability><propositional-logic>', 'CreationDate': '2013-11-16T21:19:46.557', 'Id': '18083'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I need to study fuzzy logic and its application in the field of A.I.<br></p>\n\n<p>I\'m reading "First Course On Fuzzy Theory and Application" (<a href="http://www.shahroodut.ac.ir/fa/download.php?id=1111119783" rel="nofollow">pdf</a>) (<a href="http://www.worldcat.org/oclc/56878880" rel="nofollow">WorldCat</a>), but not much of examples there and \nI couldn\'t find a solution manual for it.</p>\n\n<p>Any recommendation for a self study book ?</p>\n', 'ViewCount': '67', 'Title': 'Introductory book to fuzzy logic for Artificial Intelligence', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-18T21:18:54.847', 'LastEditDate': '2013-11-18T21:18:54.847', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11347', 'Tags': '<reference-request><logic><artificial-intelligence><books>', 'CreationDate': '2013-11-18T14:27:28.253', 'Id': '18117'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Suppose one wants to use a \u03bc-calculus model checker, but specify things in temporal logics, which is easier (more intuitive). Is there a technique (even better, a tool) that automatically translates formulae in any of these logics (CTL,CTL* or LTL) to the \u03bc-calculus?</p>\n\n<p>Thanks very much in advance!</p>\n', 'ViewCount': '61', 'Title': u'Techniques (tools) to convert temporal logic (CTL,CTL* or LTL) to \u03bc-calculus formulae', 'LastActivityDate': '2013-11-20T14:43:23.953', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11105', 'Tags': '<linear-temporal-logic><mu-calculus>', 'CreationDate': '2013-11-20T11:01:24.603', 'Id': '18196'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It is well known that in Descriptive Complexity Theory FO is equivalent to AC0.</p>\n\n<p>However, this accepts a couple of a theory and a string <code>&lt;T,s&gt;</code> iff the interpretation of s as a query is satisfied by the theory T.</p>\n\n<p>My question now is if there is an interpretation of which is stronger than AC0. For example, is there an interpretation of s as a theory so that the formalism accepts if s is a theory that is logically entailed by T. This problem is undecidable, but maybe it is possible to express problems in it which are stronger than AC0. (Reachability would be an interesting example if anyone could make this work)</p>\n', 'ViewCount': '61', 'Title': 'On the Turing Completeness of First Order Logic', 'LastActivityDate': '2013-11-20T11:53:17.923', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '11502', 'Tags': '<complexity-theory><logic><turing-completeness><first-order-logic>', 'CreationDate': '2013-11-20T11:53:17.923', 'FavoriteCount': '1', 'Id': '18197'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p>Simplify the boolean function using the K-map of $F$ together with the don\'t care condition $d$:\n  $F(A,B,C,D)=\\Sigma(1,2,3,4,19,11,12,13)$</p>\n  \n  <p>$d(A,B,C,D)=\\Sigma(0,6,7,8,9)$</p>\n  \n  <p>a) In sum of products form</p>\n  \n  <p>b) In product of sums form</p>\n</blockquote>\n\n<p>For this problem, I am able to simplify the function in sum of products form, but when I try to simplify it in product of sums form, I don\'t get the same truth table. Here\'s what I did:</p>\n\n<p>a) Sum of products</p>\n\n<p><img src="http://i.stack.imgur.com/anAZx.png" alt="sum of products k-map"></p>\n\n<p>$F= C\'D\' + AC\' + B\' + A\'C$</p>\n\n<p>b) Product of sums</p>\n\n<p><img src="http://i.stack.imgur.com/GW4NX.png" alt="product of sums k-map"></p>\n\n<p>$F=(B+C+D)(A\'+B+C)(A+B\'+D\')(B\'+C\')$</p>\n\n<p>What am I doing wrong?</p>\n', 'ViewCount': '488', 'Title': "Simplifying a boolean function with don't care using K-map in SOP and POS form", 'LastActivityDate': '2013-11-26T00:41:08.743', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4689', 'Tags': '<logic><k-map>', 'CreationDate': '2013-11-26T00:41:08.743', 'FavoriteCount': '2', 'Id': '18344'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>All of the solutions for <a href="http://en.wikipedia.org/wiki/Zebra_Puzzle" rel="nofollow">the zebra puzzle</a> have a variable for each of the properties and a domain with the possible values. For instance A for Nationalities, B for pets, ...</p>\n\n<p>Ai with i = 1..5 and the domain for example {Dutch, Spanish, Italian, French, English}</p>\n\n<p>As I\'ve seen in the n-queens puzzle, there can always be multiple representations for a constraint problem. What could be alternative representations for the zebra puzzle?</p>\n\n<p>For example, I was thinking about following representation:</p>\n\n<ul>\n<li>HouseOne indices 1..4 with domain {1,2,3,4,5}</li>\n<li>HouseTwo indices 1..4 with domain {1,2,3,4,5}</li>\n<li>HouseThree indices 1..4 with domain {1,2,3,4,5}</li>\n<li>HouseFour indices 1..4 with domain {1,2,3,4,5}</li>\n<li>HouseFive indices 1..4 with domain {1,2,3,4,5}</li>\n</ul>\n\n<p>Could this work?</p>\n', 'ViewCount': '65', 'Title': 'Alternative representations for the zebra puzzle?', 'LastEditorUserId': '755', 'LastActivityDate': '2013-12-04T00:14:06.723', 'LastEditDate': '2013-12-04T00:14:06.723', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '10575', 'Tags': '<logic><satisfiability><constraint-programming>', 'CreationDate': '2013-12-03T16:09:56.193', 'Id': '18574'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I'm learning about Logic; I've devised a few sentences to convert into logic to test myself and see if i've grasped the topic. It would be of great help if you could tell me if i'm doing it right!</p>\n\n<ul>\n<li>Every student who likes chocolate is smart:</li>\n</ul>\n\n<p>(Every student) (who likes chocolate) (is smart)</p>\n\n<p>\u2200x \u2208D, [Like (Student (x), chocolate) \u2192 Smart(x)]</p>\n\n<ul>\n<li>There exists a barber that shaves all men who do not shave themselves.</li>\n</ul>\n\n<p>(There exists a barber) (that shaves all men) (if and only if they do not shave themselves)</p>\n\n<p>\u2203x \u2208D, [Shaves (x, \u2200y) \u2192 Shave (y, y)]</p>\n\n<p>Thank you</p>\n", 'ViewCount': '60', 'Title': 'Converting English into Logic', 'LastActivityDate': '2013-12-05T23:34:42.517', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18667', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11856', 'Tags': '<formal-languages><logic>', 'CreationDate': '2013-12-05T21:55:26.813', 'Id': '18664'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Here is a Kripke structure M over AP = {a,b,c}</p>\n\n<pre><code>M = (S, start, R, L)\nS = {s_0, S_1, s_2, s_3}\nstart = s_0\nR = {(s_0,s_2), (s_2,s_2), (s_2,s_1), (s_1,s_3), (s_3,s_1), (s_1,s_0)}\nL(s_0) = {a}\nL(s_1) = {b}\nL(s_2) = {b,c}\nL(s_3) = {b,c}\n</code></pre>\n\n<p>Indicate for each CTL* formula below those states of M for which the formula hods.</p>\n\n<p>(I already have generated the answers. I am putting the answers and I need someone to cross validate if it is correct. Here 'or' represents disjunction)</p>\n\n<ol>\n<li>EFa // My answer = {s_0,s_1,s_2,s_3}</li>\n<li>EG(b or c) // My answer = {s_2}</li>\n<li>EG((EXc) or (AXa)) // My answer = {s_0,s_2}</li>\n<li>AGFc // My answer = {s_0,s_1,s_2,s_3}</li>\n<li>EGc // My answer = {s_2}</li>\n<li>EFb // My answer = {s_0,s_1,s_2,s_3}</li>\n<li>A(cUb) //U means Untill. My answer = {s_1,s_2,s_3}</li>\n<li>A(GFa --> GFc) // My answer = {s_0,s_1,s_2,s_3}</li>\n</ol>\n\n<p>Can anyone cross validate my answers? It is really important for me.</p>\n", 'ViewCount': '23', 'ClosedDate': '2013-12-13T09:38:49.167', 'Title': 'Kripke Structure and Temporal', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-13T09:38:42.180', 'LastEditDate': '2013-12-13T09:38:42.180', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '-1', 'OwnerDisplayName': 'user3087784', 'PostTypeId': '1', 'Tags': '<logic><temporal-logic>', 'CreationDate': '2013-12-10T17:17:09.207', 'Id': '18944'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>While reading an <a href="http://lesswrong.com/lw/93q/completeness_incompleteness_and_what_it_all_means/" rel="nofollow">article</a> on logic, there is a sentence "No number is equal to zero" and we have to assign truth values to this sentence. I hope this is true and the article says it as false. </p>\n\n<p>Can someone explain me why it is false? Or the author of the article is wrong?</p>\n', 'ViewCount': '153', 'Title': 'No number is equal to Zero, is this statement true or false?', 'LastEditorUserId': '268', 'LastActivityDate': '2013-12-20T22:48:49.000', 'LastEditDate': '2013-12-20T17:30:27.037', 'AnswerCount': '4', 'CommentCount': '7', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12239', 'Tags': '<logic><first-order-logic>', 'CreationDate': '2013-12-20T10:41:22.620', 'Id': '19152'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The conclusion follows from all the premises. It seems to me that this means that conclusion from the conjuntion of the premises. Right? Why does logic uses comma instead?</p>\n', 'ViewCount': '70', 'Title': u'Why do they say `A, B, C, ... implies M` instead of `A\u2227B\u2227 C\u2227 ... implies M`?', 'LastActivityDate': '2013-12-22T17:45:33.470', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '19196', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2879', 'Tags': '<logic>', 'CreationDate': '2013-12-22T17:22:46.447', 'Id': '19194'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>As there is an untyped lambda calculus, and a simply-typed lambda calculus (as described, for example, in Benjamin Pierce\'s book Types and Programming Languages), is there a simply-typed combinatory logic?</p>\n\n<p>For example, it would seem that natural types for the combinators S, K, and I would be</p>\n\n<pre><code>S : (a -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\nK : a -&gt; b -&gt; a\nI : a -&gt; a\n</code></pre>\n\n<p>where a, b, and c are type variables ranging over some set of types T.  Now, perhaps we could get started with a single base type, Bool.  Our set of types T is then Bool along with whatever types can be formed using the three patterns</p>\n\n<pre><code>(a -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\na -&gt; b -&gt; a\na -&gt; a\n</code></pre>\n\n<p>where a, b, c in T.</p>\n\n<p>There would be two new constants in the language.</p>\n\n<pre><code>T : Bool\nF : Bool\n</code></pre>\n\n<p>So, this language consists of the symbols S, K, I, T, and F, along with parentheses.  It has one base type Bool, and the "function types" that can be made from the S, K, and I combinator patterns.</p>\n\n<p>Can this system be made to work?  For example, is there a well-typed if-then-else construction that can be formed from only S, K, I, T, F?</p>\n', 'ViewCount': '30', 'Title': 'Simply Typed Combinatory Logic?', 'LastActivityDate': '2013-12-29T03:46:31.960', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19353', 'Score': '5', 'OwnerDisplayName': 'Scott Walck', 'PostTypeId': '1', 'Tags': '<functional-programming><logic><lambda-calculus>', 'CreationDate': '2013-12-24T16:12:48.470', 'Id': '19352'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '65', 'Title': 'Computation Tree Logic and its Temporal Opeators', 'LastEditDate': '2013-12-31T09:11:03.193', 'AnswerCount': '2', 'Score': '1', 'OwnerDisplayName': '0xbadf00d', 'PostTypeId': '1', 'OwnerUserId': '12502', 'Body': '<p>I\'ve got some questions about the <a href="http://en.wikipedia.org/wiki/Computation_tree_logic#Temporal_operators" rel="nofollow">temporal operators</a> in computation tree logic:</p>\n\n<ol>\n<li>Does the <strong>F</strong><code>inally</code> path-specific quantifier <code>Fq</code> mean that <code>q</code> has to hold in a <em>subsequent</em> state or is it also fulfilled when <code>q</code> holds in the <em>current</em> state?</li>\n<li><p>Please consider the following example:</p>\n\n<p><img src="http://i.stack.imgur.com/lDuJY.gif" alt="enter image description here"></p>\n\n<p>What exactly is specified here? Does it mean: If <code>q AND r</code> holds on a path <code>P</code> in a graph <code>G</code> then <code>q</code> has to hold somewhere on the subsequent path of <code>P</code>.\nOr does it mean: ... <code>q</code> has to hold somewhere on the subsequent path of <strong>every path of <code>G</code></strong>?</p></li>\n</ol>\n', 'Tags': '<logic><temporal-logic>', 'LastEditorUserId': '9550', 'LastActivityDate': '2013-12-31T09:11:03.193', 'CommentCount': '0', 'AcceptedAnswerId': '19393', 'CreationDate': '2013-12-30T14:03:21.283', 'Id': '19388'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m trying to understand <a href="http://www.cs.rpi.edu/academics/courses/spring11/proglang/handouts/lambda-calculus-chapter.pdf" rel="nofollow">this</a> lecture, section 2.7. Why would the normal order sequencing print out <code>"hello" "world"</code> and not <code>"world" "hello"</code>? I may be misinterpreting the order in which the arguments are applied.</p>\n\n<p>It looks like the expression </p>\n\n<p>$$\n((Seq (display "hello"))\\; (display "world"))\n$$</p>\n\n<p>would evaluate to</p>\n\n<p>$$\n\\lambda z.((display "world")\\; (display "hello"))\n$$</p>\n\n<p>and that would, under normal order, would print out <code>"world" "hello"</code>.</p>\n\n<p>My question is whether the assumption I\'m making is correct. If not, could you show the correct derivation of the end-expression?</p>\n', 'ViewCount': '38', 'Title': 'Normal order sequencing vs applicative order sequencing', 'LastActivityDate': '2014-01-05T06:47:56.200', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19508', 'Score': '1', 'OwnerDisplayName': 'alexwriteshere', 'PostTypeId': '1', 'OwnerUserId': '12599', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2014-01-04T04:35:17.650', 'Id': '19507'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '126', 'Title': 'What makes PROLOG Turing-complete?', 'LastEditDate': '2014-01-09T09:14:38.860', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '8415', 'FavoriteCount': '0', 'Body': u'<p>I know that it can be proven PROLOG is Turing-complete by constructing a program that simulates a Turing machine like this:</p>\n\n<pre><code>turing(Tape0, Tape) :-\n    perform(q0, [], Ls, Tape0, Rs),\n    reverse(Ls, Ls1),\n    append(Ls1, Rs, Tape).\n\nperform(qf, Ls, Ls, Rs, Rs) :- !.\nperform(Q0, Ls0, Ls, Rs0, Rs) :-\n    symbol(Rs0, Sym, RsRest),\n    once(rule(Q0, Sym, Q1, NewSym, Action)),\n    action(Action, Ls0, Ls1, [NewSym|RsRest], Rs1),\n    perform(Q1, Ls1, Ls, Rs1, Rs).\n\nsymbol([], b, []).\nsymbol([Sym|Rs], Sym, Rs).\n\naction(left, Ls0, Ls, Rs0, Rs) :- left(Ls0, Ls, Rs0, Rs).\naction(stay, Ls, Ls, Rs, Rs).\naction(right, Ls0, [Sym|Ls0], [Sym|Rs], Rs).\n\nleft([], [], Rs0, [b|Rs0]).\nleft([L|Ls], Ls, Rs, [L|Rs]).\n</code></pre>\n\n<p><a href="http://en.wikipedia.org/wiki/Prolog#Turing_completeness" rel="nofollow">Source</a></p>\n\n<p>However, I\u2019m wondering which parts of the PROLOG language one could strip away (esp. function symbols, clause overloading, recursion, unification) without losing Turing completeness. Are function symbols themselves Turing complete?</p>\n', 'Tags': '<programming-languages><turing-completeness><logic-programming><prolog>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-09T09:14:38.860', 'CommentCount': '3', 'AcceptedAnswerId': '19593', 'CreationDate': '2014-01-09T01:16:39.903', 'Id': '19591'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am learning about temporal logic and model checking systems. One conceptual exercise that I am struggling with is how to create a transition system which satisfies only <em>one</em> of two given properties, when one is in LTL and one is in CTL. For example:</p>\n\n<ul>\n<li>Find a transition system that satisfies only one of the following two properties: $FGp$, $AFEGp$</li>\n<li>Find a transition system that satisfies only one of the following two properties: $FGp$, $EFEGp$</li>\n<li>Find a transition system that satisfies only one of the following two properties: $GFp$, $AGEFp$</li>\n</ul>\n\n<p>How should I begin when trying to reason about these types of problems? In general, is it easier to design transition systems for LTL properties or CTL properties? Or does it depend on the situation?</p>\n\n<p>Any insight would be appreciated!</p>\n', 'ViewCount': '48', 'Title': 'Transition systems that satisfy LTL but not CTL, and vice versa', 'LastEditorUserId': '12914', 'LastActivityDate': '2014-01-17T23:04:29.320', 'LastEditDate': '2014-01-17T23:04:29.320', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12914', 'Tags': '<logic><linear-temporal-logic><model-checking>', 'CreationDate': '2014-01-17T07:50:25.933', 'Id': '19777'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Consider two lambda expressions $\\mu$, $\\nu$ representing computable functions $f_{\\mu,\\nu}:\\mathbb{N} \\rightarrow \\mathbb{N}$. If $\\mu$ and $\\nu$ are equivalent under the combination of $\\beta$-reductions, $\\alpha$-conversions and $\\eta$-conversions then $f_\\mu=f_\\nu$. </p>\n\n<blockquote>\n  <p>Under what conditions does the converse hold? In particular, if it is possible to prove in Peano arithmetic that $f_\\mu=f_\\nu$, does it follow $\\mu$, $\\nu$ are equivalent in the above sense?</p>\n</blockquote>\n', 'ViewCount': '78', 'Title': 'How strong is equivalence of lambda expressions?', 'LastActivityDate': '2014-02-05T18:01:05.057', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '13206', 'Tags': '<logic><lambda-calculus>', 'CreationDate': '2014-01-29T01:21:58.243', 'Id': '20052'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I read a paper which talks about "a logic formula in which each variable appears at most twice unnegated and once negated". The term "unnegated" is double-negative, which makes it slightly unclear. Is there a more positive term to denote a variable that is not negated?</p>\n\n<p>I looked in an <a href="http://thesaurus.com/browse/negate" rel="nofollow">English thesaurus</a>, but all suggestions seem out-of-context in logic.</p>\n', 'ViewCount': '56', 'Title': 'Positive term for "unnegated"?', 'LastActivityDate': '2014-01-29T19:41:25.857', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '20079', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<terminology><logic>', 'CreationDate': '2014-01-29T15:32:50.410', 'Id': '20066'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm trying to wrap my head around an NP-completeness proof which seem to revolve around SAT/3CNF-SAT.</p>\n\n<p>Maybe it's the late hour but I'm afraid I can't think of a 3CNF formula that cannot be satisfied (I'm probably missing something obvious).</p>\n\n<p>Can you give me an example for such formula?</p>\n", 'ViewCount': '76', 'Title': "What's an example of an unsatisfiable 3-CNF formula?", 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-30T17:39:23.717', 'LastEditDate': '2014-01-30T17:33:53.110', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '20118', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11171', 'Tags': '<logic><satisfiability><3-sat>', 'CreationDate': '2014-01-30T16:18:49.413', 'Id': '20117'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Specifications in <a href="http://en.wikipedia.org/wiki/Kripke_structure_%28model_checking%29" rel="nofollow">Kripke structures</a> are verified by Computation tree logic (CTL). However, refering to <a href="http://en.wikipedia.org/wiki/Computation_tree_logic" rel="nofollow">this Wikipedia article</a> the CTL-operators are relative to a <em>current state</em>. So, when we want to verify if <code>EF q</code> is satisfied in a Kripke structure</p>\n\n<p>Do we only need to check if <code>EF q</code> holds starting from the starting state oder do we need to check if <code>EF q</code> holds starting from every state?</p>\n', 'ViewCount': '53', 'Title': 'Computation tree logic and Kripke structures', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-01T20:45:50.520', 'LastEditDate': '2014-02-01T20:45:50.520', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '20193', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12502', 'Tags': '<logic><model-checking><temporal-logic>', 'CreationDate': '2014-02-01T17:01:58.490', 'Id': '20191'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It\'s quite a short question: Refering to <a href="http://en.wikipedia.org/wiki/Computation_tree_logic" rel="nofollow">this Wikipedia article</a> <code>p U q</code> means, that <em><code>p</code> has to hold at least until at some point <code>q</code> holds</em>.</p>\n\n<p>So, does it mean:</p>\n\n<ol>\n<li>On each path starting from the current state <code>p</code> has to hold in each state until a state is reached in which <code>q</code> holds.</li>\n<li>On each path starting from the current state <code>p</code> has to hold in any state before a state is reached in which <code>q</code> holds.</li>\n</ol>\n\n<p><strong>Example</strong>: Suppose <code>p</code> holds in <code>s3</code> and <code>q</code> holds in <code>s5</code>. Let <code>s0</code> be the starting state and the set of edges given by <code>{ (s0,s1),(s1,s2),(s2,s3),(s3,s4),(s4,s5) }</code>. Let\'s assume <code>p</code> and <code>q</code> don\'t hold in all the other states. Is <code>p U q</code> satisfied, starting from <code>s0</code>?</p>\n', 'ViewCount': '35', 'Title': 'Until quantifier of Computation Tree Logic', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-01T20:48:26.030', 'LastEditDate': '2014-02-01T20:48:26.030', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '20198', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12502', 'Tags': '<terminology><logic><temporal-logic>', 'CreationDate': '2014-02-01T19:14:08.947', 'Id': '20197'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'ll preface this by saying that this IS a homework question.</p>\n\n<p>However, when asked about how to solve it in class, (I believe) my professor was unable to complete it.</p>\n\n<p>The question is: </p>\n\n<blockquote>\n  <p>Compute the weakest precondition for each of the following \n  assignment statements and postconditions:\n  $$a = a + 2b - 1\\ \\{a &gt; 1\\}$$ (where a > 1 is the postcondition)</p>\n</blockquote>\n\n<p>His answer was: "$a &gt; 2 - 2b$."\nIs this correct? It seems that he broke the rules of equivalents, by using the ">" as "="</p>\n\n<p>I believe the answer is:\n$$\\{a&gt;1\\;\\wedge\\; b&lt;\\tfrac12\\}\\quad\\text{or}\\quad \\{a &gt; 0\\;\\wedge\\;2b-1 +a &gt;1\\},$$ \n    where the "$\\wedge$" symbol means "and"</p>\n\n<p>We\'re using <em>Concepts of Programming Languages</em>, by Sebesta, 10th Edition, so any references from that material would be excellent :)</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '35', 'Title': 'Axiomatic Semantics and Postconditions', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-02-07T00:42:18.400', 'LastEditDate': '2014-02-06T23:02:29.157', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '21411', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14445', 'Tags': '<semantics><hoare-logic>', 'CreationDate': '2014-02-06T22:17:44.433', 'Id': '21407'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It is nice to know that every boolean formula can be expressed by zero-one\ninteger programming <a href="http://cs.stackexchange.com/questions/12102/express-boolean-logic-operations-in-zero-one-integer-linear-programming-ilp">by this answered question</a>. But are there any applications?</p>\n\n<p>To be more precise: Are there papers which use the existense of zero-one\ninteger programming for boolean operations? </p>\n', 'ViewCount': '71', 'LastEditorDisplayName': 'user14525', 'ClosedDate': '2014-02-15T04:35:23.437', 'Title': 'Applications for boolean logic operations in zero-one integer linear programming (ILP)', 'LastActivityDate': '2014-02-12T01:24:51.077', 'LastEditDate': '2014-02-10T14:25:03.970', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'user14525', 'PostTypeId': '1', 'Tags': '<logic><linear-programming><applied-theory>', 'CreationDate': '2014-02-09T19:19:55.597', 'Id': '21473'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a question about predicate logic. Suppose we have the following predicates:</p>\n\n<p>$\\text{Study}(x,y)$: x studies y</p>\n\n<p>$\\text{Comp}(x)$: x is a computing student</p>\n\n<p>I want to encode the following sentence in predicate logic: "Some, but not all computer students study logic."</p>\n\n<p>A potential answer is:</p>\n\n<p>$$\\exists x(\\text{Comp}(x)\\land \\text{Study}(x,l))\\land\\neg \\forall x(\\text{Comp}(x)\\implies \\text{Study}(x,l))$$</p>\n\n<p>Why is there an $\\implies$ and not a $\\land$? Is this formulation correct?</p>\n', 'ViewCount': '34', 'Title': 'Logic Question - Why is This an Implication?', 'LastEditorUserId': '2253', 'LastActivityDate': '2014-02-11T04:23:40.600', 'LastEditDate': '2014-02-11T04:23:40.600', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14556', 'Tags': '<logic><first-order-logic><reasoning>', 'CreationDate': '2014-02-11T00:14:19.980', 'Id': '21512'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I read a book which says that in Predicate Calculus, syntactic theorem proving is identical (complete and sound) with semantic entailment and this is very useful because it is easier to prove positive witnesses in natural deduction whereas when you seem to fail you better switch to semantic account to demonstrate a counter-example.</p>\n\n<p>Particularly <a href="http://www.google.ee/search?q=%22%20when%20we%20look%20at%20predicate%20logic,%20we%20will%20find%20that%20there%20are%20infinitely%20many%20valuations%22" rel="nofollow">Logic in computer science</a> says</p>\n\n<blockquote>\n  <p>to show that \u0393  \u22a2\u03c8 is valid, we need to provide a proof of \u03c8 from \u0393.\n  Yet, how can we show that \u03c8 is not a consequence of \u0393? Intuitively,\n  this is harder; how can you possibly show that there is no proof of\n  something? You would have to consider every \u2018candidate\u2019 proof and show\n  it is not one. Thus, proof theory gives a \u2018positive\u2019 characterisation\n  of the logic; it provides convincing evidence for assertions like \u2018\u0393\n  \u22a2 \u03c8 is valid,\u2019 but it is not very useful for establishing evidence\n  for assertions of the form \u2018\u0393 \u22a2 \u03c6 is not valid.\u2019</p>\n  \n  <p>Semantics, on the other hand, works in the opposite way. To show\n  that \u03c8 is not a consequence of \u0393 is the \u2018easy\u2019 bit: find a model in\n  which all \u03c6_i are true, but \u03c8 isn\u2019t. Showing that \u03c8 is a consequence\n  of \u0393, on the other hand, is harder in principle. For propositional\n  logic, you need to show that every valuation (an assignment of truth\n  values to all atoms involved) that makes all \u03c6_i true also makes \u03c8\n  true. If there is a small number of valuations, this is not so bad.\n  However, when we look at predicate logic, we will find that there are\n  infinitely many valuations, called \'models\' from hereon, to consider.\n  Thus, in semantics we have a \u2018negative\u2019 characterisation of the logic.\n  We find establishing assertions of the form \u2018\u0393 \u22ad \u03c8\u2019 (\u03c8 is not a\n  semantic entailment of all formulas in \u0393) easier than establishing \u2018\u0393\n  \u22a8 \u03c8\u2019(\u03c8 is a semantic entailment of \u0393), for in the former case we need\n  only talk about one model, whereas in the latter we potentially have\n  to talk about infinitely many. All this goes to show that it is\n  important to study both proof theory and semantics. For example, if\n  you are trying to show that \u03c8 is not a consequence of \u0393 and you have a\n  hard time doing that, you might want to change your strategy for a\n  while by trying to prove the validity of \u0393 \u22a2 \u03c8. If you find a proof,\n  you know for sure that \u03c8 is a consequence of \u0393. If you can\u2019t find a\n  proof, then your attempts at proving it often provide insights which\n  lead you to the construction of a counter example. The fact that proof\n  theory and semantics for predicate logic are equivalent is amazing,\n  but it does not stop them having separate roles in logic, each\n  meriting close study.</p>\n</blockquote>\n\n<p>I was sure that we can prove the opposite by proving \u22a2 \xac\u03c8 and wondered why do we need the entailment. Now I see that validity of the opposite has nothing to do with validity of affirmative statement. Thanks. What we need is the satisfaction of the \xac\u03c8, which says that there is a counterexample. We do not need the validity of \xac\u03c8. But why semantics instead of proof? Do you say that semantics is in patrimony of satisfaction whereas proof theory is dedicated to validity?</p>\n', 'ViewCount': '172', 'Title': u'Why \u22a2 for affirmative predicates and \u22a8 for \xacnegations?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-02T16:33:58.987', 'LastEditDate': '2014-04-02T16:33:58.987', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2879', 'Tags': '<terminology><logic><first-order-logic>', 'CreationDate': '2014-02-13T11:02:46.557', 'Id': '21596'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have a question that asks me to find the minterm expression of two functions added together. The two functions in this case are</p>\n\n<p>F = <code>m(0,4,5,6)</code></p>\n\n<p>G = <code>m(0,3,6,7)</code></p>\n\n<p>At the moment my reasoning is that the minterm expression of F + G would be the combined minterms of each function, taking out any repetition. So the result would be:</p>\n\n<p>H = <code>m(0,3,4,5,6,7)</code></p>\n\n<p>but I feel the problem <em>cant</em> be that simple, this obviously isn't the correct solution. Would finding the solution require me to break up the minterm expressions of each function back into their variable, <strong>then</strong> add them together and simplify? Thank you for any input</p>\n", 'ViewCount': '29', 'ClosedDate': '2014-02-22T09:40:45.653', 'Title': 'Finding the minterm expression of F + G', 'LastActivityDate': '2014-02-21T23:47:27.693', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4851', 'Tags': '<logic>', 'CreationDate': '2014-02-21T19:27:53.343', 'Id': '21902'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am currently studying model theory and I am trying to decide if a clause is a Horn Clause. I know that a Horn Clause is a clause with at most one positive literal, but there are some clauses that it is not easy to decide whether they are Horn or not.</p>\n\n<p>E.g.,</p>\n\n<pre><code>(P-&gt;Q)-&gt;W\n</code></pre>\n\n<p>Is there any way to decide whether this clause is Horn or not, or do I have to make further calculations in order to bring it to a Disjunction form?</p>\n', 'ViewCount': '29', 'Title': 'Recognizing Horn clauses', 'LastEditorUserId': '755', 'LastActivityDate': '2014-02-26T06:30:08.947', 'LastEditDate': '2014-02-26T06:30:08.947', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '21951', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13168', 'Tags': '<logic><artificial-intelligence><boolean-algebra>', 'CreationDate': '2014-02-23T14:25:18.280', 'Id': '21944'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I assume the size of an instance of the SAT problem is measured by its number of (Boolean) variables.  What is total number of instances of SAT problems of size N?</p>\n\n<p>I guess that amounts to counting the number of "distinct" formulas that can be formed by N boolean variables, using a normal form such as CNF or DNF.  Is this number finite?  If not, countable?</p>\n', 'ViewCount': '75', 'Title': 'Number of instances of SAT (boolean satisfiability) problems of size N?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-19T08:24:55.797', 'LastEditDate': '2014-03-19T08:24:55.797', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '5', 'OwnerDisplayName': 'Yan King Yin', 'PostTypeId': '1', 'Tags': '<logic><satisfiability>', 'CreationDate': '2014-02-26T06:58:11.250', 'FavoriteCount': '1', 'Id': '22054'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Can anybody give me  an idea how to write this assertion in in first order logic?</p>\n\n<blockquote>\n  <p>X has not passed one or more of the prerequisites for A. </p>\n</blockquote>\n\n<p>Here, X is the name of a person and A is a constant representing a course name.</p>\n', 'ViewCount': '37', 'Title': 'assertion in first order logic', 'LastEditorUserId': '988', 'LastActivityDate': '2014-02-28T17:51:08.680', 'LastEditDate': '2014-02-28T17:51:08.680', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '22066', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11716', 'Tags': '<logic>', 'CreationDate': '2014-02-26T19:34:49.550', 'Id': '22060'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><img src="http://i.stack.imgur.com/28C5o.png" alt="http://i.imgur.com/ITPF7qU.png"></p>\n\n<p>I drew the map on the right, but what I drew doesn\'t work for what the question is asking me. I think I did something very wrong, and I don\'t really understand what this question is asking me. Am i suppose to re arrange the binary inputs somehow?</p>\n', 'ViewCount': '73', 'Title': 'Karnaugh map - assign variables to the inputs?', 'LastActivityDate': '2014-03-01T07:11:19.257', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22087', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '14864', 'Tags': '<logic>', 'CreationDate': '2014-02-27T03:53:26.840', 'Id': '22078'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $X_1,\\dots,X_n$ be $n$ boolean variables.  I have an unknown predicate $P(X_1,\\dots,X_n)$ on these boolean variables.  Of course, I can view the predicate as a function $f_P : \\{0,1\\}^n \\to \\{0,1\\}$ that maps a vector of $n$ boolean values to the truth value of this predicate on those inputs.</p>\n\n<p>Now I have a truth table of pairs $(x_1,y_1), \\dots, (x_m,y_m)$, and I want to find a predicate $P$ that is consistent with these pairs and that is as "simple" as possible.  In particular, I have two variants of the problem:</p>\n\n<p><strong>Problem 1.</strong> Given $(x_1,y_1), \\dots, (x_m,y_m)$, find a predicate $P$ such that (1) it agrees with the entire truth table (i.e., for all $i$, $f_P(x_i)=y_i$), and (2) out of all such predicates, the complexity of $P$ is minimized.</p>\n\n<p><strong>Problem 2.</strong> Given $(x_1,y_1), \\dots, (x_m,y_m)$ and a threshold $t$, find a predicate $P$ such that (1) $P$ agrees with at least a $t/m$ fraction of the truth table (i.e., there are at least $t$ values of $i$ such that $f_P(x_i)=y_i$), and (2) out of all such predicates, the complexity of $P$ is minimized.</p>\n\n<p>Are there any algorithms for solving either of these problems, in a way that is more efficient than enumerating all predicates?</p>\n\n<p>Of course, to make the problem well-posed, we must agree on a definition of the complexity of a predicate.  Here I can see any number of realistic complexity metrics.  One metric might be that, when we express $P$ as a formula in boolean logic, the length of that formula.  Another might be the number of operators in that formula, or the nesting depth of the formula.  I am interested in any and all algorithms for any plausible notion of complexity.</p>\n\n<p>This can be viewed as a kind of learning problem, where Occam\'s razor suggests that low-complexity predicates are a priori more likely than high-complexity predicates.</p>\n', 'ViewCount': '30', 'Title': 'Boolean formula that agrees with most truth assignments', 'LastActivityDate': '2014-02-28T03:52:00.653', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<optimization><logic><formal-methods><learning-theory><boolean-algebra>', 'CreationDate': '2014-02-28T03:52:00.653', 'FavoriteCount': '1', 'Id': '22122'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>In his famous <a href="https://www.princeton.edu/~hhalvors/restricted/kripke_intuitionism.pdf" rel="nofollow">Semantical Analysis of Intuitionistic Logic</a>,\nS. Kripke speaks of the "well-known mappings of intuitionistic logic\ninto the modal system S4". I\'m not sure which mappings Kripke means.\nOne guess would be K. G\xf6del\'s "Eine Interpretation des\nIntuitionistischen Aussagenkalk\xfcls" (translated into English as "An\nInterpretation of the Intuitionistic Propositional Calculus". I don\'t have\naccess to either.)</p>\n\n<p>Could somebody please point me towards a text that details these\ntranslations?</p>\n', 'ViewCount': '39', 'Title': 'Mapping intuitionistic logic to the modal logic S4', 'LastActivityDate': '2014-03-04T12:43:42.067', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '22267', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2887', 'Tags': '<reference-request><logic><modal>', 'CreationDate': '2014-03-03T12:58:35.777', 'Id': '22218'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Has anyone ever actually written a system (software or detailed explanation on paper with simple examples) that generates computer programs?  I input $Prime(x) \\wedge x&lt;10$ and it creates a program that lists the prime numbers less than 10.  $Prime(x)$ is simply defined as \n$$1&lt;x \\wedge \\not\\exists A\\; s.t. 1&lt;A \\wedge A&lt;x \\wedge x=A\\times B,\\mbox{ with }\nA,B\\in \\mathbb{N}$$\nProfessors say they can but nobody gives actual complete examples.</p>\n', 'ViewCount': '191', 'Title': 'Has Anyone Actually Created a System that Writes Computer Programs from specification?', 'LastEditorUserId': '988', 'LastActivityDate': '2014-03-04T20:59:31.517', 'LastEditDate': '2014-03-04T20:51:13.270', 'AnswerCount': '4', 'CommentCount': '8', 'Score': '11', 'OwnerDisplayName': 'Charlie', 'PostTypeId': '1', 'Tags': '<logic><type-theory><coq><proof-assistants>', 'CreationDate': '2014-03-02T17:08:50.310', 'Id': '22241'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm reading up on propositional logic, and I'm completely stuck on this example - spent the past few hours trying to figure it out! Any pointers would be appreciated.</p>\n\n<p>There's 2 trees, each with signs on. </p>\n\n<p>Sign 1/Tree 1: There are leaves on this tree, and no leaves on the other</p>\n\n<p>Sign 2/Tree 2: There are leaves on one of these trees, but none on the other.</p>\n\n<p>Exactly one of the signs is true, and the other is false. Which tree has leaves on (without looking)?</p>\n\n<p>I'm starting to doubt that it's possible to tell, but I'm sure there's some logic that says otherwise!</p>\n", 'ViewCount': '12', 'Title': 'Modelling 2 object situation with Propositional Logic', 'LastActivityDate': '2014-03-04T20:38:43.060', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22282', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15281', 'Tags': '<logic>', 'CreationDate': '2014-03-04T19:40:01.903', 'Id': '22281'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '267', 'Title': 'How does binary addition work?', 'LastEditDate': '2014-03-09T04:55:53.763', 'AnswerCount': '1', 'Score': '6', 'OwnerDisplayName': 'Link TheProgrammer', 'PostTypeId': '1', 'OwnerUserId': '15435', 'FavoriteCount': '3', 'Body': '<p>I find <strong>binary</strong> confusing. I have watched minecraft redstone videos on binary adders, real binary adders, diagrams, etc and yet I have not learned much at all. <em>How does electrons flowing through wires made of gold "add/subtract" to make numbers through some logic gates?!</em></p>\n', 'Tags': '<logic><binary-arithmetic>', 'LastEditorUserId': '15202', 'LastActivityDate': '2014-03-09T23:34:17.203', 'CommentCount': '6', 'AcceptedAnswerId': '22415', 'CreationDate': '2014-03-09T00:06:51.107', 'Id': '22413'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Can $R$ be inferred from $P$, $Q$, and $(P \\to Q) \\to R$ using only modus ponens?<br>\nMy understanding is that it can, as shown below, but I was told this was incorrect.</p>\n\n<p>Proof of ${P, Q, (P \\to Q) \\to R} \\vdash R$ using modus ponens:</p>\n\n<pre><code>P, Q, (P-&gt;Q)-&gt;R  : Given  \nQ, (Q)-&gt;R        : By Modus Ponens  \nR                : By Modus Ponens  \n</code></pre>\n', 'ViewCount': '244', 'Title': u'P, Q, ((P\u2192Q)\u2192R) \u22a2 R using only modus ponens', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-03-12T01:11:19.773', 'LastEditDate': '2014-03-11T23:55:57.760', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '22521', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '15569', 'Tags': '<logic><propositional-logic>', 'CreationDate': '2014-03-11T22:07:20.157', 'Id': '22514'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>At the needs of my HW at uni I need to transform some Horn clauses to Prolog but I cannot figure out how to do it. I found out some guides but they describe how to do it with only one fact. So can you give me a brief example on how to do it?</p>\n\n<p>Eg John is beautiful and rich </p>\n\n<p>we can transform it at: <code>not (Beautiful(John)) ^ not(Rich(John))</code> which is a Horn clause right? So how this can be translated it Prolog?</p>\n\n<p>another example Everyone loves somebody.\nHorn clause: $\\forall X \\exists Y Loves(X,Y)$ how can this be implemented in Prolog?</p>\n\n<p>Thx in advance</p>\n', 'ViewCount': '56', 'ClosedDate': '2014-04-01T22:01:14.757', 'Title': 'Horn clause to Prolog', 'LastActivityDate': '2014-03-17T20:57:50.643', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22718', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '13168', 'Tags': '<first-order-logic><prolog>', 'CreationDate': '2014-03-16T15:54:54.303', 'Id': '22682'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In unification, given a set of equations, a standard problem is to compute a most general unifier (mgu). I am interested in a somewhat reversed problem. Imagine having a set of equations that do not have an mgu, like this one:</p>\n\n<pre><code>x = a\nx = b\n</code></pre>\n\n<p><code>x</code> here is a variable, whereas <code>a</code> and <code>b</code> are terms. I am interested are there any algorithms that could find a possible replacement for <code>a</code> and <code>b</code> such that the resulting equations have mgu? In the above example, that would be <code>a -&gt; y, b -&gt; y</code>, <code>y</code> being a variable. Lets call this a <em>fix</em>. I am particularly interested in most specific fixes. I could not find anything so far, but this seems like a natural problem, or not?</p>\n', 'ViewCount': '55', 'Title': 'Unification --- most specific unifier', 'LastActivityDate': '2014-03-27T22:32:18.053', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23148', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8508', 'Tags': '<algorithms><logic><unification><equality>', 'CreationDate': '2014-03-21T19:28:11.560', 'Id': '22910'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Can anyone help me with the following deduction?</p>\n\n<p>$$H \\rightarrow R$$</p>\n\n<p>$$D \\land W \\rightarrow \\neg H$$</p>\n\n<p>Therefore</p>\n\n<p>$$H \\land W \\rightarrow \\neg D \\land R$$</p>\n', 'ViewCount': '25', 'ClosedDate': '2014-03-24T10:38:48.397', 'Title': 'Natural Deductions in Propositional Logic', 'LastEditorUserId': '13107', 'LastActivityDate': '2014-03-25T15:32:09.807', 'LastEditDate': '2014-03-25T15:32:09.807', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16041', 'Tags': '<propositional-logic>', 'CreationDate': '2014-03-23T22:16:26.090', 'Id': '22981'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm a freshman CS student at my university and i'm struggling with understanding my professor through his thick accent. I've asked him to explain the proof for this multiple times and still have trouble comprehending what he's trying to tell me.</p>\n\n<p>The question is: </p>\n\n<p>Prove that:  $P\\rightarrow(Q\\rightarrow R)$ is equivalent to $(P \\wedge Q) \\rightarrow R$</p>\n\n<p>He wants us to prove it using math and goes on to tell me that $P \\rightarrow (Q \\rightarrow R) = \\neg P \\vee (\\neg Q \\vee R)$</p>\n\n<p>From that point on, I was completely lost and unable to follow along.</p>\n", 'ViewCount': '83', 'Title': 'How can I prove $P \\rightarrow (Q \\rightarrow R)$ is equivalent to $(P \\wedge Q) \\rightarrow R$', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-03T05:40:14.150', 'LastEditDate': '2014-03-27T15:13:20.313', 'AnswerCount': '4', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16154', 'Tags': '<logic><proof-techniques><propositional-logic>', 'CreationDate': '2014-03-26T16:24:58.947', 'Id': '23087'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Consider two sets: the set of validities of propositional logic and the set of validities of monadic predicate logic. Call the first set $VP$ and the second set $VQM$. Both of these sets are decidable, so there are Turing machines that recognize both them and their complements. </p>\n\n<p>I'm interested in how the decidability of these two sets translates into grammars for them, along the lines of the Chomsky hierarchy. I have three questions:</p>\n\n<p>(1) Are there context-sensitive grammars that generate $VP$ and $VQM$? The answer would be yes if the Turing machines that recognized these sets were linearly bounded, but I don't think they are. </p>\n\n<p>(2) If these languages <em>aren't</em> context-sensitive, can <em>anything</em> be said about a grammar that generates them? </p>\n\n<p>I would have a better grasp of the second question if I understood something about grammars <em>between</em> the top two levels of the Chomsky hierarchy, context-sensitive and unrestricted. </p>\n\n<p>(3) There is a natural class of automata between linear-bounded Turing machines and unrestricted Turing machines: polynomially bounded TMs, exponentially bounded TMs, etc. Do these classes of TM track anything on the grammar side of the Chomsky hierarchy? If not, is there <em>any</em> structure to the gap between context-sensitive grammars and full-on unrestricted grammars?</p>\n\n<p>(Just to be clear: I'm <em>not</em> talking about a grammar for propositional logic, but a grammar for its validities.) </p>\n\n<p>EDIT: I thought I'd add a comment about why I'm interested in these questions. I know there is an unrestricted grammar that generates the (recursively enumerable but not recursive) set of validities of (full-on, polyadic) predicate logic. But since $VP$ and $VQM$ are not just recursively enumerable but recursive, I was wondering if the grammars that generate them might have more structure, in the Chomsky-hierarchy sense, than the grammar that generates the validities of all of predicate logic. <strong>In other words, I'm wondering if there is a <em>grammatical</em> way of detecting the difference between sets of validities that are recursive (as in the case of propositional and monadic predicate logic) and sets of validities that are merely recursively enumerable.</strong> What can be said about grammars of recursive but not recursively enumerable languages? Most references on the Chomsky hierarchy say nothing about this gap, but I don't know if that means there's nothing to be said.</p>\n", 'ViewCount': '35', 'Title': 'grammatical complexity of propositional and monadic predicate validities? (and grammars for recursive but not context-sensitive languages?)', 'LastEditorUserId': '16445', 'LastActivityDate': '2014-04-04T22:33:44.240', 'LastEditDate': '2014-04-04T22:33:44.240', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16445', 'Tags': '<complexity-theory><formal-languages><formal-grammars><logic>', 'CreationDate': '2014-04-04T14:53:25.143', 'FavoriteCount': '1', 'Id': '23423'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<blockquote>\n  <p>Given Boolean variable Xij that represents whether dog i is kept in\n  kennel j.</p>\n  \n  <p>Encode in CNF clauses:</p>\n  \n  <p>Dogs that cannot be kept together must be kept in separate kennels</p>\n</blockquote>\n\n<p>Here is what I came up with, given m dogs and n kennels (I am new with notation):</p>\n\n<pre><code>(i through m) AND (r through m) AND (j through n)  (!Xij AND !Xrj)\n</code></pre>\n\n<p>What I'm trying to say <strong>at most one</strong> of those dogs that can't be together is in kennel j</p>\n\n<p>also, </p>\n\n<blockquote>\n  <p>Dogs that need be kept together must be kept in the same kennel</p>\n</blockquote>\n\n<pre><code>(i through m) AND (r through m) AND (j through n)  (Xij AND Xrj)\n</code></pre>\n\n<p>What I'm trying to say is that those dogs i and r have to be in same kennel j</p>\n\n<p>Do these satisfy for CNF clauses?</p>\n\n<p>Any help is really appreciated.</p>\n", 'ViewCount': '22', 'Title': 'Are these CNF clauses for at most one and the same correct?', 'LastActivityDate': '2014-04-06T19:59:02.637', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15116', 'Tags': '<logic><artificial-intelligence><first-order-logic><boolean-algebra>', 'CreationDate': '2014-04-06T19:59:02.637', 'FavoriteCount': '1', 'Id': '23483'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am trying to obtain the proof of the proposition:</p>\n\n<p>$(\\forall x \\in \\mathbb{N}, P(x)) \\vee (\\neg \\forall x, P(x))$</p>\n\n<p>given that the property $P$ is decidable for every $x \\in \\mathbb{N}$, i.e.</p>\n\n<p>$\\forall x \\in \\mathbb{N}, P(x) \\vee \\neg P(x)$</p>\n\n<p>This is easy to prove (even without using the decidability of $P$) if I include the law of excluded middle, i.e.,</p>\n\n<p>$\\forall P, P \\vee \\neg P$.</p>\n\n<p>However, I am trying to obtain a constructive proof for the same. Is the proposition true without including the law of excluded middle? If so, how do I prove it? This seemingly simple property is needed to prove something about a complex system, and I am trying to not use the law of excluded middle unless it's absolutely necessary.</p>\n\n<p>The best I could come up with is the following:</p>\n\n<p>$\\forall y, (\\forall x \\le y, P(x)) \\vee \\neg (\\forall x \\le y, P(x))$</p>\n\n<p>I do not know how to proceed beyond this (or if this is even useful).</p>\n\n<p>Any help would be appreciated.</p>\n", 'ViewCount': '54', 'Title': 'Constructively deciding whether a decidable predicate holds universally', 'LastEditorUserId': '1329', 'LastActivityDate': '2014-04-08T16:15:49.483', 'LastEditDate': '2014-04-07T20:38:00.083', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'user16488', 'PostTypeId': '1', 'OwnerUserId': '16488', 'Tags': '<logic><proof-techniques><first-order-logic>', 'CreationDate': '2014-04-06T04:30:20.567', 'Id': '23509'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Say I have part of a query in the form: \u2203x<sub>a</sub>(...)\u2227\u2203x<sub>b</sub>(...)\u2227\u2203x<sub>c</sub>(...), where a, b, and c are attributes and the ellipses can be anything (I\'m looking for a general rule). Is this equivalent to saying \u2203x<sub>a</sub>,x<sub>b</sub>,x<sub>c</sub>(...\u2227...\u2227...) - i.e. compacting all the existential quantifiers into one and \'anding\' their domains together? </p>\n\n<p>For example, if I have the query:</p>\n\n<p><img src="http://i.stack.imgur.com/Y5lvo.png" alt="enter image description here"></p>\n\n<p>would it be correct (albeit unwieldy) to write it as:</p>\n\n<p>{ x<sub>pid</sub> | \u2203x<sub>pname</sub>,x<sub>color</sub>,x<sub>sid</sub>,x<sub>sname</sub>,x<sub>address</sub>,x<sub>cost</sub>,y<sub>sid</sub>,y<sub>sname</sub>,y<sub>address</sub>,y<sub>cost</sub>( PARTS(x<sub>pid</sub>,x<sub>pname</sub>,x<sub>color</sub>) \u2227 SUPPLIERS(x<sub>sid</sub>,x<sub>sname</sub>,x<sub>address</sub>... (and then the rest of the query)</p>\n', 'ViewCount': '46', 'Title': 'Can we move quantifiers to the left in predicate logic?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T12:48:40.067', 'LastEditDate': '2014-04-09T11:50:14.450', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '23592', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16564', 'Tags': '<logic><first-order-logic><normal-forms>', 'CreationDate': '2014-04-09T08:26:01.937', 'Id': '23588'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '52', 'Title': 'Application of Combinatorics, Logic and computability theory in physical science: Tiling of Wang Tile with proportionality', 'LastEditDate': '2014-04-11T12:23:29.707', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14553', 'FavoriteCount': '1', 'Body': '<p>The original problem of Domino Tiling and Wang Tile has great theoretical interest on computability theory... However, the great emerging problem on application of Wang Tile in material science and physics requires the tiling to satisfy one more condition:</p>\n\n<p>The tiling should satisfy some proportionality, say, Tile 1 should appear with frequency 1/16, Tile 2 with frequency 9/16, Tile 3 with 6/16, Tile 4 with frequency 0...</p>\n\n<p>The most important decision problem is the following:\nCould a given set of Tile tile a grid of size NxN satisfying the frequency constraint within a error of +-epsilon.</p>\n\n<p>For example: could the set {Tile 1, Tile 2, Tile 3, Tile 4} tile the NxN grid with frequency 1/16+-0.01, 9/16+-0.01, 6/16+-0.01, 0+-0.01 respectively....</p>\n\n<p>From one of my previous post:</p>\n\n<p><a href="http://mathoverflow.net/questions/161731/practical-algorithms-for-np-complete-problems">Algorithms for NP complete problem</a></p>\n\n<p>I realize the decision problem of tiling without such constraint could be modeled by SAT... With this constraint the problem becomes ridiculously difficult and I eagerly seek for solutions towards this finite decidable problem.... (we could forget epsilon for a moment if the problem with epsilon is too hard)...</p>\n\n<p>So here is the question: how do we model this problem in MIP or SAT or any other optimization algorithm?</p>\n\n<p>For more detail why this problem is practical in material science and physics, see my previous post:</p>\n\n<p><a href="http://mathoverflow.net/questions/147374/coloring-in-lattice">coloring in lattice</a></p>\n\n<p><a href="http://mathoverflow.net/questions/149565/reference-for-wang-tile">reference for wang tile</a></p>\n\n<p><a href="http://mathoverflow.net/questions/157239/computational-approach-deciding-whether-a-set-of-wang-tile-could-tile-the-space">Computational approach deciding whether a set of Wang Tile could tile the space up to some size</a></p>\n\n<p>P.S. this is a bounty question from mathoverflow without yet a applicable solution...</p>\n\n<p><a href="http://mathoverflow.net/questions/162248/application-of-combinatorics-logic-and-computability-theory-in-physical-science">Application of Combinatorics, Logic and computability theory in physical science: Tiling of Wang Tile with proportionality</a></p>\n', 'ClosedDate': '2014-04-11T06:41:13.197', 'Tags': '<complexity-theory><optimization><logic><satisfiability>', 'LastEditorUserId': '14553', 'LastActivityDate': '2014-04-11T12:23:29.707', 'CommentCount': '6', 'AcceptedAnswerId': '23664', 'CreationDate': '2014-04-10T23:23:56.653', 'Id': '23662'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Hello everyone I am studying for an exam on logic and computability, I am trying to tackle a specific problem so any help would be greatly appreciated:</p>\n\n<blockquote>\n  <blockquote>\n    <p>Let $G = (V,E)$ be an undirected graph with vertex set $V$ and edge set $E$. A 3-coloring of $G$ is a map $\\chi:V\\to \\{R,G,Y\\}$ such that if $\\{x,y\\}\\in E$ then $\\chi(x)\\neq \\chi(y)$. (Let $R,G,Y$ stand for red, blue, and yellow respectively).</p>\n    \n    <p>Suppose $n &gt; 1$ and let $V_n = \\{0,1,\\cdots,n-1\\}$ and let $G_n = (V_n,E_n)$ be an undirected graph with vertex set $V_n$. For each $i$, $0 \\leq i &lt; n$ let $R_i,B_i,Y_i$ be propositional variables. We can think of $i$ being a node so $R_i$ says node $i$ has a color of red.  </p>\n    \n    <p>Give a propositional formula $A_n$ using the variables $\\{R_i,B_i,Y_i | 0 \\leq i &lt; n\\}$ such that $A_n$ is satisfiable iff $G_n$ has a 3-coloring. Do this in such a way that $A_n$ can be computed efficiently from $G_n$ (e.g. don't define $A_n$ to be $R_1$ if $G_n$ has a three coloring and ($R_1 \\wedge \\neg R_1$) otherwise).</p>\n  </blockquote>\n</blockquote>\n\n<p>My inclination for a question like this is to set up some sort of CNF formula, that is come up with a set of clauses that set out to take care of different properties. For instance I believe for something like this I need a clause that deals with the case that every node has a color, maybe one that deals with every node cannot have more than one color, and that every node cannot be the same color as an adjacent node? I am not really sure how to illustrate that last one or if there are cases that I am missing. Thank you for any help! </p>\n", 'ViewCount': '38', 'Title': '3-coloring a graph with propositional formulas', 'LastActivityDate': '2014-04-20T20:29:23.370', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10880', 'Tags': '<logic><propositional-logic>', 'CreationDate': '2014-04-19T21:56:32.573', 'FavoriteCount': '1', 'Id': '23945'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Theorem states </p>\n\n<blockquote>\n  <p>Let $\\phi$ be a sentence of predicate logic such that for any natural\n  number $n \\geq 1$, there is a model of $\\phi$ with at least $n$\n  elements. Then $\\phi$ has a model with infinitely many elements.</p>\n</blockquote>\n\n<p>IMO, it basically states that if you can always name a number larger than mine arbitrary natural number then your model is infinite. What needs to be proven here? There are no other options obviously for any school kid.</p>\n', 'ViewCount': '56', 'Title': u'What is the point of L\xf6wenheim\u2013Skolem theorem?', 'LastEditorUserId': '2879', 'LastActivityDate': '2014-04-21T14:55:15.240', 'LastEditDate': '2014-04-21T14:06:20.263', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2879', 'Tags': '<sets><first-order-logic>', 'CreationDate': '2014-04-21T10:07:40.160', 'Id': '23980'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $C = m(P,X,Y) \\leftarrow m(Q,X,Z), m(R,Z,Y)$. </p>\n\n<p>Is it possible to do the following substitution? </p>\n\n<p>$D = C\\theta$ where $\\theta = \\{Q/R,R/Q\\}$ s.t. $D = m(P,X,Y) \\leftarrow m(R,X,Z),m(Q,Z,Y)$</p>\n', 'ViewCount': '51', 'Title': 'FOL substitution - is it possible to substitute two variables with each other? e.g. $\\theta=\\{x/y,y/x\\}$?', 'LastActivityDate': '2014-04-21T18:09:42.753', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24000', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12643', 'Tags': '<logic><first-order-logic><logic-programming>', 'CreationDate': '2014-04-21T17:11:54.750', 'Id': '23996'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '48', 'Title': 'Odd Parity Function', 'LastEditDate': '2014-04-24T00:22:03.467', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16983', 'Body': "<p>I am trying to define a Odd Parity Function that takes three 1 bit inputs and will output a 1 if the 3 bits are odd as a Boolean function.</p>\n\n<pre><code>1 1 0 = 0\n1 0 0 = 1\n0 0 0 = 0\n1 1 1 = 1\n</code></pre>\n\n<p>I understand this has a relationship to XOR as I can define this with 2 parameter as </p>\n\n<pre><code>X xor Y = (XY')+(X'Y)\n</code></pre>\n\n<p>My assumption is the function will look like this</p>\n\n<pre><code>(X xor Y) xor Z = (((XY')+(X'Y))Z')+(((XY')+(X'Y))'Z)\n</code></pre>\n\n<p><strong>Can this function be simplifed?</strong></p>\n", 'ClosedDate': '2014-04-23T16:48:44.533', 'Tags': '<logic><boolean-algebra><xor>', 'LastEditorUserId': '16983', 'LastActivityDate': '2014-04-24T00:22:03.467', 'CommentCount': '5', 'AcceptedAnswerId': '24040', 'CreationDate': '2014-04-22T12:18:42.813', 'Id': '24025'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am having difficulty with the concept of $LK-\\Phi$ proofs, here is a question I have been working on:</p>\n\n<blockquote>\n  <p>Let $\\Phi = \\{Pafa\\}$, where $P$ is a binary predicate symbol and $f$ is a unary function symbol. Give an $LK-\\Phi$ proof of $\\exists y Pby$. You do not need to show exchanges and weakenings.</p>\n</blockquote>\n\n<p>My intution for these questions is very little unless it is blatantly obvious over what to do, but I do know that in the system $LK$ we have a $LK-\\Phi$ proof if we have $A\\to A$ or $\\to A$ where $A\\in\\Phi$. So in this situation I think I set this up as the following:</p>\n\n<p>$$\\to \\exists y Pby$$and then I would have a sequent above it where I would apply the $\\exists R$ rule, which would create the sequent above as: $$\\to Pba$$ but from here I am not sure at all what to do whether I need to rely on some sort of trick or anything? Any help would be greatly greatly appreciated, this is for an exam I am studying.</p>\n', 'ViewCount': '28', 'Title': 'LK-$\\phi$ proof of $\\exists y Pby$', 'LastActivityDate': '2014-04-24T14:02:42.203', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10880', 'Tags': '<logic><proof-techniques>', 'CreationDate': '2014-04-24T13:02:18.923', 'Id': '24080'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Hello I am having difficulty with this question, I am not even sure what strategy one would go about proving something like this:</p>\n\n<blockquote>\n  <p>Suppose $L$ is a language which includes an infinite list $c_1,c_2,\\cdots$ of constant symbols. Let $\\Gamma$ be a set of sentences $\\Gamma = \\{c_i \\neq c_j \\mid i,j\\in N, i &lt; j\\}$. Let A be a sentence such that $\\Gamma \\Rightarrow A$. Prove that $A$ has a finite model.</p>\n</blockquote>\n\n<p>I am not sure whether I would prove this via a contradiction (i.e., assume $A$ has an infinite model, or if I show a finite model that works or some how assume that we can have an infinite model and then use some sort of compactness to show it can be finite. I am a little all over the place with this question, please any help would be great!</p>\n', 'ViewCount': '30', 'Title': 'Finding a finite model', 'LastEditorUserId': '31', 'LastActivityDate': '2014-04-24T20:00:46.950', 'LastEditDate': '2014-04-24T19:58:10.593', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '24086', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10880', 'Tags': '<logic><proof-techniques>', 'CreationDate': '2014-04-24T19:22:29.030', 'Id': '24085'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I just read "Boole\'s Algebra Isn\'t Boolean Algebra" by Theodore Halperin (behind a paywall <a href="http://link.springer.com/chapter/10.1007/978-94-015-9385-4_4#page-1" rel="nofollow">here</a>). I don\'t have a strong background in abstract algebra, so, frankly, the paper is a bit over my head but the gist of it is as follows: the algebra developed by Boole in the 19th century has some strange properties. Boole interprets every term in an expression as representing a set and restricts the domain of valid expressions on the basis of relationships between the underlying sets. In particular, he asserts that the expression $x + y$ is valid iff $x$ and $y$ represent disjoint sets, and $x - y$ is valid iff the intersection of $x$ and $y$ is nonempty. He also defines an operation $w = \\frac x y$ such that $w$ has many solutions. Halperin goes to great lengths to construct a commutative ring that satisfies Boole\'s constraints. </p>\n\n<p>I think that there might be a nice, intuitive, graph-theoretic interpretation of Boole\'s algebra where we can say something like "Given a complex expression in Boole\'s algebra, $\\Phi = \\{\\phi_1, \\phi_2\\, \\dots, \\phi_n\\}$, we can construct a (di)graph $G$ such that $\\Phi$ is valid if and only if $G$ has some property $P$." </p>\n\n<p>For example, to test if $X + Y$ is valid, we could do something like the following:</p>\n\n<p>Let $G$ be a graph. Let $V(G) = X \\cup Y \\cup \\{v_X, v_Y\\}$, i.e. make a vertex for every element of the underlying set, plus a vertex for each term in the expression. Then define </p>\n\n<p>$$E(G) = \\{uv_X \\mid u \\in X \\} \\cup \\{uv_Y \\mid u \\in Y \\}$$</p>\n\n<p>and let $\\partial(G)$ be the set of all valid bonds formed by subsets of $V(G)$. It follows that $X + Y$ is valid if and only if $|\\partial(G)| = 2$. </p>\n\n<p>From there, I\'m not sure how to go about forming graphs for complex expressions like $\\frac {y(x + z)} {z^2 + 1}$ by composing simpler graphs. I imagine that there is literature about representing Boolean algebra on graphs, but I haven\'t been able to find it. </p>\n\n<p>Does anyone have an elegant interpretation? Or a pointer to relevant literature that might get me started?</p>\n\n<p>EDIT: I can\'t find the article for free anywhere, but <a href="http://en.wikipedia.org/wiki/The_Laws_of_Thought" rel="nofollow">wikipedia</a> touches on the issues: </p>\n\n<blockquote>\n  <p>In places, Boole talks of terms being interpreted by sets, but he also\n  recognises terms that cannot always be so interpreted, such as the\n  term 2AB...Such terms he classes uninterpretable\n  terms...uninterpretable terms cannot be the ultimate result of\n  equational manipulations from meaningful starting formulae.</p>\n</blockquote>\n\n<p>Halperin\'s paper shows that his algebra is isomorphic to "a commutative ring with unit having no additive or multiplicative nilpotents." I think, for that reason, that it will require heavier machinery to represent than normal Boolean logic operations.</p>\n', 'ViewCount': '42', 'Title': "Finding a graph-theoretic representation of expressions in Boole's algebra", 'LastEditorUserId': '16612', 'LastActivityDate': '2014-04-25T19:14:45.803', 'LastEditDate': '2014-04-25T19:14:45.803', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16612', 'Tags': '<graph-theory><logic><boolean-algebra>', 'CreationDate': '2014-04-24T20:14:30.220', 'FavoriteCount': '1', 'Id': '24088'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<h3>The setting</h3>\n\n<p>An <strong>argument</strong> from a set of formulas $\\Delta$ is a pair $\\langle \\Phi, \\alpha \\rangle$ such that</p>\n\n<ol>\n<li>$\\Phi \\subseteq \\Delta$</li>\n<li>$\\Phi \\nvdash \\bot$</li>\n<li>$\\Phi \\vdash \\alpha$ (this is what I am wondering about)</li>\n<li>There is no $\\Phi' \\subset \\Phi$ such that $\\Phi' \\vdash \\alpha$.</li>\n</ol>\n\n<p>I am trying to think of how this undercut works.</p>\n\n<p>If $\\langle \\Phi, \\alpha \\rangle$ and $\\langle \\Phi, \\beta \\rangle$ are arguments,then:</p>\n\n<ul>\n<li>$\\langle \\Phi, \\alpha \\rangle$ <strong>rebuts</strong> $\\langle \\Phi, \\beta \\rangle$ iff $\\alpha \\vdash \\neg\\beta$</li>\n<li>$\\langle \\Phi, \\alpha \\rangle$ <strong>undercuts</strong> $\\langle \\Psi, \\beta \\rangle$ iff $\\alpha \\vdash \\neg\\beta \\wedge \\Psi$</li>\n</ul>\n\n<h3>The exercise</h3>\n\n<p>The original statement is \n$$\\langle\\{\\gamma,\\gamma\\rightarrow\\neg\\beta\\},\\neg(\\beta\\wedge(\\beta\\rightarrow\\alpha))\\rangle \\quad \\text{undercuts} \\quad \\langle\\{\\beta,\\beta\\rightarrow\\alpha\\},\\alpha\\rangle$$</p>\n\n<p>I believe these two should both be arguments. </p>\n\n<p>$$\\{\\gamma,\\gamma\\rightarrow\\neg\\beta\\} \\vdash \\neg(\\beta\\wedge(\\beta\\rightarrow\\alpha))$$  </p>\n\n<h3>My attempt</h3>\n\n<p>The left side is</p>\n\n<p>$$\\{\\gamma,\\gamma\\rightarrow\\neg\\beta \\} \\vdash \\neg\\beta$$</p>\n\n<p>The right side is</p>\n\n<p>$$\\neg(\\beta\\wedge(\\beta\\rightarrow\\alpha)) \\vdash \\neg(\\beta\\wedge\\neg\\beta\\vee\\alpha) \\vdash \\neg\\alpha$$</p>\n\n<p>Is my proof right? What is the next step?</p>\n", 'ViewCount': '51', 'ClosedDate': '2014-04-29T23:35:13.690', 'Title': 'Propositional logic of arguments and undercuts', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-26T15:58:39.513', 'LastEditDate': '2014-04-26T15:58:39.513', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11506', 'Tags': '<logic><propositional-logic>', 'CreationDate': '2014-04-25T15:09:44.120', 'Id': '24107'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Without using any Haore logic, given the following Hoare triple: <code>(|x \u2265 1|) C (|y \u2265 1|)</code> is partially correct and using the definition of partial correctness. </p>\n\n<p>How to determine if <code>(|x &gt; 1|) C (|y \u2265 1|)</code> is partially correct or not?</p>\n\n<p>C is a piece of code</p>\n', 'ViewCount': '8', 'ClosedDate': '2014-04-29T08:37:05.757', 'Title': u'How to determine if (|x > 1|) C (|y \u2265 1|) is partially correct ? - Partial correctness', 'LastActivityDate': '2014-04-29T02:04:46.897', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '17160', 'Tags': '<program-correctness><hoare-logic><reasoning>', 'CreationDate': '2014-04-29T02:04:46.897', 'Id': '24206'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>This circuit should be reasonably efficient in size and depth, but with priority on depth. </p>\n\n<p>If depth was not a concern, then I guess I could make a specialized adder for the least significant bit and then modelled the rest of the circuit as a ripple adder with only that initial, possible carry. The carry has to ripple through the first sequence of consecutive bits set to 1. For example:</p>\n\n<p>$inc(0111) = 1000$<br>\n$inc(0001) = 0010$<br>\n$inc(0100) = 0101$ (no ripple)</p>\n\n<p>But this takes linear time, in the worst case (binary string is $1...1$). How do you optimize for depth? Does the optimal circuit have a $log_2(n)$ depth? </p>\n\n<p>Is perhaps the best strategy to use a parallel prefix circuit? If so, I guess one would make a specialized adder for the least significant bit. Then you have the result of the least significant bit, which is 0 if a carry was generated, 1 otherwise. If a carry was generated, then you need to efficiently ripple it through all the adjacent, consecutive 1-bits. If one is to use a prefix sum, then you need an associative binary operator. It also needs to preserve the value of the bits that are not part of the initial, consecutive 1-bits (from right to left). This might mean that you pass in the carry bit that was (possibly) generated after the increment on the least significant bit, while the rest of the operators gets fed predefined bits which preserve the values of the relevant bits of the number (bit vector).  </p>\n\n<p>At this point, I'm stuck. </p>\n", 'ViewCount': '38', 'Title': 'Create a shallow logic circuit that increments a binary number', 'LastEditorUserId': '11089', 'LastActivityDate': '2014-05-01T22:16:07.173', 'LastEditDate': '2014-05-01T22:16:07.173', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11089', 'Tags': '<logic><circuits>', 'CreationDate': '2014-05-01T20:46:57.177', 'Id': '24307'}},