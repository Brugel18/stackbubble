{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I think that in <a href="http://en.wikipedia.org/wiki/Peterson%27s_algorithm" rel="nofollow">Peterson\'s algorithm</a> for <a href="http://en.wikipedia.org/wiki/Mutual_exclusion" rel="nofollow">mutual exclusion</a>, if the process first to enter the critical section were to die or be cancelled, the other process would loop forever, waiting to enter the critical section.</p>\n\n<p>In the picture, if process 1 is stopped, the rest of the processes behind process 1 will execute up to where of process 1 is but then loop.</p>\n\n<p><img src="http://i.stack.imgur.com/Tz6vK.jpg" alt="enter image description here"></p>\n\n<p>What happens if the process that reaches the critical section first dies before leaving it?</p>\n', 'ViewCount': '376', 'Title': "Does Peterson's 2-process mutual exclusion algorithm account for dying processes?", 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-20T16:44:21.693', 'LastEditDate': '2013-01-20T15:41:17.353', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '6', 'OwnerDisplayName': 'ganadara', 'PostTypeId': '1', 'OwnerUserId': '1778', 'Tags': '<programming-languages><concurrency><mutual-exclusion>', 'CreationDate': '2012-03-15T02:17:23.163', 'Id': '2237'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I want to implement mutual exclusion for $n$ processes. Critical section code:</p>\n\n<pre><code>int turn = 0;        /* shared control variable */\n\nPi:                  /* i is 0 or 1 */\nwhile (turn != i)\n   ;                 /* busy wait */\nCSi;\nturn = 1 - i;\n</code></pre>\n\n<p>This solution from <a href="http://phoenix.goucher.edu/~kelliher/cs42/sep27.html" rel="nofollow">this page</a> but it is only made for two processes.</p>\n\n<p>I tried to adapt it for $n$ processes like this:</p>\n\n<pre><code>turn = 0 // shared control variable \n\ni = turn;\n\nwhile (turn != i);\n\n// CS\n\nturn = (turn + 1) % n;\n</code></pre>\n\n<p>Does this work?</p>\n', 'ViewCount': '96', 'Title': 'Mutual exclusion for n processes', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-21T13:01:15.777', 'LastEditDate': '2013-01-20T15:39:39.273', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6488', 'Tags': '<concurrency><mutual-exclusion>', 'CreationDate': '2013-01-20T14:20:33.747', 'Id': '9056'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I was reading about synchronization problems for cooperating processes and i learned that only hardware solutions like <code>test_and_wait()</code> and <code>compare_and_set()</code> are performed atomically at the hardware level and in all other software solutions like <strong>mutex</strong>, <strong>semaphore</strong> the code needs to be executed atomically and hence these have to be executed in the critical section themselves.</p>\n\n<p>Does this mean that these software solutions have limited use when compared to the hardware solutions, though it seems that the former are used extensively?</p>\n', 'ViewCount': '298', 'Title': 'Solutions to synchronization problem need to be executed in critical section', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T18:15:55.573', 'LastEditDate': '2013-11-12T17:51:29.193', 'AnswerCount': '3', 'CommentCount': '3', 'AcceptedAnswerId': '17991', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10120', 'Tags': '<operating-systems><concurrency><synchronization><mutual-exclusion>', 'CreationDate': '2013-11-12T06:03:16.840', 'Id': '17945'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Firstly, I am revising for my Concurrent Programming exam and have come across the following question from a previous exam paper. I have attempted to answer it, and will try and convey this effort; I'm very stuck with this question and not sure how to further progress.</p>\n\n<h3>Question</h3>\n\n<p>This question is from a 2011 Past Paper from my University created by the Examining Body that year.\nExaminers: Professor E K Burke\nDr P Sage\nand the internal examiners</p>\n\n<blockquote>\n  <p>A car park has 100 parking spaces. Because of building work max cars must be accommodated in an overflow area which is accessed via the main car park. Entrance to the main and overflow areas is controlled by two automatic barriers as follows.</p>\n  \n  <ul>\n  <li><p>When the car park is empty both barriers are closed.</p></li>\n  <li><p>Normally, the main barrier is raised as a car approaches and is lowered immediately the car has entered.</p></li>\n  <li>An exception occurs immediately after the main car park is full i.e. when it has 100-max cars in it. As the next car approaches the overflow barrier is raised first, then the main barrier is raised. Once the car has entered the main car park the overflow barrier remains raised and the main barrier is lowered. The normal main barrier action described above then resumes.</li>\n  </ul>\n  \n  <p>Consider the following program which is intended to control the two barriers. </p>\n  \n  <p>All instructions, o1, o2, o3, m1, m2, m3 and m4, are atomic. You may assume that $0 &lt; \\max \\leq 100$.</p>\n\n<pre><code>int #cars=0;\n\nprocess Main {\nwhile (true)\n {\n m1: &lt;#cars++&gt;;\n m2: &lt;openMainBarrier&gt;;\n m3: &lt;closeMainBarrier&gt;;\n m4: &lt;if (#cars==100)\n     break&gt;;\n }\n}\n\nprocess Overflow {\nint max; \no1: &lt;input(max)&gt;;\n while (true) \n {\n   o2: &lt;if (#cars==100-max+1)  break&gt;; \n   o3: &lt;openOverflowBarrier&gt;; \n }\n}\n</code></pre>\n  \n  <ol>\n  <li><p>The program terminates only if both processes terminate. Explain why the program may not terminate.</p></li>\n  <li><p>Explain why, even if the program does terminate, it may not operate as specified.</p></li>\n  <li><p>By introducing the use of semaphores, ensure that program does terminate and operates as specified. You must only use atomic instructions. You may introduce new additional non-semaphore variables but you must not alter the scope of #cars and max.</p></li>\n  </ol>\n</blockquote>\n\n<h3>My attempt</h3>\n\n<p>Most semaphore exercises I have looked at so far often have the main process in a <code>while(true){...}</code> infinite loop, thus, termination has never been an issue before - it is normally not addressed in these short exercises.</p>\n\n<p>It is because of this I am having difficulty trying to produce an answer for 2) and 3). The question does not even appear to address cars leaving the car park, which leads me to understand this isn't an infinite ongoing cycle type process, but will terminate when both car parks reach maximum capacity?</p>\n\n<p>In this instance, the only thing I can think of is that the process will not terminate in the event the main carpark or overflow carpark does not reach capacity, however I feel this answer is not 'clever' enough and I'm worried I may be missing something. </p>\n\n<p>I have attempted 3) as follows but I am worried this is incorrect as I'm not sure if I am supposed to handle cars leaving the car park, or if I am supposed to ignore that in order to force it to terminate.</p>\n\n<pre><code>OverflowCarPark{\nint max;\n&lt;input (max)&gt;\nwhile(true){\n down(maxFull)\n if(#cars &lt;= 100 + max){\n    down(openMainBarrier)\n    up(openOverflowBarrier)\n }\n  else { break; }\n}\n\nMainCarPark{\n&lt;cars++;&gt;\nwhile(true){\n if(#cars &lt;= 100){\n    up(openMainBarrier)\n  } else if (#cars &gt; 100 + max) { break; \n  } else { \n    up(maxFull);\n    down(openOverflowBarrier);\n }\n}\n</code></pre>\n\n<p>What is the recommended approach to dealing with termination here? </p>\n", 'ViewCount': '38', 'Title': 'Finding issues in concurrent implementation of carpark overflow control', 'LastEditorUserId': '12785', 'LastActivityDate': '2014-01-26T09:17:05.963', 'LastEditDate': '2014-01-26T02:40:05.850', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12785', 'Tags': '<algorithms><concurrency><synchronization><mutual-exclusion>', 'CreationDate': '2014-01-26T00:47:28.777', 'Id': '19977'}},