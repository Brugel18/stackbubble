3830:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '120', 'Title': 'More efficient algorithm for determining if one list is a sublist of another list', 'LastEditDate': '2013-11-26T01:14:57.783', 'AnswerCount': '2', 'Score': '4', 'OwnerDisplayName': 'Panarit', 'PostTypeId': '1', 'OwnerUserId': '11640', 'FavoriteCount': '1', 'Body': "<p>I'm trying to build an algorithm which takes two lists of natural numbers and finds if every element of the first list is displayed at least once in the second list.</p>\n\n<p>What if the list is sorted? </p>\n\n<p>An algorithm that can do this is by comparing every element of the first list with every element from the second list. I think there is an algorithm with a better complexity. Can anyone give me any idea?</p>\n", 'Tags': '<algorithms><data-structures><sorting><lists><comparison>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-26T21:23:38.760', 'CommentCount': '1', 'AcceptedAnswerId': '18350', 'CreationDate': '2013-11-24T14:49:37.500', 'Id': '18346'}