2540:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I know that since ~2004, Moore's law stopped working for CPU clock speed.\nI'm looking for a graph showing this, but am unable to find it: most charts out there show the transistor count or the capacity per year.</p>\n\n<p>Where can I find some data showing the CPU frequency of computers (anything is fine, personal computers, servers, laptops, ...) from the last few decades to today?<br>\nRaw data that I can plot myself would be fine as well (hum, probably even better).</p>\n", 'ViewCount': '1715', 'Title': 'CPU frequency per year', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:21:22.313', 'LastEditDate': '2012-04-22T16:21:22.313', 'AnswerCount': '4', 'CommentCount': '5', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '489', 'Tags': '<computer-architecture><empirical-research><data-sets>', 'CreationDate': '2012-03-21T10:27:51.997', 'FavoriteCount': '2', 'Id': '594'},2541:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am implementing a set of path finding algorithms such as Dijkstra's, Depth First, etc.</p>\n\n<p>At first I used a couple of self made graphs, but now I'd like to take the challenge a bit further and thus I'm looking for either</p>\n\n<ol>\n<li>graphs used in benchmarks;</li>\n<li>graphs of real world cities (or a way to download that kind of info off google maps, or any other kind of source, if possible).</li>\n</ol>\n\n<p>I'd like those sources to either have or allow me to easily create frontiers such that I can try my algorithms for different sized sets of graphs, if possible.</p>\n\n<p>I'm looking for simple solutions, as I'd prefer not to be diverted from main goal (compare a set of different algorithms), so I'd need a quick way to convert that graph data into my own format (basically, a set of connected <code>(x, y)</code> points).</p>\n\n<p>To be more concrete, what I'm looking for are 2D cyclic graphs. If those graphs reflect real world city streets (taking into consideration one-way streets, two-way streets, etc, better yet!).</p>\n", 'ViewCount': '327', 'Title': 'Where to get graphs to test my search algorithms against?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-08T23:01:11.637', 'LastEditDate': '2012-04-09T11:16:45.717', 'AnswerCount': '2', 'CommentCount': '10', 'Score': '19', 'PostTypeId': '1', 'OwnerUserId': '8073', 'Tags': '<algorithms><graphs><data-sets><benchmarking>', 'CreationDate': '2012-04-09T03:37:40.150', 'FavoriteCount': '5', 'Id': '1151'},2542:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '40', 'Title': 'Where can I find the data of the computer experiments in the book "Neural Networks and Learning Machines"?', 'LastEditDate': '2012-07-20T05:14:49.323', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '848', 'FavoriteCount': '1', 'Body': '<p>The book <a href="http://rads.stackoverflow.com/amzn/click/0131471392" rel="nofollow">"Neural Networks and Learning Machines"</a> by Simon Haykin has many computer experiments to which many exercises are related. But there seems to be no data for these experiments available online. Where can I find them?</p>\n', 'Tags': '<reference-request><data-sets>', 'LastEditorUserId': '88', 'LastActivityDate': '2012-07-20T05:14:49.323', 'CommentCount': '2', 'AcceptedAnswerId': '2831', 'CreationDate': '2012-07-17T14:00:26.707', 'Id': '2785'},2543:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m currently looking at network clustering algorithms (we\'re currently looking at both directed and undirected, unweighted networks).  The algorithms we\'ve tried produce visually nice clusters.  However, we would like to evaluate them against some "gold standard" -- a collection of networks in which the clusters have already been identified (and are more-or-less regarded as <em>the</em> clusters by the complex network\'s research community).</p>\n\n<blockquote>\n  <p><strong>Question</strong>: What are the gold standards for network clustering algorithms?  Where can I access them?</p>\n</blockquote>\n', 'ViewCount': '91', 'Title': 'Seeking "gold standard" to evaluate accuracy of network clustering algorithm', 'LastActivityDate': '2012-08-05T13:36:02.027', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2254', 'Tags': '<algorithms><data-sets><network-topology>', 'CreationDate': '2012-08-03T03:24:45.980', 'Id': '3013'},2544:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A <a href="http://en.wikipedia.org/wiki/Partition_of_a_set" rel="nofollow">partition of a set</a> S is a separation of the set into an arbitrary number of non-empty, pairwise disjoint subsets whose union is exactly S. What manner of a data structure should be used to represent a partition of a set if the following methods need to be optimized:</p>\n\n<ol>\n<li>moving an element from one part to another, possibly an entirely new one, and</li>\n<li>iterating over the parts of the partition.</li>\n</ol>\n\n<p>A naive way of prioritizing 1 would be a hash/tree/whatever mapping from set elements to "part labels", but iterating over the parts would require O(N) for first constructing the actual parts from the labels. 2 is naively prioritized as a hash/tree/whatever set of hash/tree/whatever sets, but then moving elements around, especially to new subsets, incurs that memory management overhead.</p>\n\n<p>Is there a way to get the best of both worlds? The implementation I need is Python but I imagine this is a cross-language question.</p>\n', 'ViewCount': '219', 'Title': 'Data structure for partition of a set', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-03T21:31:03.673', 'LastEditDate': '2012-09-03T21:31:03.673', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'OwnerDisplayName': 'user1448338', 'PostTypeId': '1', 'Tags': '<data-structures><partitions><sets>', 'CreationDate': '2012-07-12T16:32:56.523', 'Id': '3414'},2545:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need datasets that has at 4 data elements (user, tag, item, date) to test my recommender system. The user and item can be provided as Integer IDs. The items can be books, bookmarks, news, products, movies, music, and anything. \nIs there any dataset meet my demands available? Thanks.</p>\n', 'ViewCount': '22', 'Title': 'Are there any tagging dataset for evaluating a recommender system? e.g. userId--tag--item--date', 'LastActivityDate': '2012-09-15T07:00:54.147', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2837', 'Tags': '<data-sets><recommendation-systems>', 'CreationDate': '2012-09-15T07:00:54.147', 'Id': '3558'},2546:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p><a href="http://en.wikipedia.org/wiki/Partition_refinement">Partition refinement</a> is a technique in which you start with a finite set of objects and progressively split the set. Some problems, like DFA minimization, can be solved using partition refinement quite efficiently. I don\'t know of any other problems that are usually solved using partition refinement other than the ones listed on the Wikipedia page. Out of all these problems, the Wikipedia page mentions two for which algorithms based on partition refinement run in linear time. There\'s the lexicographically ordered topological sort [1] and an algorithm for <a href="http://en.wikipedia.org/wiki/Lexicographic_breadth-first_search">lexicographic breadth-first search</a> [2].</p>\n\n<blockquote>\n  <p>Are there any other examples or references to problems that can be solved using partition refinement very efficiently, meaning something better than loglinear in terms of time?</p>\n</blockquote>\n\n<hr>\n\n<p>[1] <a href="http://epubs.siam.org/doi/abs/10.1137/0205005">Sethi, Ravi, "Scheduling graphs on two processors", SIAM Journal on Computing 5 (1): 73\u201382, 1976.</a></p>\n\n<p>[2] <a href="http://epubs.siam.org/doi/abs/10.1137/0205021">Rose, D. J., Tarjan, R. E., Lueker, G. S., "Algorithmic aspects of vertex elimination on graphs", SIAM Journal on Computing 5 (2): 266\u2013283, 1976.</a></p>\n', 'ViewCount': '157', 'Title': 'Problems for which algorithms based on partition refinement run faster than in loglinear time', 'LastEditorUserId': '472', 'LastActivityDate': '2012-10-05T01:32:41.660', 'LastEditDate': '2012-10-04T22:21:19.390', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<algorithms><reference-request><data-structures><partitions><sets>', 'CreationDate': '2012-10-02T17:25:18.093', 'FavoriteCount': '1', 'Id': '4843'},2547:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>Inputs.</strong> I am given a finite set $S$ of symbols.  I know there should exist some total order $&lt;$ on $S$, but I\'m not given this ordering and it could be anything.</p>\n\n<p>I am also given a collection of assertions.  Each assertion takes the form $s_1&lt;s_2&lt;\\cdots&lt;s_m$, where $s_1,\\dots,s_m$ form a subset of the symbols of $S$.  The assertion probably won\'t mention all of the symbols of $S$, just a subset.  Each assertion will probably cover a different subset.</p>\n\n<p><strong>Warmup problem.</strong> The starter problem is: Given $n$ assertions, identify whether they are all internally self-consistent, i.e., whether there exists a total order on $S$ that is consistent with all of the assertions, and if so, output an example of such a total order.</p>\n\n<p><strong>The real problem.</strong> In practice, a few assertions might be faulty.  Almost all of them should be correct, though.  So, the real problem is: if the assertions are not all internally self-consistent, find a minimal subset of assertions to label as "probably-erroneous", such that if you remove the probably-erroneous assertions, the remainder are all self-consistent.</p>\n\n<p><strong>What I know.</strong> I know how to solve the warmup problem (just compute the transitive closure of the union of the partial orders given by each assertion, and check that the result is antisymmetric; or, in other words, create a graph with $S$ as vertex set and an edge $s\\to t$ if $s&lt;t$ appears in any assertion, then check for cycles).  However, I don\'t know how to solve the real problem.  Any ideas?</p>\n\n<p><strong>Real-world parameters.</strong> In the application domain where I\'ve run into this, $S$ might have up to a few hundred symbols, and I might have up to a few thousand assertions, with each assertion typically mentioning dozens of symbols.</p>\n', 'ViewCount': '112', 'Title': 'Given many partial orders, check them for consistency and report any that are not consistent', 'LastEditorUserId': '39', 'LastActivityDate': '2012-10-19T22:21:54.297', 'LastEditDate': '2012-10-19T18:36:26.050', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><graphs><approximation><finite-sets><partial-order>', 'CreationDate': '2012-10-19T17:25:00.620', 'FavoriteCount': '1', 'Id': '6173'},2548:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What is the procedure for computing the rank of a <a href="http://mathworld.wolfram.com/Multiset.html" rel="nofollow">multiset</a> after inserting an element?</p>\n\n<p>For instance, lets say we have a set $S = (0,1)$ containing $n = 2$ distinct elements.</p>\n\n<p>The multiset $M = (1,1)$ has rank $5$ because there are $4$ multisets less than it based on lexicographic ordering: $(0), (1), (0,0), (0,1)$.</p>\n\n<p>If we insert $0$, we get $(0,1,1)$ which has rank $8$. If $1$ were inserted instead we\'d have $(1,1,1)$ with rank $9$.</p>\n\n<p>Is there a function $f(r,x,n)$ which takes a rank $r$, an element $x$, and $n$, and returns the new rank after inserting $x$?</p>\n', 'ViewCount': '93', 'Title': 'Computing the rank of a multiset after inserting another element', 'LastEditorUserId': '4223', 'LastActivityDate': '2012-10-27T15:58:34.620', 'LastEditDate': '2012-10-27T07:27:16.467', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '6339', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4223', 'Tags': '<algorithms><combinatorics><sets><binary-arithmetic>', 'CreationDate': '2012-10-27T01:53:27.787', 'Id': '6325'},2549:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I recently took a practice exam for the Computer Science GRE and this was one of the questions: </p>\n\n<blockquote>\n  <p>Assume that set $A$ has 5 elements and set $B$ has 4 elements, how many functions exist from set $A$ to set $B$?</p>\n</blockquote>\n\n<p>I had no idea what this means, I don't recall ever studying functions between sets, could someone shed some light on this question for me ?</p>\n", 'ViewCount': '114', 'Title': 'Functions between sets?', 'LastEditorUserId': '19', 'LastActivityDate': '2012-11-11T02:27:20.133', 'LastEditDate': '2012-11-11T01:36:43.140', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '6612', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '678', 'Tags': '<combinatorics><sets>', 'CreationDate': '2012-11-11T01:29:59.903', 'Id': '6611'},25410:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Could anyone please explain Cantor's diagonalization principle in simple terms?</p>\n", 'ViewCount': '389', 'Title': "Cantor's diagonal method in simple terms?", 'LastEditorUserId': '472', 'LastActivityDate': '2012-11-22T03:35:01.137', 'LastEditDate': '2012-11-22T03:35:01.137', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '6759', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<complexity-theory><sets><uncountability>', 'CreationDate': '2012-11-19T02:53:30.917', 'Id': '6753'},25411:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I need to know what class of CFL is closed under i.e. what set is complement of CFL.\nI know CFL is not closed under complement, and I know that P is closed under complement. Since CFL $\\subsetneq$ P I can say that complement of CFL is included in P(right?). There is still a question whether complement of CFL is proper subset of P or the whole P. I would appreciate any ideas on how to show that complement of CFL is the whole P(if that's the case of course). </p>\n", 'ViewCount': '1022', 'Title': 'What is complement of Context-free languages?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-05T02:26:08.850', 'LastEditDate': '2012-12-04T16:52:22.483', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7146', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4859', 'Tags': '<complexity-theory><formal-languages><context-free><closure-properties><sets>', 'CreationDate': '2012-12-04T01:48:38.370', 'Id': '7144'},25412:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let\'s say we have 10 people, each with a list of favorite books. For a given person X, I would like to find a special subset of X\'s books liked only by X, i.e. there is no other person that likes all of the books in X\'s special subset. I think of this special subset as a unique "fingerprint" for X. </p>\n\n<p>I would appreciate suggestions on an approach for finding such sets. (While this reads like a homework problem, it is related to a problem in my biology research that I am trying to solve.)</p>\n', 'ViewCount': '137', 'Title': 'Finding "fingerprint" sets', 'LastActivityDate': '2012-12-08T03:19:52.813', 'AnswerCount': '4', 'CommentCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '4927', 'Tags': '<algorithms><sets>', 'CreationDate': '2012-12-06T15:54:53.583', 'FavoriteCount': '1', 'Id': '7210'},25413:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>A multiset is an unordered collection of elements where elements may repeat any\nnumber of times. The size of a multiset is the number of elements in it counting\nrepetitions.</p>\n\n<p>(a) What is the number of multisets of size $4$ that can be constructed from $n$\ndistinct elements so that at least one element occurs exactly twice?</p>\n\n<p>(b) How many multisets can be constructed from $n$ distinct elements?</p>\n\n<p>For part b, infinite is correct.</p>\n\n<p>For part a, taking $n=3$ and elements $\\{1,2,3\\}$ we have multisets as:\n$\\{1,1,2,2\\}, \\{1,1,3,3\\}, \\{1,1,2,3\\}, \\{2,2,3,3\\}, \\{2,2,1,3\\}, \\{3,3,1,2\\}$, for a total of $6$.</p>\n\n<p>Similarly for $n=4$ and using elements $\\{1,2,3,4\\}$, we have $18$ multisets. There must be some formula, or we have to develop one!</p>\n\n<p>I am in particular looking for a formula when there is a restriction on the number occurrences in the multiset.</p>\n', 'ViewCount': '150', 'Title': 'Multisets of a given set', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-24T18:06:40.757', 'LastEditDate': '2012-12-24T18:06:40.757', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7579', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4763', 'Tags': '<combinatorics><sets>', 'CreationDate': '2012-12-24T14:36:01.187', 'Id': '7578'},25414:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I have a set of sets of integers $A$, is there an efficient algorithm/data structure that will allow me to query for all sets of integers that include a given input set? That is, given input $I\\subset \\mathbb Z$, $\\forall x \\in I$ find $C$, the sets in $A$ that include all of $I$, that is $C=\\left\\{ B \\in A \\mid I\\subseteq B\\right\\}$.</p>\n\n<p>Looking for the best of a few solutions. </p>\n', 'ViewCount': '116', 'Title': 'Finding containing sets in a set of sets', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-01-02T20:21:07.680', 'LastEditDate': '2013-01-02T16:29:56.270', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><sets>', 'CreationDate': '2013-01-02T15:28:59.567', 'FavoriteCount': '1', 'Id': '7701'},25415:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a set of strings.  My goal is to find a minimal set of longest prefixes which will match most of that set.</p>\n\n<p>For instance, if my set is:</p>\n\n<pre><code>abracadabra\nabracado\nabramu\nbanana\nbananasplit\nbananaicecream\nxylophone\nzebra\nzeitgeist\nzello\n</code></pre>\n\n<p>I would want the output to be:</p>\n\n<pre><code>banana (len 6, matches 3)\nabra (len 4, matches 3)\nxylophone (len 9, matches 1)\nze (len 2, matches 3)\n</code></pre>\n\n<p>Now, this question isn't yet properly specified.  That's because I'm ranking my results on two dimensions: maximum matches, and maximum length.  My goal is to find prefixes that cover as much as of the set as possible, which are as long as possible and thus less likely to occur in strings that <em>aren't</em> in the set (all other things being equal, of course).</p>\n\n<p>Ideally, I'd like to find a set of very long strings, ranked by how much of the set they cover.</p>\n\n<p>That's my goal.  Now I'll present my work, and where I need help.</p>\n\n<p><strong>FIRST</strong> Let's specify the problem better.  We want a set of prefixes.  For each prefix, we compute its length, and the number of matches it has in the set, and order the prefixes by their product.  I'm then free to pick the top X prefixes.</p>\n\n<p>I think that's a good specification.</p>\n\n<p><strong>NOW</strong> Comes an efficient implementation.  Brute force is to check every possible prefix against every string, which is complexity n * n * m (n being number of strings, m being average length of strings).</p>\n\n<p>An efficient algorithm?<br>\nSomething like this:   </p>\n\n<ol>\n<li>Build a prefix tree of the set</li>\n<li>Each leaf has value 1</li>\n<li>Work up the tree, with each parent equal to sum of its children , plus 1 if it has an entry</li>\n<li>Now we know each prefix and how many matches it has - I believe complexity is n log n</li>\n<li>Walk through the tree, counting length of each string (complexity n * m)</li>\n<li>And collect all the entries, sort them by length * value (complexity n log n)</li>\n</ol>\n\n<p>That algorithm is roughly n log n, which is efficient enough.  Will it work? How should it be improved? What's a simple way to implement it? </p>\n\n<p>Finally: Since all the data is in a Postgres relational database, I believe it would be simplest to do the algorithm using relational algebra with aggregate functions. Comments on this?</p>\n", 'ViewCount': '216', 'Title': 'Algorithm for determining minimal set of covering prefixes', 'LastEditorUserId': '1623', 'LastActivityDate': '2013-01-11T14:38:16.920', 'LastEditDate': '2013-01-10T16:50:17.210', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5368', 'Tags': '<algorithms><trees><data-compression><sets><coding-theory>', 'CreationDate': '2013-01-10T13:34:14.843', 'Id': '7868'},25416:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Based on the definition of a <a href="http://mathworld.wolfram.com/Multiset.html" rel="nofollow">multiset</a> and the information in this <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.145.8728" rel="nofollow">paper</a>, why do we use multisets in proving the termination of a program?\nIs not the well-founded order enough?</p>\n', 'ViewCount': '126', 'Title': 'The use of multiset ordering in proving termination', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-21T10:55:18.597', 'LastEditDate': '2013-01-21T10:55:18.597', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1584', 'Tags': '<algorithm-analysis><proof-techniques><correctness-proof><sets>', 'CreationDate': '2013-01-19T23:46:45.707', 'Id': '9046'},25417:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I need a pool of photos (if possible with description) for my project. I mainly have to perform term extraction for semantic searching. Is there something available out there that is made available for such kinds of thing?</p>\n\n<p>I'm going to mine the description of these photos, maybe build ontologies and then perform search on them. The result of the mining might give useful terms about the pictures.</p>\n", 'ViewCount': '50', 'Title': 'Pool of photos for term extraction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-03T15:11:37.810', 'LastEditDate': '2013-02-02T13:45:11.110', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6669', 'Tags': '<machine-learning><data-mining><data-sets><ontologies>', 'CreationDate': '2013-02-01T19:25:53.240', 'Id': '9404'},25418:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '621', 'Title': 'Finding the minimum subset of intervals covering the whole set', 'LastEditDate': '2013-02-06T07:53:35.410', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6723', 'FavoriteCount': '2', 'Body': '<p>Suppose we have a set $A$ of pairs $(a,b)$ such that $a$ and $b$ are real numbers and $a &lt; b$. What is the most efficient algorithm to find the smallest subset $B \\subseteq A$ such that, for any value within the range of any pair in $A$, the value is also within the range of any pair in $B$. </p>\n\n<p>I am currently considering setting $B$ equal to $A$ and, for each pair in $B$, if removing the pair still upholds the property of $B$ described above, remove it. However, I feel this algorithm is too inefficient. Is there a more efficient algorithm? </p>\n', 'Tags': '<algorithms><sets>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-06T14:52:43.370', 'CommentCount': '2', 'AcceptedAnswerId': '9536', 'CreationDate': '2013-02-06T00:18:54.913', 'Id': '9531'},25419:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For regular languages $R, S$ and $T$, which of the following are true?</p>\n\n<ol>\n<li>$R \\cup S = S \\cup R$</li>\n<li>$(R \\cup S) \\cdot T = RT \\cup ST  $</li>\n<li>$R^* \\cdot S^* = (R \\cup S)^*$</li>\n</ol>\n', 'ViewCount': '56', 'Title': 'Regular language properties', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-15T07:38:26.373', 'LastEditDate': '2013-02-15T07:38:26.373', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6875', 'Tags': '<formal-languages><regular-languages><sets>', 'CreationDate': '2013-02-14T16:39:40.447', 'Id': '9775'},25420:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Let $S$ be a finite set of integers (this set contains about 200000 elements). Let $T \\subset S$ be a particular subset of $S$ called <em>target</em>. $S$ keeps growing. So does $T$. Each new element of $S$ might or might not be in $T$.</p>\n\n<p>No (known, or practical) algorithm can determine if an element $s \\in S$ is in the <em>target</em> set: a human being must give the final word (ie, it is subjective). It is estimated that $T$ has about 30000-35000 elements. I already know $T_1$, a first approximation of $T$, with about 25000 elements. I also already know some thousands of elements of $S$ that are certainly not in $T$.</p>\n\n<p>What I want is a way to approximate $T$ as closely as possible, and present only those elements to a human being. Also, for each new element of $S$, I want to determine if it has high probability of being in $T$ -- and present only those with high probability to a human being.</p>\n\n<hr>\n\n<p>Now, I describe what I can use to try to approximate $T$.</p>\n\n<p>Each integer $s \\in S$ has some <em>labels</em> associated. These can be represented as subsets $L_i \\subset S, \\forall i \\in \\{1, ..., n\\}$ ($n$ is about 250). These subsets are known, determined by algorithms (ie, I have functions $l_i \\to \\{in,out\\}$ such that $l_i(s) = in \\iff s \\in L_i$).</p>\n\n<p>Some label algorithms are very fast, some are slow. Anyways, these labels (ie, the sets $L_i$) have already been determined. Some of these labels contain very few (1-100) elements, some contain a lot (100000-150000). Many labels are independent, some are closely related (ie, I know that some labels are subsets of others, I know that some are disjoint, etc).</p>\n\n<hr>\n\n<p>So, given this framework, what kind of algorithms can I use to approximate $T$? They can be interactive, ie, they could get better after each new approximation of $T$, if this makes the problem easier.</p>\n\n<p>I thought about using a <strong>genetic algorithm</strong> to determine which labels, when intersected, give good approximations of $T$. However, this can get slow, with a na\xefve intersection algorithm (ie, suppose $L_1, L_2, L_3$ are to be intersected; if they are all "big" (50000-150000), it can be quite time consuming to calculate the intersection! -- now, imagine a gene that would require to intersect, say, 50 labels...).</p>\n\n<p>How can I speed this, without sacrificing too much the precision?</p>\n', 'ViewCount': '43', 'Title': 'Approximate target subset by intersecting other subsets', 'LastEditorUserId': '7051', 'LastActivityDate': '2013-02-26T22:51:21.717', 'LastEditDate': '2013-02-26T22:51:21.717', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7051', 'Tags': '<algorithms><probabilistic-algorithms><finite-sets>', 'CreationDate': '2013-02-26T22:42:08.043', 'Id': '10128'},25421:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Lets say I have a global dataset and I run queries over those data set.\nFor example my dataset would be</p>\n\n<ul>\n<li>#id, #Name, #Employee, #Birthdate, #number_of_children</li>\n<li>1, Nick, Nasa, 1982, 1</li>\n<li>2, Jack, Exon, 1985, 5</li>\n<li>3, Tom, ABCD, 1978, 0</li>\n</ul>\n\n<p>And I can run queryies on those dataset.\nsample queries would be\n* #Query => #Result_ids \n* (Name starts with A) => [1]\n* (Birthdate before 1983 and have children ) => [1]</p>\n\n<p>I want to store those queries on a data structure and I want to be able to do set operations on those queries like intersection and union. So an example union operation would be.</p>\n\n<p>(Birthdate before 1983) intersection (have children) => (Birthdate before 1983 and have children)</p>\n\n<p>I also want to be able to findout if one query is subset or superset of another one. For example.</p>\n\n<p>(Birthdate before 1983) is superset of (Birthdate before 1980)\n(Have 3 children) is subset of (Have more than 1 children)</p>\n\n<p>(Name = Jack and born in 1980) is subset of (Born before 1990)</p>\n\n<p>I will have a program that will have thousands of queries. And it will combine those queries to make more variety of queries. When I have a new query, I will compare it with existing queries to see if I have an exact query in store or have a superset.</p>\n\n<p>Can anybody suggest me a data structure that is fast enough to store and operate on those data?</p>\n', 'ViewCount': '48', 'Title': 'Algorithm for query comparison', 'LastEditorUserId': '39', 'LastActivityDate': '2013-03-03T20:53:50.943', 'LastEditDate': '2013-03-03T20:53:50.943', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7123', 'Tags': '<databases><data-sets>', 'CreationDate': '2013-03-03T12:58:15.987', 'Id': '10228'},25422:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a set $S$ of $n$ elements, and a set $\\mathcal{X}$ of $m$ subsets of $S$, decide if there exist $U,V \\in \\mathcal{X}$, s.t. $U \\cup V = S$.</p>\n\n<p>Brute force would take time $O(nm^2)$ but is there any way of solving this more efficiently?</p>\n', 'ViewCount': '113', 'Title': 'Test if there are two subsets which cover a set', 'LastActivityDate': '2013-03-04T19:58:53.887', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '10272', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4259', 'Tags': '<algorithms><data-structures><sets>', 'CreationDate': '2013-03-04T06:43:10.150', 'FavoriteCount': '1', 'Id': '10250'},25423:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Lets say I have a global dataset and I run queries over those data set.\nFor example my dataset would be</p>\n\n<ul>\n<li>#id, #Name, #Employee, #Birthdate, #number_of_children</li>\n<li>1, Nick, Nasa, 1982, 1</li>\n<li>2, Jack, Exon, 1985, 5</li>\n<li>3, Tom, ABCD, 1978, 0</li>\n</ul>\n\n<p>And I can run queryies on those dataset.\nsample queries would be\n* #Query => #Result_ids \n* (Name starts with A) => [1]\n* (Birthdate before 1983 and have children ) => [1]</p>\n\n<p>I want to store those queries on a data structure and I want to be able to do set operations on those queries like intersection and union. So an example union operation would be.</p>\n\n<p>(Birthdate before 1983) intersection (have children) => (Birthdate before 1983 and have children)</p>\n\n<p>I also want to be able to findout if one query is subset or superset of another one. For example.</p>\n\n<p>(Birthdate before 1983) is superset of (Birthdate before 1980)\n(Have 3 children) is subset of (Have more than 1 children)</p>\n\n<p>(Name = Jack and born in 1980) is subset of (Born before 1990)</p>\n\n<p>I will have a program that will have thousands of queries. And it will combine those queries to make more variety of queries. When I have a new query, I will compare it with existing queries to see if I have an exact query in store or have a superset.</p>\n\n<p>Can anybody suggest me a data structure that is fast enough to store and operate on those data?</p>\n', 'ViewCount': '34', 'Title': 'Algorithm for query comparison', 'LastActivityDate': '2013-03-04T15:18:29.903', 'AnswerCount': '0', 'CommentCount': '7', 'Score': '1', 'OwnerDisplayName': 'yilmazhuseyin', 'PostTypeId': '1', 'OwnerUserId': '7123', 'Tags': '<data-structures><data-sets>', 'CreationDate': '2013-02-25T13:47:07.187', 'Id': '10264'},25424:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am reading through PCA and it says that the maximum variance principal component has most of the information. Can we apply that to any data set? If a data set has n attributes and most of the attributes show high variance then can we infer that the dataset has captured lot of useful information? </p>\n\n<p>I am trying to understand how a high variance dataset contains useful information?</p>\n', 'ViewCount': '74', 'Title': 'Maximum variance and useful information of dataset', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-06T14:34:08.443', 'LastEditDate': '2013-03-06T07:11:43.823', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '10307', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '3004', 'Tags': '<terminology><data-mining><data-sets><statistics>', 'CreationDate': '2013-03-05T03:09:00.700', 'Id': '10279'},25425:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '176', 'Title': 'What is a compact way to represent a partition of a set?', 'LastEditDate': '2013-04-16T00:36:16.213', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7741', 'FavoriteCount': '2', 'Body': '<p>There exist <a href="http://cs.stackexchange.com/q/3414/7741">efficient data\nstructures</a> for representing set\npartitions. These data structures have good time complexities for operations\nlike Union and Find, but they are not particularly space-efficient.</p>\n\n<p><strong>What is a space-efficient way to represent a partition of a set?</strong></p>\n\n<p>Here is one possible starting point:</p>\n\n<p>I know that the <a href="http://en.wikipedia.org/wiki/Partition_of_a_set#Counting_partitions">number of\npartitions</a>\nof a set with $N$ elements is $B_N$, the $N$-th <a href="http://en.wikipedia.org/wiki/Bell_number">Bell\nnumber</a>. So the optimal space\ncomplexity for representing a partition of a set with $N$ elements is\n$\\log_2(B_N)$ bits. To find such a representation, we could look for a\none-to-one mapping between (the set of partitions of a set of $N$ elements) and\n(the set of integers from $1$ to $B_N$).</p>\n\n<p>Is there such a mapping that is efficient to compute? What I mean by\n"efficient" is that I want to convert this compact representation\nto / from an easy-to-manipulate representation (such as a list of lists) in time\npolynomial in $N$ or $\\log_2(B_N)$.</p>\n', 'Tags': '<data-structures><combinatorics><space-complexity><sets><partitions>', 'LastEditorUserId': '7741', 'LastActivityDate': '2013-04-17T19:39:41.237', 'CommentCount': '1', 'AcceptedAnswerId': '11348', 'CreationDate': '2013-04-16T00:14:19.900', 'Id': '11345'},25426:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is there any data structure that maintain a collection of set (of finite ground set) supporting the following operations? Any sublinear running time will be appreciated?</p>\n\n<ol>\n<li>Init an empty set.</li>\n<li>Add an element to a set.</li>\n<li>Given two set, report whether they intersect.</li>\n</ol>\n', 'ViewCount': '603', 'Title': 'Data Structure for Set Intersection?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-26T18:32:47.703', 'LastEditDate': '2013-04-26T13:15:51.383', 'AnswerCount': '4', 'CommentCount': '1', 'Score': '7', 'OwnerDisplayName': 'David Huang', 'PostTypeId': '1', 'Tags': '<data-structures><sets>', 'CreationDate': '2013-04-26T07:32:59.770', 'FavoriteCount': '4', 'Id': '11572'},25427:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If $L = L(M)$ then $L$ is a subset of $L(M)$ and $L(M)$ is a subset of $L$.</p>\n\n<p>Can anyone clarify what does this mean?</p>\n', 'ViewCount': '189', 'Title': 'If $L = L(M)$ then $L$ is a subset of $L(M)$ and $L(M)$ is a subset of $L$', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-06T23:24:43.730', 'LastEditDate': '2013-05-06T23:24:43.730', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11644', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7405', 'Tags': '<terminology><sets>', 'CreationDate': '2013-04-28T21:41:46.610', 'Id': '11643'},25428:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose one has a couple of <em>.wav</em> files with English spoken words, multiple ones for each word, and for each such set there exists a transcription of their right output, the pronunciation as <em>ascii text</em>.</p>\n\n<p>As far as I know, machine learning neural networks use arrays of floats as input and output, and also internally.</p>\n\n<p>What do one do in machine learning in order to convert such \'real world\' data formats/data sets into another data structure that is meaningful and suitable for the machine learning neural networks? </p>\n\n<p>Furthermore, what classifies a particular data structure as \'suitable\', except the fact that it can be expressed as arrays of integers (what fits every digital data)?</p>\n\n<p>(I suppose it could be more sophisticated than stripping the headers and feeding the uncompressed binary data in as integers, or is it?)</p>\n\n<hr>\n\n<p><strong>edit</strong>: in an other SE site\'s <a href="http://stats.stackexchange.com/questions/7224/detecting-a-given-face-in-a-database-of-facial-images">question</a> (regarding how to filter out an image of Justin Bieber), an answer asserts that one <em>"has some method of feature generation to transform the raw images into features that are useful for machine learning purposes"</em>, but it doesn\'t explain how this is done, or how does one begin to create a method for such a feature conversion.</p>\n', 'ViewCount': '128', 'Title': 'How is sound input and output data converted to use with machine learning networks?', 'LastEditorUserId': '31', 'LastActivityDate': '2013-06-01T17:30:47.413', 'LastEditDate': '2013-05-02T07:28:37.360', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7770', 'Tags': '<data-structures><machine-learning><data-sets>', 'CreationDate': '2013-05-02T06:31:28.187', 'Id': '11720'},25429:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Here's the problem:</p>\n\n<p>I have a collection of collections, $C$, where each $c\\in C$ is a collection of sets $X\\subset U$.  Denote $c_i$ as the i-th $X$ in $c$.  Informally, I want to map all the sets in each collection to bins, where no two sets in a single collection can occupy the same bin, such that the sum of the sizes of the unions of all sets in each bin is minimized.  More formally:</p>\n\n<p>Let $N = \\max_{c \\in C} |c|$, and let $P_N$ be the set of all permutations of all non-empty subsets of the set $\\{1,2,...,N\\}$.  I wish to define a mapping:</p>\n\n<p>$$F : C \\rightarrow P_{N},\\ s.t.\\ \\forall c \\in C\\ (|F(c)| = |c|)$$</p>\n\n<p>with bin sets\n$$B(k) = \\{X \\subset U : \\exists c \\in C\\ (\\exists i \\in \\{1,2,...,|c|\\}\\ s.t.\\ c_i = X \\wedge (F(c))_i = k)\\}$$</p>\n\n<p>Such that the quantity</p>\n\n<p>$$\\sum_{k=1}^{N} { \\Biggl|\\bigcup_{X \\in B(k)}\\Biggr| } $$</p>\n\n<p>is minimized.</p>\n\n<hr>\n\n<p>Off the bat, I'd guess that this is an NP-hard problem - a reduction from Set Cover seems to be just within reach.  </p>\n\n<p>Even a greedy algorithm that iteratively processes each collection $c \\in C$, producing minimal results each time, requires $O(2^N \\cdot |C|)$ time using dynamic programming, where $|U|$ is assumed to be a constant factor.</p>\n\n<p>I'm having trouble proving whether or not the Greedy algorithm is even optimal - or if a more efficient solution exists.  Anyone have any thoughts?</p>\n\n<hr>\n\n<p>Alternatively, minimizing the quantity:</p>\n\n<p>$$\\max_{1 \\leq k \\leq N} {\\Biggl| \\bigcup_{X \\in B(k)} \\Biggr| }$$</p>\n\n<p>Is also of interest.  It's definitely a different problem, as demonstrated by a simple case where $C$ has 2 collections, one of the form $\\{\\{1\\}, \\{3, 4\\}\\}$, and the other $\\{\\{2\\}, \\{3, 4\\}\\}$.  I am not sure this problem is any easier though</p>\n", 'ViewCount': '74', 'Title': 'Overlap Maximization problem', 'LastEditorUserId': '7614', 'LastActivityDate': '2013-05-22T20:36:21.743', 'LastEditDate': '2013-05-22T20:36:21.743', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7614', 'Tags': '<algorithms><time-complexity><optimization><sets>', 'CreationDate': '2013-05-22T17:58:46.787', 'FavoriteCount': '1', 'Id': '12219'},25430:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem that I think should have been studied. I am looking for algorithms for it.</p>\n\n<p>Each item is a set of key-value pairs.\nLet $x$ be an item and $F$ be a set of items.</p>\n\n<p>Each key and each value can appear multiple times.\nThe number of possible keys and possible values can be arbitrary large.</p>\n\n<p>We are given $x$ and $F$. We want to find all those items $y$ in $F$ such that $y.val \\subseteq x$.</p>\n\n<p>For example,</p>\n\n<p>$x = \\{(a,1), (b,2), (c,3), (d,4)\\}$</p>\n\n<p>$F= \\{$<br>\n$(A, \\{(a,1)\\}), $<br>\n$(B, \\{(a,1), (b,2)\\}),$<br>\n$(C, \\{(a,1), (b,3)\\}),$<br>\n$(D, \\{(b,2), (c,3), (d,4)\\}),$<br>\n$(E, \\{(a,1), (b,2), (c,3), (d,4)\\}),$<br>\n$(F, \\{(a,1), (b,2), (c,3), (d,4), (e,5)\\}),$<br>\n$(G, \\{(a,1), (b,2), (c,3), (e,5)\\})$<br>\n$\\}$</p>\n\n<p>The answer is:\n$A$ yes, $B$ yes, $C$ no (right keys, wrong values), $D$ yes, $E$ yes (exact match),\n$F$ no, $G$ no.</p>\n\n<p>Has this problem been studied?</p>\n\n<p>The problem seems similar to finding features from a DNA sequence or detecting plagiarism in a document.</p>\n\n<p>I asked this problem in theoretical CS stack exchange and did not get very helpful answers. <a href="http://cstheory.stackexchange.com/questions/18052/find-all-items-which-are-subsets-of-an-item">http://cstheory.stackexchange.com/questions/18052/find-all-items-which-are-subsets-of-an-item</a></p>\n', 'ViewCount': '54', 'Title': 'Find all items which are subsets of an item', 'LastActivityDate': '2013-06-21T05:46:04.807', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8762', 'Tags': '<algorithms><search-algorithms><sets>', 'CreationDate': '2013-06-20T03:34:14.500', 'Id': '12777'},25431:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>This question is from an exam preparation that I have to demonstrate to my teacher to show him that I understood the topic thoroughly .</p>\n\n<p>Given a set $S$ of integers with $n$ elements, an integer $z$ and an integer $k \\leq 2$, sketch an algorithm that checks whether there are $k$ elements in $S$ of which the product equals $z$.</p>\n\n<p>I need to find two algorithms: one that solves the problem in $O(n^k)$ and the other one that solves the problem in $O(n^{k-1}\\log n)$.</p>\n\n<p>How can I do this? Could you help me with some hints? Thank you!</p>\n', 'ViewCount': '126', 'Title': 'Subset product problems (one "easy" one "difficult")', 'LastEditorUserId': '9087', 'LastActivityDate': '2013-07-09T10:03:06.003', 'LastEditDate': '2013-07-09T10:03:06.003', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '9087', 'Tags': '<algorithms><sets>', 'CreationDate': '2013-07-08T19:10:44.463', 'Id': '13164'},25432:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to proove $NP$-membership for a problem from the following certificate.\nI have $n$ sets of integers :\n$$(S_i)_{i \\in \\{1,\\dots,n\\}}$$\nEach set has a number $m_i$ of integers.\nI make "combination" from those sets by taking at most one element in each set.\nA "combination" has between $0$ and $n$ elements (assuming sets are not empty).\nA "combination" has a value : the sum of its elements.\nI have to compute the sum of every possible "combination" values,\nand look if it is greater than a given value.\nAn analytical formula would be nice, but I\'m not sure it exists.\nOtherwise, do you think this sum is easily computable ?</p>\n', 'ViewCount': '80', 'Title': 'Computing every possible sum of integers taken from different sets', 'LastEditorUserId': '8326', 'LastActivityDate': '2013-07-20T08:00:09.180', 'LastEditDate': '2013-07-20T08:00:09.180', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8326', 'Tags': '<algorithms><sets>', 'CreationDate': '2013-07-19T09:55:35.433', 'Id': '13346'},25433:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There are a number of collections of network (or graph) data sets freely available on the web, e.g.</p>\n\n<ul>\n<li><a href="http://snap.stanford.edu/data/index.html" rel="nofollow">http://snap.stanford.edu/data/index.html</a></li>\n<li><a href="http://www.cc.gatech.edu/dimacs10/downloads.shtml" rel="nofollow">http://www.cc.gatech.edu/dimacs10/downloads.shtml</a></li>\n</ul>\n\n<p>I am looking for dynamic network data sets, i.e. networks whose structure varies over time. They seem to be quite rare: The SNAP collection contains only a few "temporal" graphs.</p>\n\n<p>Do you known any other possible sources?</p>\n', 'ViewCount': '56', 'Title': 'Looking for dynamic network data sets', 'LastActivityDate': '2013-07-31T15:18:51.787', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9450', 'Tags': '<graphs><data-sets><social-networks><big-data>', 'CreationDate': '2013-07-31T15:18:51.787', 'Id': '13542'},25434:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am new to this and an amateur... please help.</p>\n\n<p><strong>My Question in practical terms:</strong>\nGiven The three following inputs... determine the number of <em>unique</em> group arrangements as an ordered set.</p>\n\n<p><strong>INPUT:</strong>\n\'a\' = Students\n\'b\' = Groups\n\'c\' = students per group</p>\n\n<p><strong>OUPUT ANSWER:</strong>\n\'z\' as an integer</p>\n\n<p><strong>OUTPUT RULES:</strong>\n - All elements considered are ordered from left to right starting with the smallest number.\n - Order is not important... (1,2,3)=(2,3,1)=(3,2,1)=(3,1,2)=(1,3,2)=(2,1,3)...THEREFORE (1,2,3) is the only unique group that is to be counted.</p>\n\n<hr>\n\n<p><strong>Problem Example #1:</strong>\nI have 12 students that I need to arrange into 4 groups.  I want the 4 groups to each contain 3 students with no student appearing in more than one group. How many arrangements are there? In this instance there are 880 ordered arrangements. \n[Output Format: (1,2,3)(4,5,6)(7,8,9)(10,11,12)]</p>\n\n<p><strong>Problem Example #2:</strong>\nI have 12 students that I need to arrange into 3 groups.  I want the 3 groups to each contain 2 students with no student appearing in more than one group. How many arrangements are there? In this instance there are 13,860 ordered arrangements.\n[Output Format: (1,4)(3,6)(7,11)]</p>\n\n<p><strong>Problem Example #3:</strong>\nI have 24 students that I need to arrange into 3 groups.  I want the 3 groups to each contain 6 students with no student appearing in more than one group. How many arrangements are there? In this instance there are 125,847,260 ordered arrangements.\n[Output Format: (1,2,3,4,5,6)(9,10,11,12,13)(15,16,17,18,19,20)]</p>\n\n<hr>\n\n<p>Unless I am mistaken, these are not \'combinations\' or \'permutation\'s or \'complete sets\' or \'hoyosa index\'.  So, for lack of better terms I am calling them <em>ordered sets within ordered groups</em> for now. </p>\n\n<p>Is there a known formula to generate the answer without generating all possible solutions and searching? </p>\n\n<p><strong>20130822---ADDENDUM---</strong>\nThe numbers provided are accurate. The closest description tat I can call relate this to would be "Independent Edge Set AKA Matching"... except that I BELIEVE matching has a limit of two students per group. Sticking to the "Two Students per group" this can be determined using factorials similar to those you have provided.  HOWEVER, I cannot find a formula that allows for the three INPUTS a,b,c as provided and ONLY accounts for unique ordered sets. </p>\n\n<p>Using Problem Example #2:  12 Students (a), 2 groups (b), 3 students (c), = 13,860 unique ordered sets\nSet #1[(1,2,3,)(4,5,6)]\nSet #2[(1,2,3,)(4,5,7)]\nSet #3[(1,2,3,)(4,5,8)]\n... Set #13,860 [(7,8,9)(10,11,12)]</p>\n', 'ViewCount': '76', 'Title': "Is there a formula to state the number of 'sets' of 'ordered sets within ordered groups'?", 'LastEditorUserId': '9773', 'LastActivityDate': '2013-08-22T17:41:58.063', 'LastEditDate': '2013-08-22T15:45:07.363', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '13872', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9773', 'Tags': '<combinatorics><sets><matching>', 'CreationDate': '2013-08-21T22:05:30.310', 'Id': '13861'},25435:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Does anyone know where I could get an access to a project that contains all the artefacts (documents) that were created during the development? So I would like to get all the word, pdf, power designer, etc. files as well as all the source code. If possible, I would prefer that all this files are stored in some of the software reporitories.</p>\n', 'ViewCount': '26', 'ClosedDate': '2013-08-28T20:23:30.753', 'Title': 'Access to publicly available project with all the artefacts (files) created during the development', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-28T09:32:03.657', 'LastEditDate': '2013-08-28T09:32:03.657', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9853', 'Tags': '<reference-request><software-engineering><data-sets>', 'CreationDate': '2013-08-27T10:40:59.360', 'Id': '13970'},25436:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '134', 'Title': 'Set combination data structure (And storage complexity)', 'LastEditDate': '2013-09-09T12:06:57.553', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10038', 'FavoriteCount': '1', 'Body': '<p>I have already posted this question on <a href="http://stackoverflow.com/questions/18669727/set-combination-data-structure-and-storage-complexity">Stackoverflow</a>, but I\'m starting to think that this is the right place.</p>\n\n<p>I have a problem where I am required to associate unique combinations from a set (unique subsets) to a given value. e.g.: Let <code>S={a, b, c, d}</code>, the required data structure should perform the following:</p>\n\n<p><strong>Key -> value</strong></p>\n\n<pre><code>{a,b} -&gt; value1\n{a,c} -&gt; value2\n{c,d} -&gt; value3\n</code></pre>\n\n<ul>\n<li>Property 1: The length of the set in the key is fixed (In this\nexample it\'s fixed to 2).</li>\n<li>Property 2: The data structure does not\nhold all possible subsets of S.</li>\n</ul>\n\n<p><strong>Question 1</strong>: What is the storage complexity of a simple Map holding these values? O(N!)? (given that |S| = N and it\'s not fixed)</p>\n\n<p><strong>Question 2</strong>: Is there any efficient data structure that could store such elements? (The most important efficiency would be required in storage complexity)</p>\n', 'Tags': '<data-structures><space-complexity><sets>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-09T20:20:08.697', 'CommentCount': '4', 'AcceptedAnswerId': '14221', 'CreationDate': '2013-09-08T05:34:12.877', 'Id': '14208'},25437:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Does this property have a name?</p>\n\n<blockquote>\n  <p>Given a collection of sets $\\mathcal{P}$, for   all pairs $A, B\\in\\mathcal{P}$, either $A\\cap B=\\emptyset$ or $A\\subseteq B$ or $B\\subseteq A$.</p>\n</blockquote>\n\n<p>This concept could equally apply to monoids, groups, partial orders or other mathematical structures, with some adjustments to the definitions. For instance, for monoids and groups we would replace $A\\cap B=\\emptyset$ by $A\\cap B=\\{\\epsilon\\}$, where $\\epsilon$ is the unit of the monoid/group.</p>\n', 'ViewCount': '110', 'Title': 'Name for concept: each pair of sets is either nested or disjoint', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-16T07:20:35.550', 'LastEditDate': '2013-09-16T07:20:35.550', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '14282', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<terminology><sets>', 'CreationDate': '2013-09-12T09:09:20.537', 'Id': '14280'},25438:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have an index taking as keys values from the power set $P(S)$ of a set $S$, except for $\\emptyset$ and $S$.</p>\n\n<p>Then I have a query $Q=(s, k)$, where $s \\in P(S) - \\{\\emptyset \\cup S\\}$ and $ 1 &lt; k \\le |S|$.</p>\n\n<p>The result of the query is the set of covers $R$ of $S$; $\\forall r \\in R,  |r| \\le k$.</p>\n\n<p>So for instance, if $S = \\{a, b, c, d\\}$ and $Q=( \\{a,b\\}, 3 )$, $R$ should return all covers of $S$ formed by $\\{a, b\\}$ and $k = (3 - 1 = ) 2$ or less other subsets of $P(S) - \\{\\emptyset \\cup S\\}$, namely: $R = \\{$\n$$ \\{a,b\\} , \\{c\\} , \\{d\\}$$\n$$ \\{a,b\\} , \\{c, d\\} $$\n$$ \\{a,b\\} , \\{a, c, d\\} $$\n$$ \\{a,b\\} , \\{b, c, d\\} $$\n$\\}$ </p>\n\n<p>I want to know if there is an efficient algorithm that can give me all of these combinations of covers.</p>\n\n<p>In other words, I want to know if there is an efficient way to get all covers formed by at most $k$ elements, where I only know 1 element out of k.</p>\n', 'ViewCount': '41', 'Title': 'Enumerating all set covers when knowing one set at least', 'LastActivityDate': '2013-09-18T19:23:02.480', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '14421', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10207', 'Tags': '<sets><set-cover>', 'CreationDate': '2013-09-18T19:02:56.177', 'Id': '14420'},25439:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a Set $S$ of objects, a set $U$ of users and a map $c: U \\rightarrow S^{\\prime}$, where<br>\n$S^{\\prime} \\subset S$ and $\\emptyset \\notin S^{\\prime}$.</p>\n\n<p>Every time I add a new entry to $c$, i.e. adding a new user $u$ with her associated subset of $S^{\\prime}$, I need to get the list of other users with whom she covers $S$. However, I don't need to get all possible covers. I only need to get with how many $x$ other users she covers $S$, at most. In other words, I need to find who's complementing each other to cover $S$ 2 by 2, 3 by 3, ... , $x$ by $x$.</p>\n\n<p>Is there an efficient method to do it? Or an efficient data structure? If no, is there any trick I can make to get good results? e.g. encode the elements of $S$ and do some sort of mathematical operations? Is any efficient solution possible at all?</p>\n\n<p>Please let me know if I haven't explained my problem well enough.</p>\n", 'ViewCount': '25', 'Title': 'Finding users covering a set x by x', 'LastActivityDate': '2013-09-19T00:29:01.480', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10207', 'Tags': '<data-structures><efficiency><sets>', 'CreationDate': '2013-09-18T23:36:33.543', 'Id': '14426'},25440:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a set $X$, we define the power set $\\mathcal{P}(X)$ to be the set of all subsets of $X$. </p>\n\n<p>Construct a bijection between $\\mathcal{P}(X)$ and the set of functions from $X$ into the set $\\{0,1\\}$.</p>\n', 'ViewCount': '157', 'ClosedDate': '2013-09-23T07:14:41.433', 'Title': 'Bijection of a Power Set to $\\{0,1\\}$', 'LastActivityDate': '2013-09-23T00:25:39.880', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '14536', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10285', 'Tags': '<sets>', 'CreationDate': '2013-09-23T00:15:54.713', 'Id': '14534'},25441:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Prove that for any finite set $X$, $|P(X)| = 2^{|X|}$. The solution should use induction.</p>\n', 'ViewCount': '34', 'ClosedDate': '2013-09-23T07:29:20.753', 'Title': 'Prove that $|P(X)| = 2^{|X|}$', 'LastActivityDate': '2013-09-23T00:30:24.223', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '14538', 'Score': '0', 'OwnerDisplayName': 'user10286', 'PostTypeId': '1', 'Tags': '<sets>', 'CreationDate': '2013-09-23T00:27:20.640', 'Id': '14537'},25442:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I'm enrolled to a Formal Language And Automata course, and we have to prove this equation on sets of strings:\n$$(L_1\\cap L_2)\\cdot L_3 \u2260 (L_1\\cdot L_3) \\cap (L_2\\cdot L_3)$$</p>\n\n<p>I've tried a lot of sets for e.g.\n$L1 = \\{a,b,c,d\\}$,\n$L2 = \\{a,f,g\\}$,\n$L3 = \\{s,d,h\\}$.\nbut always the LHS comes out equal to the RHS instead of unequal.\nAny idea how to prove this?</p>\n", 'ViewCount': '125', 'Title': 'Concatenation of the intersection of two languages', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-24T22:40:51.497', 'LastEditDate': '2013-10-23T08:44:31.133', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16337', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '10918', 'Tags': '<formal-languages><sets>', 'CreationDate': '2013-10-22T12:58:06.627', 'Id': '16334'},25443:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a question about preparing the dataset of positive samples for a cascaded classifier that will be used for object detection.</p>\n\n<p>As positive samples, I have been given 3 sets of images:</p>\n\n<ol>\n<li>a set of <strong>colored</strong> images in full size (about 1200x600) with a <strong>white background</strong> and with the object displayed at a different angles in each image</li>\n<li>another set with the same images in grayscale and with a <strong>white background</strong>, scaled down to the detection window size (60x60)</li>\n<li>another set with the same images in grayscale and with a <strong>black background</strong>, scaled down to the detection window size (60x60)</li>\n</ol>\n\n<p>My question is that in Set 1, should the background really be white? Should it not instead be an <strong>environment</strong> that the object is likely to be found in in the testing dataset? Or should I have a fourth set where the images are in their natural environments? How does environment figure into the training samples?</p>\n', 'ViewCount': '36', 'Title': 'Environment requirement in training image dataset for classifier', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-27T12:25:13.433', 'LastEditDate': '2013-11-12T16:52:26.290', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10418', 'Tags': '<machine-learning><image-processing><computer-vision><data-sets><classification>', 'CreationDate': '2013-11-12T09:44:33.823', 'Id': '17949'},25444:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Is it true that if A is a subset of B, and B is decidable, than A is guaranteed to be decidable?</p>\n\n<p>I believe it would be true because all the subsets of B should also be decidable making A decidable. I'm not sure if my thought process is right or if there's a easier more intuitive way to explain this.</p>\n", 'ViewCount': '362', 'Title': 'Is every subset of a decidable set, also decidable?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T22:08:31.597', 'LastEditDate': '2013-11-13T22:08:31.597', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<computability><undecidability><closure-properties><sets>', 'CreationDate': '2013-11-12T18:05:15.880', 'Id': '17966'},25445:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have two large sets of integers $A$ and $B$.  Each set has about a million entries, and each entry is a positive integer that is at most 10 digits long.  </p>\n\n<p>What is the best algorithm to compute $A\\setminus B$ and $B\\setminus A$? In other words, how can I efficiently compute the list of entries of $A$ that are not in $B$ and vice versa?  What would be the best data structure to represent these two sets, to make these operations efficient?</p>\n\n<p>The best approach I can come up with is storing these two sets as sorted lists, and compare every element of $A$ against every element of $B$, in a linear fashion.  Can we do better?</p>\n', 'ViewCount': '292', 'Title': 'Computing set difference between two large sets', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-14T13:47:21.917', 'LastEditDate': '2013-11-14T07:18:12.080', 'AnswerCount': '4', 'CommentCount': '11', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1985', 'Tags': '<algorithms><data-structures><sets>', 'CreationDate': '2013-11-13T13:50:12.773', 'FavoriteCount': '1', 'Id': '17984'},25446:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Here is a definition from the functions section in my discrete math textbook (Discrete Mathematics and its Applications 7e, Rosen 2012):</p>\n\n<blockquote>\n  <p>Let $f$ be a function from $A$ to $B$, and let $S$ be a subset of $A$. The image\n  of S under the function $f$ is the subset of $B$ that consists of the\n  images of the elements of $S$. We denote the image of $S$ by $f(S)$, so:</p>\n  \n  <p>$f(S) = \\{t \\mid \\exists s \\in S (t = f(s)) \\}.$</p>\n  \n  <p>We also use the shorthand $\\{ f(s) \\mid s \\in S \\}$ to denote this set.</p>\n</blockquote>\n\n<p>So I guess I am just a little confused with the idea of an image. Is it the same as the codomain? And where it says, "The image of $S$ under the function ...".  What do you think it means by "under"?  Some examples would be great.</p>\n', 'ViewCount': '73', 'Title': 'Is the image of a function the codomain of a function?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-21T21:55:13.460', 'LastEditDate': '2013-11-19T09:56:05.517', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18144', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11405', 'Tags': '<discrete-mathematics><sets>', 'CreationDate': '2013-11-19T01:50:24.943', 'Id': '18137'},25447:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There are many solutions on the web showing that the subset-sum problem is polynomial time reducible to the set-partition problem. However, during my search, I came across the following <a href="https://www.google.ie/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=0CD0QFjAC&amp;url=http%3A%2F%2Fwww.cs.virginia.edu%2Fcs302%2Fclasses%2Fclass23.ppt&amp;ei=WH2LUue9N8rb7AaLrYCgCQ&amp;usg=AFQjCNG2EtWeZu-nt8KG-i2vkwE3kPntTw&amp;sig2=hDcvb_hFuUBc_QwhD6etJA" rel="nofollow">powerpoint</a> presentation (slide 12), where it says that the inverse is also true. i.e. the set-partition problem is polynomial time reducible to the subset-sum problem. \nSo far, I have been unable to find any proofs to show the same.</p>\n\n<p>So, my question: How is the set-partition problem polynomial time reducible to the subset-sum problem, or was there an error on the presentation above?</p>\n', 'ViewCount': '167', 'Title': 'Is the set-partition problem polynomial time reducible to the subset-sum problem?', 'LastActivityDate': '2013-11-19T16:39:04.547', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11481', 'Tags': '<sets><polynomial-time>', 'CreationDate': '2013-11-19T15:39:02.270', 'Id': '18159'},25448:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm quite stuck trying to answer this. The problem of finding the size of the maximum independent set in a tree using dynamic programming is well documented and many solutions are around.</p>\n\n<p>I've been trying to use a similar technique (ie. recursing through the childred and then the grandchildren of a node) to find the <strong>number</strong> of such sets but I have not been able to work it out.</p>\n\n<p>Any help?</p>\n", 'ViewCount': '76', 'Title': 'Finding number of maximum independent sets in tree, using dynamic programming', 'LastActivityDate': '2013-12-07T17:45:59.723', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11885', 'Tags': '<dynamic-programming><trees><sets>', 'CreationDate': '2013-12-06T20:33:13.333', 'Id': '18694'},25449:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>According to Wikipedia, the <a href="http://en.wikipedia.org/wiki/Independent_set_%28graph_theory%29" rel="nofollow">Independent Set</a> problem is a special case of the <a href="http://en.wikipedia.org/wiki/Set_packing" rel="nofollow">Set Packing</a> problem. But, it seems to me that these problems are equivalent.</p>\n\n<p>The <a href="http://en.wikipedia.org/wiki/Independent_set_%28graph_theory%29" rel="nofollow">Independent Set</a> search problem is: given a graph $G(V,E)$ and an integer $n$, find $n$ vertices no two of which are adjacent.</p>\n\n<p>The <a href="http://en.wikipedia.org/wiki/Set_packing" rel="nofollow">Set Packing</a> search problem is: given a finite collection $C$ of finite sets and an integer $n$, find $n$ sets that are pairwise disjoint.</p>\n\n<p>I think they are equivalent based on the following bidirectional reduction:</p>\n\n<p>&rarr;: Given an independent set problem on a graph $G(V,E)$, create a collection of $C$ of sets, where for each vertex $v \\in V$ there is a set $S_v \\in C$ containing all edges adjacent to $v$. Now, every set packing in $C$ corresponds to a set of vertices no two of which have an edge in common, i.e., this is an independent set in $G$ of the same size.</p>\n\n<p>&larr;: Given a set packing problem on a collection $C$, create a graph $G(V,E)$ where for every set $S \\in C$ there is a vertex $v_S \\in V$, and there is an edge between $v_{S_1}$ and $v_{S_2}$ iff the sets $S_1$ and $S_2$ intersect. Now, every independent vertex set in $G$ corresponds to a set of sets from $C$ no two of which intersect, i.e., this is a set packing in $C$ of the same size.</p>\n\n<p>My question is: is my reduction correct? If so, are these problem equivalent? Is it possible to use approximation algorithms for one problem on the other problem?</p>\n', 'ViewCount': '145', 'Title': 'Equivalence of independent set and set packing', 'LastActivityDate': '2013-12-08T11:18:43.767', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '18741', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<algorithms><graphs><sets><packing>', 'CreationDate': '2013-12-08T08:50:02.567', 'FavoriteCount': '1', 'Id': '18736'},25450:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<pre><code>There are n collections of M sets.\nPick a single set from each collection,\nsuch that all n picked sets are pairwise disjoint.\n</code></pre>\n\n<p>This problem can be converted to the standard <a href="http://en.wikipedia.org/wiki/Set_packing" rel="nofollow">Set Packing</a> problem in the following way: add a unique element $e_i$ to all $M$ sets in each collection $C_i$. Then find a set packing of size $n$ in the resulting collection. Each set in the returned set packing must belong to a different collection.</p>\n\n<p>So, the variant is not more difficult than the original set packing problem.</p>\n\n<p>MY QUESTION IS: is the variant easier than the original problem? In particular:</p>\n\n<ul>\n<li>Is it possible to solve the variant problem in time polynomial in $n$ (assuming $M$ is constant)?</li>\n<li>Is it possible to approximate the variant problem in a more efficient way than the approximations known for the general set packing problem (i.e. $O(\\sqrt{nM})$)?</li>\n</ul>\n', 'ViewCount': '40', 'Title': 'Set packing variant', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-12-08T11:02:12.180', 'LastEditDate': '2013-12-08T10:39:51.820', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18740', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<algorithms><np-complete><sets><packing>', 'CreationDate': '2013-12-08T09:03:16.310', 'Id': '18737'},25451:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I am having a plane in N dimension. Th distance between 2 points (a1,a2,...,aN) and (b1,b2,...,bN) is max{|a1-b1|, |a2-b2|, ..., |aN-bN|}.</p>\n\n<p>I need to to know how many K-sets exist(here K-set refers to set of points whose distance between 2 points of set is K).But as there can be infinite number of these K-sets. Thus, we would only like to count the number of classes of K-sets, such that any two K-sets which belong to the same class are equivalent if they follow given conditions.Two K-sets X and Y are considered equivalent (and belong to the same class) if:</p>\n\n<pre><code>They contain the same number of points \nThere exists N integer numbers (t1, ..., tN) such that by translating each point of X  \n by the amount ti in dimension i (1\u2264i\u2264N) we obtain the set of points Y.\n</code></pre>\n\n<p>Let's consider N=2, K=4 and the following sets of points X={(1,2), (5,5), (4,3)} and Y={(2,5), (5,6), (6,8)}. Let's consider now the tuple (1,3). By translating each point of X by the amounts specified by this tuple we obtain the set {(2,5), (6,8), (5,6)}, which is exactly the set Y. Thus, the two sets X and Y are equivalent and belong to the same class.</p>\n\n<p>Example let say N=2 and K=1 .</p>\n\n<p>There are 9 classes of K-sets. One K-set from each class is given below:</p>\n\n<pre><code>{(0,0), (0,1)}\n{(0,0), (1,0)}\n{(0,0), (1,1)}\n{(0,1), (1,0)}\n{(0,0), (0,1), (1,0)}\n{(0,0), (0,1), (1,1)}\n{(0,0), (1,0), (1,1)}\n{(0,1), (1,0), (1,1)}\n{(0,0), (0,1), (1,0), (1,1)}\n</code></pre>\n\n<p>So answer here will be 9.</p>\n", 'ViewCount': '76', 'ClosedDate': '2014-02-12T09:15:23.047', 'Title': 'Number of K-sets', 'LastActivityDate': '2014-02-12T08:29:00.027', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12759', 'Tags': '<algorithms><computational-geometry><sets><number-theory>', 'CreationDate': '2014-01-11T15:36:25.203', 'Id': '19656'},25452:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to write an algorithm that detects the most common subset of at least size $k$, from a collection of sets.  If there are ties for the most common subset, I want the one of them whose size is as large as possible.</p>\n\n<p>For example if I have:</p>\n\n<pre><code>s1 = {A, B, C   }\ns2 = {A, B, C, D}\ns3 = {   B, C, D}\n</code></pre>\n\n<p>Then the most common subset of size $\\ge k=2$ is {B, C}. As another example, if I have:</p>\n\n<pre><code>s1 = {A, B, C  D}\ns2 = {A, B, C, D}\ns3 = {   B, C, D}\n</code></pre>\n\n<p>Then the most common subset of size $\\ge k=2$ is {B, C, D}. It's important that in this instance the algorithm would give me {B, C, D} and not {B, C}, {B, D} etc. Note that I'm not interested in the longest common subset (a different problem), I'm interested in the longest most common subset if you will. I also don't care about enumerating all the different subsets, I just want to find the most common.</p>\n\n<p>Is there an efficient algorithm for this problem?</p>\n\n<p>I have an algorithm for this problem, but I don't think it's very efficient. For $k=2$ I enumerate all subsets of size 2 and count how many times each one appears in the collection. If the most-frequently occurring pair is more frequently occurring than any other pair then that must be the most common subset. If there is more than one with the same (maximum) frequency then I look at the sets they are contained in. If these overlap exactly then I take the union of the pairs and that gives me the most common subset (with size > 2).</p>\n\n<p>I think this could be related to the maximum clique problem but I'm not certain.</p>\n\n<p>Note that just taking the intersection does not give the correct answer.  For instance, if I have</p>\n\n<pre><code>s1 = {A, B      }\ns2 = {      C, D}\ns3 = {A,    C, D}\n</code></pre>\n\n<p>then the intersection is the empty set, but the most common subset is {C, D}.</p>\n", 'ViewCount': '69', 'Title': 'Most common subset of size $k$', 'LastEditorUserId': '755', 'LastActivityDate': '2014-01-16T22:42:41.270', 'LastEditDate': '2014-01-16T22:42:41.270', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19762', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '12876', 'Tags': '<algorithms><graphs><sets><data-mining>', 'CreationDate': '2014-01-15T21:58:59.930', 'Id': '19755'},25453:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have to prove or disprove the implications in these two situations</p>\n\n<ol>\n<li>$L^* = \\emptyset$ $\\rightarrow$ $L$ is infinite</li>\n<li>$L^+ = \\emptyset$ $\\rightarrow$ $L$ is infinite</li>\n</ol>\n\n<p>Here are my thoughts.</p>\n\n<ol>\n<li><p>I would say Kleene star operation (*) is union of </p>\n\n<p>$\\qquad L^0 \\cup L^1 \\cup L^2 \\cup \\dots$</p>\n\n<p>and since $\\_^0 = \\{\\epsilon\\}$ (even $\\emptyset^ 0 = \\{\\epsilon\\}$), there is no language $L$ such that $L^* = \\emptyset$. </p>\n\n<p>How to prove finiteness/infiniteness?</p></li>\n<li><p>Only language $L$ where $L^+ = \\emptyset$ is $\\emptyset$ which is a finite language. But how to prove there is no other language that is inifinite and the argument is valid for it?</p></li>\n</ol>\n\n<hr>\n\n<p>EDIT: will it help if I rewrite the implications $A \\rightarrow B$ to $\\neg B \\rightarrow \\neg A$ ?</p>\n\n<ol>\n<li>$L$ is finite $\\rightarrow$ $L^* \\neq \\emptyset$</li>\n<li>$L$ is finite $\\rightarrow$ $L^+ \\neq \\emptyset$</li>\n</ol>\n\n<p>2) can be now interpreted as $\\emptyset^+ = \\{\\epsilon\\}$ and $\\emptyset$ is a finite language. So the implication doesn't work.</p>\n", 'ViewCount': '93', 'Title': 'If $L^*$ or $L^+$ is empty, can L be an infinite language?', 'LastEditorUserId': '6689', 'LastActivityDate': '2014-01-20T07:40:08.050', 'LastEditDate': '2014-01-18T23:14:53.983', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12947', 'Tags': '<formal-languages><finite-sets>', 'CreationDate': '2014-01-18T18:48:12.320', 'Id': '19812'},25454:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>I am looking for implementation of the set data type. That is, we have to</p>\n\n<ul>\n<li>maintain a dynamic subset $S$ (of size $n$) from the universe $U = \\{0, 1, 2, 3, \\dots , u \u2013 1\\}$ of size $u$ with</li>\n<li>operations <code>insert(x)</code> (add an element <code>x</code> to $S$) and <code>find(x)</code> (checks whether element <code>x</code> is a member of $S$).</li>\n</ul>\n\n<p>I don't care about other operations. For orientation, in applications I'm working with we have $u \\approx 10^{10}$.</p>\n\n<p>I know of implementations that provide both operations in time $O(1)$, so I worry mostly about the size of data structure. I expect <em>billions</em> of entries but want to avoid swapping as much as possible.</p>\n\n<p>I am willing to sacrifice runtime if necessary. Amortised runtime of $O(\\log n)$ is what I can admit; expected runtimes or runtimes in $\\omega(\\log n)$ are not admissable.</p>\n\n<p>One idea I have is that if $S$ can be represented as a union of ranges <code>[xmin, xmax]</code>, then we will be able to save on storage size with the price of some performance decrease. Also, some other data patterns are possible, like <code>[0, 2, 4, 6]</code>.</p>\n\n<p>Could you please point me to data structures which can do something like that?</p>\n", 'ViewCount': '155', 'Title': 'Looking for a set implementation with small memory footprint', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-03T09:34:06.393', 'LastEditDate': '2014-01-31T08:03:57.357', 'AnswerCount': '2', 'CommentCount': '11', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '11850', 'Tags': '<data-structures><efficiency><space-complexity><sets><dictionaries>', 'CreationDate': '2014-01-29T16:42:55.737', 'Id': '20070'},25455:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm curious if there is a name for this way of ordering finite sets of natural numbers (shown here for the case 3 elements, but can be extended to any number of them):</p>\n\n<pre><code>{0, 1, 2} &lt; {0, 1, 3}\n          &lt; {0, 2, 3}\n          &lt; {1, 2, 3}\n          &lt; {0, 1, 4}\n          &lt; {0, 2, 4}\n          &lt; {1, 2, 4}\n          &lt; {0, 3, 4}\n          &lt; {1, 3, 4}\n          &lt; {2, 3, 4}\n          &lt; {0, 1, 5}\n          &lt; ...\n</code></pre>\n\n<p>The sets are generated recursively: increase the highest number and reset all the other elements to the lowest possible numbers, then apply this algorithm recursively to the remaining numbers.</p>\n\n<p>The position within this ordering is given by:</p>\n\n<pre><code>C(x[1], 1) + C(x[2], 2) + C(x[3], 3) + ...\n</code></pre>\n\n<p>where <code>x[i]</code> is the <code>i</code>-th element in the <em>sorted</em> set and <code>C(n, k)</code> is the binomial coefficient.</p>\n\n<p>Does anyone know of a name for this kind of total ordering?  Furthermore, what other common ways are there to order sets containing a fixed number of totally ordered elements?</p>\n", 'ViewCount': '28', 'Title': 'Total ordering of sets of fixed size', 'LastEditorUserId': '14625', 'LastActivityDate': '2014-02-13T11:31:24.640', 'LastEditDate': '2014-02-13T01:52:42.027', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '21597', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14625', 'Tags': '<combinatorics><sets><order-theory>', 'CreationDate': '2014-02-13T01:45:22.763', 'Id': '21583'},25456:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '130', 'Title': 'Asymptotic lower bound on the number of comparisons needed to find the intersection of unsorted arrays', 'LastEditDate': '2014-02-17T18:28:17.103', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14740', 'FavoriteCount': '1', 'Body': u"<p>A homework problem in my current CS class asks us to produce a <em>comparison-based</em> procedure for taking (essentially\u2014there are some poorly-specified rules about duplicates) the set intersection of $k$ unsorted arrays of at most $n$ elements each. For full credit, we are supposed to do this in $O((k-1)n)$ comparisons. (Specifically, we are given a Java array of arrays of Comparable elements.)</p>\n\n<p>I'm pretty thoroughly convinced that this is impossible, and that the best worst-case comparison bound for such a procedure is $\\Theta(N\\log n_0)$, where $N$ is the sum of the lengths of the arrays and $n_0$ is the length of the shortest array. I don't, however, know how to <em>prove</em> this is the best.</p>\n\n<p>Since producing such an algorithm is current homework, please adhere to the following restriction in your answers/comments: if I am <em>wrong</em>, and it <em>is</em> possible to do better, do not reveal the algorithm unless it is very difficult (in which case a link to a relevant paper would be appreciated).</p>\n\n<h3>What I've tried so far</h3>\n\n<p>The shortest array has $2^{n_0}$ subsets. This gives an immediate information-theoretic lower bound of $\\Omega(\\log_2(2^{n_0}))$. Unfortunately, this is just $\\Omega(n_0)$, and $O(n_0)$ obviously can't be obtained.</p>\n\n<h3>Edit</h3>\n\n<p>I missed a line in the (rather long) assignment. It looks like what he's looking for is actually a lot less interesting than what I thought he wanted. However, I'm still curious about how to prove a lower bound of $\\Omega(N \\log n_0)$, if that is the lower bound.</p>\n", 'Tags': '<algorithms><complexity-theory><sets>', 'LastEditorUserId': '14740', 'LastActivityDate': '2014-02-17T18:28:17.103', 'CommentCount': '16', 'AcceptedAnswerId': '21717', 'CreationDate': '2014-02-17T03:29:15.263', 'Id': '21714'},25457:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Lets say you have a data model that consists of a 2D grid of integer points. This grid is sparsely populated and boundless in x and y (up to the max of a 32-bit integer).</p>\n\n<p>What is the best way to index these points in order to have an optimised lookup on an arbitrary (x,y) coordinate? Is an O(1) lookup solution possible?</p>\n', 'ViewCount': '105', 'Title': 'What is the best way to index lookups on a 2D array of integers that is boundless in x and y?', 'LastActivityDate': '2014-03-11T19:28:28.083', 'AnswerCount': '5', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15254', 'Tags': '<algorithms><optimization><databases><data-sets>', 'CreationDate': '2014-03-04T02:39:54.287', 'Id': '22251'},25458:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>To clarify, in haskell, there is an <code>ord</code> function that gives the byte integer of a character (i.e. <code>ord \'a\'</code> yields <code>97</code>); and there is a <code>char</code> function that takes the byte integer of a character and returns the character (i.e. <code>char 97</code> yelds <code>\'a\'</code>.</p>\n\n<p>What is the name of a collection of such functions? I\'m not very mathematically literate (I\'m working on it), but I found <a href="http://en.wikipedia.org/wiki/Semiring" rel="nofollow">semirings on wikipedia</a>. Do semirings provide an appropriate description?</p>\n', 'ViewCount': '17', 'Title': 'What is the name two mutually idempotent functions?', 'LastActivityDate': '2014-03-08T05:33:49.823', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22390', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11027', 'Tags': '<sets>', 'CreationDate': '2014-03-08T04:22:59.703', 'Id': '22387'},25459:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am doing a project in order to recognize an apple. (I am using Emgucv with Visual Studio 2010 C#, if that's relevant). My project is a classification (is or is not an apple). I have 2000 images of apples but I need images for the second class. </p>\n\n<p>I have read about classification using ANN but they have multiple classes but I need to recognize if image contain an apple or not. So what kind of images do I need for the second classes? I want to use background of apples like second class. Is that a good idea?</p>\n\n<p>I only want that ANN recognize if a image contain a pen or not so I have 2 classes(pen and non-pen) My question is What kind of image can I use to the second class? For example My first class are images of pen and second class are images of non pen (pencil, apples, grapes, tables); is that correct?</p>\n", 'ViewCount': '54', 'ClosedDate': '2014-04-29T23:35:57.197', 'Title': 'What are good counter-examples when training an apple classifier?', 'LastEditorUserId': '39', 'LastActivityDate': '2014-04-05T11:35:16.640', 'LastEditDate': '2014-04-05T11:35:16.640', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16399', 'Tags': '<machine-learning><neural-networks><data-sets>', 'CreationDate': '2014-04-02T23:33:24.867', 'Id': '23374'},25460:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem that I encountered that boils down to the following:</p>\n\n<p>Considered this directed graph I found on Google: <img src="http://i.stack.imgur.com/BTt0Z.png" alt="enter image description here"></p>\n\n<p>I have the following information available to me</p>\n\n<pre><code>Node: Ancestors\n\n1 : 3\n2 : 1 3 5 7\n3 : Null\n4 : 3 5\n5 : 3\n6 : 1 2 3 4 5 7 \n7 : 1 3\n8 : 1 2 3 4 5 6 7\n</code></pre>\n\n<p>How can I re-construct the original graph in a reasonably efficient manner? I basically have large sets of data that I would like to have visualized as branches and merges(similar to a code repository, but not quite).</p>\n\n<p>Note: While I believe my data shouldn\'t be disjoint, I\'m somewhat certain my data is incomplete and will produce disjoint graphs, or at the very least have many separate "roots". There is no ordering to the data, everything must be considered random, the lists can also be thought of as sets. </p>\n', 'ViewCount': '39', 'Title': 'Reconstruct directed graph from list of ancestors for each node', 'LastEditorUserId': '16433', 'LastActivityDate': '2014-04-04T13:27:17.890', 'LastEditDate': '2014-04-04T02:55:04.440', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16433', 'Tags': '<algorithms><graph-theory><graphs><sets>', 'CreationDate': '2014-04-04T02:30:23.000', 'Id': '23408'},25461:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am coding a procedure that takes an integer $d$, and generates $d$ finite lists $X_1 \\ldots, X_d$ of elements. I would then like for it to output a list of the elements in the product set $X_1 \\times \\cdots \\times X_d$. </p>\n\n<p>I can't use nested for-loops because $d$ can vary so I wouldn't know how many to nest. I'm sure there's a totally standard solution to this problem, but I don't know enough to search for it successfully either here on online.</p>\n\n<p>For what it's worth, here's one dumb solution I came up with. Let $b$ be the maximum cardinality of the sets $X_i$. Then run a single loop for $n$ running from $0$ to $b^d$; for each $n$, write it in base $b$ and use the $i^{\\rm th}$ digit to read off the element of $X_i$ corresponding to that digit (and ignore if any of those digits are too big for the cardinality of the corresponding set). This will work, but feels like a pretty stupid solution. </p>\n\n<p>What's the standard way of doing this? </p>\n", 'ViewCount': '79', 'Title': 'How to enumerate a product set?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T22:42:28.783', 'LastEditDate': '2014-04-09T21:28:51.973', 'AnswerCount': '3', 'CommentCount': '5', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16561', 'Tags': '<algorithms><combinatorics><sets>', 'CreationDate': '2014-04-08T17:45:31.770', 'Id': '23556'},25462:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I don't know the proper mathematical expression for for-loops, especially those that carry two distinctly behaving variables with each iteration.</p>\n\n<p>For example, assuming <code>n</code> is previously defined and holds some positive integer, how I would I represent the set printed by this for-loop in mathematical notation?</p>\n\n<pre><code>// prints a set of multiples (n previously defined)\nfor (int j=n, k=n; k&gt;=0; j++, k--) {\n  cout &lt;&lt; (n-j)*(n-k) &lt;&lt; endl;\n}\n</code></pre>\n\n<p>Forgive my crudeness, but I'm thinking <em>something</em> along the lines of:</p>\n\n<p>$\\left \\{ \\left ( n-j \\right ) \\cdot \\left ( n-k \\right )\\forall j \\left \\{ n, n+1, ..., 2n \\right \\}  \\forall k  \\left \\{ n, n-1, ..., 0 \\right \\}\\right \\}$</p>\n\n<p>I'm lost. Should I even be using $\\forall$ in this context? Any guidance is greatly appreciated!</p>\n", 'ViewCount': '46', 'Title': 'How do I mathematically express a set generated using two loop variables within a single for loop?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-10T07:54:27.533', 'LastEditDate': '2014-04-10T07:35:34.527', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '23626', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16607', 'Tags': '<terminology><discrete-mathematics><sets>', 'CreationDate': '2014-04-10T00:36:45.333', 'Id': '23615'},25463:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Theorem states </p>\n\n<blockquote>\n  <p>Let $\\phi$ be a sentence of predicate logic such that for any natural\n  number $n \\geq 1$, there is a model of $\\phi$ with at least $n$\n  elements. Then $\\phi$ has a model with infinitely many elements.</p>\n</blockquote>\n\n<p>IMO, it basically states that if you can always name a number larger than mine arbitrary natural number then your model is infinite. What needs to be proven here? There are no other options obviously for any school kid.</p>\n', 'ViewCount': '56', 'Title': u'What is the point of L\xf6wenheim\u2013Skolem theorem?', 'LastEditorUserId': '2879', 'LastActivityDate': '2014-04-21T14:55:15.240', 'LastEditDate': '2014-04-21T14:06:20.263', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2879', 'Tags': '<sets><first-order-logic>', 'CreationDate': '2014-04-21T10:07:40.160', 'Id': '23980'},25464:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I came across this notation and I don't know the meaning of it, or if it's a typo:  $\\{$ some set $\\}^{+}$</p>\n\n<p>What does the + mean, i.e., the plus operator applied to a set?</p>\n", 'ViewCount': '75', 'Title': 'What does $\\{$ a set $\\}^{+}$ mean in the context of languages?', 'LastEditorUserId': '755', 'LastActivityDate': '2014-04-25T15:37:18.733', 'LastEditDate': '2014-04-25T15:37:18.733', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '24095', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '16480', 'Tags': '<formal-languages><terminology><regular-languages><sets>', 'CreationDate': '2014-04-25T05:27:11.613', 'Id': '24094'},25465:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a set of nodes S where all the nodes of an arbitrary integer value.  I Also have a set of pairs of nodes from S, indicating that those node cannot be in the same subset.  Given a subset of S, how can I determine the largest possible Sum of that subset taking into account the exclusion pairs.</p>\n\n<p>Example:</p>\n\n<p>S = (x1:50, x2:20, x3:30, x4:15, x5:70)</p>\n\n<p>Exclusion = {(x1,x2), (x4,x5), (x2,x4)}</p>\n\n<p>Starting set = (x1,x2,x4,x5)</p>\n\n<p>Best Possible Sum = (x1,x5)</p>\n', 'ViewCount': '38', 'Title': 'Maximizing the Sum of a Subset with Excluding pairs', 'LastActivityDate': '2014-04-25T14:23:58.780', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24105', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '17076', 'Tags': '<graph-theory><sets>', 'CreationDate': '2014-04-25T14:05:57.740', 'Id': '24103'},25466:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I would like to know if this type of special set operator exists, and if yes what is it called and if it has any other special properties. </p>\n\n<p>Lets say I have this set $S$ of items. Like all sets, if the same item is added twice in the set, the set will not add it again. However, when adding an item, using this special operator, it also checks if it is 'better' than another item already in the set, and if yes it replaces it with the new item rather than letting both.</p>\n\n<p>For a more concrete example:</p>\n\n<p>$S_1 = \\{apple, orange, pear\\}$</p>\n\n<p>$S_2 = \\{betterApple, orange, banana\\}$</p>\n\n<p>$S = S_1 \\cup_\\succ S_2 = \\{betterApple, orange, pear, banana\\} $</p>\n\n<p>So in this case $\\cup_\\succ$ checked some relationship, lets say $\\succ$ where $betterApple \\succ apple$, and if such a relationship existed it dropped $apple$ rather than allowing both in the set, keeping the <em>stronger</em> one in the set.</p>\n", 'ViewCount': '23', 'Title': 'Set that keeps unique categories of objects', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-30T18:12:34.367', 'LastEditDate': '2014-04-30T17:39:57.390', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17222', 'Tags': '<data-structures><sets>', 'CreationDate': '2014-04-30T16:28:42.960', 'Id': '24262'}