{'Body': "<p>What are efficient and accurate techniques for monitoring the recoverability and integrity of files in very large preservation archives?</p>\n\n<p>In very large archives, the time taken to recompute checksums periodically (scrubbing) is substantial, perhaps taking more than all the available time depending on the read bandwidth available! Also, each access to a preserved file increases the risk of damage due to hardware or software failure. Tapes are most stable in a cold, dark place far from exposure to the hazards of data centers. Disks are most at risk when the read/write head is flying close to the medium. All approaches are probabilistic, so which are most efficient and accurate?</p>\n\n<p>To give the problem specificity, let's assume a fixed probability of local single-bit errors for each medium (one probability for tape, another for disk, SSD, etc) during a standard time period, and ignore all other types of errors (loss of an entire volume, for instance). We can also assume a fixed read bandwidth for each medium.</p>\n", 'ViewCount': '78', 'Title': 'Monitoring files in preservation archives', 'LastEditorUserId': '1038', 'LastActivityDate': '2012-05-27T07:38:35.820', 'LastEditDate': '2012-04-25T20:23:31.977', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1038', 'Tags': '<filesystems><integrity><digital-preservation>', 'CreationDate': '2012-04-24T22:43:36.573', 'Id': '1490''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>What are the complete specifications that must be documented in order to ensure the correct execution of a particular program written in Java? For instance, if one were archiving a program for long-term preservation, and no testing or porting would be done.</p>\n\n<p>I need to be able to compile and execute the Java program. Thus preserving the byte code or capturing the whole thing as a VMware image are excluded. The JVM could be saved as a VMware image though, and compiled libraries that are linked to the compiled code are OK, too. However, if there are dependencies on the OS, the architecture of the machine executing the JVM, the networking environment, external libraries, specification of the Java version used, etc. etc. these must all be listed. Some tech leaders in Dig Pres claim that any program written in Java will be executable "forever". How to do it?</p>\n', 'ViewCount': '109', 'Title': 'Requirements for emulation', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-25T19:41:39.720', 'LastEditDate': '2012-04-25T18:54:50.717', 'AnswerCount': '1', 'CommentCount': '9', 'AcceptedAnswerId': '1506', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1038', 'Tags': '<operating-systems><computer-architecture><digital-preservation>', 'CreationDate': '2012-04-25T01:36:43.243', 'Id': '1493''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '201', 'Title': 'Is it possible to create a "Time Capsule" using encryption?', 'LastEditDate': '2012-04-26T22:25:21.077', 'AnswerCount': '3', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1038', 'FavoriteCount': '1', 'Body': '<p>I want to create a digital time capsule which will remain unreadable for some period of time and then become readable. I do not want to rely on any outside service to, for instance, keep the key secret and then reveal it at the required time. Is this possible? If not, is some kind of proof possible that it is not?</p>\n\n<p>One strategy would be based on projections of future computing capabilities, but that is unreliable and makes assumptions about how many resources would be applied to the task.</p>\n', 'Tags': '<cryptography><encryption><digital-preservation>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-12T05:46:21.313', 'CommentCount': '1', 'AcceptedAnswerId': '1518', 'CreationDate': '2012-04-26T13:37:39.000', 'Id': '1514''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>My organization wants to maintain multiple copies of data in order to preserve access in the case of localized disasters as well as for the purpose of long term preservation. Are there accepted formal models for determining the appropriate variety of media (eg tape, disk) and their placement in the network? Are currently operating distributed solutions (eg LOCKSS) viable long term solutions for large collections of data?</p>\n', 'ViewCount': '51', 'Title': 'Distributed Storage for Access and Preservation', 'LastEditorUserId': '1038', 'LastActivityDate': '2012-05-01T01:46:07.983', 'LastEditDate': '2012-05-01T01:46:07.983', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '1038', 'Tags': '<digital-preservation><distributed-systems><storage>', 'CreationDate': '2012-04-30T23:20:10.173', 'Id': '1602''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>My task is to design a FSM whose output goes high for a single cycle whenever the pattern 0110 is detected on its input. The patterns may overlap, so an input 0110110 of would cause the output to go high twice- once for the first pattern (0110110), and once for the second pattern (0110110). a is used for the input and f is used for the output.</p>\n\n<p>I am assuming I will need five state bubbles <a href="http://i.stack.imgur.com/ghKNq.png" rel="nofollow">like this.</a></p>\n\n<p>Is this correct or am I missing some cases based on the pattern going high twice if the pattern overlaps?</p>\n', 'ViewCount': '164', 'Title': 'How to design a finite state machine to detect 0110 in the input?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-07-25T18:18:36.643', 'LastEditDate': '2013-07-25T18:18:36.643', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9332', 'Tags': '<finite-automata><digital-preservation>', 'CreationDate': '2013-07-25T01:30:33.483', 'Id': '13425''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}