1150:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Write $\\bar n$ for the decimal expansion of $n$ (with no leading <code>0</code>). Let $a$ and $b$ be integers, with $a &gt; 0$. Consider the language of multiples of $a$ plus a constant:</p>\n\n<p>$$M = \\{ \\overline{a\\,x+b} \\mid x\\in\\mathbb{N} \\}$$</p>\n\n<p>Is $M$ regular? context-free?</p>\n\n<p>(Contrast with <a href="http://cs.stackexchange.com/questions/641/language-of-the-graph-of-an-affine-function">Language of the graph of an affine function</a>)</p>\n\n<p><sub> I think this would make a good homework question, so answers that start with a hint or two and explain not just how to solve the question but also how to decide what techniques to use would be appreciated. </sub></p>\n', 'ViewCount': '522', 'Title': 'Language of the values of an affine function', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-20T16:01:38.250', 'LastEditDate': '2012-03-22T09:26:48.400', 'AnswerCount': '5', 'CommentCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<formal-languages><context-free><regular-languages><integers>', 'CreationDate': '2012-03-22T01:54:55.207', 'FavoriteCount': '1', 'Id': '640'},1151:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Write $\\bar n$ for the decimal expansion of $n$ (with no leading <code>0</code>). Let <code>:</code> be a symbol distinct from any digit. Let $a$ and $b$ be integers, with $a &gt; 0$. Consider the language of solutions of the Diophantine equation $y=ax+b$:</p>\n\n<p>$$L = \\{ \\bar{x} \\mathtt: \\bar{y} \\mid y = a\\,x + b \\}$$</p>\n\n<p>Is $L$ regular? context-free?</p>\n\n<p>(Contrast with <a href="http://cs.stackexchange.com/questions/640/language-of-the-multiples-of-an-integer">Language of the values of an affine function</a>)</p>\n\n<p><sub>(Follows on <a href="http://cs.stackexchange.com/questions/618/how-can-solutions-of-a-diophantine-equation-be-expressed-as-a-language">How can solutions of a Diophantine equation be expressed as a language?</a>)</sub></p>\n\n<p><sub> I think this would make a good homework question, so answers that start with a hint or two and explain not just how to solve the question but also how to decide what techniques to use would be appreciated. </sub></p>\n', 'ViewCount': '158', 'Title': 'Language of the graph of an affine function', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-22T19:27:05.530', 'LastEditDate': '2012-03-22T15:52:06.720', 'AnswerCount': '3', 'CommentCount': '7', 'AcceptedAnswerId': '667', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<formal-languages><regular-languages><context-free><integers>', 'CreationDate': '2012-03-22T01:55:17.983', 'Id': '641'},1152:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '172', 'Title': 'Overflow safe summation', 'LastEditDate': '2012-04-23T22:15:35.557', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '139', 'FavoriteCount': '1', 'Body': '<p>Suppose I am given $n$ fixed width integers (i.e. they fit in a register of width $w$), $a_1, a_2, \\dots a_n$ such that their sum $a_1 + a_2 + \\dots + a_n = S$ also fits in a register of width $w$.</p>\n\n<p>It seems to me that we can always permute the numbers to $b_1, b_2, \\dots b_n$ such that each prefix sum $S_i = b_1 + b_2 + \\dots + b_i$ also fits in a register of width $w$.</p>\n\n<p>Basically, the motivation is to compute the sum $S = S_n$ on fixed width register machines without having to worry about integer overflows at any intermediate stage.</p>\n\n<p>Is there a fast (preferably linear time) algorithm to find such a permutation (assuming the $a_i$ are given as an input array)? (or say if such a permutation does not exist).</p>\n', 'Tags': '<algorithms><arrays><integers><numerical-analysis>', 'LastEditorUserId': '139', 'LastActivityDate': '2012-04-23T22:15:35.557', 'CommentCount': '5', 'AcceptedAnswerId': '1425', 'CreationDate': '2012-04-21T23:39:36.593', 'Id': '1424'},1153:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>Suppose I am given an array of $n$ fixed width integers (i.e. they fit in a register of width $w$), $a_1, a_2, \\dots a_n$. I want to compute the sum $S = a_1 + \\ldots + a_n$ on a machine with 2\'s complement arithmetic, which performs additions modulo $2^w$ with wraparound semantics. That\'s easy \u2014 but the sum may overflow the register size, and if it does, the result will be wrong.</p>\n\n<p>If the sum doesn\'t overflow, I want to compute it, and to verify that there is no overflow, as fast as possible. If the sum overflows, I only want to know that it does, I don\'t care about any value.</p>\n\n<p>Naively adding numbers in order doesn\'t work, because a partial sum may overflow. For example, with 8-bit registers, $(120, 120, -115)$ is valid and has a sum of $125$, even though the partial sum $120+120$ overflows the register range $[-128,127]$.</p>\n\n<p>Obviously I could use a bigger register as an accumulator, but let\'s assume the interesting case where I\'m already using the biggest possible register size.</p>\n\n<p>There is a well-known technique to <a href="http://cs.stackexchange.com/a/1425">add numbers with the opposite sign as the current partial sum</a>. This technique avoids overflows at every step, at the cost of not being cache-friendly and not taking much advantage of branch prediction and speculative execution.</p>\n\n<p>Is there a faster technique that perhaps takes advantage of the permission to overflow partial sums, and is faster on a typical machine with an overflow flag, a cache, a branch predictor and speculative execution and loads?</p>\n\n<p>(This is a follow-up to <a href="http://cs.stackexchange.com/questions/1424/overflow-safe-summation">Overflow safe summation</a>)</p>\n', 'ViewCount': '203', 'Title': 'Detecting overflow in summation', 'LastEditorUserId': '39', 'LastActivityDate': '2014-01-31T16:51:25.577', 'LastEditDate': '2012-04-22T15:03:49.187', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<algorithms><arrays><integers><numerical-analysis>', 'CreationDate': '2012-04-22T01:16:19.560', 'FavoriteCount': '1', 'Id': '1426'},1154:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Do you know any algorithm that calculates the factorial after modulus efficiently?</p>\n\n<p>For example, I want to program:</p>\n\n<pre><code>for(i=0; i&lt;5; i++)\n  sum += factorial(p-i) % p;\n</code></pre>\n\n<p>But, <code>p</code> is a big number (prime) for applying factorial directly $(p \\leq 10^ 8)$.</p>\n\n<p>In Python, this task is really easy, but i really want to know how to optimize.</p>\n', 'ViewCount': '2032', 'Title': 'What is the most efficient way to compute factorials modulo a prime?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-05-15T22:02:22.787', 'LastEditDate': '2012-10-06T22:43:33.660', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '1152', 'Tags': '<algorithms><efficiency><integers>', 'CreationDate': '2012-04-25T03:24:45.137', 'FavoriteCount': '6', 'Id': '1495'},1155:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '148', 'Title': 'From FACTOR To KNAPSACK', 'LastEditDate': '2012-05-14T15:16:37.660', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '956', 'FavoriteCount': '1', 'Body': '<ol>\n<li><p>If there were an algorithm that factored in polynomial time by means of examining each possible factor of a complex number efficiently, could one not also use this algorithm to solve unbounded knapsack problems since two factors can be viewed as one value, say within the set for the knapsack problem, and the other being the number of copies of the first factor?</p>\n\n<p>FACTOR 15; 3, 5</p>\n\n<p>Unbounded KNAPSACK with value of 15 and the set of all integers; {5,5,5} andor {3,3,3,3,3}</p></li>\n<li><p>Would this mean FACTOR was NP-Complete?</p></li>\n<li><p>Would solving unbounded knapsack problems in polynomial time in this way prove P=NP?</p></li>\n</ol>\n', 'Tags': '<complexity-theory><np-complete><integers><knapsack-problems>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-14T15:31:43.257', 'CommentCount': '0', 'AcceptedAnswerId': '1808', 'CreationDate': '2012-05-12T09:26:26.863', 'Id': '1801'},1156:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '597', 'Title': 'Determine missing number in data stream', 'LastEditDate': '2012-05-26T03:55:57.317', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '1402', 'FavoriteCount': '2', 'Body': '<p>We receive a stream of $n-1$ pairwise different numbers from the set $\\left\\{1,\\dots,n\\right\\}$.</p>\n\n<p>How can I determine the missing number with an algorithm that reads the stream once and uses a memory of only $O(\\log_2 n)$ bits?</p>\n', 'Tags': '<algorithms><integers><online-algorithms>', 'LastEditorUserId': '157', 'LastActivityDate': '2012-05-28T17:15:07.057', 'CommentCount': '4', 'AcceptedAnswerId': '2090', 'CreationDate': '2012-05-25T17:40:04.097', 'Id': '2079'},1157:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '953', 'Title': 'Representing Negative and Complex Numbers Using Lambda Calculus', 'LastEditDate': '2013-09-19T18:19:18.270', 'AnswerCount': '2', 'Score': '7', 'OwnerDisplayName': 'zcaudate', 'PostTypeId': '1', 'OwnerUserId': '1800', 'FavoriteCount': '1', 'Body': '<p>Most tutorials on Lambda Calculus provide example where Positive Integers and Booleans can be represented by Functions. What about -1 and i?</p>\n', 'Tags': '<data-structures><lambda-calculus><integers><real-numbers>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-19T18:19:18.270', 'CommentCount': '0', 'AcceptedAnswerId': '2279', 'CreationDate': '2012-06-08T03:25:50.233', 'Id': '2272'},1158:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $\\oplus$ be bitwise xor. Let $k,a,b$ be non-negative integers. $[a..b]=\\{x\\mid a\\leq x, x\\leq b\\}$, it is called a integer interval.</p>\n\n<p>What is a fast algorithm to find \n$\\{ k\\oplus x\\mid x\\in [a..b]\\}$ as a union of set of integer intervals.</p>\n\n<p>One can prove that $[a+k..b-k]\\subseteq \\{ k\\oplus x\\mid x\\in [a..b]\\}$ by showing that $x-y\\leq x\\oplus y \\leq x+y$.</p>\n\n<p><strong>Edit:</strong> I should specify the actually input and output to remove ambiguity.</p>\n\n<p>Input: $k, a, b$.</p>\n\n<p>Output: $a_1, b_1, a_2, b_2,\\ldots,a_m,b_m$. Such that:</p>\n\n<p>$$\n\\{ k\\oplus x\\mid x\\in [a..b]\\} = \\bigcup_{i=1}^m [a_i..b_i]\n$$</p>\n', 'ViewCount': '412', 'Title': 'What is the bitwise xor of an interval?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-06-25T09:12:09.557', 'LastEditDate': '2012-06-24T22:46:43.727', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '2473', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<algorithms><integers>', 'CreationDate': '2012-06-24T16:39:36.453', 'Id': '2471'},1159:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '961', 'Title': 'Most efficient algorithm to print 1-100 using a given random number generator', 'LastEditDate': '2012-07-02T19:46:10.570', 'AnswerCount': '4', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2042', 'FavoriteCount': '4', 'Body': u'<p>We are given a random number generator <code>RandNum50</code> which generates a random integer uniformly in the range 1\u201350.\nWe may use only this random number generator to generate and print all integers from 1 to 100 in a random order. Every number must come exactly once, and the probability of any number occurring at any place must be equal.</p>\n\n<p>What is the most efficient algorithm for this?</p>\n', 'Tags': '<algorithms><integers><randomness><random-number-generator>', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-24T20:32:31.727', 'CommentCount': '6', 'AcceptedAnswerId': '2578', 'CreationDate': '2012-07-02T05:57:26.373', 'Id': '2576'},11510:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m having a very hard time trying to figure out how to solve this problem efficiently. Let me describe how it goes:</p>\n\n<p>"A hard working mom bought several fruits with different nutritional values for her 3 kids, Amelia, Jessica and Bruno. Both girls are overweight, and they are very vicious and always leave poor Bruno with nothing, so their mother decided to share the food in the following manner:</p>\n\n<ul>\n<li><p>Amelia being the heaviest one gets the most amount of Nutritional Value.</p></li>\n<li><p>Jessica gets an amount equal or less than Amelia</p></li>\n<li><p>Bruno gets an amount equal or less than Jessica, but you need to find a way to give him the highest possible nutritional value while respecting the rule ( $A \\geq J \\geq B$ )"</p></li>\n</ul>\n\n<p>One of the test cases given by my teacher is the following:</p>\n\n<pre><code>The fruit list has the following values { 4, 2, 1, 8, 11, 5, 1\n\nInput:\n7   -----&gt; Number of Fruits\n4 2 1 8 11 5 1 ----&gt; Fruits Nutritional Values\n\nOutput:\n1 11  ----&gt;  One fruit, their nutritional values sum for Amelia\n5     ----&gt;  Position of the fruit in the list\n3 11  ----&gt;  Three fruits, their nutritional values sum for Jessica\n1 2 6 ----&gt;  Position of the fruits in the list\n3 10  ----&gt;  Three fruits, their nutritional values sum for Bruno\n3 4 7 ----&gt;  Position of the fruits in the list\n</code></pre>\n\n<p>Note: I am aware that there are several ways of diving the fruits among the kids, but it doesn\'t really matter as long as it follows the rule $A \\geq J \\geq B$.</p>\n\n<p>I\'m trying to make a program in C# that solves this kind of problems but I need an efficient formula to make this work. Generating all the subsets is out of the question because it is very consuming task. The list of fruits can have up to $50$ elements, $2^{50}$ is a huge number.</p>\n', 'ViewCount': '739', 'Title': 'Partition of a set of integer into 3 subsets of approximately equal sum', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-02T20:17:28.170', 'LastEditDate': '2012-07-02T19:42:50.433', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'OwnerDisplayName': 'Julian J. Tejera', 'PostTypeId': '1', 'Tags': '<algorithms><integers><approximation><linear-programming>', 'CreationDate': '2012-07-02T06:06:44.417', 'Id': '2580'},11511:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '337', 'Title': 'How can I find minimum number required to add to sequence such that their xor becomes zero', 'LastEditDate': '2012-07-04T08:50:11.117', 'AnswerCount': '3', 'Score': '5', 'OwnerDisplayName': 'ArG0NaUt', 'PostTypeId': '1', 'OwnerUserId': '2368', 'FavoriteCount': '1', 'Body': '<p>Given a sequence of natural numbers, you can add any natural number to any number in the sequence such that their xor becomes zero. My goal is to minimize the sum of added numbers.</p>\n\n<p>Consider the following examples :</p>\n\n<ol>\n<li><p>For $1, 3$ the answer is $2$;  adding $2$ to $1$ we get $3 \\oplus 3=0$.</p></li>\n<li><p>For $10, 4, 5, 1$ the answer is $6$;  adding $3$ to $10$ and $3$ to $8$ we get $13 \\oplus 4 \\oplus 8 \\oplus 1 = 0$.</p></li>\n<li><p>For $4, 4$ the answer is $0$, since $4 \\oplus 4 = 0$.</p></li>\n</ol>\n\n<p>I tried working on binary representations of sequence number but it got so complex. I want to know if there is any simple and efficient way to solve this problem.</p>\n', 'Tags': '<algorithms><integers><xor>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-03T08:55:47.557', 'CommentCount': '1', 'CreationDate': '2012-06-30T05:10:32.913', 'Id': '2590'},11512:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Mark lives in a tiny country populated by people who tend to over-think things. One day, the king of the country decides to redesign the country's currency to make giving change more efficient. The king wants to minimize the expected number of coins it takes to exactly pay any amount up to (but not including) the amount of the smallest paper bill.</p>\n\n<p>Suppose that the smallest unit of currency is the Coin. The smallest paper bill in the kingdom is worth $n$ Coins. The king decides that there should not be more than $m$ different coin denominations in circulation. The problem, then, is to find a $m$-set $\\{d_1, d_2, ..., d_m\\}$ of integers from $\\{1, 2, ..., n - 1\\}$ which minimizes $\\frac{1}{n-1}\\sum_{i = 1}^{n-1}{c_1(i) + c_2(i) + ... + c_m(i)}$ subject to $c_1(i)d_1 + c_2(i)d_2 + ... c_m(i)d_m = i$.</p>\n\n<p>For instance, take the standard USD and its coin denominations of $\\{1, 5, 10, 25, 50\\}$. Here, the smallest paper bill is worth 100 of the smallest coin. It takes 4 coins to make 46 cents using this currency; we have $c_1(46) = 1, c_2(46) = 0, c_3(46) = 2, c_4(46) = 1, c_5(46) = 0$. However, if we had coin denominations of $\\{1, 15, 30\\}$, it would take only 3 coins: $c_1(46) = 1, c_2(46) = 1, c_3(46) = 1$. Which of these denomination sets minimizes the average number of coins to make any sum up to and including 99 cents?</p>\n\n<p>More generally, given $n$ and $m$, how might one algorithmically determine the optimal set? Clearly, one might enumerate all viable $m$-subsets and compute the average number of coins it takes to make sums from 1 to $n - 1$, keeping track of the optimal one along the way. Since there are around $C(n - 1, m)$ $m$-subsets (not all of which are viable, but still), this would not be terribly efficient. Can you do better than that?</p>\n", 'ViewCount': '1098', 'Title': 'Algorithm to find optimal currency denominations', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-18T01:16:54.940', 'LastEditDate': '2012-07-18T01:01:59.327', 'AnswerCount': '2', 'CommentCount': '7', 'AcceptedAnswerId': '2806', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '69', 'Tags': '<algorithms><optimization><combinatorics><integers>', 'CreationDate': '2012-07-13T18:00:47.967', 'Id': '2734'},11513:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What is the complexity of computing $n^{n^2},\\;n \\in \\mathbb{N}$?</p>\n', 'ViewCount': '206', 'Title': 'Complexity of computing $n^{n^2}$', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-30T19:25:30.803', 'LastEditDate': '2012-07-28T11:10:16.207', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '8', 'OwnerDisplayName': 'Croq', 'PostTypeId': '1', 'Tags': '<complexity-theory><integers><number-theory>', 'CreationDate': '2012-07-27T19:18:38.527', 'FavoriteCount': '1', 'Id': '2933'},11514:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $M$ denote a set of $n$ positive integers, each less than $n^c$.</p>\n\n<p>What is the runtime of computing $\\prod_{m \\in M} m$ with a deterministic Turing machine?</p>\n', 'ViewCount': '74', 'Title': 'Run time of product of polynomially bounded numbers', 'LastEditorUserId': '2376', 'LastActivityDate': '2012-08-07T01:54:25.730', 'LastEditDate': '2012-08-07T01:54:25.730', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '3047', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2372', 'Tags': '<algorithms><time-complexity><integers>', 'CreationDate': '2012-08-05T02:23:25.833', 'Id': '3039'},11515:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '202', 'Title': 'How to compute linear recurrence using matrix with fraction coefficients?', 'LastEditDate': '2012-08-09T21:16:25.387', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '991', 'FavoriteCount': '1', 'Body': '<p>What I\'m trying to do is generate <a href="http://en.wikipedia.org/wiki/Motzkin_number" rel="nofollow">Motzkin numbers</a> mod a large number $10^{14} + 7$ (not prime), and it needs to compute the $n$th Motzkin number as fast as possible. From Wikipedia, the formula for the $n$th Motzkin number is defined as following:</p>\n\n<p>$\\qquad \\displaystyle \\begin{align}\n  M_{n+1} &amp;= M_n + \\sum_{i=0}^{n-1} M_iM_{n-1-i} \\\\\n          &amp;= \\frac{2n+3}{n+3}M_n + \\frac{3n}{n+3}M_{n-1}\n\\end{align}$ </p>\n\n<p>My initial approach is to use the second formula which is obviously faster, but the problem I ran into is the division since modular arithmetic rule doesn\'t apply.</p>\n\n<pre><code>void generate_motzkin_numbers() {\n    motzkin[0] = 1;\n    motzkin[1] = 1;\n    ull m0 = 1;\n    ull m1 = 1;\n    ull numerator;\n    ull denominator;\n    for (int i = 2; i &lt;= MAX_NUMBERS; ++i) {\n        numerator = (((2*i + 1)*m1 + 3*(i - 1)*m0)) % MODULO;\n        denominator = (i + 2);\n        motzkin[i] = numerator/denominator;\n        m0 = m1;\n        m1 = motzkin[i];\n    }\n}\n</code></pre>\n\n<p>Then I tried the second formula, but the running time is horribly slow because the summation:</p>\n\n<pre><code>void generate_motzkin_numbers_nested_recurrence() {\n    mm[0] = 1;\n    mm[1] = 1;\n    mm[2] = 2;\n    mm[3] = 4;\n    mm[4] = 9;\n    ull result;\n    for (int i = 5; i &lt;= MAX_NUMBERS; ++i) {\n        result = mm[i - 1];\n        for (int k = 0; k &lt;= (i - 2); ++k) {\n            result = (result + ((mm[k] * mm[i - 2 - k]) % MODULO)) % MODULO;\n        }\n        mm[i] = result;\n    }\n}\n</code></pre>\n\n<p>Next, I\'m thinking of using matrix form which eventually can be speed up using exponentiation squaring technique, in other words $M_{n+1}$ can be computed as follows:\n$$M_{n+1} = \\begin{bmatrix} \\dfrac{2n+3}{n+3} &amp; \\dfrac{3n}{n+3} \\\\ 1 &amp; 0\\end{bmatrix}^n \\cdot \\begin{bmatrix} 1 \\\\ 1\\end{bmatrix}$$ \nWith exponentiation by squaring, this method running time is $O(\\log(n))$ which I guess the fastest way possible, where <code>MAX_NUMBERS = 10,000</code>. Unfortunately, again the division with modular is killing me. After apply the modulo to the numerator, the division is no longer accurate. So my question is, is there another technique to compute this recurrence modulo a number? I\'m think of a dynamic programming approach for the summation, but I still think it\'s not as fast as this method.  Any ideas or suggestions would be greatly appreciated. </p>\n', 'Tags': '<algorithms><recurrence-relation><efficiency><integers>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-10T13:32:37.340', 'CommentCount': '6', 'AcceptedAnswerId': '3116', 'CreationDate': '2012-08-09T19:06:02.450', 'Id': '3109'},11516:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a function to count upper bits of a 32 bit value. So if a number is 11100011111..., the result is 3 as there are 3 ones in the most significant place before a 0 is hit.</p>\n\n<p>I need to convert the function to use only bitwise operations (no if statements or while loops) and the total number of operations should be lesser than 50.</p>\n\n<p>Question: How can this be converted to bitwise operations only while keeping less than 50 ops?</p>\n\n<p>Here is the Code:</p>\n\n<pre><code>  int count = 0;\n  int i = 28;\n\n  while(i &gt;= 0) {\n    int temp = (x&gt;&gt;i) &amp; 0xF;\n    i-=4;\n    if(temp == 0xF) count+=4;\n    else {\n      int mask = 0x1;\n      int a = (temp&gt;&gt;3) &amp; mask;\n      int b = (temp&gt;&gt;2) &amp; mask;\n      int c = (temp&gt;&gt;1) &amp; mask;\n      int d = temp &amp; mask;\n\n      if (a != 1) break;\n        count+=1;\n      if (b != 1) break;\n        count+=1;\n      if (c != 1) break;\n        count+=1;\n      if (d != 1) break;\n        count+=1;\n    }\n</code></pre>\n', 'ViewCount': '441', 'Title': 'Converting function to bitwise only?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-12T12:11:10.530', 'LastEditDate': '2012-09-11T11:43:56.560', 'AnswerCount': '3', 'CommentCount': '6', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2771', 'Tags': '<algorithms><integers><binary-arithmetic>', 'CreationDate': '2012-09-10T02:05:39.293', 'FavoriteCount': '2', 'Id': '3484'},11517:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am performing an addition operation on two large binary numbers that have an equal number of bits. Both numbers are stored in an array of length $N$, which is rather large.</p>\n\n<p>At first I tried running a loop over them and keeping track of carry bits. This wasted time, because the aim is to get the bit at a specific position in this sum.</p>\n\n<p>So I modified my approach in following way. Starting from the specified index, I am looping until I find a 0 bit in same position on both numbers; I add only those parts to each other and return the bit at the specified position.</p>\n\n<p>This seems okay, but is this the best I can do? Recall that I want to get the value of one specific bit of the sum, given by its position.</p>\n', 'ViewCount': '384', 'Title': 'Get specified bit in addition of two large binary numbers', 'LastEditorUserId': '39', 'LastActivityDate': '2012-09-20T20:40:41.733', 'LastEditDate': '2012-09-20T20:40:41.733', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '3', 'OwnerDisplayName': 'Ravi Joshi', 'PostTypeId': '1', 'OwnerUserId': '2908', 'Tags': '<arrays><integers><binary-arithmetic>', 'CreationDate': '2012-09-20T14:01:20.360', 'Id': '4643'},11518:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am dealing with the problem of computing $ s = \\lfloor sqrt(x)\\rfloor$ with $x \\in [0,30000^2]$. The common <code>sqrtf(x)</code> on C language is too slow for this case, however it always gives me the correct result. I've tried with the Newton's method but I get very small errors when the square root of a number is exact. This leads to an uncertain pattern of $s-1$ results along the interval. If I increase the number of iterations the method becomes too slow but more exact.</p>\n\n<p>Does anyone know of faster methods or directions on the latest research done in the area?</p>\n\n<p>note to clarify: input is idealy a real number (i.e floating point) but i also accept solutions with integer as input.</p>\n", 'ViewCount': '600', 'Title': 'Fastest square root method with exact integer result?', 'LastEditorUserId': '2588', 'LastActivityDate': '2012-10-02T15:37:03.877', 'LastEditDate': '2012-10-02T13:53:27.143', 'AnswerCount': '1', 'CommentCount': '11', 'AcceptedAnswerId': '4841', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2588', 'Tags': '<algorithms><integers><discrete-mathematics>', 'CreationDate': '2012-09-29T05:17:23.397', 'Id': '4789'},11519:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Representing numeric values using <a href="http://en.wikipedia.org/wiki/Positional_notation">positional notation</a> is one of the milestones in the history of arithmetic. Babylons used a base 60 system, Maya a base 20 system; base 10 system became "the standard" used by modern civilizations; digital computers use the <a href="http://en.wikipedia.org/wiki/Binary_numeral_system">Binary numeral system</a>, ....</p>\n\n<p>But if we look at nature, we found that life itself "heavily rely" on an alphabet of 4 symbols: the <a href="http://en.wikipedia.org/wiki/DNA">DNA</a> has four <a href="http://en.wikipedia.org/wiki/Base_%28chemistry%29">(chemical) bases</a>: adenine, cytosine, guanine and thymine (A, C, G, T) that are used to store the "instructions and information" to generate and drive the parts of a living organism.</p>\n\n<blockquote>\nBut on a higher level, are there <em>"natural algorithms"</em> (algorithms found in natural processes, in animal behaviours or in everyday human behaviours) that take advantages of "numeral systems" other than the <a href="http://en.wikipedia.org/wiki/Unary_numeral_system">unary representation</a>. \n</blockquote>\n\n<p>To be more precise I would like to know whether or not natural processes or living creatures make use of a finite, discrete alphabet of "symbols" and use them in a manner similar to a positional notation: the symbols are placed together and used as a whole to  represent "something" (an action, an information, an object, ...) among many other possibilites ... a sort of "index" in an exponential number of possibilites.</p>\n\n<p>Another (obvious) non numeric example is the human language where (in general) a combination of finite number of sounds ("alphabet") are combined to form the words.</p>\n', 'ViewCount': '99', 'Title': 'Numeral systems other than unary used in nature or in animal and human behaviours', 'LastEditorUserId': '39', 'LastActivityDate': '2013-11-19T21:54:13.267', 'LastEditDate': '2013-11-19T21:54:13.267', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '140', 'Tags': '<integers><notation><numeral-representations>', 'CreationDate': '2012-10-06T19:31:03.573', 'Id': '4906'},11520:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a simple problem. I can't seem to even find the right search terms to get me pointed in the direction I need to be heading.</p>\n\n<p>I'm writing a bunch of integers to disk. Lot's of them.</p>\n\n<p>Starting with the integer 2, I add it to another integer, write the result to disk, and start the process again using the result as the seed.</p>\n\n<p>This pattern is helping me generate data I need for other research, but I need to apply this pattern until I've reached integers with a length of 10,000 digits or more.</p>\n\n<p>So, here is my simple question: given a set of data of a known data type, how do I calculate the storage space required to store that set?</p>\n\n<p>At the moment, I'm doing this incredibly simple task in Python, recording longs to disk as binary in a single file. But, on my very small machine, I was only able to store the integers my process produced with values between 0 and 42 billion.</p>\n\n<p>Short of my goal of recording a data set with values between 0 and 1e10000.</p>\n\n<p>Given that I have no exposure to formulas for calculating hardware requirements for storing data like this, I have no idea if I'm using the most efficient language and data type for storing as many integers as possible in as little space as possible.</p>\n", 'ViewCount': '175', 'Title': 'Calculate storage requirements for a data set', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-15T05:23:11.350', 'LastEditDate': '2012-10-15T05:23:11.350', 'AnswerCount': '1', 'CommentCount': '13', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '3162', 'Tags': '<integers><efficiency><storage>', 'CreationDate': '2012-10-12T04:34:17.103', 'Id': '5032'},11521:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given $a,b,c,d \\in \\mathbb N$ and $b,d \\notin \\{0\\}$,</p>\n\n<p>$$\n\\begin{eqnarray*}\n\\frac a b &lt; \\frac c d &amp;\\iff&amp; ad &lt; cb\n\\end{eqnarray*}\n$$</p>\n\n<p>My questions are:</p>\n\n<p>Given $a,b,c,d$</p>\n\n<ol>\n<li>Assuming we can decide $x &lt; y \\in \\mathbb Z$ in $\\mathcal{O}(|x| +|y|)$, is there any way of deciding $ad&lt;cb$ without having to preform the multiplications (or divisions), $a\\cdot d$ and $c \\cdot b$. Or is there some sort of proof that there is no way.</li>\n<li>Is there a faster method to compare rational numbers than multiplying out the denominators.</li>\n</ol>\n', 'ViewCount': '455', 'Title': 'Comparing rational numbers', 'LastEditorUserId': '2755', 'LastActivityDate': '2012-11-25T14:45:37.623', 'LastEditDate': '2012-10-24T23:46:41.550', 'AnswerCount': '3', 'CommentCount': '14', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><integers>', 'CreationDate': '2012-10-23T17:48:28.160', 'FavoriteCount': '2', 'Id': '6266'},11522:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>While reading the <a href="http://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow">Wikipedia article about the subset sum problem</a> I came across this example: "is there a non-empty subset whose sum is zero? For example, given the set $\\{ \u22127, \u22123, \u22122, 5, 8 \\}$, the answer is yes because the subset $\\{ \u22123, \u22122, 5 \\}$ sums to zero". </p>\n\n<p>I have noticed that if we shift all the values of the set by adding a 8 to all elements we get $\\{ 1, 5, 6, 13, 16 \\}$ and then add the constant to the desired solution $0 + 8$, so now the question becomes is there a subset that adds up to $8$, which is not possible. My question is why does shifting the set and the solution by a positive integer "break" the solution, isn\'t the mathematics sound from the previous operations?</p>\n', 'ViewCount': '235', 'Title': 'Shifting subset sum solution by constant positive integer', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-26T13:03:57.800', 'LastEditDate': '2012-10-26T13:03:57.800', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6320', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4365', 'Tags': '<integers><decision-problem>', 'CreationDate': '2012-10-26T02:35:50.503', 'Id': '6319'},11523:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '123', 'Title': 'How to guess the value of $j$ at the end of the loop?', 'LastEditDate': '2012-11-27T15:10:08.253', 'AnswerCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4732', 'FavoriteCount': '1', 'Body': '<pre><code>for ( i = n , j = 0 ; i &gt; 0 ; i = i / 2 , j = j + i ) ;\n</code></pre>\n\n<p>All variables are integers.(i.e. if decimal values occur, consider their floor value)</p>\n\n<p>Let $\\text{val}(j)$ denote the value of $j$, after the termination of the loop. Which of the following is true?</p>\n\n<p>(A)$\\quad \\text{val(j)} = \\Theta(\\log(n)) $ <br>\n(B)$\\quad \\text{val(j)} = \\Theta(\\sqrt n) $ <br>\n(C)$\\quad \\text{val(j)} = \\Theta(n) $ <br>\n(D)$\\quad \\text{val(j)} = \\Theta(\\log\\log n) $</p>\n\n<p>Please explain, is there any easy way to guess the value of $j$?</p>\n', 'Tags': '<algorithm-analysis><asymptotics><integers>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-28T00:56:50.520', 'CommentCount': '13', 'AcceptedAnswerId': '6963', 'CreationDate': '2012-11-27T11:02:16.417', 'Id': '6952'},11524:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to solve exercise 6.5 on page 309 from Richard Crandall\'s "Prime numbers - A computational perspective". It basically asks for an algorithm to factor integers in randomized polynomial time given an oracle for taking square roots modulo $n$.</p>\n\n<p>I think, the basic idea is the following: Given a composite number $n$, to take a random element $r$ in $\\left.\\mathbb{Z}\\middle/n\\mathbb{Z}\\right.$ and square it. If $r$ was a square, $r^2$ can have up to $4$ different square roots and the basic idea of the algorithm is that the oracle has some chance not to choose $\\pm r$, but one of the other two roots. It will turn out that we then can determine a factor of $n$ using Euclidean\'s algorithm. </p>\n\n<p>I formalized this to</p>\n\n<p><strong>Input</strong>: $n=pq\\in\\mathbb{Z}$ with primes $p$ and $q$.</p>\n\n<p><strong>Output</strong>: $p$ or $q$</p>\n\n<ol>\n<li>Take a random number $r$ between $1$ and $n-1$</li>\n<li>If $r\\mid n$ then return $r$ (we were lucky)</li>\n<li>$s:= r^2\\pmod{n}$</li>\n<li>$t:=\\sqrt{s}\\pmod{n}$ (using the oracle)</li>\n<li>If $t\\equiv \\pm r\\pmod{n}$ then goto step 1.</li>\n<li>Return $\\gcd(t-r,n)$</li>\n</ol>\n\n<p>One can show that $t \\not\\equiv \\pm r\\pmod{n}$ implies that $\\gcd(t-r,n)\\neq 1,n$ and therefore get that the return value of the algorithm is a non-trivial factor of $n$. </p>\n\n<p>Inspired by my main question "How do I prove that the running time is polynomial in the bit-size of the input?" I have some follow up questions:</p>\n\n<ol>\n<li>Do I have to show that a lot of numbers between $1$ and $n-1$ are squares? There must be a well-known theorem or easy fact that shows this (well... not well-known to me ;-). </li>\n<li>Are there any more details I have consider? </li>\n<li>Has every square of a square exactly $4$ square roots modulo $n$? </li>\n</ol>\n', 'ViewCount': '109', 'Title': 'Solve Integer Factoring in randomized polynomial time with an oracle for square root modulo $n$', 'LastActivityDate': '2013-01-23T15:57:01.553', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9114', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2103', 'Tags': '<randomized-algorithms><integers><factoring>', 'CreationDate': '2013-01-23T09:39:28.187', 'FavoriteCount': '1', 'Id': '9106'},11525:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need an efficient algorithm that takes input a collection of intervals and outputs the largest subset of non-intersecting intervals. </p>\n\n<p>i.e. Given a set of intervals $I =  \\{I_1, I_2, \\ldots, I_n\\}$ of the real line, we need to output a set of intervals $O = \\{O_1, O_2, \\ldots, O_k\\}$ such that</p>\n\n<ul>\n<li>$O$ is a subset of $I$.</li>\n<li>For any $i \\neq j$, $O_i$ and $O_j$ are non-intersecting.</li>\n<li>$k$ is the maximum possible.</li>\n</ul>\n\n<p>Example: if the intervals are $[1,100], [2,3], [4,5], [6,7], [3,20]$ we should return $\\{[2,3], [4,5], [6,7]\\}$.</p>\n', 'ViewCount': '503', 'Title': 'Algorithm to return largest subset of non-intersecting intervals', 'LastEditorUserId': '7391', 'LastActivityDate': '2013-03-24T21:29:01.710', 'LastEditDate': '2013-03-24T21:29:01.710', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '4', 'OwnerDisplayName': 'user2112791', 'PostTypeId': '1', 'Tags': '<algorithms><optimization><integers><intervals><set-cover>', 'CreationDate': '2013-03-23T02:48:15.283', 'FavoriteCount': '0', 'Id': '10713'},11526:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Assume there was a database system that had a data type called <code>VARINT</code> or some variant that allowed instead of fixed-length <code>INT</code>s regardless of value, a <code>1</code> would only take 1 <code>BIT</code> (<code>1</code>), <code>2</code> would take 2 <code>BIT</code>s (<code>10</code>), etc.</p>\n\n<p>In this perfect world, a <code>VARINT</code> could be used to <code>autoincrement</code> a <code>PRIMARY</code> column.  However, there\'s still the issue of the field growing in size, so the "older" parts of this <code>TABLE</code> would be very fast, but the "younger" parts would get slower and slower.</p>\n\n<p>What counting system could be used to hold the space consumed constant and small or at least grow at a much slower rate?</p>\n', 'ViewCount': '19', 'Title': 'VAR autoincrement with constant space consumption for super large tables', 'LastActivityDate': '2013-04-05T20:34:02.580', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11064', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7386', 'Tags': '<integers><database-theory><performance>', 'CreationDate': '2013-03-23T21:49:04.237', 'Id': '10724'},11527:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can someone explain in plain English what "two\'s complement integer" means? I read this: </p>\n\n<blockquote>\n  <p>in Java long is a 64-bit signed two\'s complement integer</p>\n</blockquote>\n', 'ViewCount': '766', 'Title': "What are two's complement integers?", 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-02T08:11:47.357', 'LastEditDate': '2013-04-02T08:11:47.357', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'Gandalf', 'PostTypeId': '1', 'Tags': '<terminology><integers><encoding-scheme>', 'CreationDate': '2013-04-01T14:45:44.883', 'Id': '10958'},11528:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'ve been trying for a while now to find a solution for the problem in the title: determining if a number is perfect using a Turing Machine. I only had one class on the TM and while I did "get" how it works, this particular algorithm is being really hard for me to develop.</p>\n\n<p>The algorithm I\'m trying to implement on the TM is basically this (on C, returns <code>true</code> iff <code>n</code> is a perfect number):</p>\n\n<pre><code>int main(int n) {\n  int i=1, sum=0;\n\n  while ( n &gt; i ) {\n    if ( n % i == 0 ) {\n      sum = sum + i;\n    }\n    i++;\n  }\n\n  return sum == n\n}\n</code></pre>\n\n<p>The tough part for me right now is the <code>while(n&gt;i)</code> loop and the <code>n%i</code> inside it.</p>\n\n<p>Since I already have a program that does <code>a%b</code>, I was trying to build the TM graph around it, but I\'m not sure it\'s the best idea, specially since the <code>b</code> on this case changes on every iteration. The software I\'m using to simulate the TM is called JFlap.</p>\n\n<p>The algorithm on table or graph form would be perfect.</p>\n', 'ViewCount': '366', 'Title': 'Algorithm to determine if a number is perfect on a Turing Machine', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-22T16:39:50.503', 'LastEditDate': '2013-04-22T11:20:04.560', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7833', 'Tags': '<algorithms><turing-machines><decision-problem><integers>', 'CreationDate': '2013-04-22T00:23:08.297', 'Id': '11481'},11529:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have a set $S$ of integers.  I want to remove all elements of $S$ that are divisors of another element of $S$.  In other words, I want to compute $T = \\{y \\in S : \\forall d \\in S . d \\nmid y \\}$.</p>\n\n<p>How do I do this efficiently?</p>\n\n<p>I can see how to do it in $\\Theta(|S|^2)$ time, by examining all pairs of elements of $S$ and keeping only the ones that don't have any divisor in $S$.  Can it be done substantially faster?  (For simplicity, I'm willing to assume that all standard integer operations---addition, multiplication, division, etc.---can be done in $O(1)$ time.  Yes, I know this is an imperfect approximation, but if it makes your answer cleaner, I'm fine with it.)</p>\n", 'ViewCount': '64', 'Title': 'Remove divisors from a set of integers', 'LastActivityDate': '2013-07-08T06:31:54.970', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><integers><number-theory>', 'CreationDate': '2013-07-08T03:30:37.670', 'Id': '13153'},11530:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have about 500,000,000 64-bit integers, so these numbers could be very large.\nI want to sort them as quickly as possible. I have a couple of questions:</p>\n\n<ol>\n<li><p>What data structure do you suggest for storing this data?</p></li>\n<li><p>What algorithm do you suggest for sorting these numbers?</p></li>\n</ol>\n\n<p>My main restriction is speed.</p>\n', 'ViewCount': '224', 'Title': 'How should I store and sort a large number of 64-bit integers?', 'LastEditorUserId': '1055', 'LastActivityDate': '2013-07-17T20:07:11.840', 'LastEditDate': '2013-07-17T05:13:23.943', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '13291', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1055', 'Tags': '<algorithms><data-structures><sorting><integers><performance>', 'CreationDate': '2013-07-15T15:49:46.370', 'Id': '13290'},11531:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>My problem.</strong> Given $n$, I want to count the number of valid multisets $S$.  A multiset $S$ is valid if</p>\n\n<ul>\n<li>The sum of the elements of $S$ is $n$, and</li>\n<li>Every number from $1$ to $n$ can be expressed uniquely as a sum of some of the elements of $S$.</li>\n</ul>\n\n<p><strong>Example.</strong>\nFor example if $n=5$ then $\\{1,1,1,1,1\\}, \\{1,2,2\\}, \\{1,1,3\\}$ are valid.</p>\n\n<p>However, $S=\\{1,1,1,2\\}$ is invalid because 2 can be formed by both $\\{1,1\\}$ and $\\{2\\}$ (i.e., 2 can be expressed as both $2=1+1$ and $2=2$), so the second condition doesn\'t hold. Similarly 3 can be formed by $\\{2,1\\}$ and $\\{1,1,1\\}$. </p>\n\n<p>$S=\\{1,2,4$} is also invalid because all numbers from $1$ to $5$ can be uniquely made, but the sum of the elements of $S$ is not $5$.</p>\n\n<hr>\n\n<p>I\'ve tried to find a good algorithm for this problem for quite some time but cannot solve it. It is from <a href="http://www.codechef.com/problems/MONEY" rel="nofollow">codechef</a>.  I\'ve seen some of the submitted solutions but I still couldn\'t get the logic for solving the problem. <strong>NOTE:</strong> The time limit for the question is 10 seconds and $n&lt;10^9$  </p>\n\n<p>For a multiset I will use the notation $S = \\{(a_1, c_1), (a_2, c_2) ... \\}$ $a_i&lt;a_j$ if $i&lt;j$, which means $a_i$ occurs $c_i$ times in multiset S.</p>\n\n<p>Till now I have drawn some conclusions</p>\n\n<ul>\n<li>First element of the required sorted multiset should be $1$ </li>\n<li>Let $S=\\{1,a_2 \\cdots a_k\\} | a_1 \\leq a_2\\cdots \\leq a_k $ be a set following the two properties then $\\forall r&lt;k \\ \\ a_{r+1} = a_r \\text{ or } (\\sum_{i=0}^ra_i) + 1$  </li>\n<li>Let $S=\\{(1,c_1),(a_2,c_2) \\cdots (a_k,c_k)\\} | a_1 \\leq a_2\\cdots \\leq a_k$, where $a_i$ is occurring $c_i$ times, follows the required properties then from the above conclusion we can say that $\\forall i \\ a_i|n+1$ and $a_i | a_j$ if $j &gt; i$ .<br>\nProof: $a_{i+1} = (a_ic_i + a_i -1 )  + 1 \\Rightarrow a_i | a_{i+1}$</li>\n<li>Now consider $S=\\{ \\underbrace{1,1 \\cdots 1}_{d-1},d,d \\cdots d,dm_1, dm_1 \\cdots dm_1,dm_2, dm_2 \\cdots dm_2, \\cdots \\}$ i.e. all the subsequent numbers after 1 will be a multiple of $d$. So let $f(n)$ be the count of such multiset possible then $f(n) = \\sum_{d|n+1, d\\neq 1} f(\\frac{n-(d-1)}{d})$ where I am summing over all possible number of $1\'s$($=d-1$). In other terms $f(n-1)=g(n)=\\sum_{d|n,d \\neq n}g(d)$  </li>\n</ul>\n\n<p>Finally my problem is reduced to this - find $g(n)$ in an efficient way so that it doesnt exceed the time limit.</p>\n', 'ViewCount': '124', 'Title': 'Number of multisets such that each number from 1 to $n$ can be uniquely expressed as a sum of some of the elements of the multiset', 'LastEditorUserId': '2589', 'LastActivityDate': '2013-07-20T17:55:05.087', 'LastEditDate': '2013-07-20T12:13:37.120', 'AnswerCount': '3', 'CommentCount': '6', 'AcceptedAnswerId': '13362', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2589', 'Tags': '<algorithms><integers>', 'CreationDate': '2013-07-18T20:23:20.293', 'Id': '13336'},11532:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm seeking to write an algorithm which, given a value of N, will fill a matrix consisting of (N+1)<em>(N+2)</em>(N+3)/6 rows and 4 columns with the integers from 0, ... , N, subject to the conditions that:</p>\n\n<ul>\n<li>The sum of values in any row is N</li>\n<li>No rows are repeated (this should ensure that every such possibility is listed)</li>\n</ul>\n\n<p>For example, with N=2, we have 10 (=3*4*5/6) rows:</p>\n\n<pre><code>2 0  0 0\n1 1  0 0\n0 2  0 0\n1 0  1 0\n1 0  0 1\n0 1  1 0\n0 1  0 1\n0 0  2 0\n0 0  1 1 \n0 0  0 2\n</code></pre>\n\n<p>I've been trying for a while to program this (in R, for what it's worth), but I'm struggling to get anywhere. Any advice?</p>\n", 'ViewCount': '172', 'Title': 'Filling Rows of a Matrix Subject to Conditions', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-12T08:25:28.050', 'LastEditDate': '2013-08-11T13:03:29.910', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '13577', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9322', 'Tags': '<algorithms><integers><linear-programming>', 'CreationDate': '2013-08-01T10:31:49.617', 'Id': '13562'},11533:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to keep a collection on integers in the range 0 to 65535 so that I can quickly do the following:</p>\n\n<ul>\n<li>Insert a new integer</li>\n<li>Insert a range of contiguous integers</li>\n<li>Remove an integer</li>\n<li>Remove all integers below an integer</li>\n<li>Test if an integer is present</li>\n</ul>\n\n<p>My data has the property that it often contains runs of integers in the collection.  For example, the collection might at one point in time be:</p>\n\n<pre><code>{ 121, 122, 123, 124, 3201, 3202, 5897, 8912, 8913, 8914, 18823, 18824, 40891 }\n</code></pre>\n\n<p>The simplest approach is just to use a balanced binary tree like the C++ std::set, however, using that, I am not leveraging the fact that I often have runs of numbers.  Perhaps it would be better to store a collection of ranges?  But that means a range needs to be able to be broken up if an integer in its middle is removed, or joined together if the space between two ranges in filled in.</p>\n\n<p>Are there any existing data structures that would be well suited for this problem?</p>\n', 'ViewCount': '402', 'Title': 'What data structure would efficiently store integer ranges?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-26T17:37:25.270', 'LastEditDate': '2013-08-26T11:07:37.533', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7284', 'Tags': '<data-structures><efficiency><search-trees><integers>', 'CreationDate': '2013-08-22T20:22:55.240', 'Id': '13874'},11534:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>C++11 has a convenient Bernoulli RNG, illustrated at \n<a href="http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution" rel="nofollow">http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution</a> .\nHowever, distilling an entire random integer into a single random bit seems inefficient when the expectation parameter $p$ is rational with a small or power-of-two denominator.\nIs there a reasonably fast way to generate 32 random Bernoulli bits at once in such cases? My application uses long streams of bits, so I can keep track of statistics if needed (but this would consume runtime).</p>\n', 'ViewCount': '78', 'Title': "Isn't std::bernoulli_distribution inefficient? Designing a bit-parallel Bernoulli generator", 'LastEditorUserId': '5189', 'LastActivityDate': '2013-09-25T04:26:33.097', 'LastEditDate': '2013-09-25T04:26:33.097', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '5189', 'Tags': '<randomized-algorithms><integers><randomness><binary-arithmetic>', 'CreationDate': '2013-09-22T21:10:38.360', 'Id': '14525'},11535:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>After skimming <a href="http://www.lirmm.fr/~imbert/pdfs/constmult_arith18.pdf">Multiplication by a Constant is Sublinear (PDF)</a>, (<a href="http://ge.tt/6343C5u/v/0">slides (PDF)</a>, <a href="http://ge.tt/6343C5u/v/1">slides with notes (PDF)</a>) I was wondering if this could be extended to division by a constant in sublinear time?</p>\n\n<p>Additionally, what about division with a constant numerator, ie. "division of a constant"?</p>\n', 'ViewCount': '105', 'Title': 'Division by a constant', 'LastActivityDate': '2013-10-09T17:02:46.717', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '14959', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><reference-request><integers>', 'CreationDate': '2013-10-09T15:46:09.137', 'Id': '14954'},11536:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let:</p>\n\n<ul>\n<li>$\\left\\{m_1, ~...~, m_k\\right\\}$ be a set of coprime natural numbers,</li>\n<li>$M=\\prod_{i=1}^{k} m_i$</li>\n<li>$X$ be a natural integer, such that $X &lt; M$</li>\n</ul>\n\n<p>Then $X$ can be expressed in the <a href="http://en.wikipedia.org/wiki/Residue_number_system" rel="nofollow">Residue Number System</a> as:</p>\n\n<p>$$X={\\left(x_1, ~...~, x_k\\right)}_{RNS\\left(m_1, ~...~, m_k\\right)}~.$$</p>\n\n<p>Where $\\forall_{m_i} \\left[\\left(x_i \\equiv X \\mod m_i\\right) ~~~ \\wedge ~~~0 \\le x_i &lt; m_i \\right]$.</p>\n\n<p>There are a plethora of papers attacking the problem of parity/magnitude comparison in <em>Residue Number Systems</em>; however many of these papers are focused on chip-depth or shaving large constants off of chip-area. I am finding it difficult to decipher if there are any exact algorithms that run faster than full binary reconstruction, which takes $\\sim \\mathcal{O}(k^2)$  time. (For simplicty/brevity, I am assuming small $m_i$, and constant-time modulo-multiplication/addition of each RNS "digit").</p>\n\n<p>Most of the papers\' novelties lie in some seeming "gimmick", but no real complexity decrease; examples of results:</p>\n\n<ul>\n<li>Fast inexact parity algorithms (usually work terribly when $X &lt; \\sqrt{M}$, or $|X| \\ll |M|$, where $\\left|n\\right|=\\text{size of }n=\\left\\lceil\\log_2n\\right\\rceil$)</li>\n<li>Algorithms that work quickly "most of the time"; ie. they use an inexact algorithm, and then the full CRT reconstruction or equivalent in the worst case</li>\n<li>The circuit they present competes with some other paper\'s circuit by some constant, or area/depth tradeoff, but makes no complexity advance</li>\n<li>Full CRT reconstruction of $X$, perhaps using some trick to save some constants</li>\n<li>Reconstruct/convert to another number system (including binary) where parity/comparison is easy, but:\n<ul>\n<li>this conversion/reconstruction takes $\\sim \\mathcal{O}(k^2)$ time,</li>\n<li>or it runs in $\\sim \\mathcal{O}(k)$, time but with $k$ processors,</li>\n<li>or it runs in $\\sim \\mathcal{O}(k)$ time because that is the depth of the circuit, but this is not algorithmic complexity,</li>\n<li>or it reuses previous components that must be there for RNS multiplication (saving circuit space), but still runs in $\\sim \\mathcal{O}(k^2)$ sequential-time, or $\\sim \\mathcal{O}(k)$ parallel-time</li>\n</ul></li>\n<li>Using a "core" function which basically boils down to a constant-trimmed-CRT, or an approximate CRT</li>\n<li>Using special moduli, makes individual operations simpler, but parity complexity stays the same</li>\n<li>Using special moduli, but limited number of moduli or can\'t have small $m_i$</li>\n<li>Base extension, saves some constant or allows parallel-ness, but complexity is again $\\sim \\mathcal{O}(k^2)$ sequential-time, or $\\sim \\mathcal{O}(k)$ parallel-time (for multiplication)</li>\n<li>Redundant moduli, but maintaining the redundant moduli takes  $\\sim \\mathcal{O}(k^2)$ sequential-time, or $\\sim \\mathcal{O}(k)$ parallel-time</li>\n<li>Using lookup tables to reduce depth of some parity, no complexity improvement</li>\n</ul>\n\n<p>Many of the papers do not address complexity at all, or do not address sequential complexity, or even more confusingly, some state the depth/parallel complexity without being precise that it is not sequential; until you read and decipher the entire paper, and discover it yourself.</p>\n\n<h3>Bottom line</h3>\n\n<p><strong>What are the best <em>sequential</em>, <em>worst-case</em>, complexity results in RNS<sup>*</sup> for <em>exact</em> parity checking or magnitude comparison?</strong></p>\n\n<p><sup><strong>*Results for RNS-<em>like</em> system would also be interesting, including special moduli sets</strong></sup></p>\n\n<hr>\n\n<p><sup><sup>\n<strong>More background info</strong>:\n</sup></sup></p>\n\n<p><sup><sup> Multiplication of two numbers in the same RNS base is simply pointwise modulo multiplication of the two numbers (this can be approximately linear time). However, overflow detection is difficult (it is difficult with addition as well). Multiplication seems much simpler, but parity and magnitude comparison of two numbers seems much more difficult. Magnitude comparison is simply determining which of two numbers is greater, $X \\stackrel{?}{&lt;} Y$, given <em>only</em> their RNS form with the same RNS bases. Parity is simply deciding if a number, $X={\\left(x_1, ~...~, x_k\\right)}_{RNS\\left(m_1, ~...~, m_k\\right)}$ is even or odd (obviously, $X$ is not given, only its RNS form). An interesting thing is that magnitude comparison and parity are related: If you were able to compute parity, then you can do comparison. To do comparison with parity, you do $(X - Y)$ (in RNS), and if it underflows, the parity will be unexpected. That is, normally, assuming $p(X) = X \\mod 2, ~~~ p(X) \\in \\{0,1\\}$ is the parity function, $p(X-Y) \\equiv p(X) + p(Y) \\mod 2$. However, if it underflows, it will wrap around to $M-1$. Therefore if the parity is off after $X-Y$, you know that $Y &gt; X$.\n</sup></sup></p>\n', 'ViewCount': '208', 'Title': 'Best complexity of parity/comparison in the Residue Number System', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-10-23T23:32:04.833', 'LastEditDate': '2013-10-23T23:32:04.833', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><reference-request><integers><number-theory>', 'CreationDate': '2013-10-23T21:28:12.190', 'Id': '16374'},11537:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '130', 'Title': 'Carry-free multiplication operation', 'LastEditDate': '2013-10-30T17:32:48.187', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '3', 'Body': '<p>In long-multiplication, you shift and add, once for each $1$ bit in the lower number.</p>\n\n<p>Let $r = p \\otimes q$ be an operation similar to multiplication, but slightly simpler: when expressed via long-multiplication, the addition does not carry. Essentially you bitwise-<strong>xor</strong> the shifted numbers.</p>\n\n<p>Like so:</p>\n\n<p>$$\n  \\left[\\begin{matrix}\n    &amp;&amp;p_n &amp; ... &amp; p_i &amp; ... &amp; p_2 &amp; p_1 \\\\\n    &amp;&amp;q_n &amp; ... &amp; q_i &amp; ... &amp; q_2 &amp; q_1 &amp; \\otimes\\\\\n    \\hline\\\\\n    &amp;&amp;q_1 \\cdot p_n &amp; ... &amp; q_1 \\cdot p_i\n      &amp; ... &amp; q_1 \\cdot p_2 &amp; q_1 \\cdot p_1\\\\\n    &amp;q_2 \\cdot p_n &amp; ... &amp; q_2 \\cdot p_i\n      &amp; ... &amp; q_2 \\cdot p_2 &amp; q_2 \\cdot p_1\\\\\n    &amp;&amp;&amp;&amp;&amp;&amp;&amp;...\\\\\n    q_i \\cdot p_n &amp; ... &amp; q_i \\cdot p_i\n      &amp; ... &amp; q_i \\cdot p_2 &amp; q_i \\cdot p_1 &amp; \\stackrel{i}{\\leftarrow}\n      &amp;&amp;{\\Huge{\\oplus}} \\\\\n    \\hline \\\\\n    \\\\r_{2n}&amp; ... &amp; r_i\n      &amp; ... &amp;r_4&amp; r_3 &amp; r_2 &amp;r_1 &amp; =\n  \\end{matrix}\n  \\right]\n$$</p>\n\n<p>Using the long-multiplication-style formulation, this takes $\\mathcal O\\left(\\max\\left(\\left|p\\right|,\\left|q\\right|\\right)^2\\right)=\\mathcal O\\left(\\left|r\\right|^2\\right)$ time. Can we do better? Perhaps we can reuse some existing multiplication algorithms, or even better.</p>\n\n<hr>\n\n<h2>Followup: <a href="http://cs.stackexchange.com/q/16585/2755">Shift-and-or multiplication operation</a></h2>\n', 'Tags': '<algorithms><integers><number-theory><multiplication>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-10-30T17:32:48.187', 'CommentCount': '4', 'AcceptedAnswerId': '16581', 'CreationDate': '2013-10-30T16:33:37.543', 'Id': '16578'},11538:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Continuing in the same vein as <a href="http://cs.stackexchange.com/q/16578/2755">Carry-free multiplication operation</a>, a followup question is as follows (differences in bold):</p>\n\n<p>Let $r = p \\oplus q$ be an operation similar to multiplication, but slightly simpler: when expressed via long-multiplication the columns aren\'t summed up, but rather <strong>or</strong>\'d (not <strong>xor</strong>) together. Nothing is carried.</p>\n\n<p>$$\n  \\left[\\begin{matrix}\n    &amp;&amp;p_n &amp; ... &amp; p_i &amp; ... &amp; p_2 &amp; p_1 \\\\\n    &amp;&amp;q_n &amp; ... &amp; q_i &amp; ... &amp; q_2 &amp; q_1 &amp; \\otimes\\\\\n    \\hline\\\\\n    &amp;&amp;q_1 \\cdot p_n &amp; ... &amp; q_1 \\cdot p_i\n      &amp; ... &amp; q_1 \\cdot p_2 &amp; q_1 \\cdot p_1\\\\\n    &amp;q_2 \\cdot p_n &amp; ... &amp; q_2 \\cdot p_i\n      &amp; ... &amp; q_2 \\cdot p_2 &amp; q_2 \\cdot p_1\\\\\n    &amp;&amp;&amp;&amp;&amp;&amp;&amp;...\\\\\n    q_i \\cdot p_n &amp; ... &amp; q_i \\cdot p_i\n      &amp; ... &amp; q_i \\cdot p_2 &amp; q_i \\cdot p_1 &amp; \\stackrel{i}{\\leftarrow}\n      &amp;&amp;{\\bigvee} \\\\\n    \\hline \\\\\n    \\\\r_{2n}&amp; ... &amp; r_i\n      &amp; ... &amp;r_4&amp; r_3 &amp; r_2 &amp;r_1 &amp; =\n  \\end{matrix}\n  \\right]\n$$</p>\n\n<p>Using the long-multiplication-style formulation, this takes $\\mathcal O\\left(\\max\\left(\\left|p\\right|,\\left|q\\right|\\right)^2\\right)=\\mathcal O\\left(\\left|r\\right|^2\\right)$ time. Can we do better? Perhaps we can reuse some existing multiplication algorithms, or even better.</p>\n', 'ViewCount': '446', 'Title': 'Shift-and-or multiplication operation', 'LastActivityDate': '2013-10-30T19:44:37.417', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><integers><number-theory><multiplication>', 'CreationDate': '2013-10-30T17:35:19.933', 'FavoriteCount': '2', 'Id': '16585'},11539:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>(This may be more fitting for CSTheory, I\'m not sure.)</p>\n\n<p>I\'m looking for an practical or theoretical work (that is, academic papers, online jots, pseudocode or code) regarding efficient algorithms for the following problem:</p>\n\n<h2>Unknown-Number-of-Bins Histogram</h2>\n\n<p><strong>Inputs:</strong></p>\n\n<ul>\n<li>An array of integers $a$, of length $n$.</li>\n</ul>\n\n<p><strong>Outputs:</strong> </p>\n\n<ul>\n<li>An array of integers $\\text{bins}$ of length $m &lt;= n$.</li>\n<li>An array of unsigned integers $\\text{counts}$, also of length $m$.</li>\n</ul>\n\n<p><strong>Output Requirements:</strong> </p>\n\n<ul>\n<li><p>For every $i \\in \\{0...m-1\\}$ it must be the case that </p>\n\n<p>$\\bigl|\\bigl\\{ j \\in \\{0...n-1\\} \\mid a_j = \\text{bins}_i \\bigr\\}\\bigr|$\n$ = \\text{counts}_i$</p>\n\n<p>In other words, $\\text{bins}$ and $\\text{counts}$ constitute a histogram of $a$, with one bin for every unique value in $a$.</p></li>\n<li>It is <strong>not</strong> required for $\\text{bins}$ or $\\text{counts}$ to be sorted.</li>\n</ul>\n\n<p><strong>Other Notes:</strong></p>\n\n<ul>\n<li>Complexity is considered as a function of <strong>both $n$ and $m$</strong>. </li>\n<li>Low time complexity is required both asymptotically for relatively low values $m$ - but not for low values of $n$.</li>\n<li>No hiding monstrosities in the $\\mathop{O}(\\cdot)$ constants please!</li>\n<li>A parallel(izable) approach? You are most welcome :-)</li>\n<li>Low space complexity is a benefit.</li>\n<li>Deterministic algorithms preferred, and barring that, go easy on those coin flips.</li>\n</ul>\n\n<p>Clearly, there are many way to go about this, some very straightforward, e.g. "sort the input, then build a sorted histogram in a single pass", in $\\mathop{O}(n \\log{n})$ time. Of course I wanted something better....</p>\n', 'ViewCount': '62', 'Title': 'Computing a histogram with the number of extant values not known in advance', 'LastEditorUserId': '11796', 'LastActivityDate': '2013-12-16T09:13:58.833', 'LastEditDate': '2013-12-16T09:13:58.833', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11796', 'Tags': '<algorithms><combinatorics><integers><counting>', 'CreationDate': '2013-12-14T12:42:42.897', 'Id': '18979'},11540:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '65', 'Title': 'Quick calculation for $(x^y) \\bmod z$', 'LastEditDate': '2014-03-30T11:10:13.400', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '12905', 'FavoriteCount': '2', 'Body': '<p>What are the possible ways to calculate $(x^y) \\bmod z$ quickly for very large integers?\nIntegers $x,y \\lt 10^{10000}$ and $z \\lt 10^6$.</p>\n', 'Tags': '<integers><number-theory><arithmetic>', 'LastEditorUserId': '472', 'LastActivityDate': '2014-03-31T02:12:44.727', 'CommentCount': '7', 'AcceptedAnswerId': '23257', 'CreationDate': '2014-03-30T10:50:29.727', 'Id': '23252'},11541:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>This is an assignment of an introductory course of complexity theory and I need to <em>find</em> a way to do the following:</p>\n\n<p>Given $n,m \\in \\Bbb N$, is $n \\le m!$ ?</p>\n\n<p>The idea is to provide a <strong>Post Machine</strong> that can decide this in an <em>efficient way</em>, using $n,m$ in a binary codification.</p>\n\n<p>We know that the factorial isn't efficient, so the problem actually is just to find a way to decide this, if it's possible.</p>\n\n<p>I know how to compare if $n\\le m$, but the factorial is my problem. \n<strong>I don't how how to compute $m!$ with a Post Machine</strong>, if possible, in polynomial-time.</p>\n\n<p>I guess that the most simple way to do this is comparing $n$ with factorials of numbers that are lower than $m$, but the factorial it's still my problem.</p>\n\n<p>My question, is there an algorithm that can help me?</p>\n", 'ViewCount': '115', 'Title': 'Algorithm to decide if $n \\le m!$', 'LastEditorUserId': '11936', 'LastActivityDate': '2014-04-04T23:09:10.580', 'LastEditDate': '2014-04-02T21:19:47.417', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '23439', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11936', 'Tags': '<algorithms><decision-problem><integers>', 'CreationDate': '2014-04-02T19:06:07.690', 'Id': '23363'},11542:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m reading <a href="http://download-software.intel.com/sites/default/files/article/165685/clmul-wp-rev-2.01-2012-09-21.pdf">this Intel white paper on carry-less multiplication</a>. It describes multiplication of polynomials in $\\text{GF}(2^n)$. On a high level, this is performed in two steps: (1) multiplication of polynomials over $\\text{GF}(2)$, and (2) reducing the result modulo an irreducible polynomial. We use the "standard" bitstring representation of polynomials, i.e. $x^3+x+1 = [1011]$.</p>\n\n<p>The paper gives an algorithm for calculation of the remainder polynomial on page 16 in Algorithm 3. However, I\'m having trouble understanding the reduction algorithm on pages 16-17 (Algorithm 4). Essentially, I think we need Algorithm 4 for larger fields when our or partial results don\'t fit 128 bits anymore. They give an example for multiplication of two polynomials in $\\text{GF}(2^{128})$.</p>\n\n<blockquote>\n  <p>Where do the "magic constants" 63, 62, and 57 for right shifts, and the "magic constants" 1, 2, and 7 for left shifts come from?</p>\n</blockquote>\n\n<p>For example, how does one generalize the algorithm for smaller fields, say $\\text{GF}(2^{32})$? Would the corresponding shift values then be 15, 14, 9 and 1, 2, 7?</p>\n\n<blockquote>\n  <p>In the final step 4, the algorithm tells you to "XOR $[E_1:E_0]$, $[F_1:F_0]$, and $[G_1:G_0]$ with each other and $[X_3:D]$".</p>\n</blockquote>\n\n<p>Why do we do this? As far as I can see, the result of this XOR operation is neither stored anywhere nor used anywhere. Is it somehow used for computing $[H_1 : H_0]$?</p>\n', 'ViewCount': '79', 'Title': "Understanding Intel's algorithm for reducing a polynomial modulo an irreducible polynomial", 'LastEditorUserId': '16379', 'LastActivityDate': '2014-04-10T16:46:42.737', 'LastEditDate': '2014-04-08T12:51:39.823', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '23574', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '16379', 'Tags': '<algorithms><integers><polynomials><multiplication>', 'CreationDate': '2014-04-08T12:44:30.947', 'Id': '23549'}