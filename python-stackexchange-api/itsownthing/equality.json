{'Body': '<p>In terms of references and their implementation on the heap and the stack, how is\nequality testing for arrays different from that for integers? </p>\n\n<p>This is to do with Java programming, if you have a stack and a heap, would equality testing for example <code>j == i</code> be the same for arrays and for integers? I understand that arrays, are stored in the heap and the stack, as it holds bulks of data, but integers are only stored in the stack and referenced in the heap.</p>\n\n<p><img src="http://i.stack.imgur.com/xtIHW.png" alt="this is a picture on how integer variables are stored on the heap and referenced on the heap"></p>\n\n<p>I understand for equality testing <code>j==i</code> (variables) the stack pointer will point to the same location.</p>\n\n<p>I\'m confused on how <code>j==i</code> would be different for array and integers.</p>\n\n<p>Could someone explain? </p>\n', 'ViewCount': '214', 'Title': 'Equality testing of arrays and integers in a procedural language', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-26T10:32:40.923', 'LastEditDate': '2012-05-19T18:11:42.023', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '1935', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1376', 'Tags': '<programming-languages><arrays><semantics><equality><memory-management>', 'CreationDate': '2012-05-19T06:38:55.350', 'Id': '1919''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is the following FOL-problem (equality is a logical symbol) \neffectively decidable?</p>\n\n<p><strong>Given.</strong>  A finite equation system $E$ and an equation $s = t$.</p>\n\n<p><strong>Question.</strong>  Is there a substitution $\\sigma$, such that $\\sigma(E)\n\\models \\sigma(s = t)$?</p>\n\n<p><strong>Some useful information.</strong>  </p>\n\n<ol>\n<li><p>Obviously one can restrict $\\sigma$ to be a ground substitution.</p></li>\n<li><p>This problem is decidable:  Given a finite system $E$ of<br>\nground equations and a ground equation $s = t$, does $E \\models s = t$<br>\nhold? (c.f. [1: Corollary 4.3.6]) </p></li>\n</ol>\n\n<p><strong>References</strong></p>\n\n<p>[1] Franz Baader, Tobias Nipkow: Term Rewriting and All That,\n&copy; 1998 Cambridge University Press.</p>\n', 'ViewCount': '90', 'Title': 'Is the validity of some instance of an equational problem decidable?', 'LastEditorUserId': '2626', 'LastActivityDate': '2012-08-25T10:02:52.893', 'LastEditDate': '2012-08-24T20:50:16.470', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '3329', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2626', 'Tags': '<computability><logic><decision-problem><equality>', 'CreationDate': '2012-08-24T11:30:29.003', 'Id': '3312''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In unification, given a set of equations, a standard problem is to compute a most general unifier (mgu). I am interested in a somewhat reversed problem. Imagine having a set of equations that do not have an mgu, like this one:</p>\n\n<pre><code>x = a\nx = b\n</code></pre>\n\n<p><code>x</code> here is a variable, whereas <code>a</code> and <code>b</code> are terms. I am interested are there any algorithms that could find a possible replacement for <code>a</code> and <code>b</code> such that the resulting equations have mgu? In the above example, that would be <code>a -&gt; y, b -&gt; y</code>, <code>y</code> being a variable. Lets call this a <em>fix</em>. I am particularly interested in most specific fixes. I could not find anything so far, but this seems like a natural problem, or not?</p>\n', 'ViewCount': '55', 'Title': 'Unification --- most specific unifier', 'LastActivityDate': '2014-03-27T22:32:18.053', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23148', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8508', 'Tags': '<algorithms><logic><unification><equality>', 'CreationDate': '2014-03-21T19:28:11.560', 'Id': '22910''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}