370:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>It's a known fact that every LTL formula can be expressed by a B\xfcchi $\\omega$-automaton. But, apparently, B\xfcchi automata are a more powerful, expressive model. I've heard somewhere that B\xfcchi automata are equivalent to linear-time $\\mu$-calculus (that is, $\\mu$-calculus with usual fixpoints and only one temporal operator: $\\mathbf{X}$). </p>\n\n<p>Is there an algorithm (constructive proof) of this equality?</p>\n", 'ViewCount': '445', 'Title': u'Equivalence of B\xfcchi automata and linear $\\mu$-calculus', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-14T13:06:54.697', 'LastEditDate': '2012-07-14T13:06:54.697', 'AnswerCount': '2', 'CommentCount': '13', 'Score': '20', 'PostTypeId': '1', 'OwnerUserId': '147', 'Tags': '<logic><automata><formal-methods><linear-temporal-logic><buchi-automata>', 'CreationDate': '2012-03-07T20:53:40.587', 'FavoriteCount': '4', 'Id': '108'},371:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The halting problem cannot be solved in the general case. It is possible to come up with defined rules that restrict allowed inputs and can the halting problem be solved for that special case?</p>\n\n<p>For example, it seems likely that a language that does not allow loops for instance, would be very easy to tell if the program would halt or not.</p>\n\n<p>The problem I'm trying to solve right now is that I'm trying to make a script checker that checks for the validity of the program. Can halting problem be solved if I know exactly what to expect from script writers, meaning very predictable inputs. If this cannot be solved exactly, what are some good approximation techniques to solve this?</p>\n", 'ViewCount': '242', 'Title': 'Is it possible to solve the halting problem if you have a constrained or a predictable input?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-13T00:49:09.953', 'LastEditDate': '2012-03-13T00:20:34.387', 'AnswerCount': '5', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '5', 'Tags': '<computability><undecidability><software-engineering><formal-methods>', 'CreationDate': '2012-03-12T23:00:03.130', 'Id': '258'},372:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>It is not uncommon to see students starting their PhDs with only a limited background in mathematics and the formal aspects of computer science. Obviously it will be very difficult for such students to become theoretical computer scientists, but it would be good if they could become savvy with using formal methods and reading papers that contain formal methods.</p>\n\n<blockquote>\n  <p>What is a good short term path that starting PhD students could follow to gain the expose required to get them reading papers involving formal methods and eventually writing papers that use such formal methods?</p>\n</blockquote>\n\n<p>In terms of context, I'm thinking more in terms of Theory B and formal verification as the kinds of things that they should learn, but also classical TCS topics such as automata theory.</p>\n", 'ViewCount': '408', 'Title': 'Path to formal methods', 'LastEditorUserId': '31', 'LastActivityDate': '2012-04-24T06:33:17.017', 'LastEditDate': '2012-03-14T17:21:44.037', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '31', 'Tags': '<formal-methods><education>', 'CreationDate': '2012-03-14T16:51:55.943', 'FavoriteCount': '5', 'Id': '386'},373:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '920', 'Title': 'What is coinduction?', 'LastEditDate': '2012-04-22T15:52:25.520', 'AnswerCount': '2', 'Score': '27', 'PostTypeId': '1', 'OwnerUserId': '31', 'FavoriteCount': '8', 'Body': "<p>I've heard of (structural) induction. It allows you to build up finite structures from smaller ones and gives you proof principles for reasoning about such structures. The idea is clear enough.</p>\n\n<blockquote>\n  <p>But what about coinduction? How does it work? How can one say anything conclusive about an infinite structure?</p>\n</blockquote>\n\n<p>There are (at least) two angles to address, namely, coinduction as a way of defining things and as a proof technique. </p>\n\n<blockquote>\n  <p>Regarding coinduction as a proof technique, what is the relationship between coinduction and bisimulation?</p>\n</blockquote>\n", 'Tags': '<logic><proof-techniques><formal-methods><terminology>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T15:52:25.520', 'CommentCount': '1', 'AcceptedAnswerId': '528', 'CreationDate': '2012-03-19T17:34:08.127', 'Id': '525'},374:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '627', 'Title': 'When are two simulations not a bisimulation?', 'LastEditDate': '2012-03-27T03:06:25.847', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '31', 'FavoriteCount': '2', 'Body': '<p>Given a <a href="http://en.wikipedia.org/wiki/State_transition_system">labelled transition system</a> $(S,\\Lambda,\\to)$, where $S$ is a set of states, $\\Lambda$ is a set of labels, and $\\to\\subseteq S\\times\\Lambda\\times S$ is a ternary relation. As usual, write $p \\stackrel\\alpha\\rightarrow q$ for $(p,\\alpha,q)\\in\\to$. The labelled transition $p\\stackrel\\alpha\\to q$ denotes that the system in state $p$ changes state to $q$ with label $\\alpha$, meaning that $\\alpha$ is some observable action that causes the state change.</p>\n\n<p>Now a  relation $R \\subseteq S \\times S$ is a called a <em>simulation</em> iff\n$$ \\forall (p,q)\\in R, \r\n   \\text{ if } p \\stackrel\\alpha\\rightarrow p&#39;\r\n   \\text{ then } \\exists q&#39;, \\;\r\n   q \\stackrel\\alpha\\rightarrow q&#39; \\text{ and } (p&#39;,q&#39;)\\in R.\r\n$$</p>\n\n<p>One LTS is said to <em>simulate</em> another if there exists a simulation relation between them. </p>\n\n<p>Similarly, a relation $R \\subseteq S \\times S$ is a <em>bisimulation</em> iff $\\forall (p,q)\\in R,$ \n$$ \r\n\\begin{array}{l}\r\n   \\text{ if } p \\stackrel\\alpha\\rightarrow p&#39;\r\n   \\text{ then } \\exists q&#39;, \\;\r\n   q \\stackrel\\alpha\\rightarrow q&#39; \\text{ and } (p&#39;,q&#39;)\\in R\r\n\\text{ and } \\\\\r\n\\text{ if } q \\stackrel\\alpha\\rightarrow q&#39;\r\n   \\text{ then } \\exists p&#39;, \\;\r\n   p \\stackrel\\alpha\\rightarrow p&#39; \\text{ and } (p&#39;,q&#39;)\\in R.\r\n\\end{array}\r\n$$</p>\n\n<p>Two LTSs are said to be bisimilar iff there exists a bisimulation between their state spaces.</p>\n\n<p>Clearly these two notions are quite related, but they are not the same.</p>\n\n<blockquote>\n  <p>Under what conditions is it the case that an LTS simulates another and vice versa, but that the two LTSs are not bisimilar?</p>\n</blockquote>\n', 'Tags': '<programming-languages><formal-methods><semantics><process-algebras>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-24T21:05:13.533', 'CommentCount': '0', 'AcceptedAnswerId': '548', 'CreationDate': '2012-03-20T16:28:13.400', 'Id': '541'},375:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '126', 'Title': 'Late and Early Bisimulation', 'LastEditDate': '2012-03-27T03:01:00.267', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '31', 'FavoriteCount': '1', 'Body': '<p>This is a follow up to my earlier questions on <a href="http://cs.stackexchange.com/q/525/31">coinduction</a> and <a href="http://cs.stackexchange.com/q/541/31">bisimulation</a>.</p>\n\n<p>A relation  $R \\subseteq S \\times S$ on the states of an LTS is a <em>bisimulation</em> iff $\\forall (p,q)\\in R,$ \n$$ \r\n\\begin{array}{l}\r\n   \\text{ if } p \\stackrel\\alpha\\rightarrow p&#39;\r\n   \\text{ then } \\exists q&#39;, \\;\r\n   q \\stackrel\\alpha\\rightarrow q&#39; \\text{ and } (p&#39;,q&#39;)\\in R\r\n\\text{ and } \\\\\r\n\\text{ if } q \\stackrel\\alpha\\rightarrow q&#39;\r\n   \\text{ then } \\exists p&#39;, \\;\r\n   p \\stackrel\\alpha\\rightarrow p&#39; \\text{ and } (p&#39;,q&#39;)\\in R.\r\n\\end{array}\r\n$$</p>\n\n<p>This is a very powerful and very natural notion, after you come to appreciate it. But it\'s not the only notion of bisimulation. In special circumstances, such as in the context of the <a href="http://en.wikipedia.org/wiki/%CE%A0-calculus" rel="nofollow">$\\pi$-calculus</a>, other notions such as open, branching, weak, barbed, late and early bisimulation exist, though I do not fully appreciate the differences. But for this question, I want to limit focus just two notions.</p>\n\n<blockquote>\n  <p>What are <em>late</em> and <em>early</em> bisimulation and why would I use one of these notions instead of standard bisimulation?</p>\n</blockquote>\n', 'Tags': '<programming-languages><formal-methods><semantics><process-algebras>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-27T03:01:00.267', 'CommentCount': '2', 'AcceptedAnswerId': '624', 'CreationDate': '2012-03-21T15:58:38.290', 'Id': '614'},376:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>OK, so here is a question from a past test in my Theory of Computation class:</p>\n\n<blockquote>\n  <p>A useless state in a TM is one that is never entered on any input string.  Let $$\\mathrm{USELESS}_{\\mathrm{TM}} = \\{\\langle M, q \\rangle \\mid  q \\text{ is a useless state in }M\\}.$$\n  Prove that $\\mathrm{USELESS}_{\\mathrm{TM}}$ is undecidable. </p>\n</blockquote>\n\n<p>I think I have an answer, but I'm not sure if it is correct.   Will include it in the answer section.</p>\n", 'ViewCount': '765', 'Title': 'A Question relating to a Turing Machine with a useless state', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-25T20:56:08.023', 'LastEditDate': '2012-03-25T20:56:08.023', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '637', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '603', 'Tags': '<computability><undecidability><formal-methods><turing-machines>', 'CreationDate': '2012-03-22T00:21:58.210', 'Id': '636'},377:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '501', 'Title': 'How do you check if two algorithms return the same result for any input?', 'LastEditDate': '2012-05-25T20:16:22.707', 'AnswerCount': '4', 'Score': '9', 'OwnerDisplayName': 'Andres Riofrio', 'PostTypeId': '1', 'OwnerUserId': '1638', 'FavoriteCount': '2', 'Body': u'<p>How do you check if two algorithms (say, Merge sort and Na\xefve sort) return the same result for any input, when the set of all inputs is infinite?</p>\n\n<p><strong>Update:</strong> Thank you <a href="http://cs.stackexchange.com/a/2062/1638">Ben</a> for describing how this is impossible to do algorithmically in the general case. <a href="http://cs.stackexchange.com/a/2063/1638">Dave\'s answer</a> is a great summary of both algorithmic and manual (subject to human wit and metaphor) methods that don\'t always work, but are quite effective.</p>\n', 'Tags': '<computability><formal-methods><software-engineering><software-verification><program-verification>', 'LastEditorUserId': '1638', 'LastActivityDate': '2012-05-25T20:16:22.707', 'CommentCount': '8', 'CreationDate': '2012-05-25T00:03:21.817', 'Id': '2059'},378:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I have a problem with the proof for constructing a GNBA (<a href="https://en.wikipedia.org/wiki/Generalized_B%C3%BCchi_automaton" rel="nofollow">generalized nondeterministic B\xfcchi automaton</a>) for a <a href="https://en.wikipedia.org/wiki/Linear_temporal_logic" rel="nofollow">LTL formula</a>:</p>\n\n<p><strong>Theorem:</strong> For any  LTL formula $\\varphi$ there exists a GNBA $G_{\\varphi}$ over alphabet $2^{AP}$ such that:</p>\n\n<ol>\n<li><p>$\\operatorname{Word}(\\varphi)=L_{\\omega}(G_{\\varphi})$.</p></li>\n<li><p>$G_{\\varphi}$ can be costructed in time and space $2^{O(|\\varphi|)}$, where $|\\varphi|$ is the size of $\\varphi$.</p></li>\n<li><p>The number of accepting states of $G_{\\varphi}$ is bounded above by $O(|\\varphi|)$.</p></li>\n</ol>\n\n<p>My problem lies in the proof of (2), that is, in the proof it says that the number of states in $G_{\\varphi}$ is bounded by  $2^{|\\operatorname{subf}(\\varphi)|}$ but since $|\\operatorname{subf}(\\varphi)| \\leq 2\\cdot|\\varphi|$ (where $\\operatorname{subf}(\\varphi)$ is the set of all subformulae) the number of states is bounded by  $2^{O(|\\varphi|)}$. </p>\n\n<p>But why does $|\\operatorname{subf}(\\varphi)| \\leq 2\\cdot|\\varphi|$ hold? </p>\n', 'ViewCount': '75', 'Title': 'Time to construct a GNBA for LTL formula', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-30T12:27:09.250', 'LastEditDate': '2012-06-30T12:27:09.250', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2533', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1999', 'Tags': '<logic><automata><formal-methods><model-checking><linear-temporal-logic>', 'CreationDate': '2012-06-28T17:27:44.363', 'Id': '2531'},379:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>I wanted ask if you know an algorithm to find the witness for $EU(\\phi_1,\\phi_2)$ (CTL formula "Exist Until")  using BDDs (<a href="http://en.wikipedia.org/wiki/Binary_decision_diagram" rel="nofollow">Binary Decision Diagram</a>). In pratice you should use the fixed point for calculating $EU(\\phi_1,\\phi_2)$, that is:</p>\n\n<p>$\\qquad \\displaystyle EU(\\phi_1,\\phi_2)=\\mu.Q (\\phi_2 \\vee (\\phi_1 \\wedge EX Q)) $</p>\n\n<p>Unwinding the recursion, we get:</p>\n\n<p>$\\qquad \\displaystyle \\begin{align}\n  Q_0 &amp;= \\textrm{false} \\\\\n  Q_1 &amp;= \\phi_2 \\\\\n  Q_2 &amp;= \\phi_2 \\vee (\\phi_1 \\wedge EX \\phi_2) \\\\\n  \\ \\vdots\n\\end{align}$</p>\n\n<p>and so on.</p>\n\n<p>To generate a witness (path) we can do a forward reachability check within the sequence of $Q_i\u2019s$, that is find a path</p>\n\n<p>$\\qquad \\displaystyle \\pi= s_1 \\rightarrow s_2 \\rightarrow \\cdots \\rightarrow s_n$ </p>\n\n<p>such that $s_i \\in Q_{n-i} \\cap R(s_{i-1})$ (where $R(s_{i-1})= \\{ s \\mid R(s_{i-1},s) \\}$ and $R(s_{i-1},s$) is the transition from $s_{i-1}$ to $s$ ) where $s_0 \\in Q_n $ and $s_n \\in Q_1=\\phi_2$. </p>\n\n<p>How you can do this with BDDs?</p>\n', 'ViewCount': '108', 'Title': 'Witness for the $EU(\\phi_1,\\phi_2)$ using BDDs', 'LastEditorUserId': '472', 'LastActivityDate': '2012-07-12T14:44:09.257', 'LastEditDate': '2012-07-09T21:24:33.637', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '2695', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1999', 'Tags': '<formal-methods><model-checking>', 'CreationDate': '2012-07-07T15:58:13.927', 'Id': '2641'},3710:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am teaching myself program verification and am currently learning <a href="http://en.wikipedia.org/wiki/Proof_assistant" rel="nofollow">proof assistants</a>. I have the book <a href="http://www.cambridge.org/gb/knowledge/isbn/item2327697/?site_locale=en_GB" rel="nofollow">Handbook of Practical Logic and Automated Reasoning</a> which gives the proofs necessary for the understanding of such a system, but more importantly for me it also gives an implementation of the necessary algorithms as <a href="http://www.cl.cam.ac.uk/~jrh13/atp/index.html" rel="nofollow">OCAML source</a>.</p>\n\n<p>I know that some of the tools listed in <a href="http://en.wikipedia.org/wiki/List_of_model_checking_tools" rel="nofollow">Wikipedia: Model Checking tools</a> and <a href="http://anna.fi.muni.cz/yahoda/" rel="nofollow">YAHODA: Verifications Tools Database</a> are open source, but I also prefer it when the theory, proofs, algorithms and source code are presented at the same time reinforcing each other, and in a progression building up to a final application.</p>\n\n<p>Is there such a book for model checking?</p>\n\n<p>EDIT </p>\n\n<p>I may have found what I am looking for in <a href="http://www.springer.com/computer/theoretical+computer+science/book/978-1-4471-4128-0" rel="nofollow">Mathematical Logic for Computer Science</a> with <a href="http://code.google.com/p/mlcs/" rel="nofollow">Prolog source</a>. As I don\'t have the book, does anyone know if this book fits the requirement?</p>\n', 'ViewCount': '76', 'Title': 'Looking for a book that derives and constructs a model checking application', 'LastEditorUserId': '268', 'LastActivityDate': '2012-07-29T02:07:34.563', 'LastEditDate': '2012-07-28T21:16:21.650', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2931', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<reference-request><formal-methods><proof-assistants><model-checking>', 'CreationDate': '2012-07-27T13:10:10.487', 'Id': '2923'},3711:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Does any one know how to implement the simulation relation on two <a href="https://en.wikipedia.org/wiki/State_transition_system" rel="nofollow">labelled transition systems</a> (LTS)? </p>\n\n<p>I know how to do it for branching bi-simulation. The signature refinement theorem is used for that purpose which has the time complexity of $O(n^3)$ on cyclic LTSs. Is the signature refinement technique useful for simulation also?</p>\n\n<p>Is there any binary relation called branching simulation? Any idea how to implement it?</p>\n\n<p>What I would like to do is to write a program such that:</p>\n\n<ul>\n<li>Input: Given two labelled transition systems with silent steps</li>\n<li>Output1: Does one simulates the other one?</li>\n<li>Output2: Are they bisimilar?</li>\n<li>Output3: Are they branching bisimilar?</li>\n<li>Output4: Does one branching simulate the other one?</li>\n</ul>\n\n<p>The following illustrates the definitions of the above relations:</p>\n\n<ol>\n<li><p>simulate: An LTS ($L_1$) simulates another LTS ($L_2$) if there exists a binary relation $R$ over the states of the two transition systems such that every transition of $L_2$ can be matched by a transition of $L_1$. Note that simulation is not an equivalence relation.</p></li>\n<li><p>bisimilar: An LTS ($L_1$) and an LTS ($L_2$) are said to be bisimular if there exists a relation $R$ between the states of these transition systems such that both $R$ and $R^{-1}$ are simulations. Note that bisimularity is an equivalence relation.  </p></li>\n<li><p>branching bisimilarity: is same as bisimilarity but transition systems may have silent steps. Those silent steps ($\\tau$ actions) that do not change the behavior of the process are eliminated. Note that branching bisimilarity is an equivalence relation.</p></li>\n<li><p>branching similarity: I actually have never seen the definition of branching similarity in any context, but it should be the same as similarity. However, the transition systems may have the silent steps.</p></li>\n</ol>\n\n<p>The paper <a href="http://dx.doi.org/10.1016/S1571-0661%2805%2980099-4" rel="nofollow">Distributed Branching Bisimulation Reduction of State Spaces</a> by S. Blom and S. Orzan explains an algorithm to reduce the size of an LTS with respect to branching bisimilarity. The signature refinement theorem is used for that purpose. How it works is roughly as follows: </p>\n\n<p>the algorithm starts by constructing a partition (a set of blocks) of states and terminates once the partition is stable. In a stable partition, two states are branching bisimilar if they belong to the same block. </p>\n\n<p>The above algorithm can also be used to verify whether two LTSs are branching bisimilar or bisimilar. How it works is as follows:</p>\n\n<p>Let LTS, $L_3 = L_1 \\cup L_2$, then if after branching reduction, using the above algorithm, the initial states of $L_1$ and $L_2$ both belong to the same block then they are branching bisimular. The above algorithm has time complexity $O(n^3)$ and space complexity $O(n^2)$.</p>\n\n<p>Question: How can I do the same with branching simulate and simulate relations? </p>\n', 'ViewCount': '132', 'Title': 'How to implement simulation on two LTSs?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-03T21:55:49.257', 'LastEditDate': '2012-08-02T06:34:09.370', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2333', 'Tags': '<automata><formal-methods><process-algebras>', 'CreationDate': '2012-07-31T23:51:35.737', 'FavoriteCount': '1', 'Id': '2976'},3712:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '205', 'Title': 'Introduction into first order logic verification', 'LastEditDate': '2012-08-13T05:27:52.237', 'AnswerCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2436', 'FavoriteCount': '1', 'Body': '<p>I am trying to teach myself different approaches to software verification. I have read some articles. As far as I learned, propositional logic with temporal generally uses model checking with SAT solvers (in ongoing - reactive systems), but what about first order Logic with temporal? Does it use theorem provers? Or can it also use SAT?</p>\n\n<p>Any pointers to books or articles for beginners in this matter is much appreciated.</p>\n', 'Tags': '<reference-request><logic><formal-methods><sat-solvers><software-verification>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-08-13T05:27:52.237', 'CommentCount': '2', 'AcceptedAnswerId': '3114', 'CreationDate': '2012-08-09T20:52:33.677', 'Id': '3110'},3713:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '70', 'Title': 'Reference Request for Synthesis', 'LastEditDate': '2013-01-27T16:31:43.847', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2644', 'FavoriteCount': '1', 'Body': '<p>New to the world of software verification and synthesis. It was suggested to me that the book "Principles of Model Checking" is a good reference for verification, but I am clueless about synthesis. Could someone refer a good book?</p>\n', 'Tags': '<reference-request><formal-methods>', 'LastEditorUserId': '2100', 'LastActivityDate': '2013-01-27T16:31:43.847', 'CommentCount': '10', 'AcceptedAnswerId': '6948', 'CreationDate': '2012-08-26T21:17:54.387', 'Id': '3339'},3714:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p>"Alan Turing proved in 1936 that a general algorithm to solve the\n  halting problem for <em>all</em> possible program-input pairs cannot exist"</p>\n</blockquote>\n\n<p>Can I find a general algorithm to solve the halting problem for <em>some</em> possible program input pairs? </p>\n\n<p>Can I find a programming language (or languages), where I for every kind of program in this language, it can decide if the program terminates or run forever?</p>\n', 'ViewCount': '654', 'Title': u'Algorithm to solve Turing\'s "Halting problem\u200d\u200b"', 'LastEditorUserId': '41', 'LastActivityDate': '2013-04-05T11:21:40.253', 'LastEditDate': '2012-10-03T19:12:15.243', 'AnswerCount': '6', 'CommentCount': '3', 'Score': '11', 'OwnerDisplayName': 'user11775', 'PostTypeId': '1', 'Tags': '<computability><formal-methods><halting-problem><software-verification>', 'CreationDate': '2011-12-08T17:52:03.623', 'FavoriteCount': '3', 'Id': '4856'},3715:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If the definition of Initial Algebra is:</p>\n\n<p>"An object is initial if there exists a unique morphism from the object to every\nobject in the category"</p>\n\n<p>Why do we need such object, and could any one give an example ?</p>\n', 'ViewCount': '151', 'Title': 'Initial Algebra example', 'LastEditorUserId': '31', 'LastActivityDate': '2013-01-18T10:08:50.310', 'LastEditDate': '2013-01-17T15:48:08.647', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1584', 'Tags': '<semantics><formal-methods>', 'CreationDate': '2013-01-17T11:56:10.557', 'FavoriteCount': '1', 'Id': '8985'},3716:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Compute a BDD for $B_{1} \\wedge B_{2}$ by using an algorithm that applies dynamic programming. Document the execution of the algorithm by indicating pairs of BDDs $(q_{1},q_{2})$ and the BDD $q_{1} \\wedge q_{2}$ computed by the algorithm. Suffice it to indicate only the effectively required pairs of BDDs. Furthermore, for an arbitrary BDD $B$ you can use the equations $B \\wedge F=F$, $F \\wedge B=F$, $B \\wedge T=B$ and $T \\wedge B=B$.</p>\n\n<p><img src="http://i.stack.imgur.com/k8gWl.png" alt="enter image description here"></p>\n\n<p>I manage to do the first steps, but then I fail, because I don\'t know how to find the terminal node (see question mark) and also because of the fact that $x_{2}$ does not exist in $B_{2}$:  </p>\n\n<p>$\\text{T} \\wedge \\text{F} = \\text{F}$<br>\n$\\text{T} \\wedge \\text{T} = \\text{T}$<br>\n$\\text{F} \\wedge \\text{F} = \\text{F}$<br>\n<img src="http://i.stack.imgur.com/2ma5U.png" alt="enter image description here"></p>\n\n<p>Can somebody help me, please?</p>\n', 'ViewCount': '135', 'Title': 'Logical conjunction of two binary decision diagrams', 'LastActivityDate': '2013-05-02T21:09:23.437', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4713', 'Tags': '<formal-methods>', 'CreationDate': '2013-05-02T21:09:23.437', 'Id': '11740'},3717:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<blockquote>\n  <p>Let $p$ be the six-figure Boolean function with the following definition:  </p>\n  \n  <p>$p(x_{0},x_{1},x_{2},x_{3},x_{4},x_{5})=\\begin{cases}\n  true &amp; \\text{if } x_{0}=x_{5} \\text{ and } x_{1}=x_{4} \\text{ and } x_{2}=x_{3}, \\\\\n  false &amp; \\text{else.}\n\\end{cases}$</p>\n  \n  <p>This function obviously yields $true$ iff $x_{0}x_{1}x_{2}x_{3}x_{4}x_{5}$ is a palindrome. Provide a BDD for $p$ relative to a variable ordering of your choice.</p>\n</blockquote>\n\n<p>My problems begin when I try to define an appropriate variable ordering, so I am only able to guess it: $x_{0}=x_{5} &lt; x_{1}=x_{4} &lt; x_{2}=x_{3}$.\nI'm actually pretty lost with this exercise and any help is much appreciated (sorry for not being able to provide a better own approach).</p>\n", 'ViewCount': '153', 'Title': 'Binary decision diagram for a six-figure Boolean function', 'LastEditorUserId': '4713', 'LastActivityDate': '2013-05-03T13:59:31.670', 'LastEditDate': '2013-05-03T13:59:31.670', 'AnswerCount': '3', 'CommentCount': '8', 'AcceptedAnswerId': '11757', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4713', 'Tags': '<formal-methods>', 'CreationDate': '2013-05-02T21:44:05.300', 'Id': '11741'},3718:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>We have some programs in a very basic imperative language, the programs contain some basic features: assignment, condition, loop, scalar variables, 1-dimensional arrays and 2-dimensional arrays... Note that a variable or an array may not be initialized (or already hold a value before the execution of a program).</p>\n\n<p>My question is... is there some existing work to identify all the dependents and precedents of a program by static analysis of the syntax, without executing the program? Or, is it very trivial to do that?</p>\n\n<p>Without giving a formal definition of dependent and precedent, I illustrate these 2 notions by the following program:</p>\n\n<pre><code>a[2,2] = 0;\ni = 1;\nWhile i &lt;= 10 do {\n  a[2,2] = a[2,2] + a[i,1]; \n  i = i + 1\n}\n</code></pre>\n\n<p>Just from the syntax of the program, we can say, the script precedes <code>a[2,2]</code>, because the value of <code>a[2,2]</code> is totally determined by the execution of the program. Also, we can say, the script depends on <code>a[1,1]</code> to <code>a[10, 1]</code>, because the values of <code>a[1,1]</code> to <code>a[10, 1]</code> determine the running of the program.</p>\n\n<p>I guess roughly we can say, if a variable is on the right side of the first assignment containing it, the script depends on it; if a variable ever appears on the left side of an assignment, the script precedes it. A variable can be both precedent and dependent for a script at same time.</p>\n\n<p>So, is it really that trivial? Which elements may complicate the issue? Is there some existing research?</p>\n', 'ViewCount': '46', 'Title': 'Trace dependents & precedents of a program in an imperative language', 'LastActivityDate': '2013-05-18T23:43:42.317', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12127', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '5008', 'Tags': '<programming-languages><formal-methods>', 'CreationDate': '2013-05-18T20:44:42.317', 'Id': '12125'},3719:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When trying to decide on the choice of a programming language for a\nspecific task, people will often tell me: "use this language because it\nhas the best library for the type of problems you are addressing".</p>\n\n<p>I would rather choose my language for its intrinsic qualities as a\nprogramming medium. That implies that libraries should be more\nuniversally usable.</p>\n\n<p>What work has there been to create programming libraries that could be\nprogrammed and used in different languages, being mechanically adapted\nfrom one to the other on the basis of a standardized interface\nlanguage/formalism (or any other mean)? How succesful has it been?</p>\n\n<p>For example, I found one system that claims to do that : <a href="http://msdn.microsoft.com/en-us/library/12a7a7h3.aspx" rel="nofollow">Microsoft\'s .NET\nFramework</a>.\nThey say it is based on a Common Language Specification (CLS) which is defined in the <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm" rel="nofollow">ECMA-335 Standard: Common Language Infrastructure</a>. </p>\n\n<p>Are there others? What about free-software frameworks?</p>\n\n<p>Pointers to relevant papers or web sites are an answer. A survey would\nbe best.</p>\n\n<p><strong>Note</strong> (June 7, 2013): this question is more controversial than is visible.\nHowever, I cannot fathom the nature of the controversy. Some people\nsupport the question and/or make cogent comments. But the people who\nseem unhappy about it just downvote without a word of explanation. I\nam sure they have a good reason to do so. But it would better help our\nunderstanding of the issues, or possibly of the lack of issues, if\nthey were a little more explicit as to what irks them.</p>\n', 'ViewCount': '123', 'Title': 'Language independent software libraries', 'LastEditorUserId': '8321', 'LastActivityDate': '2013-06-07T23:42:46.673', 'LastEditDate': '2013-06-07T23:42:46.673', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8321', 'Tags': '<programming-languages><formal-methods><typing>', 'CreationDate': '2013-06-03T16:40:06.870', 'FavoriteCount': '1', 'Id': '12447'},3720:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p><strong>Introduction</strong><br>\nFor a paper I need contracts, which are also referred to as Design by Contract (DbC)<a href="http://www.eclipse.org/forums/index.php?t=thread&amp;frm_id=157" rel="nofollow">1</a>, and conceptually go back to Hoare[2]. For my work I need to apply contracts to Java bytecode. The question is only about using contracts on Java bytecode, nothing more.</p>\n\n<p>If you ask, why do you want to use contracts on Java bytecode, there is a reason. The reason is that I use a Java extension. This Java extension takes source code consisting of extended Java code, from which it generates bytecode. I want to use this Java extension and additionally I want to use contracts. The extension doesn\'t support contracts. So I have my extended Java code, I apply to it the compiler of the Java extension and I get Java bytecode. On this resulting bytecode I want to apply contracts. </p>\n\n<p>The Java extension is called Object Teams[4], also called eclipse object teams. The Java extension allows to use dynamic collaborations and aspects, which are not part of regular Java code. </p>\n\n<p>Right now I only need a hack or workaround to get one or two small examples working.</p>\n\n<p><strong>My idea so far:</strong><br>\nThis is irrelevant to the question. But it shows that my current plan is cumbersome and I need a better solution (thus the question). Also, perhaps someone has worked with JML/OpenJML and might know how to do this plan but better. </p>\n\n<p>There is a tool for contracts for Java language. The tool is called java modeling language(JML)[3][5]. The tool does not support contract for Java bytecode. The tool only supports contracts on Java source code. I want to rewrite part of the tool to support contracts on java bytecode (a solution to my question but a cumbersome one).</p>\n\n<p>Currently there is only one working version of the java modeling language(JML), which is called OpenJML[6]. I plan to use OpenJML on Java bytecode (remember, OpenJML doesn\'t support contracts for bytecode, only contracts for Java source code). I don\'t want to use contracts on any bytecode. I want to use contract on bytecode that is generated by a Java extension. (The Java extension is called ObjectTeams, but this is irrelevant for the question).</p>\n\n<p>(Annotations mean annotations that are part of the Java language, e.g., "@Overrides".)</p>\n\n<p>The approach would be to search for specific annotations in the bytecode that is generated by a Java extension. Those specific annotations specify contracts. I have to look for the specific annotations in the bytecode (bytecode that is generated by a Java extension), compile them to Java guard expressions, i.e., code that throws an exception if the contracts are not honored. I can get the compiled Java guard expression by using the library behind OpenJML. Then I need to add the byte code of the Java guard expression at the place where I found the specific annotations that represent contracts. </p>\n\n<p><strong>My question:</strong><br>\nUsing OpenJML seems possible, but difficult to achieve. Right now I just need a solution that works for one or two small examples, so the solution can be a hack or just a temporary solution. As my approach via OpenJML is probably difficult to achieve and further will take quite some time, I look for different solutions.</p>\n\n<p><strong>Question:</strong> <em>What options would you recommend to apply contracts (design by contract) for java bytecode?</em></p>\n\n<p>Requirements:  </p>\n\n<ol>\n<li>a up to date tool or library (i.e., not a project where development\nhas ceased or stopped three years ago)</li>\n<li>ideally, it should be straightforward to use the tool or library\n(i.e., not a project with zero or almost no documentation)</li>\n</ol>\n\n<h2>--</h2>\n\n<hr>\n\n<p><em><strong>Update / Clarification:</em></strong>  </p>\n\n<ul>\n<li>I forgot to mention that don\'t need any form of static checking. I<br>\nonly need to check  that the contracts hold during run time. Further\nI only need to use very basic contracts (pre- and postcondition,<br>\ninvariants) applied to only a few methods of my program.</li>\n<li>As Dave as pointed out in the comments, there may be another option\nto apply contracts together with Object Teams. This would mean\nmodifying or extending Object Teams and the CoreJDT module of Object\nTeams (it\'s in the comments).</li>\n<li>I also got <a href="http://www.eclipse.org/forums/index.php?t=thread&amp;frm_id=157" rel="nofollow">a reply from the creator of Object Teams</a> that using JML and Object Teams together via JDT isn\'t an easy fix.</li>\n</ul>\n\n<p>References:</p>\n\n<p><a href="http://www.eclipse.org/forums/index.php?t=thread&amp;frm_id=157" rel="nofollow">1</a> B. Meyer. Applying Design by Contract. Computer, 25(10):40{51, 1992.</p>\n\n<p>[2] C. A. R. Hoare. Proof of correctness of data representations. Acta Informatica, 1(4):271\u201381, 1972.</p>\n\n<p>[3] Lilian Burdy, Yoonsik Cheon, David R. Cok, Michael Ernst, Joseph R.Kiniry, Gary T. Leavens, K. Rustan M. Leino, and Erik Poll. An overviewof JML tools and applications. International Journal on Software Tools for Technology Transfer (STTT), 7(3):212\u2013232, 2005.</p>\n\n<p>[4] <a href="http://www.eclipse.org/objectteams/" rel="nofollow">http://www.eclipse.org/objectteams/</a> </p>\n\n<p>[5] <a href="http://www.eecs.ucf.edu/~leavens/JML//index.shtml" rel="nofollow">http://www.eecs.ucf.edu/~leavens/JML//index.shtml</a> </p>\n\n<p>[6] <a href="http://jmlspecs.sourceforge.net/" rel="nofollow">http://jmlspecs.sourceforge.net/</a></p>\n', 'ViewCount': '101', 'Title': 'Contracts for Java Bytecode', 'LastEditorUserId': '1829', 'LastActivityDate': '2013-07-07T21:46:18.590', 'LastEditDate': '2013-07-07T18:12:30.883', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1829', 'Tags': '<programming-languages><formal-methods><object-oriented><java>', 'CreationDate': '2013-07-07T03:32:32.007', 'FavoriteCount': '1', 'Id': '13121'},3721:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to cobble together a survey of different techniques used in formal verification of software. I need a classification and brief description of various methods. It could be chronological, by application domain, by mathematical model, by process or whatever.</p>\n\n<p>For example, the following paper considers only fully automated techniques that are in vogue:</p>\n\n<p>A survey of automated techniques for formal software verification\n<a href="http://www.eecs.berkeley.edu/~alanmi/publications/other/softver_tutorial.pdf" rel="nofollow">http://www.eecs.berkeley.edu/~alanmi/publications/other/softver_tutorial.pdf</a></p>\n\n<p>I want something a little more comprehensive. A short description of each approach or differences between approaches would also help. It is a little confusing because different authors seem to use different terms/classifications. Sometimes static analysis is taken to include model checking, and deductive verification does not find mention.</p>\n\n<p>EDIT: So far I have model checking, deductive verification, static analysis and program derivation as four broad categories. Could someone explain the main principle of these techniques/differences between them? Or if there are some techniques that are left out by the above classification. I would also like to further divide these categories into sub-categories</p>\n', 'ViewCount': '93', 'ClosedDate': '2013-11-02T22:00:31.233', 'Title': 'Taxonomy of formal methods of program verification', 'LastEditorUserId': '10708', 'LastActivityDate': '2013-10-29T15:09:58.083', 'LastEditDate': '2013-10-29T15:09:58.083', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10708', 'Tags': '<formal-methods><software-verification><program-verification>', 'CreationDate': '2013-10-13T15:57:36.033', 'Id': '16040'},3722:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>A link to the transcript of the manuscript: <a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1300.html" rel="nofollow">http://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1300.html</a></p>\n\n<p>My questions:</p>\n\n<p>What does Dijkstra mean by: </p>\n\n<blockquote>\n  <p>"Do not introduce priority [precedence] rules that destroy symmetry. I remember how\n  much more pleasant the predicate calculus became to work with after we\n  had decided to give con- and disjunction the same binding power and\n  thus to consider p \u2227 q \u2228 r an ill-formed formula."?</p>\n</blockquote>\n\n<p>Specifically: can you illustrate how a precedence rule where conjunction has higher precedence than disjunction would destroy symmetry?</p>\n\n<p>Then, what does he mean by (please note that he uses the "." operator to denote function application): </p>\n\n<blockquote>\n  <p>"As time went on, I learned to appreciate expressions built with\n  operators as a way of avoiding functional notation. We can write the\n  difference  a\u2212b  as  dif.(a,\u2009b) or exc.(b,\u2009a), where min and exc are\n  functions of an ordered pair. (I believe that the notion of \u201cfunction\n  of 2 arguments\u201d is now obsolete.) But we can also write the \u201ccurried\u201d\n  versions (min.\u200aa).\u200ab and (sub.\u200ab).\u200aa in which, for instance, sub is a\n  higher-order function such that sub.\u200ab decreases its argument by b (so\n  that sub.(\u22121) would be the successor function). Functions dif, exc,\n  min and sub are different functions and as soon as the operation of\n  functional composition enters the game, the distinctions are\n  essential. But as long as we don\u2019t do functional composition, the\n  choice between the four options is irrelevant and writing the\n  expression a\u2212b is a lovely way of avoiding being overspecific."?</p>\n</blockquote>\n\n<p>Specifically: what is the function exc, and how is it that a-b can represent both exc and min? Am I correct in understanding that min is the minimum function?</p>\n', 'ViewCount': '41', 'Title': 'Questions from Dijkstra\'s EWD 1300: "The notational conventions I adopted, and why"', 'LastActivityDate': '2013-12-24T10:20:41.783', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'OwnerDisplayName': 'user12330', 'PostTypeId': '1', 'Tags': '<formal-methods>', 'CreationDate': '2013-12-24T01:41:10.837', 'Id': '19227'},3723:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>Background:</strong><br>\nIn the book of <a href="http://is.ifmo.ru/books/_principles_of_model_checking.pdf" rel="nofollow">Principle of Model Checking (Section 9.2, Page 701)</a>, the semantics of the <code>until</code> modality is defined over some time-divergent path $\\pi \\in s_0 \\Rightarrow^{d_0} s_1 \\Rightarrow^{d_1} \\cdots \\Rightarrow^{d_{i-1}} s_i \\Rightarrow^{d_i} \\cdots$ as follows:</p>\n\n<p>(We can skip the formal definition at your first reading.)<br>\n$\\pi \\models \\Phi \\cup^{J} \\Psi \\iff$<br>\n$\\exists i \\ge 0. s_i + d \\models \\Psi \\textrm{ for some } d \\in [0,d_i] \\textrm{ with } \\sum_{k=0}^{i-1}d_k + d \\in J \\textrm{ and }$\n$\\forall j \\le i. s_j + d\' \\models \\Phi \\lor \\Psi \\textrm{ for any } d\' \\in [0,d_j] \\textrm{ with } \\sum_{k=0}^{j-1} d_k + d\' \\le \\sum_{k=0}^{i-1} d_k + d$.</p>\n\n<blockquote>\n  <p>Intuitively, time-divergent path $\\pi \\in s_0 \\Rightarrow^{d_0} s_1 \\Rightarrow^{d_1} \\cdots \\Rightarrow^{d_{i-1}} s_i \\Rightarrow^{d_i} \\cdots$ satisfies $\\Phi \\cup^{J} \\Psi$ whenever at some time point in $J$, a state is reached satisfying $\\Psi$ and at all previous time instants <strong>$\\Phi \\lor \\Psi$</strong> holds.</p>\n</blockquote>\n\n<p>However, in the book of Model Checking by E.M. Clarke (Section 16.3, Page 256), the semantics of the <code>until</code> modality is given as follows:</p>\n\n<blockquote>\n  <p>$s \\models E[\\Phi \\cup_{[a,b]} \\Psi]$ if and only if there exists a path $\\pi = s_0 s_1 s_2 \\cdots$ starting at $s = s_0$ and some $i$ such that $a \\le i \\le b$ and $s_i \\models \\Psi$ and for all $j &lt; i, s_j \\models \\Phi$.</p>\n</blockquote>\n\n<p>As indicated, the second definition is stricter than the first one in that it does not allow the case of $\\lnot \\Phi \\land \\Psi$ before reaching a state satisfying $\\Psi$.</p>\n\n<p><strong>Problem:</strong>    </p>\n\n<blockquote>\n  <ol>\n  <li>Why are there two different <code>until</code> ($\\cup$) semantics in Timed Computation Tree Logic (TCTL)?</li>\n  <li>Which one is more official?</li>\n  </ol>\n</blockquote>\n', 'ViewCount': '45', 'Title': 'Why are there two different `until` ($\\cup$) semantics in Timed Computation Tree Logic?', 'LastActivityDate': '2013-12-29T07:05:45.310', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4911', 'Tags': '<formal-languages><formal-methods><model-checking>', 'CreationDate': '2013-12-28T09:23:35.717', 'Id': '19338'},3724:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>In my project, there is one important step to automatically verify a timed automata with TCTL formulae. I briefly surveyed the tool UPPAAL that provides a GUI to construct a timed automata and to specify CTL formulae. However, I didn't find the api to invoke.</p>\n\n<p>Is there any tools with api provided for verifying TCTL formulae over timed automata can be imported into my project? Such that I can automatically send the timed automata and the TCTL formulae to the tool and get the satisfaction result.</p>\n\n<p>And, the tool UPPAAL can only verify a CTL subset of TCTL over a timed automata. On this constraint, if I want to verify a TCTL formula with interval constraint $\\Phi$ (such as $\\exists (\\Phi_1 U^J \\Phi_2)$), I have to extend each location $l$ of the automata with an extra clock $z$, and verify each state $l\\{z:=0\\}\\models \\exists (\\Phi_1 U (z\\in J \\wedge \\Phi_2))$. And I have to wrap a CTL detection algorithm for nested formulae. Is there any tool can directly verify TCTL formulae over a timed automata?</p>\n", 'ViewCount': '35', 'Title': 'Is there any open-source tools for verifying TCTL formulae over timed automata can be imported into my project?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-15T08:42:29.790', 'LastEditDate': '2014-01-15T08:42:29.790', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12457', 'Tags': '<formal-methods><model-checking><software-verification>', 'CreationDate': '2014-01-15T06:12:27.823', 'Id': '19739'},3725:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can you tell me what mathematical background (concrete themes) should I have for studying and doing some investigations (in future) in programming languages, compilers and formal methods in software engineering? For instance, discrete mathematic course contains combinatorics, numbers theory, graphs and etc. But I think not all themes are needed to me at the first step. Can you highligh concrete themes of mathematics which are needed for programming languages, compilers and formal methods in software engineering? And may recommend some books and articles about this themes.</p>\n', 'ViewCount': '78', 'ClosedDate': '2014-02-24T16:41:24.710', 'Title': 'Mathematical background for programming languages, compilers and formal methods in software engineering', 'LastActivityDate': '2014-02-24T01:40:14.143', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '21958', 'Score': '3', 'OwnerDisplayName': 'Igor B', 'PostTypeId': '1', 'OwnerUserId': '15301', 'Tags': '<programming-languages><compilers><formal-methods>', 'CreationDate': '2014-02-22T17:01:20.457', 'Id': '21956'},3726:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $X_1,\\dots,X_n$ be $n$ boolean variables.  I have an unknown predicate $P(X_1,\\dots,X_n)$ on these boolean variables.  Of course, I can view the predicate as a function $f_P : \\{0,1\\}^n \\to \\{0,1\\}$ that maps a vector of $n$ boolean values to the truth value of this predicate on those inputs.</p>\n\n<p>Now I have a truth table of pairs $(x_1,y_1), \\dots, (x_m,y_m)$, and I want to find a predicate $P$ that is consistent with these pairs and that is as "simple" as possible.  In particular, I have two variants of the problem:</p>\n\n<p><strong>Problem 1.</strong> Given $(x_1,y_1), \\dots, (x_m,y_m)$, find a predicate $P$ such that (1) it agrees with the entire truth table (i.e., for all $i$, $f_P(x_i)=y_i$), and (2) out of all such predicates, the complexity of $P$ is minimized.</p>\n\n<p><strong>Problem 2.</strong> Given $(x_1,y_1), \\dots, (x_m,y_m)$ and a threshold $t$, find a predicate $P$ such that (1) $P$ agrees with at least a $t/m$ fraction of the truth table (i.e., there are at least $t$ values of $i$ such that $f_P(x_i)=y_i$), and (2) out of all such predicates, the complexity of $P$ is minimized.</p>\n\n<p>Are there any algorithms for solving either of these problems, in a way that is more efficient than enumerating all predicates?</p>\n\n<p>Of course, to make the problem well-posed, we must agree on a definition of the complexity of a predicate.  Here I can see any number of realistic complexity metrics.  One metric might be that, when we express $P$ as a formula in boolean logic, the length of that formula.  Another might be the number of operators in that formula, or the nesting depth of the formula.  I am interested in any and all algorithms for any plausible notion of complexity.</p>\n\n<p>This can be viewed as a kind of learning problem, where Occam\'s razor suggests that low-complexity predicates are a priori more likely than high-complexity predicates.</p>\n', 'ViewCount': '30', 'Title': 'Boolean formula that agrees with most truth assignments', 'LastActivityDate': '2014-02-28T03:52:00.653', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<optimization><logic><formal-methods><learning-theory><boolean-algebra>', 'CreationDate': '2014-02-28T03:52:00.653', 'FavoriteCount': '1', 'Id': '22122'},3727:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>How to approach this type of questions??\nThe following are Communicating Sequential Process notations. A, B, C are processes with aa, bb, cc are events. A || B  means parallel composition of A and synchronized on all the common events of A and B.</p>\n\n<p>A = aa->bb->A;</p>\n\n<p>B = aa -> bb -> cc -> aa ->B;</p>\n\n<p>C = aa -> bb -> cc -> C</p>\n\n<p>P = A || B || C;</p>\n\n<p>Is the system P deadlock-free??</p>\n', 'ViewCount': '13', 'ClosedDate': '2014-04-29T23:35:27.977', 'Title': 'Is the system P deadlock-free?', 'LastEditorUserId': '15446', 'LastActivityDate': '2014-04-26T17:21:57.647', 'LastEditDate': '2014-04-26T17:21:57.647', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '15446', 'Tags': '<formal-methods>', 'CreationDate': '2014-04-26T16:54:17.650', 'Id': '24132'},3728:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Why does Program Synthesis seem to be defined in relation to program verification? Given a correct specification, why can't a program be synthesized (without reference to verification)?</p>\n\n<p>This question is specific to context of reactive program synthesis. For example, some explain that they perform model checking first, then synthesis.</p>\n", 'ViewCount': '23', 'ClosedDate': '2014-05-01T02:42:58.537', 'Title': 'Relation of program synthesis and verification', 'LastEditorUserId': '98', 'LastActivityDate': '2014-05-02T22:08:56.160', 'LastEditDate': '2014-05-02T22:08:56.160', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7579', 'Tags': '<reference-request><formal-methods><program-verification>', 'CreationDate': '2014-05-01T01:24:47.047', 'Id': '24283'}