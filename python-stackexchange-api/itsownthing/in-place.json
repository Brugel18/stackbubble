{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1833', 'Title': 'In-place algorithm for interleaving an array', 'LastEditDate': '2012-03-17T00:02:08.030', 'AnswerCount': '2', 'Score': '31', 'PostTypeId': '1', 'OwnerUserId': '139', 'FavoriteCount': '9', 'Body': "<p>You are given an array of $2n$ elements </p>\n\n<p>$$a_1, a_2, \\dots, a_n, b_1, b_2, \\dots b_n$$</p>\n\n<p>The task is to interleave the array, using an in-place algorithm such that the resulting array looks like</p>\n\n<p>$$b_1, a_1, b_2, a_2, \\dots , b_n, a_n$$</p>\n\n<p>If the in-place requirement wasn't there, we could easily create a new array and copy elements giving an $\\mathcal{O}(n)$ time algorithm.</p>\n\n<p>With the in-place requirement, a divide and conquer algorithm bumps up the algorithm to be $\\theta(n \\log n)$.</p>\n\n<p>So the question is:</p>\n\n<blockquote>\n  <p>Is there an $\\mathcal{O}(n)$ time algorithm, which is also in-place?</p>\n</blockquote>\n\n<p>(Note: You can assume the uniform cost WORD RAM model, so in-place translates to $\\mathcal{O}(1)$ space restriction).</p>\n", 'Tags': '<algorithms><in-place><arrays>', 'LastEditorUserId': '139', 'LastActivityDate': '2012-04-05T10:15:30.180', 'CommentCount': '7', 'AcceptedAnswerId': '400', 'CreationDate': '2012-03-13T20:16:32.067', 'Id': '332'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>We are given a set of objects, say integers, $S$. In addition, we are given a predicate $P$, for example $P(i): \\Leftrightarrow i \\geq 0$. We don't know in advance how many elements of $S$ satisfy the predicate $P$, but we would like to sample or choose an element uniformly at random from $S' = \\{ i \\mid i \\in S \\wedge P(i) \\}$.</p>\n\n<p>The naive approach is to scan $S$ and for example record all the integers or indices for which $P$ holds, then choose one of them uniformly at random. The downside is that in the worst-case, we need $|S|$ space.</p>\n\n<p>For large sets or in say a streaming environment the naive approach is not acceptable. Is there an in-place algorithm for the problem?</p>\n", 'ViewCount': '112', 'Title': 'Choosing an element from a set satisfying a predicate uniformly at random in $O(1)$ space', 'LastActivityDate': '2012-07-21T21:45:31.217', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '2856', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<algorithms><randomized-algorithms><streaming-algorithm><in-place>', 'CreationDate': '2012-07-21T21:45:31.217', 'Id': '2855'}},