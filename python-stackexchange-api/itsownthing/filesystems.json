71_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider an filesystem targeted at some embedded devices that does little more than store files in a hierarchical directory structure. This filesystem lacks many of the operations you may be used to in systems such as unix and Windows (for example, its access permissions are completely different and not tied to metadata stored in directories). This filesystem does not allow any kind of hard link or soft link, so every file has a unique name in a strict tree structure.</p>\n\n<p>Is there any benefit to storing a link to the directory itself and to its parent in the on-disk data structure that represents a directory?</p>\n\n<p>Most unix filesystems have <code>.</code> and <code>..</code> entries on disk. I wonder why they don't handle those at the VFS (generic filesystem driver) layer. Is this a historical artifact? Is there a good reason, and if so, which precisely, so I can determine whether it's relevant to my embedded system?</p>\n", 'ViewCount': '154', 'Title': 'Why store self and parent links (. and ..) in a directory entry?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-03-13T13:09:14.807', 'LastEditDate': '2012-03-12T08:13:54.460', 'AnswerCount': '4', 'CommentCount': '3', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<operating-systems><filesystems>', 'CreationDate': '2012-03-11T23:02:15.027', 'Id': '227'},71_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>What are efficient and accurate techniques for monitoring the recoverability and integrity of files in very large preservation archives?</p>\n\n<p>In very large archives, the time taken to recompute checksums periodically (scrubbing) is substantial, perhaps taking more than all the available time depending on the read bandwidth available! Also, each access to a preserved file increases the risk of damage due to hardware or software failure. Tapes are most stable in a cold, dark place far from exposure to the hazards of data centers. Disks are most at risk when the read/write head is flying close to the medium. All approaches are probabilistic, so which are most efficient and accurate?</p>\n\n<p>To give the problem specificity, let's assume a fixed probability of local single-bit errors for each medium (one probability for tape, another for disk, SSD, etc) during a standard time period, and ignore all other types of errors (loss of an entire volume, for instance). We can also assume a fixed read bandwidth for each medium.</p>\n", 'ViewCount': '78', 'Title': 'Monitoring files in preservation archives', 'LastEditorUserId': '1038', 'LastActivityDate': '2012-05-27T07:38:35.820', 'LastEditDate': '2012-04-25T20:23:31.977', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1038', 'Tags': '<filesystems><integrity><digital-preservation>', 'CreationDate': '2012-04-24T22:43:36.573', 'Id': '1490'},71_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u"<p>Suppose I'm renaming a file and the electricity goes off right in the middle. Naively, it looks like the file could be in some \u201chalf-renamed\u201d state. Maybe the name would have half the old name and half the new name. Or maybe the file could disappear altogether because it no longer exists under the old name but it doesn't exist yet under the new name.</p>\n\n<p>How can a filesystem protect against loss of power while a file is renamed? Are these just theoretical techniques or are they used in practice?</p>\n", 'ViewCount': '187', 'Title': 'What if the electricity goes off while a file is being renamed?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-08-03T12:54:15.710', 'LastEditDate': '2012-08-03T09:53:31.963', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '3018', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2344', 'Tags': '<operating-systems><filesystems><fault-tolerance>', 'CreationDate': '2012-08-03T03:18:06.503', 'Id': '3012'},71_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am considering what elements an operating system for Network On Chip systems might have and the issue of file systems looms large. NoCs have an embedded heritage, and their domain of use (at least initially) is likely to be similar tasks to embedded systems.</p>\n\n<p>But I cannot find any studies of embedded system file access patterns - there are a number of published studies on scientific and super computing file access patterns I have been able to read but nothing on embedded systems.</p>\n\n<p>Can anyone point me to some good papers on this?</p>\n', 'ViewCount': '48', 'Title': 'Studies of file access patterns in embedded systems', 'LastEditorUserId': '39', 'LastActivityDate': '2013-04-06T20:02:27.383', 'LastEditDate': '2013-02-04T23:31:05.717', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '2', 'OwnerDisplayName': 'adrianmcmenamin', 'PostTypeId': '1', 'OwnerUserId': '6712', 'Tags': '<reference-request><parallel-computing><filesystems>', 'CreationDate': '2013-02-03T23:04:39.543', 'Id': '9487'},71_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am writing a program to store, retrieve and delete "blocks" of data of varying sizes.</p>\n\n<p>The way it currently works is by keeping a database storing the locations of the blocks and the locations of free space in the file.</p>\n\n<p>The file is split into pages such that in each page there are no two free chunk spaces next to each other (During a delete operation, any free chunks which are adjacent are merged into one bigger chunk)</p>\n\n<p>The problem with this is that I am seeing horrible IO performance when removing a bunch of blocks and inserting new ones of different sizes (blocks range from 1k to about 200k and may be written anywhere in the file provided they fit in an existing free chunk in the file. If no such free chunk is found, a new page is created at the end of the file).</p>\n\n<p>Can anyone suggest a way to improve on this, or maybe point me in the right direction?</p>\n', 'ViewCount': '44', 'Title': 'Random file access in a block based file format', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-28T00:41:38.463', 'LastEditDate': '2013-03-27T12:14:28.923', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7438', 'Tags': '<efficiency><databases><filesystems>', 'CreationDate': '2013-03-27T10:08:47.073', 'Id': '10822'},71_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I don't know whether it was a joke, but once I read what was referred to as a formal definition of a file in a versioning system such as git, hg or svn and that was something like a mathmetaical object like a homeomorphism or so, was that a joke or is there really computer science theory about versioning systems and mathematics of VCS?</p>\n", 'ViewCount': '43', 'Title': 'Is there a formal CS definition of VCS and file versions?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-15T15:30:11.253', 'LastEditDate': '2013-06-15T15:30:11.253', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2529', 'Tags': '<terminology><reference-request><discrete-mathematics><filesystems>', 'CreationDate': '2013-06-13T06:36:29.267', 'FavoriteCount': '1', 'Id': '12652'},71_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I try to understand why <a href="https://en.wikipedia.org/wiki/Fragmentation_%28computing%29" rel="nofollow">fragmentation</a> is a problem for <a href="https://en.wikipedia.org/wiki/NTFS" rel="nofollow">NTFS</a> and <a href="https://en.wikipedia.org/wiki/File_Allocation_Table" rel="nofollow">FAT</a> but not when using <a href="https://en.wikipedia.org/wiki/Inode" rel="nofollow">inodes</a>.\nIn all cases, files are not necessarily stored in a contiguous fashion so I don\'t see the problem for the former two.</p>\n\n<p>So where is the crucial difference?</p>\n', 'ViewCount': '168', 'Title': "Why do some filesystems have fragmentation and others don't?", 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-22T02:46:09.813', 'LastEditDate': '2013-07-19T10:53:57.027', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8546', 'Tags': '<operating-systems><filesystems><storage>', 'CreationDate': '2013-07-19T07:19:23.193', 'Id': '13344'},71_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In file systems, I need to expand a file size by two blocks and need to understand how the linked allocation will process.</p>\n\n<p>initially this is how the file is located in 32 blocks.</p>\n\n<pre><code>file 1 = 1-&gt;7-&gt;18-&gt;19-&gt;31\n</code></pre>\n\n<p>When expand this by two blocks i am wondering how this will link up as there is no more blocks after 32.</p>\n\n<p>Can someone explain me this ?</p>\n\n<p>EDIT 1</p>\n\n<p>There are 3 more files located on the same disk. </p>\n\n<pre><code>file 2 = 2-&gt;5-&gt;6-&gt;12-&gt;16\nfile 3 = 10-&gt;11-&gt;22-&gt;23\nfile 4 = 25-&gt;27-&gt;28\n</code></pre>\n\n<p>They are linked this way. (its not edited nicely)</p>\n\n<p><img src="http://i.stack.imgur.com/mc5On.jpg" alt="enter image description here"></p>\n', 'ViewCount': '30', 'Title': 'how to expand the file size in a linked allocation method of a 32 block disk', 'LastActivityDate': '2013-09-06T04:06:10.193', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10001', 'Tags': '<operating-systems><filesystems>', 'CreationDate': '2013-09-06T04:06:10.193', 'FavoriteCount': '1', 'Id': '14164'},71_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What is the best way to name documents and folders in windows? Im thinging about maybe there will be some conflict in some programs? Or when searching in terminal</p>\n\n<p>This_Is_Best.doc</p>\n\n<p>ThisIsBest.doc</p>\n\n<p>This Is Best.doc</p>\n', 'ViewCount': '20', 'ClosedDate': '2014-02-06T13:25:32.227', 'Title': 'How to name documents in windows?', 'LastActivityDate': '2014-02-06T12:16:27.583', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '21370', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14435', 'Tags': '<filesystems>', 'CreationDate': '2014-02-06T12:10:01.157', 'Id': '21369'},71_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>A file system with 300GByte disk uses a file descriptor with 8 direct block address ,1 indirect block address and 1 doubly indirect block address. The size of each disk block is 128 Bytes and the size of each disk block address is 8 Bytes.What is the maximum possible file size in this filesystem?\nThis is previous year question I could not get the idea and couldn't solve it...plz help</p>\n", 'ViewCount': '27', 'ClosedDate': '2014-02-25T20:18:20.910', 'Title': 'Maximum possible file size in the filesystem', 'LastEditorUserId': '15040', 'LastActivityDate': '2014-02-25T20:17:39.830', 'LastEditDate': '2014-02-25T20:17:39.830', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14880', 'Tags': '<operating-systems><filesystems>', 'CreationDate': '2014-02-25T14:10:07.103', 'Id': '22025'},71_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If there are files or folders the current user should be denied access to, should their sizes be displayed when the user asks, for example with the <code>ls -l</code> command on Linux or the places the Windows Explorer shell puts this information? Alternatively, should the OS show the size without the denied file(s)/folder(s)?</p>\n\n<p>I can see the merits of both sides of this argument. In some cases, the user should be denied access to any information on these files &amp; folders, and that includes their sizes. However, if a user, who is not an administrator at the moment but wants to see how much space is left to install programs etc. (more on Windows than Linux, as Linux has a better permissions system in my opinion), he/she may want to know this. Also, many times the OS denies access to "files that are important to the running of the computer and should never be touched even by super-ultra-mega-users", but if these files get too big, the user may wish to know. Usually there are tools to find this out, and I suppose there is always <em>some</em> way to find out/fix it, but there are always those edge cases.</p>\n\n<p>I am looking at whether the parent/ancestor folder\'s true size should be shown, because I understand there are times where the denied files/folders shouldn\'t be shown at all, much less their sizes. I also acknowledge that there are different sizes the OS can show, such as "size on disk" or "apparent size", so you don\'t have to go into this.</p>\n\n<p>So should the OS deny access to information about the sizes of these files? Should there be a special permission just for sizes of files, or is there already? How do OS\'s usually deal with this?</p>\n', 'ViewCount': '21', 'ClosedDate': '2014-04-25T08:24:26.673', 'Title': 'Should Operating Systems Hide Sizes of Files/Folders the User is Denied Access to?', 'LastEditorUserId': '14777', 'LastActivityDate': '2014-04-23T19:46:26.353', 'LastEditDate': '2014-04-23T18:40:33.850', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14777', 'Tags': '<filesystems>', 'CreationDate': '2014-04-23T18:35:21.007', 'Id': '24054'}