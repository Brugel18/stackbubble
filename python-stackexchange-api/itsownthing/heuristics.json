94_0:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given an instance of SAT, I would like to be able to estimate how difficult it will be to solve the instance.</p>\n\n<p>One way is to run existing solvers, but that kind of defeats the purpose of estimating difficulty. A second way might be looking a the ratio of clauses to variables, as is done for phase transitions in random-SAT, but I am sure better methods exist.</p>\n\n<p>Given an instance of SAT, are there some fast heuristics to measure the difficulty? The only condition is that these heuristics be faster than actually running existing SAT solvers on the instance.</p>\n\n<hr>\n\n<h3>Related question</h3>\n\n<p><a href="http://cstheory.stackexchange.com/q/4375/1037">Which SAT problems are easy?</a> on cstheory.SE. This questions asks about tractable sets of instances. This is a similar question, but not exactly the same. I am really interested in a heuristic that given a single instance, makes some sort of semi-intelligent guess of if the instance will be a hard one to solve.</p>\n', 'ViewCount': '287', 'Title': 'Measuring the difficulty of SAT instances', 'LastActivityDate': '2012-11-27T06:24:05.617', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '917', 'Score': '18', 'PostTypeId': '1', 'OwnerUserId': '55', 'Tags': '<complexity-theory><satisfiability><heuristics>', 'CreationDate': '2012-03-15T05:00:23.853', 'FavoriteCount': '4', 'Id': '407'},94_1:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am currently working on a solution to a problem for which (after a bit of research) the use of a hill climbing, and more specificly a <em>shotgun</em> (or <em>random-restart</em>) <a href="http://en.wikipedia.org/wiki/Hill_climbing" rel="nofollow">hill climbing</a> algorithmic idea seems to be the best fit, as I have no clue how the best start value can be found.</p>\n\n<p>But there is not a lot of information about this type of algorithm except the <a href="http://en.wikipedia.org/wiki/Hill_climbing#Variants" rel="nofollow">rudimentary idea</a> behind it:</p>\n\n<blockquote>\n  <p>[Shotgun] hill climbing is a meta-algorithm built on top of the hill climbing algorithm. It iteratively does hill-climbing, each time with a random initial condition $x_0$. The best $x_m$ is kept: if a new run of hill climbing produces a better $x_m$ than the stored state, it replaces the stored state.</p>\n</blockquote>\n\n<p>If I understand this correctly, this means something like this (assuming maximisation):</p>\n\n<pre><code>x = -infinity;\nfor ( i = 1 .. N ) {\n  x = max(x, hill_climbing(random_solution()));\n}\nreturn x;\n</code></pre>\n\n<p>But how can you make this really effective, that is better than normal hill climbing? It is hard to believe that using random start values helps a lot, especially for huge search spaces. More precisely, I wonder:</p>\n\n<ul>\n<li>Is there a good strategy for choosing the $x_0$ (that is implementing <code>random_solution</code>), in particular knowing (intermediate) results of former iterations?</li>\n<li>How to choose $N$, that is how many iterations are needed to be quite certain that the perfect solution is not missed (by much)?</li>\n</ul>\n', 'ViewCount': '396', 'Title': 'How to implement the details of shotgun hill climbing to make it effective?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-02T20:52:19.537', 'LastEditDate': '2012-09-02T15:43:00.100', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1089', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '78', 'Tags': '<algorithms><optimization><heuristics>', 'CreationDate': '2012-04-06T19:13:39.907', 'Id': '1084'},94_2:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m reading through the <a href="http://www.cs.rmit.edu.au/AI-Search/Courseware/Slides1/" rel="nofollow">RMIT course notes on state space search</a>.\nConsider a state space $S$, a set of nodes in which we look for an element having a certain property.\nA <a href="http://www.cs.rmit.edu.au/AI-Search/Courseware/Slides1/07ImprovedMethods/07bHeurFunctions/" rel="nofollow">heuristic function</a> $h:S\\to\\mathbb{R}$ measures how promising a node is.</p>\n\n<p>$h_2$ is said to <em>dominate</em> (or to be more informed than) $h_1$ if $h_2(n) \\ge h_1(n)$ for every node $n$. How does this definition imply that using $h_2$ will lead to expanding fewer nodes? - not only fewer but subset of the others.</p>\n\n<p>In Luger \'02 I found the explanation:</p>\n\n<blockquote>\n  <p>This can be verified by assuming the opposite (that there is at least one state expanded by $h_2$ and not by $h_1$). But since $h_2$ is more informed than $h_1$, for all $n$, $h_2(n) \\le h_1(n)$, and both are bounded above by $h^*$, our assumption is contradictory. </p>\n</blockquote>\n\n<p>But I didn\'t quite get it.</p>\n', 'ViewCount': '384', 'Title': 'Is using a more informed heuristic guaranteed to expand fewer nodes of the search space?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-09T10:35:14.547', 'LastEditDate': '2012-05-09T10:35:14.547', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1304', 'Tags': '<artificial-intelligence><heuristics><search-problem>', 'CreationDate': '2012-04-29T19:28:57.290', 'FavoriteCount': '1', 'Id': '1579'},94_3:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am learning the <a href="http://en.wikipedia.org/wiki/A%2a_search_algorithm" rel="nofollow">A* search algorithm</a> on an 8-puzzle problem.</p>\n\n<p>I don\'t have questions about A*, but I have some for the heuristic score -  Nilsson\'s sequence score.</p>\n\n<p><a href="http://www.heyes-jones.com/astar.html" rel="nofollow">Justin Heyes-Jones web pages - A* Algorithm</a> explains A* very clearly. It has a picture for Nilsson\'s sequence scores.</p>\n\n<p><img src="http://i.stack.imgur.com/Wbl63.jpg" alt="Nilsson\'s sequence scores"></p>\n\n<p>It explains:</p>\n\n<p><strong>Nilsson\'s sequence score</strong></p>\n\n<blockquote>\n  <p>A tile in the center scores 1 (since it should be empty)</p>\n  \n  <p>For each tile not in the center, if the tile clockwise to it is not the one that should be clockwise to it then score 2. </p>\n  \n  <p>Multiply this sequence by three and finally add the total distance you need to move each tile back to its correct position. </p>\n</blockquote>\n\n<p>I can\'t understand the steps above for calculating the scores.</p>\n\n<p>For example, for the start state, what h = 17?</p>\n\n<blockquote>\n  <p>0 A C </p>\n  \n  <p>H B D </p>\n  \n  <p>G F E</p>\n</blockquote>\n\n<p>So, by following the description, </p>\n\n<p><code>B</code> is in the center, so we have 1</p>\n\n<p>Then <code>for each title not in the center, if the **tile** clockwise to **it** is not the one that should be clockwise to it then score 2.</code> I am not sure what this statement means. </p>\n\n<p>What does the double starred <code>title</code> refer to? </p>\n\n<p>What does the double starred <code>it</code> refer to?</p>\n\n<p>Does the double starred <code>it</code> refer to the center title (B in this example)? Or does it refer to each title not in the center?</p>\n\n<p>Is the next step that we start from <code>A</code>? So <code>C</code> should not be clockwise to <code>A</code>, then we have 2. And then <code>B</code> should be clockwise to <code>A</code>, then we ignore, and so on and so forth?</p>\n', 'ViewCount': '1466', 'Title': "Nilsson's sequence score for 8-puzzle problem in A* algorithm", 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-18T22:19:54.293', 'LastEditDate': '2012-05-18T07:52:23.553', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'OwnerDisplayName': 'Jackson Tale', 'PostTypeId': '1', 'Tags': '<algorithms><machine-learning><search-algorithms><heuristics>', 'CreationDate': '2012-05-14T15:41:04.650', 'Id': '1904'},94_4:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If I were to let the variables be the propositions and, constraint be all clauses being satisfied, which technique would be more effective in solving 3-SAT? <a href="http://en.wikipedia.org/wiki/Look-ahead_%28backtracking%29#Look_ahead_techniques" rel="nofollow">Forward checking</a> or <a href="http://en.wikipedia.org/wiki/Arc_consistency#Arc_consistency" rel="nofollow">arc consistency</a>? From what I gathered forward-checking is $O(n)$, while Arc consistency is about $O(8c)$ where c is the number of constraints (According to this <a href="http://www.cs.ubc.ca/~kevinlb/teaching/cs322%20-%202006-7/Lectures/lect11.pdf" rel="nofollow">page</a>). So perhaps forward -checking is faster somehow? How should I determine which to use?</p>\n', 'ViewCount': '591', 'Title': 'Forward checking vs arc consistency on 3-SAT', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-28T18:01:07.223', 'LastEditDate': '2012-05-28T18:01:07.223', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1556', 'Tags': '<algorithms><satisfiability><heuristics><3-sat><sat-solvers>', 'CreationDate': '2012-05-28T07:03:31.467', 'Id': '2120'},94_5:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I cannot seem to find an answer to this question with Google, so I am  going to ask here: is it required for a good neighbourhood function that it in principle (i. e. by recursively considering all neighbours of a certain solution - which is not practical) can reach all possible solutions?</p>\n\n<p>My question is whether there are references in literature that explicitely state it's a requirement - I can see that it is a good property of a neighbourhood.</p>\n", 'ViewCount': '145', 'Title': 'Neighbourhood in local search metaheuristic', 'LastEditorUserId': '472', 'LastActivityDate': '2014-02-06T13:10:29.363', 'LastEditDate': '2014-02-06T13:10:29.363', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2502', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1979', 'Tags': '<optimization><heuristics>', 'CreationDate': '2012-06-26T19:24:35.870', 'Id': '2501'},94_6:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Call a family of sets $\\mathcal{F} = \\{S_1, \\dotsc, S_k\\}$ "diverse" if each set $S_i \\in \\mathcal{F}$ has at least one unique element.  What are possible approaches for finding the largest diverse set $S$ in a family of sets $\\mathcal{F}$?</p>\n\n<p>One approach is to solve a modified set packing problem.  Suppose $\\mathcal{F}=\\{S_1,\\dotsc,S_k\\}$. Let $K$ be a subset of elements, $K \\subset \\bigcup S_i$, and let $\\mathcal{F}_{-K}=\\{S_1 \\setminus K,\\dotsc, S_k \\setminus K\\}$.  Then the maximal diverse set $S$ corresponds to the largest maximal set packing obtained from $\\mathcal{F}_{-L}$ where $L$ is the set of all non-unique elements in $\\mathcal{F}$.</p>\n\n<p>But, what\'s a good heuristic for choosing $K$?  Or are there better approaches altogether?</p>\n', 'ViewCount': '158', 'Title': 'Problem similar to set packing', 'LastEditorUserId': '19', 'LastActivityDate': '2012-09-04T04:54:39.640', 'LastEditDate': '2012-08-10T18:01:45.850', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1937', 'Tags': '<algorithms><combinatorics><heuristics>', 'CreationDate': '2012-08-05T21:50:03.113', 'FavoriteCount': '2', 'Id': '3052'},94_7:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '319', 'Title': 'Heuristics for an Artificial Intelligence problem', 'LastEditDate': '2012-08-21T07:58:54.267', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2589', 'FavoriteCount': '1', 'Body': '<blockquote>\n  <p><strong>Problem</strong> : Given a (one dimensional) row containing $2N$ tiles arranged in $2N + 1$ spaces. There are $N$ black tiles (B), $N$ white tiles (W), and a single empty space. The tiles are initially in an arbitrary ordering. Our goal is to arrange the tiles such that all white tiles are positioned to the left of the black ones, and one black tile is in the rightmost position. The goal position of the empty space is not specified.<br>\n   Tiles can be moved to the empty space when the empty space is at most $N$ cells away. Hence there are at most $2N$ legal moves from each state. The cost of each move is the distance between the tile and the empty space to which it moves ($1$ to $N$).</p>\n</blockquote>\n\n<p>So I am doing this problem with A* search algorithm with different heuristics(ofcourse admissible).So can anybody suggest me some heuristics.<br>\nThanks</p>\n', 'Tags': '<artificial-intelligence><heuristics>', 'LastEditorUserId': '2589', 'LastActivityDate': '2012-08-21T07:58:54.267', 'CommentCount': '1', 'AcceptedAnswerId': '3267', 'CreationDate': '2012-08-20T18:31:50.687', 'Id': '3266'},94_8:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>We have a set X of N elements. We want to get a new set X' having a size M &lt; N.</p>\n\n<pre><code>Choose a first element x from X and put it in X'\nfor each element x in (X - X')\n  Let x' the element from X' which is the closest to x (that is x' = argmin distance(x, x') for all x' in X')\n  d = distance(x, x')\n  if ( uniform_random([0,1]) &lt; d / f )\n     add x to X'\n</code></pre>\n\n<p>How can I choose the value f such that the size of the set X' at the end will be for instance the half of the size of X (that is, M approximates or equals N/2). I suppose that I should choose f such that the probability d / f equals 1/2 (or approximates 1/2 for most values of d), but how to do that ?</p>\n\n<p>Additional details (that are not necesarily usefull for this question): the elements are actually vectors, and the distance between two vectors is the euclidean distance.</p>\n\n<p>Note that d is not a constant (while f is a constant that I want to fix). d depends on the distance between each element x and its closest element x', so d is not always the same.</p>\n\n<p>Suppose that the order in which we test the elements x is always random. For any set X, if we choose the value of f relatively small then we will get a relatively hight number of elements in the final set X', if we choose the value of f relatively big we will get a relatively small number of elements in the final set X'. If I experimentally vary the value of f many times I can always (for any set X) find a value of f for which the final number of elements in X' approaches N/2. So experimentally I can find a good value for f if I test many times which different values of f, but I want to determine it heuristically (not by testing many times and varying f).</p>\n\n<p><strong>EDIT:</strong>\nBy the way, the only one method which seems to give an acceptable results is: let mean_d the mean distance of each x to its nearest x'. We put f = 2mean_d, thus the probability d/f = d/(2mean_d) usually approximate 1/2 if the most of distances d are not far from mean_d. We also put f = (2mean_d)+d' where d' depends on how many distances are higher than mean_d, or f = (2mean_d)-d' where d' depends on how many distances are less than mean_d. Does this make sense ? Do you think it can be improved ?</p>\n", 'ViewCount': '36', 'Title': 'Heuristically determine a value f such that a probability d/f approaches 1/2', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-21T13:07:23.583', 'LastEditDate': '2012-09-21T13:07:23.583', 'AnswerCount': '3', 'CommentCount': '10', 'Score': '0', 'OwnerDisplayName': 'user995434', 'PostTypeId': '1', 'OwnerUserId': '2895', 'Tags': '<probability-theory><mathematical-analysis><heuristics><statistics>', 'CreationDate': '2012-09-17T18:57:42.773', 'Id': '4631'},94_9:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>By <a href="http://math.stackexchange.com/questions/112734/in-what-sense-is-uniform-cost-search-uniform">this</a> possibly good attempt to explain this, the "uniformity" in the Uniform cost search <em>is actually the uniformity of the heuristic function</em>.</p>\n\n<p>Is this explanation correct ? If yes, then don\'t all <code>un-informed</code> cost searches (like <code>BFS</code>, <code>DFS</code>, etc) have no heurstic and thus, be called as "<code>uniform cost</code> searches" ?</p>\n', 'ViewCount': '265', 'Title': 'Why is Uniform cost search called "uniform" cost search?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-15T06:30:49.180', 'LastEditDate': '2012-10-14T21:24:18.123', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6084', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '3032', 'Tags': '<terminology><artificial-intelligence><search-algorithms><heuristics>', 'CreationDate': '2012-10-14T19:43:54.853', 'Id': '6072'},94_10:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m a none-computer-science-student and get some knowledge on AI by taking the CS188.1x Course (Artificial Intelligence) on www.edx.org .</p>\n\n<p>Currently, I am working on the "Search in Pacman" Project; the sources can be found online at <a href="http://www-inst.eecs.berkeley.edu/~cs188/pacman/projects/search/search.html" rel="nofollow">Berkley CS188</a> . I have problems finding an good solution for "Finding All the Corners", so I need a good Multiple Goal Heuristic.</p>\n\n<p>I allready tried the simple approach described in <a href="http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html" rel="nofollow">here</a>. I used the minimum of all manhattan distances to all goals. This works, but is considered a rather poor heuistic, because my A-Star Algorithm expands 2606 nodes for the given maze. Using the same with euclidean distance expands even 103081 nodes. A good heuristic should expand 1600 nodes or less. A very good one 1200 nodes, an excellent one even 800 or less.</p>\n\n<p>I got a hint by other students who use minimum spanning trees created with Kruskal\'s Algorithm. I wanted to investigate into that direction, but I am somehow confused how the Kruskal Algorithm can be used to get a Heuristic?\nAs far as I understood, this Algorithm returns a minimum spanning tree (MST) which is a path, right? So it is a solution to the Traveling Salesman Problem (TSP); it returns a sequence of nodes. But I need a heuristic, so a cost function which can be applied to this problem and called by an Algorithm (like A*).</p>\n\n<p>Can anyone of you give me a hint on how to proceed? Every help is highly appreciated!</p>\n', 'ViewCount': '1068', 'Title': 'Heuristic for Finding Multiple Goals in Graph - e.g. using Kruskals Algorithm', 'LastActivityDate': '2013-01-15T21:48:58.973', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'OwnerDisplayName': 'EliteTUM', 'PostTypeId': '1', 'Tags': '<algorithms><graph-theory><heuristics><search-problem>', 'CreationDate': '2012-10-09T13:24:05.047', 'Id': '6208'},94_11:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am designing a poker agent with different heuristics to decide whether to raise, fold or pass (in Texas holdem poker). I am planning to have 4 heuristics with the agent biased to one of them.</p>\n\n<p>The poker game will consist of 10 agents playing against each other.</p>\n\n<p>I have two heuristics now:</p>\n\n<ol>\n<li>bluff - Agent would keep betting until all others fold</li>\n<li>odds>pot odds - <a href="https://www.youtube.com/watch?v=1wux3avg1CM&amp;feature=relmfu" rel="nofollow">https://www.youtube.com/watch?v=1wux3avg1CM&amp;feature=relmfu</a></li>\n</ol>\n\n<p>I need to know what other heuristics a poker agent can use to make a decision.</p>\n', 'ViewCount': '269', 'Title': "'Texas Hold Em Poker' Agent Heuristics to help decide whether to fold or bet?", 'LastEditorUserId': '3004', 'LastActivityDate': '2012-11-26T09:31:15.803', 'LastEditDate': '2012-11-26T09:31:15.803', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '3004', 'Tags': '<artificial-intelligence><heuristics>', 'CreationDate': '2012-11-15T07:52:38.743', 'Id': '6673'},94_12:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>What kind of heuristics are useful in a tree decomposition of a graph to find the k shortest paths from a given source to a vertex? </p>\n\n<p>Moreover, the local shortest paths at each node in a tree are precomputed. Here, the graph is undirected and weighted. I'm interested in finding only simple paths, i.e., no nodes are repeated in a path. </p>\n", 'ViewCount': '87', 'Title': 'Heuristics for tree decomposition into k shortest paths', 'LastEditorUserId': '88', 'LastActivityDate': '2013-01-08T08:25:46.483', 'LastEditDate': '2013-01-08T08:25:46.483', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5328', 'Tags': '<graph-theory><heuristics>', 'CreationDate': '2013-01-07T18:19:27.840', 'Id': '7819'},94_13:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '144', 'Title': 'Quick union and heuristic by size', 'LastEditDate': '2013-02-10T16:30:31.787', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4765', 'FavoriteCount': '1', 'Body': "<p>Studying Quick-Find and Quick-Union heuristic I've found clear that:</p>\n\n<ul>\n<li><p>with quick find trees and a union based on the size of the trees we can make a union in $T_{am}(n)=O(\\log(n))$</p></li>\n<li><p>with quick find trees and a union based on the height of the trees we can make a find in $T(n)=O(\\log(n))$</p></li>\n</ul>\n\n<p>But I read that using quick union trees and an union based on the size of the trees we can also have a find in $T(n)=O(\\log(n))$, so my question is how can this be demonstrated? What relationship is there between height and size?</p>\n\n<p>For example knowing that $\\text{size}(A)=4$ I could have both:</p>\n\n<pre><code>        A                A\n      / | \\              |\n     1  2  3             1\n                         |\n                         2\n                         |\n                         3\n</code></pre>\n", 'Tags': '<algorithms><heuristics>', 'LastEditorUserId': '4765', 'LastActivityDate': '2013-02-10T17:37:27.287', 'CommentCount': '2', 'AcceptedAnswerId': '9643', 'CreationDate': '2013-02-09T13:42:27.810', 'Id': '9618'},94_14:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am looking for a good survey/study of experimental results of heuristics for Knapsack problem (or implemented libraries in java/c++). Any help is appreciated!</p>\n', 'ViewCount': '92', 'Title': 'Experimental Survey on Different Heuristics for Knapsack Problem', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-14T06:38:43.647', 'LastEditDate': '2013-02-14T06:38:43.647', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6550', 'Tags': '<reference-request><np-complete><optimization><heuristics>', 'CreationDate': '2013-02-13T16:57:46.143', 'Id': '9747'},94_15:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is there an explanation Christofides\'s Heuristic for solving TSP which does not simply state the algorithm and go ahead to prove the bound?</p>\n\n<p>To be specific:\n(Disclaimer : I am an engineer who knows very little about graph theory but need this for a logistics course)</p>\n\n<ul>\n<li>I understand that I first create an MST. So far, so good.</li>\n<li>Now, I need to find a perfect minimum weight matching on all odd degree nodes. I have no clue what this is; googling this tells me this is a set of edges containing maximum $n/2$ edges such that no node is shared by 2 sets. I don\'t see why I am doing this..... I am not even sure I understand what this statement means.</li>\n<li>Now, I need to merge the MST and the matchings to create a "multigraph" and then find an Eulerian tour on this. No clue what I am doing here.</li>\n<li>Run the shortcut algorithm exploiting the triangle inequality. (No clue what happened till now and this obviously then makes no sense either)</li>\n</ul>\n\n<p>Can someone point me to a good resource with possible examples and illustrations for why Christofides works in a language that isn\'t full of graph theory terms (or alternately, provide me an answer here)?</p>\n\n<p>I have already looked at :</p>\n\n<ul>\n<li><a href="http://ieor.berkeley.edu/~kaminsky/ieor251/notes/2-16-05.pdf" rel="nofollow">A Berkeley PDF</a></li>\n<li>Wikipedia</li>\n</ul>\n', 'ViewCount': '507', 'Title': "A Good Resource for Christofides' Heuristic", 'LastEditorUserId': '39', 'LastActivityDate': '2013-02-19T23:46:33.413', 'LastEditDate': '2013-02-19T23:46:33.413', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9924', 'Score': '4', 'OwnerDisplayName': 'user6422', 'PostTypeId': '1', 'Tags': '<algorithms><heuristics><graph-traversal>', 'CreationDate': '2013-02-19T06:37:03.837', 'Id': '9923'},94_16:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>i have a problem regarding the following situation. </p>\n\n<p>I have two arrays of numbers like this:</p>\n\n<pre><code>index/pos     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 \nArray 1(i):   1   2   3   4   7   5   4   3   7   6   5   1   2   3   4   2\nArray 2(j):   4   4   8  10  10   7   7  10  10  11   7   4   7   7   4\n</code></pre>\n\n<p>now suppose the second array is very hard to compute but I have noticed that if I add  </p>\n\n<p>A[i] + A[i+1]</p>\n\n<p>in the array 1 I get the number very close to the number A[j] in the array 2. </p>\n\n<ol>\n<li><p>Is my solution a heuristic or approximation?</p></li>\n<li><p>If I had a reason to believe that I will never overshoot the value of A[j] by +-x with this algorithm and can prove it, would then  my solution be a heuristic or approximation?</p></li>\n</ol>\n\n<p>Is there any literature that deals with heuristic vs. approximation questions for P class problems where the solution can be achieved in polynomial time but the input is just too big for a poly time algorithm to be practical.</p>\n\n<p>thank you </p>\n', 'ViewCount': '960', 'Title': 'Difference between heuristic and approximation algorithm?', 'LastActivityDate': '2013-03-01T23:54:21.747', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Tags': '<approximation><heuristics>', 'CreationDate': '2013-03-01T18:37:47.320', 'FavoriteCount': '1', 'Id': '10182'},94_17:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm doing a practice test for a course on routing problems. There's a question asking to infere the time complexity of the 2-opt method.</p>\n\n<p>I can see that the complexity per iteration is in $O(n^2)$ because you need to check all combinations of 2 arcs. I don't know how to calculate the worst case number of iterations though. The paper we got doesn't say anything about it's tc, so i'm kind of stuck here.</p>\n\n<p>How do i calculate this?</p>\n", 'ViewCount': '136', 'Title': 'Time complexity 2-opt method', 'LastEditorUserId': '31', 'LastActivityDate': '2013-03-19T14:31:03.800', 'LastEditDate': '2013-03-19T14:31:03.800', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7332', 'Tags': '<algorithms><heuristics><routing>', 'CreationDate': '2013-03-19T14:09:55.420', 'Id': '10618'},94_18:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I've done some testing of different initial temperatures in my simulating annealing algorithm and noticed the starting temperature has an affect on the performance of the algorithm.</p>\n\n<p>Is there any way of calculating a good initial temperature?</p>\n", 'ViewCount': '1201', 'Title': 'Initial temperature in simulated annealing algorithm', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-09T23:24:51.137', 'LastEditDate': '2013-04-08T14:45:40.150', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '7636', 'Tags': '<optimization><artificial-intelligence><heuristics>', 'CreationDate': '2013-04-08T01:23:34.130', 'Id': '11126'},94_19:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Starting to use <a href="https://code.google.com/p/nanoflann/" rel="nofollow">nanoflann</a> to do some point cloud nearest neighbor searching and it got me thinking about just how "approximate" ANN methods are.</p>\n\n<p>If I have a (more or less) randomly distributed point cloud what is the likelihood that I get the exact nearest neighbor given a target point within the clouds bounding box?  I know that it is dataset dependent... but does anyone have a good numerical study somewhere that shows trends?</p>\n', 'ViewCount': '94', 'Title': 'How approximate are "approximate" nearest neighbor (ANN) search algorithms?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T17:44:30.770', 'LastEditDate': '2013-05-28T06:46:45.047', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8395', 'Tags': '<algorithms><algorithm-analysis><search-algorithms><approximation><heuristics>', 'CreationDate': '2013-05-27T20:13:40.783', 'FavoriteCount': '1', 'Id': '12310'},94_20:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>If I have a hard problem, one standard approach is to express it as a SAT instance and try running a SAT solver on it.  Another standard approach is to express it as a constraint satisfaction problem, and try using a CSP solver.  The two feel somehow vaguely similar in what sorts of problems can be naturally expressed in their input format.</p>\n\n<p>Are there any guidelines or rules of thumb for how to recognize, for a given problem, which approach is more likely to yield good results?  Is there any guidance anyone can offer about which sorts of problems can be handled better by SAT solvers than by CSP solvers, or vice versa?</p>\n\n<p>(Obviously, there are some easy problems that can be solved by both approaches.  There are also some hard problems that can't be usefully solved by either approach.  Let's set those aside.  The case where guidance is most helpful are problems where either SAT solvers perform better than CSP solvers, or where CSP solvers perform better than SAT solvers.  How do I recognize when a SAT solver is likely to be a better fit than a CSP solver, or when a CSP solver is likely to be a better fit than a SAT solver -- i.e., which approach to try first?)</p>\n", 'ViewCount': '140', 'Title': 'When to use SAT vs Constraint Satisfaction?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T15:06:43.883', 'LastEditDate': '2013-05-28T07:15:02.563', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<heuristics><sat-solvers><constraint-programming>', 'CreationDate': '2013-05-28T04:15:12.777', 'FavoriteCount': '1', 'Id': '12325'},94_21:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm writing a program (using genetic algorithms) that finds sort-of-optimal scheduling plan for a factory.</p>\n\n<ul>\n<li>The factory has several types of machines (say, <code>locksmith, miller, welding</code>)</li>\n<li>There are few machines of each type. (say, <code>3 locksmiths, 2 millers, 3 welders</code>)</li>\n<li>There are several types of operations (some machines do more than one operation on the job, say, <code>locksmith does soldering and assembling</code>).</li>\n<li>The jobs on the machines have different times, all known beforehand.</li>\n<li>The jobs have dependencies on jobs done before (say, <code>a product's made of 10 screws and 4 subparts, each of which needs 4 screws</code>).</li>\n</ul>\n\n<p>From what I searched, this looks sort of like a Flow Shop problem. The difference is in the dependencies and in the same machine doing different operations with different times on a job.</p>\n\n<hr>\n\n<h2>My main question is:</h2>\n\n<p><strong>Is there some kind of a classification of these problems?</strong> A summary telling the differences?</p>\n\n<p>For example, I don't understand much of how do these differ: Open Shop, Job Shop, Flow Shop, Permutation Flow Shop. And whether or not I missed something similar that could fit better to my problem.</p>\n\n<hr>\n\n<p>As a side question, what approach do you think could help me best with the unusual requirements I've posted above? I'm writing my current approach below.</p>\n\n<p>So far I've been able to work with the tree of dependencies without regard to the makespan times: just making a plan - a list of IDs, really - of what comes after what, from looking at the tree of what's been done so far and what are the leaves (nodes having done all their dependencies).</p>\n\n<p>This allows for fast creation of meaningful individuals in the Genetic Algorithm population, but there seems to be no computationally cheap way to learn the individual's makespan time (which I have as the fitness function).</p>\n\n<p>For that I have to create a calendar, or Gantt chart, if you will, to which I put the operations on the jobs in the earliest place possible, in the machine queue that's free at that moment, etc. The whole plan has to materialize and that seems the most costly computation of the whole problem.</p>\n", 'ViewCount': '234', 'Title': 'Classification of job shop scheduling problems', 'LastActivityDate': '2013-07-23T01:50:49.417', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '13366', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9122', 'Tags': '<optimization><scheduling><heuristics><genetic-algorithms>', 'CreationDate': '2013-07-11T03:03:06.187', 'Id': '13219'},94_22:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have made a connect four game in JS and currently have a functioning minimax algorithm. The problem I\'m having is that it is very, very easy to beat, even with a large depth. This is leading me to believe that I need a better heuristic function, but I cannot come up with much better than what I already have. So, I thought I would ask if anyone has any experience, or just a good idea, for a very good heuristic to use. I would also accept improvement ideas on my current heuristic below. Thank you in advance!</p>\n\n<p>EDIT: I\'m going to go ahead and post my total minimax in here (3 functions total), because I have added disjoints and made my 4-in-a-row higher, but my AI is still terrible. I know my 2,3 and 4-in-a-rows work because I tested them, but I can\'t pin-point why I\'m still having trouble even at high depths.</p>\n\n<pre><code>    function getBestMove(currBoard,depth,who) {\n        var opp;\n        //Get opponent for next piece\n        if(who == \'a\') {\n            opp = \'p\';\n        } else {\n            opp = \'a\';\n        }\n\n        var tBoard = new Array(rows);\n        for(var i=0; i&lt;tBoard.length; i++) {\n            tBoard[i] = new Array(cols);\n        }\n\n        var moves = new Array(aiOpenCols.length);\n        //Drop each piece and use minimax function until depth == 0\n        for(var i=0; i&lt;aiOpenCols.length; i++) {\n            for(var j=0; j&lt;rows; j++) {\n                for(var k=0; k&lt;cols; k++) {\n                    tBoard[j][k] = currBoard[j][k];\n                }\n            }\n            tBoard = dropPiece(aiOpenCols[i],who,tBoard);\n            moves[i] = minimax(tBoard,(+depth - 1),opp,aiOpenCols[i]);\n        }\n\n        var bestAlpha = -100000;    //Large negative\n        //Use random column if no moves are "good"\n        var bestMove;// = Math.floor(Math.random() * aiOpenCols.length);\n        //bestMove = +aiOpenCols[bestMove];\n        //Get largest value from moves for best move\n        for(var i=0; i&lt;aiOpenCols.length; i++) {\n            if(+moves[i] &gt; bestAlpha) {\n                bestAlpha = moves[i];\n                bestMove = aiOpenCols[i];\n            }\n        }\n\n        bestMove++; //Offset by 1 due to actual drop function\n        return bestMove;\n    }\n    function minimax(currBoard,depth,who,col) {\n        //Drop current piece, called from getBestMove function\n        currBoard = dropPiece(col,who,currBoard);\n\n        //When depth == 0 return heuristic/eval of board\n        if(+depth == 0) {\n            var ev = evalMove(currBoard);\n            return ev;\n        }\n        var alpha = -100000;    //Large negative\n        var opp;\n        //Get opponent for next piece\n        if(who == \'a\') {\n            opp = \'p\';\n        } else {\n            opp = \'a\';\n        }\n\n        //Loop through all available moves\n        for(var i=0; i&lt;aiOpenCols.length; i++) {\n            var tBoard = new Array(rows);\n            for(var i=0; i&lt;tBoard.length; i++) {\n                tBoard[i] = new Array(cols);\n            }\n            for(var j=0; j&lt;rows; j++) {\n                for(var k=0; k&lt;cols; k++) {\n                    tBoard[j][k] = currBoard[j][k];\n                }\n            }\n            //Continue recursive minimax until depth == 0\n            var next = minimax(tBoard,(+depth - 1),opp,aiOpenCols[i]);\n            //Alpha = max(alpha, -minimax()) for negamax\n            alpha = Math.max(alpha, (0 - +next));\n        }\n        return alpha;\n    }\n    function evalMove(currBoard) {\n        //heuristic function\n        //AI = # of 4 streaks + # of 3 streaks + # of 2 streaks - # of 3 streaks opp - # of 2 streaks opp           \n        var fours = checkFours(currBoard,\'b\');\n        //If win return large positive\n        if(fours &gt; 0) return 100000;\n        var threes = checkThrees(currBoard,\'b\') * 1000;\n        var twos = checkTwos(currBoard,\'b\') * 10;\n        var oppThrees = checkThrees(currBoard,\'r\') * 1000;\n        var oppTwos = checkTwos(currBoard,\'r\') * 10;\n\n        var scores = threes + twos - oppThrees - oppTwos;\n\n        //If opponent wins, return large negative\n        var oppFours = checkFours(currBoard,\'r\');\n        if(+oppFours &gt; 0) {\n            return -100000;\n        } else {\n            return scores;\n        }\n    }\n</code></pre>\n', 'ViewCount': '2190', 'Title': 'Trying to improve minimax heuristic function for connect four game in JS', 'LastEditorUserId': '9365', 'LastActivityDate': '2013-07-27T07:38:13.270', 'LastEditDate': '2013-07-26T19:24:17.710', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9365', 'Tags': '<algorithms><heuristics><board-games>', 'CreationDate': '2013-07-26T14:27:09.390', 'FavoriteCount': '1', 'Id': '13453'},94_23:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Can you provide an example of NN algorithm failure on the Euclidean traveling salesman problem?</p>\n\n<p>I was trying to construct a specific example of this for my friends and was failing.</p>\n', 'ViewCount': '229', 'Title': 'When does the nearest neighbor heuristic fail for the Traveling Salesperson?', 'LastEditorUserId': '2253', 'LastActivityDate': '2013-08-30T18:00:29.553', 'LastEditDate': '2013-08-14T19:07:46.930', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '13744', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9662', 'Tags': '<algorithms><heuristics><traveling-salesman>', 'CreationDate': '2013-08-14T18:37:46.277', 'Id': '13742'},94_24:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The energy function in a Hopfield network to determine whether it has converged seems to be the major sink of computational time and makes the Hopfield network run very slowly. Is there a fast substitute for it? </p>\n', 'ViewCount': '20', 'Title': 'Fast energy function substitute for Hopfield network?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-16T08:35:57.190', 'LastEditDate': '2013-09-16T08:35:57.190', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10158', 'Tags': '<algorithms><artificial-intelligence><efficiency><neural-networks><heuristics>', 'CreationDate': '2013-09-15T18:54:05.840', 'Id': '14335'},94_25:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When using A* or any other best path finding algorithm we say that the heuristic used should be <strong>admissible</strong> i.e. it should never overestimate the actual solution path (moves).</p>\n\n<p>Can someone tell me how this is true? Please avoid equations and all. I need a logical proof.\nIf you  want you can explain using the <strong>Manhattan</strong> distance heuristic of the <strong>8-puzzle.</strong></p>\n', 'ViewCount': '804', 'Title': 'How does an admissible heuristic ensure an optimal solution?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-10-14T22:14:51.397', 'LastEditDate': '2013-10-14T12:16:36.493', 'AnswerCount': '2', 'CommentCount': '4', 'AcceptedAnswerId': '16089', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '4341', 'Tags': '<algorithms><artificial-intelligence><search-algorithms><heuristics>', 'CreationDate': '2013-10-14T06:34:42.517', 'Id': '16065'},94_26:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm currently taking an Algorithms course, and we are covering Backtracking, CSP, and heuristics. However, I'm getting confused on exactly the differences between these terms and their applications.</p>\n\n<p>When using Backtracking on a problem, I understand we are calculating the set of all allowable solutions to satisfy some property. This uses the idea of some form of constraint to make sure we can reduce the problem and not have to calculate every possible permutation.</p>\n\n<p>So is the Backtracking algorithm just an application of a CSP? \nBut when I saw an example of solving a sudoku puzzle with the Backtracking algorithm, it took many more steps than a CSP description of it. </p>\n\n<p>Also, how would the idea of using heuristics to solve a problem relate in with this?</p>\n\n<p>There is a good chance I'm getting confused with some of the terminology so any advice would be greatly appreciated. </p>\n", 'ViewCount': '83', 'Title': 'Heuristics & Constrain Satisfaction Problem Differences', 'LastActivityDate': '2013-11-05T10:36:09.383', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16724', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8242', 'Tags': '<algorithms><heuristics>', 'CreationDate': '2013-11-04T22:22:10.640', 'Id': '16723'},94_27:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What type of algorithm would you suggest me to use for this problem? I want to implement an algorithm that minimize the total distance in a graph (TSP) but for only X nodes. Also, we can go as many times we want on every vertices and/or edges. Let\'s say, on my graph, that I want the minimum distance for visiting every blue node. What algorithm and heuristic would you recommand me? An approximation running in reasonable time would be acceptable.</p>\n\n<p>For this example, this is an undirected graph, the vertices are points in the plane and the cost of an edge is the distance between its endpoints.</p>\n\n<p><img src="http://i.imgur.com/YheHQPT.jpg" alt="graph"></p>\n', 'ViewCount': '74', 'Title': 'Algorithm to use for a TSP variant', 'LastEditorUserId': '9550', 'LastActivityDate': '2013-12-04T00:26:11.793', 'LastEditDate': '2013-12-04T00:26:11.793', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18593', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11797', 'Tags': '<algorithms><graphs><heuristics><traveling-salesman>', 'CreationDate': '2013-12-03T23:17:30.113', 'Id': '18589'},94_28:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have question on understanding the following neighborhood relation within a local-search approximation scheme. \nLet $M$ be a legal matching on any bipartite graph. \nLet $U_k$ be the neighborhood defined as follows:\n$$U_k := \\{M' : |(M' \\backslash M) \\cup (M \\backslash M')| \\leq k\\}$$</p>\n\n<p>Can somebody give me an example or explain this to me? </p>\n\n<p>If i choose a small k-value, the cardinality of $M'$ will be small as well, but how does an algorithm decide which matching pair of nodes to take?</p>\n\n<p>If we define node-values and make it a weighted matching,let say we define a weight function $w_e \\in \\mathbb{R}$ for any edge e in our graph, now the algorithm may use greedy method and take the best possible pair of nodes (with greatest weight). </p>\n\n<p>But I still don't understand the exact set definition of our neighborhood.</p>\n\n<p>I would be grateful for an example, because I'm stumped on this one. </p>\n", 'ViewCount': '59', 'Title': 'Local search: Problem with neighborhood definition', 'LastActivityDate': '2014-01-10T12:36:41.790', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19626', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12731', 'Tags': '<optimization><approximation><heuristics><bipartite-matching>', 'CreationDate': '2014-01-10T11:48:35.183', 'Id': '19625'},94_29:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '508', 'Title': 'How does the 3-opt algorithm for TSP work?', 'LastEditDate': '2014-01-19T16:11:51.803', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '12945', 'FavoriteCount': '1', 'Body': u'<p>I understand that the 3-Opt Heuristic for solving the Traveling Salesman problem involves removing three edges from a graph and adding three more to recomplete the tour. However, I\'ve seen many papers that mention that when three edges are removed, there remain only 2 possible ways to recombine the tour - this doesn\'t make sense to me.</p>\n\n<p>For example, I found a paper [1] that says:</p>\n\n<blockquote>\n  <p>The 3-opt algorithm works in a similar fashion, but instead of removing two edges we remove three. This means that we have two ways of reconnecting the three paths into a valid tour1 (\ufb01gure 2 and \ufb01gure 3). A 3-opt move can actually be seen as two or three 2-opt moves.</p>\n</blockquote>\n\n<p>However, I count 8 different ways to reconnect the tour (7 if not counting the permutation before removing the edges). What am I missing here? <strong>Edit: 3 different ways, not 8</strong></p>\n\n<p>Also, can someone link me to an algorithm for 3-opt if possible? I\'m just trying to understand it but I haven\'t come across any clear algorithms yet; all resources I find simply say "remove three edges, reconnect them". That\'s it, which is sort of vague.</p>\n\n<p>Here are the 3 tours that seem to me to be 3-opt moves after removing three edges.</p>\n\n<p><img src="http://i.stack.imgur.com/KynPB.png" alt="enter image description here"></p>\n\n<hr>\n\n<ol>\n<li><a href="http://web.tuke.sk/fei-cit/butka/hop/htsp.pdf" rel="nofollow">Heuristics for the Traveling Salesman Problem</a> by C. Nilsson</li>\n</ol>\n', 'Tags': '<algorithms><optimization><heuristics><traveling-salesman>', 'LastEditorUserId': '12945', 'LastActivityDate': '2014-03-03T18:36:23.367', 'CommentCount': '6', 'AcceptedAnswerId': '19810', 'CreationDate': '2014-01-18T16:42:44.363', 'Id': '19808'},94_30:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm having trouble figuring out how to create admissible heuristics from cost functions.  For example, if I was trying to create an admissible heuristic from a cost function that takes in starting position and ending position and returns the cost based on differences in height, I don't understand how to create an admissible heuristic from such a basic function.</p>\n\n<p>Any help would be greatly appreciated.</p>\n", 'ViewCount': '86', 'Title': 'Creating admissible heuristics from functions?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-26T14:46:11.440', 'LastEditDate': '2014-01-26T02:02:13.660', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '13134', 'Tags': '<algorithms><heuristics>', 'CreationDate': '2014-01-25T23:24:20.117', 'Id': '19976'},94_31:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Hello I am trying to solve the AlienTiles problem described at <a href="http://www.alientiles.com" rel="nofollow">alientiles.com</a> using the A* algorithm but I cannot find any good heuristic function so far.</p>\n\n<p>In AlienTiles you have a board with $N \\times N$ tiles, all coloured red. By clicking on a tile, all tiles in the same row and column advance to the next color, with the colour order being red $\\rightarrow$ green $\\rightarrow$ blue $\\rightarrow$ purple, resetting to red after purple. A goal state is a state where every tile has the same colour, as long as its not red.</p>\n\n<p>Is there any good point to start? I am completely frustrated about how I am supposed to handle the problem. An easy function that I came up with was the distance of the colour of the current tile with the target tile, but it is very slow.</p>\n', 'ViewCount': '145', 'Title': 'Solving AlienTiles with an A* heuristic', 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-29T02:29:56.353', 'LastEditDate': '2014-01-28T14:09:31.010', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '20054', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '13168', 'Tags': '<algorithms><search-algorithms><heuristics><board-games>', 'CreationDate': '2014-01-27T21:01:28.317', 'Id': '20017'},94_32:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>Background</strong></p>\n\n<p>I need to find a largest set of non-overlapping axis-parallel squares, out of a given collection of candidate squares.</p>\n\n<p>This problem is NP-complete. Many papers suggest approximation algorithms (see <a href="https://en.wikipedia.org/wiki/Maximum_disjoint_set" rel="nofollow">Maximum Disjoint Set in Wikipedia</a>), but I need an exact algorithm. </p>\n\n<p>My current solution uses the following divide-and-conquer strategy:</p>\n\n<ul>\n<li>Calculate all horizontal and vertical lines that pass through corners of the candidate squares. Each such line separates the candidates into three groups: candidates that are entirely at one side of the line, candidates that are entirely at the other side of the line, and candidates that are intersected by the line. Now there are two cases:\n<ul>\n<li><em>Easy Case</em>: There is a separator line $L$ that does not intersect any candidate square. Then, recursively calculate the maximum-disjoint-set among the squares on one side of $L$, recursively calculate the maximum-disjoint-set among the squares on the other side of $L$, and return the union of these two sets. The separator line guarantees that the union is still a disjoint set.</li>\n<li><em>Hard Case</em>: All separator lines intersect one or more candidate squares. Select one of the separator lines, $L$; suppose that $L$ intersects $k$ squares. Calculate all $2^k$ subsets of these intersected squares. For each subset $X$ that is in itself a disjoint set, calculate the maximum-disjoint-set recursively as in the Easy Case, under the assumption that $X$ is in the set. I.e., recursively calculate the maximum-disjoint-set among the squares on one side of $L$ that do not intersect $X$, recursively calculate the maximum-disjoint-set among the squares on the other side of $L$ that do not intersect $X$, and calculate the union of these two sets with $X$. Out of all $2^k$ unions, return the largest one.</li>\n</ul></li>\n</ul>\n\n<p><strong>Question</strong></p>\n\n<p>My question is: <em>What is the best way to select the separator line $L$</em>?</p>\n\n<p>There are two conflicting considerations: On one hand, we want $L$ to intersect as few squares as possible, so that the power set is not too large. On the other hand, we want $L$ to separate the candidate squares to subsets of balanced size, preferrably equal size, so that the recursion ends as fast as possible. What is the best way to balance these conflicting considerations?</p>\n\n<p>EDIT: <strong>Additional details</strong></p>\n\n<p>My current heuristic is to pick the separator line that intersects the least number of squares. This heuristic allows the algorithm to process input sets with up to $n=30$ candidates, in several seconds. The optimal solution in these cases has about 10 squares. In general, the number of squares in the optimal solution is near $2\\cdot\\sqrt{n}$.</p>\n\n<p>When the input grows beyond 30 candidates, the running time becomes much slower (several minutes and more). My goal is to find a heuristic that will allow me to process larger sets of candidates.</p>\n', 'ViewCount': '143', 'Title': 'A heuristic for finding a maximum disjoint set', 'LastEditorUserId': '1342', 'LastActivityDate': '2014-02-04T14:43:12.340', 'LastEditDate': '2014-01-31T10:01:52.057', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '20140', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<algorithms><efficiency><heuristics>', 'CreationDate': '2014-01-30T18:29:37.270', 'Id': '20126'},94_33:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '32', 'Title': 'How do I compute this non terminal positions evaluation, for tic-tac-toe?', 'LastEditDate': '2014-02-15T21:17:43.797', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14704', 'FavoriteCount': '2', 'Body': u'<p>Looking at this <a href="http://www-scf.usc.edu/~csci460/docs/homework/solution2.pdf" rel="nofollow">solution on page 3</a> but having trouble understanding the evaluation function specifically.   </p>\n\n<blockquote>\n  <p>For non terminal positions, we use a linear evaluation function\n  defined as</p>\n  \n  <p>Eval (s) = 3[X2(s)]+X1(s)\u2212(3[O2(s)]+O1(s))</p>\n  \n  <p>We define X n ( s ) as the number of rows, columns, and diagonals in\n  state s with exactly n X\u2019s and no O\u2019s, and similarly define O n ( s )</p>\n</blockquote>\n\n<p>Looking at this state \'s\' for example (these problems accounts for symmetry):</p>\n\n<pre><code>|X| | |\n| |O| |\n| | | |\n</code></pre>\n\n<p>It shows an evaluation of <code>-1</code>  </p>\n\n<p>However, got 0:  </p>\n\n<p>X2(s) = 0 because there are no rows or columns with 2 X\'s.<br>\nX1(s) = 2 because the top row and left column both have 1 X (but the diagonal has an O)</p>\n\n<p>O2(s) = 0 because there are no rows or columns with 2 O\'s.<br>\nO1(s) = 2 because the middle row and middle column both have 1 O (but the diagonal has an X)</p>\n\n<p>Plugging in:  </p>\n\n<pre><code>0+2 - (0+2) = 0\n</code></pre>\n\n<p>So, I thought I am missing symmetry but I just get a bigger scale that still = 0\'s.</p>\n\n<p>I must be overlooking something simple but not sure.</p>\n\n<p>Any help is appreciated.</p>\n', 'Tags': '<heuristics><game-theory><board-games>', 'LastEditorUserId': '14704', 'LastActivityDate': '2014-02-15T22:09:24.987', 'CommentCount': '0', 'AcceptedAnswerId': '21681', 'CreationDate': '2014-02-15T21:12:25.917', 'Id': '21679'},94_34:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '49', 'Title': 'Where is the recursion, in the minimax-decision algorithm?', 'LastEditDate': '2014-02-17T00:11:58.803', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '14704', 'FavoriteCount': '2', 'Body': '<p>The below is from an article titled: </p>\n\n<blockquote>\n  <p><strong>Minimax: Recursive Implementation</strong></p>\n</blockquote>\n\n<p><img src="http://i.stack.imgur.com/l00le.png" alt="enter image description here"></p>\n\n<p>To be a recursive function, <a href="https://www.youtube.com/watch?v=72hal4Cp_2I&amp;feature=player_detailpage#t=23" rel="nofollow">you need to call yourself</a>.</p>\n\n<ul>\n<li>What part of this pseudo code is calling itself?</li>\n<li>How does depth-first effect the recursion process?</li>\n<li>There seems to be a return in every line of <code>minimax-value</code>,\nshouldn\'t the return be only on a terminal case?</li>\n<li>Will <code>value[op]</code> contain the moves in order from the root node?</li>\n<li>What does <code>Apply(op,game)</code> do the very first time through?</li>\n</ul>\n\n<p>Any pointers are greatly appreciated.</p>\n', 'Tags': '<heuristics><game-theory><board-games>', 'LastEditorUserId': '14704', 'LastActivityDate': '2014-02-17T05:01:36.407', 'CommentCount': '2', 'AcceptedAnswerId': '21719', 'CreationDate': '2014-02-17T00:04:36.773', 'Id': '21710'},94_35:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'ve been reading about the No Free Lunch Theorem, but I can\'t quite understand what it is about.  I\'ve heard this theorem described elsewhere as the claim that "no general purpose universal optimiser exists". On the other hand, the <a href="https://en.wikipedia.org/wiki/No_free_lunch_in_search_and_optimization" rel="nofollow">Wikipedia article</a> talks about \'candidate solutions" that are "evaluated one by one" - if we only consider algorithms of a particular form, then that is a much more limited claim.</p>\n\n<p>Can anyone explain what this theorem actually claims?</p>\n', 'ViewCount': '459', 'Title': 'What is the no free lunch theorem?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-18T13:02:10.723', 'LastEditDate': '2014-02-18T12:58:43.690', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '644', 'Tags': '<algorithms><terminology><optimization><heuristics>', 'CreationDate': '2014-02-18T10:48:00.223', 'FavoriteCount': '3', 'Id': '21758'},94_36:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to write some little code (POC for the selection/mutation operators) that uses a genetic algorithm to solve a global maximum for a function.</p>\n\n<pre><code>f(x_1...x_n) = M - (x_1 - a_1)^2 - (x_2 - a_2)^2 - ... - (x_n - a_n)^2\n</code></pre>\n\n<p>M a_i are constants. I have to find x_i such that f(x_i) = max(f) = M</p>\n\n<p>My selection method is truncation (I select the top 100 fittest of a population of 500).\nMy crossover method is average. there is a 80% chance for crossover, other wise one of the parents is passed on.\nMy elite count is 5 (1% of the population)\nThere is a 3% chance for a mutation for an individual, the range of the mutation is [-0.3, 0.3]</p>\n\n<p>My fitness function is f it self and my stopping condition is ABS(previous best fitness - current best fitness) &lt;= 10^(-21)</p>\n\n<p>You can find the code I wrote <a href="https://bitbucket.org/nocgod/ga-testing" rel="nofollow">here</a>.</p>\n\n<p>The problem is that it converges before it reaches even an approximate solution.</p>\n\n<p>What can I change in the solution approach so that the algorithm would converge on the maximum(f)?\n(This is not my algorithm, it\'s a reduction of a problem I have at work.)</p>\n', 'ViewCount': '49', 'ClosedDate': '2014-02-18T21:38:38.293', 'Title': 'Genetic algorithm fitness function', 'LastEditorUserId': '14811', 'LastActivityDate': '2014-02-19T12:52:37.320', 'LastEditDate': '2014-02-19T12:52:37.320', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14811', 'Tags': '<algorithms><optimization><heuristics><genetic-algorithms>', 'CreationDate': '2014-02-18T16:16:47.953', 'Id': '21776'},94_37:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I need to use discrete differential evolutionary algorithm for assigning discrete values from set size $L$ to vectors of size $D$ where $L$ could be smaller, equal or larger than $D$. Elements of vector $X$ could take the same values of other elements.  My question is if we have a population of size $NP$ with each vector $X$ in the population of size $D$. How do we actually apply the mutation operand:</p>\n\n<p>$$V_{j,i}^{G+1} = X_{j, r_1}^{G} + F\\cdot (X_{j, r_2}^{G}-X_{j, r_3}^{G})$$</p>\n\n<p>where $i$, $r_1$, $r_2$, $r_3$ are references to vectors in $NP$ and none is equal to the other, $J$ is an index in vector $X$, and $F$ is a random number between $0$ and $1.2$.</p>\n\n<p>Suppose $X_{r_1}^{G}$ is equal to $\\{4, 1, 3, 2, 2, 0\\}$ and  $X_{r_2}^{G}$ is equal to $\\{2, 2, 3, 0, 4, 2\\}$ and $X_{r_3}^{G}$ is equal to $\\{1, 2, 3, 3, 0, 1\\}$\nCould anyone explain in detail the steps (through example if possible) on how to get the mutant vector $V_{j,i}^{G+1}$</p>\n', 'ViewCount': '25', 'Title': 'Mutation and crossover operations in discrete differential evolutionary operations?', 'LastEditorUserId': '15742', 'LastActivityDate': '2014-03-17T01:45:19.773', 'LastEditDate': '2014-03-17T01:45:19.773', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15742', 'Tags': '<algorithms><optimization><heuristics><evolutionary-computing>', 'CreationDate': '2014-03-16T07:22:44.630', 'Id': '22668'},94_38:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>For a class project we're developing a software that solves a common optimisation problem. After some research we've found out that our problem is called QAP (Quadratic Asssignment Problem) and the algorithm that is commonly used is Branch and Bound. I understand the basics of the problem and I see the need of a lower bound to compute the sollution. I came up with a trivial bound example but our teacher told us lower bounds were no trivial matter and we should do some research. After a while we've found out that the Gilmore-Lawler bound is a good one to solve our problem (or at least good enough for learning purposes). </p>\n\n<p>Although I have read a couple of papers I can't get the grasp of it. The idea seems to be to convert the QAP into an LAP combining the two matrices of the original problem. I've got completely lost after that. How is the number I'm supposed to find as the lower bound calculated? </p>\n\n<p>Also, I'm aware that the lower bound has to be calculated for partial solutions, but how do I do that? The lower bound, as I understood, it's calculated from the program's matrices, which are a parameter for the branch and bound algorithm and are fixed from the beginning aren't they? I'd also need an explanation for that.</p>\n", 'ViewCount': '110', 'Title': 'Trying to understand the Gilmore-Lawler lower bound', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-28T12:34:17.467', 'LastEditDate': '2014-03-28T12:34:17.467', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12801', 'Tags': '<algorithms><optimization><heuristics><lower-bounds><branch-and-bound>', 'CreationDate': '2014-03-27T17:56:59.077', 'Id': '23146'},94_39:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>This is my problem:</p>\n\n<pre><code>There are n collections of M geometric shapes (not necessarily disjoint).\nPick a single shape from each collection,\n     such that the n selected shapes are pairwise interior-disjoint.\n</code></pre>\n\n<p>This problem is NP-complete even when the shapes are restricted to axis-parallel squares (see this <a href="http://cstheory.stackexchange.com/questions/20297/is-set-packing-easier-when-the-sets-are-squares">cstheory.SE question</a> ). The naive algorithm is to check all $M^n$ combinations in the cartesian product. Assuming we can check intersection of two shapes in time O(1), the naive algorithm takes time $O(n\\cdot M^n)$. What heuristics can be used to reduce the run-time?</p>\n\n<p>NOTE: About 2 months ago I asked <a href="http://cs.stackexchange.com/questions/20126/a-heuristic-for-finding-a-maximum-disjoint-set">a related question</a>, in which there is only a single collection of candidate shapes. In that case, I used a geometerically-based divide-and-conquer heuristic, combined with branch-and-bound as recommended by D.W. Careful tuning lead to a dramatic reduction in run-time (50-80 times faster). </p>\n\n<p>However, I don\'t see a way to use divide-and-conquer in the current problem. I can partition the collections, but, a disjoint set in one partition won\'t necessarily be compatible with a disjoint set in the other partition (the sets might contain shapes from the same collection...)</p>\n\n<p>Can you suggest any heuristics, either divide-and-conquer or otherwise, for solving this problem more efficiently?</p>\n', 'ViewCount': '23', 'Title': 'A heuristic for finding a disjoint set of representatives', 'LastEditorUserId': '1342', 'LastActivityDate': '2014-03-28T13:28:05.197', 'LastEditDate': '2014-03-28T13:28:05.197', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<computational-geometry><heuristics>', 'CreationDate': '2014-03-28T13:13:57.203', 'Id': '23175'},94_40:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Has the following problem been studied before? If yes, what approaches/algorithms were developed to solve it?</p>\n\n<blockquote>\n  <p><strong>Problem ("Maximum Stacking Height Problem")</strong></p>\n  \n  <p>Given $n$ polygons, find their stable, non-overlapping arrangement\n  that <strong>maximizes their stacking height</strong> on a fixed floor under the\n  influence of gravity.</p>\n</blockquote>\n\n<p><br></p>\n\n<h2>Example</h2>\n\n<p>Three polygons:</p>\n\n<p><img src="http://i.stack.imgur.com/SbCt3.png" alt="enter image description here"></p>\n\n<p>and three of their infinitely many stable, non-overlapping arrangements, with different stacking heights:</p>\n\n<p><img src="http://i.stack.imgur.com/h938i.png" alt="enter image description here"></p>\n\n<p><br></p>\n\n<h2>Clarifications</h2>\n\n<ul>\n<li>All polygons have uniform mass and equal density</li>\n<li>Friction is zero</li>\n<li>Gravity is acting on every point into the downwards direction (i.e. the force vectors are all parallel)</li>\n<li>A configuration is not considered stable if it rests on an unstable equilibrium point (for example, the green triangle in the pictures can not balance on any of its vertices, even if the mass to the left and the right of the balance point is equal)</li>\n<li>To further clarify the above point: A polygon is considered unstable ("toppling") <em>unless</em> it rests on at least one point <em>strictly to the left</em> <strong>and</strong> at least one point <em>strictly to the right</em> of its center of gravity (this definition greatly simplifies simulation and in particular makes position integration etc. unnecessary for the purpose of evaluating whether or not an arrangement is stable.</li>\n<li>The problem in its "physical" form is a continuous problem that can only be solved approximately for most cases. <strong>To obtain a discrete problem that can be tackled algorithmically, constrain both the polygon vertices and their placement in the arrangement to suitable lattices.</strong></li>\n</ul>\n\n<p><br></p>\n\n<h2>Notes</h2>\n\n<ul>\n<li>Brute force approaches of any kind are clearly infeasible. Even with strict constraints on the placement of polygons inside the lattice (such as providing a limited region "lattice space") the complexity simply explodes for more than a few polygons.</li>\n<li>Iterative algorithms must bring some very clever heuristics since it is easy to construct arrangements where removing any single polygon results in the configuration becoming unstable and such arrangements are unreachable by algorithms relying on every intermediate step being stable.</li>\n<li>Since the problem smells at least NP- but more likely EXPTIME-complete in the total number of vertices, even heuristics would be of considerable interest. <strong>One thing that gives hope is the fact that most humans will recognize that the third arrangement in the example is optimal.</strong></li>\n</ul>\n', 'ViewCount': '46', 'Title': 'Maximum Stacking Height Problem', 'LastActivityDate': '2014-04-10T18:20:35.550', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '16652', 'Tags': '<algorithms><time-complexity><optimization><computational-geometry><heuristics>', 'CreationDate': '2014-04-10T17:14:32.580', 'Id': '23651'},94_41:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am trying to implement Tabu search, as shown <a href="http://www.cleveralgorithms.com/nature-inspired/stochastic/tabu_search.html" rel="nofollow">here</a>, for my problem. I am now stuck on how to generate the tabu list. In algorithm it mentions that if cost of the candidate is better than the best, then make candidate same as best, and populate tabu list with FeatureDifference(best, candidate). Thus the function gets duplicate copies of argument with different name best and candidate. Also I am not sure how to interpret or implement the function FeatureDifference(best, candidate), because except for name there is no description.</p>\n\n<p>I do understand that this function will differ from problem to problem, but an example would make it clearer. The ruby code on the page does show an implementation of traveling salesman problem in ruby, but what they do is just add edges of the best candidate to the tabu list, and I am not able to make the connection.</p>\n\n<p>If anybody can explain what is FeatureDifference(best, candidate), with an example that would be great. Because I am not able to get given only the current and best solution what goes into the tabu list.</p>\n\n<p>Think found <a href="http://docs.jboss.org/drools/release/latest/optaplanner-docs/html_single/index.html#tabuSearch" rel="nofollow">something</a> that could help, thanks to <a href="http://stackoverflow.com/users/472109/geoffrey-de-smet">Geoffrey De Smet</a> from the <a href="http://stackoverflow.com/questions/20368048/solving-travelling-salesman-with-tabu-search">discussion</a>.</p>\n', 'ViewCount': '32', 'Title': 'How to populate the tabu list in tabu search?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-27T11:38:54.203', 'LastEditDate': '2014-04-27T11:38:54.203', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17094', 'Tags': '<algorithms><search-algorithms><heuristics>', 'CreationDate': '2014-04-26T15:40:00.323', 'Id': '24130'}