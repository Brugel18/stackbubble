{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p><em>Originally on <a href="http://math.stackexchange.com/questions/74453/how-is-the-loop-invarient-obtained-in-this-square-root-bound-finding-algorithm">math.SE</a> but unanswered there.</em></p>\n\n<p>Consider the following algorithm.</p>\n\n<pre><code>u := 0\nv := n+1;\nwhile ( (u + 1) is not equal to v) do\n   x :=  (u + v) / 2;\n   if ( x * x &lt;= n) \n     u := x;\n   else\n     v := x;\n   end_if\nend_while \n</code></pre>\n\n<p>where u, v, and n are integers and the division operation is integer division. </p>\n\n<ul>\n<li>Explain what is computed by the algorithm. </li>\n<li>Using your answer to part I as the post-condition for the algorithm, establish a loop invariant and show that \nthe algorithm terminates and is correct.</li>\n</ul>\n\n<p>In class, the post-condition was found to be $0 \\leq u^2 \\leq n &lt; (u + 1)^2$ and the \nInvariant is $0 \\leq u^2 \\leq n &lt; v^2, u + 1 \\leq v$.  I don\'t really understand on how the post-condition and invariants were obtained.  I figure the post condition was $u + 1 = v$... which is clearly not the case.  So I am wondering on how the post-condition and invariant was obtained.  I\'m also wondering on how the pre-condition can be obtained by using the post-condition.</p>\n', 'ViewCount': '271', 'Title': 'How is the loop invariant obtained in this square root bound finding algorithm?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-10T03:28:29.270', 'LastEditDate': '2012-05-10T03:28:29.270', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '5', 'Tags': '<algorithms><loop-invariants><correctness-proof>', 'CreationDate': '2012-03-13T06:06:53.057', 'FavoriteCount': '1', 'Id': '288'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I have developed the following pseudocode for the sum of pairs problem:</p>\n\n<blockquote>\n  <p>Given an array $A$ of integers and an integer $b$, return YES if there are positions $i,j$ in $A$ with $A[i] + A[j] = b$, NO otherwise.</p>\n</blockquote>\n\n<p>Now I should state a loop invariant that shows that my algorithm is correct. Can someone give me a hint of a valid loop invariant? </p>\n\n<pre><code>PAIRSUM(A,b):\nYES := true;\nNO := false;\nn := length(A);\nif n&lt;2 then\n  return NO;\n\nSORT(A);\ni := 1;\nj := n;\nwhile i &lt; j do  // Here I should state my invariant\n   currentSum := A[i] + A[j];\n   if currentSum = b  then\n      return YES;\n   else \n    if currentSum &lt; b then\n      i := i + 1;\n    else\n      j := j \u2013 1;\nreturn NO;\n</code></pre>\n', 'ViewCount': '428', 'Title': 'Loop invariant for an algorithm', 'LastEditorUserId': '635', 'LastActivityDate': '2012-04-10T08:37:32.370', 'LastEditDate': '2012-04-10T03:29:03.627', 'AnswerCount': '4', 'CommentCount': '4', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1011', 'Tags': '<algorithms><proof-techniques><loop-invariants>', 'CreationDate': '2012-04-09T10:03:11.910', 'Id': '1157'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm making a graduate thesis about proving correctness of program for multiplying 2 matrices using Hoare logic. For doing this, I need to generate the invariant for nested loop for this program:</p>\n\n<pre><code>for i = 1:n\n    for j = 1:n\n        for k = 1:n\n            C(i,j) = A(i,k)*B(k,j) + C(i,j);\n        end\n    end\nend\n</code></pre>\n\n<p>I've tried to find the invariant for inner loop first, but I can't find the true one until now. Is there someone can help me for finding the invariant for above program?</p>\n", 'ViewCount': '514', 'Title': 'Invariant For Nested Loop in Matrix Multiplication Program', 'LastEditorUserId': '472', 'LastActivityDate': '2012-05-06T15:19:40.093', 'LastEditDate': '2012-05-02T10:33:52.290', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '7', 'OwnerDisplayName': 'Anggha Nugraha', 'PostTypeId': '1', 'OwnerUserId': '1352', 'Tags': '<algorithms><loop-invariants><correctness-proof>', 'CreationDate': '2012-05-01T20:55:52.537', 'Id': '1625'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have created the algorithm below...</p>\n\n<pre><code>        String A = v[0];\n        int val = 1;\n\n        for (int i = 1; i &lt; v.length; i++) {\n            if (val == 0) {\n                A = v[i];\n                val++;\n            } else if (v[i].equals(A))\n                val++;\n            else\n                val--;\n        }\n</code></pre>\n\n<p>The goal of the algorithm is to find the item that occurs in more than half the array.</p>\n\n<p>Let v = {"one", "two", "one", "three", "one", "two", "two", "one", "one"}</p>\n\n<p>The string "one" occurs 5 out of 9 times.  So, at the end of the loop, the String A will be equal to "one". </p>\n\n<p>I\'m lost as to how to derive a loop invariant from this.  Could someone provide me with some direction?</p>\n', 'ViewCount': '218', 'Title': 'Help Finding Loop Invariant From For Loop', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-15T09:39:40.800', 'LastEditDate': '2012-09-13T21:53:54.173', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2816', 'Tags': '<algorithms><loop-invariants><correctness-proof>', 'CreationDate': '2012-09-13T19:06:30.303', 'FavoriteCount': '2', 'Id': '3532'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>From <a href="http://rads.stackoverflow.com/amzn/click/0262033844" rel="nofollow">CLRS</a> (third edition, page 19), there is a footnote:</p>\n\n<blockquote>\n  <p>When the loop is a for loop, the moment at which we check the loop invariant just prior to the first iteration is immediately after the initial assignment to the loop-counter variable and just before the first test in the loop header.</p>\n</blockquote>\n\n<p>Why is the checking moment specifically chosen to be after the initial assignment but before the first test? Note the excerpt is talking about proving correctness of algorithms using loop invariants.</p>\n', 'ViewCount': '162', 'Title': 'Invariant Proof of For Loops?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-11T15:25:00.483', 'LastEditDate': '2012-11-10T12:28:54.603', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4533', 'Tags': '<proof-techniques><correctness-proof><loop-invariants>', 'CreationDate': '2012-11-10T03:23:45.817', 'Id': '6595'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Consider the searching problem:</p>\n\n<blockquote>\n  <p>Input: A sequence of $n$ numbers $A=(a_1, a_2, \\ldots , a_n)$ and a value $v$.</p>\n  \n  <p>Output: An index $i$ such that $v = a_i$ or the special value NIL if $v$ does not appear in $A$</p>\n</blockquote>\n\n<p>Write pseudocode for linear search, which scans through the sequence, looking for $v$. Using a loop invariant, prove that your algorithm is correct. Make sure that your loop invariant fulfills the three necessary properties.</p>\n\n<p>The algorithm is clearly very simple to prove. However could someone prove the correctness of the algorithm using a loop invariant? Note the "three necessary properties" are:</p>\n\n<ul>\n<li><p>Initialization: It is true prior to the first iteration of the loop.</p></li>\n<li><p>Maintenance: If it is true before an iteration of the loop, it remains true before the</p></li>\n<li><p>Termination: When the loop terminates, the invariant gives us a useful property that helps show that the algorithm is correct.</p></li>\n</ul>\n', 'ViewCount': '436', 'Title': 'Proof of linear search?', 'LastEditorUserId': '4528', 'LastActivityDate': '2012-11-10T18:12:56.610', 'LastEditDate': '2012-11-10T07:03:19.407', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4533', 'Tags': '<proof-techniques><correctness-proof><loop-invariants>', 'CreationDate': '2012-11-10T04:23:18.037', 'Id': '6597'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/6597/proof-of-linear-search">Proof of linear search?</a>  </p>\n</blockquote>\n\n\n\n<p>I\'m reading the MIT Press, Introduction to Algorithms textbook 3rd edition, and I am a bit confused by an exercise. </p>\n\n<p>2.1-3\nConsider the searching problem:\nInput: A sequence of n numbers A =  and a value v.\nOutput: An index i such that v = A[i] or the special value NIL if v does not appear in A.</p>\n\n<p>Write pseudocode for linear search, which scans through the sequence looking for v. Using a loop invariant, prove that your algorithm is correct. Make sure your loop invariant fulfills the three necessary properties.</p>\n\n<p>Earlier in the book I read that "We must show three things about a loop invariant:</p>\n\n<p>Initialization: It is true prior to the first iteration of the loop.</p>\n\n<p>Maintenance: If it is true before an iteration of the loop, it remains true before the\nnext iteration.</p>\n\n<p>Termination: When the loop terminates, the invariant gives us a useful property that helps show that the algorithm is correct.\n"</p>\n\n<p>I wrote this as my pseudocode</p>\n\n<pre><code>index = nil\nj = 1 \nwhile j &lt;= A.length and index == nil\n  if A[j] == v\n    index = j\n  j = j + 1\n</code></pre>\n\n<p>But when it comes to proving using a loop invariant I have no idea what to do. What do I even use as a loop invariant? To be honest I\'m not really clear about the entire loop invariant concept. Can someone please help me understand this? </p>\n\n<p>Thanks.</p>\n', 'ViewCount': '38', 'ClosedDate': '2012-12-04T17:03:05.747', 'Title': 'loop invariant proof', 'LastEditorUserId': '4648', 'LastActivityDate': '2012-12-04T03:56:29.240', 'LastEditDate': '2012-12-04T03:56:29.240', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'OwnerDisplayName': 'the.alch3m1st', 'PostTypeId': '1', 'Tags': '<algorithms><algorithm-analysis><correctness-proof><loop-invariants>', 'CreationDate': '2012-12-03T20:11:11.017', 'Id': '7138'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Would it be correct to characterize loop invariants as a type of tautology?  I ask since the invariant must basically always be true, before the loop starts, before each iteration and after the loop terminates.  I realize that there is the possibility that the invariant could become false during the body of the loop.  But since inside the loop "doesn\'t count" is it fair to characterize the invariant as a tautology?</p>\n', 'ViewCount': '92', 'Title': 'Loop Invariants as Tautologies', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T21:25:07.547', 'LastEditDate': '2013-03-12T14:08:56.163', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '10471', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6728', 'Tags': '<algorithm-analysis><logic><correctness-proof><loop-invariants><program-correctness>', 'CreationDate': '2013-03-12T07:57:56.437', 'Id': '10469'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Suppose you have some loop and and integer k:</p>\n\n<pre><code>int k = 5;\nfor (int i = 0 ; i &lt; N; i++)\n{\n  //(*)\n  //do something \n}\n</code></pre>\n\n<p>The loop invariant at (*) is:\n$\\{ K=k\\}$</p>\n\n<p>Does that guarantee that $k$ doesn't change in between iterations? if not, is there any otherway to guarantee that?</p>\n", 'ViewCount': '35', 'Title': 'Does this loop invariant guarantee that the variable never changes?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-12T23:04:59.827', 'LastEditDate': '2013-04-12T23:04:59.827', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11270', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7706', 'Tags': '<loop-invariants><program-correctness><hoare-logic>', 'CreationDate': '2013-04-12T16:12:13.507', 'Id': '11269'}},{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've been reading a book on using loop invariants and induction to prove program correctness. Then I came across the following program which got me thinking...</p>\n\n<h1>Specification for Cube_Root(n)</h1>\n\n<p>Pre-Condition : n is a natural number.\nPost-Condition: Cube_Root returns a natural number i that is the cube root of n or it returns -1 if no such root exists</p>\n\n<p>Cube_Root(n)\n  i = 0\n  while i &lt; n\n    if i * i * i = n\n      return(i)\n    else\n      i = i + 1</p>\n\n<p>return(-1)</p>\n\n<p>In the book, the proof proceeds by finding a loop invariant. \nSo for example let us define the following as our loop invariant:</p>\n\n<p>Loop Invariant P(i): i is either the natural number cube root of n or i >= n\nThe proof is then supposed to proceed by induction on i.\nSo we need to prove that P(0) is true, assume that P(i) is true for some i and then establish that if P(i) is true then P(i+1) is true.</p>\n\n<p>P(0) is trivial to prove true:\n  Basis P(0): i = 0. \n    if n == 0 then i is a natural number and the the cube root of n\n    otherwise n > 0 (since n is a natural number) and hence i &lt; n</p>\n\n<p>However, the problem arises when you try to infer P(i+1) from P(i). it doesn't look like you can because if i is not the cube root of n, it doesn't tell you anything about whether i+1 is or is not the cube root of n.</p>\n\n<p>So my question(s) are:</p>\n\n<p>1) Has it been proven that for any program there exists a loop invariant on which you can \n   use induction to prove the program is correct?\n2) The loop invariant chosen for Cube_Root is obviously true after the loop terminates \n   which proves that the post-condition of the program is satisfied. Hence, that proves \n   partial correctness of the program. However, we did not need to use induction to prove \n   that. Is that an acceptable proof? If not, how do we use induction to prove Cube_Root \n   correct?</p>\n", 'ViewCount': '529', 'Title': 'Proof of Program Correctness - Loop Invariants', 'LastActivityDate': '2013-06-13T07:52:09.430', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8639', 'Tags': '<loop-invariants><program-correctness>', 'CreationDate': '2013-06-12T14:59:53.087', 'Id': '12638'}},