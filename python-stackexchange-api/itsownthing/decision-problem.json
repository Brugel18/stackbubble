{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It is known that each optimization/search problem has an equivalent decision problem. For example the shortest path problem</p>\n\n<blockquote>\n  <ul>\n  <li><strong>optimization/search version:</strong>\n  Given an undirected unweighted graph $G = (V, E)$ and two vertices $v,u\\in V(G)$, find a shortest path between $v$ and $u$.</li>\n  <li><strong>decision version:</strong> \n  Given an undirected unweighted graph $G = (V, E)$, two vertices $v,u\\in V(G)$ and a non-negative integer $k$. Is there a path in $G$ between $u$ and $v$ whose length is at most $k$?</li>\n  </ul>\n</blockquote>\n\n<p>In general, "Find $x^*\\in X$ s.t. $f(x^*) = \\min\\{f(x)\\mid x\\in X\\}$!" becomes "Is there $x\\in X$ s.t. $f(x) \\leq k$?". </p>\n\n<p>But is the reverse also true, i.e. is there an equivalent optimization problem for every decision problem? If not, what is an example of a decision problem that has no equivalent optimization problem?</p>\n', 'ViewCount': '1009', 'Title': 'Optimization version of decision problems', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-21T15:32:42.343', 'LastEditDate': '2012-04-01T08:47:48.317', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '15', 'OwnerDisplayName': 'bek', 'PostTypeId': '1', 'Tags': '<complexity-theory><optimization><search-problem><decision-problem>', 'CreationDate': '2012-03-31T06:30:08.680', 'FavoriteCount': '5', 'Id': '939'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '193', 'Title': 'What is the difference between "Decision" and "Verification" in complexity theory?', 'LastEditDate': '2012-04-22T16:09:00.167', 'AnswerCount': '2', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '603', 'FavoriteCount': '1', 'Body': '<p>In Michael Sipser\'s <em>Theory of Computation</em> on page 270 he writes:</p>\n\n<blockquote>\n  <p>P = the class of languages for which membership can be decided quickly.<br>\n  NP = the class of languages for which membership can be verified quickly.</p>\n</blockquote>\n\n<p>What is the difference between "decided" and "verified"?</p>\n', 'Tags': '<complexity-theory><terminology><decision-problem>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T16:09:00.167', 'CommentCount': '1', 'AcceptedAnswerId': '1141', 'CreationDate': '2012-04-08T18:57:17.230', 'Id': '1137'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>My book states this</p>\n\n<blockquote>\n  <ul>\n  <li>If a decision problem B is in P and\n  A reduces to B,\n  then decision problem A is in P.</li>\n  <li>A decision problem B is NP-complete if\n  B is in NP and\n  for every problem in A in NP, A reduces to B.</li>\n  <li>A decision problem C is NP-complete if\n  C is in NP and\n  for some NP-complete problem B, B reduces to C.</li>\n  </ul>\n</blockquote>\n\n<p>So my questions are</p>\n\n<blockquote>\n  <ol>\n  <li>If B or C is in NP-complete, and all problems in NP reduce to an NP-complete problem, using the first rule, how can any NP problem not be NP complete?</li>\n  <li>If A reduces to B, does B reduce to A?</li>\n  </ol>\n</blockquote>\n', 'ViewCount': '628', 'Title': 'All NP problems reduce to NP-complete problems: so how can NP problems not be NP-complete?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-03T16:24:01.647', 'LastEditDate': '2012-04-27T18:38:48.000', 'AnswerCount': '3', 'CommentCount': '3', 'Score': '6', 'OwnerDisplayName': 'rubixibuc', 'PostTypeId': '1', 'OwnerUserId': '4772', 'Tags': '<complexity-theory><np-complete><decision-problem>', 'CreationDate': '2012-02-29T21:07:18.197', 'Id': '1526'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1059', 'Title': "Why isn't this undecidable problem in NP?", 'LastEditDate': '2013-10-05T23:00:15.917', 'AnswerCount': '3', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '1528', 'FavoriteCount': '2', 'Body': '<p>Clearly there aren\'t any undecidable problems in NP.  However, according to <a href="http://en.wikipedia.org/wiki/NP_%28complexity%29" rel="nofollow">Wikipedia</a>:</p>\n\n<blockquote>\n  <p>NP is the set of all decision problems for which the instances where the answer is "yes" have [.. proofs that are] verifiable in polynomial time by a deterministic Turing machine.</p>\n  \n  <p>[...]</p>\n  \n  <p>A problem is said to be in NP if and only if there exists a verifier for the problem that executes in polynomial time.</p>\n</blockquote>\n\n<p>Now consider the following problem:</p>\n\n<blockquote>\n  <p>Given a <a href="http://en.wikipedia.org/wiki/Diophantine_equation" rel="nofollow">Diophantine equation</a>, does it have any integer solutions?</p>\n</blockquote>\n\n<p>Given a solution, it\'s easy to verify in polynomial time that it really <em>is</em> a solution:  just plug the numbers into the equation.  Thus, the problem is in NP.  However, <em>solving</em> this problem is famously <a href="http://en.wikipedia.org/wiki/Hilbert%27s_tenth_problem" rel="nofollow">known to be undecidable</a>!</p>\n\n<p><em>(Similarly, it seems the halting problem should be in NP, since the "yes"-solution of "this program halts at the N-th step" can be verified in N steps.)</em></p>\n\n<p>Obviously there\'s something wrong with my understanding, but what is it?</p>\n', 'Tags': '<complexity-theory><computability><undecidability><decision-problem>', 'LastEditorUserId': '1528', 'LastActivityDate': '2013-10-05T23:00:15.917', 'CommentCount': '4', 'AcceptedAnswerId': '1902', 'CreationDate': '2012-05-17T16:50:51.853', 'Id': '1887'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I want to specify, what it means to give an algebra as input to an algorithm and didn't find very much literature about it. So first I want to ask if you can recommend a book or paper that deals with the topic of complexity analysis of algebras over fields <em>and clearly define the decision problem</em>.</p>\n\n<p>After some digging I found <em>something</em> and want to share it here and furthermore ask if the definitions make sense and are in compliance with literature (if there is any):</p>\n\n<blockquote>\n  <p><strong>Definition:</strong> Let $\\mathbb F$ be a field and $A$ be a finitely generated commutative $\\mathbb F$-algebra with additive basis $b_1,\\ldots, b_n\\in\\mathbb F$. We now want to capture the multiplicative structure of the algebra and therefore write every product of base elements as a linear combination of all base elements:\n  $$\n\\forall 1\\leq i, j, k\\leq n: \\exists a_{ijk}: b_ib_j=\\sum_{k=1}^n a_{ijk}b_k.\n$$\n  The $a_{ijk}$ are called <strong>structure coefficients</strong>. We directly have that:\n  $$ A \\cong \\left.\\mathbb{F}[b_1, \\ldots, b_n] \\middle/ \\left&lt;b_i b_j-\\sum_{k=1}^n a_{ijk}b_k\\right&gt;_{1\\leq i,j\\leq n}\\right..$$\n  Now one can define the following decision problem:\n  $$\n\\{(A,B)\\mid A, B \\text{ commutative $\\mathbb F$-algebras with basis $b_1, \\ldots b_n$ and } A\\cong B\\}.\n$$\n  To specify an isomorphism $\\phi:A\\rightarrow B$ it is sufficient to write every $\\phi(b_i)$ as linear combination of the elements of a basis of $B$.</p>\n</blockquote>\n\n<p>Does anything in this definition seem strange to you or do you think that one can work with it? </p>\n\n<blockquote>\n  <p><strong>Motivation:</strong> My motivation behind this is to give a very clear definition of the decision problem first to connect it to other problems, i.e. the problem of deciding polynomial equivalence: Given two polynomials $f,g\\in\\mathbb F[x_1, \\ldots, x_n]$, we say that $f$ is <strong>equivalent</strong> to $g$ if there exists an invertible linear transformation $\\tau$ on the variables such that $f(\\tau(x_1), \\ldots, \\tau(x_n))=g(x_1, \\ldots, x_n)$. In other words, two polynomials are equivalent if you can replace every variable by a linear combination of all variables to obtain the other polynomial. </p>\n</blockquote>\n\n<p>I'm not sure if this helps as a motivation but the connection of this problems is established by constructing finitely generated commutative $\\mathbb F$-algebras from the two polynomials that are isomorphic if and only if the polynomials are equivalent. For this I wanted to make sure that the decision problem is defined very clearly. </p>\n", 'ViewCount': '112', 'Title': 'An $\\mathbb F$-algebra as input to an algorithm', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-17T06:09:52.990', 'LastEditDate': '2012-07-17T05:59:47.400', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '2103', 'Tags': '<computability><terminology><decision-problem>', 'CreationDate': '2012-07-07T20:18:54.500', 'FavoriteCount': '1', 'Id': '2642'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given a TSP instance $T$, decide whether changing the city coordinates by adding a vector of coordinates $v$ will change the optimal TSP objective by atleast $x$. The city coordinates are integers.</p>\n\n<p>The problem is in PSPACE but even the verification problem seems to be NP-hard. Is that true?</p>\n\n<p>If the verification problem is NP-hard, what exact complexity class does this problem belong to?</p>\n', 'ViewCount': '192', 'Title': 'What complexity class does this variation of traveling salesman problem belong to?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:04:38.777', 'LastEditDate': '2013-06-06T15:04:38.777', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2160', 'Tags': '<complexity-theory><reductions><np-hard><decision-problem><traveling-salesman>', 'CreationDate': '2012-07-13T23:45:51.823', 'Id': '2737'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What\'s the definition of Kolmogorov complexity for a decision problem? For example, how to define the length of the shortest program that solves the 3SAT problem? Is it the "smallest" Turing machine that recognizes the 3SAT langauge?</p>\n', 'ViewCount': '76', 'Title': 'Kolmogorov complexity of a decision problem', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-18T01:33:05.280', 'LastEditDate': '2012-07-18T01:33:05.280', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '2779', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1986', 'Tags': '<computability><terminology><decision-problem><kolmogorov-complexity><3-sat>', 'CreationDate': '2012-07-16T18:48:03.180', 'Id': '2770'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I know that given two problems are undecidable it does not follow that their intersection must be undecidable. For example, take a property of languages $P$ such that it is undecidable whether the language accepted by a given pushdown automaton $M$ has that property. Clearly $P$ and $\\lnot P$ are undecidable (for a given $M$) but $P \\cap \\lnot P$ is trivially decidable (it is always false).</p>\n\n<p>I wonder if there are any "real life" examples which do not make use of the "trick" above? When I say "real life" I do not necessarily mean problems which people come across in their day to day life, I mean examples where we do not take a problem and it\'s complement. It would be interesting (to me) if there are examples where the intersection is not trivially decidable.</p>\n', 'ViewCount': '485', 'Title': 'Examples of undecidable problems whose intersection is decidable', 'LastEditorUserId': '769', 'LastActivityDate': '2012-08-02T11:57:36.140', 'LastEditDate': '2012-08-02T09:20:43.607', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '3002', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '769', 'Tags': '<reference-request><undecidability><decision-problem>', 'CreationDate': '2012-08-01T13:04:25.613', 'Id': '2982'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Assume we have an optimization problem with function $f$ to maximize.</p>\n\n<p>Then, the corresponding decision problem 'Does there exist a solution with $f\\ge k$ for a given $k$?' can easily be reduced to the optimization problem: calculate the optimal solution and check if it is $\\ge k$.</p>\n\n<p>Now, I was wondering, is it always possible to do the reduction (in polynomial time) the other way around?</p>\n\n<p>For an example consider MAX-SAT: to reduce the optimization problem to the decision problem we can do a binary search in the integer range from 0 to the number of clauses. At each stoppage $k$ we check, with the decision problem solver, if there is a solution with $\\ge k$.</p>\n", 'ViewCount': '514', 'Title': 'Optimization problem vs decision problem - reduction', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-01T17:03:21.837', 'LastEditDate': '2012-08-02T06:18:37.633', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2313', 'Tags': '<complexity-theory><optimization><reductions><decision-problem>', 'CreationDate': '2012-08-01T13:08:35.477', 'FavoriteCount': '1', 'Id': '2983'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is the following FOL-problem (equality is a logical symbol) \neffectively decidable?</p>\n\n<p><strong>Given.</strong>  A finite equation system $E$ and an equation $s = t$.</p>\n\n<p><strong>Question.</strong>  Is there a substitution $\\sigma$, such that $\\sigma(E)\n\\models \\sigma(s = t)$?</p>\n\n<p><strong>Some useful information.</strong>  </p>\n\n<ol>\n<li><p>Obviously one can restrict $\\sigma$ to be a ground substitution.</p></li>\n<li><p>This problem is decidable:  Given a finite system $E$ of<br>\nground equations and a ground equation $s = t$, does $E \\models s = t$<br>\nhold? (c.f. [1: Corollary 4.3.6]) </p></li>\n</ol>\n\n<p><strong>References</strong></p>\n\n<p>[1] Franz Baader, Tobias Nipkow: Term Rewriting and All That,\n&copy; 1998 Cambridge University Press.</p>\n', 'ViewCount': '90', 'Title': 'Is the validity of some instance of an equational problem decidable?', 'LastEditorUserId': '2626', 'LastActivityDate': '2012-08-25T10:02:52.893', 'LastEditDate': '2012-08-24T20:50:16.470', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '3329', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2626', 'Tags': '<computability><logic><decision-problem><equality>', 'CreationDate': '2012-08-24T11:30:29.003', 'Id': '3312'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Suppose I have a formula, and a lying witness is attempting to make it evaluate to False.</p>\n\n<blockquote>\n  <p>Given a <a href="http://en.wikipedia.org/wiki/Truth_table" rel="nofollow">truth table</a> $c(F_1,\u2026, F_n)$, how could you force a lying\n   witness to contradict herself?</p>\n</blockquote>\n\n<p>A contradiction is simply when the witness\'s statements are logically impossible; i.e. that $x_1,x_2$ are each True, but $x_1 \\space AND\\space x_2$ is False.</p>\n\n<ul>\n<li>How can I characterize the set of all formula for which I force the witness to contradict herself?</li>\n<li>What complexity class does this problem fall in?</li>\n</ul>\n', 'ViewCount': '252', 'Title': 'Given a truth table, force a contradiction', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-12-26T07:32:37.003', 'LastEditDate': '2012-11-26T07:05:41.493', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4222', 'Tags': '<complexity-theory><computability><np-complete><closure-properties><decision-problem>', 'CreationDate': '2012-10-16T23:32:35.117', 'FavoriteCount': '1', 'Id': '6116'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '123', 'Title': 'Complement of HAMPATH', 'LastEditDate': '2012-10-17T20:21:48.000', 'AnswerCount': '1', 'Score': '3', 'OwnerDisplayName': 'pnp', 'PostTypeId': '1', 'OwnerUserId': '4190', 'FavoriteCount': '1', 'Body': '<p>Is the complement of the <a href="http://en.wikipedia.org/wiki/Hamiltonian_path" rel="nofollow">Hamiltonian Path problem</a> known to be in $\\mathsf{NP}$? I could not find explanations saying that it is, but then neither were there any claims saying that it is <strong>not</strong> in $\\mathsf{NP}$.</p>\n', 'Tags': '<complexity-theory><decision-problem>', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-10-17T20:28:58.323', 'CommentCount': '0', 'AcceptedAnswerId': '6135', 'CreationDate': '2012-10-17T12:01:25.203', 'Id': '6128'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>While reading the <a href="http://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow">Wikipedia article about the subset sum problem</a> I came across this example: "is there a non-empty subset whose sum is zero? For example, given the set $\\{ \u22127, \u22123, \u22122, 5, 8 \\}$, the answer is yes because the subset $\\{ \u22123, \u22122, 5 \\}$ sums to zero". </p>\n\n<p>I have noticed that if we shift all the values of the set by adding a 8 to all elements we get $\\{ 1, 5, 6, 13, 16 \\}$ and then add the constant to the desired solution $0 + 8$, so now the question becomes is there a subset that adds up to $8$, which is not possible. My question is why does shifting the set and the solution by a positive integer "break" the solution, isn\'t the mathematics sound from the previous operations?</p>\n', 'ViewCount': '235', 'Title': 'Shifting subset sum solution by constant positive integer', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-26T13:03:57.800', 'LastEditDate': '2012-10-26T13:03:57.800', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6320', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4365', 'Tags': '<integers><decision-problem>', 'CreationDate': '2012-10-26T02:35:50.503', 'Id': '6319'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<ol>\n<li><p>Is it always true that a problem which is ${\\sf NP}$-hard but not ${\\sf NP}$-complete is an optimization problem such as <strong>Minimum-Vertex-Cover</strong> and many others.</p></li>\n<li><p>Is it always true that a ${\\sf NP}$-complete problem is always a decision problem such as vertex cover of size $k$, independent set of size $k$ and many others.</p></li>\n</ol>\n', 'ViewCount': '154', 'Title': 'NP-Hard problems which are not NP-Complete', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-27T08:19:00.027', 'LastEditDate': '2012-11-27T08:19:00.027', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2556', 'Tags': '<complexity-theory><terminology><np-complete><np-hard><decision-problem>', 'CreationDate': '2012-11-26T07:02:31.070', 'FavoriteCount': '1', 'Id': '6910'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Trivially decidable problem is one in which the problem is a known property of the language/grammar. So  <strong>intersection of two regular languages is regular should be trivially decidable</strong>? But it is given as not trivially decidable.</p>\n', 'ViewCount': '249', 'Title': 'Is the intersection of two regular languages regular?', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-25T21:16:11.313', 'LastEditDate': '2012-12-25T21:16:11.313', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '7534', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4763', 'Tags': '<regular-languages><undecidability><decision-problem>', 'CreationDate': '2012-12-18T14:08:00.077', 'Id': '7488'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is the first step in solving a "tough" algorithmic problem always asking whether it\'s hard in the sense that other tough problems can be reduced to it? Not to make the scope of this question tight, what\'s good advice for approaching challenging algorithmic problems?</p>\n', 'ViewCount': '145', 'Title': 'Solving algorithmic problems', 'LastEditorUserId': '2499', 'LastActivityDate': '2013-01-29T16:55:23.057', 'LastEditDate': '2012-12-31T12:11:01.390', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<algorithms><decision-problem><search-problem>', 'CreationDate': '2012-12-31T12:03:23.277', 'Id': '7663'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '140', 'Title': 'Decision problem and algorithm', 'LastEditDate': '2013-01-05T12:41:30.573', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '947', 'FavoriteCount': '1', 'Body': '<p>I was reading about decision problem. I understand that decision problem tell yes/no answer for an input. The decision is based on a decision procedure also called an algorithm. </p>\n\n<p>The wikipedia says that </p>\n\n<blockquote>\n  <p>It is traditional to define the decision problem equivalently as: the set of inputs for which the problem returns yes.</p>\n  \n  <p>These inputs can be natural numbers, but may also be values of some other kind, such as strings over the binary alphabet $\\{0,1\\}$ or over some other finite set of symbols. The subset of strings for which the problem returns "yes" is a formal language, and often decision problems are defined in this way as formal languages.</p>\n</blockquote>\n\n<p>Whether I can take it like algorithm written in a programming language defines the set of all possibilities and gives the output based on the input?</p>\n\n<p>So in computability theory, the problem should be encoded to some form? Is this same thing as the input tape and configuration of a Turing machine (set of 0\'s and 1\'s )?</p>\n', 'Tags': '<computability><turing-machines><undecidability><decision-problem>', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-01-05T14:46:26.633', 'CommentCount': '0', 'AcceptedAnswerId': '7790', 'CreationDate': '2013-01-05T12:27:42.627', 'Id': '7786'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '162', 'Title': 'Complexity of a subset sum variant', 'LastEditDate': '2013-05-24T03:32:02.207', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '140', 'FavoriteCount': '1', 'Body': "<p>Is this variant of the subset sum problem easy/known?</p>\n\n<blockquote>\nGiven an integer $m$, and a set of positive integers $A = \\{x_1, x_2, ..., x_n\\}$ such that every $x_i$ has at most $k=2$ bits set to $1$ ($x_i = 2^{b_{i_1}}+2^{b_{i_2}},\\;\\; b_{i_1},b_{i_2}\\geq 0$); is there a subset $A' \\subseteq A$ such that the sum of its elements is equal to $m$ ?<br>\n</blockquote>\n\n<p>Is it in $\\sf{P}$? Is it still $\\sf{NP}$-complete?</p>\n\n<p>And if every $x_i$ has at most $k=3$ bits set to $1$? For $k=1$ the problem is trivial.</p>\n", 'Tags': '<complexity-theory><reference-request><decision-problem>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:32:02.207', 'CommentCount': '0', 'AcceptedAnswerId': '9004', 'CreationDate': '2013-01-17T13:23:39.540', 'Id': '8988'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '258', 'Title': 'Is it possible to decide if a given algorithm is asymptotically optimal?', 'LastEditDate': '2013-02-02T12:51:15.650', 'AnswerCount': '3', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '6642', 'FavoriteCount': '0', 'Body': '<p>Is there an algorithm for the following problem:</p>\n\n<blockquote>\n  <p>Given a Turing machine $M_1$ that decides a language $L$,<br>\n  Is there a Turing machine $M_2$ deciding $L$ such that\n  $t_2(n) = o(t_1(n))$?</p>\n</blockquote>\n\n<p>The functions $t_1$ and $t_2$ are the worst-case running times of Turing machines $M_1$ and $M_2$ respectively.</p>\n\n<p>What about space complexity?</p>\n', 'Tags': '<complexity-theory><computability><undecidability><decision-problem>', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-02-02T12:51:15.650', 'CommentCount': '1', 'AcceptedAnswerId': '9399', 'CreationDate': '2013-01-31T10:58:26.190', 'Id': '9349'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '236', 'Title': 'What is the decision version of independent set?', 'LastEditDate': '2013-02-02T18:48:17.307', 'AnswerCount': '3', 'Score': '4', 'OwnerDisplayName': 'Jose Antonio Martin H', 'PostTypeId': '1', 'OwnerUserId': '6655', 'Body': "<p>I always read that finding an independent set of size $k$ in a graph is $\\mathsf{NP}$-complete. However, this only requires looking for all combinations of $k$ vertices and this is a polynomial procedure of order $k$.</p>\n\n<p>I know that we can reduce directly SAT to independent set, with $k$ the number of clauses.</p>\n\n<p>The problem is that I can't grasp correctly, as in 3-COLORING or 3-SAT, the required format to study the complexity of INDEPENDENT SET.</p>\n\n<p>What is the decision version of independent set? And why isn't $k$-independent set in $\\mathsf P$?</p>\n", 'Tags': '<complexity-theory><terminology><decision-problem>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-02T18:48:17.307', 'CommentCount': '0', 'AcceptedAnswerId': '9365', 'CreationDate': '2013-01-31T17:41:26.847', 'Id': '9363'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am a bit confused. Somehow I have a problem connecting two problems together. The Closest String problem and the problem of matching with mismatches. They seam to be related but, I fail to see the connection. The Closest String problem is defined as :</p>\n\n<blockquote>\n  <p><em>Instance:</em> Strings $S_{1},S_{2}...S_{n}$ over alphabet $\\Sigma$ of length $L$ each and a non-negative integers $d$ and $n$.</p>\n  \n  <p><em>Parameters:</em> $n,d$</p>\n  \n  <p><em>Question:</em> Is there a string $s$ of length $L$ such that $\\delta(s,S_{i})\\leq d$ for all $i=1..n$?</p>\n</blockquote>\n\n<p>Note: $\\delta(x,y)\\leq d$ is the Hamming distance between $x$ and $y$.</p>\n\n<p>This problem is proven to be NP-complete.</p>\n\n<p>On the other hand we have a problem of matching with mismatches, which is described as:</p>\n\n<blockquote>\n  <p>The problem of string matching with $d$ mismatches consists of finding all occurrences of a pattern of length $m$ in a text of length $n$ such that in at most $d$ positions the text and the pattern have different symbols. In the following, we assume that $0 &lt; d &lt; m$ and $m\\leq n$. </p>\n</blockquote>\n\n<p>Landau and Vishkin gave the first (to my knowledge) efficient algorithm to solve this problem in $O(kn)$ time.</p>\n\n<p>Now my question is:</p>\n\n<p>Is matching with mismatches, or can it be seen, as a special parametrized case of the Closest String problem and how is this connection made?</p>\n', 'ViewCount': '42', 'Title': 'Is matching with mismatches a special(parametrized) case of Closest String problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-04T15:47:42.317', 'LastEditDate': '2013-02-04T15:47:42.317', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9468', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Tags': '<np-complete><decision-problem><matching>', 'CreationDate': '2013-02-04T09:54:26.547', 'Id': '9467'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am interested if there exists a following version of the travelling salesman problem:</p>\n\n<blockquote>\n  <p>INSTANCE: A finite set $C = \\{1,2,\\dots,k\\}$ of cities, a positive integer distance $\\delta(i,j)$ for each pair of cities, and two positive integers $d$ and $B$.</p>\n  \n  <p>QUESTION: Is there a tour that visits every city in $C$, includes exactly $d$ detours, and has total length no more then $B$?  In other words, suppose $OPT$ is the optimal permutation of the cities; that is, $OPT(i)$ is the next city after city $i$ in an optimal traveling salesman tour.  Is there an ordering $x(0), \\dots, x(k-1)$ of the cities such that $$\\sum_{i=1}^{k} \\delta(x(i), x((i+1) \\bmod k)) \\leq B$$ and there are exactly $d$ indices $i$ where $x((i+1) \\bmod k) \\ne OPT(x(i))$?</p>\n</blockquote>\n\n<p>The $d$ implies that if my shortest tour is $a\\rightarrow b \\rightarrow c\\rightarrow a$ but $d=1$ then what would be the shortest path if I had to first go to $c$, $ a \\rightarrow c \\rightarrow ...$. So $d$ tells me that I have to make $d$ number of wrong choices but I can choose these choices in any way I want to to minimize the length of the path.</p>\n\n<p>Is this a problem worthwhile describing? Or if it has been described where could I see an example? </p>\n', 'ViewCount': '90', 'Title': 'Travelling salesman problem with detours', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:05:07.807', 'LastEditDate': '2013-06-06T15:05:07.807', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Tags': '<complexity-theory><graph-theory><np-hard><decision-problem><traveling-salesman>', 'CreationDate': '2013-02-15T10:58:21.960', 'Id': '9802'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '431', 'Title': 'Is there an efficient test for if an NFA accepts a subset of another NFA?', 'LastEditDate': '2014-04-03T11:58:31.807', 'AnswerCount': '3', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2253', 'FavoriteCount': '3', 'Body': "<p>So, I know that testing if a regular language $R$ is a subset of regular language $S$ is decidable, since we can convert them both to DFAs, compute $R \\cap \\bar{S}$, and then test if this language is empty.</p>\n\n<p>However, since this requires converting to DFAs, it's possible that the DFAs, and thus the testing algorithm, will be exponential in terms of the number of states in the input NFAs.</p>\n\n<p>Is there a known way to do this in polynomial time? Has this problem in general been proved Co-NP complete? </p>\n\n<p>Note that the problem is in Co-NP since a word accepted by $R$ but not by $S$ would be a polynomial certifier that $R \\not \\subseteq S $.</p>\n\n<p>EDIT: this is incorrect, as there is no guarantee that such a word would be polynomial in the number of states.</p>\n", 'Tags': '<algorithms><regular-languages><automata><np-complete><decision-problem>', 'LastEditorUserId': '15050', 'LastActivityDate': '2014-04-03T11:58:31.807', 'CommentCount': '5', 'AcceptedAnswerId': '9955', 'CreationDate': '2013-02-20T06:11:51.547', 'Id': '9954'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>There are many NP-complete decision problems that ask the question whether it holds for the optimal value that OPT=m (say bin packing asking whether all items of given sizes can fit into m bins of a given size).\nNow, I am interested in the problem whether OPT>m. Is this a decision problem or an optimization problem? It seems to be that it lies in NP (a NTM can guess a solution and it can be verified in polynomial time that the bound is met). Is it also NP-complete?</p>\n\n<p>I would have said yes, because having a polynomial algorithm, we could find a solution in polynomial time for the original problem (asking whether OPT=m) by using binary search and repeatedly using the polynomial algorithm to test if OPT larger than some bound.</p>\n\n<p>However when I try to construct a proper solution, I always see the complication that the oracle (that asks whether OPT>m') would need to be queried more than once, and this is forbidden in the polynomial time Karp reduction.</p>\n\n<p>Any solutions or remarks?\nWould it make a difference if I ask whether OPT>=m?</p>\n\n<p>Thanks in advance</p>\n", 'ViewCount': '136', 'Title': 'Polynomial time reductions using binary search', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-26T11:07:26.827', 'LastEditDate': '2013-03-25T15:20:47.793', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<complexity-theory><terminology><np-complete><optimization><decision-problem>', 'CreationDate': '2013-03-25T14:08:42.207', 'Id': '10774'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I know every regular language is Turing-acceptable, but does that imply it is Turing-decidable?</p>\n', 'ViewCount': '537', 'Title': 'Is every regular language Turing-decidable, and how can we prove this?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-03T07:10:25.113', 'LastEditDate': '2013-04-03T07:10:25.113', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '10973', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6980', 'Tags': '<terminology><computability><regular-languages><decision-problem>', 'CreationDate': '2013-04-02T13:51:03.390', 'Id': '10971'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '357', 'Title': 'Do any decision problems exist outside NP and NP-Hard?', 'LastEditDate': '2013-04-04T07:16:45.770', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7572', 'FavoriteCount': '1', 'Body': '<p><a href="http://cs.stackexchange.com/questions/9063/np-hard-that-is-not-np-complete-and-not-undecidable">This question</a> asks about NP-hard problems that are not NP-complete. I\'m wondering if there exist any decision problems that are neither NP <em>nor</em> NP-hard.</p>\n\n<p>In order to be in NP, problems have to have a verifier that runs in polynomial time on a deterministic Turing machine. Obviously, all problems in P meet that criteria, but what about the problems with sub-exponential complexity? They do not belong to P and it\'s not obvious to me that they all have efficient deciders. And they certainly don\'t qualify for NP-complete.</p>\n\n<p>I\'m willing to believe that all decision problems are either NP or NP-hard or both, but nobody has actually <em>said</em> that (that I can find). I\'m also willing to believe that such problems do exist, even if they are very contrived. Maybe someone more knowledgeable can put this issue to rest for me. Thanks.</p>\n\n<p><strong>Edit</strong></p>\n\n<p>I abused the term \'subexponential\' in my question. In my mind it meant some problem with a complexity between exponential and polynomial like L-notation in <a href="http://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions" rel="nofollow">this table</a>. See the links in Raphael\'s answer for more details.</p>\n', 'Tags': '<complexity-theory><np-complete><np-hard><decision-problem><complexity-classes>', 'LastEditorUserId': '7572', 'LastActivityDate': '2013-04-04T13:33:02.737', 'CommentCount': '4', 'AcceptedAnswerId': '11012', 'CreationDate': '2013-04-04T04:53:18.070', 'Id': '11009'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a problem which I suspect is NP-complete. It is easy to prove that it is NP. My current train of thought revolves around using a reduction from knapsack but it would result in instances of 0-1-Knapsack with the value of every item being equal to its weight.</p>\n\n<p>Is this still NP-complete? Or am I missing something?</p>\n', 'ViewCount': '367', 'Title': 'Is the 0-1 Knapsack problem where value equals weight NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-14T10:40:18.413', 'LastEditDate': '2013-04-14T10:40:18.413', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11245', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7139', 'Tags': '<complexity-theory><np-complete><decision-problem><packing>', 'CreationDate': '2013-04-11T22:41:16.210', 'Id': '11243'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<blockquote>\n  <p>Meeting rooms on university campuses may or may not contain coffee machines. We would\n  like to ensure that every meeting room either has a coffee machine or is close enough to a\n  meeting room that does have a coffee machine. (For any two meeting rooms, the architect\n  has told us whether or not they are close enough.) Our problem is to determine among all the\n  meeting rooms of any university campus, which ones should have coffee machines so that we\n  use as few coffee machines as possible. Specify this problem as an optimization problem on a\n  graph. Formulate the corresponding Coffee-machine Decision Problem (abbreviated Coffee).\n  Prove that the Coffee Machine Decision Problem is NP-complete.</p>\n  \n  <p>Hint: You could use Vertex Cover. For every edge, add two more edges and one more vertex.</p>\n</blockquote>\n\n<p>I'm confused at the hint given and why this problem isn't just a straight reduction from Vertex Cover.  What's the point of adding two more edges and a vertex for every edge?</p>\n", 'ViewCount': '126', 'Title': 'How does the problem of having a coffee-machine close relate to vertex cover?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T15:23:25.990', 'LastEditDate': '2013-04-21T15:23:25.990', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7787', 'Tags': '<complexity-theory><np-complete><reductions><decision-problem>', 'CreationDate': '2013-04-19T09:11:08.353', 'Id': '11402'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'ve been trying for a while now to find a solution for the problem in the title: determining if a number is perfect using a Turing Machine. I only had one class on the TM and while I did "get" how it works, this particular algorithm is being really hard for me to develop.</p>\n\n<p>The algorithm I\'m trying to implement on the TM is basically this (on C, returns <code>true</code> iff <code>n</code> is a perfect number):</p>\n\n<pre><code>int main(int n) {\n  int i=1, sum=0;\n\n  while ( n &gt; i ) {\n    if ( n % i == 0 ) {\n      sum = sum + i;\n    }\n    i++;\n  }\n\n  return sum == n\n}\n</code></pre>\n\n<p>The tough part for me right now is the <code>while(n&gt;i)</code> loop and the <code>n%i</code> inside it.</p>\n\n<p>Since I already have a program that does <code>a%b</code>, I was trying to build the TM graph around it, but I\'m not sure it\'s the best idea, specially since the <code>b</code> on this case changes on every iteration. The software I\'m using to simulate the TM is called JFlap.</p>\n\n<p>The algorithm on table or graph form would be perfect.</p>\n', 'ViewCount': '366', 'Title': 'Algorithm to determine if a number is perfect on a Turing Machine', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-22T16:39:50.503', 'LastEditDate': '2013-04-22T11:20:04.560', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7833', 'Tags': '<algorithms><turing-machines><decision-problem><integers>', 'CreationDate': '2013-04-22T00:23:08.297', 'Id': '11481'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let's say I have an optimization problem called $k$-foo which asks for a solution of size $k$ minimizing some quality criterion.</p>\n\n<p>Now the corresponding decision problem $foo(M)$ would be: <br> Is there a solution to foo with quality at least $M$ of size $k$.</p>\n\n<p>For problems on one parameter (for example vertex cover) it is obvious that solving the optimization problem sovles the decision problem.</p>\n\n<p>But here I do not see such a correspondance between the $k$-foo optimization problem and the $foo(M)$ decision problem. How does for example showing that $foo(M)$ is NP-hard implies that $k$-foo is NP-hard?</p>\n\n<p>The $k$-center problem is an example of such a problem where the decision version takes the radius as input and asks wether a solution of size $k$ exists.  </p>\n", 'ViewCount': '80', 'Title': 'Decision vs Optimization version for Problems of two Parameters', 'LastEditorUserId': '7921', 'LastActivityDate': '2013-04-26T23:12:46.047', 'LastEditDate': '2013-04-26T23:12:46.047', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7921', 'Tags': '<reductions><optimization><np-hard><decision-problem>', 'CreationDate': '2013-04-26T22:04:14.953', 'FavoriteCount': '1', 'Id': '11589'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have seen some problems that are NP-hard but polynomially solvable in fixed dimension.</p>\n\n<p>Examples, I think, are Knapsack that is polynomial time solvable if the number of items is fixed and Integer Linear Programming with fixed number of variables or constraints by Lenstras result.</p>\n\n<p>Questions:</p>\n\n<p>What are other examples of NP-hard problems that become polynomial time solvable if the dimension is fixed?</p>\n\n<p>Are there problems for which this is not the case?</p>\n\n<p>Is this always the case for problems that admit an FPTAS/pseudo-polynomial time algorithm such as Knapsack?</p>\n', 'ViewCount': '441', 'Title': 'NP complete problems that are solvable in polynomial time if the input (e.g. number of variables) is fixed?', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-05-10T12:17:04.700', 'LastEditDate': '2013-05-10T12:17:04.700', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '11762', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '7309', 'Tags': '<np-complete><optimization><decision-problem><linear-programming><parametrized-complexity>', 'CreationDate': '2013-05-03T15:30:53.200', 'Id': '11761'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>You\u2019re doing some stress-testing on various models of glass jars to determine the height from which they can be dropped and still not break. The setup for this experiment, on a particular type of jar, is as follows. You have a ladder with $n$ rungs, and you want to find the highest rung from which you can drop a copy of the jar and not have it break. We call this the highest safe rung.\nIt might be natural to try binary search: drop a jar from the middle rung, see if it breaks, and then recursively try from rung $n/4$ or $3n/4$ depending on the outcome. But this has the drawback that you could break a lot of jars in finding the answer.</p>\n\n<p>If your primary goal were to conserve jars, on the other hand, you could try the following strategy. Start by dropping a jar from the first rung, then the second rung, and so forth, climbing one higher each time until the jar breaks. In this way, you only need a single jar\u2014at the moment it breaks, you have the correct answer\u2014but you may have to drop it $n$ times (rather than $\\log n$ as in the binary search solution).</p>\n\n<p>So here is the trade-off: it seems you can perform fewer drops if you\u2019re willing to break more jars. To understand better how this trade- off works at a quantitative level, let\u2019s consider how to run this experiment given a fixed \u201cbudget\u201d of $k \\ge 1$ jars. In other words, you have to determine the correct answer\u2014the highest safe rung\u2014and can use at most $k$ jars in doing so.</p>\n\n<p>Suppose you are given a budget of $k = 2$ jars. Describe a strategy for finding the highest safe rung that requires you to drop a jar at most $f (n)$ times, for some function $f (n)$ that grows slower than linearly. (In other words, it should be the case that $\\lim_{n\\to\\infty} f (n)/n = 0$.)</p>\n\n<p>Anyone any insights how to solve this problem?</p>\n\n<p>I know that the answer is $h = \\sqrt n$. I know  that it solves the problem. But I want to know how you got that answer, there must be a general way to do it?</p>\n', 'ViewCount': '672', 'Title': 'Balancing subproblems in resilience testing', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-11T01:48:19.290', 'LastEditDate': '2013-08-01T07:17:26.863', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '0', 'OwnerDisplayName': 'user75300', 'PostTypeId': '1', 'OwnerUserId': '8086', 'Tags': '<algorithms><binary-trees><decision-problem><divide-and-conquer>', 'CreationDate': '2013-05-07T21:28:25.053', 'Id': '11981'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '270', 'Title': 'Longest cycle contained in two cycles', 'LastEditDate': '2013-05-22T13:39:21.057', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '6970', 'FavoriteCount': '4', 'Body': "<p>Is the following problem NP-complete? (I assume yes).</p>\n\n<blockquote>\n  <p><strong>Input:</strong> $k \\in \\mathbb{N},G=(V,E)$ an undirected graph where the edge set can be decomposed into two edge-disjoint simple cycles (these are <strong>not</strong> a part of the input).</p>\n  \n  <p><strong>Question:</strong> Is there a simple cycle in $G$ with length greater than $k$?</p>\n</blockquote>\n\n<p>Obviously the problem is in NP and the maximum degree in $G$ is $\\leq 4$, but that doesn't seem to help.</p>\n", 'Tags': '<graph-theory><np-complete><decision-problem>', 'LastEditorUserId': '6970', 'LastActivityDate': '2013-05-25T21:42:25.810', 'CommentCount': '6', 'AcceptedAnswerId': '12270', 'CreationDate': '2013-05-20T07:07:18.790', 'Id': '12148'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Consider the following <em>universe problem</em>.</p>\n\n<blockquote>\n  <p><strong>The universe problem.</strong> Given a finite set $\\Sigma$ for a class of languages, and an automaton accepting the language $L$, decide if $L=\\Sigma^*$.</p>\n</blockquote>\n\n<p>In [1], it is stated and proved that the universe problem is undecidable for a particular class of one-counter automata. This result then follows for the class of all non-deterministic one-counter automata. I\'m wondering if it is known whether this problem is still undecidable when we restrict the size of the input alphabet of the automaton. </p>\n\n<p>I think that with alphabet size 1 the problem becomes decidable, but what about size 2? And if that turns out to be decidable what is the smallest value of $n \\in \\mathbb{N}$ such that the problem is undecidable.</p>\n\n<p>I think it\'s probable that the answer to this question is known but I\'m having trouble finding an answer. If it is already known then I would appreciate a reference.</p>\n\n<hr>\n\n<p>[1] <a href="http://link.springer.com/article/10.1007%2FBF01744294">Ibarra, O. H. (1979). Restricted one-counter machines with undecidable universe problems. Mathematical systems theory, 13(1), 181-186</a></p>\n', 'ViewCount': '126', 'Title': 'Is the universe problem for one-counter automata with restricted alphabet size undecidable?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T15:29:14.707', 'LastEditDate': '2013-05-23T17:42:41.283', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12235', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '769', 'Tags': '<formal-languages><reference-request><automata><undecidability><decision-problem>', 'CreationDate': '2013-05-23T16:56:50.530', 'Id': '12233'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>So we know that there exists a Turing Machine $M$ and a polynomial $T$ such that:</p>\n\n<ul>\n<li>$M$ halts on all inputs within at most $T(|x|)$ steps</li>\n<li>If $x$ is in $L$ then $M$ accepts $x$</li>\n<li>If $x$ is not in $L$ then $M$ rejects $x$</li>\n</ul>\n\n<p>We need to show that for any other problem $L'$, there exists a polynomial time computable function $f$ such that for all $x$, $f(x)$ is in $L'$ if and only if $x$ is in $L$.</p>\n\n<p>I imagine the answer is simple but I'm stumped.</p>\n", 'ViewCount': '90', 'Title': u"Prove that if a problem L can be decided in polynomial time, then L \u2264p L' for any other problem L'", 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T17:44:24.253', 'LastEditDate': '2013-05-28T17:44:24.253', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8402', 'Tags': '<complexity-theory><reductions><decision-problem><polynomial-time>', 'CreationDate': '2013-05-28T09:11:53.633', 'Id': '12329'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '265', 'Title': '$2k$ number assignment', 'LastEditDate': '2013-05-29T16:14:34.003', 'AnswerCount': '3', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '512', 'FavoriteCount': '1', 'Body': '<p>Given $k$ numbers $A_1 \\leq A_2 \\leq ... \\leq A_k$ such that $\\sum\\limits_{i=1}^k A_i = k(2k + 1)$ is there an assignment of numbers $i_1, i_2, ... , i_{2k}$ which is a permutation of $1, 2, ... , 2k$ such that</p>\n\n<p>$i_1 + i_2 \\leq A_1\\\\ i_3 + i_4 \\leq A_2\\\\ .\\\\.\\\\.\\\\ i_{2k-1} + i_{2k} \\leq A_k$</p>\n\n<p>?</p>\n\n<p>I cannot find an efficient algorithm and that solves this problem. It seems to be a combinatorial problem. I was unable to find a similar NP-Complete problem. Does this problem look like a known NP-Complete problem or can it be solved with a polynomial algorithm?</p>\n', 'Tags': '<np-complete><decision-problem>', 'LastEditorUserId': '512', 'LastActivityDate': '2013-06-17T18:54:14.733', 'CommentCount': '3', 'AcceptedAnswerId': '12723', 'CreationDate': '2013-05-29T15:18:13.573', 'Id': '12359'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>On the wikipedia article about the polynomial hierarchy <a href="http://en.wikipedia.org/wiki/Polynomial_hierarchy" rel="nofollow">http://en.wikipedia.org/wiki/Polynomial_hierarchy</a></p>\n\n<p>it says "$A^B$ is the set of decision problems solvable by a Turing machine in class A augmented by an oracle for some complete problem in class B"</p>\n\n<p>What is a "Turing machine in class A" for classes P, NP, and coNP?</p>\n\n<p>I\'m guessing a Turing machine in P is a deterministic Turing machine that can only run for polynomial time in the size of its input</p>\n\n<p>and that a Turing machine in NP is a nondeterministic Turing machine that can only run for polynomial time in the size of its input</p>\n\n<p>But I have no clue what is a Turing machine in class coNP ?</p>\n', 'ViewCount': '72', 'Title': 'What is a Turing Machine in class coNP', 'LastActivityDate': '2013-06-05T09:29:27.857', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '12468', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8526', 'Tags': '<turing-machines><decision-problem><np><polynomial-time>', 'CreationDate': '2013-06-05T07:51:19.400', 'Id': '12466'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let <code>S</code> be a system whose state can be altered by performing actions. Each action has two possible outcomes, and each outcome brings to a specific system state. A state is never visited two times, i.e., the state graph is a DAG (a tree, more specifically, where the root corresponds to the initial system state and each edge corresponds to an action). The probability of obtaining either one of the outcomes is known.</p>\n\n<p>Notice that just <code>B</code> actions can be performed, and the pool of actions contains <code>N</code> different actions.</p>\n\n<p>My objective is to devise an <strong>online optimal</strong> algorithm which identifies the best path to be taken, i.e., the path which guarantees the minimum cost. With the term "online" I am referencing to the following behavior:</p>\n\n<ol>\n<li>An action is chosen</li>\n<li>The system state is consequently modified</li>\n<li>A new action is chosen (taking into account the system state modification performed ad 2.)</li>\n<li>The system state is again modified according to the selected action</li>\n<li>...</li>\n</ol>\n\n<p>My first idea was the one of using A* in the following way:</p>\n\n<ol>\n<li>I ask A* to find the best sequence <code>S</code> of <code>B</code> actions to be performed</li>\n<li>I perform just the first action contained in <code>S</code>, and I modify the system state consequently (according to the outcome of the action)</li>\n<li>I ask A* to find the best sequence <code>S\'</code> of <code>(B-1)</code> actions to be performed</li>\n<li>I perform just the first action contained in <code>S\'</code> and I modify the system state consequently</li>\n</ol>\n\n<p>The problem is that I don\'t know whether this solution is optimal (I didn\'t succeed in finding an optimality proof), and an optimal solution would be required in my case.</p>\n\n<p>May you suggest another online algorithm (or, alternatively, a way of proving the optimality of the method I propose) to find an optimal solution for the problem?</p>\n\n<p><strong>EDIT</strong>: maybe something from game theory can be used instead (<a href="http://en.wikipedia.org/wiki/Extensive-form_game#Imperfect_information" rel="nofollow">extensive form games with imperfect information</a>). I am the player I that chooses the actions, while the player II is a dummy player that chooses the action "first-outcome" or "second-outcome", where "first-outcome" and "second-outcome" are my actions\' possible outcomes.</p>\n\n<p><strong>NOTE:</strong> I posted a similar question <a href="http://stackoverflow.com/questions/17149113/gain-maximization-on-trees">here</a>, although in my previous question an <em>offline</em> version was required, i.e., the modifications of the actions were not taken into account at each iteration.</p>\n\n<p>Thanks in advance.</p>\n', 'ViewCount': '51', 'Title': 'Online algorithm for planning', 'LastEditorUserId': '8798', 'LastActivityDate': '2013-06-24T07:28:52.660', 'LastEditDate': '2013-06-24T07:28:52.660', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8798', 'Tags': '<decision-problem><game-theory><online-algorithms>', 'CreationDate': '2013-06-21T09:52:04.120', 'FavoriteCount': '2', 'Id': '12810'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '180', 'Title': 'Computer science problems related to music?', 'LastEditDate': '2013-07-10T08:56:09.893', 'AnswerCount': '3', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2529', 'FavoriteCount': '1', 'Body': '<p>Are there any CS problems, preferably open, that are related to music or musical theory somehow? I would think of problem with musical notation but also probabilities when randomizing according to a scale or a tonality or general what is considered harmony in frequencies and physics, electromagnetism and waveforms. </p>\n\n<p>Can you give examples of the area I want to know of?</p>\n\n<p>For instance, given an algorithm that guesses a melody, how successful will the melody be in resembling an artist or likewise decision problem that could be feasible or what do you think?</p>\n', 'Tags': '<probability-theory><decision-problem><probabilistic-algorithms>', 'LastEditorUserId': '31', 'LastActivityDate': '2013-07-16T07:52:42.197', 'CommentCount': '2', 'AcceptedAnswerId': '13200', 'CreationDate': '2013-07-10T08:06:34.607', 'Id': '13199'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Given a regular language $L$ over a unary alphabet $\\Sigma = \\{ a \\}$.</p>\n\n<p>How to decide whether there are two words $w,w' \\in L$ such that\nthe length of $w$ is relatively prime to the length of $w'$ ?</p>\n", 'ViewCount': '146', 'Title': 'Finding two words of lengths that are relatively prime in a regular language?', 'LastActivityDate': '2013-09-03T18:53:48.563', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '9963', 'Tags': '<regular-languages><finite-automata><decision-problem>', 'CreationDate': '2013-09-03T16:03:03.457', 'Id': '14106'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>If a language is decidable, we can write a method that always halts and returns <code>true</code> for each string that is an element of the language and <code>false</code> otherwise.</p>\n\n<p>If a language is undecidable, what does that mean? Does it mean:</p>\n\n<p>a.) We cannot write a method; we cannot even conceive of a method.</p>\n\n<p>b.) We can write a method that returns <code>true</code> for each string that is an element of the language; for strings that are not an element of the language, the method may return <code>false</code> or it may loop indefinitely.</p>\n\n<p>c.) Other (what?)</p>\n', 'ViewCount': '111', 'Title': 'Can a method be written if the language is undecidable?', 'LastActivityDate': '2013-09-21T17:08:19.787', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '14501', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9907', 'Tags': '<formal-grammars><undecidability><decision-problem><halting-problem><turing-completeness>', 'CreationDate': '2013-09-21T16:43:09.593', 'Id': '14499'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '114', 'Title': 'Show a TM-recognizable language of TMs can be expressed by TM-description language of equivalent TMs', 'LastEditDate': '2013-09-30T09:36:29.020', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2260', 'FavoriteCount': '1', 'Body': '<p>I am studying "An Introduction to the Theory of Computation" by Sipser -- there is a problem *3.17 (p.161) which I can not solve. \nAny <em>hints</em> (not <em>answers</em>) from which side to attack it?</p>\n\n<blockquote>\n  <p>Let $B=\\{M_1, M_2, ...\\}$ be a Turing-recognizable language consisting of TM descriptions. Show that there is a <em>decidable</em> language C consisting of TM descriptions s.t. every machine in B has an equivalent machine in C and vice versa.</p>\n</blockquote>\n', 'Tags': '<turing-machines><decision-problem>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-09-30T09:36:29.020', 'CommentCount': '0', 'AcceptedAnswerId': '14681', 'CreationDate': '2013-09-29T19:10:48.200', 'Id': '14680'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The CLIQUE problem -- problem of finding the maximum clique in a graph -- is NP-complete. That is, CLIQUE is</p>\n\n<ol>\n<li>in NP and </li>\n<li>there is an NP complete problem, 3-SAT for one, that reduces to CLIQUE in polynomial time.</li>\n</ol>\n\n<p>Part 2. above is fine -- all over in every resource and very well explained. For Part 1., from what I know, we need to have the following: Given a specific solution instance, we need to show that it can be verified, in polynomial time, that that solution is an answer to this problem. So for instance, given a specific graph and a subgraph of it, we should be able to check whether that subgraph is a clique of maximum size in that graph.</p>\n\n<p>The resources I\'ve read so far are phrasing this Part 1. here as "easy, straightforward, etc" or "it can be shown in $O(n^2)$ time that the given subgraph is a clique/not". However, the verification here is not just whether it\'s a clique, but also is whether it is a maximum clique in the graph. How can this be decided in polynomial time?</p>\n\n<p>What am I missing here?</p>\n', 'ViewCount': '186', 'Title': 'Showing that CLIQUE can be verified in polynomial time', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-04T06:43:02.090', 'LastEditDate': '2013-10-04T06:43:02.090', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10464', 'Tags': '<complexity-theory><decision-problem><np>', 'CreationDate': '2013-10-02T23:33:58.783', 'Id': '14765'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '68', 'Title': 'Reference for an undecidability proof', 'LastEditDate': '2013-10-04T06:49:58.733', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9625', 'FavoriteCount': '1', 'Body': '<p>I\'m searching for a reference of an undecidability proof that is as simple as possible and starts "from scratch".</p>\n\n<p>With "from scratch" I mean that it does not use some other undecidable problem to prove some undecidability (which is the usual case), I cannot wrap my mind about how proving undecidability that way (without a previous proof) could be possible.</p>\n\n<p>This question may be inspiring: <a href="http://math.stackexchange.com/questions/80745/an-example-of-an-easy-to-understand-undecidable-problem">An example of an easy to understand undecidable problem</a></p>\n\n<p>Also, I know this is probably not very objective, but it is important to me, it should be something as simple as possible, hopefully enough so that even I can understand it.</p>\n', 'ClosedDate': '2013-10-04T06:52:47.623', 'Tags': '<reference-request><proof-techniques><undecidability><decision-problem>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-04T06:49:58.733', 'CommentCount': '4', 'CreationDate': '2013-10-03T14:44:58.153', 'Id': '14788'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '103', 'Title': 'One $O(n^k)$ algorithm requiring only one $O(2^n)$ computation (for all n instances) is P or NP', 'LastEditDate': '2013-10-04T12:27:09.820', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '10499', 'FavoriteCount': '3', 'Body': '<p>Let $a$ one decision problem and $A$ one algorithm solving it in $O(n^k)$.</p>\n\n<p>But, to construct $A_n$ we need to compute certain thing (strategy path, magic numbers, ...), we can compute that using certain general algorithm $R$ in $O(2^n)$.</p>\n\n<p>Obiously, $A$ is polynomial (then, all $A_n$ are in <strong>P</strong>) and $R$ is exponential.</p>\n\n<p>We <strong>can not</strong> solve big instances because $R$ is not practical.</p>\n\n<p>But, in practice, we will can solve big instances after a big effort computing $A_n = R(n)$.</p>\n\n<p>My question is twofold:</p>\n\n<ul>\n<li><p>How are such problems considered in theory?\nHave they been studied explicitly? Is there a particular case? some literature to read?</p></li>\n<li><p>How are such problems solved in practice?\nHave they been studied in general? Is there is a particular case? some literature to read?</p></li>\n</ul>\n', 'Tags': '<complexity-theory><decision-problem><np>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-04T14:37:03.027', 'CommentCount': '4', 'AcceptedAnswerId': '14811', 'CreationDate': '2013-10-04T09:50:35.823', 'Id': '14810'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I can't seem to find this stated explicitly anywhere, which makes me wonder if I have it all wrong.</p>\n\n<p>So first, let's say we view problems in NP as degenerate problems in FNP, where the codomain of the binary relation is the set {true, false}.</p>\n\n<p>Second, FSAT is known to be FNP-complete, meaning that everything in FNP can be reduced to it in polynomial time. Also, FSAT is polynomial-time reducible to SAT, which is NP-complete, and then a SAT problem can be changed to anything else in NP-complete in polynomial time. So this shows that everything in FNP-complete can be changed to something in NP-complete in polynomial time.</p>\n\n<p>So the first thing shows that NP-complete $\\subset$ FNP-complete, but then the second thing shows that FNP-complete $\\subset$ NP-complete, which means that NP-complete = FNP-complete.</p>\n\n<p>So given that, it seems like everything in FNP can be reduced to any NP-complete problem in polynomial-time.</p>\n\n<p>Am I going somewhere wrong here, or do I have this all right?</p>\n", 'ViewCount': '67', 'Title': 'Does FNP-complete = NP-complete?', 'LastActivityDate': '2013-10-09T00:41:48.237', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10594', 'Tags': '<complexity-theory><np-complete><decision-problem><search-problem>', 'CreationDate': '2013-10-09T00:41:48.237', 'Id': '14937'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Those terminologies confuse me. As I understand </p>\n\n<ul>\n<li>SAT solver: decide the satisfiability of propositional logic (using DPLL or Local Search).</li>\n<li>Decision procedure is a procedure to decide the satisfiability of a certain decidable first-order theory.</li>\n<li>SMT solver is a SAT solver + decision procedure.</li>\n<li>Theorem prover indicates something like Dynamic Logic, e.g. the KeY tool</li>\n<li>Constraint solver: I don't know.</li>\n</ul>\n\n<p>But I see people calling Z3 a theorem prover. So I don't know how to dishtinguish those terms. And what is the most general term for all of them? Thank you.</p>\n", 'ViewCount': '308', 'Title': 'Distinguish Decision Procedure vs SMT solver vs Theorem prover vs Constraint solver', 'LastEditorUserId': '8607', 'LastActivityDate': '2013-10-16T13:03:06.590', 'LastEditDate': '2013-10-16T13:03:06.590', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '8607', 'Tags': '<algorithms><terminology><reference-request><decision-problem>', 'CreationDate': '2013-10-09T12:25:45.727', 'FavoriteCount': '2', 'Id': '14946'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm currently studying Decision Trees and the definition of a decision tree in our course is somewhat obscure for me. Nowhere in other online definitions of decision trees do I find something about relevant subtrees and relevant leafs...</p>\n\n<p>The course is based on the book Machine Learning from Tom Mitchell, so I'll have a look in that book for more information.</p>\n\n<p>I wanted to know if someone can explain to me in English a relevant subtree and a relevant leaf...</p>\n\n<p>If the question is too vague or abstract, I'll first read the chapter in Tom Mitchell's book and then come back to this forum.</p>\n", 'ViewCount': '23', 'Title': 'Relevant subtree and relevant leaf in Machine Learning Decision Trees', 'LastActivityDate': '2013-10-13T14:08:46.683', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10575', 'Tags': '<machine-learning><decision-problem>', 'CreationDate': '2013-10-13T14:08:46.683', 'Id': '16038'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Given two ordered sets of words $a_1, a_2, ..., a_k$, $b_1, b_2, ..., b_k$ taking values in some discrete alphabet $A$, a solution to the PCP problem is a sequence $i_1, ..., i_n$ taking values in $1, 2,..., k$ such that $a_{i_1}|a_{i_2}|...|a_{i_n}=b_{i_1}|b_{i_2}|...|b_{i_n}$ where $|$ means concatenation. $k$ can be called the length of the problem, $n$ the length of the solution and if we let $w$ be the length of the largest word in $a_1, a_2, ..., a_k, b_1, b_2, ..., b_k$, $w$ is called the width of the problem.</p>\n\n<p>I know that the PCP problem becomes decidable in several scenarios, for instance: for bounded $n$, or if $A$ is unary, etc. On the other hand for $k\\geq7$ PCP is still undecidable. My question is, is there any result known for bounded values of $w$? </p>\n', 'ViewCount': '43', 'Title': 'Undecidability of the PCP problem with bounded width', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T22:09:30.400', 'LastEditDate': '2013-11-13T22:09:30.400', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '16358', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10931', 'Tags': '<computability><reference-request><undecidability><decision-problem>', 'CreationDate': '2013-10-23T09:27:07.050', 'Id': '16357'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '111', 'Title': 'Complexity of deciding the satisfiability of a quasi-monotone CNF formula', 'LastEditDate': '2013-11-01T22:52:30.737', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '10228', 'FavoriteCount': '2', 'Body': '<p>A <em>quasi-monotone CNF formula</em> is a formula where each variable appears at most once as a positive literal (and any number of times as a negative literal). </p>\n\n<p>What is the complexity of deciding its satisfiability?</p>\n', 'Tags': '<complexity-theory><np-complete><satisfiability><decision-problem>', 'LastEditorUserId': '10228', 'LastActivityDate': '2013-11-01T22:52:30.737', 'CommentCount': '0', 'AcceptedAnswerId': '16492', 'CreationDate': '2013-10-28T00:04:09.943', 'Id': '16483'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>To continue this <a href="http://cs.stackexchange.com/questions/16483/complexity-of-deciding-the-satisfiability-of-a-quasi-monotone-cnf-formula">post</a>, let us define the Monotone$(+, 2^-)$-SAT problem: </p>\n\n<p>Given a monotone CNF formula $F^+$, where each variable appears exactly once (as a positive literal), and a monotone 2-CNF formula $F_2^-$ defined on the same variables as $F^+$, where all variables are negated. Is $F^+ \\land F_2^-$ satisfiable ?</p>\n\n<p>Is this problem NP-complete?</p>\n', 'ViewCount': '128', 'Title': 'Complexity of Monotone (+,2) SAT problem?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-05T16:22:04.540', 'LastEditDate': '2013-11-05T16:22:04.540', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '10228', 'Tags': '<complexity-theory><np-complete><decision-problem><complexity-classes>', 'CreationDate': '2013-11-01T22:56:57.180', 'FavoriteCount': '1', 'Id': '16634'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $\\phi$ be a 3-CNF formula over variables $x_1,x_2,\\ldots,x_n$. Every variable $x_i$, $i \\in [n]$, occurs equally many times as a positive literal and as a negative literal in $\\phi$. </p>\n\n<p>Is it NP-complete to decide the satisfiability of such a formula? Assuming it is, I would be interested in knowing if it has a special name. Has it perhaps also been investigated somewhere?</p>\n', 'ViewCount': '182', 'Title': '3-SAT where variables occur equally many times as a positive literal and as a negative literal', 'LastActivityDate': '2013-11-06T11:50:13.120', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16765', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<complexity-theory><np-complete><satisfiability><decision-problem>', 'CreationDate': '2013-11-03T14:27:40.600', 'Id': '16672'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It is well known that any CNF formula can be transform in polynomial time into a 3-CNF formula  by using new variables (<a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem#3-satisfiability" rel="nofollow">see here</a>). If using new variables is not allowed, it is not always possible (take for instance the single clause formula : $(x_1 \\lor x_2 \\lor x_3 \\lor x_4)$). </p>\n\n<p>Let define the (SAT to 3-SAT) problem : Given $F$, a CNF formula. Is it possible to transform $F$ into an equivalent 3-CNF defined <em>on the same variables</em> as $F$ ? - where "equivalent" means with the same set of models.</p>\n\n<p>What is the complexity of this problem ?</p>\n\n<p><strong>Edit</strong> : It has been shown <a href="http://cstheory.stackexchange.com/questions/19821/transform-a-cnf-into-an-equivalent-3-cnf-defined-on-the-same-variables">on cstheory</a> that the problem is co-NP hard.</p>\n', 'ViewCount': '184', 'Title': 'Complexity of (SAT to 3-SAT) Problem?', 'LastEditorUserId': '10228', 'LastActivityDate': '2013-12-24T00:47:22.790', 'LastEditDate': '2013-12-23T22:53:00.603', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '10228', 'Tags': '<complexity-theory><satisfiability><decision-problem><complexity-classes>', 'CreationDate': '2013-11-05T15:46:40.127', 'FavoriteCount': '1', 'Id': '16741'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Consider the following 3-SAT variant defined over the variables $x_1,\\ldots,x_n$. In the $k$P$k$N-3SAT problem each variable $x_j$, $j \\in [n]$, occurs exactly $k$ times as a positive literal in $\\phi$, and exactly $k$ times as a negative literal in $\\phi$, where $\\phi$\xa0is a 3-CNF formula. The problem is then to decide if such a formula has a satisfying assignment.</p>\n\n<blockquote>\n  <p>Is the $k$P$k$N-3SAT problem NP-complete?</p>\n</blockquote>\n\n<p>In the $m$P$n$N-SAT problem each positive literal occurs exactly $m$ times in $\\phi$, and each negative literal occurs exactly $m$ times in $\\phi$, where $\\phi$ is a CNF formula. It was shown in [1] that $2$P$1$N-SAT is NP-complete. This hints that the $k$P$k$N-3SAT problem is hard as well. </p>\n\n<p>The $1$P$1$N-SAT is apparently easy, see a related question and answer <a href="http://cs.stackexchange.com/a/16765/472">here</a>. Is $k$P$k$N-3SAT perhaps hard already for $k \\geq 2$?</p>\n\n<hr>\n\n<p>[1] Yoshinaka, Ryo. "Higher-order matching in the linear lambda calculus in the absence of constants is NP-complete." Term Rewriting and Applications. Springer Berlin Heidelberg, 2005. 235-249.</p>\n', 'ViewCount': '138', 'Title': 'Is the $k$P$k$N-3SAT problem NP-complete?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-13T13:37:40.000', 'LastEditDate': '2013-11-08T11:27:14.390', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16822', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '472', 'Tags': '<complexity-theory><np-complete><satisfiability><decision-problem>', 'CreationDate': '2013-11-08T11:13:22.193', 'Id': '16817'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Is there an algorithm/systematic procedure to test whether a language is context-free?</p>\n\n<p>In other words, given a language specified in algebraic form (think of something like $L=\\{a^n b^n a^n : n \\in \\mathbb{N}\\}$), test whether the language is context-free or not.  Imagine we are writing a web service to help students with all their homeworks; you specify the language, and the web service outputs "context-free" or "not context-free".  Is there any good approach to automating this?</p>\n\n<p>There are of course techniques for manual proof, such as the pumping lemma, Ogden\'s lemma, Parikh\'s lemma, the Interchange lemma, and <a href="http://cs.stackexchange.com/q/265/755">more here</a>.  However, they each require manual insight at some point, so it\'s not clear how to turn any of them into something algorithmic.</p>\n\n<p>I see <a href="http://cs.stackexchange.com/a/282/755">Kaveh has written elsewhere</a> that the set of non-context-free languages is not recursively enumerable, so it seems there is no hope for any algorithm to work on all possible languages.  Therefore, I suppose the web service would need to be able to output "context-free", "not context-free", or "I can\'t tell".  Is there any algorithm that would often be able to provide an answer other than "I can\'t tell", on many of the languages one is likely to see in textbooks?  How would you build such a web service?</p>\n\n<hr>\n\n<p>To make this question well-posed, we need to decide how the user will specify  the language.  I\'m open to suggestions, but I\'m thinking something like this:</p>\n\n<p>$$L = \\{E : S\\}$$</p>\n\n<p>where $E$ is a word-expressions and $S$ is a system of linear inequalities over the length-variables, with the following definitions:</p>\n\n<ul>\n<li><p>Each of $x,y,z,\\dots$ is a word-expression.  (These represent variables that can hold any word in $\\Sigma^*$.)</p></li>\n<li><p>Each of $a,b,c,\\dots$ is a word-expression.  (Implicitly, $\\Sigma=\\{a,b,c,\\dots\\}$, so $a,b,c,\\dots$ represent a single symbol in the underlying alphabet.)</p></li>\n<li><p>Each of $a^\\eta,b^\\eta,c^\\eta,\\dots$ is a word-expression, if $\\eta$ is a length-variable.</p></li>\n<li><p>The concatenation of word-expressions is a word-expression.</p></li>\n<li><p>Each of $m,n,p,q,\\dots$ is a length-variable.  (These represent variables that can hold any natural number.)</p></li>\n<li><p>Each of $|x|,|y|,|z|,\\dots$ is a length-variable.  (These represent the length of a corresponding word.)</p></li>\n</ul>\n\n<p>This seems broad enough to handle many of the cases we see in textbook exercises.  Of course, you can substitute any other textual method of specifying a language in algebraic form, if you like.</p>\n', 'ViewCount': '119', 'Title': 'Algorithm to test whether a language is context-free', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-12T14:39:17.787', 'LastEditDate': '2013-11-12T14:39:17.787', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><formal-languages><context-free><decision-problem>', 'CreationDate': '2013-11-11T19:42:12.637', 'FavoriteCount': '3', 'Id': '17921'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u"<p>I know this has been a question but based on a past experience, i thought i would rewrite it so i can get input and ask questions faster.</p>\n\n<p>Suppose we have \n$$\\text{NOT-SELF}=\\{\\langle M\\rangle \\mid  M \\text{ is a Turing machine that does not accept }\\langle M\\rangle\\}$$\nthe set of all machines that don't accept their own coding.</p>\n\n<p>Let $Z$ be a TM such that $L(Z)$ is a subset of $\\text{NOT-SELF}$. Prove that $\\langle Z\\rangle$ is an element of $\\text{NOT-SELF}$.</p>\n\n<p>My answer so far is very broad and I'm trying to improve it.</p>\n\n<p>If $\\langle Z\\rangle$ is not an element of $\\text{NOT-SELF}$, than $\\langle Z\\rangle$ can\u2019t be an element in $L(Z)$. Since there\u2019s a condition that $L(Z)$ is a subset of $\\text{NOT-SELF}$,  this contradicts so $\\langle Z\\rangle$ must be an element of $\\text{NOT-SELF}$.</p>\n", 'ViewCount': '86', 'Title': 'Prove that <Z> is not a element of NOT-SELF', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-14T09:29:43.787', 'LastEditDate': '2014-01-15T08:30:51.607', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<computability><turing-machines><decision-problem>', 'CreationDate': '2013-11-12T22:19:09.830', 'Id': '17973'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>Is there an algorithm/systematic procedure to test whether a language is regular?</p>\n\n<p>In other words, given a language specified in algebraic form (think of something like $L=\\{a^n b^n : n \\in \\mathbb{N}\\}$), test whether the language is regular or not.  Imagine we are writing a web service to help students with all their homeworks; the user specifies the language, and the web service responds with "regular",  "not regular", or "I don\'t know".  (We\'d like the web service to answer "I don\'t know" as infrequently as possible.)  Is there any good approach to automating this?  Is this tractable?  Is it decidable (i.e., is it possible to guarantee that we never need to answer "I don\'t know")?  Are there reasonably efficient algorithms for solving this problem, and be able to provide an answer other than "don\'t know" for many/most languages that are likely to arise in practice?</p>\n\n<p>The classic method for proving that a language is not regular is the pumping lemma.  However, it looks like requires manual insight at some point (e.g., to choose the word to pump), so I\'m not clear on whether this can be turned into something algorithmic.</p>\n\n<p>A classic method for proving that a language is regular would be to use the  Myhill\u2013Nerode theorem to derive a finite-state automaton.  This looks like a promising approach, but it does requires the ability to perform basic operations on languages in algebraic form.  It\'s not clear to me whether there\'s a systematic way to symbolically perform all of the operations that may be needed, on languages in algebraic form.</p>\n\n<hr>\n\n<p>To make this question well-posed, we need to decide how the user will specify  the language.  I\'m open to suggestions, but I\'m thinking something like this:</p>\n\n<p>$$L = \\{E : S\\}$$</p>\n\n<p>where $E$ is a word-expression and $S$ is a system of linear inequalities over the length-variables, with the following definitions:</p>\n\n<ul>\n<li><p>Each of $x,y,z,\\dots$ is a word-expression.  (These represent variables that can take on any word in $\\Sigma^*$.)</p></li>\n<li><p>Each of $x^r,y^r,z^r,\\dots$ is a word-expression.  (Here $x^r$ represents the reverse of the string $x$.)</p></li>\n<li><p>Each of $a,b,c,\\dots$ is a word-expression.  (Implicitly, $\\Sigma=\\{a,b,c,\\dots\\}$, so $a,b,c,\\dots$ represent a single symbol in the underlying alphabet.)</p></li>\n<li><p>Each of $a^\\eta,b^\\eta,c^\\eta,\\dots$ is a word-expression, if $\\eta$ is a length-variable.</p></li>\n<li><p>The concatenation of word-expressions is a word-expression.</p></li>\n<li><p>Each of $m,n,p,q,\\dots$ is a length-variable.  (These represent variables that can take on any natural number.)</p></li>\n<li><p>Each of $|x|,|y|,|z|,\\dots$ is a length-variable.  (These represent the length of a corresponding word.)</p></li>\n</ul>\n\n<p>This seems broad enough to handle many of the cases we see in textbook exercises.  Of course, you can substitute any other textual method of specifying a language in algebraic form, if you have a better suggestion.</p>\n', 'ViewCount': '209', 'Title': 'Algorithm to test whether a language is regular', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-17T20:52:53.740', 'LastEditDate': '2013-11-14T22:53:44.637', 'AnswerCount': '1', 'CommentCount': '13', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><formal-languages><regular-languages><decision-problem>', 'CreationDate': '2013-11-14T07:13:17.670', 'FavoriteCount': '1', 'Id': '18010'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>This sub-problem is motivated by <a href="http://cs.stackexchange.com/q/18010/755">Algorithm to test whether a language is regular</a>.</p>\n\n<p>Suppose we have two languages $L_1,L_2$ that are expressed in "algebraic" form, as formalized below.  I want to determine whether $L_1 = L_2$.</p>\n\n<p>Is this decidable?  If yes, can anyone suggest an algorithm for this?  If not, can anyone suggest a semi-algorithm (one that returns "equal", "not equal", or "I\'m not sure"; where we want it to return "not sure" as rarely as possible).</p>\n\n<p>Motivation: A solution to this sub-problem would be helpful for solving <a href="http://cs.stackexchange.com/q/18010/755">Algorithm to test whether a language is regular</a></p>\n\n<hr>\n\n<p><strong>Algebraic form.</strong> Here\'s one possible definition of what I mean by a representation of a language in algebraic form.  Such a language is given by</p>\n\n<p>$$L = \\{E : S\\}$$</p>\n\n<p>where $E$ is a word-expression and $S$ is a system of linear inequalities over the length-variables, with the following definitions:</p>\n\n<ul>\n<li><p>Each of $x,y,z,\\dots$ is a word-expression.  (These represent variables that can take on any word in $\\Sigma^*$.)</p></li>\n<li><p>Each of $x^r,y^r,z^r,\\dots$ is a word-expression.  (Here $x^r$ represents the reverse of the string $x$.)</p></li>\n<li><p>Each of $a,b,c,\\dots$ is a word-expression.  (Implicitly, $\\Sigma=\\{a,b,c,\\dots\\}$, so $a,b,c,\\dots$ represent a single symbol in the underlying alphabet.)</p></li>\n<li><p>Each of $a^\\eta,b^\\eta,c^\\eta,\\dots$ is a word-expression, if $\\eta$ is a length-variable.</p></li>\n<li><p>The concatenation of word-expressions is a word-expression.</p></li>\n<li><p>Each of $m,n,p,q,\\dots$ is a length-variable.  (These represent variables that can take on any natural number.)</p></li>\n<li><p>Each of $|x|,|y|,|z|,\\dots$ is a length-variable.  (These represent the length of a corresponding word.)</p></li>\n</ul>\n\n<p>My goal is something rich enough to capture many of the examples we see in textbook exercises.  (Feel free to suggest modifications to this formalization if it makes the equality-testing problem easier while still remaining expressive enough to capture many of the examples we see in textbooks.)</p>\n\n<hr>\n\n<p><strong>Some easier cases.</strong> If the original problem is too hard, here are some sub-cases that would still be interesting:</p>\n\n<ul>\n<li><p>If $L_1,L_2$ are two languages specified in "algebraic" form as above, and $L_1\\ne L_2$, let $d(L_1,L_2)$ denote the length of the shortest word that is an element of one of $L_1,L_2$ but not the other.  Can we upper-bound $d(L_1,L_2)$ as a function of the length of the descriptions of $L_1,L_2$?  Is it guaranteed to always be polynomial? at most singly-exponential?</p>\n\n<p>Motivation: If we could prove it is always polynomial, this might help us exhibit a witness that $L_1 \\ne L_2$.</p></li>\n<li><p>If we omit the reversal operation (we do not allow $x^r,y^r,\\dots$), does the problem become easier?</p></li>\n</ul>\n', 'ViewCount': '77', 'Title': 'Test whether two languages are equal, when give in algebraic form', 'LastActivityDate': '2013-11-16T03:08:21.470', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><formal-languages><regular-languages><decision-problem>', 'CreationDate': '2013-11-16T03:08:21.470', 'Id': '18062'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In order to prove a certain function to be partially computable, I need to show an $\\mathbb S$-program that computes it. I could really use the predicate $X \\in B$ in my program to draw my conclusion. To give you the idea of what I am dealing with here it is one of my problems:</p>\n\n<blockquote>\nGive an infinite set $B$ such that $\\Phi(x,x)\\uparrow$ for all $b \\in\nB$ and such that $$H(x) = \\begin{cases}1 \\text{ if }\n\\Phi(x,x)\\downarrow \\\\ 0 \\text{ if } x \\in B \\\\ \\uparrow \\text{\notherwise}\\end{cases}$$ show that $H(x)$ is partially computable.\n</blockquote>\n\n<p>I am wondering if membership for infinite set is decidable and therefore can be used to write $\\text{IF } X \\in B$ such program. Am I allowed?</p>\n\n<p><strong>Edit:</strong> the notation $\\Phi(x,x)\\uparrow$ means the function is undefined.</p>\n', 'ViewCount': '147', 'Title': 'Is membership of x in an infinite set decidable?', 'LastEditorUserId': '2778', 'LastActivityDate': '2014-01-22T12:22:49.970', 'LastEditDate': '2013-11-23T10:45:44.037', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2778', 'Tags': '<computability><decision-problem>', 'CreationDate': '2013-11-21T18:20:14.557', 'Id': '18230'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Please correct my statement.\nAssuming $L\\in NP$, and algorithm A can determine L in poly-time in a nondeterministic machine, we have algorithm $A'$ and the complement of $L$ -- $L'$. $x$ is the input of $A'$</p>\n\n<pre><code>A'(x)\n{\n   if(A(x) is true)\n      return false\n   else\n      return true\n}\n</code></pre>\n\n<p>In this code, it seems like $A'$ can also run in a nondeterministic machine in poly-time. Can I just say $co-NP=NP$??</p>\n\n<p>Or my flaw is that the input $x\\in L'$ but $x\\notin L$?</p>\n\n<p>Could you please give me a specific example?? </p>\n", 'ViewCount': '27', 'ClosedDate': '2013-12-03T08:12:08.397', 'Title': 'Why NP is not closed under complement?', 'LastActivityDate': '2013-12-03T01:10:20.433', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11773', 'Tags': '<complexity-theory><computability><np-complete><decision-problem>', 'CreationDate': '2013-12-03T01:10:20.433', 'Id': '18553'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '92', 'Title': '"Unusual" coupling between a decision problem and a corresponding optimization problem', 'LastEditDate': '2013-12-04T18:21:05.133', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '699', 'FavoriteCount': '2', 'Body': '<p>There seems to usually be a tight connection between <a href="http://en.wikipedia.org/wiki/Decision_problem" rel="nofollow">decision problems</a> and (corresponding) <a href="http://en.wikipedia.org/wiki/Optimization_problem" rel="nofollow">optimization problems</a> in general. However, is this always the case? </p>\n\n<blockquote>\n  <p>Are there examples where the typical "tight coupling" between a decision problem and the correponding optimization problem breaks down or behaves in an unusual way, e.g. have significantly different complexity?</p>\n</blockquote>\n\n<p>Or, maybe there is a case where there is a cluster of problems that are all closely related, but the "best" or "definitive" version is not obvious or apparent? Also, I am looking for any survey or broad overview or discussion of this apparent basic connection between decision and optimization problems.</p>\n\n<p>A similar question was asked <a href="http://cs.stackexchange.com/questions/939/optimization-version-of-decision-problems">here</a>, but the answers were highly theoretical and it did not seem to yield any specific or tangible examples.</p>\n', 'Tags': '<complexity-theory><reference-request><optimization><decision-problem>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-04T18:21:05.133', 'CommentCount': '5', 'AcceptedAnswerId': '18608', 'CreationDate': '2013-12-03T17:10:07.033', 'Id': '18575'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a question: Every Decision problem has a method, turing machine or algorithm to solve it? If the answer is not, Could show me any example?</p>\n', 'ViewCount': '30', 'Title': 'Decision Problem Algorithm', 'LastActivityDate': '2013-12-05T19:11:28.370', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11241', 'Tags': '<decision-problem>', 'CreationDate': '2013-12-05T17:42:39.903', 'Id': '18653'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I am doing an assignment for my 1st year langauges and automata class. I have been having trouble with the last question which is this: Create a Turing machine that acccepts more a's than b's. I think I am supposed to pair the a's and b's together and then do some more but I can't wrap my head around it. Would help greatly if someone can post the algorithm and explain a little.</p>\n", 'ViewCount': '169', 'Title': "Turing machine that accepts language with more a's than b's", 'LastActivityDate': '2013-12-06T16:01:32.433', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11866', 'Tags': '<decision-problem>', 'CreationDate': '2013-12-06T07:03:33.380', 'Id': '18672'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have following problem: I have a sorted sequence of $N$ integers (assume they are monotonically increasing).  I want to check whether there is any subsequence of length $\\ge N/4$, such that consecutive elements of the subsequence all differ by the same value.</p>\n\n<p>For example, in the sequence [3,4,5,8,12] there are two such subsequences: [3,4,5] (the difference is 1) and [4,8,12] (the difference is 4).  Thus, the length of longest such subsequence is 3 for this example.  Since $3 \\ge 5/4$, the answer is yes, there is a subsequence of length $\\ge N/4$ with the desired property.</p>\n\n<p>In my real-life situation, the sequence is of length $N\\approx 10^6$, and the elements are all 9-digit numbers.  Is there an efficient algorithm to solve this problem?</p>\n\n<hr>\n\n<p>My naive approach was to create Cartesian product with absolute differences between numbers:</p>\n\n<p>$$\n\\left( \\begin{array}{ccccc}\n0 &amp; 1 &amp; 2 &amp; 5 &amp; 9 \\\\\n1 &amp; 0 &amp; 1 &amp; 4 &amp; 8 \\\\\n2 &amp; 1 &amp; 0 &amp; 3 &amp; 7 \\\\\n5 &amp; 4 &amp; 3 &amp; 0 &amp; 4 \\\\\n9 &amp; 8 &amp; 7 &amp; 4 &amp; 0 \\end{array} \\right) $$</p>\n\n<p>And then focus on top-right part and compute number of occurrences of each difference, so:</p>\n\n<p>$$\n ||\\text{diff-by-1}|| = 2 =&gt; \\text{3 numbers diff by 1}\\\\\n ||\\text{diff-by-4}|| = 2 =&gt; \\text{3 numbers diff by 4}\n$$</p>\n\n<p>This is very simple and very ineffective. It requires lot of comparisons and does not scale (at all): its running time is $\\Theta(N^2)$. In my real life scenario my sequence is ~10^6 long, so this is too slow.</p>\n\n<p>To give you wider picture as maybe there is much better (probabilistic) approach to this problem: after largest sub-sequence is found I want to compute simple ratio: </p>\n\n<p>$$\nr:=\\frac{\\text{largest sub-sequence length}}{\\text{sequence length}}\n$$</p>\n\n<p>and if $r$ is greater then some fixed value I want to raise alarm (or do whatever I have to do ;-)).</p>\n\n<p>Thanks for any help, references, pointers, etc.</p>\n\n<p>BTW: here are things that I was/am looking at:</p>\n\n<ul>\n<li><a href="http://link.springer.com/article/10.1007/s00453-009-9376-2" rel="nofollow">http://link.springer.com/article/10.1007/s00453-009-9376-2</a></li>\n<li><a href="http://en.wikipedia.org/wiki/Longest_increasing_subsequence_problem" rel="nofollow">http://en.wikipedia.org/wiki/Longest_increasing_subsequence_problem</a></li>\n<li><a href="http://en.wikipedia.org/wiki/Longest_common_subsequence_problem" rel="nofollow">http://en.wikipedia.org/wiki/Longest_common_subsequence_problem</a></li>\n<li><a href="http://en.wikipedia.org/wiki/Kalman_filter" rel="nofollow">http://en.wikipedia.org/wiki/Kalman_filter</a></li>\n</ul>\n\n<p><strong>Update</strong>: was thinking a little bit more about it and started from the end, so instead of computing all differences between numbers (top-right corner of the matrix) I can derive small $k$ value from "fixed value" I mentioned at the end of original question. For instance if I am going to raise the alarm when 25% of all numbers are in some sequence I need to focus on small "triangles" in matrix and number of computations required is smaller (much smaller). \nWhen I add some sampling then it should be simple enough to implement at scale.</p>\n\n<p><strong>Update 2</strong> - Implemented @D.W. algorithm, sample run below:</p>\n\n<pre><code>    11:51:06 ~$ time nodejs progression.js \n    L: 694000000,694000002,694000006,694000007,694000009,694000010,\n        694000013,694000015,694000018,694000019,694000021,694000022,694000023,\n    694000026,694000028,694000030,694000034,694000036,694000038,694000040,\n    694000043,694000045,694000046,694000048,694000051,694000053,694000055,\n    694000057,694000060,694000061,694000063,694000067,694000069,694000072,\n    694000074,694000076,694000077,694000079,694000080,694000082,694000083,\n    694000084,694000086,694000090,694000091,694000093,694000095,694000099,\n    694000102,694000103,694000105,694000108,694000109,694000113,694000116,\n    694000118,694000122,694000125,694000128,694000131,694000134,694000137,\n    694000141,694000143,694000145,694000148,694000152,694000153,694000154,\n    694000157,694000160,694000162,694000163,694000166,694000170,694000173,\n    694000174,694000177,694000179,694000180,694000181,694000184,694000185,\n    694000187,694000189,694000193,694000194,694000198,694000200,694000203,\n    694000207,694000211,694000215,694000219,694000222,694000226,694000228,\n    694000232,694000235,694000236\n    N: 100\n    P: 0.1\n    L: 10 (min)\n    D: 26 (max)\n    [ 9, 18, 27, 36, 45, 54, 63, 72, 81, 90 ]\n    Found progression of 10 elements, difference: 16 starts: 694000045, ends: 694000189.\n\n    real    0m0.065s\n    user    0m0.052s\n    sys 0m0.004s\n</code></pre>\n', 'ViewCount': '249', 'Title': "Detecting a subsequence that's an arithmetic progression, in a sorted sequence", 'LastEditorUserId': '8380', 'LastActivityDate': '2013-12-16T10:54:37.677', 'LastEditDate': '2013-12-16T10:54:37.677', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '19002', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8380', 'Tags': '<algorithms><decision-problem><subsequences>', 'CreationDate': '2013-12-13T13:35:39.720', 'Id': '18951'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Given a digraph $D = (V, A)$ and $m \\in \\mathbb{N}$, the question is is there a subset $A' \\subseteq A$, such that $\\lvert A' \\rvert \\geq m$ and $d_{D'}^+(u) \\leq d_{D'}^-(v)$ holds for every arc $(u, v) \\in A'$ in the subgraph $D' = (V, A')$, i.e. the out-degree of $u$ is not larger than the in-degree of $v$? Note that the degree constraints should hold in the subgraph $D'$.</p>\n\n<p>This seems like a straight-forward problem, alas I am unable to connect it to some more familiar graph problem. I am mostly interested in its complexity.</p>\n", 'ViewCount': '85', 'Title': 'Digraph problem relating in- and out-degrees', 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-04T04:46:54.440', 'LastEditDate': '2014-01-02T15:51:52.913', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '12522', 'Tags': '<graphs><time-complexity><decision-problem>', 'CreationDate': '2014-01-01T23:59:45.053', 'Id': '19443'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>It makes me wonder that despite of (CFL) being a subset of Turing Decidable languages, Turing Decidable is closed under intersection while CFL is not.</p>\n\n<p>Does not Turing Decidable engulf all CFLs?</p>\n', 'ViewCount': '44', 'Title': 'CFL not closed under intersection while Turing Decidable are', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-19T23:03:12.623', 'LastEditDate': '2014-02-19T23:03:12.623', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9576', 'Tags': '<formal-languages><context-free><turing-machines><closure-properties><decision-problem>', 'CreationDate': '2014-02-19T19:14:27.437', 'Id': '21821'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>If we were to intuitively construct a lower bound for searching an element in a list $A$ containing $n$ integers, it would be in $\\Omega(n)$.</p>\n\n<p>But with the decision tree model, the number of leafs is $n$, so we conclude that the lower bound is $\\Omega(\\log{n})$.</p>\n\n<p>This is the same as finding the maximum element in a list. Intuitively, it is in $\\Omega(n)$, but with the decision tree model it is $\\Omega(\\log{n})$.</p>\n\n<p>Can someone help me understand this discrepancy ?</p>\n\n<p>Thank you in advance.</p>\n', 'ViewCount': '17', 'Title': 'Doubt in the correctness of decision tree models for constructing a lower bound', 'LastActivityDate': '2014-02-27T19:13:00.927', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22104', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15072', 'Tags': '<algorithms><search-algorithms><decision-problem><trees><lower-bounds>', 'CreationDate': '2014-02-27T17:39:15.747', 'Id': '22099'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>does there exist two undecidable languages such that their union is decidable? \nwhat about a decidable intersection? </p>\n\n<p>One thing that I've been trying to figure out is if J and K are both undecidable but finite set, then the union would be finite and decidable. However, I have not thought of such a set yet. </p>\n", 'ViewCount': '9', 'ClosedDate': '2014-03-20T08:59:23.967', 'Title': 'two undecidable languages with a decidable union/intersection?', 'LastActivityDate': '2014-03-20T01:34:04.573', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15045', 'Tags': '<undecidability><decision-problem>', 'CreationDate': '2014-03-20T01:34:04.573', 'Id': '22838'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've read that subset sum is NP-complete. What happens when I change the decision problem to look for a  constant number? So the decision problem would look like this:</p>\n\n<blockquote>\n  <p>Input:\n  A collection of nonnegative integers A and a nonnegative integer b, </p>\n  \n  <p>Output:\n  Boolean value indicating whether some subset of \n  the collection sums to <strong>10</strong></p>\n</blockquote>\n\n<p>Would this still be NP-complete? I don't believe you would be able to reduce every other NP-complete problem to it.</p>\n", 'ViewCount': '73', 'Title': 'Is subset sum with a fixed target sum NP-complete?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-29T11:51:34.573', 'LastEditDate': '2014-03-29T11:51:34.573', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15375', 'Tags': '<complexity-theory><np-complete><decision-problem>', 'CreationDate': '2014-03-28T23:01:39.577', 'Id': '23198'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>What is the proof of  P \u2286 NP? I cannot happen to find a good explanation for it. I read that the <code>verifier</code> will just ignore the proof and accept any proof if the solution is YES and reject all proofs if the answer is NO. I\'m also unclear about verifier.</p>\n\n<p>Definition of P and NP I follow:</p>\n\n<p>P: a problem \'Q\' is said to be in P if there exists an efficient (polynomial worst-case time) algorithm for solving the problem. E.g.- "is a given natural number \'x\' even?".</p>\n\n<p>NP: a problem \'Q\' is said to be in NP if there exists efficient verifiers (an algorithm for verifying if a given proof is correct).</p>\n', 'ViewCount': '58', 'ClosedDate': '2014-04-02T15:13:50.323', 'Title': u'Proof of P \u2286 NP', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-02T15:12:09.783', 'LastEditDate': '2014-04-02T15:12:09.783', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16381', 'Tags': '<complexity-theory><decision-problem><complexity-classes>', 'CreationDate': '2014-04-02T13:10:01.710', 'Id': '23340'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '69', 'Title': 'Why is SAT in NP?', 'LastEditDate': '2014-04-02T20:50:53.243', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14436', 'FavoriteCount': '1', 'Body': "<p>I know that CNF SAT is in NP (and also NP-complete), because SAT is in NP and NP-complete. But what I don't understand is why? Is there anyone that can explain this?</p>\n", 'Tags': '<complexity-theory><satisfiability><decision-problem><np>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-02T20:50:53.243', 'CommentCount': '1', 'AcceptedAnswerId': '23362', 'CreationDate': '2014-04-02T17:25:08.017', 'Id': '23353'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>This is an assignment of an introductory course of complexity theory and I need to <em>find</em> a way to do the following:</p>\n\n<p>Given $n,m \\in \\Bbb N$, is $n \\le m!$ ?</p>\n\n<p>The idea is to provide a <strong>Post Machine</strong> that can decide this in an <em>efficient way</em>, using $n,m$ in a binary codification.</p>\n\n<p>We know that the factorial isn't efficient, so the problem actually is just to find a way to decide this, if it's possible.</p>\n\n<p>I know how to compare if $n\\le m$, but the factorial is my problem. \n<strong>I don't how how to compute $m!$ with a Post Machine</strong>, if possible, in polynomial-time.</p>\n\n<p>I guess that the most simple way to do this is comparing $n$ with factorials of numbers that are lower than $m$, but the factorial it's still my problem.</p>\n\n<p>My question, is there an algorithm that can help me?</p>\n", 'ViewCount': '115', 'Title': 'Algorithm to decide if $n \\le m!$', 'LastEditorUserId': '11936', 'LastActivityDate': '2014-04-04T23:09:10.580', 'LastEditDate': '2014-04-02T21:19:47.417', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '23439', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11936', 'Tags': '<algorithms><decision-problem><integers>', 'CreationDate': '2014-04-02T19:06:07.690', 'Id': '23363'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Subset sum is given by this question:\n"The problem is this: given a set (or multiset) of integers, is there a non-empty subset whose sum is zero?"</p>\n\n<p>My question is: If the numbers in the set are functions of other numbers, is that still subset sum? For example\nThe set {1,2,3} where the first number is X, the second is X+1, third is X+2 and so on. So it is a general set.</p>\n\n<p>Is this allowed? </p>\n', 'ViewCount': '42', 'ClosedDate': '2014-04-15T23:45:05.803', 'Title': 'Constraints on subset sum problem', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-14T07:44:52.180', 'LastEditDate': '2014-04-14T07:44:52.180', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15579', 'Tags': '<complexity-theory><decision-problem>', 'CreationDate': '2014-04-13T23:01:49.100', 'Id': '23757'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Let $L = \\{ &lt;M&gt; | M$ halts on every input $x$ in at most $200 * |x|$ steps $\\}$. </p>\n\n<p>Is $L$ decidable? Recognizable?</p>\n\n<p>Given that membership in $L$ asserts something about $M$'s behavior on an infinite set of strings, it seems extremely unlikely to me that $L$ could be either. I have shown that co-$L$ is Turing-recognizable (I think): you can make an enumerator that tests each $M_1, M_2, \\dots, $ for each $s_1, s_2, \\dots$ and emits $M$ if it does not accept some $s$ in at most $200|x|$ steps.</p>\n\n<p>Since co-$L$ is recognizable, either $L$ is not recognizable, or it is decidable. I can't imagine that $L$ is decidable. However, it definitely cannot be reduced to the halting problem, nor can Rice's theorem be applied to it (since the quality in question is the quality of halting in a particular number of steps, being able to decide it doesn't let us decide other arbitrary properties).</p>\n\n<p>It seems to me that the best way to go will be to show that $L$ lets me recognize something that is unrecognizable, since the only problems it solves are ones which require me to run over infinite sets of strings. But I can't think of what this could be. I thought that maybe co-HALT would work, but I can't ever prove that a TM will never halt on some input.</p>\n\n<p>I'm stuck. What direction should I go in?</p>\n", 'ViewCount': '38', 'Title': 'Deciding the set of all Turing machines that halt in at most $k|x|$ steps $\\forall x \\in \\Sigma^*$', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-16T12:31:22.373', 'LastEditDate': '2014-04-16T12:31:22.373', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '16612', 'Tags': '<computability><turing-machines><undecidability><decision-problem>', 'CreationDate': '2014-04-16T09:25:10.423', 'Id': '23849'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>Is there any class of NP problems that have one unique solution?\nI'm asking that, because when I was studying cryptography I read about the knapsack and I found very interesting the idea.</p>\n", 'ViewCount': '106', 'Title': 'NP Problems with unique solution', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-23T14:33:23.040', 'LastEditDate': '2014-04-23T14:32:38.843', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '7', 'OwnerDisplayName': 'user3513151', 'PostTypeId': '1', 'OwnerUserId': '17026', 'Tags': '<complexity-theory><decision-problem><np><cryptography>', 'CreationDate': '2014-04-23T01:24:04.347', 'Id': '24043'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The question is whether this is recursive or not. I first thought that it wasn\'t but then I read this question which seems similar and is recursive.</p>\n\n<p><a href="http://cs.stackexchange.com/questions/3119/is-it-decidable-whether-a-tm-reaches-some-position-on-the-tape">Is it decidable whether a TM reaches some position on the tape?</a></p>\n\n<p>I think it\'s a slightly different question though (?) and so I have tried to show that it isn\'t recursive by reduction from the halting problem. </p>\n\n<p>Ignore the below if it is recursive!</p>\n\n<p>So for an instance  of the Halting problem we can use 2 tape TM M\' as follows:</p>\n\n<p>on input (code(M)code(x)) to M\'</p>\n\n<ul>\n<li>M\' copies code(x) to tape 2 </li>\n<li>M\' simulates M on tape 2</li>\n<li>If M halts on the input x then......</li>\n</ul>\n\n<p>I am not really sure what to do now. I thought that I could get M\' to only enter a certain cell if M halts on x and then use this to show that if we could decide the problem above then we could decide the Halting problem (by seeing if M\' enters that particular cell)</p>\n\n<p>But I am not sure what cell I can use to guarantee that it won\'t have already been entered? The two tape thing is kind of confusing me -do I need to pick a cell that won\'t be entered on either tape 1 or tape 2?</p>\n\n<p>Any help appreciated!</p>\n', 'ViewCount': '14', 'Title': 'Does the head of TM M ever move into cell x when processing Input I?', 'LastActivityDate': '2014-04-27T21:17:58.543', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17058', 'Tags': '<turing-machines><decision-problem><halting-problem>', 'CreationDate': '2014-04-27T21:17:58.543', 'Id': '24157'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '28', 'Title': 'Is This Property (Representative Property) Can Be Generalized?', 'LastEditDate': '2014-04-27T23:48:57.763', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17125', 'FavoriteCount': '1', 'Body': u'<p>I recently came across with a question that asks for the greatest subset of a given set, which includes relatively prime elements.(Randomly selected item from a set is always relatively prime to all others.)\nMy approach was eliminating the subsets depending on if the subset satisfies the rule.\nWhich means testing one by one all possible subsets. In order to determine which subset is going to be tested, I have choosen the following way:</p>\n\n<p>Let S be a set and "n" is the size of the set. Since there are 2^n possible subsets, all computer needs to do is to check all possible subsets. However, the question is in which way and regarding what property. In other words what would be the "rule" for computer to do it.</p>\n\n<p>I came up with a method which I call "Representative Property". By using ones and zeroes I could represent all the elements of the set to indicate their existance or absence in the subset which is going to be tested.</p>\n\n<p>\u0130f n=5, then There is 32 possible subsets. \nStarting from 2^n -1 in which case 31, converting 31 to binary we get "11111". What binary 11111 represent is all the elements of the set is included in the subset which is going to be tested.</p>\n\n<p>By incrementing that value by one I could get 11110,11101,11100,...00010,00001 where "1" stands for existance of the element and the "0" is vice versa.</p>\n\n<p>This is the code for who wonders all work...</p>\n\n<pre><code>import java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class Quest_1 {\n\nprivate static boolean isRelativePrime(ArrayList&lt;Integer&gt; newInfo) {\n    int j;\n    for(int i=newInfo.size()-1;i&gt;=0;i--){\n\n        for(int k=i-1;k&gt;=0;k--){\n            j=2;\n            while (j&lt;newInfo.get(k)||j&lt;newInfo.get(i)){\n                if(newInfo.get(k)%j == 0 &amp;&amp; newInfo.get(i)%j== 0)\n                    return false;\n                j++;\n            }\n        }\n    }\n    return true;\n}\npublic static String reverse(String source) {\n    int i, len = source.length();\n    StringBuffer dest = new StringBuffer(len);\n\n    for (i = (len - 1); i &gt;= 0; i--)\n        dest.append(source.charAt(i));\n    return dest.toString();\n}\npublic static String binary(int i, int k){\n\n\n    int count = 0;\n    String empty ="";\n\n    while(i&gt;0){\n\n        if (i%2==0)\n            empty = empty +"0";\n        else\n            empty = empty +"1";\n        i = i/2;\n        count++;\n\n    }\n\n    while(count &lt; k){\n        empty = empty+"0";\n        count++;\n    }\n    empty = reverse(empty);\n    return empty;\n}\n\npublic static void main(String[] args) {\n    Scanner scan = new Scanner(System.in);\n    System.out.print("Ka\xe7 eleman? ");\n    String binary;\n    int max = 0;\n    int componentSize = scan.nextInt();\n\n    ArrayList&lt;Integer&gt; info = new ArrayList&lt;Integer&gt;();\n    ArrayList&lt;Integer&gt; newInfo = new ArrayList&lt;Integer&gt;();\n    for (int i = 0;i&lt;componentSize;i++){\n\n        info.add(scan.nextInt());\n\n    }\n    for(int l=0;l&lt;info.size();l++)\n        System.out.println("***----****------****** "+info.get(l));\n    for(int k=(int)Math.pow(2, componentSize)-1; k&gt;0; k--){\n        // takes the string.if "1" add,then compare.if relatPrime is true omit, else leave it\n        binary = binary( k, componentSize);\n        int index=binary.length()-1;\n        while(index &gt;= 0){\n\n            if(binary.charAt(index)==\'1\')\n                newInfo.add(info.get(index));\n\n            index--;\n        }\n        if(isRelativePrime(newInfo) &amp;&amp; max&lt;newInfo.size())\n            max = newInfo.size();\n        index=newInfo.size()-1;\n        while(index&gt;=0){\n            newInfo.remove(index);\n            index--;\n        }\n    }\n    System.out.println("here is the max: "+max);\n}\n\n}\n</code></pre>\n\n<p>Now here comes the question. Can this way, I mean representing the computations with numbers , be generalized?</p>\n\n<p>For example: there is a password whose length is 5.\n"1" stands for a, "2" for b and etc.</p>\n\n<p>or\nfor chess games, by decrementing the test case number, Can all the possibilities be evaluated ? And what is this process called,checking all the possibilities?</p>\n\n<p>I am majoring CS, first semester. Therefore, I am open to all suggestions.</p>\n\n<p>(I am really sorry for everything wrong, I\'d really appreciated,if you kindly warned me.)</p>\n', 'Tags': '<algorithms><decision-problem><numeral-representations>', 'LastEditorUserId': '17125', 'LastActivityDate': '2014-04-28T01:09:02.173', 'CommentCount': '1', 'AcceptedAnswerId': '24165', 'CreationDate': '2014-04-27T23:19:38.823', 'Id': '24160'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '26', 'Title': 'Given a complete, weighted and undirected graph $G$, complexity of finding a path with a specific cost', 'LastEditDate': '2014-04-29T18:42:14.217', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '17185', 'FavoriteCount': '1', 'Body': '<p>Given a fully connected graph $G$, suppose that we are searching for a simple path $P$ with a specific cost $c$. </p>\n\n<p>Is answering to that problem <em>yes</em> or <em>no</em> equivalent to subset-sum problem?\nWhat would be the complexity of finding such path?</p>\n\n<p>I have made a reduction from subset-sum problem:</p>\n\n<p>If each number in a set $S$ is a vertex of $G$ and weight of $&lt;i,j&gt;$ is $|i-j|$, then answering the question above <em>yes</em> or <em>no</em> is the same as solving the sumbet-sum problem.</p>\n\n<p>P.S. The initial vertex I have visited is added to the cost.</p>\n\n<p><strong>Edit: Edge weights</strong></p>\n', 'Tags': '<algorithms><graph-theory><graphs><decision-problem>', 'LastEditorUserId': '17185', 'LastActivityDate': '2014-04-29T20:37:29.247', 'CommentCount': '4', 'AcceptedAnswerId': '24233', 'CreationDate': '2014-04-29T17:40:06.137', 'Id': '24231'}}