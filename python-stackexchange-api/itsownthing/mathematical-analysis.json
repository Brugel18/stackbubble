{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '360', 'Title': 'How to prove that  $n(\\log_3(n))^5 = O(n^{1.2})$?', 'LastEditDate': '2012-06-02T00:51:16.560', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '886', 'FavoriteCount': '1', 'Body': "<p>This a homework question from Udi Manber's book. Any hint would be nice :)</p>\n\n<p>I must show that:</p>\n\n<blockquote>\n  <p>$n(\\log_3(n))^5 = O(n^{1.2})$</p>\n</blockquote>\n\n<p>I tried using Theorem 3.1 of book:</p>\n\n<blockquote>\n  <p>$f(n)^c = O(a^{f(n)})$ (for $c &gt; 0$, $a &gt; 1$)</p>\n</blockquote>\n\n<p>Substituing:</p>\n\n<p>$(\\log_3(n))^5 = O(3^{\\log_3(n)}) = O(n) $</p>\n\n<p>but $n(\\log_3(n))^5 = O(n\\cdot n) = O(n^2) \\ne O(n^{1.2})$</p>\n\n<p>Thank you for any help.</p>\n", 'Tags': '<asymptotics><landau-notation><mathematical-analysis>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:24:44.133', 'CommentCount': '5', 'AcceptedAnswerId': '975', 'CreationDate': '2012-04-02T00:59:41.290', 'Id': '974'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '237', 'Title': '$\\log^*(n)$ runtime analysis', 'LastEditDate': '2012-04-18T19:11:59.100', 'AnswerCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '1132', 'FavoriteCount': '1', 'Body': "<p>So I know that $\\log^*$ means iterated logarithm, so $\\log^*(3)$ = $(\\log\\log\\log\\log...)$ until $n \\leq 1$.</p>\n\n<p>I'm trying to solve the following:</p>\n\n<p>is </p>\n\n<blockquote>\n  <p>$\\log^*(2^{2^n})$</p>\n</blockquote>\n\n<p>little $o$, little $\\omega$, or $\\Theta$ of</p>\n\n<blockquote>\n  <p>${\\log^*(n)}^2$</p>\n</blockquote>\n\n<p>In terms of the interior functions, $\\log^*(2^{2^n})$ is much bigger than $\\log^*(n)$, but squaring the $\\log^*(n)$ is throwing me off. </p>\n\n<p>I know that $\\log(n)^2$ is $O(n)$, but I don't think that property holds for the iterative logarithm.</p>\n\n<p>I tried applying the master method, but I'm having trouble with the properties of a $\\log^*(n)$ function. I tried setting n to be max (i.e. $n = 5$), but this didn't really simplify the problem.</p>\n\n<p>Does anyone have any tips as to how I should approach this?</p>\n", 'Tags': '<asymptotics><landau-notation><mathematical-analysis>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-04-18T19:11:59.100', 'CommentCount': '0', 'AcceptedAnswerId': '1340', 'CreationDate': '2012-04-18T14:32:10.103', 'Id': '1339'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I applied the Master theorem to a recurrence for a running time I encountered (this is a simplified version):</p>\n\n<p>$$T(n)=4T(n/2)+O(r)$$</p>\n\n<p>$r$ is independent of $n$. Case 1 of the Master theorem applies and tells us that $T(n)=O(n^2)$.</p>\n\n<p>However, this hides a constant dependent on $r$ in the big-oh notation: our recurrence has depth $O(\\log_2 n)$ so at the final level we have $O(4^{\\log_2 n})=O(n^2)$ subproblems, each of which takes $O(r)$ time to be handled. This means the actual running time is $O(n^2 r)$ (or worse: this analysis only talks about the lowest level).</p>\n\n<p>This is my actual recursion:</p>\n\n<p>$$T(n)=r^2T(n/r)+O(nr^2)$$</p>\n\n<p>Is there a method similar to the Master theorem for these kinds of recursions?</p>\n', 'ViewCount': '227', 'Title': 'Master theorem and constants independent of $n$', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-02T13:24:14.520', 'LastEditDate': '2013-02-02T13:24:14.520', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '92', 'Tags': '<algorithm-analysis><asymptotics><recurrence-relation><mathematical-analysis><master-theorem>', 'CreationDate': '2012-04-29T17:39:46.100', 'FavoriteCount': '2', 'Id': '1576'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '234', 'Title': 'Recursion for runtime of divide and conquer algorithms', 'LastEditDate': '2012-05-10T16:31:21.383', 'AnswerCount': '1', 'Score': '1', 'OwnerDisplayName': 'user1422', 'PostTypeId': '1', 'FavoriteCount': '1', 'Body': "<p>A divide and conquer algorithm's work at a specific level can be simplified into the equation:</p>\n\n<p>$\\qquad \\displaystyle O\\left(n^d\\right) \\cdot \\left(\\frac{a}{b^d}\\right)^k$</p>\n\n<p>where $n$ is the size of the problem, $a$ is the number of sub problems, $b$ is the factor the size of the problem is broken down by at each recursion, $k$ is the level, and $d$ is the exponent for Big O notation (linear, exponential etc.).</p>\n\n<p>The book claims  if the ratio is greater than one the sum of work is given by the last term on the last level, but if it is less than one the sum of work is given by the first term of the first level. Could someone explain why this is true?</p>\n", 'Tags': '<algorithm-analysis><asymptotics><runtime-analysis><recursion><mathematical-analysis>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-10T16:31:21.383', 'CommentCount': '0', 'AcceptedAnswerId': '1746', 'CreationDate': '2012-05-09T03:13:56.910', 'Id': '1745'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>When we compare the complexity of two algorithms, it is usually the case that either $f(n) = O(g(n))$ or $g(n) = O(f(n))$ (possibly both), where $f$ and $g$ are the running times (for example) of the two algorithms.</p>\n\n<p>Is this always the case? That is, does at least one of the relationships $f(n) = O(g(n))$ and $g(n) = O(f(n))$ always hold, that is for general functions $f$,$g$? If not, which assumptions do we have to make, and (why) is it ok when we talk about algorithm running times?</p>\n', 'ViewCount': '378', 'Title': 'Are the functions always asymptotically comparable?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-16T05:42:38.933', 'LastEditDate': '2012-05-15T20:47:14.597', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '8', 'OwnerDisplayName': 'matrixx', 'PostTypeId': '1', 'Tags': '<asymptotics><mathematical-analysis>', 'CreationDate': '2012-05-10T15:29:47.797', 'FavoriteCount': '1', 'Id': '1780'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>As follows <a href="http://cs.stackexchange.com/questions/1828/polytime-and-polyspace-algorithm-for-determining-the-leading-intersection-of-n-d">from my previous question</a>, I\'ve been playing with the <a href="http://en.wikipedia.org/wiki/Riemann_hypothesis">Riemann hypothesis</a> as a matter of recreational mathematics. In the process, I\'ve come to a rather interesting recurrence, and I\'m curious as to its name, its reductions, and its tractability towards the solvability of the gap between prime numbers.</p>\n\n<p>Tersely speaking, we can define the <em>gap</em> between each prime number as a recurrence of preceding <em>candidate</em> primes. For example, for our base of $p_0 = 2$, the next prime would be:</p>\n\n<p>$\\qquad \\displaystyle p_1 = \\min \\{ x &gt; p_0 \\mid -\\cos(2\\pi(x+1)/p_0) + 1 = 0)  \\}$</p>\n\n<p>Or, as we see by <a href="http://m.wolframalpha.com/input/?i=-cos%28%28x%2b1%29%2a2%2api/2%29%20%2b%201%20=%200">plotting this out</a>: $p_1 = 3$.</p>\n\n<p>We can repeat the process for $n$ primes by evaluating each candidate prime recurring forward. Suppose we want to get the next prime, $p_2$. Our candidate function becomes:</p>\n\n<p>$\\qquad \\displaystyle \\begin{align}\np_2 = \\min\\{ x &gt; p_1 \\mid f_{p_1}(x) + (&amp;(-\\cos(2\\pi(x+1)/p_1) + 1) \\\\\n                                   \\cdot &amp;(-\\cos(2\\pi(x+2)/p_1) + 1)) = 0\\}\n\\end{align}$</p>\n\n<p>Where:</p>\n\n<p>$\\qquad \\displaystyle f_{p_1}(x) = -\\cos(2\\pi(x+1)/p_0) + 1$, as above.</p>\n\n<p>It\'s easy to see that each component function only becomes zero on integer values, and it\'s equally easy to show how this captures our AND- and XOR-shaped relationships cleverly, by exploiting the properties of addition and multiplication in the context of a system of trigonometric equations.</p>\n\n<p>The recurrence becomes:</p>\n\n<p>$\\qquad f_{p_0} = 0\\\\\n\\qquad p_0 = 2\\\\\n\\qquad \\displaystyle\n  f_{p_n}(x) = f_{p_{n-1}}(x) + \\prod_{k=2}^{p_{n-1}} (-\\cos(2\\pi(x+k-1)/p_{n-1}) + 1)\\\\\n \\qquad \\displaystyle\n p_n = \\min\\left\\{ x &gt; p_{n-1} \\mid f_{p_n}(x) = 0\\right\\}$</p>\n\n<p>... where the entire problem hinges on whether we can evaluate the $\\min$ operator over this function in polynomial time. This is, in effect, a generalization of the <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a>.</p>\n\n<p>Working Python code to demonstrate the recurrence:</p>\n\n<pre><code>from math import cos,pi\n\ndef cosProduct(x,p):\n    """ Handles the cosine product in a handy single function """\n    ret = 1.0\n    for k in xrange(2,p+1):\n        ret *= -cos(2*pi*(x+k-1)/p)+1.0\n    return ret\n\ndef nthPrime(n):\n    """ Generates the nth prime, where n is a zero-based integer """\n\n    # Preconditions: n must be an integer greater than -1\n    if not isinstance(n,int) or n &lt; 0:\n        raise ValueError("n must be an integer greater than -1")\n\n    # Base case: the 0th prime is 2, 0th function vacuous\n    if n == 0:\n        return 2,lambda x: 0\n\n    # Get the preceding evaluation\n    p_nMinusOne,fn_nMinusOne = nthPrime(n-1)\n\n    # Define the function for the Nth prime\n    fn_n = lambda x: fn_nMinusOne(x) + cosProduct(x,p_nMinusOne)\n\n    # Evaluate it (I need a solver here if it\'s tractable!)\n    for k in xrange(p_nMinusOne+1,int(p_nMinusOne**2.718281828)):\n        if fn_n(k) == 0:\n            p_n = k\n            break\n\n    # Return the Nth prime and its function\n    return p_n,fn_n\n</code></pre>\n\n<p>A quick example:</p>\n\n<pre><code>&gt;&gt;&gt; [nthPrime(i)[0] for i in range(20)]\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n</code></pre>\n\n<p>The trouble is, I\'m now in way over my head, both mathematically and as a computer scientist. Specifically, I am not competent with <a href="http://en.wikipedia.org/wiki/Fourier_analysis">Fourier analysis</a>, with defining <a href="http://en.wikipedia.org/wiki/Uniform_space#Uniform_cover_definition">uniform covers</a>, or with the <a href="http://en.wikipedia.org/wiki/Complex_plane">complex plane</a> in general, and I\'m worried that this approach is either flat-out <em>wrong</em> or hides a lurking horror of a 3SAT problem that elevates it to NP-completeness.</p>\n\n<p>Thus, I have three questions here:</p>\n\n<blockquote>\n  <ol>\n  <li>Given my terse recurrence above, is it possible to deterministically compute or estimate the location of the zeroes in polynomial time and space?</li>\n  <li>If so or if not, is it hiding <em>any other</em> subproblems that would make a polytime or polyspace solution intractable?</li>\n  <li>And if by some miracle (1) and (2) hold up, what dynamic programming improvements would you make in satisfying this recurrence, from a high level? Clearly, iteration over the same integers through multiple functions is inelegant and quite wasteful.</li>\n  </ol>\n</blockquote>\n', 'ViewCount': '333', 'Title': 'Proving the (in)tractability of this Nth prime recurrence', 'LastEditorUserId': '958', 'LastActivityDate': '2012-05-24T08:38:32.067', 'LastEditDate': '2012-05-24T08:38:32.067', 'AnswerCount': '0', 'CommentCount': '9', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '958', 'Tags': '<complexity-theory><reference-request><recurrence-relation><mathematical-analysis>', 'CreationDate': '2012-05-22T00:50:48.443', 'FavoriteCount': '3', 'Id': '1984'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p><a href="http://cs.stackexchange.com/questions/1984/proving-the-intractability-of-this-nth-prime-recurrence">As discussed in this question,</a> I drafted a spec algorithm that hinges on finding a specific root of a system of trigonometric equations satisfying the following recurrence:</p>\n\n<p>$\\qquad f_{p_0} = 0\\\\\n\\qquad p_0 = 2\\\\\n\\qquad \\displaystyle\n  f_{p_n}(x) = f_{p_{n-1}}(x) + \\prod_{k=2}^{p_{n-1}} (-\\cos(2\\pi(x+k-1)/p_{n-1}) + 1)\\\\\n \\qquad \\displaystyle\n p_n = \\min\\left\\{ x &gt; p_{n-1} \\mid f_{p_n}(x) = 0\\right\\}$</p>\n\n<p><a href="http://www.wolframalpha.com/input/?i=%E2%88%92cos%282%CF%80%28x%2b1%29/2%29%2b1%2b%28%E2%88%92cos%282%CF%80%28x%2b1%29/3%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b2%29/3%29%2b1%29%2b%28%E2%88%92cos%282%CF%80%28x%2b1%29/5%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b2%29/5%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b3%29/5%29%2b1%29%28%E2%88%92cos%282%CF%80%28x%2b4%29/5%29%2b1%29=0%20for%20x" rel="nofollow">Playing with this system a bit over on Wolfram|Alpha</a>, it seems I can get specific answers to the recurrence from their <a href="http://en.wikipedia.org/wiki/Computer_algebra_system" rel="nofollow">computer algebra system</a>. Unfortunately, I can find no specific documentation on the methods they\'re using to solve my equations.</p>\n\n<p>My question, then: </p>\n\n<blockquote>\n  <p>What methods (and what time and space complexities) do computer algebra systems use to solve these forms of equations? I suspect the <a href="http://en.wikipedia.org/wiki/Gr%C3%B6bner_basis" rel="nofollow">Gr\xf6bner basis</a> is commonly used, but I could be very wrong.</p>\n</blockquote>\n', 'ViewCount': '163', 'Title': 'Complexity of computer algebra for systems of trigonometric equations', 'LastEditorUserId': '41', 'LastActivityDate': '2012-05-28T18:02:17.160', 'LastEditDate': '2012-05-28T18:02:17.160', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '958', 'Tags': '<reference-request><runtime-analysis><mathematical-analysis><computer-algebra><mathematical-software>', 'CreationDate': '2012-05-28T09:20:37.547', 'FavoriteCount': '1', 'Id': '2121'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I've been tasked with solving some recurrence relations, and I've been running into trouble with so called 'chip &amp; conquer' relations.</p>\n\n<p>Here are some example problems:</p>\n\n<p>$$T(n) = T(n-5) + cn^2$$</p>\n\n<p>and</p>\n\n<p>$$T(n) = T(n-2) + \\log{n}$$</p>\n\n<p>I'm supposed to be giving an answer in $\\Theta$ notation. How do I go around and solving relations like these?</p>\n", 'ViewCount': '302', 'Title': "Solving Recurrence Relations 'Chip & Conquer'", 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-17T05:57:56.653', 'LastEditDate': '2012-07-17T05:57:56.653', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '5', 'OwnerDisplayName': 'user906153', 'PostTypeId': '1', 'Tags': '<asymptotics><recurrence-relation><mathematical-analysis>', 'CreationDate': '2012-04-25T02:16:52.133', 'Id': '2671'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I have a bivariate function like</p>\n\n<p>$\nf(x,y) = \\frac{1}{x^3 \\sqrt{\\pi}}. e^{\\frac{2-x}{x^2}} . y^3 . e^{3.y \\over 3-y}\n$</p>\n\n<p>and I want to find its global maximum over a range of \n$\nx \\in [0, 200] \\text{, and } y \\in [300,50000]\n$</p>\n\n<p>What kind of algorithms I can use to find the global maximum. I want to have keywords for searching and finding materials. </p>\n\n<p>Are there any java library which I can use to solve these kind of problems? </p>\n', 'ViewCount': '406', 'Title': 'Function Maximization in Java', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-18T09:36:15.783', 'LastEditDate': '2012-07-18T01:36:31.670', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2156', 'Tags': '<algorithms><optimization><mathematical-analysis><mathematical-software>', 'CreationDate': '2012-07-13T15:18:16.297', 'Id': '2727'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '802', 'Title': 'What is the meaning of $O(m+n)$?', 'LastEditDate': '2012-08-13T22:22:38.217', 'AnswerCount': '2', 'Score': '26', 'OwnerDisplayName': 'Frank', 'PostTypeId': '1', 'OwnerUserId': '9667', 'FavoriteCount': '5', 'Body': '<p>This is a basic question, but I\'m thinking that $O(m+n)$ is the same as $O(\\max(m,n))$, since the larger term should dominate as we go to infinity? Also, that would be different from $O(\\min(m,n))$. Is that right? I keep seeing this notation, especially when discussing graph algorithms. For example, you routinely see: $O(|V| + |E|)$ (e.g. see <a href="http://algs4.cs.princeton.edu/41undirected/">here</a>).</p>\n', 'Tags': '<terminology><asymptotics><mathematical-analysis><landau-notation>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-13T22:22:38.217', 'CommentCount': '1', 'AcceptedAnswerId': '3150', 'CreationDate': '2012-08-13T15:29:47.517', 'Id': '3149'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Let $f : \\mathbb{R} \\rightarrow \\mathbb{R}$ be a continuous positive function, where $f(n)$ is integer for each integer $n$. Prove or disprove whether the following always holds:</p>\n\n<p>$\\qquad f(n+1) = \\Theta(f(n))$</p>\n', 'ViewCount': '301', 'Title': 'Asymptotic growth rate of $f(n)$ and $f(n+1)$', 'LastEditorUserId': '472', 'LastActivityDate': '2012-08-17T16:01:14.057', 'LastEditDate': '2012-08-17T09:40:13.643', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '5', 'OwnerDisplayName': 'Anirban Ghosh', 'PostTypeId': '1', 'OwnerUserId': '2556', 'Tags': '<asymptotics><mathematical-analysis><landau-notation>', 'CreationDate': '2012-08-16T19:01:06.800', 'Id': '3231'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>So I have this question to prove a statement:</p>\n\n<p>$O(n)\\subset\\Theta(n)$...</p>\n\n<p>I don't need to know how to prove it, just that in my mind this makes no sense and I think it should rather be that $\\Theta(n)\\subset O(n)$. </p>\n\n<p>My understanding is that $O(n)$ is the set of all functions who do no worse than $n$ while $\\Theta(n)$ is the set of all functions that do no better and no worse than n. </p>\n\n<p>Using this, I can think of the example of a constant function say $g(n)=c$. This function will surely be an element of $O(n)$ as it will do no worse than $n$ as $n$ approaches a sufficiently large number. </p>\n\n<p>However, the same function $g$ would not be an element of $\\Theta(n)$ as g does do better than $n$ for large $n$... Then since $g  \\in  O(n)$ and $g \\not\\in \\Theta(n)$, then $O(n)\\not\\in\\Theta(n)$  </p>\n\n<p>So is the question perhaps wrong ? I've learnt it is dangerous to make that assumption and usually I have missed something, I just can't see what it might be in this case. </p>\n\n<p>Any thoughts ? \nThanks a lot.. </p>\n", 'ViewCount': '205', 'Title': 'Is $O$ contained in $\\Theta$?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-18T06:21:28.647', 'LastEditDate': '2012-08-18T06:21:28.647', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '3247', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '2562', 'Tags': '<asymptotics><mathematical-analysis><landau-notation>', 'CreationDate': '2012-08-17T14:53:47.270', 'Id': '3240'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am currently working my way through <a href="http://aofa.cs.princeton.edu/home/" rel="nofollow">An Introduction to Analysis of Algorithms</a> to stay sharp with recurrences as well as learn generating function techniques. However my analyses and the books analyses for the first few sample problems on ordinary generating functions differ. I\'ve checked and rechecked [my work as well as errata on the webpage], but cannot see how the authors made certain leaps. For example:</p>\n\n<p>Given the recurrence $a_{n} = a_{n-1} + 1$ for $n \\geq 1$ with $a_0 = 0$ and letting $A(z) = \\sum_{n \\geq 0} a_n z^n$ I have the following steps:\n$$ \\begin{align*}\n\\sum_{n \\geq 1} a_n z^n &amp;= \\sum_{n \\geq 1} a_{n-1} z^n + \\sum_{n \\geq 1} z^n \\\\\nA(z) - a_0&amp;= zA(z) + \\frac{z}{1-z} \\\\\nA(z)(1 - z) &amp;= \\frac{z}{1-z} + a_0\\\\\nA(z) &amp;=\\frac{z}{(1-z)^2} + \\frac{a_0}{1-z}\n\\end{align*}$$</p>\n\n<p>Since $a_0 = 0$ we just end up with $$A(z) = \\frac{z}{(1-z)^2} \\\\ a_n = n$$.</p>\n\n<p>However, the authors\' derivation is the following:\n$$ \\begin{align*}\n\\sum_{n \\geq 1} a_n z^n &amp;= \\sum_{n \\geq 1} a_{n-1} z^n + \\frac{1}{1-z} \\\\\nA(z) - 1 &amp;= zA(z) + \\frac{1}{1-z} \\\\\nA(z) &amp;= \\frac{z}{(1-z)^2} \\\\\na_n &amp;= n\\\\\n\\end{align*}$$\nAm I crazy, how did they get $A(z) - 1$ in the 2nd step? They do the exact same thing in the next example for $a_n = 2a_{n-1} + 1$. Is this just a typo? I would expect them to subtract $a_0z^0 = a_0$. Where did that $-1$ come from?</p>\n', 'ViewCount': '100', 'Title': 'Error in Generating Function Solution', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-30T22:19:21.597', 'LastEditDate': '2012-08-29T00:18:51.577', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '3376', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '19', 'Tags': '<recurrence-relation><mathematical-analysis><check-my-proof>', 'CreationDate': '2012-08-28T20:47:04.473', 'Id': '3355'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>what is the complexity of below relation</p>\n\n<p>$ T(n) = 2*T(\\sqrt n) + \\log n$</p>\n\n<p>and $T(2) = 1$</p>\n\n<p>Is it $\\Theta (\\log n * \\log \\log n)$ ?</p>\n', 'ViewCount': '213', 'Title': 'what is the complexity of recurrence relation?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-25T17:33:28.563', 'LastEditDate': '2012-08-30T04:58:10.133', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '3363', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2667', 'Tags': '<asymptotics><recurrence-relation><mathematical-analysis>', 'CreationDate': '2012-08-29T11:06:38.823', 'Id': '3362'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>In Big Theta notation used for defining the running time of an algorithm, are the constants $c_1$ and $c_2$ <em>different</em> for every value of $n$?</p>\n\n<p>Definition:</p>\n\n<p>$\\qquad \\displaystyle \\Theta (g(n)) = \\{ f(n): \\exists\\, c_1,c_2,n_0&gt;0. \\forall n \\geq n_0.\\ \\ c_1g(n) \\leq f(n) \\leq c_2g(n) \\}.$</p>\n', 'ViewCount': '216', 'Title': 'Value of constants in Big Theta notation', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-10T14:08:00.560', 'LastEditDate': '2012-09-08T21:39:00.347', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'sai', 'PostTypeId': '1', 'Tags': '<terminology><asymptotics><mathematical-analysis><landau-notation>', 'CreationDate': '2012-09-08T05:00:24.313', 'Id': '3470'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '862', 'Title': 'Changing variables in recurrence relations', 'LastEditDate': '2012-09-09T23:16:22.610', 'AnswerCount': '1', 'Score': '4', 'OwnerDisplayName': 'goooser', 'PostTypeId': '1', 'OwnerUserId': '2768', 'FavoriteCount': '1', 'Body': '<p>Currently, I am self-studying Intro to Algorithms (CLRS) and there is one particular method they outline in the book to solve recurrence relations. </p>\n\n<p>The following method can be illustrated with this example. Suppose we have the recurrence</p>\n\n<p>$$T(n) = 2T(\\sqrt n) + \\log n$$</p>\n\n<p>Initially they make the substitution m = lg(n), and then plug it back in to the recurrence and get:</p>\n\n<p>$$T(2^m) = 2T(2^{\\frac{m}{2}}) + m$$</p>\n\n<p>Up to this point I understand perfectly. This next step is the one that\'s confusing to me.</p>\n\n<p>They now "rename" the recurrence $S(m)$ and let $S(m) = T(2^m)$, which apparently produces</p>\n\n<p>$$S(m) = 2S(m/2) + m$$</p>\n\n<p>For some reason it\'s not clear to me why this renaming works, and it just seems like cheating. Can anyone explain this better? </p>\n', 'Tags': '<asymptotics><recurrence-relation><mathematical-analysis><landau-notation>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-09T23:16:22.610', 'CommentCount': '0', 'CreationDate': '2012-09-09T20:03:08.237', 'Id': '3482'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '620', 'Title': 'Solving $T(n)= 3T(\\frac{n}{4}) + n\\cdot \\lg(n)$ using the master theorem', 'LastEditDate': '2013-09-28T12:36:33.403', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1758', 'FavoriteCount': '1', 'Body': '<p><em>Introduction to Algorithms</em>, 3rd edition (p.95) has an example of how to solve the recurrence</p>\n\n<p>$$\\displaystyle T(n)= 3T\\left(\\frac{n}{4}\\right) + n\\cdot \\log(n)$$</p>\n\n<p>by applying the Master Theorem.</p>\n\n<p>I am very confused by how it is done. So, $a=3, b=4, f(n) = n\\cdot \\log(n)$<br>\nFirst step is to compare $n^{\\log_b a} = n^{\\log_4 3}= O(n^{0.793})$ with $f(n)$.</p>\n\n<p>I have no clue on how they compared this. The book explains: </p>\n\n<blockquote>\n  <p>$f(n) = \\Omega (n^{\\log_4 3+\\epsilon })$, where $\\epsilon \\approx 0.2$, case 3 applies if we can show that the regularity condition holds for $f(n).$ </p>\n</blockquote>\n\n<p>Followed by: </p>\n\n<blockquote>\n  <p>For sufficiently large n, we have that: $af\\left(\\frac{n}{b}\\right) = 3\\left(\\frac{n}{4}\\right)\\log\\left(\\frac{n}{5}\\right) \\le\\left(\\frac{3}{4}\\right)n \\log n = cf(n)~ for~ c=\\frac{3}{4}.$</p>\n</blockquote>\n\n<p>Where did $3\\left(\\frac{n}{4}\\right)$ come from?</p>\n', 'Tags': '<asymptotics><recurrence-relation><landau-notation><mathematical-analysis><master-theorem>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-28T12:36:33.403', 'CommentCount': '0', 'AcceptedAnswerId': '3505', 'CreationDate': '2012-09-11T03:32:38.143', 'Id': '3504'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '1816', 'Title': 'n*log n and n/log n against polynomial running time', 'LastEditDate': '2012-09-16T06:11:06.343', 'AnswerCount': '6', 'Score': '9', 'OwnerDisplayName': 'mihsathe', 'PostTypeId': '1', 'OwnerUserId': '2957', 'FavoriteCount': '2', 'Body': '<p>I understand that $\\Theta(n)$ is faster than $\\Theta(n\\log n)$ and slower than $\\Theta(n/\\log n)$. What is difficult for me to understand is how to actually compare $\\Theta(n \\log n)$ and $\\Theta(n/\\log n)$ with $\\Theta(n^f)$ where $0 &lt; f &lt; 1$.</p>\n\n<p>For example, how do we decide $\\Theta(n/\\log n)$ vs. $\\Theta(n^{2/3})$ or $\\Theta(n^{1/3})$</p>\n\n<p>I would like to have some directions towards proceeding in such cases. Thank you.</p>\n', 'Tags': '<asymptotics><mathematical-analysis><landau-notation>', 'LastEditorUserId': '41', 'LastActivityDate': '2012-09-16T06:11:06.343', 'CommentCount': '0', 'AcceptedAnswerId': '3564', 'CreationDate': '2012-09-08T03:33:33.247', 'Id': '3563'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>The source of this question comes from an undergraduate course I am taking, which covers an introduction to the analysis of algorithms. This is not for homework, but rather a question asked in CLRS.</p>\n\n<p>You have a slow machine running at $x$ MIPS, and a fast machine running at $y$ MIPS. You also have two algorithms of the same class, but different running time complexities: one "slow" algorithm runs at $T(n) = c_1n^2$ whereas a "fast" algorithm runs at $T(n) = c_2n \\log n$.</p>\n\n<p>You execute the slow algorithm on the fast machine, and the fast algorithm on the slow machine. What is the largest value of n such that the fast machine running the slow algorithm beats the slow machine running the fast algorithm?</p>\n\n<p><strong>My solution so far:</strong></p>\n\n<p>Find the set of all $n$ such that $$\\frac{c_2n\\log n}{x} &gt; \\frac{c_1n^2}{y}$$ where $n$ is a natural number.</p>\n\n<p>This is my work thus far:</p>\n\n<p>$$\\{n : \\frac{c_2 n \\log_2 n}{x} &gt; \\frac{c_1 n^2}{y}, n \\in \\mathbb{N}\\} = \\{n : n &lt; \\frac{c_2 y}{c_1 x} \\log_2 n, n \\in \\mathbb{N}\\}$$</p>\n\n<p>The only solution that comes to mind now is to plug-n-chug all values of $n$ until I find the first n where </p>\n\n<p>$$n &lt; \\frac{c_2y}{c_1x}\\log(n)$$ </p>\n\n<p>no longer holds.</p>\n', 'ViewCount': '288', 'Title': 'Given a fast and a slow computer, at what sizes does the fast computer running a slow algorithm beat the slow computer running a fast algorithm?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-19T10:41:35.640', 'LastEditDate': '2012-09-19T10:07:43.623', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '2867', 'Tags': '<algorithms><algorithm-analysis><runtime-analysis><mathematical-analysis>', 'CreationDate': '2012-09-18T04:09:39.707', 'Id': '4600'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>We have a set X of N elements. We want to get a new set X' having a size M &lt; N.</p>\n\n<pre><code>Choose a first element x from X and put it in X'\nfor each element x in (X - X')\n  Let x' the element from X' which is the closest to x (that is x' = argmin distance(x, x') for all x' in X')\n  d = distance(x, x')\n  if ( uniform_random([0,1]) &lt; d / f )\n     add x to X'\n</code></pre>\n\n<p>How can I choose the value f such that the size of the set X' at the end will be for instance the half of the size of X (that is, M approximates or equals N/2). I suppose that I should choose f such that the probability d / f equals 1/2 (or approximates 1/2 for most values of d), but how to do that ?</p>\n\n<p>Additional details (that are not necesarily usefull for this question): the elements are actually vectors, and the distance between two vectors is the euclidean distance.</p>\n\n<p>Note that d is not a constant (while f is a constant that I want to fix). d depends on the distance between each element x and its closest element x', so d is not always the same.</p>\n\n<p>Suppose that the order in which we test the elements x is always random. For any set X, if we choose the value of f relatively small then we will get a relatively hight number of elements in the final set X', if we choose the value of f relatively big we will get a relatively small number of elements in the final set X'. If I experimentally vary the value of f many times I can always (for any set X) find a value of f for which the final number of elements in X' approaches N/2. So experimentally I can find a good value for f if I test many times which different values of f, but I want to determine it heuristically (not by testing many times and varying f).</p>\n\n<p><strong>EDIT:</strong>\nBy the way, the only one method which seems to give an acceptable results is: let mean_d the mean distance of each x to its nearest x'. We put f = 2mean_d, thus the probability d/f = d/(2mean_d) usually approximate 1/2 if the most of distances d are not far from mean_d. We also put f = (2mean_d)+d' where d' depends on how many distances are higher than mean_d, or f = (2mean_d)-d' where d' depends on how many distances are less than mean_d. Does this make sense ? Do you think it can be improved ?</p>\n", 'ViewCount': '36', 'Title': 'Heuristically determine a value f such that a probability d/f approaches 1/2', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-21T13:07:23.583', 'LastEditDate': '2012-09-21T13:07:23.583', 'AnswerCount': '3', 'CommentCount': '10', 'Score': '0', 'OwnerDisplayName': 'user995434', 'PostTypeId': '1', 'OwnerUserId': '2895', 'Tags': '<probability-theory><mathematical-analysis><heuristics><statistics>', 'CreationDate': '2012-09-17T18:57:42.773', 'Id': '4631'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': u'<p>I have been reading <a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms" rel="nofollow"><em>Introduction to Algorithms</em> by Cormen et al.</a> and I\'m reading <a href="http://books.google.co.uk/books?id=NLngYyWFl_YC&amp;pg=PA73" rel="nofollow">the statement of the Master theorem starting on page 73</a>. In case 3 there is also a regularity condition that needs to be satisfied to use the theorem:</p>\n\n<blockquote>\n  <p>... 3. If </p>\n  \n  <p>$\\qquad \\displaystyle f(n) = \\Omega(n^{\\log_b a + \\varepsilon})$</p>\n  \n  <p>for some constant $\\varepsilon &gt; 0$ and if</p>\n  \n  <p>$\\qquad \\displaystyle af(n/b) \\leq cf(n)$ \xa0\xa0\xa0\xa0\xa0[<strong>this is the regularity condition</strong>]</p>\n  \n  <p>for some constant $c &lt; 1$ and for all sufficiently large $n$, then .. </p>\n</blockquote>\n\n<p>Can someone tell me why the regularity condition is needed? How does the theorem fail if the condition is not satisfied?</p>\n', 'ViewCount': '2056', 'Title': 'Why is there the regularity condition in the master theorem?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-04T09:41:58.807', 'LastEditDate': '2012-10-04T09:41:58.807', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '7', 'OwnerDisplayName': 'GrowinMan', 'PostTypeId': '1', 'Tags': '<algorithms><asymptotics><mathematical-analysis><landau-notation><master-theorem>', 'CreationDate': '2012-10-02T03:54:52.210', 'FavoriteCount': '2', 'Id': '4854'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'ViewCount': '299', 'Title': 'How to prove $(n+1)! = O(2^{(2^n)})$', 'LastEditDate': '2012-10-16T08:03:18.780', 'AnswerCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '3004', 'FavoriteCount': '2', 'Body': "<p>I am trying to prove $(n+1)! = O(2^{(2^n)})$. I am trying to use L'Hospital rule but I am stuck with infinite derivatives.</p>\n\n<p>Can anyone tell me how i can prove this?</p>\n", 'Tags': '<asymptotics><mathematical-analysis><landau-notation>', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-10-28T07:23:20.603', 'CommentCount': '1', 'AcceptedAnswerId': '6080', 'CreationDate': '2012-10-14T22:13:27.907', 'Id': '6075'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>What's the use of studying trigonometry in computer science? I mean, is it essential? Does it have a specific application in computer science? Because I can't seem to muster enough motivation for learning it.</p>\n", 'ViewCount': '1264', 'Title': 'Trigonometry in computer science', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-09T11:23:02.030', 'LastEditDate': '2012-10-28T11:17:56.217', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '6332', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2297', 'Tags': '<education><mathematical-analysis><applied-theory>', 'CreationDate': '2012-10-27T02:41:42.993', 'Id': '6327'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am trying to understand summation for amortization analysis of a hash-table from a <a href="http://videolectures.net/mit6046jf05_leiserson_lec13/" rel="nofollow">MIT lecture video</a> (at time 16:09). </p>\n\n<p>Although you guys don\'t have to go and look at the video, I feel that the summation he does is wrong so I will attach the screenshot of the slide.</p>\n\n<p><img src="http://i.stack.imgur.com/EBRfs.jpg" alt="MIT Lecture Slide"></p>\n', 'ViewCount': '138', 'Title': 'Why is $\\sum_{j=0}^{\\lfloor\\log (n-1)\\rfloor}2^j$ in $\\Theta (n)$?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-05T17:15:47.033', 'LastEditDate': '2012-11-05T17:15:47.033', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '6474', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<algorithms><data-structures><algorithm-analysis><mathematical-analysis><discrete-mathematics>', 'CreationDate': '2012-11-04T16:32:11.537', 'Id': '6473'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I'm looking for something i would call rating functions.\nI'm searching for some literature about this concept.\nI'm not really sure about the terminology, but what I mean should be pretty obvious.</p>\n\n<p>A type of function that returns a rating of some input.</p>\n\n<p>Lets have a function that gets some input and returns a number between 0 and 1 as a rating, where 0 is bad and 1 is great. Everything between is well between bad and great depending.</p>\n\n<p>Lets assume inputs are just numbers</p>\n\n<p>$f\\colon \\mathbb{N} \\longrightarrow [0,1]$</p>\n\n<p>I would like if I have several rating functions be able to compose them.\nFor example if I have the rating functions $r_1$, $r_2$ I would like to compose both to a new rating function that returns a new rating in dependency to $r_1$ and $r_2$</p>\n\n<p>Now I'm looking for literature, but was unable to find any.\nCan somebody hint me into the correct direction?\nThe correct name for the concept I'm looking for would be great.</p>\n\n<h2>Edit</h2>\n\n<p>I want to implement various Rating Functions and want to combine them</p>\n\n<p>One functions could be</p>\n\n<pre><code>alwaysPerfect = (x) -&gt; 1\nalwaysBad = (x) -&gt; 0\nisOdd = (x) -&gt; x%2\ndistanceToOne = (x) -&gt;\n  x = 2 if x is 0\n  1/abs(x)\n</code></pre>\n\n<p>Anyone could implement this functions, but the contract for this functions would be to always return a value between 0 and 1</p>\n\n<p>I need to evaluate some data with various evaluation conditions. Writing these evaluation seperate small functions and combine them seems to be more clearer than writing one big function that does all the evalauting</p>\n", 'ViewCount': '49', 'Title': 'Looking for Rating Functions', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-11T09:01:17.707', 'LastEditDate': '2013-04-11T23:03:24.010', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7684', 'Tags': '<machine-learning><mathematical-analysis><data-mining>', 'CreationDate': '2013-04-11T16:02:37.263', 'Id': '11233'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': "<p>I have a real function $f:\\mathbb{{R}}^{d}\\mapsto\\mathbb{R}$, where\n$d&gt;1$. The question is how to compute the level set $A=\\left\\{ \\theta:f\\left(\\theta\\right)\\geq a\\right\\} $.\nI am a statistician knowing very few things about computer science.\nI would appreciate very much if anyone could suggest some reference, methods\nand/or alogirthms.</p>\n\n<p>In my problem, $f\\left(\\theta\\right)=\\sum_{i=1}^{N}\\log g\\left(\\mathbf{z}_{i};\\theta\\right)$,\nwhere $g\\left(\\mathbf{z}_{i};\\theta\\right)$ is a probability density\nfunction of $\\mathbf{z}_{i}$ parameterized by a vector of parameters\n$\\theta$. $\\mathbf{z}_1,\\ldots, \\mathbf{z}_N$ are observed samples. For example, $g\\left(\\mathbf{z}_{i};\\theta\\right)$ is the density function of\na normal distribution with variance $1$\n$$\ng\\left(\\mathbf{z}_{i};\\theta\\right)=\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{\\left(y_{i}-\\mathbf{x}_{i}'\\theta\\right)^{2}}{2}\\right).\n$$\nHere $\\mathbf{z}_{i}=\\left(y_{i},\\mathbf{x}_{i}\\right)'$.</p>\n", 'ViewCount': '60', 'Title': 'How to compute a level set $A=\\left\\{ \\theta:f\\left(\\theta\\right)\\geq a\\right\\} $', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-20T21:29:32.707', 'LastEditDate': '2013-07-20T20:50:44.000', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9264', 'Tags': '<algorithms><probability-theory><mathematical-analysis><real-numbers>', 'CreationDate': '2013-07-20T19:24:23.690', 'Id': '13365'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I am a starting Ph.D. student in computer science, and I am trying to understand some classic game-theory papers, such as those by Nash, Kalai and Smorodinsky.   But I find it hard to understand the mathematical parts. It seems that these papers were written by mathematicians, for mathematicians.</p>\n\n<p>Can you recommend a book that explains the mathematical preliminaries of game theory, to people without extensive mathematical background?</p>\n', 'ViewCount': '189', 'Title': 'High maths for game theory', 'LastActivityDate': '2013-09-16T10:42:28.270', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '14332', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<reference-request><game-theory><mathematical-analysis>', 'CreationDate': '2013-09-13T13:43:55.123', 'FavoriteCount': '3', 'Id': '14289'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>What does it mean to multiply or divide polynomials?</p>\n\n<p>I have used them so many times, in error correcting codes, cryptography, etc. but it was never clear to me what would be a graphical representation/ interpretation.</p>\n\n<p>I have always pondered what did it mean when someone multiplies a line with a curve to get another hyperplane of a bigger dimension.</p>\n\n<p>I know the formulae and properties of polynomial multiplication &amp; division, I am specifically looking for a graphical/algebraic interpretation of it.</p>\n', 'ViewCount': '109', 'Title': 'What does it mean to multiply or divide polynomials?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-20T03:52:30.580', 'LastEditDate': '2013-09-18T09:15:33.427', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '9736', 'Tags': '<mathematical-analysis><intuition><polynomials>', 'CreationDate': '2013-09-18T00:11:09.867', 'Id': '14393'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>From Introduction to Algorithms(pg 47-49), I need help in understanding the following paragraph:</p>\n\n<p>The number of anonymous functions in an expression is understood to be equal to the number of times the asymptotic notation appears. For example, in the expression:\n$$ \\sum_{i=1}^{n} O(i)$$\nthere is only a single anonymous function(a function of $i$). This expression is thus not the same as $O(1) + O(1) + O(1) + ... + O(n)$.</p>\n\n<p>Does this make sense? What are we summing exactly? How can we talk about a function of $i$ here?</p>\n', 'ViewCount': '16', 'ClosedDate': '2013-12-13T07:37:14.310', 'Title': 'Big O notation in a summation', 'LastActivityDate': '2013-12-13T06:49:58.667', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12083', 'Tags': '<asymptotics><mathematical-analysis>', 'CreationDate': '2013-12-13T06:49:58.667', 'Id': '18947'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>Suppose $\\{a_n\\}$ is a sequence with moment generating function $A(z)=\\sum_{k \\ge 0} a_kz^k$.</p>\n\n<p>Can a sequence $\\{b_n\\}$ with $b_n \\neq a_n$ for at least one $n\\in \\mathbb N$ have the same moment generating function as $\\{a_n\\}$, that is $B(z)=A(z) \\ \\forall z$.</p>\n\n<p>This is equivalent to: Is the moment generating function for a sequence $\\{a_n\\}$ unique ? </p>\n', 'ViewCount': '22', 'ClosedDate': '2014-03-22T22:59:50.263', 'Title': 'Is the moment generating function for a sequence $\\{a_n\\}$ unique?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-22T22:56:56.353', 'LastEditDate': '2014-03-22T22:56:56.353', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8264', 'Tags': '<discrete-mathematics><mathematical-analysis>', 'CreationDate': '2014-03-22T16:00:47.030', 'Id': '22938'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<blockquote>\n  <p>Given $n+1$ control points, B-spline blending functions are polynomials\n  of degree $d-1$, $(1&lt;d\\leq n+1)$. </p>\n</blockquote>\n\n<p>This much is easy to comprehend.\n<br/>Now comes the part I am not able to make any sense of. </p>\n\n<blockquote>\n  <p>Each polynomial function is defined over $d$ subintervals of the total\n  range of $u$. The selected set of subinterval endpoints $u_j$ is referred\n  to as a <strong>knot vector</strong>.</p>\n</blockquote>\n\n<p>What is the purpose of <strong>knot vector</strong>? What is its physical significance?</p>\n', 'ViewCount': '17', 'ClosedDate': '2014-04-24T09:57:16.040', 'Title': 'Concept of knots in B-splines', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-24T06:34:16.397', 'LastEditDate': '2014-04-24T06:34:16.397', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10124', 'Tags': '<terminology><mathematical-analysis>', 'CreationDate': '2014-04-23T18:19:09.773', 'Id': '24053'}}{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,{'Body': '<p>I\'m following Jeff heatons book \'Introduction to Neural Networks with Java\'.\nTo get node deltas, we need to calculate $f\'(sum)$. In the very first row for <a href="http://www.heatonresearch.com/wiki/Backpropagation" rel="nofollow">Training Element #1</a>, we need to compute $f\'(1.13) \\cdot 0.25$ which Heaton evaluates to $0.045$. </p>\n\n<p>Using my calculator, I get $f\'(1.13)=-0.13$ (derivative of sigmoid activation function), then I multiply by $0.25$ to get $-0.0325$. I\'ve been trying to figure out for days how heaton does his calculation but no success yet. Kindly assist.</p>\n', 'ViewCount': '45', 'Title': 'Problem with derivative of sigmoid activation function', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-24T06:32:26.210', 'LastEditDate': '2014-04-24T06:32:26.210', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24071', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '17031', 'Tags': '<mathematical-analysis>', 'CreationDate': '2014-04-24T00:48:01.533', 'Id': '24070'}}