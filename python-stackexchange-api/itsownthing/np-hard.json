290:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let\'s assume that $\\mathsf{P} \\neq \\mathsf{NP}$. $\\mathsf{NPI}$ is the class of problems in $\\mathsf{NP}$ which are neither in $\\mathsf{P}$ nor in $\\mathsf{NP}$-hard. You can find a list of problems conjectured to be $\\mathsf{NPI}$ <a href="http://cstheory.stackexchange.com/questions/79/problems-between-p-and-npc/">here</a>. </p>\n\n<p><a href="http://cstheory.stackexchange.com/questions/799/generalized-ladners-theorem">Ladner\'s theorem</a> tells us that if $\\mathsf{NP}\\neq\\mathsf{P}$ then there is an infinite hierarchy of $\\mathsf{NPI}$ problems, i.e. there are $\\mathsf{NPI}$ problems which are harder than other $\\mathsf{NPI}$ problems.</p>\n\n<blockquote>\n  <p>I am looking for candidates of such problems, i.e. I am interested in pairs of problems<br>\n  - $A,B \\in \\mathsf{NP}$,<br>\n  - $A$ and $B$ are conjectured to be $\\mathsf{NPI}$,<br>\n  - $A$ is known to reduce to $B$,<br>\n  - but there are no known reductions from $B$ to $A$.</p>\n</blockquote>\n\n<p>Even better if there are arguments for supporting these, e.g. there are results that $B$ does not reduce to $A$ assuming some conjectures in complexity theory or cryptography.</p>\n\n<p>Are there any <em>natural</em> examples of such problems?</p>\n\n<p>Example: Graph Isomorphism problem and Integer Factorization problem are conjectured to be in $\\mathsf{NPI}$ and there are argument supporting these conjectures. Are there any decision problems harder than these two but not known to be $\\mathsf{NP}$-hard?</p>\n', 'ViewCount': '833', 'Title': 'Natural candidates for the hierarchy inside NPI', 'LastEditorUserId': '41', 'LastActivityDate': '2013-01-27T05:50:00.267', 'LastEditDate': '2013-01-27T05:50:00.267', 'AnswerCount': '1', 'CommentCount': '18', 'Score': '16', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-03-07T07:33:15.413', 'Id': '78'},291:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There is a reduction in Sipser\'s book "Introduction to the theory of computation" on page 286 from 3SAT to Hamiltonian path problem. </p>\n\n<blockquote>\n  <p>Is there a simpler reduction?</p>\n</blockquote>\n\n<p>By simpler I mean a reduction that would be easier to understand (for students).</p>\n\n<blockquote>\n  <p>Is there a reduction that uses linear number of variables?</p>\n</blockquote>\n\n<p>The reduction in Sipser uses $O(kn)$ variables where $k$ is the number of clauses and $n$ is the number of variables. In other words, it is possible for the reduction to blow the size from $s$ to $O(s^2)$. Is there a simple reduction where the size of the output of the reduction is linear in the size of its input? </p>\n\n<p>If it is not possible, is there a reason? Would that imply an unknown result in complexity/algorithms?</p>\n', 'ViewCount': '1482', 'Title': 'Easy reduction from 3SAT to Hamiltonian path problem', 'LastActivityDate': '2012-07-12T03:26:42.550', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '2701', 'Score': '14', 'PostTypeId': '1', 'OwnerUserId': '41', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-03-11T20:22:28.390', 'FavoriteCount': '3', 'Id': '222'},292:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '2078', 'Title': "Why hasn't there been an encryption algorithm that is based on the known NP-Hard problems?", 'LastEditDate': '2012-03-15T07:04:19.330', 'AnswerCount': '4', 'Score': '51', 'PostTypeId': '1', 'OwnerUserId': '5', 'FavoriteCount': '8', 'Body': "<p>Most of today's encryption, such as the RSA, relies on the integer factorization, which is not believed to be a NP-hard problem, but it belongs to BQP, which makes it vulnerable to quantum computers. I wonder, why has there not been an encryption algorithm which is based on an known NP-hard problem. It sounds (at least in theory) like it would make a better encryption algorithm than a one which is not proven to be NP-hard.</p>\n", 'Tags': '<complexity-theory><np-hard><encryption><cryptography>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-22T00:58:17.060', 'CommentCount': '1', 'AcceptedAnswerId': '364', 'CreationDate': '2012-03-14T08:02:26.627', 'Id': '356'},293:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '754', 'Title': 'Decision problems vs "real" problems that aren\'t yes-or-no', 'LastEditDate': '2012-04-02T21:58:54.973', 'AnswerCount': '3', 'Score': '22', 'PostTypeId': '1', 'OwnerUserId': '157', 'FavoriteCount': '6', 'Body': '<p>I read in many places that some problems are difficult to approximate (it is  <a href="https://en.wikipedia.org/wiki/Hardness_of_approximation"><strong>NP-hard</strong> to approximate</a>  them). But approximation is not a decision problem: the answer is a real number and not Yes or No. Also for each desired approximation factor, there are many answers that are correct and many that are wrong, and this changes with the desired approximation factor!</p>\n\n<p>So how can one say that this problem is NP-hard?</p>\n\n<p><em>(inspired by the second bullet in <a href="http://cs.stackexchange.com/q/423/157">How hard is counting the number of simple paths between two nodes in a directed graph?</a>)</em></p>\n', 'Tags': '<complexity-theory><time-complexity><np-hard><approximation>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-09-29T16:31:13.863', 'CommentCount': '0', 'AcceptedAnswerId': '476', 'CreationDate': '2012-03-17T18:28:41.347', 'Id': '473'},294:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '382', 'Title': 'Proving that directed graph diagnosis is NP-hard', 'LastEditDate': '2012-03-27T13:53:00.233', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '766', 'FavoriteCount': '1', 'Body': "<p>I have a homework assignment that I've been bashing my head against for some time, and I'd appreciate any hints. It is about choosing a known problem, the NP-completeness of which is proven, and constructing a reduction from that problem to the following problem I'll call DGD (directed graph diagnosis).</p>\n\n<h3>Problem</h3>\n\n<blockquote>\n  <p>An instance of DGD $(V,E,k)$ consist of vertices $V = I \\overset{.}{\\cup} O \\overset{.}{\\cup} B$, directed edges $E$ and a positive integer $k$. There are three types of vertices: vertices with only incoming edges $I$, vertices with only outgoing edges $O$ and vertices with both incoming and outgoing edges $B$. Let furthermore $D=O\\times I$. </p>\n  \n  <p>Now, the problem is whether we can cover all nodes with at most $k$ elements of $D$, i.e.</p>\n  \n  <p>$\\qquad \\displaystyle \\exists\\,S\\subseteq D, |S|\\leq k.\\ \\forall\\, v\\in V.\\ \\exists\\,(v_1,v_2) \\in S.\\ v_1 \\to^* v \\to^* v_2 $</p>\n  \n  <p>where $a\\to^* b$ means that there is a directed path from $a$ to $b$.</p>\n</blockquote>\n\n<hr>\n\n<p>I think that the Dominating Set problem is the one I should be reducing from, because this too is concerned about covering a subset of nodes with another subset. I tried creating a DGD instance by first creating two nodes for each element of the dominating set, copying all edges, and then setting the $k$ of the DGD instance equal to that of the DS instance.</p>\n\n<p>Suppose a simple DS-instance with nodes $1$, $2$ and $3$ and edges $(1,2)$ and $(1,3)$. This is a yes-instance with $k = 1$; the dominating set in this case consists of only node $1$. Reducing with the method just described, this would lead to a DGD instance with two paths $(1 \\to 2 \\to 1&#39;)$ and $(1 \\to 3 \\to 1&#39;)$; to cover all nodes, just one pair $(1, 1&#39;)$ would be sufficient. This would have worked perfectly, were it not for the fact that the dominating set of the DS-instance cannot, of course, be determined in polynomial time, which is a requirement here.</p>\n\n<p>I have found that there are many good-looking ways to transform the edges and vertices when reducing, but my problem is somehow expressing DGD's $k$ in terms of DS's $k$. Dominating Set seemed a fitting problem to reduce from, but because of this I think that maybe I should try to reduce from a problem that has no such $k$?</p>\n", 'Tags': '<complexity-theory><np-hard><graph-theory>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-25T16:54:54.900', 'CommentCount': '2', 'AcceptedAnswerId': '812', 'CreationDate': '2012-03-27T07:03:35.207', 'Id': '811'},295:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '299', 'Title': 'A continuous optimization problem that reduces to TSP', 'LastEditDate': '2012-04-09T03:13:54.610', 'AnswerCount': '1', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '898', 'FavoriteCount': '0', 'Body': '<p>Suppose I am given a  finite set of points $p_1,p_2,..p_n$ in the plane, and asked to draw a twice-differentiable curve $C(P)$ through the $p_i$\'s, such that its perimeter is as small as possible. Assuming $p_i=(x_i,y_i)$ and $x_i&lt;x_{i+1}$, I can formalize this problem as:</p>\n\n<p><i> Problem 1 (edited in response to Suresh\'s comments) </i>Determine  $C^2$ functions $x(t),y(t)$ of a parameter $t$ such that the arclength $ L = \\int_{[t \\in 0,1]} \\sqrt{x&#39;^2+y&#39;^2}dt$  is minimized, with $x(0) = x_1, x(1) = x_n$ and for all $t_i: x(t_i) = x_i$, we have $y(t_i)=y_i)$. </p>\n\n<blockquote>\n  <p>How do I prove (or perhaps refute) that Problem 1 is NP-hard?</p>\n</blockquote>\n\n<p><i> Why I suspect NP-hardness </i>   Suppose the $C^2$ assumption is relaxed. Evidently, the function of minimal arclength is the Travelling Salesman tour of the $p_i$\'s.  Perhaps the $C^2$ constraint only makes the problem much harder?</p>\n\n<p><i> Context </i> A variant of this problem was posted on <a href="http://math.stackexchange.com/questions/23181/extremal-curve-passing-through-a-set-of-points">MSE</a>. It didn\'t receive an answer both there and on <a href="http://mathoverflow.net/questions/58885/extremal-curves-with-a-should-pass-through-constraint" rel="nofollow">MO</a>. Given that it\'s nontrivial to solve the problem, I want to establish how hard it is. </p>\n', 'Tags': '<complexity-theory><np-hard><optimization><computable-analysis>', 'LastEditorUserId': '898', 'LastActivityDate': '2012-04-10T00:58:18.347', 'CommentCount': '19', 'AcceptedAnswerId': '1185', 'CreationDate': '2012-04-08T20:08:11.753', 'Id': '1142'},296:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem in my mind, I think it is a NPC problem but I don\'t know how to prove it.</p>\n\n<p>Here is the problem:</p>\n\n<p>There are <strong>k</strong> islands in a very big lake, and there are <strong>n</strong>  fan-shaped pontoons. Those pontoons are in the same size but have different initial directions and are in different original positions in the lake. The pontoons can rotate freely around its center of mass, and no cost associated with rotation.</p>\n\n<p>Now we need to move those pontoons so that all islands in the lake can be connected. We can guarantee the number of pontoons is enough to connect all the islands.</p>\n\n<p><strong>[Note]: We cannot reuse the pontoons!!</strong></p>\n\n<p>The task is to find the solution having the minimum total distance of the moving pontoons in order to make all islands connected. The distance of moving one pontoon can be calculated as the distance between the center of mass\'s original position and its deployed position.</p>\n\n<p>To make it clear, I have drawn such a figure. Suppose we have 3 islands A, B and C. They are located somewhere in the lake. And I have several fan-shaped pantoons. Now the solution is to find a minimum moving distance summation to connect A, B and C, shown in bottom part of the figure. Hope it help understand the problem. :)</p>\n\n<p><img src="http://i.stack.imgur.com/G6Hop.jpg" alt="enter image description here"></p>\n\n<p>It seems that the problem is a NPC one, but I don\'t know to prove it. Can anyone help me on this? </p>\n', 'ViewCount': '274', 'Title': 'Is connecting islands with pontoons NP-complete?', 'LastEditorUserId': '568', 'LastActivityDate': '2012-06-08T12:27:46.433', 'LastEditDate': '2012-06-08T12:27:46.433', 'AnswerCount': '3', 'CommentCount': '8', 'Score': '9', 'OwnerDisplayName': 'little-eyes', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2012-06-06T18:27:50.300', 'FavoriteCount': '1', 'Id': '2244'},297:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am aware that for a problem to be considered NP-Hard, any problem in NP must be reduceable to your problem (problem which you are trying to prove is NP-Hard).</p>\n\n<p>Let's assume that you have proven that a problem <code>Y</code> is NP-Hard, and you have a problem <code>X</code> which you know is in NP, and you would like to solve.</p>\n\n<p>To solve <code>X</code>, which of the following reductions would be carried out?</p>\n\n<ol>\n<li>X -> Y</li>\n<li>Y -> X</li>\n</ol>\n\n<p>Which of the following? i.e. would you reduce <code>X</code> to <code>Y</code> or vice-versa, if you would like to solve <code>X</code> which is in NP, and <code>Y</code> which is NP-Hard?</p>\n", 'ViewCount': '222', 'Title': 'Solve a problem through reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2012-06-10T12:45:26.697', 'LastEditDate': '2012-06-10T11:29:36.043', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '1814', 'Tags': '<algorithms><complexity-theory><reductions><np-hard>', 'CreationDate': '2012-06-10T08:06:59.850', 'Id': '2312'},298:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Equipartition Problem:</p>\n\n<p>Instance: $2n$ positive integers $x_1,\\dots,x_{2n}$ such that their sum is even. Let $B$ denote half their sum, so that $\\sum x_{i} = 2B$.</p>\n\n<p>Query: Is there a subset $I \\subseteq [2n]$ of size $|I| = n$ such that $\\sum_{i \\in I} x_{i} = B$?</p>\n\n<p>Can the <a href="http://en.wikipedia.org/wiki/Partition_problem" rel="nofollow">partition problem</a> - same as the above but without the restriction on $|I|$ -  be reduced to the above problem ?</p>\n', 'ViewCount': '375', 'Title': 'Reduction to equipartition problem from the partition problem?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-06-22T09:48:20.123', 'LastEditDate': '2012-06-12T18:36:52.223', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '5', 'OwnerDisplayName': 'Shalabh', 'PostTypeId': '1', 'OwnerUserId': '2882', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2012-03-23T16:58:13.290', 'Id': '2347'},299:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>If $L_1$ is NP-hard, $L_1 \\times L_2$ is NP-hard for every $L_2 \\neq \\emptyset$, where</p>\n\n<p>$\\qquad \\displaystyle L_1 \\times L_2 = \\{(w_1,w_2) \\mid w_1 \\in L_1, w_2 \\in L_2\\}$</p>\n\n<p>Is it true or false and why?</p>\n\n<p>I can't prove it but I also don't find counter example.</p>\n", 'ViewCount': '110', 'Title': 'Is NP-hard closed against cartesian product with arbitrary languages?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-04T12:39:56.033', 'LastEditDate': '2012-07-04T12:39:56.033', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'OwnerDisplayName': 'user9868', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-06-25T07:30:34.923', 'Id': '2489'},2910:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given Graphs $G=(V_1,E_1)$ and $H=(V_2,E_2)$. Can a graph isomorphic to $H$ be obtained from $G$ by a sequence of edge contractions ? We know this problem is NP-complete. What about if only a subset of edges are valid for contraction at each step of the sequence. For example when deciding the first edge for contraction, there are only a subset $E'\\subset E_1$ of edges eligible for contraction. If you pick $e\\in E'$ for contraction and get an intermediate graph then when deciding the second edge for contraction in this intermediate graph there are a subset $E''$ of edges eligible for contraction and so on. </p>\n\n<p>Does this problem stay NP-complete ? </p>\n", 'ViewCount': '267', 'Title': 'NP-completeness of graph isomorphism through edge contractions with an edge validity condition', 'LastEditorUserId': '39', 'LastActivityDate': '2012-07-09T09:35:13.907', 'LastEditDate': '2012-07-09T09:35:13.907', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2090', 'Tags': '<complexity-theory><computability><graphs><np-complete><np-hard>', 'CreationDate': '2012-07-06T02:40:35.660', 'Id': '2634'},2911:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Given an undirected graph, I define a structure called <em>k-key</em> as a path containing $k$ vertices which are connected to a simple cycle which contains $k$ vertices as well.</p>\n\n<p>Here's the <em>k-key problem</em>: given an undirected graph $G$ and a number $k$, decide whether $G$ contains k $k$-key.</p>\n\n<p>I want to show that the k-key problem is a NP-complete.</p>\n\n<p>I want to make a reduction from the 'Undirected Hamiltonian Cycle' problem in which the input is a graph, and the problem is to decide whether it contains a Hamiltonian path. I already know that this problem is NP-complete. The input for the reduction would be an undirected graph $G$ and the output is $G'$ graph and $k$. Can you please help me understand what manipulation I should do to the original graph in order to show this reduction? And why should it work?</p>\n", 'ViewCount': '129', 'Title': 'The $\\text{k-key}$ problem', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-22T09:50:38.897', 'LastEditDate': '2012-07-17T05:56:17.920', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2678', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2126', 'Tags': '<complexity-theory><np-complete><reductions><np-hard>', 'CreationDate': '2012-07-10T18:16:52.777', 'Id': '2676'},2912:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a TSP instance $T$, decide whether changing the city coordinates by adding a vector of coordinates $v$ will change the optimal TSP objective by atleast $x$. The city coordinates are integers.</p>\n\n<p>The problem is in PSPACE but even the verification problem seems to be NP-hard. Is that true?</p>\n\n<p>If the verification problem is NP-hard, what exact complexity class does this problem belong to?</p>\n', 'ViewCount': '192', 'Title': 'What complexity class does this variation of traveling salesman problem belong to?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:04:38.777', 'LastEditDate': '2013-06-06T15:04:38.777', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2160', 'Tags': '<complexity-theory><reductions><np-hard><decision-problem><traveling-salesman>', 'CreationDate': '2012-07-13T23:45:51.823', 'Id': '2737'},2913:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Consider a sequence of $n$ positive real numbers $a_0,\\ldots,a_{n-1}$. Let $S_n$ be the set of permutations on $\\{0,\\ldots,n-1\\}$. </p>\n\n<p>We are interested to find</p>\n\n<p>$$\n\\max_{\\pi\\in S_n}\\left( \\min_{i=0}^{n-1}\\left( \\frac{a_{\\pi(i)}}{a_{\\pi(i-1)}} + \\frac{a_{\\pi(i)}}{a_{\\pi(i+1)}}\\right)\\right)\n$$</p>\n\n<p>The addition and subtraction in $\\pi$ is under mod n.</p>\n\n<p>It might be easier to consider the more general problem, where $b_0,\\ldots,b_{n-1}$ is a sequence of positive real numbers.</p>\n\n<p>$$\n\\max_{\\pi\\in S_n}\\left( \\min_{i=0}^{n-1}\\left( a_{\\pi(i)}(b_{\\pi(i-1)}+b_{\\pi(i+1)} )\\right)\\right)\n$$</p>\n\n<p>Is this problem $NP$-hard? I feel this problem is $NP$-Hard but I don't see any obvious reductions.</p>\n\n<p>The greedy approach: sort the numbers, then insert them one by one into the list such that it maximizes the minimum of the sum of quotients. Turns out to be not optimal.</p>\n\n<pre><code>Greedy Smallest First\n[5, 4, 4] 1.8\n[5, 5, 4, 4] 1.8\n[5, 5, 5, 4, 4] 1.8\n[5, 9, 5, 5, 4, 4] 1.5555555555555556\nGreedy: [5, 9, 5, 5, 4, 4] 1.5555555555555556\nBest: [4, 5, 4, 5, 9, 5] 1.6\n\nGreedy Largest First\n[5, 22, 20] 0.4772727272727273\n[4, 5, 22, 20] 1\n[4, 4, 5, 22, 20] 1.2\n[4, 3, 4, 5, 22, 20] 1.4772727272727273\n\nGreedy: [4, 3, 4, 5, 22, 20] 1.4772727272727273\nBest: [3, 4, 5, 20, 22, 4] 1.5\n</code></pre>\n", 'ViewCount': '114', 'Title': 'Find a permutation that maximize the minimum of $\\frac{a_n}{a_{n-1}} + \\frac{a_n}{a_{n+1}}$', 'LastEditorUserId': '220', 'LastActivityDate': '2012-08-02T20:31:07.420', 'LastEditDate': '2012-08-02T20:31:07.420', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2012-08-02T17:47:23.803', 'FavoriteCount': '3', 'Id': '3007'},2914:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Say we're given $n$ sets and the size of their union is $m$. We would like to construct a small set which contains at least $k$ of the $n$ given sets. </p>\n\n<p>Lets assume that $m$ is less than some polynomial in $n$, i.e.: $m &lt; P(n)$. In this case is there an efficient (polynomial) algorithm for the optimization problem:</p>\n\n<p>Find the smallest set which contains at least $k$ of the $n$ given sets.</p>\n", 'ViewCount': '147', 'Title': 'Find small superset of at least k of n given sets', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:27:49.990', 'LastEditDate': '2013-05-24T03:27:49.990', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '2610', 'Tags': '<complexity-theory><np-complete><np-hard><polynomial-time>', 'CreationDate': '2012-08-24T21:24:54.527', 'FavoriteCount': '1', 'Id': '3321'},2915:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>For an assignment I have to program an application to schedule conversations. \nThere is an event where representatives of the elementary schools talks with the representatives of high schools. They will talk about the students that will be transferred to the highschool. There are approximately 200 elementary schools and 40 high schools that will be participating in this event. The schools already know which student is transferring to which high school. The conversations will only be between representatives of E and H from student that will be transferring to H.</p>\n\n<p>The rules are:</p>\n\n<ol>\n<li>The duration of each conversation is based on the amount of\nstudents per representatives.Each conversation last 5 minutes per student. If a group consist of 1 student, this conversation last 10 minutes.</li>\n<li>No timeclashes</li>\n<li>All the students of the same group will be scheduled together, so, a\nrepresentatives will only face the same representative once.</li>\n<li>Timespan is 13.00-19.00</li>\n<li>The waiting time of a representative is at most 20% of his time. A\nwaiting time is an empty timeslot between the 1st and last\nconversation.</li>\n<li>Schedules for 2 days</li>\n<li>Each representatives participate for 1 day.</li>\n</ol>\n\n<p>The problem is that I know that this is hard to solve, but I dont know if it's NP-hard. Right now I only know this problem is similar to a Job Shop Problem. What can I do to proof that my problem is NP-hard? I read that I need to reduce a known problem to my problem. But how do I do this? I have read different articles and books, but I still don't understand the steps to do it.</p>\n", 'ViewCount': '285', 'Title': 'How to reduce to an NP-hard problem?', 'LastEditorUserId': '2700', 'LastActivityDate': '2012-09-06T14:12:00.927', 'LastEditDate': '2012-09-06T14:12:00.927', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2700', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2012-09-05T15:53:58.833', 'FavoriteCount': '1', 'Id': '3439'},2916:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>My question is related to the <a href="http://en.wikipedia.org/wiki/Integer_relation_algorithm" rel="nofollow">Integer Relation Detection Problem</a> which can be formulated as:</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = 0$</p>\n\n<p>Where $\\forall i. a_i\\in\\mathbb{Z} \\land a_i&lt;c \\land x\\in \\mathbb{R}$, and $\\exists i. a_i\\neq 0$. $c$ and vector $\\mathbf{x}$ are given, and the problem is to find a valid vector $\\mathbf{a}$ that satisfies these constraints.</p>\n\n<p>There are a few algorithms to solve this problem, listed on the wikipedia page linked.</p>\n\n<p>My question: are there algorithms for a solution to the same problem with the modification that</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = 1$?</p>\n\n<p>Or equivalently (I believe),</p>\n\n<p>$\\qquad a_1x_1 + a_2x_2 + \\cdots + a_nx_n = b$?</p>\n\n<p>The constant $b\\in \\mathbb R$ is a given.</p>\n\n<p>On <a href="http://math.stackexchange.com/questions/191545/integer-relation-that-equals-one">math.se</a> I ask for a polynomial time algorithm or proof that none exist, with not much luck. Here I ask if a solution to this is equivalent to a solution the knapsack problem (can the knapsack problem be reduced to this), and this would thus be NP-hard.</p>\n', 'ViewCount': '145', 'Title': 'Reduction from knapsack problem to Integer relation that equals one', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-12T22:38:34.833', 'LastEditDate': '2012-09-12T22:38:34.833', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2755', 'Tags': '<algorithms><complexity-theory><np-hard><number-theory><knapsack-problems>', 'CreationDate': '2012-09-11T02:29:27.720', 'FavoriteCount': '0', 'Id': '3503'},2917:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>How can i prove that the conversion from CNF to DNF is NP-Hard. I'm not asking for an answer, just some suggestions about how to go about proving it.</p>\n", 'ViewCount': '646', 'Title': u'CNF to DNF \u2014 conversion is NP Hard', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-12T22:32:03.810', 'LastEditDate': '2012-09-12T22:32:03.810', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '7', 'OwnerDisplayName': 'jkjk', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-hard><satisfiability><sat-solvers>', 'CreationDate': '2011-12-14T15:46:55.587', 'FavoriteCount': '4', 'Id': '3513'},2918:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '815', 'Title': 'What is the relationship between NP/NP-Complete/NP-Hard to time complexity?', 'LastEditDate': '2012-10-11T07:36:39.490', 'AnswerCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2835', 'FavoriteCount': '3', 'Body': "<p>I'm familiar with a few problems of each class and even though the definitions are based on sets and polynomial reducibility, I see a pattern with time complexity. NP problems appear to be $O(2^n)$ (minus the P problems of course), and NP-hard problems seem to be worse: $n^n$ or $n!$ (Chess, TSP). Is this a misleading interpretation?</p>\n", 'Tags': '<complexity-theory><terminology><time-complexity><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-12T04:51:51.627', 'CommentCount': '2', 'AcceptedAnswerId': '5011', 'CreationDate': '2012-10-11T05:29:06.593', 'Id': '5009'},2919:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '199', 'Title': 'Modification of Hamilton Path', 'LastEditDate': '2012-11-03T04:47:29.347', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4436', 'FavoriteCount': '1', 'Body': '<p>Although I know that the <a href="http://en.wikipedia.org/wiki/Hamiltonian_path_problem" rel="nofollow">Hamilton Path problem</a> is ${\\sf NP}$-complete, I think the following variant can be solved in polynomial time:</p>\n\n<blockquote>\n  <p>Given a planar graph with vertex set $V$, edge set $E$, start node $S$ and target node $F$,\n  our task is to find the Hamiltonian path from $S$ to $F$ or write that the path doesn\'t exist.</p>\n  \n  <p><em>Last condition</em>: In the path, in addition to selecting the directly connected vertices, \n  we can also choose those connected to exactly one neighbor.</p>\n  \n  <p><strong>Edit</strong>: The degree of any vertex is at most four ($\\deg(v_i) \\le 4$).</p>\n</blockquote>\n\n<p>Does anyone have any ideas how to prove that this can be solved in polynomial time? </p>\n\n<p>It can be hard to understand, so I will give an example:  </p>\n\n<p><img src="http://i.stack.imgur.com/meTSp.png" alt="Examples"></p>\n\n<p>In the left example, for $S=1,F=12$, the solution is the path $1, 11, 8, 7, 5, 9, 2, 10, 4, 6, 3, 12$.  </p>\n\n<p>In the right example, for $S=1,F=15$, there is no Hamiltonian path.</p>\n', 'Tags': '<algorithms><complexity-theory><graph-theory><np-hard>', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-03T16:06:59.817', 'CommentCount': '9', 'AcceptedAnswerId': '6448', 'CreationDate': '2012-11-02T10:23:44.050', 'Id': '6446'},2920:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '244', 'Title': 'Reduce the following problem to SAT', 'LastEditDate': '2012-11-07T10:26:52.693', 'AnswerCount': '2', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '1718', 'FavoriteCount': '3', 'Body': "<p>Here is the problem. Given $k, n, T_1, \\ldots, T_m$, where each $T_i \\subseteq \\{1, \\ldots, n\\}$. Is there a subset $S \\subseteq \\{1, \\ldots, n\\}$ with size at most $k$ such that $S \\cap T_i \\neq \\emptyset$ for all $i$? I am trying to reduce this problem to SAT. My idea of a solution would be to have a variable $x_i$ for each of 1 to $n$. For each $T_i$, create a clause $(x_{i_1} \\vee \\cdots \\vee x_{i_k})$ if $T_i = \\{i_1, \\ldots, i_k\\}$. Then and all these clauses together. But this clearly isn't a complete solution as it does not represent the constraint that $S$ must have at most $k$ elements. I know that I must create more variables, but I'm simply not sure how. So I have two questions:</p>\n\n<ol>\n<li>Is my idea of solution on the right track?</li>\n<li>How should the new variables be created so that they can be used to represent the cardinality $k$ constraint?</li>\n</ol>\n", 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-07T16:44:49.113', 'CommentCount': '1', 'AcceptedAnswerId': '6522', 'CreationDate': '2012-11-07T02:59:38.507', 'Id': '6521'},2921:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have difficulties understanding the definition of the class <a href="http://en.wikipedia.org/wiki/SNP_%28complexity%29" rel="nofollow">Max-SNP</a> (optimization variant of <strong>strict NP</strong>), thus I have to following basic question:</p>\n\n<pre><code>If a problem is known to be Max-SNP hard, does this imply NP-hardness of the problem?\n</code></pre>\n', 'ViewCount': '337', 'Title': 'Does Max-SNP hard imply NP-hard', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-10T08:26:30.693', 'LastEditDate': '2012-11-10T08:26:30.693', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6592', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4532', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2012-11-10T01:06:59.770', 'Id': '6589'},2922:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>When I read about NP-completeness for the first time, I really wondered why is the concept of reductions given such high emphasis, after all we have been looking at concepts such as reductions and \'special case of one another problem\' in mathematics since elementary algebra. What I mean by reductions in algebra is the following.</p>\n\n<p>Problem 1: Find value of x such that $x^2+ax+b=0$</p>\n\n<p>Problem 2: Find value of x such that $(x+m/n)^2=0$</p>\n\n<p>We can go on proving both the problems are same and one solution can be translated to another.</p>\n\n<p>My question is that "Is the concept of reductions in computational intractability same as that in above algebraic theory?" If not, how are the reductions in CI theory different?</p>\n', 'ViewCount': '89', 'Title': 'Difference between reductions in algebraic problems versus reductions in computational intractability', 'LastEditorUserId': '472', 'LastActivityDate': '2012-12-04T00:56:09.023', 'LastEditDate': '2012-12-04T00:56:09.023', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4667', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2012-11-20T12:28:30.580', 'FavoriteCount': '2', 'Id': '6781'},2923:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<ol>\n<li><p>Is it always true that a problem which is ${\\sf NP}$-hard but not ${\\sf NP}$-complete is an optimization problem such as <strong>Minimum-Vertex-Cover</strong> and many others.</p></li>\n<li><p>Is it always true that a ${\\sf NP}$-complete problem is always a decision problem such as vertex cover of size $k$, independent set of size $k$ and many others.</p></li>\n</ol>\n', 'ViewCount': '154', 'Title': 'NP-Hard problems which are not NP-Complete', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-27T08:19:00.027', 'LastEditDate': '2012-11-27T08:19:00.027', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2556', 'Tags': '<complexity-theory><terminology><np-complete><np-hard><decision-problem>', 'CreationDate': '2012-11-26T07:02:31.070', 'FavoriteCount': '1', 'Id': '6910'},2924:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>$\\newcommand{\\np}{\\mathsf{NP}}\\newcommand{\\cc}{\\textrm{Circuit-SAT}}$I am having difficulty understanding the $\\np$-hardness proof for $\\cc$ in <a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms" rel="nofollow">CLRS</a>.</p>\n\n<blockquote>\n  <p>$\\cc = \\{\\langle C \\rangle : C \\text{ is a satisfiable combinatorial boolean circuit} \\}$</p>\n  \n  <p><strong>Lemma:</strong> The $\\cc$ problem is $\\mathsf{NP}$-hard.</p>\n</blockquote>\n\n<p>Can anyone provide an easy-to-understand proof?</p>\n', 'ViewCount': '265', 'Title': 'Circuit Satisfiability problem is NP-Hard?', 'LastEditorUserId': '19', 'LastActivityDate': '2012-12-01T05:56:51.550', 'LastEditDate': '2012-12-01T05:56:51.550', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '7034', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4193', 'Tags': '<complexity-theory><np-hard><satisfiability><circuits>', 'CreationDate': '2012-11-30T02:16:14.930', 'Id': '7032'},2925:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm trying to find a polynomial time algorithm for finding the minimum vertex cover for a graph. I've written the algorithm below; I know this problem is $\\mathsf{NP}$-hard, which means there are probably some graphs for which this algorithm will not work.</p>\n\n<p>I need some help in finding the flaw in this algorithm and also, an indication for what restrictions should be imposed on graphs such that this algorithm works.</p>\n\n<p>In the algorithm below I have a graph $G=(V,E)$. I also define the $\\text{priority}(v)$ function; in rough terms, it is the number of edges that are covered by vertex $v$. The function has the property that</p>\n\n<p>$$\\sum_{v \\in V} \\text{priority}(v) = \\text{number of edges}.$$</p>\n\n<p>In other words, an edge is counted as covered by only one of its vertices, not both. </p>\n\n<pre><code>Define degree : V -&gt; NaturalNumbers\ndegree(v) = number of edges connected to v, for all v in V\n\nDefine priority : V -&gt; NaturalNumbers\nInitialize priority(v) = 0 for all v in V\n\nFor all (u, v) in E:\n    If degree(u) &gt;= degree(v):\n        priority(u) = priority(u) + 1\n    Else\n        priority(v) = priority(v) + 1\n\nDefine S as the solution to the vertex cover problem\nInitialize S to the empty set\n\nFor all v in V:\n    If priority(v) != 0:\n        Add v to the set S\n\nOutput S as the solution\n</code></pre>\n", 'ViewCount': '219', 'Title': 'For what special cases does this vertex cover algorithm fail or work?', 'LastEditorUserId': '472', 'LastActivityDate': '2013-08-05T17:23:44.537', 'LastEditDate': '2013-03-23T17:44:07.647', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7401', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '5063', 'Tags': '<algorithms><graphs><np-complete><np-hard>', 'CreationDate': '2012-12-14T20:39:37.110', 'Id': '7400'},2926:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I have the set of weights $W = \\{w_1,w_2,\\ldots,w_{50}\\}$ where each $1 \\le w_i \\le 60$ is an integer.  I am interested in determining <strong>all</strong> subsets (not just one, and not just the number of them) of $W$ with a fixed sum $s$.  I realize this is obviously NP-hard, but are there some efficient ways (e.g. dynamic programming) to obtain this result for these relatively nice conditions (e.g. only 50 items, weights integer and bounded)?</p>\n', 'ViewCount': '1230', 'Title': 'Finding all solutions to subset sum for integers with bounded weights', 'LastEditorUserId': '472', 'LastActivityDate': '2013-02-10T19:33:09.907', 'LastEditDate': '2013-02-10T19:33:09.907', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5376', 'Tags': '<dynamic-programming><np-hard>', 'CreationDate': '2013-01-10T19:57:34.920', 'Id': '7874'},2927:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '633', 'Title': 'NP-Hard that is not NP-Complete and not Undecidable', 'LastEditDate': '2013-01-21T10:57:39.683', 'AnswerCount': '2', 'Score': '16', 'PostTypeId': '1', 'OwnerUserId': '6495', 'FavoriteCount': '3', 'Body': '<p>I\'m wondering if there is a good example for an easy to understand <a href="http://en.wikipedia.org/wiki/NP-hard">NP-Hard</a> problem that is not <a href="http://en.wikipedia.org/wiki/NP-complete">NP-Complete</a> and not undecidable?</p>\n\n<p>For example, the <a href="http://en.wikipedia.org/wiki/Halting_problem">halting problem</a> is NP-Hard, not NP-Complete, but is undecidable.</p>\n\n<p>I believe that this means that it is a problem that a solution for can be verified but not in polynomial time. (Please, correct this statement if this is not the case).</p>\n', 'Tags': '<complexity-theory><np-complete><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-18T14:07:47.700', 'CommentCount': '0', 'AcceptedAnswerId': '9064', 'CreationDate': '2013-01-21T01:13:41.927', 'Id': '9063'},2928:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am interested if there exists a following version of the travelling salesman problem:</p>\n\n<blockquote>\n  <p>INSTANCE: A finite set $C = \\{1,2,\\dots,k\\}$ of cities, a positive integer distance $\\delta(i,j)$ for each pair of cities, and two positive integers $d$ and $B$.</p>\n  \n  <p>QUESTION: Is there a tour that visits every city in $C$, includes exactly $d$ detours, and has total length no more then $B$?  In other words, suppose $OPT$ is the optimal permutation of the cities; that is, $OPT(i)$ is the next city after city $i$ in an optimal traveling salesman tour.  Is there an ordering $x(0), \\dots, x(k-1)$ of the cities such that $$\\sum_{i=1}^{k} \\delta(x(i), x((i+1) \\bmod k)) \\leq B$$ and there are exactly $d$ indices $i$ where $x((i+1) \\bmod k) \\ne OPT(x(i))$?</p>\n</blockquote>\n\n<p>The $d$ implies that if my shortest tour is $a\\rightarrow b \\rightarrow c\\rightarrow a$ but $d=1$ then what would be the shortest path if I had to first go to $c$, $ a \\rightarrow c \\rightarrow ...$. So $d$ tells me that I have to make $d$ number of wrong choices but I can choose these choices in any way I want to to minimize the length of the path.</p>\n\n<p>Is this a problem worthwhile describing? Or if it has been described where could I see an example? </p>\n', 'ViewCount': '90', 'Title': 'Travelling salesman problem with detours', 'LastEditorUserId': '39', 'LastActivityDate': '2013-06-06T15:05:07.807', 'LastEditDate': '2013-06-06T15:05:07.807', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6697', 'Tags': '<complexity-theory><graph-theory><np-hard><decision-problem><traveling-salesman>', 'CreationDate': '2013-02-15T10:58:21.960', 'Id': '9802'},2929:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I am wondering in general if it is correct to claim that <strong>if a special case of a problem is NP-Hard, the general case of that problem is NP-\nHard too?</strong></p>\n\n<p>For example: Min Set-Cover is NP-Hard does it imply without having to prove that Min Set-k-Cover where each element needs to be covered k times is NP-Hard too? </p>\n', 'ViewCount': '77', 'Title': 'Does hardness of a special case imply hardness of a general case?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-18T20:50:52.970', 'LastEditDate': '2013-03-14T07:39:17.577', 'AnswerCount': '3', 'CommentCount': '5', 'Score': '2', 'OwnerDisplayName': 'user14178', 'PostTypeId': '1', 'Tags': '<complexity-theory><terminology><np-hard>', 'CreationDate': '2013-03-13T14:11:38.093', 'Id': '10514'},2930:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '368', 'Title': 'How to prove NP-hardness of a longest-path problem?', 'LastEditDate': '2013-11-13T17:56:10.210', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7168', 'FavoriteCount': '1', 'Body': "<p>I have this question:</p>\n\n<pre><code>Input: \nG(V, E) = an undirected graph, V={v1, v2, ..., vn} (V = set of nodes, E = set of edges)\nwhere there is a path connecting from v1 to vn.\n\nQuestion: \nWhat is the maximum number of nodes you can visit when starting from v1 and ending at vn. \n(including v1 and vn) \nEach node can only be visited at most once.\n</code></pre>\n\n<p>I want to prove that this is NP-hard by reducing it from a known NP-complete problem, such as undirected Hamiltonian path or subset-sum.</p>\n\n<p>However I don't know exactly how to do this and this is where I need help.</p>\n\n<p>Can anyone help please?</p>\n", 'Tags': '<complexity-theory><reductions><proof-techniques><np-hard>', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-13T17:56:10.210', 'CommentCount': '1', 'AcceptedAnswerId': '10734', 'CreationDate': '2013-03-24T03:02:15.400', 'Id': '10732'},2931:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have this problem which is described as follows:</p>\n\n<p>Input:\n    You are given a multi-set $M$ (a set that can contain duplicates), and two numbers $P$ and $T$.\n    $M = {(x_1,y_1), (x_2,y_2), ..., (x_n,y_n)}$.\n    Each $x$ and $y$ is an integer $&gt;= 0$.\n    $P$ in an integer $&gt;= 0$.\n    $T$ is an integer $&gt; 0$.</p>\n\n<p>Question:\n    Is there a subset $G$ of $M$, such that the sum of every $x$ value of $G$ is $&gt; P$ and the sum of every $y$ value of $G$ is $&lt; T$?\n    (Note: You are basically taking from $M$. For example: if $M$ has two $(1,1)$'s then $G$ can contain at most two $(1, 1)$'s)</p>\n\n<p>I want to reduce it to from the subset sum problem, but I am not sure how because there's two conditions to solve for...</p>\n\n<p>Can anyone help with this problem?</p>\n", 'ViewCount': '144', 'Title': 'How to reduce from subset-sum problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-25T12:06:45.403', 'LastEditDate': '2013-03-25T12:06:45.403', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '10748', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7168', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-03-24T17:43:29.840', 'Id': '10747'},2932:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '296', 'Title': 'Subset Sum: reduce special to general case', 'LastEditDate': '2013-04-02T22:46:23.867', 'AnswerCount': '1', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '7549', 'FavoriteCount': '2', 'Body': '<p><a href="http://en.wikipedia.org/wiki/Subset_sum_problem">Wikipedia</a> states the subset sum problem as finding a subset of a given set of integers, whose sum is zero. Further it describes it as equivalent to finding a subset with sum $s$ for any given $s$.</p>\n\n<p>So I believe as they are equivalent, there must be a reduction in either side. The one from $s$ to zero is trivial by setting $s = 0$. But I had no luck finding a reduction from zero to $s$, i.e. given a set of integers $A$, construct a set of integers $B$ containing a subset with sum $s$ (for any $s$), if and only if there is as subset of $A$ with sum zero.</p>\n\n<p>Can you give me some pointers?</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '268', 'LastActivityDate': '2013-04-03T06:52:39.257', 'CommentCount': '0', 'AcceptedAnswerId': '10987', 'CreationDate': '2013-04-02T22:06:48.883', 'Id': '10981'},2933:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '357', 'Title': 'Do any decision problems exist outside NP and NP-Hard?', 'LastEditDate': '2013-04-04T07:16:45.770', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7572', 'FavoriteCount': '1', 'Body': '<p><a href="http://cs.stackexchange.com/questions/9063/np-hard-that-is-not-np-complete-and-not-undecidable">This question</a> asks about NP-hard problems that are not NP-complete. I\'m wondering if there exist any decision problems that are neither NP <em>nor</em> NP-hard.</p>\n\n<p>In order to be in NP, problems have to have a verifier that runs in polynomial time on a deterministic Turing machine. Obviously, all problems in P meet that criteria, but what about the problems with sub-exponential complexity? They do not belong to P and it\'s not obvious to me that they all have efficient deciders. And they certainly don\'t qualify for NP-complete.</p>\n\n<p>I\'m willing to believe that all decision problems are either NP or NP-hard or both, but nobody has actually <em>said</em> that (that I can find). I\'m also willing to believe that such problems do exist, even if they are very contrived. Maybe someone more knowledgeable can put this issue to rest for me. Thanks.</p>\n\n<p><strong>Edit</strong></p>\n\n<p>I abused the term \'subexponential\' in my question. In my mind it meant some problem with a complexity between exponential and polynomial like L-notation in <a href="http://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions" rel="nofollow">this table</a>. See the links in Raphael\'s answer for more details.</p>\n', 'Tags': '<complexity-theory><np-complete><np-hard><decision-problem><complexity-classes>', 'LastEditorUserId': '7572', 'LastActivityDate': '2013-04-04T13:33:02.737', 'CommentCount': '4', 'AcceptedAnswerId': '11012', 'CreationDate': '2013-04-04T04:53:18.070', 'Id': '11009'},2934:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>In an exercise I have to show that minimizing a multivariate polynomial with $n$ variables over the hyper-cube $H = \\{ (x_1, \\ldots, x_n) : 0 \\leq x_i \\leq 1 \\}$ is NP-Hard. Formally, given $p(x_1, \\ldots, x_n)$ and $\\alpha$, does $\\min_{0 \\leq x_i \\leq 1} p(x_1, \\ldots, x_n) \\leq \\alpha$?</p>\n\n<p>My idea is to reduce it to MAX-SAT as follows. Suppose I am given the formula:</p>\n\n<p>$(x_1 \\vee \\overline{x_2} \\vee x_3) \\wedge (\\overline{x_1} \\vee \\overline{x_3}) \\wedge (\\overline{x_1} \\vee x_2 \\vee \\overline{x_3})$</p>\n\n<p>Then I consider:</p>\n\n<p>$p(y_1, y_2, y_3) = y_1 (1 - y_2) y_3 + (1 - y_1) (1 - y_3) + (1 - y_1) y_2 (1 - y_3)$</p>\n\n<p>If $p$ reaches a minimum at a corner of $H$ then the assignment:\n$$x_i = \\textit{true} \\ \\text{if} \\ y_i = 0 \\ \\text{and} \\ x_i = \\textit{false} \\ \\text{if} \\ y_i = 1$$\nis a solution for MAX-SAT value for the corresponding formula and since MAX-SAT is NP-Hard we are done. However, how do I proceed if $p$ reaches its minimum at an interior point? Or is it the case that it will always be a corner?</p>\n', 'ViewCount': '118', 'Title': 'Minimizing a multivariate polynomial over the hyper-cube is NP-Hard', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-12T03:01:45.210', 'LastEditDate': '2013-04-11T23:39:17.320', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'OwnerDisplayName': 'fran.aubry', 'PostTypeId': '1', 'OwnerUserId': '7697', 'Tags': '<complexity-theory><reductions><optimization><np-hard>', 'CreationDate': '2013-04-11T15:42:38.420', 'Id': '11246'},2935:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '211', 'Title': 'Is Hidoku NP complete?', 'LastEditDate': '2013-05-06T22:36:24.267', 'AnswerCount': '2', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '7549', 'FavoriteCount': '2', 'Body': u'<p>A Hidoku is a $n \\times n$ grid with some pre-filled integers from 1 to $n^2$. The goal is to find a path of successive integers (from 1 to $n^2$) in the grid. More concrete, each cell of the grid must contain a different integer from 1 to $n^2$ and each cell with value $z \u2260 n^{2}$ must have a neighbor cell with value $z + 1$ (can also be diagonally).</p>\n\n<p>Is it NP hard to decide whether a given Hidoku is solvable? What reduction could be used?</p>\n\n<p>Edit: according to the comments, I give a little clarification. Given is a grid of cells, some of them already contain values (integers from 1 to n\xb2). We must fill all remaining cells with integers from 1 to $n^2$, such that no two cells have the same value and that every cell with value $z \u2260 n\xb2$ has a neighbor with value $z + 1$. That is, after filling out the cells, we must find the path $1, 2, 3,\\cdots, n^2$. In the grid, which logically visits each cell.</p>\n\n<p>An example of a Hidoku woud be <a href="http://www.janko.at/Raetsel/Hidoku/018.c.gif" rel="nofollow">http://www.janko.at/Raetsel/Hidoku/018.c.gif</a>.\nAn already solved Hidoku is <a href="http://diepresse.com/images/uploads/3/f/7/586743/spectrumsommerraetsel_7august_hidoku_schwer_loesung20100810172340.gif" rel="nofollow">http://diepresse.com/images/uploads/3/f/7/586743/spectrumsommerraetsel_7august_hidoku_schwer_loesung20100810172340.gif</a>, where you can see the path I was refering to.</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '7492', 'LastActivityDate': '2013-05-06T22:36:24.267', 'CommentCount': '8', 'AcceptedAnswerId': '11336', 'CreationDate': '2013-04-15T12:51:57.417', 'Id': '11330'},2936:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>In a directed graph, the indegree of a node is the number of incoming edges and\nthe outdegree is the number of outgoing edges. Show that the following problem\nis NP-complete. Given an undirected graph G and a designated subset C of G\u2019s\nnodes, is it possible to convert G to a directed graph by assigning directions to each\nof its edges so that every node in C has indegree 0 or outdegree 0, and every other\nnode in G has indegree at least 1?</p>\n\n<p>I need an idea how to prove it</p>\n', 'ViewCount': '339', 'Title': 'Can the edges of a graph be assigned directions such that all nodes in a given subset have in- or outdegree 0, and every other node indegree > 0?', 'LastEditorUserId': '917', 'LastActivityDate': '2013-10-08T10:57:13.280', 'LastEditDate': '2013-10-08T10:57:13.280', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7783', 'Tags': '<complexity-theory><graph-theory><np-complete><np-hard>', 'CreationDate': '2013-04-19T06:22:19.890', 'FavoriteCount': '1', 'Id': '11398'},2937:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's say I have a decision problem  $P$ on graphs for which I know that it is NP-hard on graphs with maximum degree $d$. Does this then imply that it is NP-hard on $d$-regular graphs? Although it might seem obviously true, maybe it is inherent in the reduction to show that $P$ is hard, that some vertices have degree less than $d$.</p>\n", 'ViewCount': '71', 'Title': 'NP hardness through Restriction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T14:43:50.053', 'LastEditDate': '2013-04-21T14:43:50.053', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11456', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7816', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-04-21T02:47:17.720', 'Id': '11453'},2938:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let's say I have an optimization problem called $k$-foo which asks for a solution of size $k$ minimizing some quality criterion.</p>\n\n<p>Now the corresponding decision problem $foo(M)$ would be: <br> Is there a solution to foo with quality at least $M$ of size $k$.</p>\n\n<p>For problems on one parameter (for example vertex cover) it is obvious that solving the optimization problem sovles the decision problem.</p>\n\n<p>But here I do not see such a correspondance between the $k$-foo optimization problem and the $foo(M)$ decision problem. How does for example showing that $foo(M)$ is NP-hard implies that $k$-foo is NP-hard?</p>\n\n<p>The $k$-center problem is an example of such a problem where the decision version takes the radius as input and asks wether a solution of size $k$ exists.  </p>\n", 'ViewCount': '80', 'Title': 'Decision vs Optimization version for Problems of two Parameters', 'LastEditorUserId': '7921', 'LastActivityDate': '2013-04-26T23:12:46.047', 'LastEditDate': '2013-04-26T23:12:46.047', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7921', 'Tags': '<reductions><optimization><np-hard><decision-problem>', 'CreationDate': '2013-04-26T22:04:14.953', 'FavoriteCount': '1', 'Id': '11589'},2939:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Say $\\ell: \\{0,1\\}^\\ast \\to \\{0,1\\}^\\ast$ is a one-to-one polynomial-time computable function that preserves length. Consider the language $$L = \\Bigl\\{v \\;\\Big|\\; \\exists u: \\bigl(u_1 = 1 ~~\\text{and}~~ \\ell(u) = v\\bigr) \\Bigr\\}.$$ How do I prove that $L$ is in $\\mathsf{NP} \\cap \\mathsf{coNP}$? Basically, what would appropriate witnesses for $L$ in $\\mathsf{NP}$ and $\\mathsf{coNP}$ be?</p>\n', 'ViewCount': '95', 'Title': 'Show that this language is in NP $\\cap$ coNP', 'LastEditorUserId': '2152', 'LastActivityDate': '2013-05-01T17:23:31.807', 'LastEditDate': '2013-05-01T17:17:15.503', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '11706', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8000', 'Tags': '<np-hard><np>', 'CreationDate': '2013-05-01T14:47:36.223', 'Id': '11696'},2940:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I read somewhere that 3SAT can be used to solve Integer Factorization.</p>\n\n<p>If that is true, could someone teach me a simple example of generating the 3SAT by using a small number? Let's say you are given the number 6, then the factors are 2 and 3.</p>\n", 'ViewCount': '206', 'Title': 'Generating 3SAT circuit for Integer factorization example', 'LastActivityDate': '2013-05-02T11:11:58.450', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11727', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8006', 'Tags': '<np-hard><factoring><3-sat>', 'CreationDate': '2013-05-02T06:11:30.077', 'FavoriteCount': '3', 'Id': '11718'},2941:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>If we have polynomial algorithm that $c$-approximation, $c&lt;\\frac{4}{3}$ for graphs that their chromatic number $\\geq k$ then $NP=P$, how to prove such statements?</p>\n\n<p>I also have some sort of explanation of this statement: It's NP-hard to separate between graphs that have chromatic number $k$ and chromatic number $c \\cdot k$ when $c&lt;\\frac{4}{3} \\quad \\forall k\\geq 3$ </p>\n", 'ViewCount': '80', 'Title': 'Hardness of approximation of the 3 colorability problem', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-05-09T01:58:07.277', 'LastEditDate': '2013-05-09T01:58:07.277', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11769', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7934', 'Tags': '<algorithms><np-hard><approximation>', 'CreationDate': '2013-05-03T22:19:10.063', 'Id': '11766'},2942:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<blockquote>\n  <p><strong>Input</strong>: A set of $n$ Users $U=\\{u_1, ..., u_n\\}$ and a set of $m$ products $I=\\{i_1, ..., i_m\\}$. Associated with each pair $u \\in U$ and $i \\in I$  is the probability $p_{u,i}$ of $u$ purchasing the product $i$.<br/>\n  <strong>Task</strong>: Assign each user exactly $k$ products so that the following objective function is maximized:<br/>\n  $$\\sum_{i \\in I(U)} ({1-\\prod_{u\\in U(i)}{(1-p_{u,i})}})$$<br/>\n  Where $I(U)\\subseteq I$ is the set of products assigned to some user, and $U(i) \\subseteq U$ is the set of users to whom a product $i$ is assigned.</p>\n</blockquote>\n\n<p>Question: Is this problem NP-Hard?</p>\n', 'ViewCount': '56', 'Title': 'Hardness of a special case of maximum matching', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-28T07:27:34.407', 'LastEditDate': '2013-05-28T07:27:34.407', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8344', 'Tags': '<complexity-theory><reductions><np-hard><matching>', 'CreationDate': '2013-05-25T02:15:10.840', 'Id': '12260'},2943:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>There are $n$ bins and $m$ type of balls.\nThe $i$th bin has labels $a_{i,j}$ for $1\\leq j\\leq m$, it is the expected number of balls of type $j$.</p>\n\n<p>You start with $b_j$ balls of type $j$. Each ball of type $j$ has weight $w_j$, and want to put the balls into the bins such that bin $i$ has weight $c_i$. A distribution of balls such that previous condition holds is called a feasible solution.</p>\n\n<p>Consider a feasible solution with $x_{i,j}$ balls of type $j$ in bin $i$, then the cost is $\\sum_{i=1}^n \\sum_{j=1}^m |a_{i,j}-x_{i,j}|$. We want to find a minimum cost feasible solution.</p>\n\n<p>This problem is clearly NP-hard if there is no restriction on $\\{w_j\\}$. The subset sum problem reduces to the existence of a feasible solution. </p>\n\n<p>However, if we add the condition that $w_j$ divides $w_{j+1}$ for every $j$, then the subset sum reduction no longer works, so it\'s not clear whether the resulting problem remains NP-hard. Checking for the existence of a feasible solution takes only $O(nm)$ time(attached at the end of the question), but this does not give us the minimum-cost feasible solution. </p>\n\n<p>The problem has a equivalent integer program formulation:\nGiven $a_{i,j},c_i,b_j,w_j$ for $1\\leq i\\leq n,1\\leq j\\leq m$. \n\\begin{align*}\n\\text{Minimize:} &amp; \\sum_{i=1}^n \\sum_{j=1}^m |a_{i,j}-x_{i,j}| \\\\\n\\text{subject to:} &amp; \\sum_{j=1}^m x_{i,j}w_j = c_i \\text{ for all } 1\\leq i\\leq n\\\\\n&amp; \\sum_{i=1}^n x_{i,j} \\leq b_j \\text{ for all } 1\\leq j \\leq m\\\\\n&amp; x_{i,j}\\geq 0 \\text{ for all } 1 \\leq i\\leq n, 1\\leq j \\leq m\\\\\n\\end{align*}</p>\n\n<p>My question is, </p>\n\n<blockquote>\n  <p>Is the above integer program NP-hard when $w_j$ divides $w_{j+1}$ for all\n  $j$?</p>\n</blockquote>\n\n<p>It\'s not obvious how to solve this even when $n=1$ and $w_j=2^j$, namely\n\\begin{align*}\n\\text{Minimize:} &amp; \\sum_{j=1}^m |a_j-x_j| \\\\\n\\text{subject to:} &amp; \\sum_{j=1}^m 2^j x_j = c\\\\\n&amp; 0 \\leq x_j \\leq b_j \\text{ for all } 1\\leq j \\leq m\\\\\n\\end{align*}</p>\n\n<p><strong>An algorithm to decide if there is a feasible solution in $O(nm)$ time</strong>:</p>\n\n<p>Define $w_{m+1}=w_m(\\max_{j} c_j + 1)$ and $d_j = w_{j+1}/w_j$. Let $a\\%b$ be the remained of $a$ divides $b$.</p>\n\n<ol>\n<li>If there exist a $c_i$ that\'s not divisible by $w_1$, return "no feasible solution". (the invariant $c_i$ divides $w_j$ will always be maintained in the following loop)</li>\n<li><p>for $j$ from $1$ to $m$:</p>\n\n<ol>\n<li>$k \\gets \\sum_{i=1}^n (c_i/w_j)\\%d_j$. (the minimum of balls of weight $w_j$ required)</li>\n<li>If $b_j&lt;k$, return "no feasible solution".</li>\n<li>$c_i \\gets c_i - ((c_i/w_j)\\% d_j)$ for all $i$. (remove the minimum number of required balls of weight $w_j$)</li>\n<li>$b_{j+1} \\gets \\lfloor (b_j-k)/d_j \\rfloor$. (group smaller balls into a larger ball)</li>\n</ol></li>\n<li>return "there is a feasible solution".</li>\n</ol>\n', 'ViewCount': '578', 'Title': 'Is it NP-hard to fill up bins with minimum moves?', 'LastEditorUserId': '220', 'LastActivityDate': '2014-04-17T20:15:43.023', 'LastEditDate': '2014-04-17T20:15:43.023', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '12', 'PostTypeId': '1', 'OwnerUserId': '220', 'Tags': '<complexity-theory><np-hard><integer-programming>', 'CreationDate': '2013-06-03T08:38:00.137', 'FavoriteCount': '3', 'Id': '12441'},2944:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Let $B=\\{b_1=g_1,\\cdots,b_n=g_n\\}$ be a set of binary variables $b_i$ and their corresponding values $g_i \\in \\{0,1\\}$. Let $M=\\{\\sum_{e \\in A}e \\;:\\; A \\subset B\\}$, i.e., $M$ is the set of all possible linear combinations of the equations in $B$.</p>\n\n<p>Given $S_i \\subset B$ for $i=1,\\cdots,m$, is that possible to compute, in polynomial time, a\n$K \\subset M$ with minimum size such that $S_i \\cup K$ is a full rank system of equations (i.e., the values of all of the variables can be obtained by solving $S_i \\cup K$)?</p>\n\n<p>An example: Let $B=\\{b_1=1,b_2=0,b_3=1\\}$, $S_1=\\{b_1=1,b_2=0\\}$, and $S_2=\\{b_2=0,b_3=1\\}$. \n$K=\\{b_1+b_3=0\\}$ is the solution because both $S_1\\cup K$ and $S_2 \\cup K$ can be solved uniquely and $K$ has the minimum size 1.</p>\n', 'ViewCount': '25', 'Title': 'Is this problem in P: Finding a common key for a collection of systems of equations?', 'LastActivityDate': '2013-06-20T02:54:32.613', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1672', 'Tags': '<complexity-theory><time-complexity><np-hard><polynomial-time><linear-algebra>', 'CreationDate': '2013-06-20T02:54:32.613', 'Id': '12776'},2945:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The PCP theorem implies (with other results) that there is no polynomial time algorithm for MAX 3SAT to find an assignment satisfying $7/8+ \\epsilon$ clauses of a satisfiable 3SAT formula unless $P = NP$.</p>\n\n<p>There is a trivial polynomial time algorithm that satisfies $7/8$ of the clauses. How hard is it to find an assignment that satsfies at least $7/8$ of the clauses but no more than $7/8 +\\epsilon $ for some $\\epsilon \\gt 0$? Is this task still $NP$-hard?</p>\n', 'ViewCount': '93', 'Title': 'How hard is finding restricted assignment of 3-SAT satisfying $7/8$ of the clauses?', 'LastEditorUserId': '96', 'LastActivityDate': '2013-06-26T16:13:46.583', 'LastEditDate': '2013-06-26T14:34:49.270', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '96', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2013-06-26T14:29:27.607', 'FavoriteCount': '2', 'Id': '12908'},2946:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a complete $n$-partite graph, where each partite set has $n$ vertices (yes it\'s also $n$), so the graph has $n^2$ vertices in total.  My problem is to find a minimum weight $n$-clique in the graph.  I would like to know whether the problem can be solved in polynomial time. </p>\n\n<p>More details of the terms: </p>\n\n<p><strong>Complete $n$-partite graph</strong>: a graph in which vertices are adjacent if and only if they belong to different partitions (<a href="http://en.wikipedia.org/wiki/Glossary_of_graph_theory" rel="nofollow">wikipedia</a>).  There are $n$ partitions in the graph.  (In my case, each partition contains exactly $n$ vertices.)</p>\n\n<p><strong>Minimum weight clique</strong>:  Every edge in the graph has a weight.  The weight of a clique is the sum of the weights of all edges in the clique.  The goal is to find a clique with the minimum weight.</p>\n\n<p>Note that the size of the required clique is $n$, which is the largest clique size in a complete $n$-partite graph, and it is always attainable. </p>\n\n<p>I have searched for hours and there seems no research tackling the exact problem.  Any suggestions?</p>\n', 'ViewCount': '107', 'Title': 'Is this NP-hard: min-weight n-clique in a complete n-partite graph', 'LastEditorUserId': '755', 'LastActivityDate': '2013-07-08T04:47:58.273', 'LastEditDate': '2013-07-08T00:19:34.617', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '13154', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8732', 'Tags': '<complexity-theory><optimization><np-hard>', 'CreationDate': '2013-07-07T16:38:18.347', 'Id': '13135'},2947:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Is there an efficient algorithm which gives the minimum cost closed walk in an undirected graph, which visits all vertices?</p>\n\n<p>Does this problem have a name? I tried to reduce this to similar problems (in particular the traveling salesman problem) to see if it was NP-hard, but was unsuccessful.</p>\n\n<p>Here\'s an example:</p>\n\n<p><img src="http://i.stack.imgur.com/3dxzt.png" alt="enter image description here"></p>\n\n<p>Then a possible closed walk is: A,B,C,D,C,B,A, with a cost of 6.</p>\n\n<p>Thanks!</p>\n', 'ViewCount': '203', 'Title': 'Minimum cost closed walk in a graph', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-07-15T11:10:55.033', 'LastEditDate': '2013-07-14T09:51:41.813', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '13283', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9173', 'Tags': '<algorithms><graphs><np-hard><graph-traversal><traveling-salesman>', 'CreationDate': '2013-07-14T05:04:52.683', 'Id': '13267'},2948:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem $\\Pi_1$ that I want to show that is NP-hard. I know that I must find an NP-hard problem $\\Pi_2$ and a polynomial time reduction $f()$ from instances of $\\Pi_2$ to $\\Pi_1$ such that $I_2$ is an Yes-instance of $\\Pi_2$ iff $I_1=f(I_2)$ is an Yes-instance of $\\Pi_1$.</p>\n\n<p>What if I find a (constant sized) family of reductions $f_i()$ such that $I_2$ is an Yes-instance of $\\Pi_2$ iff at least one $f_i(I_2)$ is an Yes-instance of $\\Pi_1$? Is this enough? Is there a way of translating this one in the "classical" definition? How to formalize this?</p>\n\n<p>I know that in the second situation I can say that I can\'t solve $\\Pi_1$ in polynomial time unless P=NP, but I\'m no sure that is equivalent of saying that $\\Pi_1$ is NP-hard.</p>\n', 'ViewCount': '99', 'Title': 'NP-Hardness reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-08-12T18:55:32.767', 'LastEditDate': '2013-08-11T13:21:08.910', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1373', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-08-09T23:22:09.297', 'Id': '13698'},2949:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '179', 'Title': 'Showing NP-hardness of HALF-SAT', 'LastEditDate': '2013-09-06T16:05:06.570', 'AnswerCount': '2', 'Score': '0', 'OwnerDisplayName': 'Sebastian', 'PostTypeId': '1', 'OwnerUserId': '10048', 'Body': '<p>Yesterday I wrote my undergraduate exam in complexity theory. I had to leave off one question, which bugs me since then. Consider:\n$$ HALF-SAT = \\{ \\varphi \\mid \\varphi \\text{ is a formula which is satisfied by at least half of all assignments }\\} $$\nI\'d like to know how I can prove NP-hardness.</p>\n\n<p>FWIW, here\'s what I figured out:</p>\n\n<ol>\n<li>HALF-SAT is <em>probably</em> not $\\in$ NP, at least in no verifiable way I can think of (not really relevant to the question)</li>\n<li>SAT $\\preceq$ HALF-SAT doesn\'t work, at least not by just adding clauses with new variables, doesn\'t change satisfiable-assignments/arbitrary-assignments ratio</li>\n<li>TAUT $\\preceq$ HALF-SAT via $\\varphi \\mapsto \\varphi \\wedge x_{new}$, but that\'s coNP-hardness (together with NP-hardness this further lets me assume 1., intuitively)</li>\n</ol>\n\n<p>And no, this has nothing to do with the problem you find via googling "HALF-SAT".</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-06T16:05:06.570', 'CommentCount': '2', 'AcceptedAnswerId': '14166', 'CreationDate': '2013-09-03T16:46:25.667', 'Id': '14165'},2950:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '121', 'Title': '$\\mathsf{co\\text{-}NP}$ and Cook reductions', 'LastEditDate': '2013-09-16T07:26:19.233', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '8942', 'FavoriteCount': '1', 'Body': '<p>Can someone help me understand the steps in this argument? There is a decision problem that is in $\\mathsf{co\\text{-}NP}$ (under standard Karp reductions) and is $\\mathsf{NP}$-hard with respect to Cook reductions. Does this imply that if it is in $\\mathsf{NP}$ then $\\mathsf{NP} = \\mathsf{co\\text{-}NP}$ and if so, why?</p>\n', 'Tags': '<complexity-theory><reductions><np-hard>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-16T07:26:19.233', 'CommentCount': '0', 'AcceptedAnswerId': '14286', 'CreationDate': '2013-09-12T08:36:22.790', 'Id': '14278'},2951:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let $G = (V, E)$ be a connected graph and let $M\\subseteq V$. We say that a vertex $v$ is <em>marked</em> if $v\\in M$.  The problem is to find a simple path in $G$ that visits the maximum possible number of marked vertices. The associated decision problem is: is there a simple path that visits every $v\\in M$?  </p>\n\n<p>The problem is obviously more general than the problem of finding a Hamiltonian path in an arbitrary graph, so it is NP-hard.  </p>\n\n<p>I see no obvious strategy; one can't simply disregard the unmarked vertices, since they (and their incident edges) may be part of the optimal path.  Indeed, omitting them may disconnect the graph completely.</p>\n\n<p>My questions:</p>\n\n<ol>\n<li>Does this problem have a well-known name?</li>\n<li>Are there any good approximation algorithms, heuristics, or simple reductions to problems I might know more about?</li>\n<li>Where can I find this problem discussed in the literature?</li>\n</ol>\n", 'ViewCount': '201', 'LastEditorDisplayName': 'user742', 'Title': 'Find a simple path visiting all marked vertices', 'LastActivityDate': '2013-09-20T09:24:48.873', 'LastEditDate': '2013-09-20T09:24:48.873', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1786', 'Tags': '<algorithms><graph-theory><reference-request><np-hard><hamiltonian-path>', 'CreationDate': '2013-09-17T21:18:50.210', 'Id': '14390'},2952:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '1579', 'Title': u'Traveling Salesman - Held\u2013Karp algorithm - BIG improvement', 'LastEditDate': '2013-10-17T22:35:11.870', 'AnswerCount': '1', 'Score': '-9', 'PostTypeId': '1', 'OwnerUserId': '10572', 'FavoriteCount': '1', 'Body': u'<p>I think that I found a polynomial solution to TSP problem. How ever in order to prove the "think" there are many questions need to be answered. I hope you be able to help me.</p>\n\n<ul>\n<li><a href="http://cs.stackexchange.com/questions/14998/traveling-salesman-heldkarp-algorithm-improvement">Part 0</a> - The first question that I asked about it, comes with <a href="https://drive.google.com/folderview?id=0B1ttIJPHEPWFTUVfSFBYb185V1k&amp;usp=sharing" rel="nofollow">sample source code</a>.</li>\n<li><strong>Part 1</strong> - The fundamentals, the basic theory of my algorithm.</li>\n<li><a href="http://cs.stackexchange.com/questions/16165/traveling-salesman-using-the-shorter-path-in-order-to-find-1">Part 2</a> - Stop condition number 1: Using the shorter path in order to find 1 </li>\n<li><a href="http://cs.stackexchange.com/questions/16166/traveling-salesman-intersections">part 3</a> - Stop condition number 2: Intersections</li>\n<li><a href="http://cs.stackexchange.com/questions/16175/traveling-salesman-intersections-looping">Part 4</a> - Stop condition number 3: Intersections Looping</li>\n<li><a href="http://cs.stackexchange.com/questions/16177/traveling-salesman-exact-algorithm">final part</a> - Exact solution</li>\n</ul>\n\n<h2>Base assumption:</h2>\n\n<p><strong>If we found the shortest route for a given input of $N$ cities (let it be called main route), so each sub route between any 2 cities on the "main route" will be also the shortest route.</strong></p>\n\n<p>This assumption is easy to prove. Lets say we found a shorter route between two cities on the "Main route". So now we can improve our main route and make him shorter, how ever this is not possible as the main route is the shortest rout by definition.</p>\n\n<p>Also I want to show you the definition of sub route,(you can skip this if you think it\'s to obvious) I will show it by example. If I have the next route: A,C,E,F,H,K so sub route between C and F is: A,C,E,F when I want to find a shorter route for this given sub route, I can only change the places of the cities C, and E, there could be only 2 options for sub routes between A, and F.</p>\n\n<p>Now I will try to show you my implementation, and I want you tell me if I made any bad assumptions or having bad calculations.</p>\n\n<p>Lets say you been given the next input of Cities: A,B,C,D,E,F,H. In order to find the shortest path you will need to perform 720 tests($(7-1)!$). I want to show you how you can cut half of those tests. </p>\n\n<p>When you will start to calculate, this is how your first tests will look like:</p>\n\n<ul>\n<li>A->B->C->D->E->F->G</li>\n<li>A-><strong>C</strong>-><strong>B</strong>->D->E->F->G</li>\n<li>A-><strong>C</strong>-><strong>B</strong>->D->E-><strong>G</strong>-><strong>F</strong></li>\n<li>A->B->C->D->E-><strong>G</strong>-><strong>F</strong> </li>\n<li>A->B->C->D->F-><strong>E</strong>-><strong>G</strong></li>\n<li>A-><strong>C</strong>-><strong>B</strong>->D-><strong>F</strong>-><strong>E</strong>->G</li>\n</ul>\n\n<p>When you start calculating test 1, you should stop when reaching city D. Stop and calculate what would be the shortest path, starting at A, finishing at D and going thru B,C. Latter you can assume that any path starting with A, going thru C,B and finished in D no matter how it would continue, if it will not start with the shortest path that you found, it will not be the shortest path. So now you can skip all the tests that start with A,B,C,D or A,C,B,D, depending on which of those paths is shorter.</p>\n\n<p>Now in order to save more than just $\\frac{(N-1)!}{2}$ calculation I will create a longer sub routes and calculate the shortest path between them, dropping all other options. The only problem with that, is I may repeatedly calculate the same sub routes, as I may find them in different parts of the main route. For example: for the given route: A,B,C,D,E,F,G,H lets say that I found the shortest route between B to E thru C,D. But that was just from my first test of: A,B,C,D,E,F,G,H. Later I will come in to testing: A,F,G,H,B,D,C,E as eventually I will have to test all the options. So again in order to drop part of those options I will try to find what will be the shortest path between B to E thru D,C(Remember I can can drop calculation from any part of the route) and will have to calculate it again. To avoid that I will store all the sub routes calculation in to maps.</p>\n\n<p>So lets see how long it will take me to create all the maps with K cities length. First I need to select the starting city, got N options for that, now select the last city, got $N -1$ options for that, and now select all the cities in between order is not metter and without repetition. I will use <a href="http://www.mathsisfun.com/combinatorics/combinations-permutations-calculator.html" rel="nofollow">this</a> formula for that: </p>\n\n<blockquote>\n  <p>$\\frac{N!}{ (N - R)!R!}$</p>\n</blockquote>\n\n<p>In our case $N$ is $N-2$ and $R$ is $K - 2$ so we will get:</p>\n\n<blockquote>\n  <p><strong>$\\frac{N!} {(N - K)!(K - 2)!}$</strong> The number of $K$ cities length maps from $N$ cities.</p>\n</blockquote>\n\n<p>Now lets assume that we created all the $K$ length maps and we want to create $2K - 1$ length maps. We do not need to start from 0, we can use our $K$ length maps to help us. Like this:</p>\n\n<p>Lets say we want to create the next map of 7 cities and we already created a map of 4 cities. So the cities are: A,B,C,D,E,F,H. Our first test will be: A,B,C,D,E,F,H. We can save us lots of time if we split it in two maps of 4 cities. \n - Map 1: From A to D thru B,C\n - Map 2: From D to H thru E,F</p>\n\n<p>Lets see how many maps like this could be: There are 5 options for the common city in the middle and there are $2C4$ options for the first two cities( 2 choice 4, selecting 2 cities out of 4. Order is not important, repetition is not allowed) and the last 2 cities is just what reminds. After summing it up we will have get 30 options to create 1 map of 7 cities.\nLets say it in more general way: To create all the maps for K length cities(assuming that we already created all the $\\frac{(K + 1)}{2}$ length cities maps) will be: $K - 2$ options for the common city at the middle. And $\\frac{(K - 3)} {2}C(K - 3)$ options for the cities that belongs to Map 1. Summing all together we will get:</p>\n\n<blockquote>\n  <p>$\\frac{(k - 2)!}{(\\frac{K - 3}{2}!)^2}$ The number of calculation need to be done to create $K$ cities length map when we already created $\\frac{K + 1}{2}$ cities length map.</p>\n</blockquote>\n\n<p>Now in order to find the shortest path for $N$ cities length we need to create all the maps with $\\frac{N + 1}{2}$ length and just one map with $N$ length. In cases when $N$ is not belong to $f(x) = f(x - 1)  * 2 - 1$; we will still need to create the biggest maps length group possible but we will have more than 1 city in common when we will split the problem in 2 maps. For example when N = 10. We will create all the 4 length maps, and all the 7 length maps. Lets give a sample: For the given cities A,B,C,D,E,F,G,H,I,A find the shortest path. We will split it in two maps of 7.</p>\n\n<ul>\n<li>Map 1: From A to G thru B,C,D,E,F</li>\n<li>Map 2: From D to A thru E,F,G,H,I</li>\n</ul>\n\n<p>For map 1 we will choose who is going to be the last city, we have 8 options to that.\nAnd we have $5C8$ options for the cities of the map 1, and the rest is going to map 2. You may ask yourself now how could it be that map 1 will actually have the exact common cities with map 2, isn\'t there a chance that they be ordered in some other way. Well according to my base assumption there isn\'t. so if we will sum it all together we will get: 448 options for that. Now lets say it in general way: To find the shortest path for input of $N$ cities, we will first need to find all the maps with $length &lt; N$ that belongs to $f(x) = f(x - 1)  * 2 - 1; F(0) = 4$. Lets say that the longest map of all those maps is G length and $f^{-1}(G) = G\'$( sorry for not knowing how to express $G$ with $N$). So we will have $N - 2$ options for the last city of map 1 and $(G - 2)C(N - 2)$ summing it up will give:</p>\n\n<blockquote>\n  <p>$\\frac{(N - 2)!} {(N - G)!(G - 2)!}$</p>\n</blockquote>\n\n<p>So the efficiency of finding the shortest path for N cities will be(Also added the time it will take to create the first 4 length maps) </p>\n\n<blockquote>\n  <p>$(\\frac{N(N-1)(N-2)(N-3)}{2}) + (\\sum_{i}^{G\'}\\frac{(f(i) - 2)!}{(\\frac{f(i) - 3}{2}!)^2})+ (\\frac{(N - 2)!} {(N - G)!(G - 2)!})$</p>\n  \n  <p>Using $f(x)=f(x\u22121)\u22172\u22121;F(0)=4$</p>\n</blockquote>\n\n<p>I think its better than $O(2^N)$</p>\n\n<p>Please help me to do the math, and tell me if I have any mistakes in my math or conclusions. Also please avoid writing an answers without fully understanding what I stated you are welcome to ask me more in <a href="http://chat.stackexchange.com/rooms/11065/tsp-chat">chat</a>.</p>\n', 'ClosedDate': '2014-02-02T11:24:39.057', 'Tags': '<complexity-theory><np-complete><np-hard><traveling-salesman>', 'LastEditorUserId': '10572', 'LastActivityDate': '2013-10-18T07:59:35.663', 'CommentCount': '12', 'CreationDate': '2013-10-14T14:53:59.097', 'Id': '16076'},2953:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '254', 'Title': 'Does coNP-completeness imply NP-hardness?', 'LastEditDate': '2013-10-23T21:26:48.343', 'AnswerCount': '2', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '8877', 'FavoriteCount': '1', 'Body': '<p>Does coNP-completeness imply NP-hardness? In particular, I have a problem that I have shown to be coNP-complete. Can I claim that it is NP-hard? I realize that I can claim coNP-hardness, but I am not sure if that terminology is standard.</p>\n\n<p>I am comfortable with the claim that if an NP-complete problem belonged to coNP, then NP=coNP. However, <a href="http://www.csie.ntu.edu.tw/~lyuu/complexity/2004/c_20041117.pdf" rel="nofollow">these lecture notes</a> state that if an NP-hard problem belongs to coNP, then NP=coNP. This would then suggest that I cannot claim that my problem is NP-hard (or that I have proven coNP=NP, which I highly doubt).</p>\n\n<p>Perhaps, there is something wrong with my thinking. My thought is that a coNP-complete problem is NP-hard because:</p>\n\n<ol>\n<li>every problem in NP can be reduced to its complement, which will belong to coNP.</li>\n<li>the complement problem in coNP reduces to my coNP-complete problem.</li>\n<li>thus we have a reduction from every problem in NP to my coNP-complete, so my problem is NP-hard.</li>\n</ol>\n', 'Tags': '<complexity-theory><np-hard>', 'LastEditorUserId': '8877', 'LastActivityDate': '2013-10-24T14:03:18.837', 'CommentCount': '1', 'AcceptedAnswerId': '16376', 'CreationDate': '2013-10-23T19:46:17.283', 'Id': '16371'},2954:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have a problem in understanding how to prove the following question.</p>\n\n<p>Let $Q = \\langle\\max,f,L\\rangle$ be an NPO-Problem, where $f$ only supports integers. \nDefine $$L_Q^* =\\{(x_0,1^k) : \\exists x . L(x_0,x) \\land f(x_0,x) \\geq k\\}.$$\nThe instance of $x_0$ is binary coded, while the numerical parameter $k$ is unary coded. Show that if $L_Q^*$ is NP-complete, then there is no FPTAS for $Q$.\nIt can be assumed that $P \\neq NP$.</p>\n\n<p>Normally I have some ideas, but this time I am really stumped. My only idea was to use the fact that if $L_Q^*$ has an approximation scheme, then $f$ must run in time polynomial in $|x_0|+|x|$.</p>\n', 'ViewCount': '111', 'Title': 'NP-hardness and FPTAS', 'LastEditorUserId': '10940', 'LastActivityDate': '2013-10-30T09:53:21.487', 'LastEditDate': '2013-10-24T10:36:46.610', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16378', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10940', 'Tags': '<np-hard><approximation>', 'CreationDate': '2013-10-23T21:18:59.300', 'Id': '16373'},2955:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '82', 'Title': 'Is MIN or MAX-True-2-XOR-SAT NP-hard?', 'LastEditDate': '2013-11-04T19:22:00.093', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '1', 'Body': '<p><strong>Is there a proof or reference that $\\left\\{\\text{MAX},\\text{MIN}\\right\\}\\text{-True-2-XOR-SAT}$ is $NP$-hard, or that it (the decision version) is in $P$?</strong></p>\n\n<p>Let:</p>\n\n<p>$$\\Phi\\left(\\mathbf x\\right)={\\huge\\wedge}_{i}^{n}C_i,\\\\\n\\forall_{C_i} \\left.C_i=(p \\oplus q)\\right|_{\\left(p\\in \\mathbf x \\vee\\neg p\\in\\mathbf x\\right),\\left(q\\in \\mathbf x \\vee\\neg q\\in\\mathbf x\\right)}\n$$</p>\n\n<p>The $\\text{2-XOR-SAT}$ problem is to find a satisfying assignment of $\\mathbf x$ that would make $\\Phi\\left(\\mathbf x\\right)=T$. This is in $P$, as it can be encoded in a set of linear equations mod $2$.</p>\n\n<p>The $\\left\\{\\text{MAX},\\text{MIN}\\right\\}\\text{-True-2-XOR-SAT}$ problems are to maximize or minimize the number of true values in $\\mathbf x$, respectively, subject to the constraint that $\\Phi\\left(\\mathbf x\\right)=T$.</p>\n', 'Tags': '<complexity-theory><np-hard><satisfiability>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-11-04T19:22:00.093', 'CommentCount': '5', 'AcceptedAnswerId': '16689', 'CreationDate': '2013-11-03T23:08:22.110', 'Id': '16682'},2956:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>What is the complexity of MIN-2-XOR-SAT and MAX_2-XOR-SAT?  Are they in P?  Are they NP-hard?</p>\n\n<p>To formalize this more precisely, let</p>\n\n<p>$$\\Phi\\left(\\mathbf x\\right)={\\huge\\wedge}_{i}^{n}C_i,$$</p>\n\n<p>where $\\mathbf{x} = (x_1,\\dots,x_m)$ and each clause $C_i$ is of the form $(x_i \\oplus x_j)$ or $(x_i \\oplus \\neg x_j)$.</p>\n\n<p>The $\\text{2-XOR-SAT}$ problem is to find an assignment to $\\mathbf{x}$ that satisfies $\\Phi$.  This problem is in $P$, as it corresponds to a system of linear equations mod $2$.</p>\n\n<p>The $\\text{MAX-2-XOR-SAT}$ problem is to find an assignment to $\\mathbf{x}$ that maximizes the number of clauses that are satisfied.  The $\\text{MIN-2-XOR-SAT}$ problem is to find an assignment to $\\mathbf{x}$ that minimizes the number of clauses that are satisfied.  What are the complexities of these problems?</p>\n\n<p>Inspired by <a href="http://cs.stackexchange.com/q/16682/755">Is MIN or MAX-True-2-XOR-SAT NP-hard?</a></p>\n', 'ViewCount': '108', 'Title': 'MIN-2-XOR-SAT and MAX-2-XOR-SAT: are they NP-hard?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-04T19:19:55.910', 'LastEditDate': '2013-11-04T19:19:55.910', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<complexity-theory><optimization><np-hard><satisfiability>', 'CreationDate': '2013-11-04T03:28:01.333', 'Id': '16691'},2957:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '638', 'Title': 'Is Dominosa NP-Hard?', 'LastEditDate': '2013-11-12T22:26:57.560', 'AnswerCount': '2', 'Score': '20', 'OwnerDisplayName': 'user987415', 'PostTypeId': '1', 'OwnerUserId': '10573', 'FavoriteCount': '4', 'Body': '<p>Dominosa is a relatively new puzzle game. It is played on an $(n+1)\\times(n+2)$\n  grid. Before the game begins, the domino bones  $\\left(0,0\\right),\\left(0,1\\right),\\ldots,\\left(n,n\\right)$\n  are placed on the grid (constituting a perfect tiling). In the next step, the domino bones are hidden, leaving only the numbers revealed. The purpose of the game is to recover the original arrangement of the domino bones.\nYou can play the game here: <a href="http://www.puzzle-dominosa.com/">http://www.puzzle-dominosa.com/</a>:</p>\n\n<p>Rules:</p>\n\n<blockquote>\n  <p>The rules are simple. You have to find the location of all the dominoes on the grid. A domino is a pair of numbers. You can only have one of each pair.</p>\n</blockquote>\n\n<p>I have some polynomial algorithms that solve a relatively small part of the puzzle. I could also show that typical Dominosa grids have at least $2^{\\frac{n}{2}+o\\left(n\\right)}$ solutions.</p>\n\n<p>Is Dominosa NP-Hard? </p>\n', 'Tags': '<complexity-theory><np-hard><board-games><tiling>', 'LastEditorUserId': '2755', 'LastActivityDate': '2013-12-10T15:02:32.800', 'CommentCount': '9', 'CreationDate': '2013-09-12T12:18:43.740', 'Id': '16850'},2958:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I would like to show that Quadratic Programming is NP-hard.</p>\n\n<p>I am currently reading a couple of papers which state that QP is NP-Hard and prove it by transforming SAT to QP, however I am finding the diction quite tough since I am just a beginner in the field. Would anyone happen to know the answer to this question who can maybe explain it to me in simpler terms?</p>\n', 'ViewCount': '66', 'Title': 'Transforming SAT to Quadratic Programming in polynomial time', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-12T16:52:50.120', 'LastEditDate': '2013-11-12T16:52:50.120', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '17952', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11330', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-11-12T06:44:40.763', 'Id': '17946'},2959:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For a homework question I need to show an explicit reduction from independent set (of size k) to CNF-SAT. I don\'t have anything formal written out so I will just give an idea of what I think needs to be done, any feedback or hint/help would be greatly appreciated:</p>\n\n<p>So I figure that given my a graph $G$ (it doesn\'t state in the question but I am guessing it is undirected graph) and an integer $G$ my variables for the boolean formula that I will need to define composes of the following:</p>\n\n<p>$var(\\phi) = \\{s_{ij}\\ | 1\\leq i \\leq k, j\\in{V}\\}$ where $s_{ij}$ is the $i$-th element of the independent set $S$ is $j$, which is node in the graph $G$. Now I want to convert this into a series of clauses that will be a series of conjunctions so I have these in mind:</p>\n\n<p>Have one series of conjunctions that will be every "not pair" of elements, i.e. $(\\overline{s_{ia}}\\vee \\overline{s_{ib}})$, that will indicate that no two nodes are the same in the $i$-th spot in the independent set S. Another series of conjunctions that will consists of every 2,3,4, all the way to k pairs of elements such that no elements in the clause share an edge. Then we take the conjunctions of these two major groups and that will be my Boolean formula. Like I said any feedback or if you want me to clarify something would be great!</p>\n', 'ViewCount': '79', 'ClosedDate': '2013-11-13T22:06:09.400', 'Title': 'Giving an explicit reduction for IND-SET $\\leq_{p}$ CNF-SAT', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-13T22:05:35.303', 'LastEditDate': '2013-11-13T22:05:35.303', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10880', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2013-11-12T22:18:12.250', 'Id': '17972'},2960:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '128', 'Title': 'Can Euclidean TSP be exactly solved in time better than (sym)metric TSP?', 'LastEditDate': '2013-11-20T22:51:30.667', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2755', 'FavoriteCount': '1', 'Body': u'<p>Symmetric/Metric TSP can be solved via the Held-Karp algorithm in $\\mathcal O(n^2 2^n)$.</p>\n\n<p>See <a href="http://epubs.siam.org/doi/abs/10.1137/0110015">A dynamic programming approach to sequencing problems</a> by Michael Held and Richard M. Karp, 1962.</p>\n\n<p>In <a href="http://faculty.cs.tamu.edu/chen/courses/689/2006/reading/w1.pdf">Exact Algorithms for NP-Hard Problems: A Survey (PDF)</a> Woeginger writes:</p>\n\n<blockquote>\n  <p>This result was published in 1962, and from nowadays point of view almost looks trivial. Still, it yields the best time complexity that is known today.</p>\n</blockquote>\n\n<p>Thus, this is the best known upper-bound.</p>\n\n<p><b>Question:</b></p>\n\n<blockquote>\n  <p>Are there any better results for Euclidean TSP? Or does that best-known bound apply to Euclidean TSP as well.</p>\n</blockquote>\n\n<p>How is Euclidean TSP different? Well,</p>\n\n<ul>\n<li>Euclidean TSP can be encoded into $\\mathcal O(n \\log m)$ space, where $n$ is the number of cities, and $m$ is the bound on the integer coordinates of the city locations. As opposed to (sym)metric TSP variants, which essentially require a distance matrix of size $\\mathcal O(n^2 \\log m)$. Thus, it might be easier to solve; for example, perhaps Euclidean TSP can be more easily encoded into k-SAT, because the distance function is implicit.</li>\n<li><p>Contrary to popular notion, Euclidean TSP\'s reduction from k-SAT is quite different from (sym)metric TSP. UHC (undirected Hamiltonian cycle), symmetric TSP, and metric TSP are pretty directly related to each-other. But formulations of reductions from (sym)metric TSP to Euclidean TSP are not easy to come by. Paragraph, from interesting article, <a href="http://rjlipton.wordpress.com/2012/04/22/the-travelling-salesmans-power/">The Travelling Salesman\u2019s Power</a> by K. W. Regan (bold mine):</p>\n\n<blockquote>\n  <p>Now the reductions from 3SAT to TSP, especially Euclidean TSP, are less familiar, and we ascribe this to their being far more \u201cexpansive.\u201d <b>Texts usually reduce 3SAT to Hamiltonian Cycle, then present the latter as a special case of TSP, but this does not apply to Euclidean TSP</b>. The ${\\mathsf{NP}}$-completeness of Euclidean TSP took a few years until being shown by Christos Papadimitriou, and a 1981 <a href="http://www.cs.technion.ac.il/~itai/publications/Algorithms/Hamilton-paths.pdf">paper</a> by him with Alon Itai and Jayme Luiz Szwarcfiter advertised a \u201cnew, relatively simple, proof.\u201d This proof uses vertex-induced subgraphs of the grid graph in the plane, for which the shortest possible TSP tour and any Hamiltonian cycle have the same length. Despite this simplification, the gadgets involved are large\u2014a diagram of one occupies most of one journal page.</p>\n</blockquote>\n\n<p>Hunting down k-SAT $\\rightarrow$ Euclidean TSP reductions is quite an adventure; so far I\'ve found two of them. One $\\rm k\\text{-}SAT \\rightarrow CircuitSAT \\rightarrow PlanarCircuitSAT \\rightarrow EuclideanTSP$, and another, even tougher one to find, $\\rm k\\text{-}SAT \\rightarrow DHC \\rightarrow UHC \\rightarrow PlanarUHC \\rightarrow EuclideanTSP$. The latter reduction can perhaps be seen to make Euclidean TSP parallel (sym)metric TSP.</p></li>\n</ul>\n', 'Tags': '<graph-theory><reference-request><time-complexity><np-hard><traveling-salesman>', 'LastEditorUserId': '2755', 'LastActivityDate': '2014-02-05T14:16:06.677', 'CommentCount': '0', 'AcceptedAnswerId': '18218', 'CreationDate': '2013-11-20T22:46:01.723', 'Id': '18209'},2961:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I have no clue how to prove this question. </p>\n\n<p>Consider the language </p>\n\n<p>$L = \\{ \\langle D_1, D_2, ... ,D_K \\rangle : k \\in {N},$ the $D_i$ are DFAs and ${\\bigcap}_{i=1}^k L(D_i) = \\emptyset \\}$</p>\n\n<p>Prove that L is NP-hard.</p>\n\n<p>Can someone guide me through this problem? I understand that I will have to reduce it into something, I just don't know what to reduce to. </p>\n", 'ViewCount': '80', 'Title': 'Prove L is NP-hard', 'LastActivityDate': '2013-11-26T08:43:06.103', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11328', 'Tags': '<np-hard>', 'CreationDate': '2013-11-25T23:55:17.633', 'FavoriteCount': '2', 'Id': '18340'},2962:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I'm asked to prove that, if P=NP, that 0*1* is NP-complete, but I'm having trouble going about doing it. I know it's fairly easy to prove it's NP by creating a TM to verify an input (which can be done in O(n) time, and that's polynomial). </p>\n\n<p>But then I now have to reduce an NP-complete problem to 0*1* in order to prove that 0*1* is NP-complete. I'm thinking reducing SAT to it, but I have no idea how to do that, since in SAT all you can use is and, or, and negate, and there's no way to tell if a 1 came before a 0 in an input by doing that (at least, as far as I can tell).</p>\n\n<p>Thanks</p>\n", 'ViewCount': '212', 'Title': 'Having trouble proving a language is NP-complete', 'LastActivityDate': '2014-01-03T00:14:15.713', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '18400', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11300', 'Tags': '<complexity-theory><np-complete><np-hard><np>', 'CreationDate': '2013-11-27T00:07:47.700', 'FavoriteCount': '1', 'Id': '18399'},2963:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>The question (Prove L is NP-hard) was about proving that the following language is NP-hard:\n$$ L = \\{ \\langle D_1, D_2, ... ,D_K \\rangle : k \\in {N}\\text{, the } D_i \\text{ are DFAs and } {\\bigcap}_{i=1}^k L(D_i) = \\emptyset \\} $$</p>\n\n<p>That got me thinking about the related problem:</p>\n\n<p>$$ L' = \\{ \\langle D_1, D_2, ... ,D_K \\rangle : k \\in {N}\\text{, the } D_i \\text{ are DFAs and } {\\bigcap}_{i=1}^k L(D_i) \\neq \\emptyset \\} $$</p>\n\n<p>I would imagine that $L'$ is also NP-hard, but I couldn't think of any reductions.. am I missing something obvious? </p>\n", 'ViewCount': '70', 'Title': 'Proving $ \\{ \\langle D_1, ... ,D_K \\rangle : \\text{ where } D_i \\text{ are DFAs and } {\\bigcap}_{i=1}^k L(D_i) = \\emptyset \\} $ is NP-Hard', 'LastActivityDate': '2013-11-27T05:25:17.433', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18405', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10448', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2013-11-27T04:01:13.527', 'Id': '18402'},2964:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Let Two-Solutions-SAT be the language of Boolean formulas that have exactly two distinct satisfying assignments. Show Two-Solutions-SAT is co-NP-hard.</p>\n\n<p>I know how to show that the complement of Two-Solutions-SAT is in NP, it's relatively easy to create a nondeterministic polynomial time TM that decides it.</p>\n\n<p>My problem comes with reducing from SAT to the complement of Two-Solutions-SAT. I understand how to reduce from SAT to 3SAT, but in the case of 3SAT you will always have CNF's with 3 variables. With the complement of Two-Solutions-SAT, you have to somehow reduce to the case where you have 0 or 1 or >= 3 distinct satisfying assignments, and I'm not sure how to go about reducing to that.</p>\n\n<p>Thanks</p>\n", 'ViewCount': '260', 'Title': 'Question on SAT reduction', 'LastActivityDate': '2013-12-12T02:56:18.300', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '18909', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11300', 'Tags': '<complexity-theory><np-complete><reductions><np-hard>', 'CreationDate': '2013-12-10T05:24:42.023', 'FavoriteCount': '1', 'Id': '18815'},2965:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the following problem: given a set of $m$ red points and $n$ blue points in the plane, find a minimum length cycle that separates the red points from the blue points. That is, the red points are inside the cycle and the blue points are outside the cycle, or vice versa. This problem is called the <em>red blue separation problem</em>.</p>\n\n<p>I am trying to reduce the Traveling Salesman Problem (TSP) to this but I am getting nowhere. Can you please help me with this? Any help is appreciated.</p>\n', 'ViewCount': '122', 'Title': 'Prove the red blue separation problem is NP-complete', 'LastEditorUserId': '472', 'LastActivityDate': '2013-12-13T18:02:00.340', 'LastEditDate': '2013-12-13T18:02:00.340', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '18872', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12004', 'Tags': '<algorithms><algorithm-analysis><np-complete><np-hard><np>', 'CreationDate': '2013-12-11T00:44:22.820', 'Id': '18852'},2966:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': u'<p>While reading a passage in an older textbook I came upon this problem which I am having difficulty in justifying whether its true or false. Is this possible? </p>\n\n<p>If some problem $A$ is NP-hard, and if that problem $A$ can be reduced to problem $B$, and there exists some polynomial-time algorithm which solves $B$, then P=NP?</p>\n\n<p>While I understand that the view is $P\u2260NP$, if the above case were true would $P=NP$?</p>\n', 'ViewCount': '50', 'Title': 'NP-hardness given some reducible language', 'LastActivityDate': '2013-12-11T01:25:13.597', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9912', 'Tags': '<graph-theory><np-hard>', 'CreationDate': '2013-12-11T01:07:43.380', 'Id': '18854'},2967:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><strong>Background:</strong> The <code>Exact-3D-Matching</code> problem is defined as follows (The definition is from Jeff\'s lecture note: <a href="http://www.cs.uiuc.edu/~jeffe/teaching/algorithms/notes/29-nphard.pdf" rel="nofollow">Lecture 29: NP-Hard Problems</a>. You can also refer to <a href="https://en.wikipedia.org/wiki/3-dimensional_matching" rel="nofollow">3-dimensional matching</a>):</p>\n\n<blockquote>\n  <p><em>Exact-3D-Matching:</em> Given a set $S$ and a collection of three-element subsets of $S$, called <em>triples</em>, is there a sub-collection of disjoint triples that exactly cover $S$?</p>\n</blockquote>\n\n<p>The <code>3-Partition</code> problem is defined as (It is also from <a href="http://www.cs.uiuc.edu/~jeffe/teaching/algorithms/notes/29-nphard.pdf" rel="nofollow">Lecture 29: NP-Hard Problems</a>. You can also refer to <a href="https://en.wikipedia.org/wiki/3-partition_problem" rel="nofollow">3-partition problem</a>.):</p>\n\n<blockquote>\n  <p>Given a set $S$ of $3n$ integers, can it be partitioned into $n$ disjoint three-element subsets, such that every subsets has exactly the same sum?</p>\n</blockquote>\n\n<p>It is known that the <code>3-Partition</code> problem can be proved to be NP-complete by reducing the NP-complete <code>Exact-3D-Matching</code> problem to it. And the NP-completeness of the <code>Exact-3D-Matching</code> problem is proved by reducing the <code>3SAT</code> problem to it (both are given in the book <a href="https://en.wikipedia.org/wiki/Computers_and_Intractability" rel="nofollow">Computers and Intractability: A Guide to the Theory of NP-Completeness</a>).</p>\n\n<p><strong>Problem:</strong> \nMy problem is:</p>\n\n<blockquote>\n  <p>How to prove the NP-completeness of the <code>Exact-3D-Matching</code> problem by reducing the <code>3-Partition</code> problem to it?</p>\n</blockquote>\n\n<p>I have found neither papers nor lecture notes on it.</p>\n', 'ViewCount': '131', 'Title': 'How to prove the NP-completeness of the ``Exact-3D-Matching`` problem by reducing the ``3-Partition`` problem to it?', 'LastEditorUserId': '4911', 'LastActivityDate': '2013-12-19T14:18:21.653', 'LastEditDate': '2013-12-19T11:13:30.527', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19095', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4911', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2013-12-18T09:41:58.583', 'Id': '19092'},2968:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Lets assume $P = NP$. Can we say if every language $L \\in P$, then $L \\in NPC$?</p>\n\n<p>I read $P \\subseteq NP$, which means that $L\\in NP$. So I know for example, that a language can be $NP \\text{ hard}$, but it doesn't have to be in $NP$, e.g. $HALT$.</p>\n\n<p>But what about the case above. Is the language also $NPC$?</p>\n", 'ViewCount': '141', 'Title': 'P vs NP: Assuming P = NP', 'LastEditorUserId': '11941', 'LastActivityDate': '2013-12-28T00:21:54.187', 'LastEditDate': '2013-12-27T17:43:11.793', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11941', 'Tags': '<complexity-theory><np-complete><np-hard><np><polynomial-time>', 'CreationDate': '2013-12-27T17:37:27.420', 'Id': '19328'},2969:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p><a href="http://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems" rel="nofollow">Karp\'s 21 NP-complete problems</a> show that 0-1 integer linear programming is NP-hard. That is, an integer linear program with binary variables.</p>\n\n<p>If we set the $c^T$ vector of the objective $\\text {maximize } c^Tx$ to all one (unweighted, i.e., $c^T=(1,1,\\dots,1)$) is the problem still NP-hard?</p>\n', 'ViewCount': '95', 'Title': 'Is 0-1 integer linear programming NP-hard when $c^T$ is the all-ones vector?', 'LastEditorUserId': '755', 'LastActivityDate': '2013-12-31T06:22:31.170', 'LastEditDate': '2013-12-31T06:21:22.400', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19379', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><np-hard><linear-programming>', 'CreationDate': '2013-12-30T16:49:35.700', 'Id': '19378'},2970:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the 3-SAT problem where the formula is in conjunctive normal form and we restrict the Boolean formulas such that the number of clauses in the formula is equal to the number of variables. Is this problem still NP-hard?</p>\n\n<p>For example, this formula has $3$ variables and has $3$ clauses $(\\lnot x_1 \\vee \\lnot x_2 \\vee \\lnot x_3 ) \\wedge (\\lnot x_1 \\vee \\lnot x_3) \\wedge (\\lnot x_2 \\vee \\lnot x_3)$,</p>\n\n<p>and the following formula has three variables but has only two clauses $(\\lnot x_1 \\vee \\lnot x_2 \\vee \\lnot x_3  ) \\wedge (\\lnot x_2 \\vee \\lnot x_3)$.</p>\n', 'ViewCount': '96', 'Title': '3-SAT problem with number of clauses equal to number of variables', 'LastEditorUserId': '472', 'LastActivityDate': '2014-01-09T09:28:49.803', 'LastEditDate': '2014-01-08T19:18:32.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '19584', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><np-hard><satisfiability>', 'CreationDate': '2014-01-08T16:54:27.993', 'Id': '19582'},2971:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>For example, how is it proven that any NP problem can reduce to subset sum, circuit satisfiability, etc.? Or could you link to a proof?</p>\n', 'ViewCount': '54', 'ClosedDate': '2014-01-10T09:06:55.770', 'Title': 'How do we know that all NP problems reduce to NP-hard problems?', 'LastActivityDate': '2014-01-13T03:08:58.583', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '19617', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '12725', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2014-01-10T05:38:10.027', 'Id': '19616'},2972:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I have the following problem.</p>\n\n<blockquote>\n  <p>Maximize $\\sum\\limits_{m=1}^M\\sum\\limits_{n=1}^N x_{mn}$</p>\n  \n  <p>subject to: $\\sum\\limits_{\\substack{m^\\prime=1\\\\ m^\\prime \\neq m}}^M\\sum\\limits_{\\substack{n^\\prime=1\\\\ n^\\prime \\neq n}}^N \\alpha_{mn^\\prime}x_{m^\\prime n^\\prime} \\leq \\alpha_{mn},~~ \\forall~ m\\in\\{1, 2, \\cdots, M\\}, \\forall~ n\\in\\{1, 2, \\cdots, N\\} .$</p>\n  \n  <p>where, $x_{mn} \\in \\{0, 1\\}$, and $\\alpha_{mn} \\in \\mathbb{R} ~\\forall~ m\\in\\{1, 2, \\cdots, M\\}, \\forall~ n\\in\\{1, 2, \\cdots, N\\}$ </p>\n</blockquote>\n\n<p>Please can I say that this is a knapsack problem? \nIs there a way to find a reduction from knapsack problem? In the <a href="http://en.wikipedia.org/wiki/List_of_knapsack_problems" rel="nofollow">most basic form of knapsack problem</a>, if the weights are all equal 1 the optimal solution is easy to solve.</p>\n', 'ViewCount': '61', 'Title': 'Is this problem a knapsack problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-22T21:40:49.310', 'LastEditDate': '2014-01-22T21:40:49.310', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12683', 'Tags': '<complexity-theory><optimization><np-hard><knapsack-problems><integer-programming>', 'CreationDate': '2014-01-22T18:58:47.070', 'Id': '19897'},2973:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Given a set of line segments, how do we identify a subset of maximal cardinality where all line segments are pairwise non-intersecting?</p>\n\n<p>Brute force we would get $2^n$ sets to check where $n$ is the number of line segments, so that isn\'t viable. Anyone got a bright idea how the do this efficiently? I tried doing it this way: remove a line segment that intersects with the most other line segments, iterate until no line segments intersect anymore; but that didn\'t work.</p>\n\n<hr>\n\n<p><a href="http://jsfiddle.net/afaucogney/RwNXL/" rel="nofollow">Here</a> is a "ready to help me" place, where you can test your solution; it visualizes the set of line segments.</p>\n\n<p>To try it out, please implement your attempt in the following function on the linked site:</p>\n\n<pre><code>function showAnalysis() {\n    debug("Just do it");\n}\n</code></pre>\n\n<p>and then click on the top canvas. The fiddle generates randoms segments in the top canvas, and the bottom canvas is the place where an optimal subset will be displayed.</p>\n', 'ViewCount': '117', 'Title': 'Efficiently pick a largest set of non-intersecting line segments', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-07T07:22:28.420', 'LastEditDate': '2014-02-07T07:22:28.420', 'AnswerCount': '1', 'CommentCount': '10', 'Score': '1', 'OwnerDisplayName': 'Anthony', 'PostTypeId': '1', 'Tags': '<algorithms><optimization><np-hard><efficiency>', 'CreationDate': '2014-01-22T14:04:07.477', 'Id': '20263'},2974:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>If any problem P is NP complete then if there is a polynomial time reduction of P to another problem R then what can we say about R.Is it NP-hard or NP complete ?<br>\nFrom Theory of computation of Hopcroft,Ullman theorem 10.4 it says it would be NP complete but there some times when i see that it is NP-Hard in some other reference . is there any condition when it is NP Hard or NP Complete .Or i misunderstood the theorem .</p>\n', 'ViewCount': '33', 'Title': 'NP hard relation with NP complete', 'LastEditorUserId': '9550', 'LastActivityDate': '2014-02-13T20:29:01.697', 'LastEditDate': '2014-02-13T19:17:11.720', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14647', 'Tags': '<complexity-theory><np-complete><np-hard>', 'CreationDate': '2014-02-13T18:43:05.647', 'Id': '21604'},2975:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Suppose I wanted to find all valid <a href="http://en.wikipedia.org/wiki/Net_%28polyhedron%29" rel="nofollow">nets</a> of a polyhedron. Is this kind of problem NP-Hard?</p>\n\n<p>My guess is that it is. If you were to increase the "complexity" of the polyhedron (maybe this is the number of faces?), there is no "shortcut" to discovering all the nets; you would have to enumerate all combinations. This sort of "listing all combinations" without any shortcuts seems to be similar to other kind of NP problems I\'ve seen. Is my thinking correct? Can someone else explain their thought process that helps them decide whether this problem is NP-Hard or not?</p>\n\n<p>If this problem is not NP-Hard, how do you classify this and why?</p>\n', 'ViewCount': '68', 'Title': 'Is finding all valid nets of a polyhedron NP-hard?', 'LastEditorUserId': '472', 'LastActivityDate': '2014-02-17T09:40:02.893', 'LastEditDate': '2014-02-17T09:40:02.893', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14728', 'Tags': '<complexity-theory><computational-geometry><np-hard>', 'CreationDate': '2014-02-16T21:54:30.863', 'Id': '21708'},2976:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '86', 'Title': 'minimizing the summed cardinality of set unions', 'LastEditDate': '2014-02-24T17:46:51.283', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14883', 'FavoriteCount': '1', 'Body': '<p>this optimization problem, I am working on, is kind of making me crazy. ;)</p>\n\n<p>Given is a list <code>o</code> of sets (with finite cardinality) of strictly positive integer values (Z>0), e.g.:</p>\n\n<pre><code>o_without_sizes =\n[ {1, 2, 3, 4}\n, {5, 6}\n, {2, 3, 4, 5}\n, {5, 6, 7}\n, {7, 8}\n. {9} ]\n</code></pre>\n\n<p>Every set has a name <code>n</code> (also in Z>0, but only for identification) and a fixed independent size value <code>s</code> (also in Z>0), e.g.:</p>\n\n<pre><code>type O = [(Name, Size, Values)]\no =\n[ (1, 2, {1, 2, 3, 4})\n, (2, 1, {5, 6})\n, (3, 2, {2, 3, 4, 5})\n, (4, 3, {5, 6, 7})\n, (5, 2, {7, 8})\n. (6, 1, {9}) ]\n</code></pre>\n\n<p>These sets are to be combined to unions <code>b</code> of a maximum size value sum <code>h (&gt;= max s, that means that no set has a size making it too big to fit into a single union)</code>, e.g. 4.</p>\n\n<p>The goal is to find the <code>b</code> so that the sum of cadinalities of the unions in it is as small as possible.\nhere is a bad <code>b</code>:</p>\n\n<pre><code>size:   3,  cardinality:   6,   sets: [1,2]  ,  values: [1,2,3,4,5,6]\nsize:   2,  cardinality:   4,   sets: [3]    ,  values: [2,3,4,5]\nsize:   3,  cardinality:   3,   sets: [4]    ,  values: [5,6,7]\nsize:   3,  cardinality:   3,   sets: [5,6]  ,  values: [7,8,9]\ncardinality sum:  16\n</code></pre>\n\n<p>and the optimum <code>b</code> for this example:</p>\n\n<pre><code>size:   4,  cardinality:   5,   sets: [3,1]  ,  values: [1,2,3,4,5]\nsize:   4,  cardinality:   3,   sets: [2,4]  ,  values: [5,6,7]\nsize:   3,  cardinality:   3,   sets: [5,6]  ,  values: [7,8,9]\ncardinality sum:  11\n</code></pre>\n\n<p>Until now I only implemented a naive brute force solution (Haskell code): <a href="http://lpaste.net/7204008959806537728" rel="nofollow">http://lpaste.net/7204008959806537728</a></p>\n\n<p>I was hoping to find a dynamic programming solution like it exists for the (Z>0) 0-1 knapsack problem, but did not yet succeed.\nIs my problem perhaps NP-hard? If so, is it many-one-reducible to SAT or something? Or is there a good approximation?</p>\n\n<p>Of course, if there exists a known efficient optimal algorithm, it would be awesome if you could enlighten me. :)</p>\n', 'Tags': '<algorithms><np-complete><optimization><dynamic-programming><np-hard>', 'LastEditorUserId': '14883', 'LastActivityDate': '2014-02-24T17:46:51.283', 'CommentCount': '2', 'AcceptedAnswerId': '21867', 'CreationDate': '2014-02-20T19:25:23.093', 'Id': '21857'},2977:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '97', 'Title': 'Bin packing problem or not?', 'LastEditDate': '2014-03-01T16:16:32.943', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12683', 'FavoriteCount': '1', 'Body': '<p>Suppose I have $N$ bins and $M$ items as depicted in the figure below (3 bins and 3 items):</p>\n\n<p>Suppose that every bin has unit capacity and the weights of the items depend on the bins used. I want to maximize the number of items in the bins subject to:</p>\n\n<ul>\n<li>One bin contains at most one item.</li>\n<li>If item $i$ is on bin $j$ then $g_{ij}\\geq1$ must hold now if all other bins are empty.</li>\n<li>If item $i$ is on bin $j$ (so $g_{ij}\\geq1$ must hold now) and item $i^\\prime$ is on bin $j^\\prime$, then $g_{ij}\\geq g_{ij^\\prime}$ and $g_{i^\\prime j^\\prime}\\geq g_{i^\\prime j}$ must both hold now.</li>\n<li>If item $i$ is on bin $j$ (so $g_{ij}\\geq1$ must hold now) and item $i^\\prime$ is on bin $j^\\prime$ (so $g_{ij}\\geq g_{ij^\\prime}$ and $g_{i^\\prime j^\\prime}\\geq g_{i^\\prime j}$ must both hold now) and item $i^{\\prime\\prime}$ is on bin $j^{\\prime\\prime}$, then $g_{ij}\\geq g_{ij^\\prime}+g_{ij^{\\prime\\prime}}$ and $g_{i^\\prime j^\\prime}\\geq g_{i^\\prime j}+g_{i^\\prime j^{\\prime\\prime}}$ and $g_{i^{\\prime\\prime} j^{\\prime\\prime}}\\geq g_{i^{\\prime\\prime} j}+g_{i^{\\prime\\prime} j^{\\prime}}$ must all hold now.</li>\n<li>And so on and so forth.</li>\n<li>In general I will have the following constraint: $g_{ij}x_{ij}\\geq\\sum\\limits_{i^\\prime=1,\\;i^\\prime \\neq i}^{M}\\sum\\limits_{j^\\prime=1,\\;j^\\prime \\neq j}^{N}g_{ij^\\prime}x_{i^\\prime j^\\prime}$, where $x_{ij}$ equals $1$ if item $i$ is in bin $j$ and equals $0$ otherwise.</li>\n</ul>\n\n<p>Finally, I have the following problem:</p>\n\n<p>Maximize $\\sum\\limits_{i=1}^{M}\\sum\\limits_{j=1}^{N}x_{ij}$</p>\n\n<p>subject to</p>\n\n<ul>\n<li><p>$\\frac{g_{ij}x_{ij}}{\\sum\\limits_{i^\\prime=1,\\;i^\\prime \\neq i}^{M}\\sum\\limits_{j^\\prime=1,\\;j^\\prime \\neq j}^{N}g_{ij^\\prime}x_{i^\\prime j^\\prime}}\\geq x_{ij},\\; \\forall i, j,$ (C1)</p></li>\n<li><p>$\\sum\\limits_{j=1}^{N}x_{ij}\\leq1,\\; \\forall i,$ (C2)</p></li>\n<li><p>$\\sum\\limits_{i=1}^{M}x_{ij}\\leq1,\\; \\forall j,$ (C3)</p></li>\n</ul>\n\n<p>and $x_{ij}\\in\\{0, 1\\},\\; \\forall i, j,$ (C4)</p>\n\n<p>The input of the problem is $M$, $N$, and $g_{ij},\\;\\forall i,j$. The right hand side of constraint (C1) is to say that when item $i$ is not in bin $j$ (i.e., $x_{ij}=0$) then (C1) is not violated. (C2) and (C3) say that one item goes to one bin and one bin contains one item, respectively. Finally, (C4) is the variable of the problem which is a binary variable.</p>\n\n<p>My question is: Can I say that this problem is a bin packing problem and it is therefore NP-hard? If not, Can you suggest a reduction idea from an NP-complete problem?</p>\n\n<p>Thank you for your help.</p>\n\n<p><img src="http://i.stack.imgur.com/xL94M.jpg" alt="enter image description here"></p>\n', 'Tags': '<complexity-theory><np-complete><optimization><np-hard>', 'LastEditorUserId': '12683', 'LastActivityDate': '2014-03-01T18:23:05.530', 'CommentCount': '5', 'AcceptedAnswerId': '22157', 'CreationDate': '2014-02-28T18:42:52.333', 'Id': '22136'},2978:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I want to show that some problem $P_1$ is NP-hard. I have a problem $P_2$ that is NP-complete. From an instance of $P_2$ I created in polynomial time an instance of the problem $P_1$.</p>\n\n<p>My question is: Should I verify both direction ($\\Leftrightarrow$) or only one direction ($\\Rightarrow$)? More precisely, which one to show from these two:</p>\n\n<ul>\n<li>Solve $P_1\\;\\Leftrightarrow$ solve  $P_2$</li>\n<li>Solve $P_1\\;\\Rightarrow$ solve  $P_2$</li>\n</ul>\n', 'ViewCount': '24', 'Title': 'There is equivalence in an NP-hardness proof or not?', 'LastActivityDate': '2014-03-03T22:03:14.687', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22240', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12683', 'Tags': '<complexity-theory><np-complete><reductions><np-hard>', 'CreationDate': '2014-03-03T21:51:46.457', 'Id': '22239'},2979:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider a set of $N$ nodes. There is a $N\\times N$ non-negative valued matrix $D$ where the $(i,j)$th element $d_{ij}$ gives the "positive metric" between node $i$ and $j$, where $i,j\\in [N]$. Thus the diagonal entries of $D$ are all zero and $d_{ij}=d_{ji}$ so $D$ is symmetric. </p>\n\n<p>Then there is a set of  $k$ colors. I want to assign these colors to the $N$ nodes such that the minimum  metric of a common color between any pair of nodes is maximized. So if $c(i)$ is the color assigned to $i\\in [N]$ by the assignment $a\\in A$, where $A$ is the set of all possible color assignments, we are looking for $$\\max_{a\\in A} \\min_{i,j} \\{d_{ij}:c(i)=c(j)\\}.$$</p>\n\n<p>Is this problem NP-hard?  If it is, cwhat sort of reduction can be used to show that this problem is NP-hard?</p>\n', 'ViewCount': '98', 'Title': 'Relaxed graph coloring, with penalties for assigning adjacent vertices the same color', 'LastEditorUserId': '755', 'LastActivityDate': '2014-03-14T15:39:13.670', 'LastEditDate': '2014-03-14T15:39:13.670', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22257', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12321', 'Tags': '<complexity-theory><reductions><np-hard>', 'CreationDate': '2014-03-04T03:42:40.617', 'Id': '22256'},2980:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m curious to know if this problem is NP-Hard / NP-Complete, which I believe would mean I\'m unlikely to find a polynomial-time algorithm to solve it.</p>\n\n<p>I have written a program which randomly generates a tournament fixture, and I call it many times to try to pack the matches into the smallest number of rounds.</p>\n\n<p>When it comes to complexity theory I am still a novice, so laymen\'s terms would be appreciated.</p>\n\n<p><strong>Inputs:</strong></p>\n\n<ul>\n<li>a set of countries, each of which may enter one or more entrants to the tournament (e.g. Australia might enter two entrants, UK might enter three entrants, and South Africa might enter one entrant)</li>\n</ul>\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n<li>each match consists of two entrants playing against each other</li>\n<li>during a round, an entrant can only play in a single match</li>\n<li>no entrant wants to compete in a match against another entrant from the same country</li>\n<li>no entrant wants to compete against another entrant more than once in the tournament</li>\n<li>each entrant must play the exact same number of matches overall</li>\n<li>the number of matches each entrant must play is determined by MIN(for each entrant, total number of possible matches that satisfy the other constraints)</li>\n</ul>\n\n<p>For example, say we have the following entrants:</p>\n\n<ul>\n<li>AU #1 and #2</li>\n<li>UK #1, #2 and #3</li>\n<li>SA #1</li>\n</ul>\n\n<p>The possible matches in this (artificially small) case are:</p>\n\n<pre><code>AU1 v. UK1   AU1 v. UK2   AU1 v. UK3   AU1 v. SA\nAU2 v. UK1   AU2 v. UK2   AU2 v. UK3   AU2 v. SA\nUK1 v. SA    UK2 v. SA    UK3 v. SA\n</code></pre>\n\n<p>Since we want each entrant to play the exact same number of games, the maximum number of games per entrant is three (this can be derived from the total number of entrants (6) less the number of entrants from the largest country (3)).</p>\n\n<p>Since there are six entrants in total, and there are two entrants to each match, the maximum number of courts we can utilise in a round is 3.</p>\n\n<p>A sample fixture is:</p>\n\n<pre><code>          Court 1      Court 2      Court 3\nRound 1   AU1 v. UK1   AU2 v. UK2   UK3 v. SA\nRound 2   AU1 v. UK2   AU2 v. UK3   UK1 v. SA\nRound 3   AU1 v. UK3   AU2 v. UK1   UK2 v. SA\n</code></pre>\n\n<p>This is a nice example because it\'s easy to find a solution where each entrant has played exactly 3 games each, and they all pack perfectly into 3 rounds across 3 courts. Two of the possible 11 matches have not been played, but we don\'t care. We sum the results from each entrant\'s 3 games to determine an overall ranking, which is then used to generate the finals matches.</p>\n\n<p>I have other scenarios where there are more entrants and I have been unable to pack them so neatly, but by running my program many times it almost always finds a near-optimal packing where the number of rounds and unused courts is minimised.</p>\n\n<p><strong>Output</strong></p>\n\n<p>The first problem is if there is a polynomial-time algorithm to generate an optimal fixture.</p>\n\n<p>The optimal fixture is defined by:</p>\n\n<ul>\n<li>minimum number of unused courts (which implies minimising the number of rounds)</li>\n</ul>\n\n<p>The second problem is, given a fixture "A", how to determine if it is an optimal solution, i.e. is it possible to prove that there can exist no better packings for a given set of entrants. If "A" involves no unused courts in any round, then the answer for that one is clearly "Yes" - but if there are any unused courts in any round, the answer is, I think, difficult to derive.</p>\n', 'ViewCount': '159', 'Title': 'Is building this tournament fixture an NP-Hard / NP-Complete problem?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-14T11:36:17.767', 'LastEditDate': '2014-03-15T11:32:25.760', 'AnswerCount': '1', 'CommentCount': '8', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '15583', 'Tags': '<complexity-theory><np-hard>', 'CreationDate': '2014-03-12T05:36:53.410', 'FavoriteCount': '2', 'Id': '22530'},2981:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I was just reading something about NP-hard problems and cryptosystems. </p>\n\n<p>I was thinking: Every NP-complete problem can be reduced to another and every NP-complete problem has an equivalent (NP-hard) optimisation problem. A successful attack on one such NP-hard cryptosystem $A$ would mean that every other NP-hard cryptosystem $B$ would be vulnerable to that same attack; just reduce $B$ to $A$ and use the available attack. </p>\n\n<p>That would actually mean that we would be able to extend Information Set Decoding attack of Code-based systems to any NP-hard based cryptosystem.</p>\n\n<p>Is this consideration correct?</p>\n', 'ViewCount': '124', 'Title': 'Can all NP-complete cryptosystems be broken if one is broken?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-01T17:35:50.940', 'LastEditDate': '2014-03-24T22:51:15.960', 'AnswerCount': '4', 'CommentCount': '5', 'Score': '5', 'OwnerDisplayName': 'user3313119', 'PostTypeId': '1', 'Tags': '<complexity-theory><np-hard><cryptography>', 'CreationDate': '2014-03-22T22:34:35.087', 'FavoriteCount': '1', 'Id': '23000'},2982:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '155', 'Title': 'Which NPC problems are NP Hard', 'LastEditDate': '2014-03-26T15:55:51.197', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '947', 'Body': '<p>I have read that TSP and Subset Sum problems are NPC problems which are also NP Hard. There are also problems like Halting Problem which is NP Hard, but not NP Complete</p>\n\n<p>And Wikipedia defines this as</p>\n\n<blockquote>\n  <p>A problem $H$ is NP-hard if and only if there is an NP-complete problem\n  $L$ that is polynomial time Turing-reducible to $H$.</p>\n</blockquote>\n\n<p>Like NP Complete problem is there any problem considered to be the first NP Hard problem?</p>\n\n<p>To show one problem to be NP Hard we need just to reduce one NPC problem to it?</p>\n\n<p>Whether all NPC problems are NP Hard?</p>\n\n<p>If no, why not?</p>\n', 'ClosedDate': '2014-03-26T18:02:38.240', 'Tags': '<complexity-theory><np-complete><np-hard>', 'LastEditorUserId': '947', 'LastActivityDate': '2014-03-26T16:07:14.477', 'CommentCount': '0', 'AcceptedAnswerId': '23085', 'CreationDate': '2014-03-26T15:28:18.103', 'Id': '23081'},2983:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '79', 'Title': 'How to compute a curious inverse', 'LastEditDate': '2014-04-05T16:42:34.627', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '16449', 'FavoriteCount': '1', 'Body': '<p>Let $M$ be a square matrix with entries that are $0$ or $1$ and let $v$ be a vector with values that are also $0$ or $1$.  If we are given $M$ and $y = Mv$, we can computer $v$ if $M$ is non-singular.  </p>\n\n<p>Now let us take the second bit (from the right) of the binary representation of each $y_i$ as another vector $z$. So $z$ also has entries which are $0$ or $1$. If $y_i$ has fewer than two bits we just let $z_i=0$.  </p>\n\n<blockquote>\n  <p>If we are given $z$ and $M$, how (and when) can you find a $v$ so that\n  $Mv$ would produce $z$ under this operation?</p>\n</blockquote>\n\n<p>Here is an example</p>\n\n<p>$$M = \\begin{pmatrix}\n  0 &amp; 0 &amp; 1 &amp; 0\\\\\n  1 &amp; 1 &amp; 0 &amp; 1\\\\\n  1 &amp; 1 &amp; 1 &amp; 0\\\\\n  0 &amp; 1 &amp; 1 &amp; 1\\\\\n\\end{pmatrix}\n, v = \\begin{pmatrix}\n  0 \\\\ \n  1 \\\\ \n  1 \\\\\n   1\\\\\n\\end{pmatrix}\n\\implies Mv=\\begin{pmatrix}\n  1 \\\\ \n  2 \\\\\n  2 \\\\ \n  3\\\\\n\\end{pmatrix}\n.$$</p>\n\n<p>So in this case </p>\n\n<p>$$z = \n\\begin{pmatrix}\n0 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n\\end{pmatrix}.\n$$</p>\n\n<hr>\n\n<p>Is this problem in fact NP-hard?</p>\n', 'Tags': '<algorithms><np-hard><linear-algebra>', 'LastEditorUserId': '10359', 'LastActivityDate': '2014-04-05T16:42:34.627', 'CommentCount': '0', 'AcceptedAnswerId': '23429', 'CreationDate': '2014-04-04T17:13:48.063', 'Id': '23428'},2984:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'ViewCount': '27', 'Title': 'What is the Unique Games Conjecture?', 'LastEditDate': '2014-04-07T11:58:09.610', 'AnswerCount': '0', 'Score': '-1', 'OwnerDisplayName': 'zighalo', 'PostTypeId': '1', 'OwnerUserId': '16535', 'Body': '<p>What is the unique game conjecture in relatively simple words? What are the consequences of proving it or disproving it? Does it has any relation to game theory? Why is there "game" in the name?</p>\n', 'ClosedDate': '2014-04-07T14:07:00.723', 'Tags': '<complexity-theory><np-hard><approximation>', 'LastEditorUserId': '472', 'LastActivityDate': '2014-04-07T11:58:09.610', 'CommentCount': '4', 'CreationDate': '2014-04-04T21:43:52.677', 'Id': '23508'},2985:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Say we have a set of numbers $A=\\{a_1, a_2, \\dots, a_n\\}$, and we wish to sum over all possible combinations of $k$ terms to compute</p>\n\n<p>$$\n\\sum_{\\substack{C \\subseteq \\{1,2,\\dots,n\\} \\\\ |C|=k}} \\prod_{c \\in C} a_c\n$$</p>\n\n<p>Naively this requires $O(k\\binom{n}{k})$ operations.</p>\n\n<p>This is different from from computing the permanent where there are permutations. </p>\n\n<p>Is this problem known to be NP-hard when $n=2k$ or other conditions such as $n=\\Theta(k^2)$? </p>\n', 'ViewCount': '49', 'Title': 'Is summing over all possible $k$-combinations NP-hard?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-12T07:34:46.677', 'LastEditDate': '2014-04-12T07:34:46.677', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '23687', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '404', 'Tags': '<complexity-theory><time-complexity><np-hard>', 'CreationDate': '2014-04-11T23:17:54.563', 'Id': '23683'},2986:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Trying to understand the concept of NP-completeness, I came across this pearl on Wikipedia:</p>\n\n<blockquote>\n  <p>From <a href="http://en.wikipedia.org/wiki/NP-complete" rel="nofollow">NP-complete</a>:</p>\n  \n  <p>A decision problem L is <strong>NP-complete</strong> if it is in the set of NP problems\n  and also in the set of <strong>NP-hard</strong> problems.</p>\n  \n  <p>From <a href="http://en.wikipedia.org/wiki/NP-hard" rel="nofollow">NP-hard</a>:</p>\n  \n  <p>A problem H is <strong>NP-hard</strong> if and only if there is an <strong>NP-complete</strong> problem\n  L that is polynomial time Turing-reducible to H [...].</p>\n</blockquote>\n\n<p>So it appears that the definition of NP-completeness depends on the definition of NP-hardness, and vice versa.</p>\n\n<p>What is going on here? How can I untangle these concepts?</p>\n', 'ViewCount': '20', 'ClosedDate': '2014-04-12T13:26:52.730', 'Title': 'Cyclic definition of NP-completeness', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-12T13:26:43.133', 'LastEditDate': '2014-04-12T13:26:43.133', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16709', 'Tags': '<complexity-theory><terminology><np-complete><np-hard>', 'CreationDate': '2014-04-12T11:23:20.347', 'Id': '23700'},2987:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I\'m trying to find reduction from 3-SAT to Max-2-SAT, so far no luck.<br>\nLet me first describe it.  </p>\n\n<blockquote>\n  <p><strong>3-SAT</strong>: Given a CNF formula $\\varphi$, where every clause in $\\varphi$ has <em>exactly</em> 3 literals in it, one should determine if there exist an assignment that satisfies it.  </p>\n  \n  <p><strong>Max-2-SAT</strong>: Given a CNF formula, where every clause in $\\phi$ has <em>exactly</em> 2 literals in it, and a positive number $k$, one should determine if there exist an assignment that satisfies <em>at least</em> $k$ clauses.</p>\n</blockquote>\n\n<p>Let me first show what I have tried so far.<br>\nGiven $\\varphi=\\wedge _{i=1}^{n}C_i$ where: $C_i=(l_{i_1}\\vee l_{i_2} \\vee l_{i_3})$,<br>\nI set: $\\phi=\\wedge _{j=1}^{3n}D_i$, where: $D_i=(l_{i_1}\\vee l_{i_2})\\wedge(l_{i_1}\\vee l_{i_3})\\wedge(l_{i_2}\\vee l_{i_3})$ and $k=2n$.<br>\nIt\'s quite easy to see that this will not work...<br>\nAlthough, if there exist an assignment which satisfies $\\varphi$ it means there exist an assignment that satisfies $k=2n$ clauses in $\\phi$, the second direction is not true.<br>\nI found several reductions online (such as <a href="http://www.stanford.edu/~rrwill/williams-max2sat-encyc.pdf" rel="nofollow">this</a>, for example), but none of them were useful since in my problem, each clause in $\\phi$ must have <strong>exactly</strong> two literals, where in the link above, the formula can also contain 1-length clause in it.</p>\n\n<p>I could really use some help here.</p>\n', 'ViewCount': '68', 'Title': '3-SAT to Max-2-SAT Reduction', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-13T23:39:21.800', 'LastEditDate': '2014-04-12T13:39:18.530', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11972', 'Tags': '<complexity-theory><reductions><np-hard><satisfiability>', 'CreationDate': '2014-04-12T11:58:23.407', 'FavoriteCount': '0', 'Id': '23702'},2988:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>I always thought that TSP currently requires time exponential in the number of cities to solve.</p>\n\n<blockquote>\n  <p>How, then, has <a href="http://www.math.uwaterloo.ca/tsp/concorde.html" rel="nofollow">Concorde</a> optimally solved a TSP instance with\n  <strong>85,900 cities</strong>?!?</p>\n</blockquote>\n\n<p>Is this a typo? Is the base of the exponential 1.0000000000000001 or similar? Was it an instance specifically constructed to be solvable easily? What <em>is</em> the asymptotic runtime of the best known TSP solving algorithm?</p>\n', 'ViewCount': '93', 'Title': 'What is the asymptotic runtime of the best known TSP solving algorithm?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-13T10:00:05.303', 'LastEditDate': '2014-04-13T10:00:05.303', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '23732', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16732', 'Tags': '<algorithms><np-hard><traveling-salesman>', 'CreationDate': '2014-04-13T07:43:43.813', 'Id': '23731'},2989:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>While I was studying SAT problem and its different instances, in Algorithms for the Satisfiability (SAT) Problem: A Survey by J. Gu et. al <a href="http://www.dtic.mil/dtic/tr/fulltext/u2/a326042.pdf" rel="nofollow">PDF</a>, I came up with this variant (not mentioned there, but I though of it) and searched, but could not find anything useful.</p>\n\n<p>Consider this variant:</p>\n\n<blockquote>\n  <p>Suppose $f$ is a boolean function in $n$ boolean variables, but with this extra property, that $f$ is increasing. I have thought of $n$ boolean variables, $X_1, \\ldots, x_n$ as representation of subsets of a set with $n$ elements, and if some  subset like $X$ satisfies $f$, then all $Y$ s.t. $X \\subseteq Y$ satisfy $f$, too. <em>What I want is finding the <strong>collection</strong> of all minimal $X$ where $f$ satisfies each of them, but not any $Z$ where $Z \\subsetneq X$?</em></p>\n</blockquote>\n\n<p>Is this problem still hard?</p>\n\n<p>If I consider the $x_1, \\ldots, x_n$ as a number, then increasing property of $f$ helps solving it in polynomial time, just a binary search suffices! So, I made it a little bit harder.</p>\n\n<p>Any help, even offers of search terms is appreciated.</p>\n', 'ViewCount': '48', 'Title': 'How can I identify that a restricted variant of Boolean SAT remains hard or not?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-27T19:21:15.063', 'LastEditDate': '2014-04-27T13:42:27.983', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '24155', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4425', 'Tags': '<complexity-theory><np-hard><satisfiability>', 'CreationDate': '2014-04-27T04:42:23.223', 'Id': '24149'},2990:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>I am trying to prove that the Acyclic Subgraph Problem (AS) is NP-hard by showing that the Independent Set Problem (IS) is polynomially reducible to AS. </p>\n\n<p><strong>AS is as follows:</strong> Given a directed graph G = (V, E) and an integer k, does G contain a subset V' of\nk vertices such that the induced subgraph on V'is acyclic?</p>\n\n<p><strong>IS is as follows:</strong> Given an undirected graph G = (V, E) and an integer k, does G contain a subset V' of k vertices such that no two vertices in V'are adjacent to one another?</p>\n\n<p><strong>I have developed the following:</strong>\nGiven an undirected graph, <em>G = (V,E)</em>, we can construct a directed graph, <em>D =(V, E')</em>. We do this by addd the edges <em>(u,v)</em> and <em>(v,u)</em> for every edge in <em>E</em>. If <em>G</em> has an independent set of size <em>k</em>, then the corresponding vertices in <em>D</em> are an acyclic subgraph. Similarly, if <em>D</em> has an acyclic subgraph of size <em>k</em>, then those <em>k</em> vertices must form an independent set in <em>D</em> as if there is an edge between two vertices in <em>D</em>. Then, there is a directed cycle between them, thus those <em>k</em> vertices form an independent set in <em>G</em>. </p>\n\n<p>Can anyone help me further with this proof? I am not sure if what I have is going in the right direction or not. </p>\n\n<p>Any help is appreciated, thanks! </p>\n", 'ViewCount': '23', 'Title': 'Prove that Acyclic Subgraph is NP-Hard by showing Independent Set can be reduced to Acyclic Subgraph', 'LastActivityDate': '2014-04-28T19:11:30.353', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17151', 'Tags': '<algorithms><np-complete><reductions><np-hard>', 'CreationDate': '2014-04-28T19:11:30.353', 'Id': '24197'},2991:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>Consider the <a href="http://www.nada.kth.se/~viggo/wwwcompendium/node149.html" rel="nofollow">hitting set problem</a> with $n$ elements and $m$ sets. I gather from the linked page as well as <a href="http://people.csail.mit.edu/dmoshkov/papers/set-cover/set-cover-full.pdf" rel="nofollow">this</a> that </p>\n\n<p>1) it is NP-hard to approximate the cost of the optimal solution to a multiplicative factor of $c \\log n$ for some $c&gt;0$. </p>\n\n<p>2) it is NP-hard to approximate the cost of the optimal solution to a multiplicative factor of $c \\log m$ for some $c&gt;0$. </p>\n\n<p>3) it is NP-hard to approximate the cost of the optimal solution to a multiplicative factor of $c \\log \\max(n,m)$ for some $c&gt;0$. </p>\n\n<p>Is my understanding correct? This seems to be a straightforward consequence of what is on the internet, but some of the notation in these sources is mysterious to me and I want to make sure I\'m not misunderstanding. </p>\n', 'ViewCount': '25', 'Title': 'Hardness of approximating hitting set', 'LastEditorUserId': '17154', 'LastActivityDate': '2014-04-28T21:58:39.947', 'LastEditDate': '2014-04-28T20:57:46.510', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '24201', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '17154', 'Tags': '<np-hard><approximation>', 'CreationDate': '2014-04-28T20:51:30.080', 'Id': '24199'},2992:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': "<p>Assume I have some positive numbers $a_1,\\ldots,a_n$ and a number $k \\in \\mathbb{N}$. </p>\n\n<p>I want to partition these numbers into exactly $k$ sets $A_1,\\ldots,A_k$ such that the weighted arithmetic mean</p>\n\n<p>$$\\text{cost}(A_i,\\ldots,A_k)=\\sum_{i=1}^{k}\\frac{|A_i|}{n}c(A_i)$$</p>\n\n<p>is minimal, where $c(A_i)=\\sum_{a \\in A_i}a$ is simply the sum of all numbers in $A_i$.</p>\n\n<p>Is there actually a (polynomial) algorithm to do this or is this a (<strong>NP</strong>) hard problem? </p>\n\n<p>I tried to reduce it to some NP-hard problems but didn't get anywhere, especially because the numbers are nonnegative and thus in an optimal partition big sets need to have smaller weight which seems to be some kind of balancing problem instead of a packing problem (which I am more familiar with).</p>\n", 'ViewCount': '23', 'Title': 'Minimum weighted arithmetic mean partion?', 'LastEditorUserId': '6970', 'LastActivityDate': '2014-04-29T20:54:41.280', 'LastEditDate': '2014-04-29T20:19:59.883', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24234', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6970', 'Tags': '<optimization><np-hard><np><partitions>', 'CreationDate': '2014-04-29T20:10:23.417', 'Id': '24232'},2993:{'color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2,'Body': '<p>The question is in the title, I suppose. I am studying complexity classes, and I understand that NP-Hard is the set of problems that are at least as hard as the hardest problems in NP. Therefore, it will naturally contain PSPACE problems.</p>\n\n<p>However, I was specifically wondering if there were any PSPACE problems that were not in NP-Hard? (from my understanding, implying that they are <em>easier</em> than the hardest problems in NP).</p>\n', 'ViewCount': '67', 'Title': "Are there any PSPACE problems that don't exist in NP-Hard?", 'LastEditorUserId': '98', 'LastActivityDate': '2014-05-03T09:36:05.037', 'LastEditDate': '2014-05-03T09:36:05.037', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '24338', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '17290', 'Tags': '<complexity-theory><np-hard><complexity-classes>', 'CreationDate': '2014-05-03T02:37:37.397', 'Id': '24336'}