{'Body': u'<p>Let $L_1$, $L_2$, $L_3$, $\\dots$ be an in\ufb01nite sequence of context-free languages, each of\nwhich is de\ufb01ned over a common alphabet $\u03a3$. Let $L$ be the in\ufb01nite union of $L_1$, $L_2$, $L_3$, $\\dots $;\ni.e., $L = L_1 \\cup L_2 \\cup L_3 \\cup \\dots $. </p>\n\n<p>Is it always the case that $L$ is a context-free language? </p>\n', 'ViewCount': '676', 'Title': u'Is an in\ufb01nite union of context-free languages always context-free?', 'LastEditorUserId': '69', 'LastActivityDate': '2012-04-25T15:12:25.303', 'LastEditDate': '2012-04-25T15:12:25.303', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '208', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '51', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2012-03-10T18:10:35.290', 'Id': '206''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '7833', 'Title': 'How to prove that a language is not context-free?', 'LastEditDate': '2013-06-06T13:59:18.867', 'AnswerCount': '5', 'Score': '39', 'PostTypeId': '1', 'OwnerUserId': '98', 'FavoriteCount': '16', 'Body': '<p>We learned about the class of context-free languages $\\mathrm{CFL}$. It is characterised by both <a href="https://en.wikipedia.org/wiki/Context-free_grammar">context-free grammars</a> and <a href="https://en.wikipedia.org/wiki/Pushdown_automata">pushdown automata</a> so it is easy to show that a given language is context-free.</p>\n\n<p>How do I show the opposite, though? My TA has been adamant that in order to do so, we would have to show for <em>all</em> grammars (or automata) that they can not describe the language at hand. This seems like a big task!</p>\n\n<p>I have read about some pumping lemma but it looks really complicated.</p>\n', 'Tags': '<formal-languages><context-free><proof-techniques><reference-question>', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-12-04T20:04:21.587', 'CommentCount': '0', 'AcceptedAnswerId': '276', 'CreationDate': '2012-03-12T23:57:46.817', 'Id': '265''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '1152', 'Title': 'Show that $\\{xy \\mid |x| = |y|, x\\neq y\\}$ is context-free', 'LastEditDate': '2012-03-17T09:44:30.983', 'AnswerCount': '2', 'Score': '20', 'PostTypeId': '1', 'OwnerUserId': '31', 'FavoriteCount': '3', 'Body': "<p>I remember coming across the following question about a language that supposedly is context-free, but I was unable to find a proof of the fact. Have I perhaps misremembered the question?</p>\n\n<p>Anyway, here's the question:</p>\n\n<blockquote>\n  <p>Show that the language $L = \\{xy \\mid |x| = |y|, x\\neq y\\}$ is context free.</p>\n</blockquote>\n", 'Tags': '<formal-languages><context-free>', 'LastEditorUserId': '31', 'LastActivityDate': '2013-09-23T14:09:34.027', 'CommentCount': '1', 'AcceptedAnswerId': '313', 'CreationDate': '2012-03-13T12:37:34.093', 'Id': '307''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I came across this figure which shows that context-free and regular languages are (proper) subsets of efficient problems (supposedly $\\mathrm{P}$). I perfectly understand that efficient problems are a subset of all decidable problems because we can solve them but it could take a very long time. </p>\n\n<p>Why are <em>all</em> context-free and regular languages efficiently decidable? Does it mean solving them will not take a long time (I mean we know it without more context)?</p>\n\n<p><img src="http://i.stack.imgur.com/xdEBQ.jpg" alt="enter image description here"></p>\n', 'ViewCount': '1486', 'Title': 'Are all context-free and regular languages efficiently decidable?', 'LastEditorUserId': '51', 'LastActivityDate': '2012-03-13T17:33:24.600', 'LastEditDate': '2012-03-13T17:33:24.600', 'AnswerCount': '1', 'CommentCount': '3', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '51', 'Tags': '<formal-languages><regular-languages><context-free><efficiency>', 'CreationDate': '2012-03-13T15:59:26.123', 'Id': '315''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Let $\\Sigma$ be the set of terminal and $N$ the set of non-terminal symbols of some context-free grammar $G$.</p>\n\n<p>Say I have a string $a \\in (\\Sigma \\cup N)^+$ such that $x a y \\in \\mathcal{S}(G)$ where $x,y\\in (\\Sigma \\cup N)^*$ and $\\mathcal{S}(G)$ are the sentential forms of $G$.</p>\n\n<p>Given $G$, I'd like to determine a set $C = \\{ b \\mid wabz \\in \\mathcal{S}(G), b \\in \\Sigma \\cup N \\}$. </p>\n\n<p>To clarify, in this case, $w, x, y, z, a, b$ are strings of terminals and non-terminals and $b$ is of length one.</p>\n\n<p>I can see how to do this if $a$ is also of length one; each $b$ is a member of the follow set of $a$ (including non-terminals).</p>\n\n<p>However, I am curious if it's possible for a sequence of characters. For my application, the string $a$ is not much longer than the right hand side of the productions in $G$.</p>\n\n<p>The distinction between terminals and non-terminals is somewhat mute in my application because I am using a generative grammar; and I believe that this won't lead to much trouble since $b$ is of length one.</p>\n", 'ViewCount': '285', 'Title': 'Given a string and a CFG, what characters can follow the string (in the sentential forms of the CFG)?', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-27T03:04:17.907', 'LastEditDate': '2012-03-27T03:04:17.907', 'AnswerCount': '1', 'CommentCount': '12', 'AcceptedAnswerId': '556', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '237', 'Tags': '<algorithms><context-free><formal-grammars><compilers>', 'CreationDate': '2012-03-20T22:55:17.150', 'Id': '555''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have the following language</p>\n\n<p>$\\qquad \\{0^i 1^j 2^k \\mid 0 \\leq i \\leq j \\leq k\\}$</p>\n\n<p>I am trying to determine which Chomsky language class it fits into. I can see how it could be made using a context-sensitive grammar so I know it is atleast context-sensitive. It seems like it wouldn't be possible to make with a context-free grammar, but I'm having a problem proving that.</p>\n\n<p>It seems to pass the fork-pumping lemma because if $uvwxy$ is all placed in the third part of any word (the section with all of the $2$s). It could pump the $v$ and $x$ as many times as you want and it would stay in the language. If I'm wrong could you tell me why, if I'm right, I still think this language is not context-free, so how could I prove that?</p>\n", 'ViewCount': '951', 'Title': 'How can I prove this language is not context-free?', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-03-20T20:06:21.393', 'LastEditDate': '2013-03-20T20:06:21.393', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '596', 'Tags': '<formal-languages><context-free><formal-grammars><pumping-lemma>', 'CreationDate': '2012-03-21T18:21:10.833', 'Id': '619''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p><em>Note this is a question related to study in a CS course at a university, it is NOT homework and can be found <a href="http://www.cs.ucf.edu/~dmarino/ucf/transparency/cot4210/exam/">here</a> under Fall 2011 exam2.</em></p>\n\n<p>Here are the two questions I\'m looking at from a past exam.  They seem to be related, the first:</p>\n\n<blockquote>\n  <p>Let </p>\n  \n  <p>$\\qquad \\mathrm{FINITE}_{\\mathrm{CFG}} = \\{ &lt; \\! G \\! &gt; \\mid G \\text{ is a Context Free Grammar with } |\\mathcal{L}(G)|&lt;\\infty \\} $</p>\n  \n  <p>Prove that $\\mathrm{FINITE}_{\\mathrm{CFG}}$ is a decidable language.   </p>\n</blockquote>\n\n<p>and...</p>\n\n<blockquote>\n  <p>Let </p>\n  \n  <p>$\\qquad \\mathrm{FINITE}_{\\mathrm{TM}} = \\{ &lt; \\! M\\!&gt; \\mid M \\text{ is a Turing Machine with } |\\mathcal{L}(M)|&lt;\\infty \\}$ </p>\n  \n  <p>Prove that $\\mathrm{FINITE}_{\\mathrm{TM}}$ is an undecidable language.   </p>\n</blockquote>\n\n<p>I am a bit lost on how to tackle these problems, but I have a few insights which I think may be in the right direction.  The first thing is that I am aware of is that the language $A_{\\mathrm{REX}}$, where </p>\n\n<blockquote>\n  <p>$\\qquad A_{\\mathrm{REX}} = \\{ &lt;\\! R, w \\!&gt; \\mid R \\text{ is a regular expression with } w \\in\\mathcal{L}(R)\\}$</p>\n</blockquote>\n\n<p>is a decidable language (proof is in Michael Sipser\'s <i>Theory of Computation</i>, pg. 168).  The same source also proves that a Context Free Grammar can be converted to a regular expression, and vice versa.  Thus $A_{\\mathrm{CFG}}$, must also be decidable as it can be converted to a regular expression.  This, and the fact that $A_{\\mathrm{TM}}$ is <b>un</b>-decidable, seems to be related to this problem.</p>\n\n<p>The only thing I can think of is passing G to Turing machines for $A_{\\mathrm{REX}}$ (after converting G to a regular expression) and $A_{\\mathrm{TM}}$.  Then accepting if G does and rejecting if G doesn\'t.  As $A_{\\mathrm{TM}}$ is undecidable, this will never happen.  Somehow I feel like I\'m making a mistake here, but I\'m not sure of what it is.  Could someone please lend me a hand here? </p>\n', 'ViewCount': '639', 'Title': 'Decidablity of Languages of Grammars and Automata', 'LastEditorUserId': '41', 'LastActivityDate': '2012-03-27T02:52:20.370', 'LastEditDate': '2012-03-27T02:52:20.370', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '629', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '603', 'Tags': '<formal-languages><computability><context-free><regular-languages><turing-machines>', 'CreationDate': '2012-03-21T20:07:51.783', 'Id': '627''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Write $\\bar n$ for the decimal expansion of $n$ (with no leading <code>0</code>). Let $a$ and $b$ be integers, with $a &gt; 0$. Consider the language of multiples of $a$ plus a constant:</p>\n\n<p>$$M = \\{ \\overline{a\\,x+b} \\mid x\\in\\mathbb{N} \\}$$</p>\n\n<p>Is $M$ regular? context-free?</p>\n\n<p>(Contrast with <a href="http://cs.stackexchange.com/questions/641/language-of-the-graph-of-an-affine-function">Language of the graph of an affine function</a>)</p>\n\n<p><sub> I think this would make a good homework question, so answers that start with a hint or two and explain not just how to solve the question but also how to decide what techniques to use would be appreciated. </sub></p>\n', 'ViewCount': '522', 'Title': 'Language of the values of an affine function', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-20T16:01:38.250', 'LastEditDate': '2012-03-22T09:26:48.400', 'AnswerCount': '5', 'CommentCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<formal-languages><context-free><regular-languages><integers>', 'CreationDate': '2012-03-22T01:54:55.207', 'FavoriteCount': '1', 'Id': '640''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Write $\\bar n$ for the decimal expansion of $n$ (with no leading <code>0</code>). Let <code>:</code> be a symbol distinct from any digit. Let $a$ and $b$ be integers, with $a &gt; 0$. Consider the language of solutions of the Diophantine equation $y=ax+b$:</p>\n\n<p>$$L = \\{ \\bar{x} \\mathtt: \\bar{y} \\mid y = a\\,x + b \\}$$</p>\n\n<p>Is $L$ regular? context-free?</p>\n\n<p>(Contrast with <a href="http://cs.stackexchange.com/questions/640/language-of-the-multiples-of-an-integer">Language of the values of an affine function</a>)</p>\n\n<p><sub>(Follows on <a href="http://cs.stackexchange.com/questions/618/how-can-solutions-of-a-diophantine-equation-be-expressed-as-a-language">How can solutions of a Diophantine equation be expressed as a language?</a>)</sub></p>\n\n<p><sub> I think this would make a good homework question, so answers that start with a hint or two and explain not just how to solve the question but also how to decide what techniques to use would be appreciated. </sub></p>\n', 'ViewCount': '158', 'Title': 'Language of the graph of an affine function', 'LastEditorUserId': '98', 'LastActivityDate': '2012-03-22T19:27:05.530', 'LastEditDate': '2012-03-22T15:52:06.720', 'AnswerCount': '3', 'CommentCount': '7', 'AcceptedAnswerId': '667', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '39', 'Tags': '<formal-languages><regular-languages><context-free><integers>', 'CreationDate': '2012-03-22T01:55:17.983', 'Id': '641''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let $G$ be a context-free grammar. A string of terminals and nonterminals of $G$ is said to be a <em>sentential form</em> of $G$ if you can obtain it by applying productions of $G$ zero or more times to the start symbol of $S$. Let $\\operatorname{SF}(G)$ be the set of sentential forms of $G$.</p>\n\n<p>Let $\\alpha \\in \\operatorname{SF}(G)$ and let $\\beta$ be a substring of $\\alpha$ - we call $\\beta$ a <em>fragment</em> of $\\operatorname{SF}(G)$. Now let </p>\n\n<p>$\\operatorname{Before}(\\beta) = \\{ \\gamma \\ |\\ \\exists \\delta . \\gamma \\beta \\delta \\in \\operatorname{SF}(G) \\}$ </p>\n\n<p>and </p>\n\n<p>$\\operatorname{After}(\\beta) = \\{ \\delta \\ |\\ \\exists \\gamma . \\gamma \\beta \\delta \\in \\operatorname{SF}(G) \\}$.</p>\n\n<blockquote>\n  <p>Are $\\operatorname{Before}(\\beta)$ and $\\operatorname{After}(\\beta)$ context-free languages? What if $G$ is unambiguous? If $G$ is unambiguous, are $\\operatorname{Before}(\\beta)$ and $\\operatorname{After}(\\beta)$ also describable by an unambiguous context-free language?</p>\n</blockquote>\n\n<p>This is a followup to <a href="http://cs.stackexchange.com/questions/666/is-there-a-string-stack-data-structure-that-supports-these-string-operations">my earlier question</a>, after <a href="http://cs.stackexchange.com/questions/757/does-every-large-enough-string-have-repeats">an earlier attempt</a> to make my question easier to answer failed. A negative answer will make the encompassing question I\'m working on very hard to answer.</p>\n', 'ViewCount': '305', 'Title': 'Are the Before and After sets for context-free grammars always context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-25T16:53:00.780', 'LastEditDate': '2014-01-25T16:53:00.780', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '804', 'Score': '11', 'PostTypeId': '1', 'OwnerUserId': '92', 'Tags': '<formal-languages><context-free><formal-grammars><closure-properties>', 'CreationDate': '2012-03-26T17:48:12.210', 'Id': '802''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>So I have a problem that I\'m looking over for an exam that is coming up in my Theory of Computation class.  I\'ve had a lot of problems with the <em>pumping lemma</em>, so I was wondering if I might be able to get a comment on what I believe is a valid proof to this problem.  From what I have seen online and in our review I don\'t think this is the customary answer to this problem so I want to know if I am applying the concepts behind the pumping lemma successfully.  The problem is <em>not</em> a homework problem and can be found on my professor\'s previous exams <a href="http://www.cs.ucf.edu/~dmarino/ucf/transparency/cot4210/exam/" rel="nofollow">here</a> under the fourth problem of his exam given in Fall of 2011, which is...</p>\n\n<blockquote>\n  <p>Let $L = \\{0^p \\mid \\text{\\(p\\) is a prime number}\\}$. Prove that $L$ is not context-free using the pumping lemma for context-free languages.</p>\n</blockquote>\n\n<p>So here is my proof:</p>\n\n<blockquote>\n  <p>Assume that the pumping length is $m$, where $m+1$ is a prime number.  I shall also assume that there is a string $uvxyz = 0^{(m/2)}00^{m/2} \\in L$.  There are two possible positions that do not violate conditions 2 and  3 of the pumping lemma for context languages, being $|vy| &gt; 0$ and $|vxy| \\leq m$.  These are:</p>\n  \n  <ol>\n  <li><p>$u = 0^{(m/2)}, v = 0, x = 0^{m/2}$, pumping by one results in $0^{m/2}000^{m/2}$.  Since m/2 + m/2 is m, which is one less than the prime number m+1, it is an even number.  m+2 is also an even number and since $|0^{m/2}000^{m/2}| = m + 2$, this number of zeroes is also even and thus cannot be prime, resulting in a contradiction.  </p></li>\n  <li><p>The other placement is to place the string on the symmetric opposite or $x = 0^{m/2}, y = 0, z = 0^{m/2}$.  This results in the same contraction as in case 1.</p></li>\n  </ol>\n</blockquote>\n\n<p>The string cannot be placed in the center such that $v = 0^{m/2}, x = 0, y = 0^{m/2}$ as this would violate condition three or $|vxy| \\leq m$, since $|vxy| = m + 1 &gt; m$.</p>\n\n<p>So my question is essentially, is this a valid proof and if not what is wrong with it?</p>\n', 'ViewCount': '744', 'Title': 'Prime number CFG and Pumping Lemma', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-22T21:46:05.933', 'LastEditDate': '2012-04-22T21:46:05.933', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '603', 'Tags': '<formal-languages><proof-techniques><context-free><pumping-lemma>', 'CreationDate': '2012-04-22T20:31:51.403', 'FavoriteCount': '2', 'Id': '1450''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'd love your help with the following question:</p>\n\n<blockquote>\n  <p>Let $G$ be context free grammar in the <strong>Chomksy normal form</strong> with $k$\n  variables.</p>\n  \n  <p>Is the language $B = \\{ w \\in L(G) : |w| &gt;2^k \\}$ regular ?</p>\n</blockquote>\n\n<p>What is it about the amount of variables and the Chomsky normal form that is supposed to help me solve this question? I tried to look it up on the web, but besides information about the special form itself, I didn't find an answer to my question.</p>\n\n<p>The answer for the question is that $B$ might be regular.</p>\n", 'ViewCount': '275', 'Title': 'Chomsky normal form and regular languages', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-27T15:37:47.150', 'LastEditDate': '2012-04-27T15:37:47.150', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '1532', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1183', 'Tags': '<formal-languages><regular-languages><context-free><formal-grammars>', 'CreationDate': '2012-04-27T12:13:32.993', 'Id': '1525''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I would like your help with the following question:</p>\n\n<blockquote>\n  <p>Let $L$ be a language, and operator $A(L)=\\{\\,ww^Rw \\mid w \\in L\\ \\wedge\\ |w| \\lt 2007\\,\\}$ where $x^R$ is the  reversed string of $x$. Which of the\n  following statements are correct?</p>\n  \n  <ol>\n  <li>If $L$ is regular so $A(L)$ is regular.</li>\n  <li>If $L$ is a CFL which is not regular then $A(L)$ is CFL which is not regular.</li>\n  <li>If $L$ is a CFL which is not regular, then $A(L)$ is a CFL which may or may not be regular.</li>\n  <li>If $L$ is not a CFL then $A(L)$ is not CFL.</li>\n  </ol>\n</blockquote>\n\n<p>What does the fact that $|w|&lt; 2007$ help me with the decision? \nFor (2) I can choose $O^n1^n$ and I get that $0^n1^{2n}0^{2n}1^n$, which is not regular, but for (3),(4) I can't find an examples to refute it. The answer is 3, but I can't understand why, since $A(L)= ww^R \\circ  w$  but $ww^R$ is not regular.</p>\n", 'ViewCount': '180', 'Title': 'Closure against the operator $A(L)=\\{ww^Rw \\mid w \\in L \\wedge |w| \\lt 2007\\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2012-04-28T09:52:19.380', 'LastEditDate': '2012-04-28T09:52:19.380', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1537', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1183', 'Tags': '<formal-languages><regular-languages><context-free><closure-properties>', 'CreationDate': '2012-04-27T18:59:52.513', 'Id': '1536''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I wonder whether the following language is a context free language:\n$$A = \\{w \\in \\{a,b,c\\}^* \\mid \\#_a(w) + 2\\#_b(w) = 3\\#c(w)\\}$$\nwhere $\\#_x(w)$ is the number of occurrences of $x$ in $w$.\nI can't find any word that would be useful to refute by the pumping lemma, on the other hand I haven't been able to find a context free grammar generating it. It looks like it has to remember more than one PDA can handle.</p>\n\n<p>What do you say?</p>\n", 'ViewCount': '194', 'Title': 'Is $A=\\{ w \\in \\{a,b,c\\}^* \\mid \\#_a(w)+ 2\\#_b(w) = 3\\#_c(w)\\}$ a CFG?', 'LastEditorUserId': '39', 'LastActivityDate': '2012-04-30T02:27:53.983', 'LastEditDate': '2012-04-29T00:10:24.487', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '1557', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1183', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2012-04-28T20:50:19.557', 'Id': '1556''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>How can I prove that the language that the operator $A$ defines for regular language $L$ is a context free language.</p>\n\n<p>$A(L)= \\{ w_1w_2: |w_1|=|w_2|$ and $w_1, w_2^R \\in L \\}$, where $x^R$ is the reversed form of $x$. </p>\n\n<p>I understand that since $L$ is regular so does $L^R$.also on my way for a CFG I can reach $w_1$ by the CFG of $L$ concatenation with the one of $L^R$ for making $w_2$. so far I have a CFG, but what promises me that $|w_1|=|w_2|$? how can I generate a grammar that will also keep that in addition to the other conditions?</p>\n', 'ViewCount': '253', 'Title': 'Why does $A(L)= \\{ w_1w_2: |w_1|=|w_2|$ and $w_1, w_2^R \\in L \\}$ generate a context free language for regular $L$?', 'LastEditorUserId': '1183', 'LastActivityDate': '2012-05-03T07:50:41.343', 'LastEditDate': '2012-05-01T08:07:29.893', 'AnswerCount': '4', 'CommentCount': '0', 'AcceptedAnswerId': '1593', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1183', 'Tags': '<formal-languages><regular-languages><context-free><formal-grammars>', 'CreationDate': '2012-04-30T16:31:10.080', 'Id': '1592''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '258', 'Title': 'The operator $A(L)= \\{w \\mid ww \\in L\\}$', 'LastEditDate': '2012-05-04T21:50:54.007', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1183', 'FavoriteCount': '1', 'Body': "<p>Consider the operator $A(L)= \\{w \\mid ww \\in L\\}$. Apparently, the class of context free languages is not closed against $A$. Still, after a lot of thinking, I can't find any CFL for which $A(L)$ wouldn't be CFL. </p>\n\n<p>Does anyone have an idea for such a language?</p>\n", 'Tags': '<formal-languages><context-free><closure-properties>', 'LastEditorUserId': '89', 'LastActivityDate': '2012-05-05T12:31:21.947', 'CommentCount': '2', 'AcceptedAnswerId': '1657', 'CreationDate': '2012-05-03T11:55:44.033', 'Id': '1652''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>There is a problem which I cannot solve. If you give a tip I will be very glad.</p>\n\n<p>Prove that following language is <em>not</em> context free:</p>\n\n<p>$L= \\{ a^nb^m | \\gcd(n,m) = 1 \\}$.</p>\n\n<p>It can be proven using the pumping lemma, but how?</p>\n\n<p>If I start with some prime numbers $m$ and $n$ where $m&gt;n&gt;2$ and pump it up from $uVxYz$, there are three possible outcomes: $a^{n + k} b^m$, $a^{n +k}b^{m +k}$, $a^n b^{m +k}$. Since I do not know whether $k$ is even or odd I cannot say something. It is certain that $a^n$ and $b^m$ will be odd. However after adding $k$ to some of them, how can I say something about whether their gcd is 1 or not?</p>\n', 'ViewCount': '433', 'Title': 'A context free grammar proof', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-15T08:50:48.623', 'LastEditDate': '2012-05-15T08:50:48.623', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1494', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2012-05-14T19:42:42.550', 'Id': '1842''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I\'m am stuck solving the next exercise:</p>\n\n<p>Argue that if $L$ is context-free and $R$ is regular, then $L / R = \\{ w \\mid \\exists x \\in R \\;\\text{s.t}\\; wx \\in L\\} $ (i.e. the <a href="https://en.wikipedia.org/wiki/Right_quotient" rel="nofollow">right quotient</a>) is context-free.</p>\n\n<p>I know that there should exist a PDA that accepts $L$ and a DFA that accepts $R$. I\'m now trying to combine these automata to a PDA that accepts the right quotient. If I can build that I proved that $L/R$ is context-free. But I\'m stuck building this PDA.</p>\n\n<p>This is how far I\'ve made it:   </p>\n\n<blockquote>\n  <p>In the combined PDA the states are a cartesian product of the states of the seperate automata. And the edges are the edges of the DFA but only the ones for which in the future a final state of the original PDA of L can be reached. But don\'t know how to write it down formally.</p>\n</blockquote>\n', 'ViewCount': '637', 'Title': 'If $L$ is context-free and $R$ is regular, then $L / R$ is context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-17T23:12:15.793', 'LastEditDate': '2012-05-17T19:38:52.640', 'AnswerCount': '3', 'CommentCount': '4', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '1526', 'Tags': '<formal-languages><context-free><finite-automata><closure-properties><pushdown-automata>', 'CreationDate': '2012-05-17T16:19:42.050', 'FavoriteCount': '1', 'Id': '1886''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>For the purpose of proving that they are not regular, what closure properties can I use to transform the languages</p>\n\n<ol>\n<li>$L_a = \\{ a^*cw \\mid  w \\in \\{a,b \\}^* \\land  |w|_a = |w|_b \\}$ and</li>\n<li>$L_b = \\{ab^{i_1}ab^{i_2}\\ldots ab^{i_n} \\mid  i_j\u2208\\mathbb N \\land \\exists j\u2208[1,n]  \\ i_j \\not= j \\}$</li>\n</ol>\n\n<p>to  $L := \\{ a^nb^n \\mid n\\in \\mathbb N \\}$, respectively?</p>\n\n<p>I tried: </p>\n\n<ol>\n<li><p>$L_a = \\{ a^*cw \\mid w \\in \\{a,b \\}^* \\land  |w|_a = |w|_b \\}$ </p>\n\n<p>$L_a' = \\{ \\{a,d\\}^*cw \\mid w \\in \\{a,b,d \\}^* \\land  |w|_a + |w|_d = |w|_b \\}$ (union?)</p>\n\n<p>$L_a'' = \\{ d^*cw \\mid w \\in \\{a,b \\}^* \\land |w|_a = |w|_b \\}$\n(concatenation?)</p>\n\n<p>$L_a''' = \\{ w \\mid w \\in \\{a,b \\}^* \\land |w|_a = |w|_b \\}$\n(homomorphism?)</p></li>\n<li><p>$L_b = \\{ab^{i_1}ab^{i_2}\\ldots ab^{i_n} \\mid i_j\u2208\\mathbb N \\land\\exists j\u2208[1,n] \\ i_j \\not= j \\}$</p>\n\n<p>$L_b' = \\{ab^{i_1}ab^{i_2}\\ldots ab^{i_n} \\mid i_j\u2208\\mathbb N \\land\\forall j\u2208[1,n] \\ i_j = j \\}$  (complement?)</p>\n\n<p>$L_b'' = \\{ac^{i_1}ac^{i_2}\\ldots ac^{i_n} \\mid i_j\u2208\\mathbb N \\land\\forall j\u2208[1,n] \\ i_j = j \\}$ (homomorphism?)</p></li>\n</ol>\n", 'ViewCount': '256', 'Title': 'Use closure properties to transform languages to $L := \\{ a^nb^n : n\\in \\mathbb N \\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-28T22:52:22.653', 'LastEditDate': '2012-05-24T00:03:27.303', 'AnswerCount': '3', 'CommentCount': '7', 'AcceptedAnswerId': '1952', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '1133', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2012-05-20T14:26:20.813', 'Id': '1949''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '727', 'Title': 'Relation between simple and regular grammars', 'LastEditDate': '2012-05-20T21:41:35.507', 'AnswerCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1563', 'FavoriteCount': '1', 'Body': '<p>I am reading "An Introduction to Formal Languages and Automata" written by Peter Linz and after reading the first five chapters I face below problem with\nsimple and regular (especially right linear) grammars which are very similar to each other.</p>\n\n<p>What relation exists between these? What is the difference?\nCan you create (non-deterministic) finite automata for simple grammars (obviously without using a stack)?</p>\n', 'Tags': '<regular-languages><automata><context-free><formal-grammars>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-21T21:29:04.513', 'CommentCount': '1', 'AcceptedAnswerId': '1968', 'CreationDate': '2012-05-20T21:03:35.607', 'Id': '1958''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '471', 'Title': 'Decide whether a context-free languages can be accepted by a deterministic pushdown automaton', 'LastEditDate': '2012-05-21T11:16:20.547', 'AnswerCount': '1', 'Score': '13', 'PostTypeId': '1', 'OwnerUserId': '1577', 'FavoriteCount': '2', 'Body': '<p>Given a context-free grammar G, there exists a Nondeterministic Pushdown Automaton N that accepts exactly the language G accepts. (and visa versa)</p>\n\n<p>There <strong>may</strong> also exist a Deterministic Pushdown Automaton D that accepts exactly the language G accepts too.  It depends on the grammar.</p>\n\n<p>By what algorithm on the productions of G can we determine if D exists?</p>\n', 'Tags': '<automata><context-free><pushdown-automata>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-23T13:37:24.503', 'CommentCount': '1', 'AcceptedAnswerId': '1973', 'CreationDate': '2012-05-21T09:30:46.410', 'Id': '1972''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I would like to use your help with the following problem:</p>\n\n<p>$L=\\{\u27e8M\u27e9 \u2223 L(M) \\mbox{ is context-free} \\}$. Show that $L \\notin RE \\cup  CoRE$.</p>\n\n<p>I know that to prove $L\\notin RE$, it is enough to find a language $L'$ such that $L'\\notin RE$ and show that there is a reduction from $L'$ to $L$ $(L'\\leq _M L)$.</p>\n\n<p>I started to think of languages which I already know that they are not in $RE$, and I know that $Halt^* =\\{\u27e8M\u27e9 \u2223 M\\mbox{ halts for every input} \\} \\notin RE$. I thought of this reduction from $Halt^*$ to $L$: $f(\u27e8M\u27e9)=(M')$. for every $\u27e8M\u27e9$: if $M$ halts for every input  $L(M')=0^n1^n$ otherwise it would be $o^n1^n0^n$, but this is not correct, Isn't it? How can I check that $M$ halts for every input to begin with? and- is this the way to do that?</p>\n", 'ViewCount': '295', 'Title': u'Proof that $\\{\u27e8M\u27e9 \u2223 L(M) \\mbox{ is context-free} \\}$ is not (co-)recursively enumerable', 'LastEditorUserId': '1589', 'LastActivityDate': '2012-05-22T01:10:33.537', 'LastEditDate': '2012-05-21T21:24:16.623', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '1985', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '1589', 'Tags': '<formal-languages><computability><context-free><turing-machines>', 'CreationDate': '2012-05-21T19:28:38.840', 'Id': '1979''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '336', 'Title': 'Is there a context free, non-regular language $L$, for which $L^*$ is regular?', 'LastEditDate': '2012-05-25T21:02:11.603', 'AnswerCount': '1', 'Score': '6', 'OwnerDisplayName': 'ybz', 'PostTypeId': '1', 'OwnerUserId': '4832', 'Body': '<p>I know that there are non-regular languages, so that $L^*$ is regular, but all examples I can find are context-sensitive but not context free.</p>\n\n<p>In case there are none how do you prove it?</p>\n', 'Tags': '<formal-languages><regular-languages><context-free><formal-grammars>', 'LastEditorUserId': '31', 'LastActivityDate': '2012-05-25T21:02:11.603', 'CommentCount': '1', 'AcceptedAnswerId': '2083', 'CreationDate': '2012-01-08T15:33:04.230', 'Id': '2081''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '1182', 'Title': 'Context-free grammar for $\\{ a^n b^m a^{n+m} \\}$', 'LastEditDate': '2012-05-28T12:21:03.760', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1594', 'FavoriteCount': '1', 'Body': "<p>I've got a problem with this task. I should declare a context-free grammar for this language:</p>\n\n<p>$\\qquad \\displaystyle L := \\{\\, a^nb^ma^{n+m} : n,m \\in \\mathbb{N}\\,\\}$</p>\n\n<p>My idea is: We need a start symbol, for example $S$. I know that I can generate the first $a$ and the last $a$ by $S \\to a a$. I don't know what is the next idea to solve this task.</p>\n", 'Tags': '<formal-languages><context-free><formal-grammars>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-05-28T15:46:56.970', 'CommentCount': '5', 'AcceptedAnswerId': '2129', 'CreationDate': '2012-05-28T11:53:46.383', 'Id': '2127''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>My problem is how can I prove that a grammar is unambiguous?\nI have the following grammar:\n$$S\n\u2192 statement\n\u2223 \\mbox{if } expression \\mbox{ then } S\n\u2223 \\mbox{if } expression \\mbox{ then } S \\mbox{ else } S$$</p>\n\n<p>and make this to an unambiguous grammar, I think its correct:</p>\n\n<ul>\n<li><p>$ S \u2192 S_1 \u2223 S_2 $</p></li>\n<li><p>$S_1\n\u2192 \\mbox{if } expression \\mbox{ then } S\n\u2223 \\mbox{if } expression \\mbox{ then } S_2 \\mbox{ else } S_1$</p></li>\n<li><p>$S_2\n\u2192 \\mbox{if } expression \\mbox{ then } S_2 \\mbox{ else } S_2\n\u2223 statement$</p></li>\n</ul>\n\n<p>I know that a unambiguous grammar has one parse tree for every term.</p>\n', 'ViewCount': '3778', 'Title': 'How to prove that a grammar is unambiguous?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-09T13:50:57.277', 'LastEditDate': '2013-02-09T13:50:57.277', 'AnswerCount': '3', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '1594', 'Tags': '<context-free><formal-grammars><proof-techniques><ambiguity>', 'CreationDate': '2012-06-10T17:15:32.787', 'FavoriteCount': '4', 'Id': '2320''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In my class we used a Pushdown Automata to Context Free Grammar conversion algorithm that produces a lot extraneous states.</p>\n\n<p>For example, for two transitions, I am getting the following productions</p>\n\n<blockquote>\n  <p>$$\\begin{gather*}\n  \\delta(q_0,1,Z) = (q_0,XZ) \\\\\n  {}[q_0,Z,q_0] \\to 1[q_0,X,q_0][q_0,Z,q_0] \\\\\n  {}[q_0,Z,q_0] \\to 1[q_0,X,q_1][q_1,Z,q_0] \\\\\n  {}[q_0,Z,q_1] \\to 1[q_0,X,q_0][q_0,Z,q_1] \\\\\n  {}[q_0,Z,q_1] \\to 1[q_0,X,q_1][q_1,Z,q_1] \\\\\n\\end{gather*}$$</p>\n  \n  <p>$$ \\begin{gather*}\n  \\delta(q_1,0,Z) = (q_0,Z) \\\\\n  {}[q_1,Z,q_0 ] \\to 0[q_0,Z,q_0] \\\\\n  {}[q_1,Z,q_1 ] \\to 0[q_0,Z,q_1] \\\\\n\\end{gather*}$$</p>\n</blockquote>\n\n<p>How do I decide which state makes it into final production, and which one will be excluded ?</p>\n', 'ViewCount': '304', 'Title': 'Eliminating useless productions resulting from PDA to CFG converison', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-01T18:57:35.320', 'LastEditDate': '2012-06-27T12:51:15.767', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '4834', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1758', 'Tags': '<automata><formal-grammars><context-free><pushdown-automata>', 'CreationDate': '2012-06-26T20:28:39.280', 'Id': '2503''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '232', 'Title': 'Is this language Context-Free?', 'LastEditDate': '2012-07-05T08:32:15.243', 'AnswerCount': '1', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2076', 'FavoriteCount': '2', 'Body': "<p>Is the language</p>\n\n<p>$$L = \\{a,b\\}^* \\setminus \\{(a^nb^n)^n\\mid n \\geq1 \\}$$</p>\n\n<p>context-free? I believe that the answer is that it is not a CFL, but I can't prove it by Ogden's lemma or Pumping lemma.</p>\n", 'Tags': '<formal-languages><context-free><pumping-lemma>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-07-05T09:41:53.560', 'CommentCount': '2', 'AcceptedAnswerId': '2627', 'CreationDate': '2012-07-05T05:40:38.400', 'Id': '2623''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '903', 'Title': 'Context-free grammar to a pushdown automaton', 'LastEditDate': '2012-07-29T14:15:47.920', 'AnswerCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2125', 'FavoriteCount': '1', 'Body': "<p>I'm trying to convert a context free grammar to a pushdown automaton (PDA); I'm not sure how I'm gonna get an answer or show you my progress as it's a diagram... Anyway this is the last problem I have on a homework that's due later today, so I'd appreciate some kind of help, even if it's just an explanation of the correct answers diagram. I need a PDA corresponding to this CFG:</p>\n\n<p>$$S \\rightarrow aSa | bSb | B$$\n$$B \\rightarrow bB | \\epsilon$$</p>\n\n<p>I know it will have to push X every time 'a' is read before a 'b', and pop X every time 'a' is read after a 'b'. But I'm not sure how to arrange the PDA in order to tell which a's came after b's. Also, I'm unsure of how to deal with the b's in terms of the stack, as there can be as many in the middle of the string as you want. Help appreciated.</p>\n\n<p>Thanks, Pachun</p>\n", 'Tags': '<formal-grammars><context-free><pushdown-automata>', 'LastEditorUserId': '472', 'LastActivityDate': '2012-07-29T14:15:47.920', 'CommentCount': '2', 'AcceptedAnswerId': '2736', 'CreationDate': '2012-07-13T18:08:44.950', 'Id': '2735''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Please note that I am aware the undecidability of the conversion of context-free grammer to regular grammer. But given the non-embedding property of the input context-free grammer, is there any algorithm to convert it to regular grammer, or DFA directly?</p>\n', 'ViewCount': '216', 'Title': 'How to convert a non-embedding context free grammer to regular grammer?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-15T07:28:33.087', 'LastEditDate': '2012-07-18T01:57:35.887', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '2775', 'Score': '2', 'OwnerDisplayName': 'dalibocai', 'PostTypeId': '1', 'Tags': '<formal-languages><formal-grammars><context-free>', 'CreationDate': '2012-01-20T15:38:28.743', 'Id': '2774''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '1273', 'Title': 'Removing Left Recursion from Context-Free Grammars - Ordering of nonterminals', 'LastEditDate': '2014-01-23T17:17:28.390', 'AnswerCount': '1', 'Score': '4', 'OwnerDisplayName': 'clebert', 'PostTypeId': '1', 'FavoriteCount': '1', 'Body': u'<p>I have recently implemented the Paull\'s algorithm for removing left-recursion from context-free grammars:</p>\n\n<blockquote>\n  <p>Assign an ordering $A_1, \\dots, A_n$ to the nonterminals of the grammar.</p>\n  \n  <p>for $i := 1$ to $n$ do begin<br>\n  $\\quad$ for $j:=1$ to $i-1$ do begin<br>\n  $\\quad\\quad$ for each production of the form $A_i \\to A_j\\alpha$ do begin<br>\n  $\\quad\\quad\\quad$ remove $A_i \\to A_j\\alpha$ from the grammar<br>\n  $\\quad\\quad\\quad$ for each production of the form $A_j \\to \\beta$ do begin<br>\n  $\\quad\\quad\\quad\\quad$ add $A_i \\to \\beta\\alpha$ to the grammar<br>\n  $\\quad\\quad\\quad$ end<br>\n  $\\quad\\quad$ end<br>\n  $\\quad$ end<br>\n  $\\quad$ transform the $A_i$-productions to eliminate direct left recursion<br>\n  end</p>\n</blockquote>\n\n<p>According to <a href="http://research.microsoft.com/pubs/68869/naacl2k-proc-rev.pdf" rel="nofollow" title="Removing Left Recursion from Context-Free Grammars">this document</a>, the efficiency of the algorithm crucially depends on the ordering of the nonterminals chosen in the beginning; the paper discusses this issue in detail and suggest optimisations.</p>\n\n<p>Some notation:</p>\n\n<blockquote>\n  <p>We will say that a symbol $X$ is a <em>direct left corner</em> of\n  a nonterminal $A$, if there is an $A$-production with $X$ as the left-most symbol on the right-hand side. We define the <em>left-corner relation</em> to be the reflexive transitive closure of the direct-left-corner relation, and we define the <em>proper-left-corner relation</em> to be the transitive closure of\n  the direct-left-corner relation. A nonterminal is <em>left recursive</em> if it is a proper left corner of itself; a nonterminal is <em>directly left recursive</em> if it is a direct left corner of itself; and a nonterminal is <em>indirectly left recursive</em> if it is left recursive, but not directly left recursive.</p>\n</blockquote>\n\n<p>Here is what the authors propose:</p>\n\n<blockquote>\n  <p>In the inner loop of Paull\u2019s algorithm, for nonterminals $A_i$ and $A_j$, such that $i &gt; j$ and $A_j$ is a direct left corner of $A_i$, we replace all occurrences of $A_j$ as a direct left corner of $A_i$ with all possible expansions of $A_j$.</p>\n  \n  <p>This only contributes to elimination of left recursion from the grammar if $A_i$ is a left-recursive nonterminal, and $A_j$ lies on a path that makes $A_i$ left recursive; that is, if $A_i$ is a left corner of $A_j$ (in addition to $A_j$ being a left corner of $A_i$).</p>\n  \n  <p>We could eliminate replacements that are useless in removing left recursion if we could order the nonterminals of the grammar so that, if $i &gt; j$ and $A_j$ is a direct left corner of $A_i$, then $A_i$ is also a left corner of $A_j$.</p>\n  \n  <p>We can achieve this by ordering the nonterminals in decreasing order of the number of distinct left corners they have.</p>\n  \n  <p>Since the left-corner relation is transitive, if C is a direct left corner of B, every left corner of C is also a left corner of B.</p>\n  \n  <p>In addition, since we defined the left-corner relation to be reflexive, B is a left corner of itself.</p>\n  \n  <p>Hence, if C is a direct left corner of B, it must follow B in decreasing order of number of distinct left corners, unless B is a left corner of C.</p>\n</blockquote>\n\n<p>All I want is to know how to order the nonterminals in the beginning, but I don\'t get it from the paper. Can someone explain it in a simpler way? Pseudocode would help me to understand it better.</p>\n', 'Tags': '<algorithms><context-free><formal-grammars><efficiency><left-recursion>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-23T17:17:28.390', 'CommentCount': '0', 'AcceptedAnswerId': '2793', 'CreationDate': '2012-05-23T12:50:45.647', 'Id': '2792''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<blockquote>\n  <p>Show that if $A$ is a context-free language and $B$ is finite, then $A - B$ is a context-free language.</p>\n</blockquote>\n\n<p>I'm just not sure how to use their properties to formally show this. Thanks for all the help in advance.</p>\n", 'ViewCount': '65', 'Title': 'Showing $A-B$ is a CFL where $A$ is a CFL and $B$ is finite', 'LastEditorUserId': '41', 'LastActivityDate': '2012-07-21T05:01:43.487', 'LastEditDate': '2012-07-21T05:01:43.487', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2125', 'Tags': '<formal-languages><context-free><proof-techniques>', 'CreationDate': '2012-07-20T17:58:00.223', 'Id': '2843''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In <a href="http://classes.engr.oregonstate.edu/eecs/winter2012/cs480/assignments/Knuth-1965-TranslationofLanguages.pdf" rel="nofollow">Knuth\'s original paper on $LR(k)$ grammars</a>, he proved that the decision problem "Given a CFG $G$, is there a $k$ such that $G$ is an $LR(k)$ grammar?" is undecidable.</p>\n\n<p>Is there a similar result showing that it is undecidable whether a given CFG is an $LL(k)$ grammar for some choice of $k$?  Or is this problem known to be decidable?</p>\n', 'ViewCount': '175', 'Title': 'Determining whether a CFG is $LL(k)$ for any $k$?', 'LastEditorUserId': '2131', 'LastActivityDate': '2012-12-10T22:55:35.893', 'LastEditDate': '2012-12-10T22:55:35.893', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '4928', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '2131', 'Tags': '<formal-languages><computability><formal-grammars><context-free><parsing>', 'CreationDate': '2012-07-23T23:15:59.023', 'Id': '2889''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Consider the context free grammar:</p>\n\n<p>$\\qquad \\begin{align}\n    \\mathrm{bill} &amp;\\to \\mathrm{items}\\ \\mathrm{total}\\ \\mathrm{vat} \\\\\n    \\mathrm{items} &amp;\\to \\mathrm{item} \\mid \\mathrm{item}\\ \\mathrm{items} \\\\\n    \\mathrm{item} &amp;\\to name\\ \\mathrm{price} \\mid name\\ \\mathrm{quantity}\\ \\mathrm{price} \\\\\n    \\mathrm{quantity} &amp;\\to integer \\\\\n    \\mathrm{price} &amp;\\to integer \\\\\n    \\mathrm{total} &amp;\\to integer \\mid TOTAL\\ \\mathrm{price}  \\\\\n    \\mathrm{vat} &amp;\\to VAT\\ \\mathrm{price}  \n\\end{align}$</p>\n\n<p>How do I factor the grammar?</p>\n\n<p>This was asked in a past exam, and I don't know how to get started.</p>\n\n<p>Also, if you have any links that could help me understand this more it would be much appreciated!</p>\n", 'ViewCount': '126', 'Title': 'Factor a grammar', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-06T11:26:18.517', 'LastEditDate': '2012-08-01T22:11:53.953', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'jamie jenkins', 'PostTypeId': '1', 'Tags': '<formal-languages><formal-grammars><context-free>', 'CreationDate': '2012-08-01T20:13:21.343', 'FavoriteCount': '1', 'Id': '2989''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In the article <a href="http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm" rel="nofollow">Parsing Expressions by Recursive Descent by Theodore Norvell (1999)</a> the author starts with the following grammar for arithmetic expressions:</p>\n\n<pre><code>E --&gt; E "+" E | E "-" E | "-" E | E "*" E | E "/" E | E "^" E | "(" E ")" | v\n</code></pre>\n\n<p>which is quite bad, because it\'s ambiguous and left-recursive. So he starts from removing the left recursion from it, and his result is as such:</p>\n\n<pre><code>E --&gt; P {B P}\nP --&gt; v | "(" E ")" | U P\nB --&gt; "+" | "-" | "*" | "/" | "^"\nU --&gt; "-"\n</code></pre>\n\n<p>But I can\'t figure out how did he get to this result. When I try to remove the left recursion myself, I\'m doing it the following way:</p>\n\n<ol>\n<li><p>Firs, I group together the productions which doesn\'t have left recursion in one group, and other (left-recursive) in another group:</p>\n\n<pre><code>E --> E "+" E | E "-" E | E "*" E | E "/" E | E "^" E     // L-recursive\nE --> v | "(" E ")" | "-" E</code></pre></li>\n<li><p>Next, I name them and factor for easier manipulations:</p>\n\n<pre><code>E --> E B E  // L-recursive; B stands for "Binary operator"\nE --> P  // not L-recursive; P stands for "Primary Expression"\nP --> v | "(" E ")" | U E   // U stands for "Unary operator"\nB --> "+" | "-" | "*" | "/" | "^"\nP --> "-"</code></pre>\n\n<p>Now I need to deal only with the first two productions, which are now easier to deal with.</p></li>\n<li><p>I rewrite those first two productions by starting from the non-L-recursive production (which is simply <code>P</code>, the Primary expression) and following it by the optional Tail <code>T</code>, which I define as the rest of the original production less the first left-recursive nonterminal (that is, just <code>B E</code>) followed by the Tail <code>T</code>, <strong>or</strong> which could be empty:</p>\n\n<pre><code>E --> P T\nT --> B E T |</code></pre>\n\n<p>(note the empty alternative for the tail).</p></li>\n<li><p>These two productions I can now rewrite in EBNF like this:</p>\n\n<pre><code>E --> P {B E}</code></pre>\n\n<p>which is nearly what the author get, but I have <code>E</code> instead of <code>P</code> there inside the zero-or-more repetition pattern (the Tail). The other productions I get quite the same as he have got:</p>\n\n<p><pre><code>P --> v | "(" E ")" | U E\nB -> "+" | "-" | "*" | "/" | "^"\nU -> "-"</pre></code></p>\n\n<p>but here too I have <code>E</code> instead of <code>P</code> in the first production for <code>P</code>.</p></li>\n</ol>\n\n<p>So, my question is: What am I missing? What algebraic transformation on the syntax I need to proceed now to get the same exact form as the autor gets? I tried substitutions for <code>E</code>, but it only leads me into loops. I suspect that I need somehow to substitute <code>P</code> for <code>E</code>, but I don\'t know any legal transformation to justify it. Maybe you know what\'s the last missing step?</p>\n', 'ViewCount': '343', 'Title': 'Arithmetic expressions grammar transformation', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-23T17:22:47.697', 'LastEditDate': '2014-01-23T17:22:47.697', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '7', 'OwnerDisplayName': 'SasQ', 'PostTypeId': '1', 'OwnerUserId': '2381', 'Tags': '<formal-languages><context-free><formal-grammars><left-recursion>', 'CreationDate': '2012-08-05T20:59:01.593', 'Id': '3053''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Intuitively, every derivation in a context-free grammar corresponds to a parse-tree and vise versa. </p>\n\n<p>Is this intuition correct? If so how can I formalize and prove such a thing?</p>\n', 'ViewCount': '179', 'Title': 'Proof of equivalence of parse-trees and derivations', 'LastEditorUserId': '157', 'LastActivityDate': '2012-10-01T19:06:31.240', 'LastEditDate': '2012-10-01T19:06:31.240', 'AnswerCount': '1', 'CommentCount': '9', 'AcceptedAnswerId': '4833', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<formal-grammars><context-free>', 'CreationDate': '2012-08-18T15:38:57.743', 'Id': '3250''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I tried to find a simple example for a language that is not parseable with an LL(1) parser. I finally found this language.</p>\n\n<p>$$L=\\{a^nb^m|n,m\\in\\mathbb N\\land n\\ge m\\}$$</p>\n\n<p>Is my hypothesis true or is this language parseable with an LL(1) parser?</p>\n\n<p>One can use this simple grammar to describe $L$ (of course it is isn't LL(1) parseable):</p>\n\n<pre><code>S -&gt; \u03b5\nS -&gt; A\nA -&gt; aA\nA -&gt; aAb\nA -&gt; a\nA -&gt; ab\n</code></pre>\n", 'ViewCount': '604', 'Title': 'Is this language LL(1) parseable?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-08-29T09:51:17.570', 'LastEditDate': '2012-08-28T23:14:02.987', 'AnswerCount': '3', 'CommentCount': '2', 'AcceptedAnswerId': '3359', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2280', 'Tags': '<formal-languages><formal-grammars><context-free><parsers>', 'CreationDate': '2012-08-28T12:40:52.453', 'Id': '3350''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I\'m reviewing for my midterm and wanted to post this to see if anyone can spot any errors. Im supposed to make a PDA that recognizes this CFG:</p>\n\n<p>$\\qquad\\begin{align}\n  S &amp;\\to R1R1R1 \\\\\n  R &amp;\\to 0R \\mid 1R \\mid \\varepsilon\n\\end{align}$</p>\n\n<p>Here is my solution; I\'m aware that I forgot to draw the second circle around my accepting state.</p>\n\n<p><img src="http://i.stack.imgur.com/vNLh0.png" alt="enter image description here"></p>\n', 'ViewCount': '447', 'Title': 'Converting a context free grammar to a PDA -- is my solution correct?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-09-22T19:14:08.240', 'LastEditDate': '2012-09-21T21:12:00.730', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'jfisk', 'PostTypeId': '1', 'Tags': '<formal-languages><automata><context-free><pushdown-automata>', 'CreationDate': '2011-11-05T19:34:40.697', 'Id': '4654''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In helping someone understand phrase generators for use with testing grammars, think compiler test cases, I noted that I have never found a phrase generator that is knowledgeable of the grammar, and is deterministic. The phrase generators I am talking about rely on the grammar of the language as input so that the user does not have to recreate the rules for the grammar into a format acceptable for the tool. The tool must accept a BNF grammar; I don\'t mind if the grammar has to be factored some for the tool before input. Tools that rely on a seed or generate a random seed are what I want to avoid.</p>\n\n<p>I am aware that one can use PROLOG to generate a parser and then run a query that outputs a set of results that are phrases used for testing. I also know that it is not uncommon for these result sets to have 10**15 answers for basic cases of a grammar like C++.</p>\n\n<p>Does anyone know of such tools? They can be commercial or open-source as I don\'t plan on using it, I have my own, I just want to verify my knowledge. </p>\n\n<p>EDIT</p>\n\n<p>The tool must encompass sematic knowledge of the compiler. In other words the phrases must be able to be compiled by a compiler, not just pass the syntactic rules.</p>\n\n<p>EDIT</p>\n\n<p>I agree that the comments and answers regarding deterministic are correct and I my use of the word here is not correct.</p>\n\n<p>What I am looking for is a tool that not only takes in a BNF grammar and can use it "as is" which would mean for a grammar like C++ a basic result sets with 10**30 items. That is not an accurate number but a realistic one based on a phrase generator I have that can report the number of results before generating the results. Since that size of a result set is impractical, I have given the tool the ability to enhance the grammar with constraints, thinking tree pruning. This allows one to generate phrases for one particular branch of the grammar, and also prune and limit the sub-braches and number of recursion over those branches. Even with the constraints each result item is a valid C++ file for use as input to a C++ compiler.</p>\n\n<p>I have a proof of concept of this already, but the difference between a proof of concept and useful tool is a lot of work. So while a seed can be reused and create deterministic results, it does not allow the user to determine the conditions.</p>\n', 'ViewCount': '113', 'Title': "Phrase generators for use with testing grammars that don't use a seed", 'LastEditorUserId': '268', 'LastActivityDate': '2012-09-24T13:14:33.833', 'LastEditDate': '2012-09-24T13:14:33.833', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '4698', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '268', 'Tags': '<reference-request><formal-grammars><context-free><parsing><software-testing>', 'CreationDate': '2012-09-23T13:37:55.380', 'Id': '4692''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '702', 'Title': 'Closure of Deterministic context-free languages under prefix', 'LastEditDate': '2012-10-07T17:36:51.877', 'AnswerCount': '3', 'Score': '2', 'OwnerDisplayName': 'Sam Jones', 'PostTypeId': '1', 'OwnerUserId': '769', 'Body': "<p>For a formal language $L \\subseteq \\Sigma^{*}$ I define the set Pref(L) to be:</p>\n\n<p>$\\text{pref}(L) = \\{\\alpha \\in \\Sigma^{*} : \\exists \\beta \\in \\Sigma^{*} \\text{ such that } \\alpha \\beta \\in L\\}$</p>\n\n<p>ie. the set of all (not necessarily proper) prefixes of words in $L$. I know that if $L$ is context-free then pref(L) is context-free but if $L$ is deterministic context-free then is pref(L) deterministic context-free?</p>\n\n<p>I am sure this is known but I cannot find the answer anywhere and it's not in Hopcroft and Ullman.</p>\n", 'Tags': '<formal-languages><context-free><closure-properties>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-01-18T13:23:08.777', 'CommentCount': '6', 'AcceptedAnswerId': '4925', 'CreationDate': '2012-01-15T21:51:40.653', 'Id': '4924''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I am having issue with designing contex free grammar for the following language:</p>\n\n<p>$L = \\{0^n 1^m \\, | \\, 2n \\leq m \\leq 3n \\}$ </p>\n\n<p>I can design for the individual cases i.e. for $m \\geq 2n$ and $m \\leq 3n$ but don't know how should i combine both. Or is it a different approach altogether?</p>\n", 'ViewCount': '194', 'Title': 'Designing context free grammar for a language with range restriction on repetition of alphabets', 'LastActivityDate': '2012-10-18T15:21:50.520', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '6151', 'Score': '2', 'OwnerDisplayName': 'Inderdeep Singh', 'PostTypeId': '1', 'OwnerUserId': '4257', 'Tags': '<context-free>', 'CreationDate': '2012-10-18T08:33:41.950', 'Id': '6150''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm trying to find CFG's that generate a regular language over the alphabet {a b}</p>\n\n<p>I believe I got this one right: All strings that end in b and have an <strong>even</strong> number of b's in total:</p>\n\n<p>$\\qquad S \\to SS \\\\\n\\qquad S \\to YbYb \\mid \\varepsilon \\\\\n\\qquad Y \\to aY \\mid \\varepsilon$</p>\n\n<p>However, Im not sure how to accomplish this with an odd number of <em>b</em>'s.</p>\n\n<p>So for example, how could I find a CFG that generates all strings that end in b and have an <strong>odd</strong> number of b's in total: So far I have this,</p>\n\n<p>$\\qquad S \\to SS \\\\\n \\qquad S \\to YYb \\mid \\varepsilon \\\\\n \\qquad Y \\to abY \\mid baY \\mid \\varepsilon$</p>\n\n<p>But this can generate abababb so it's incorrect and Im stumped at this point. </p>\n", 'ViewCount': '286', 'Title': 'Context Free Grammars', 'LastEditorUserId': '98', 'LastActivityDate': '2012-10-22T13:47:53.540', 'LastEditDate': '2012-10-22T13:45:18.583', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '6164', 'Score': '1', 'OwnerDisplayName': 'user3115', 'PostTypeId': '1', 'Tags': '<regular-languages><formal-grammars><context-free>', 'CreationDate': '2012-10-19T06:49:34.393', 'Id': '6163''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '310', 'Title': 'Context Free Grammar for language', 'LastEditDate': '2012-11-02T07:05:25.063', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4365', 'FavoriteCount': '1', 'Body': "<p>The language is $L = \\{a^{i} b^{j} c^{k} \\;|\\; k \\neq 2j\\}$. I'm trying to write a grammar for this language, what I have so far is:</p>\n\n<p>$S \\rightarrow AT_{1} \\;|\\; AT_{2} \\;|\\; AT_{3} \\;|\\; AB \\;|\\; AC$</p>\n\n<p>$A \\rightarrow aA \\;|\\; \\varepsilon$ </p>\n\n<p>$B \\rightarrow bB \\;|\\; \\varepsilon$</p>\n\n<p>$C \\rightarrow cC \\;|\\; \\varepsilon$</p>\n\n<p>$T_{1} \\rightarrow bbB'T_{1}c \\;|\\; \\varepsilon $   (for $2j &gt; k$)(1)</p>\n\n<p>$B' \\rightarrow bB' \\;|\\; b$</p>\n\n<p>$T_{2} \\rightarrow bT_{2}ccC'\\;|\\; \\varepsilon$ (for $2j &lt; k$)</p>\n\n<p>$C' \\rightarrow cC' \\;|\\; c$</p>\n\n<p>$T_{3} \\rightarrow bT_{3}c \\;|\\; \\varepsilon$ (for $j = k$)</p>\n\n<p>the problem that I am having is, the string $bbccc$  can't be generated although valid, in that case $j = 2$ and $k = 3$  so $2\\times 2 &gt; 3$  corresponding to production rule (1), how can I fix this?</p>\n", 'Tags': '<formal-languages><formal-grammars><context-free>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-15T11:05:27.533', 'CommentCount': '4', 'AcceptedAnswerId': '6439', 'CreationDate': '2012-11-01T04:09:50.207', 'Id': '6415''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '114', 'Title': 'Proving the language of words with equal numbers of symbols non-context-free', 'LastEditDate': '2012-11-01T14:33:00.413', 'AnswerCount': '1', 'Score': '0', 'OwnerDisplayName': 'user3115', 'PostTypeId': '1', 'Body': u'<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/265/how-to-prove-that-a-language-is-not-context-free">How to prove that a language is not context-free?</a>  </p>\n</blockquote>\n\n\n\n<p>I\'m having a hard time figuring this out, any help is appreciated. </p>\n\n<p>Let EQUAL be the language of all words over $\\Sigma = \\{a,b,c\\}$ that have the same number of $a$\u2019s, $b$\u2019s and $c$\u2019s</p>\n\n<p>$\\qquad \\text{EQUAL} = \\{ w \\in \\Sigma^* \\mid |w|_a = |w|_b = |w|_c \\}$</p>\n\n<p>The order of the letters doesn\'t matter. How can you prove that EQUAL is non-context-free?</p>\n', 'ClosedDate': '2012-11-01T14:35:50.797', 'Tags': '<formal-languages><context-free>', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-01T14:33:00.413', 'CommentCount': '2', 'AcceptedAnswerId': '6426', 'CreationDate': '2012-11-01T06:28:49.280', 'Id': '6419''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>A <a href="http://en.wikipedia.org/wiki/Formal_grammar" rel="nofollow">grammar</a> is <em><a href="http://en.wikipedia.org/wiki/Ambiguous_grammar" rel="nofollow">ambiguous</a></em> if at least one of the words in the\nlanguage it defines can be parsed in more than one way. A simple example of an ambiguous grammar\n$$\n   E \\rightarrow E+E \\ |\\ E*E \\ |\\ 0 \\ |\\ 1 \\ |\\ ...\n$$\nbecause the string 1+2*3 can be parsed as (1+2)*3 and 1+(2*3).  For\ncontext free grammars (CFGs) ambiguity is not decidable [1, 2]. This implies that non-ambiguity is also not decidable. Moreover, at least one of ambiguity and\nnon-ambiguity cannot even be recursively enumerable, for otherwise\nambiguity of a given CFG $G$ could be decided by running the\nenumeration of ambiguity and non-ambiguity together and seeing which\none contains $G$ (and one of them must).</p>\n\n<p>So which problem is harder in this sense? Ambiguity or non-ambiguity?</p>\n\n<ol>\n<li><p>D. G. Cantor, On The Ambiguity Problem of Backus Systems.</p></li>\n<li><p>R. W. Floyd, On ambiguity in phrase structure languages.</p></li>\n</ol>\n', 'ViewCount': '127', 'Title': 'Hardness of ambiguity/non-ambiguity for context-free grammars', 'LastEditorUserId': '2887', 'LastActivityDate': '2012-11-03T16:47:16.880', 'LastEditDate': '2012-11-03T16:47:16.880', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6464', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '2887', 'Tags': '<computability><formal-grammars><context-free><undecidability><ambiguity>', 'CreationDate': '2012-11-03T14:29:51.043', 'Id': '6463''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am having difficulty with one of the exercises in the <em>Dragon Book</em>:</p>\n\n<blockquote>\n  <p><strong>Exercise 2.4.1(c):</strong> Construct recursive-descent parsers, starting with\n  the following grammars:</p>\n  \n  <p>$$S \\rightarrow 0S1\\ |\\ 01$$</p>\n</blockquote>\n\n<p>Yet, for constructing a feasible parser, it is required that for two productions $A \\rightarrow \\alpha\\ |\\ \\beta$, their FIRST sets are disjoint. But since:</p>\n\n<blockquote>\n  <p>$$FIRST(0S1) = \\{ 0 \\} \\hspace{2em}\\&amp;\\hspace{2em} FIRST(01) = \\{ 0 \\}$$</p>\n</blockquote>\n\n<p>this is not the case. How does one proceed here? Just state it is not feasible due to the stated conflict or is there alternative approach, like modfying the grammar?</p>\n', 'ViewCount': '523', 'Title': 'Recursive-Descent Predictive Parser for $S \\rightarrow 0S1\\ |\\ 01$', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-11-05T22:00:36.987', 'LastEditDate': '2012-11-05T01:53:06.597', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4459', 'Tags': '<context-free><compilers><parsers>', 'CreationDate': '2012-11-05T01:09:51.563', 'Id': '6479''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '550', 'Title': 'Inherent ambiguity of the language $L_2 = \\{a^nb^mc^m \\;|\\; m,n \\geq 1\\}\\cup \\{a^nb^nc^m \\;|\\; m,n \\geq 1\\}$', 'LastEditDate': '2012-11-09T06:57:09.207', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4422', 'FavoriteCount': '0', 'Body': "<p>I went through a question asking me to choose the inherently ambiguous language among a set of options.</p>\n\n<p>$$L_1 = \\{a^nb^mc^md^n \\;|\\; m,n \\geq 1\\}\\cup \\{a^nb^nc^md^m \\;|\\; m,n \\geq 1\\}$$\n$$and$$\n$$L_2 = \\{a^nb^mc^m \\;|\\; m,n \\geq 1\\}\\cup \\{a^nb^nc^m \\;|\\; m,n \\geq 1\\}$$</p>\n\n<p>The solution said that $L_1$ is ambiguous while $L_2$ isn't. It generated the following grammar for $L_1$</p>\n\n<p>$S \\rightarrow S_1\\;|\\;S_2$</p>\n\n<p>$S_1 \\rightarrow AB$</p>\n\n<p>$A \\rightarrow aAb\\;|\\;ab$</p>\n\n<p>$B \\rightarrow cBd\\;|\\;cd$</p>\n\n<p>$S_2 \\rightarrow aS_2d\\;|\\;aCd$</p>\n\n<p>$C \\rightarrow bCc\\;|\\;bc$</p>\n\n<p>Now for the string <code>abcd</code>, it will generate two parse trees; so it is ambiguous.</p>\n\n<p>But a similar grammar can be created for $L_2$ too</p>\n\n<p>$S \\rightarrow S_1|S_2$</p>\n\n<p>$S_1 \\rightarrow Ac$</p>\n\n<p>$A \\rightarrow aAb\\;|\\;\\epsilon$</p>\n\n<p>$S_2 \\rightarrow aB$</p>\n\n<p>$B \\rightarrow bBc\\;|\\;\\epsilon$</p>\n\n<p>And it will also generate two parse trees for <code>abc</code>. Why isn't it ambiguous then?</p>\n\n<p>If you need,\n$L_2$ can be written as $\\{a^nb^pc^m\\;|\\; n=p \\;\\; or \\;\\; m=p\\}$</p>\n", 'Tags': '<formal-languages><formal-grammars><context-free><ambiguity>', 'LastEditorUserId': '4422', 'LastActivityDate': '2012-11-09T06:57:09.207', 'CommentCount': '4', 'AcceptedAnswerId': '6573', 'CreationDate': '2012-11-09T04:40:14.713', 'Id': '6568''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '533', 'Title': 'How do I show that whether a PDA accepts some string $\\{ w!w \\mid w \\in \\{ 0, 1 \\}^*\\}$ is undecidable?', 'LastEditDate': '2012-11-12T11:36:31.860', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2860', 'FavoriteCount': '1', 'Body': "<p>How do I show that the problem of deciding whether a PDA accepts some string of the form $\\{ w!w \\mid w \\in \\{ 0, 1 \\}^*\\}$ is undecidable?</p>\n\n<p>I have tried to reduce this problem to another undecidable one such as whether two context-free grammars accept the same language. However, I'm not sure how to use it as a subroutine.</p>\n", 'Tags': '<formal-languages><automata><context-free><undecidability><pushdown-automata>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-23T22:02:29.330', 'CommentCount': '0', 'AcceptedAnswerId': '6630', 'CreationDate': '2012-11-12T05:00:51.627', 'Id': '6626''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I gotta make a CFG and PDA for the grammar that has perfectly nested parentheses and brackets.</p>\n\n<p>$\\qquad\\begin{align}\n S &amp;\\to [S] \\\\\n S &amp;\\to (S) \\\\\n S &amp;\\to SS \\\\\n S &amp;\\to \\varepsilon\n\\end{align}$</p>\n\n<p>Not sure if this is correct, or how to make the PDA from it?</p>\n', 'ViewCount': '219', 'Title': 'CFG and PDA for the grammar that has perfectly nested parentheses and brackets', 'LastEditorUserId': '98', 'LastActivityDate': '2012-11-19T18:12:47.330', 'LastEditDate': '2012-11-19T18:12:47.330', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4632', 'Tags': '<formal-languages><automata><formal-grammars><context-free><pushdown-automata>', 'CreationDate': '2012-11-17T18:39:11.147', 'Id': '6719''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I am having diffuculties understanding the principle of lookahead in LR(1) - items. How do I compute the lookahead sets ? </p>\n\n<p>Say for an example that I have the following grammar:</p>\n\n<p>S -> AB\nA -> aAb | b\nB -> d</p>\n\n<p>Then the first state will look like this:</p>\n\n<pre><code>S -&gt; .AB , {look ahead}\nA -&gt; .aAb, {look ahead}\nA -&gt; .b, {look ahead}\n</code></pre>\n\n<p>I now what look aheads are, but I don't know how to compute them. I have googled for answers but there isn't any webpage that explains this in a simple manner.</p>\n\n<p>Thanks in advance </p>\n", 'ViewCount': '500', 'Title': 'LR(1) - Items, Look Ahead', 'LastActivityDate': '2014-01-28T11:28:50.617', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6772', 'Score': '2', 'OwnerDisplayName': 'mrjasmin', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><formal-grammars><context-free><parsing>', 'CreationDate': '2012-11-19T18:00:06.743', 'Id': '6771''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Identify the language given by $L = \\{ x \\in (0,1)^* : x \\neq ww^R, w \\in (0,1)^*\\}$. Note: $w^R$ is the reverse of the string $w$.</p>\n\n<p>Closure property can/should be applied only in the cases when the actual language is not specified. Otherwise, you may arrive at wrong conclusions. The language in question is fully specified, so I doubt whether one can directly apply closure property on $ww^R$, which you say, is its complement or vice versa. The given answer is CFL. But I don't seem to have arrived at it satisfactorily.</p>\n", 'ViewCount': '541', 'Title': 'Is the complement of $ww^R$ context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-05T15:18:31.827', 'LastEditDate': '2012-12-01T14:28:40.913', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4763', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2012-11-27T18:33:56.610', 'Id': '6960''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm trying to study for an exam and having difficulty with the following practice questions. Any help would be appreciated.</p>\n\n<ol>\n<li>Give a language $L$ such that $L$ is not recursive but $\\text{prefix}(L)$ is regular.</li>\n<li>Give two languages $L_1$ and $L_2$, such that $L_1$ and $L_2$ are not recursive, but $L_1\\cap L_2$ is recursive.</li>\n<li>Give a language $L$ such that $L$ is regular but $\\text{unary}(L)$ is not context-free.</li>\n</ol>\n", 'ViewCount': '119', 'Title': 'Recursive and regular languages', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-11-27T21:28:14.270', 'LastEditDate': '2012-11-27T20:39:13.353', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4767', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2012-11-27T20:16:52.957', 'Id': '6965''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>In class this week we've been learning about the CFLs and their closure properties. I've seen proofs for union, intersection and compliment but for reversal my lecturer just said its closed. I wanted to see the proof so I've been searching for the past few days but all I've found is most people just say that to reverse the productions is enough to prove it. Those that do go a little more formal just state there is an easy inductive proof you can give. Can anyone provide me with some more information/hints about the inductive proof? Try as I might I can't come up with it.</p>\n", 'ViewCount': '697', 'Title': 'Context-free Languages closed under Reversal', 'LastActivityDate': '2012-11-28T15:05:43.030', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '6994', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4786', 'Tags': '<context-free><closure-properties>', 'CreationDate': '2012-11-28T12:31:08.280', 'Id': '6992''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Deterministic context-free languages are commonly defined using an <em>automaton</em> concept, the (restricted, deterministic) pushdown automaton. To some that is confusing, as the name <em>context-free</em> refers to a grammar type.</p>\n\n<p>I seem to remember there exists a characterization of the DCF languages using grammars. In my recollection it used a complicated equivalence on non-terminals. Can anyone provide a pointer to that work?</p>\n', 'ViewCount': '180', 'Title': 'Grammatical characterization of deterministic context-free languages', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-05T09:56:58.627', 'LastEditDate': '2012-11-30T12:42:38.430', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '7047', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '4287', 'Tags': '<reference-request><formal-grammars><context-free>', 'CreationDate': '2012-11-30T00:33:24.183', 'Id': '7031''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am looking for a proof for the following problem:</p>\n\n<blockquote>\n  <p>For languages $L$ and $R$, if $L$ is <a href="http://en.wikipedia.org/wiki/Deterministic_context-free_language" rel="nofollow">deterministic context-free</a>\n  and $R$ is regular, then $LR$ is a deterministic context-free\n  language.</p>\n</blockquote>\n\n<p>Note: $RL$ may not satisfy this condition, e.g. if $L=\\{wcw^R\\mid w\\in (a|b)^*\\}$, and $R=\\{a\\}^*$.</p>\n', 'ViewCount': '316', 'Title': 'Deterministic context-free languages are closed under regular right-product', 'LastEditorUserId': '39', 'LastActivityDate': '2012-11-30T20:19:21.433', 'LastEditDate': '2012-11-30T20:19:21.433', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '4486', 'Tags': '<formal-languages><context-free><closure-properties><pushdown-automata>', 'CreationDate': '2012-11-30T10:53:41.263', 'Id': '7041''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '24', 'Title': 'CFL complement Theory Of Computation', 'LastEditDate': '2012-12-01T10:31:47.943', 'AnswerCount': '0', 'Score': '0', 'OwnerDisplayName': 'user1771809', 'PostTypeId': '1', 'OwnerUserId': '4763', 'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/6960/complement-of-cfl">complement of CFL</a>  </p>\n</blockquote>\n\n\n\n<p>Identify the language given by $L=\\{x \\in \\{0,1\\}^* \\mid x\\neq ww^R , w\\in\\{0,1\\}^*\\}$.\nNote: $w^R$ is the reverse of the string $w$.</p>\n\n<p>Closure property can/should be applied only in the cases when the actual language is not specified. Otherwise, you may arrive at wrong conclusions. The language in question is fully specified, so I doubt whether one can directly apply closure property on $w=w^R$, which you say, is its complement or vice versa.C\nThe given answer is CFL. But I dont seem to have arrived at it satisfactorily.</p>\n', 'ClosedDate': '2012-12-01T14:27:13.350', 'Tags': '<formal-languages><context-free>', 'LastEditorUserId': '2205', 'LastActivityDate': '2012-12-01T10:31:47.943', 'CommentCount': '3', 'CreationDate': '2012-11-26T13:31:52.810', 'Id': '7070''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p>Let $P$ be a regular language and $Q$ be a context-free language such\n  that $Q \\subseteq P$(For example, let $P =  a^*b^*$ and $Q = \\{ a^nb^n | n \\ge 0\\}$). Then which of the following is always regular?</p>\n  \n  <ol>\n  <li>$P \\cap Q$</li>\n  <li>$P - Q$</li>\n  <li>$\\Sigma^* - Q$</li>\n  <li>$\\Sigma^* - P$</li>\n  </ol>\n</blockquote>\n\n<p><strong>Option 1</strong> <br>\n$P \\cap Q = Q$ as $P \\subseteq Q$. Thus $P \\cap Q$ is context-free.</p>\n\n<p><strong>Option 2</strong> <br>\nI was not able to generally reason here. I used the example mentioned in the question.<br>\nLet  $P =  a^*b^* $ and $Q = \\{ a^nb^n | n \\ge 0\\}$. <br>\n$P - Q = \\{a^nb^m | n \\neq m\\}$ which is not regular but only context-free.</p>\n\n<p><strong>Option - 3</strong><br>\nLet $\\Sigma = \\{ a, b\\}$ and $Q = \\{ a^nb^n | n \\ge 0\\}$. <br>\nAgain $\\Sigma^* - Q =  \\{a^nb^m | n \\neq m\\} $ which is not regular but only  context-free.</p>\n\n<p>Thus, the 4th option must be right, $\\Sigma^* - P$ is regular. I am however unable to understand this result intuitively. Could somebody explain?</p>\n', 'ViewCount': '104', 'Title': 'Closure properties of languages', 'LastEditorUserId': '2980', 'LastActivityDate': '2012-12-27T06:01:51.860', 'LastEditDate': '2012-12-27T06:01:51.860', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7119', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2980', 'Tags': '<formal-languages><regular-languages><context-free><closure-properties>', 'CreationDate': '2012-12-03T09:28:15.073', 'Id': '7118''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Using this grammar, over the alphabet $\\Sigma=\\{a\\}$\n$$\nS \\rightarrow a \\\\\nS\\rightarrow CD \\\\\nC\\rightarrow ACB \\\\\nC\\rightarrow AB \\\\\nAB\\rightarrow aBA \\\\\nAa\\rightarrow aA \\\\\nBa\\rightarrow aB \\\\\nAD\\rightarrow Da \\\\\nBD\\rightarrow Ea \\\\\nBE\\rightarrow Ea \\\\\nE\\rightarrow a \\\\\n$$\nIm trying to show that the working string $aaaaaaaaaBBBAAAD$ or $a^{n^2} B^nA^nD$ generates the word $a^{(n+1)^2}$</p>\n', 'ViewCount': '113', 'Title': 'Generate the word using this grammar', 'LastEditorUserId': '198', 'LastActivityDate': '2012-12-12T12:17:29.700', 'LastEditDate': '2012-12-12T12:17:29.700', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '7142', 'Score': '1', 'OwnerDisplayName': 'user3115', 'PostTypeId': '1', 'Tags': '<formal-grammars><context-free>', 'CreationDate': '2012-12-04T00:56:13.803', 'Id': '7141''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I need to know what class of CFL is closed under i.e. what set is complement of CFL.\nI know CFL is not closed under complement, and I know that P is closed under complement. Since CFL $\\subsetneq$ P I can say that complement of CFL is included in P(right?). There is still a question whether complement of CFL is proper subset of P or the whole P. I would appreciate any ideas on how to show that complement of CFL is the whole P(if that's the case of course). </p>\n", 'ViewCount': '1022', 'Title': 'What is complement of Context-free languages?', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-05T02:26:08.850', 'LastEditDate': '2012-12-04T16:52:22.483', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7146', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4859', 'Tags': '<complexity-theory><formal-languages><context-free><closure-properties><sets>', 'CreationDate': '2012-12-04T01:48:38.370', 'Id': '7144''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is the language $L=\\{ xyx^Ry^R \\mid x,y \\text{ is an element of }\\{0,1\\}^*\\}$ context-free? </p>\n\n<p>Note: $x^R$ is the reverse of $x$.</p>\n\n<p><strong>My Work:</strong> I think this is a context free language. Since a <a href="http://en.wikipedia.org/wiki/Pushdown_automaton" rel="nofollow">pushdown automaton</a> (PDA) accepts <a href="http://en.wikipedia.org/wiki/Context-free_language" rel="nofollow">context-free languages</a>, I am trying to draw a PDA for this language. When I draw a PDA, how does the PDA tell $x$ and $y$ apart? \nOr is this not a context-free language? (then I can use pumping length to prove this)</p>\n', 'ViewCount': '166', 'Title': 'Is $L=\\{ xyx^Ry^R \\mid x,y \\text{ is an element of }\\{0,1\\}^*\\}$ context-free?', 'LastEditorUserId': '4304', 'LastActivityDate': '2012-12-06T16:19:30.307', 'LastEditDate': '2012-12-05T19:03:40.913', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4884', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2012-12-05T18:14:43.460', 'FavoriteCount': '1', 'Id': '7188''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '1168', 'Title': 'Construct a PDA for the complement of $a^nb^nc^n$', 'LastEditDate': '2013-11-20T12:31:53.400', 'AnswerCount': '1', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4886', 'FavoriteCount': '1', 'Body': "<p>I am wondering if this is even possible, since $\\{a^n b^n c^n  \\mid n \\geq 0\\} \\not\\in \\mathrm{CFL}$. Therefore a PDA that can distinguish a word $w\\in\\{a^n b^n c^n  \\mid n \\geq 0\\}$ from the rest of $\\{a^*b^*c^*\\}$ might as well accept it, which sounds contradictory to me.</p>\n\n<p>I guess I need to take advantage of the non-deterministic nature of PDAs but I'm out of ideas. If you could offer some advice I would very much appreciate it.</p>\n", 'Tags': '<formal-languages><automata><context-free><pushdown-automata>', 'LastEditorUserId': '472', 'LastActivityDate': '2013-11-20T12:31:53.400', 'CommentCount': '3', 'AcceptedAnswerId': '7191', 'CreationDate': '2012-12-05T18:20:04.433', 'Id': '7190''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I got this question on my final exam: Is the following language context-free?</p>\n\n<p>$$ L = \\{w\\bar w^R \\mid  w\\in \\{0,1\\}^*   \\}$$</p>\n\n<p><strong>Notation</strong>: \nThe string $\\bar w$  is obtained from $w$ by replacing all 0s with 1's and all 1's with 0's.  The string $\\bar w^R$ is $\\bar w$ in reverse order.</p>\n\n<hr>\n\n<blockquote>\n  <p>I've thought about it being a context-free language, but I notice that\n  when you pump the string in the middle, the string will still be in the\n  language. (using pumping lemma)</p>\n</blockquote>\n\n<p>I think it's context free. \nThis is the context free grammar:</p>\n\n<p>$$\nS \\to 0S1 \\mid  1S0 \\mid \\varepsilon $$\n(It's basically a palindrome, but both sides are exact opposites.)</p>\n", 'ViewCount': '149', 'Title': 'Is this a Context Free Language?', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-01-06T15:36:31.313', 'LastEditDate': '2012-12-07T07:41:18.067', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4912', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2012-12-07T06:01:39.430', 'Id': '7224''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let $A$ and $B$ be two deterministic finite automata. How do we prove that $L_E = \\{ \\langle A, B \\rangle : L(A) = L(B) \\}$ is neither regular nor context-free?</p>\n\n<p>Intuitively, I feel that $L_E$ should not be context-free because we must try each string $\\in \\Sigma^*$ (where $\\Sigma$ is the alphabet) and check if the string $\\in L(A)$ or $\\in L(B)$. However, this reasoning sounds informal to me. How do I formalize this proof?</p>\n', 'ViewCount': '95', 'Title': 'How do we prove that $L_E = \\{ \\langle A, B \\rangle : L(A) = L(B) \\}$ is neither regular nor context-free?', 'LastActivityDate': '2012-12-16T00:48:52.713', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '7418', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2860', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2012-12-15T19:18:15.340', 'Id': '7416''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Say I have a context-free grammar defined by the following rule.</p>\n\n<p>$$\n\\langle EXPR\\rangle \\rightarrow \\langle EXPR\\rangle + \\langle EXPR\\rangle~|~\\langle EXPR\\rangle \\times \\langle EXPR\\rangle~|~(\\langle EXPR \\rangle)~|~x\n$$</p>\n\n<p>This grammar is ambiguous since, for instance, I can generate the string $x + x \\times x$ via more than 1 leftmost derivation.</p>\n\n<p>How could I make this grammar unambiguous? Should I make sure that no $\\langle EXPR\\rangle + \\langle EXPR\\rangle$ is evaluated after a $\\langle EXPR\\rangle \\times \\langle EXPR\\rangle$ as such:</p>\n\n<p>$$\n\\langle EXPR\\rangle \\rightarrow \\langle EXPR\\rangle + \\langle EXPR\\rangle~|~\\langle MUL\\_EXPR\\rangle \\times \\langle MUL\\_EXPR\\rangle~|~(\\langle EXPR \\rangle)~|~x \\\\\n\\langle MUL\\_EXPR \\rangle \\rightarrow \\langle EXPR\\rangle \\times \\langle EXPR\\rangle~|~(\\langle EXPR \\rangle)~|~x \\\\\n$$</p>\n', 'ViewCount': '427', 'Title': 'In general, how does one make a context-free grammar unambiguous?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-16T10:51:37.453', 'LastEditDate': '2013-01-16T10:19:57.650', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2860', 'Tags': '<formal-grammars><context-free><ambiguity>', 'CreationDate': '2012-12-16T18:45:58.600', 'FavoriteCount': '0', 'Id': '7443''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>I went through a question asking me to categorize the following grammar.</p>\n\n<p>$$S \u2192 AA, S \u2192 AB, A \u2192 a, A\u2192BB, B \u2192 b, B \u2192 e$$</p>\n\n<p>From the production rules, clearly it is Context-Free. But it accepts a finite set of strings.\n$\\{e, a, aa, ab, abb, ba, bba, b, bb, bbb, bbbb\\}$\nwhich is regular language.</p>\n\n<p>So, is the above grammar regular? Though it does not follow from the rules.</p>\n\n<p>Basically my question is: <strong>Is the grammar $\\{S \u2192 AA, A \u2192 a\\}$ regular?.</strong></p>\n', 'ViewCount': '134', 'Title': 'Is this a regular grammar?', 'LastActivityDate': '2012-12-18T16:26:54.387', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '7487', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '4422', 'Tags': '<regular-languages><formal-grammars><context-free>', 'CreationDate': '2012-12-18T11:07:06.653', 'Id': '7486''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Given following grammar:</p>\n\n<p>$$\n\\begin{align}\nS \\rightarrow &amp;A1B \\\\\nA \\rightarrow &amp; 0A \\mid \\varepsilon \\\\\nB \\rightarrow &amp; 0B \\mid 1B \\mid \\varepsilon \\\\\n\\end{align}\n$$</p>\n\n<p>How can I show that this grammar is unambiguous? I need to find a grammar for the same language that is ambiguous, and demonstrate it.</p>\n\n<p>I know if I was asked to prove that the language is ambigious then I should find two different parse trees for same string, but I don't know what to do.</p>\n", 'ViewCount': '848', 'Title': 'How to show that given language is unambiguous', 'LastEditorUserId': '98', 'LastActivityDate': '2012-12-30T18:31:28.237', 'LastEditDate': '2012-12-22T07:00:56.657', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '7519', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5137', 'Tags': '<formal-languages><formal-grammars><context-free><proof-techniques><ambiguity>', 'CreationDate': '2012-12-20T00:20:48.643', 'Id': '7518''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '186', 'Title': 'Is this grammar really LL(1) while not being LR(1)?', 'LastEditDate': '2012-12-23T11:32:28.010', 'AnswerCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '4383', 'FavoriteCount': '0', 'Body': "<p>$S \\rightarrow S$, $L(G) = \\{\\}$</p>\n\n<p><strong>LL(1) analysis:</strong></p>\n\n<p>We estabilish $FIRST(S)$ to be empty and $FOLLOW(S)$ to be $\\{\\$\\}$.\n$FIRST(S)$ doesn't contain &epsilon;, so the parse table looks like this:</p>\n\n<pre><code>+---+---+\n|   | $ |\n+---+---+\n| S |   |\n+---+---+\n</code></pre>\n\n<p>and correctly rejects any input including &epsilon;.</p>\n\n<p><strong>LR(1) analysis:</strong></p>\n\n<p>We start with the initial state 0:</p>\n\n<p>$S' \\rightarrow \\bullet S [\\$]$</p>\n\n<p>calculate its closure:</p>\n\n<p>$S' \\rightarrow \\bullet S [\\$]$</p>\n\n<p>$S \\rightarrow \\bullet S [\\$]$</p>\n\n<p>and the only transition, which leads to state 1 on S:</p>\n\n<p>$S' \\rightarrow S \\bullet [\\$]$</p>\n\n<p>$S \\rightarrow S \\bullet [\\$]$</p>\n\n<p>State 1 has a reduce/reduce conflict.</p>\n\n<p>Now, obviously there must be something I'm missing, since LL(k) grammars are a proper subset of LR(k) grammars. Would anyone care to point out the error?</p>\n", 'Tags': '<formal-grammars><context-free><parsers>', 'LastEditorUserId': '4383', 'LastActivityDate': '2012-12-24T19:41:08.793', 'CommentCount': '2', 'AcceptedAnswerId': '7581', 'CreationDate': '2012-12-23T10:56:44.823', 'Id': '7560''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>G=({S,A,B},{0,1},P,S)</p>\n\n<p>Where P:</p>\n\n<ul>\n<li>S\u2192A1B</li>\n<li>A\u21920A|\u03b5      </li>\n<li>B\u21920B|1B|\u03b5</li>\n</ul>\n\n<p>I have to list the first 25 strings from L(G). So far I\'ve made the tree, but I\'m not sure that it\'s correct.  </p>\n\n<p><img src="http://i.stack.imgur.com/yZlK7.jpg" alt="enter image description here"></p>\n', 'ViewCount': '90', 'Title': 'Derive some strings', 'LastEditorUserId': '5206', 'LastActivityDate': '2012-12-31T04:47:22.970', 'LastEditDate': '2012-12-31T04:47:22.970', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7614', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '5206', 'Tags': '<context-free>', 'CreationDate': '2012-12-27T00:02:56.470', 'Id': '7613''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>I need help with the following question:</p>\n\n<p>Order the following formalisms according to their expressive power:\nplacing A before B means that any language definable by A is definable\nby B. Also state which, if any, of them are equivalent.</p>\n\n<pre><code>\u2022 Turing Machines (TM)\n\u2022 Regular expressions (reg.exp.)\n\u2022 Turing Machines with multiple tapes (TM+)\n\u2022 Pushdown Automata (PDA)\n\u2022 Nondeterministic Finite Automata with \u01eb-transitions (NFA\u01eb)\n\u2022 Nondeterministic Finite Automata (NFA)\n\u2022 LR(1) grammars\n\u2022 Nondeterministic Turing Machines (NTM)\n\u2022 Deterministic Pushdown Automata (DPDA)\n\u2022 Deterministic Finite Automata (DFA)\n\u2022 Context-free Grammars (CFG)\n</code></pre>\n\n<p>Is this the correct answer ? I have a exam next week and need to know If my answer is correct.</p>\n\n<pre><code>NFAe=NFA=DFA=Reg.exp, LR(1)-Grammar=DPDA, CFG=PDA, TM=NTM=TM+\n</code></pre>\n\n<p>Thanks in advance </p>\n', 'ViewCount': '173', 'Title': 'Formal Languages - Expressive power of Formalisms', 'LastActivityDate': '2013-01-01T22:35:50.987', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '7683', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><regular-languages><context-free><regular-expressions><pushdown-automata>', 'CreationDate': '2013-01-01T22:22:24.913', 'Id': '7682''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I need some help with deciding if a given language is regular, context-free or not context-free.</p>\n\n<p>Lets' say I have the following languages over the alphabet $\\mathcal{A} = \\{a,b,c,d\\}$:\n$$ \\begin{align}\n  L_1 &amp;= \\{ w \\in \\mathcal{A}^* \\mid \\text{\\(\\#a(w)\\) is even and \\(\\#b(w) = 1 \\mathrel{\\mathrm{mod}} 3\\)  and  \\(w \\not\\in \\mathcal{A}^* abc \\mathcal{A}^* \\)} \\} \\\\\n  L_2 &amp;= \\{ w \\in \\mathcal{A}^* \\mid \\text{\\(\\#a(w)\\) is even and \\(\\#b(w) \\lt \\#c(w)\\)} \\} \\\\\n  L_3 &amp;= \\{ w \\in \\mathscr{A}^* \\mid \\#a(w) \\lt \\#b(w) \\lt \\#c(w) \\} \\\\\n\\end{align} $$</p>\n\n<p>This is my solution:</p>\n\n<p>$L_1 = L_4 \\cap L_5 \\cap L_6$ where\n$$ \\begin{align}\n  L_4 &amp;= \\{ w \\mid \\text{\\(w\\) does not have a substring \\(abc\\)} \\} \\\\\n  L_5 &amp;= \\{ w \\mid \\#a(w) \\text{ is even} \\} \\\\\n  L_6 &amp;= \\{ w \\mid \\#b(w) = 1 \\mathrel{\\mathrm{mod}} 3 \\} \\\\\n\\end{align} $$</p>\n\n<p>A DFA can be constructed for $L_5$, because $L_5$ does not need infinite memory, so $L_5$ is regular. For $L_6$ the same reasoning as above. And for $L_4$ we can construct a DFA that simply does not accept $abc$, hence regular.</p>\n\n<p>$L_1$ is regular because regular languages are closed under intersection.</p>\n\n<p>For $L_2$ we can divide the language thus: $L_2 = L_5 \\cap L_7$ where</p>\n\n<p>$$ \\begin{align}\n  L_5 &amp;= \\{ w \\mid \\#a(w) \\text{ is even} \\} \\\\\n  L_7 &amp;= \\{ w \\mid \\#b(w) \\lt \\#c(w) \\} \\\\\n\\end{align} $$</p>\n\n<p>We now that a DFA can be constructed for $L_5$, hence $L_5$ is regular.\n$L_7$ is context-free because we can construct a PDA where the stack counts the number of $a$s and $b$s.</p>\n\n<p>$L_2$ is hence context-free because the intersection of a regular language and a context-free language result in a context-free language.</p>\n\n<p>For $L_3$ we can see that it's not context-free because where are limited to 1 stack.</p>\n\n<p>Is my reasoning right?</p>\n", 'ViewCount': '255', 'Title': 'Deciding whether a Language is Context-free/Regular/Non Context-Free', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-25T13:29:45.240', 'LastEditDate': '2013-03-26T12:54:48.303', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2013-01-03T14:34:12.090', 'Id': '7732''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '166', 'Title': 'Pumping lemma for Context-Free Languages', 'LastEditDate': '2013-01-03T22:12:16.170', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4658', 'FavoriteCount': '2', 'Body': "<p>I have a question about a specific pumping lemma problem for Context-Free Languages.</p>\n\n<p>Suppose we have the following Language:</p>\n\n<blockquote>\n  <p>$L = \\{a^{i}b^{j}c^{k}d^{l} \\mid 0 &lt; i &lt; k \\wedge j &gt; l &gt; 0 \\}$</p>\n</blockquote>\n\n<p>Here is my attemp to prove that the language is not context-free:</p>\n\n<p>Assume $L$ is context-free. Let $n&gt;0$ be the pumping length given by the lemma.</p>\n\n<p>Let $z = a^{n}b^{n+1}c^{n+1}d^{n}$, then $z \\in L$. </p>\n\n<p>Than according to the lemma, $z$ can be written as $z = uvwxy$ where the following properties hold:</p>\n\n<ol>\n<li>$|vx| \\geq 1$</li>\n<li>$|vwx| \\leq n$</li>\n<li>for every $i \\geq 0$, $uv^{i}wx^{i}y \\in L$.</li>\n</ol>\n\n<p>We have 6 different possibilities for $vwx$:</p>\n\n<ol>\n<li>$vwx = a^{i}$ where $i \\leq n$</li>\n<li>$vwx = a^{i}{b^j}$ where $i+j \\leq n$</li>\n<li>$vwx = b^i$ and $i \\leq n$</li>\n<li>$vwx = b^{i}c^{j}$ and $i+j \\leq n$</li>\n<li>$vwx = c^{i}$ with $i \\leq n$</li>\n<li>$vwx = c^{i}d^{j}$ and $i+j \\leq n$ </li>\n</ol>\n\n<p>Is this right so far? The thing that I'm unsure of is if my different cases for $vwx$ are right. </p>\n\n<p>How do I choose the pumping length for case 2? If I choose $i$ = 2, what if $i$ is zero ? Then I don't have any contradiction.</p>\n\n<p>Thanks in advance</p>\n", 'Tags': '<formal-languages><formal-grammars><context-free><pumping-lemma>', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-01-03T22:51:38.927', 'CommentCount': '2', 'AcceptedAnswerId': '7741', 'CreationDate': '2013-01-03T21:26:59.443', 'Id': '7740''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have a problem finding the right string to pump for the following language:</p>\n\n<p>$$L_1 = \\{a^{p+q}b^rc^sd^{q+r}e^s \\mid p, q, r, s \\ge 0\\}$$</p>\n\n<p>Which string should I choose to pump? The problem is that I don't know how to handle the fact that I have $p+q$ and $q+r$?</p>\n\n<p>Can I choose:\n$$Z = a^{2n}b^nc^nd^{2n}e^s$$</p>\n\n<p>Thanks in advance.</p>\n", 'ViewCount': '126', 'Title': 'Pumping lemma problem - Choosing the right string to pump', 'LastEditorUserId': '3011', 'LastActivityDate': '2013-01-04T09:46:44.527', 'LastEditDate': '2013-01-04T09:28:43.907', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '7752', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><automata><context-free><pumping-lemma>', 'CreationDate': '2013-01-04T09:22:51.140', 'Id': '7751''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '1416', 'Title': 'Explaining why a grammar is not LL(1)', 'LastEditDate': '2014-01-04T15:36:22.460', 'AnswerCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'FavoriteCount': '1', 'Body': u'<p>I need some help with explaining why a grammar is not LL(1).</p>\n\n<p>Let us take the following grammar:</p>\n\n<p>$$\n\\begin{align}\nS \\rightarrow &amp; aB \\mid bA \\mid \\varepsilon \\\\\nA \\rightarrow &amp; aS \\mid bAA \\\\\nB \\rightarrow &amp; b \\\\\n\\end{align}\n$$</p>\n\n<p>This is my attempt:</p>\n\n<p>For the grammar to be LL(1) it is a necessary condition that for any strings $c_1\u03b3$ and $c_2\u03b2$, derivable from $S \\rightarrow aB$ and $A \\rightarrow aS$ respectively, we have $c_1 \\ne c_2$. </p>\n\n<p>But, $S \\rightarrow aB$ and $A \\rightarrow aS$, hence $c_1 = c_2$ and the grammar is not LL(1).</p>\n\n<p>Is my reasoning right?</p>\n\n<p>Thanks in advance.</p>\n', 'Tags': '<formal-languages><regular-languages><context-free><pushdown-automata>', 'LastEditorUserId': '10637', 'LastActivityDate': '2014-01-04T15:36:22.460', 'CommentCount': '1', 'AcceptedAnswerId': '7789', 'CreationDate': '2013-01-04T16:14:19.883', 'Id': '7761''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I need some help with the following question:</p>\n\n<p>One of the languages</p>\n\n<p>$$L_1 = \\{a^pb^{q+r}c^sd^{q+t}e^{p+r} \\mid p, q, r, s \\ge 0\\ , s &gt; t\\}$$\n$$L_2 = \\{a^{p+q}b^rc^sd^{q+r}e^s \\mid p, q, r, s \\ge 0\\}$$</p>\n\n<p>is context-free and the other is not. Build a context-free grammar for the one that is. For the other one provide a proof that it is not regular, or that it is not context-free.</p>\n\n<p>How do I approach this problem ? I think that L2 is context-free because no comparisions are made. L1 is not context-free. </p>\n\n<p>Thanks in advance </p>\n', 'ViewCount': '100', 'Title': 'Pumping lemma problem', 'LastActivityDate': '2013-01-04T20:59:08.373', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '7770', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><automata><context-free><pumping-lemma>', 'CreationDate': '2013-01-04T19:08:16.647', 'Id': '7767''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Have read in Compiler textbook that type inference is context sensitive. Can anyone explain why is it so? This means that we need context sensitive grammar in semantic analysis phase of a compiler with this feature? How is it done in popular programming languages like C?</p>\n', 'ViewCount': '104', 'Title': 'Type inference in compiler is context sensitive?', 'LastActivityDate': '2013-01-06T09:52:09.023', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<formal-languages><programming-languages><context-free><compilers><context-sensitive>', 'CreationDate': '2013-01-06T03:14:11.183', 'Id': '7796''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>The <em>cyclic shift</em>  (also called <em>rotation</em> or <em>conjugation</em>) of a language $L$ is defined as $\\{ yx \\mid xy \\in L \\}$. According to <a href="http://en.wikipedia.org/wiki/Context-free_language">wikipedia</a> (and <a href="http://en.wikipedia.org/wiki/Cyclic_shift">here</a>) the context-free languages are closed under this operation, with references to papers from Oshiba and from Maslov. Is there an easy proof of this fact? </p>\n\n<p>For regular languages the closure is discussed in this form as "<a href="http://cs.stackexchange.com/questions/1986/prove-that-regular-languages-are-closed-under-the-cycle-operator">Prove that regular languages are closed under the cycle operator</a>".</p>\n', 'ViewCount': '628', 'Title': 'Easy proof for context-free languages being closed under cyclic shift', 'LastEditorUserId': '472', 'LastActivityDate': '2013-01-22T09:07:11.380', 'LastEditDate': '2013-01-16T02:25:42.500', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '7857', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '4287', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2013-01-08T12:59:17.587', 'Id': '7831''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I am learning about context free languages. </p>\n\n<p>I understand how $\\{a^n b^n c^n | n \\ge 0\\}$ can be shown to be not context free using the pumping lemma for CFL's.</p>\n\n<p>Intuitively however it seems that a pushdown automata to recognize $\\{a^n b^n c^n | n \\ge 0\\}$ can be constructed. This PDA would initially push two $a$'s into its stack whenever it sees an $a$ in the input. It would change state when it first encounters a $b$ and pop a single $a$. It would continue to pop $a$'s for every b in the input until it encounters a $c$. It would again change state and pop single $a$'s for every c encountered. If the stack is empty at the end of the input the language is recognized as $\\{a^n b^n c^n | n \\ge 0\\}$.</p>\n\n<p>There must be something I am overlooking whilst constructing the PDA as a language is context free if its has a PDA recognizing it. Please point out my mistake.</p>\n", 'ViewCount': '693', 'Title': 'Push down automata for $\\{a^n b^n c^n | n \\ge 0\\}$', 'LastActivityDate': '2013-01-17T14:04:47.477', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '8990', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2980', 'Tags': '<context-free><pushdown-automata><pumping-lemma>', 'CreationDate': '2013-01-17T13:57:17.883', 'Id': '8989''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Anyone knows if there is an algorithm for directly write the context-free grammar that generates a given regular expression?</p>\n', 'ViewCount': '1870', 'Title': 'Regular Expression to Context-Free Grammar', 'LastActivityDate': '2013-01-22T11:07:21.357', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '9057', 'Score': '1', 'OwnerDisplayName': 'Marco L.', 'PostTypeId': '1', 'OwnerUserId': '4311', 'Tags': '<formal-grammars><regular-expressions><context-free>', 'CreationDate': '2013-01-19T15:07:19.573', 'FavoriteCount': '1', 'Id': '9050''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '126', 'Title': 'Show how a sentence can be produced from a grammar (Dragon book 2.1)', 'LastEditDate': '2013-01-23T19:28:54.647', 'AnswerCount': '1', 'Score': '0', 'OwnerDisplayName': 'dan', 'PostTypeId': '1', 'OwnerUserId': '6520', 'Body': u"<p>In the Dragon book (Aho, Sethi, Ullmann) there is one exercise I don't get.</p>\n\n<blockquote>\n  <p>Chapter 2, Exercies: 2.1<br>\n  Given the context-free grammar\n  $$S \\to S S + \\mid S S * \\mid a$$\n  Task: Show how the signs aa+a* can be produced from this grammar.</p>\n</blockquote>\n\n<p>I understand the grammar, $S$ can have the form $S S +$\u2026 and so on. But I don't know what I'm supposed to do in this task. Sadly I can't find any solutions on the web.</p>\n", 'Tags': '<formal-grammars><context-free>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-01-23T19:30:31.350', 'CommentCount': '0', 'AcceptedAnswerId': '9110', 'CreationDate': '2013-01-23T14:54:22.350', 'Id': '9109''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/307/show-that-xy-mid-x-y-x-neq-y-is-context-free">Show that $\\{xy \\mid |x| = |y|, x\\neq y\\}$ is context-free</a>  </p>\n</blockquote>\n\n\n\n<p>Can anyone prove that the following is a CFL? or not? why?</p>\n\n<p>$$L=\\{w=w_1w_2 \\mid len(w_1)=len(w_2) \\mbox{ and $w_1$ does not equal $w_2$}\\}$$</p>\n', 'ViewCount': '102', 'ClosedDate': '2013-01-28T10:07:15.763', 'Title': 'Could anyone prove that this is a context free language or not?', 'LastEditorUserId': '31', 'LastActivityDate': '2013-01-27T16:43:01.910', 'LastEditDate': '2013-01-27T12:46:23.090', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'OwnerDisplayName': 'Saman', 'PostTypeId': '1', 'Tags': '<context-free>', 'CreationDate': '2013-01-27T12:31:18.403', 'Id': '9201''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '44', 'Title': 'How i can use Mathematical induction to prove CFG production?', 'LastEditDate': '2013-01-28T10:23:01.200', 'AnswerCount': '0', 'Score': '0', 'OwnerDisplayName': 'M.B', 'PostTypeId': '1', 'OwnerUserId': '6594', 'Body': '<p>If I have production $G_n$</p>\n\n<blockquote>\n  <p>$S \\rightarrow A_i b_i \\quad$ for $1 \\le i \\le n$</p>\n  \n  <p>$A_i \\rightarrow a_j A_i \\mid a_j\\quad$   for $1 \\le i$ and $i \\ne j$</p>\n</blockquote>\n\n<ol>\n<li>Prove $G_n$ is sub-productions from $2n^2 - n$</li>\n<li>Prove $G_n$ is $LR(0)$ production from $2^n + n^2 + n$</li>\n</ol>\n', 'ClosedDate': '2013-04-14T19:11:20.580', 'Tags': '<formal-languages><formal-grammars><context-free><proof-techniques><induction>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-28T10:23:01.200', 'CommentCount': '5', 'CreationDate': '2013-01-27T17:06:45.810', 'Id': '9230''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm looking for the name (or <em>a</em> name if there isn't one already) of this relation between $G_1=\\left&lt;\\Sigma_1,\\mathcal{N}_1,\\mathcal{R}_1,S_1\\right&gt;$ and $G_2=\\left&lt;\\Sigma_2,\\mathcal{N}_2,\\mathcal{R}_2,S_2\\right&gt;$:\n$$\\exists f_\\Sigma\\in\\Sigma_1\\times\\Sigma_2,f_\\mathcal{N}\\in\\mathcal{N_1}\\times\\mathcal{N}_2 \\text{ surjective functions s.t. }\\\\ \\mathcal{R}_2=\\left\\{f_\\mathcal{N}(N)\\rightarrow f(\\alpha)\\mid N\\rightarrow\\alpha\\in R_1\\right\\}\\text{ and } S_2=f_\\mathcal{N}(S_1) $$\nwhere $f$ is the extension of $f_\\Sigma$ and $f_\\mathcal{N}$ to words ($f\\in(\\Sigma_1\\cup\\mathcal{N}_1)^*\\times(\\Sigma_2\\cup\\mathcal{N}_2)^*$).</p>\n\n<p>In other words, you can map $G_1$ to $G_2$ (but not necessarily $G_2$ to $G_1$).</p>\n\n<p>If the mapping function were bijective, this would be an isomorphism, but they're not.</p>\n\n<p>What about if only $f_\\mathcal{N}$ is  surjective, i.e. $f_\\Sigma$ is bijective, or even the identity function?</p>\n", 'ViewCount': '40', 'Title': 'Is there a name for this relation on CFGs?', 'LastEditorUserId': '31', 'LastActivityDate': '2013-01-28T15:28:18.950', 'LastEditDate': '2013-01-28T15:16:34.997', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '9252', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '5366', 'Tags': '<terminology><formal-grammars><context-free>', 'CreationDate': '2013-01-28T14:36:24.383', 'Id': '9250''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '105', 'Title': "What's the reason for the second condition of the pumping lemma(s)?", 'LastEditDate': '2013-03-14T15:38:40.960', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '5291', 'FavoriteCount': '1', 'Body': '<p>For a language $L$ with pumping length $p$, and a string $s\\in L$, the pumping lemmas are as follows:</p>\n\n<p><strong>Regular version</strong>:\nIf $|s| \\geq p$, then $s$ can be written as $xyz$, satisfying the following conditions:</p>\n\n<ol>\n<li>$|y|\\geq 1$</li>\n<li>$|xy|\\leq p$</li>\n<li>$ \\forall i\\geq 0: xy^iz\\in L$</li>\n</ol>\n\n<p><strong>Context-free version</strong>:\nIf $|s| \\geq p$, then $s$ can be written as $uvxyz$, satisfying the following conditions:</p>\n\n<ol>\n<li>$|vy|\\geq 1$</li>\n<li>$|vxy|\\leq p$</li>\n<li>$ \\forall i\\geq 0: uv^ixy^iz\\in L$</li>\n</ol>\n\n<p>My question is this: <strong>Why do we have condition 2 in the lemma (for either case)?</strong> I understand that condition 1 essentially says that the "pumpable" (meaning nullable or arbitrarily repeatable) substring has to have some nonzero length, and condition 3 says that the pumpable substring can be repeated arbitrarily many times without deriving an invalid string (with respect to $L$). I\'m not sure what the second condition means or why it is important. Is there a simple but meaningful example to illustrate its importance?</p>\n', 'Tags': '<regular-languages><context-free><pumping-lemma>', 'LastEditorUserId': '2100', 'LastActivityDate': '2013-03-14T15:38:40.960', 'CommentCount': '0', 'AcceptedAnswerId': '9275', 'CreationDate': '2013-01-29T07:06:16.453', 'Id': '9269''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>On Facebook HackerCup 2013, they asked the following question:</p>\n\n<blockquote>\n  <p>Your friend John uses a lot of emoticons when you talk to him on\n  Messenger. In addition to being a person who likes to express himself\n  through emoticons, he hates unbalanced parenthesis so much that it\n  makes him go :(</p>\n  \n  <p>Sometimes he puts emoticons within parentheses, and you find it hard\n  to tell if a parenthesis really is a parenthesis or part of an\n  emoticon.</p>\n  \n  <p>A message has balanced parentheses if it consists of one of the\n  following:</p>\n  \n  <ul>\n  <li>An empty string "" </li>\n  <li>One or more of the following characters: \'a\' to\n  \'z\', \' \' (a space) or \':\' (a colon) </li>\n  <li>An open parenthesis \'(\', followed\n  by a message with balanced parentheses, followed by a close\n  parenthesis \')\'. </li>\n  <li>A message with balanced parentheses followed by\n  another message with balanced parentheses. </li>\n  <li>A smiley face ":)" or a\n  frowny face ":(" </li>\n  </ul>\n  \n  <p>Write a program that determines if there is a way to\n  interpret his message while leaving the parentheses balanced.</p>\n</blockquote>\n\n<p><a href="http://stackoverflow.com/questions/6447289/how-to-print-all-possible-balanced-parentheses-for-an-expression">Balancing parentheses</a> is talked about in a lot of places.  E.g. <code>(()) vs ()()</code>.  You can count</p>\n\n<ul>\n<li><code>\'(\' = +1 </code> </li>\n<li><code>\')\' = -1 </code></li>\n</ul>\n\n<p>Then you have to make sure your sum never falls below <strong>0</strong>. </p>\n\n<p>In this question they consider <code>:)</code> and <code>:(</code> as balanced and I wonder how much it changes things. One <a href="https://gist.github.com/4660602" rel="nofollow">solution</a> says that you can replace <code>r\'[^a-z:() ], \'\'</code>, <code>\':)\' -> \'}\'</code> and <code>\':(\' -> \'{\'</code>.  </p>\n\n<p>While I agree with the first sub, why are the last two substitutions valid?</p>\n', 'ViewCount': '177', 'Title': 'Facebook Hackercup 2013: Balanced Smileys', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-30T12:46:36.447', 'LastEditDate': '2013-01-30T12:46:36.447', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '3131', 'Tags': '<algorithms><context-free><binary-trees><parsing>', 'CreationDate': '2013-01-29T22:41:19.300', 'Id': '9285''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>For a language $L$ with pumping length $p$, and a string $s\\in L$, the pumping lemmas are as follows:</p>\n\n<p><strong>Regular version</strong>:\nIf $|s| \\geq p$, then $s$ can be written as $xyz$, satisfying the following conditions:</p>\n\n<ol>\n<li>$|y|\\geq 1$</li>\n<li>$|xy|\\leq p$</li>\n<li>$ \\forall i\\geq 0: xy^iz\\in L$</li>\n</ol>\n\n<p><strong>Context-free version</strong>:\nIf $|s| \\geq p$, then $s$ can be written as $uvxyz$, satisfying the following conditions:</p>\n\n<ol>\n<li>$|vy|\\geq 1$</li>\n<li>$|vxy|\\leq p$</li>\n<li>$ \\forall i\\geq 0: uv^ixy^iz\\in L$</li>\n</ol>\n\n<p>My question is this: <strong>Can someone give a concise and clear explanation of how regularity (context-freeness) imply the first and second conditions above?</strong> The pumping length is determined by (finite) properties (finite number of states or finite properties of production rules, respectively), the third properties guarantee that a state (production rule) can be skipped or repeated arbitrarily many times, but where do the first and second conditions originate? How are they justified?</p>\n', 'ViewCount': '127', 'Title': 'Where do the length restrictions of the pumping lemma come from?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-18T22:42:40.240', 'LastEditDate': '2013-01-30T20:26:09.033', 'AnswerCount': '4', 'CommentCount': '5', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '5291', 'Tags': '<formal-languages><regular-languages><context-free><pumping-lemma>', 'CreationDate': '2013-01-30T19:10:37.243', 'Id': '9323''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href="http://cs.stackexchange.com/questions/307/show-that-xy-mid-x-y-x-neq-y-is-context-free">Show that $\\{xy \\mid |x| = |y|, x\\neq y\\}$ is context-free</a>  </p>\n</blockquote>\n\n\n\n<p>Do there exist context-free grammars for the following two languages:</p>\n\n<ol>\n<li><p>The set of all strings of the form $xx$ where $x$ is a sequence of $0$\'s and $1$\'s. (For instance $0110101101$.)</p></li>\n<li><p>The set of all strings of the form $xy$ where $x$ and $y$ are sequences of $0$\'s and $1$\'s, $x$ and $y$ have the same length and $x\\neq y$.</p></li>\n</ol>\n', 'ViewCount': '53', 'ClosedDate': '2013-01-31T09:44:27.620', 'Title': 'Are these two languages context free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-01-31T09:40:26.160', 'LastEditDate': '2013-01-31T09:40:26.160', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'OwnerDisplayName': 'user13526', 'PostTypeId': '1', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-01-30T21:17:08.720', 'Id': '9337''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '144', 'Title': 'Give a grammar to show whether a language is regular or context-free', 'LastEditDate': '2013-02-02T14:17:23.077', 'AnswerCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '6680', 'FavoriteCount': '0', 'Body': "<p>I have to generate a grammar for the language $L = \\{ w \\in \\{ a, b\\}^* \\mid |w| \\in 2\\mathbb{N},  w \\neq w^R\\}$ and give the type of the language.</p>\n\n<p>I've generated the grammar</p>\n\n<p>$\\qquad \\begin{align}\n  S &amp;\\to aSa \\mid bSb \\mid aAb \\mid bAa \\\\\n  A &amp;\\to abA \\mid baA \\mid aaA \\mid bbA \\mid \\varepsilon\n\\end{align}$</p>\n\n<p>This grammar is a context free grammar. I now can say that $L$ is a context free language. But how can I say for sure that this language isn't regular ?</p>\n", 'Tags': '<formal-languages><formal-grammars><context-free>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-02T14:17:23.077', 'CommentCount': '1', 'AcceptedAnswerId': '9422', 'CreationDate': '2013-02-02T10:40:02.157', 'Id': '9418''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Suppose I have a context free grammar described:  </p>\n\n<blockquote>\n  <p>$S \\rightarrow 0SS1$<br>\n     $S \\rightarrow 1$<br>\n     $S \\rightarrow \\epsilon$  </p>\n</blockquote>\n\n<p>Because the first rule is considered the start rule does that mean that this grammar could never generate a string that starts with 1 or can you apply the second $S$ rule first to generate the string?</p>\n', 'ViewCount': '41', 'Title': 'General start rule question for a context free grammar', 'LastEditorUserId': '3011', 'LastActivityDate': '2013-02-03T18:46:49.417', 'LastEditDate': '2013-02-03T18:46:49.417', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '9452', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6634', 'Tags': '<context-free>', 'CreationDate': '2013-02-03T17:10:37.123', 'Id': '9451''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '226', 'Title': 'Can a CFG end have a non-terminal symbol in the middle of it?', 'LastEditDate': '2013-02-05T10:16:50.780', 'AnswerCount': '2', 'Score': '1', 'OwnerDisplayName': 'Badger Girl', 'PostTypeId': '1', 'OwnerUserId': '6707', 'Body': "<p>What is the correct way to write a CFG?</p>\n\n<pre><code>A -&gt; B C' E\nC' -&gt; C\nC' -&gt; null\n</code></pre>\n\n<p>or</p>\n\n<pre><code>A -&gt; B C'\nC' -&gt; C E\nC' -&gt; E\n</code></pre>\n", 'Tags': '<terminology><formal-grammars><context-free>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-05T10:16:50.780', 'CommentCount': '1', 'AcceptedAnswerId': '9496', 'CreationDate': '2013-02-04T20:47:59.420', 'Id': '9495''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Consider the context free grammar:</p>\n\n<p>$$S \\rightarrow aSb \\mid aSa \\mid bSa \\mid bSb \\mid \\varepsilon$$</p>\n\n<p>It could generate regular language, which means it can be converted to a right linear grammar. Is there a general rule to convert CFG into a RLG? If there is no general rule, could you please show me how to convert this CFG to a RLG?</p>\n', 'ViewCount': '792', 'Title': 'How to convert a context free grammar (could generate regular language) to a right-linear grammar', 'LastEditorUserId': '472', 'LastActivityDate': '2013-05-24T03:16:35.967', 'LastEditDate': '2013-05-24T03:15:42.197', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6576', 'Tags': '<regular-languages><context-free><formal-grammars>', 'CreationDate': '2013-02-06T13:40:06.713', 'Id': '9542''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '696', 'Title': 'Context Free Grammar for language $L=\\{a^ib^j \\mid i,j \\ge 0; i \\ne 2j\\}$', 'LastEditDate': '2013-02-16T14:40:19.113', 'AnswerCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6885', 'FavoriteCount': '0', 'Body': "<p>Can someone help with this:  </p>\n\n<p>$L=\\{a^ib^j \\mid i,j \\ge 0 \\text{ and } i \\ne 2j\\}$  </p>\n\n<p>I'm trying to write a grammar for this language?\nI don't know how to do this.\nI tried this:<br>\n$S \\rightarrow aaAb \\mid aA \\\\\nA \\rightarrow aA \\mid a$</p>\n", 'Tags': '<formal-languages><context-free><formal-grammars>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-16T14:40:19.113', 'CommentCount': '3', 'AcceptedAnswerId': '9811', 'CreationDate': '2013-02-15T11:14:40.920', 'Id': '9804''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>This is a homework problem I have spent several hours on. A "hint" is given that we may use this fact: If $n,j,k \\in \\mathbb{N}$ satisfy $ n \\geq 2$ and $1 \\leq j+k \\leq n$, then $n^2+j$ does not evenly divide $n^3+k$.</p>\n\n<p>I cannot find any way to apply this fact. It leads me to believe I should use the string $0^{p^2}1^{p^3}$ or something like that, but I am really just not sure. The pumping lemma has given me trouble since the non regular language version.</p>\n\n<p>Even small hints greatly appreciated at this point.</p>\n', 'ViewCount': '115', 'Title': 'Prove that $\\{0^n 1^{n\\cdot m} : n,m \\in \\mathbb{N}\\}$ is not context-free', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-02-15T17:25:06.790', 'LastEditDate': '2013-02-15T17:21:10.057', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'OwnerDisplayName': 'user13760', 'PostTypeId': '1', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2013-02-15T14:56:39.073', 'Id': '9808''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Can someone help with this:</p>\n\n<p>$L=\\{a^ib^j \\mid i,j \\ge 1 \\text{ and } i \\ne j \\text{ and } i&lt;2j\\}$</p>\n\n<p>I'm trying to write a grammar for this language?\nI tried this:</p>\n\n<p>$S \\to S_1 \\mid S_2 \\\\\nS_1 \\to aXb \\\\\nX \\to aXb \\mid aaXb \\mid aab \\\\\nS_2 \\to aYb \\\\\nY \\to aYb \\mid Yb \\mid b \\\\\n$</p>\n\n<p>What do you think?</p>\n", 'ViewCount': '308', 'Title': 'Context Free Grammar for language L', 'LastEditorUserId': '157', 'LastActivityDate': '2013-04-14T21:09:44.067', 'LastEditDate': '2013-04-06T18:56:00.993', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '6885', 'Tags': '<formal-languages><context-free><formal-grammars><check-my-answer>', 'CreationDate': '2013-02-16T11:00:00.360', 'Id': '9831''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I need to determine if the following languages are regular / context free and to explain.  Please help me with that.</p>\n\n<p>$$L_1 = \\{ a^{i_{1}}b a^{i_{2}}b a^{i_{3}}b a^{i_{4}}b a^{i_{5}}b\na^{i_{6}}b a^{i_{7}}b a^{i_{8}}b a^{i_{9}}b a^{i_{10}}b \\mid i_1 &gt; i_2\n&gt; i_3 &gt; i_4 &gt; i_5 &gt; i_6 &gt; i_7 &gt; i_8 &gt; i_9 &gt; i_{10} ; i_1 &lt; 100 \\}$$</p>\n\n<p>$$L_2 = \\{ a^{i_{1}}b a^{i_{2}}b a^{i_{3}}b a^{i_{4}}b a^{i_{5}}b\na^{i_{6}}b a^{i_{7}}b a^{i_{8}}b a^{i_{9}}b a^{i_{10}}b \\mid i_1 &gt; i_2\n&gt; i_3 &gt; i_4 &gt; i_5 &gt; i_6 &gt; i_7 &gt; i_8 &gt; i_9 &gt; i_{10} ; i_2 &lt; 100 \\}$$</p>\n\n<p>$$L_3 = \\{ a^{i_{1}}b a^{i_{2}}b a^{i_{3}}b a^{i_{4}}b a^{i_{5}}b\na^{i_{6}}b a^{i_{7}}b a^{i_{8}}b a^{i_{9}}b a^{i_{10}}b \\mid i_1 &gt; i_2\n&gt; i_3 &gt; i_4 &gt; i_5 &gt; i_6 &gt; i_7 &gt; i_8 &gt; i_9 &gt; i_{10} ; i_3 &lt; 100 \\}$$</p>\n', 'ViewCount': '87', 'Title': 'Regular and context free languages', 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-16T15:15:18.507', 'LastEditDate': '2013-02-16T15:15:18.507', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '-3', 'PostTypeId': '1', 'OwnerUserId': '6885', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2013-02-16T12:33:05.323', 'Id': '9835''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Are there languages generated by linear grammer which aren't regular?</p>\n", 'ViewCount': '114', 'Title': "Are there languages generated by linear grammar which aren't regular?", 'LastEditorUserId': '98', 'LastActivityDate': '2013-02-25T13:57:55.043', 'LastEditDate': '2013-02-25T13:56:10.727', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10080', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6980', 'Tags': '<formal-languages><formal-grammars><context-free>', 'CreationDate': '2013-02-25T12:46:21.063', 'Id': '10079''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I\'ve recently came across a <a href="http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/FSF-ciaa06.pdf">paper</a> describing the parsing technique\nmentioned in the title. Unfortunately, the terminology used in said paper\nis somewhat beyond my comprehension, so I\'ve been attempting to grasp the\nconstruction algorithm more intuitively. I believe I succeeded (<a href="http://www.docstoc.com/docs/79482088/Approximating-Context-Free-Grammars-for-Parsing-and-Verification">this\npresentation</a> was the source of the ah-ha moment), but a verification of\ncorrectness from someone either familiar with the technique or the terminology\ncontained therein would be greatly appreciated.</p>\n\n<p>I\'m going to describe my take on the solution (if it\'s correct, I believe it\ncould be of help to other people attempting to understand the technique) and\nask additional questions afterwards. To ensure there\'s no misunderstanding,\nI\'m going to use the following standard notation: $a, b, c, ... \\in T$, $A, B,\nC, ... \\in N$, $... X, Y, Z \\in N \\cup T$, $\\alpha, \\beta, \\gamma, ... \\in \\{N\n\\cup T\\}^*$ and, as in the paper, $A \\xrightarrow{i} \\omega$ to denote rule number $i$. However, I\'ll probably use different names for concepts than\nthe original paper.</p>\n\n<p>Also, throughout the description, the equivalence relation $\\kappa_0$ is used.</p>\n\n<h3>Construction</h3>\n\n<p>There are two kinds of items inside the parsing automaton: simple LR(0) items\nof the form $A \\xrightarrow{i} \\alpha \\bullet \\beta$ which I call <em>shift items</em>\nand items of the form $A \\xrightarrow{i} \\alpha \\bullet \\beta, m, n$ which I\ncall <em>resolve items</em>; these tell the parser to push $n$ symbols back the\ninput stream and then reduce by rule number $m$ upon the first symbol of $\\beta$.</p>\n\n<p>The grammar is augmented with the rule $S\' \\xrightarrow{0} S \\$$ and the construction starts with the shift item $S\' \\xrightarrow{0} \\bullet S \\$ $ in the initial state.</p>\n\n<p>Now, to construct the automaton, decide between these alternatives for each item in a state $q$:</p>\n\n<ol>\n<li><p>If the item is a shift item $A \\xrightarrow{i} \\alpha \\bullet \\beta$,\nthere will be a transition $q \\xrightarrow{X} q\'$ in the automaton, where\n$X$ is the first symbol of $\\beta$.</p></li>\n<li><p>If the item is a finished shift item $A \\xrightarrow{i} \\omega \\bullet$,\nadd a resolve item $B \\xrightarrow{j} \\alpha A \\bullet \\beta, i, 0$ for each rule $B \\xrightarrow{j} \\alpha A \\beta$.</p></li>\n<li><p>If the item is a resolve item $A \\xrightarrow{i} \\alpha \\bullet \\beta, m, n$, let $X$ be the first symbol of $\\beta$. If $X \\in N$, add a shift item $X \\xrightarrow{j} \\bullet \\omega$ for each rule $X \\xrightarrow{j} \\omega$. If other items than $A \\xrightarrow{i} \\alpha \\bullet \\beta, m, n$ have $X$ as their dot lookahead, add a transition $q \\xrightarrow{X} q\'$ to the automaton.\nEvery resolve item $C \\xrightarrow{i} \\alpha \\bullet X \\beta, m, n$ in $q$ will result in a resolve item $C \\xrightarrow{i} \\alpha X \\bullet \\beta, m, n + 1$ in $q\'$.</p></li>\n<li><p>If the item is a resolve item $A \\xrightarrow{i} \\omega \\bullet, m, n$ it\nwon\'t contribute any lookahead information and can be discarded, but first add a resolve item $B \\xrightarrow{j} \\alpha A \\bullet \\beta, m, n$ for each rule\n$B \\xrightarrow{j} \\alpha A \\beta$.</p></li>\n</ol>\n\n<p>This is, of course, just a sketch; actually, a closure of the state must be calculated first and only then can we deal with transitions/shifts and resolutions.</p>\n\n<p>Transforming the automaton into a shift-resolve parsing table is trivial afterwards; just, as a minor variation, the authors of the paper interpret a resolution $r_{0,0}$ as the accept action. Given the resulting automaton, I found it handier to simply treat a shift of $\\$$ as the accept action.</p>\n\n<h3>Questions</h3>\n\n<p>The first one is, obviously, whether the process described above is correct.</p>\n\n<p>The second one is about the equivalence relations. I can only guess that the equivalence relation $\\kappa$ is what\'s responsible for deciding which resolve items are brought in when a finished shift item has been seen. $\\kappa_0$ seems to result in lookahead strikingly similar to the $FOLLOW_{LM}$ sets of LSLR parsers. The paper describes a "finer equivalence relation" on page 11; is there a way to interpret this relation in intuitive terms? Are there other relations known?</p>\n\n<p>And the final one is about conflict resolution. The paper describes well what constitutes an inadequacy in a shift-resolve automaton; is there a way of resolving these inadequacies, similar to ways of resolving conflicts in a traditional LR parser? Could something like <em>yacc</em>-style conflict resolution via precedence and associativity be implemented in a ShRe parser generator?</p>\n\n<p>Thanks if you read all this and any answers will be greatly appreciated :)</p>\n', 'ViewCount': '165', 'Title': 'Shift-resolve parsing - questions', 'LastEditorUserId': '4383', 'LastActivityDate': '2013-02-28T19:09:45.330', 'LastEditDate': '2013-02-26T20:28:26.713', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '7', 'PostTypeId': '1', 'OwnerUserId': '4383', 'Tags': '<algorithms><formal-grammars><context-free><parsing>', 'CreationDate': '2013-02-26T16:10:49.380', 'FavoriteCount': '2', 'Id': '10123''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '135', 'Title': 'Is The Following Language Regular?', 'LastEditDate': '2013-02-28T00:14:10.330', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Body': '<p>Let $L_{1}$ and $L_{2}$ be 2 languages over the same alphabet $\\Sigma$.  </p>\n\n<p>$$A(L_1,L_2)=\\{x\\in \\Sigma^*|\\exists y,z\\in L_2\\text{ such that } yxz\\in L_1\\}$$</p>\n\n<p>Assume that $L_{1}$ is regular and $L_{2}$ is context-free. The language $A(L_{1},L_{2})$:</p>\n\n<ol>\n<li>is always a regular language</li>\n<li>is always not a regular language</li>\n<li>can sometimes be a regular language</li>\n<li>cannot be context free</li>\n</ol>\n\n<p>They say that the correct answer is 1.</p>\n', 'ClosedDate': '2013-03-01T08:12:00.193', 'Tags': '<formal-languages><regular-languages><automata><context-free><finite-automata>', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-03-01T03:38:56.220', 'CommentCount': '4', 'AcceptedAnswerId': '10163', 'CreationDate': '2013-02-27T23:51:15.260', 'Id': '10147''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I encountered this problem involving manipulating a context-free language. Let $L$ be a context-free language. Define $L^{\\#} = \\{ x : x^i \\in L$ for every $i=0,1,2,...\\}$. Is $L^{\\#}$ always context-free?<br>\nMy guess is that it will preserve context-freeness. Can anyone provide an elementary proof of this?</p>\n', 'ViewCount': '97', 'Title': 'Does the following transformation preserve context-freeness?', 'LastActivityDate': '2013-03-07T17:20:18.937', 'AnswerCount': '1', 'CommentCount': '9', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '7098', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-03-01T18:41:45.137', 'FavoriteCount': '0', 'Id': '10183''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>How do we determine minimum $k$ such that $G$ is a strong $LL(k)$ Grammar</p>\n\n<p>Like for grammar $G$ with the following rules\n$S\\rightarrow aAcaa \\mid bAbcc,A\\rightarrow a \\mid ab \\mid \\epsilon$</p>\n', 'ViewCount': '85', 'Title': 'Lookahead set: Determining minimum $k$ such that $G$ is a strong $LL(k)$ grammar', 'LastEditorUserId': '6980', 'LastActivityDate': '2013-03-06T13:15:18.180', 'LastEditDate': '2013-03-05T12:02:22.250', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10271', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6980', 'Tags': '<context-free><formal-grammars><parsing>', 'CreationDate': '2013-03-03T21:14:35.493', 'Id': '10245''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I need a hint for writing a context-free grammar for the language $L=\\{1^k0^{2k}:k\\in \\mathbb N\\}$. I'm starting to doubt that it can be done for general $k$.</p>\n", 'ViewCount': '80', 'Title': 'Context free grammar for $1^k0^{2k}$', 'LastActivityDate': '2013-03-05T07:11:27.230', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '2499', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-03-04T23:16:42.733', 'FavoriteCount': '1', 'Id': '10275''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I need to find a context-free grammar for the above expression, $a^{m}b^{n}$ for the set $L = \\left\\{{a, b}\\right\\}$, but I am having difficulty accounting for the condition $m \\neq n$.</p>\n\n<p>This is what I have so far, but it clearly doesn't satisfy the above condition:</p>\n\n<p>$\\begin{align}\n   &amp;S \\rightarrow aAb &amp;\\\\\n   &amp;S \\rightarrow a &amp;\\\\\n   &amp;S \\rightarrow b &amp;\\\\\n   &amp;A \\rightarrow aA &amp;\\\\\n   &amp;A \\rightarrow bA &amp;\\\\\n   &amp;A \\rightarrow \\lambda \\\\\n\\end{align}$</p>\n\n<p>I have spent about an hour on this, and haven't found a solution. Any ideas?</p>\n", 'ViewCount': '56', 'ClosedDate': '2013-03-08T20:41:37.427', 'Title': 'CFG using the set $L =\\left\\{{a,b}\\right\\}$ for the expression $a^{m}b^{n}$, where $m \\neq n$', 'LastActivityDate': '2013-03-08T18:47:40.567', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7195', 'Tags': '<formal-grammars><context-free>', 'CreationDate': '2013-03-08T18:16:51.703', 'Id': '10387''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '90', 'Title': 'Proving that a specific language is a CFL, and that another language is not a CFL', 'LastEditDate': '2013-03-11T02:12:00.413', 'AnswerCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7220', 'FavoriteCount': '0', 'Body': "<p>I have two languages $C_1$ and $C_2. \\left(\\Sigma=\\{0,1\\}\\right)$:</p>\n\n<p>$C_1=\\left\\{xyz\\mid x,z \\in \\Sigma^*, y \\in \\Sigma^*1\\Sigma^*, \\text{ where } |x|=|z| \\geq |y|\\right\\}$, and $C_2=\\left\\{xyz\\mid x,z \\in \\Sigma^*, y \\in \\Sigma^*1\\Sigma^*1\\Sigma^*, \\text{ where } |x|=|z| \\geq |y|\\right\\}$</p>\n\n<p>I want to show that $C_1$ is a CFL, while $C_2$ is not a CFL.  I'm trying to create a grammar / pushdown automata that accepts $L(C_1)$, but the $|x|=|z| \\geq |y|$ part is throwing me off.  I plan on using the pumping lemma for $C_2$, but I'm not sure which string to pump.  </p>\n", 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-03-11T05:34:59.417', 'CommentCount': '4', 'AcceptedAnswerId': '10440', 'CreationDate': '2013-03-10T21:21:27.903', 'Id': '10437''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>I\'ve read this part like 3-4 times and I\'m not understanding what is going on. </p>\n\n<p>Let G6 be the following CFG and convert it to Chomsky normal form by using the conversion procedure just given. The series of grammars presented illustrates the steps in the conversion. Rules show in bold have just been added. Rules shown in gray have just been removed.</p>\n\n<p>Specific steps/instructions from the book</p>\n\n<p>1.The original CFG G6 is shown on the left. The result of applying the first step to make a new start variable appears on the right.</p>\n\n<pre><code>S\u2192ASA|aB         S0\u2192S\nA\u2192B|S             S\u2192ASA|aB\nB\u2192b|\u03b5             A\u2192B|S\n                  B\u2192b|\u03b5\n</code></pre>\n\n<p>2.  Remove \u03b5 rules B\u2192\u03b5, shown on the left, and A\u2192\u03b5, shown on the right.</p>\n\n<pre><code>S0\u2192S              S0\u2192S\n S\u2192ASA|aB|**a**        S\u2192ASA|aB|a|**SA|AS|S** from?\n A\u2192B|S|**\u03b5**           A\u2192B|S|\u03b5 \n B\u2192b|**\u03b5**             B\u2192b\n</code></pre>\n\n<p>3a. Remove unit rules S\u2192S, shown on the left, and S0\u2192S, shown on the right.</p>\n\n<pre><code>S0\u2192S                  S0\u2192S|**ASA|aB|a|SA|AS**\n S\u2192ASA|aB|a|SA|AS|S    S\u2192ASA|aB|a|SA|AS \n A\u2192B|S                 A\u2192B|S\n B\u2192b                   B\u2192b\n</code></pre>\n\n<p>3b. Remove unit rules A\u2192B and A\u2192S</p>\n\n<pre><code>S0\u2192ASA|aB|a|SA|AS     S0\u2192ASA|aB|a|SA|AS\n S\u2192ASA|aB|a|SA|AS      S\u2192ASA|aB|a|SA|AS\n A\u2192B|S|**b**           A\u2192S|b|**ASA|aB|a|SA|AS**\n B\u2192b                   B\u2192b\n</code></pre>\n\n<p>4. Convert the remaining rules into the proper form by adding additional variables and rules. The final grammar in Chomsky normal form is equivalent to G6, which follows. (Actually the procedure given in Theorem 2.9 produces several variables Ui, along with several rules Ui\u2192a. We simplified the resulting grammar by using a single variable U and U\u2192a.)</p>\n\n<pre><code>S0\u2192AA1|UB|a|SA|AS\n S\u2192AA1|UB|a|SA|AS\n A\u2192b|AA1|UB|a|SA|AS\nA1\u2192SA\n U\u2192a\n B\u2192b  \n</code></pre>\n\n<p>I don\'t understand why they added the "bold" (** **) items. I also don\'t understand 4. Can someone please explain this to me. Thank you!</p>\n', 'ViewCount': '1417', 'Title': 'CFG to Chomsky normal form', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-11T15:17:49.370', 'LastEditDate': '2013-03-11T15:17:49.370', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'juice', 'PostTypeId': '1', 'Tags': '<formal-grammars><context-free><normal-forms>', 'CreationDate': '2013-03-08T06:48:33.127', 'Id': '10450''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '74', 'Title': 'Is the following language context free?', 'LastEditDate': '2013-03-12T05:01:27.690', 'AnswerCount': '1', 'Score': '1', 'OwnerDisplayName': 'user979616', 'PostTypeId': '1', 'OwnerUserId': '7151', 'Body': "<p>Is $L = \\{ a^nb^nc^j \\mid n \\le j\\}$ a context-free language? I'm getting really stuck generating a grammar for it. Any help would be appreciated.  </p>\n", 'Tags': '<formal-languages><formal-grammars><context-free>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-03-12T10:50:47.000', 'CommentCount': '1', 'AcceptedAnswerId': '10466', 'CreationDate': '2013-03-11T17:03:44.577', 'Id': '10465''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '942', 'Title': 'The importance of normal forms like Chomsky normal form for CFGs', 'LastEditDate': '2013-03-12T11:20:21.347', 'AnswerCount': '3', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '947', 'FavoriteCount': '0', 'Body': '<p>I understand that context-free grammars can be used to represent context-free languages.It might have ambiguities. We also have normal forms like <a href="https://de.wikipedia.org/wiki/Chomsky-Normalform" rel="nofollow">Chomsky</a> and <a href="https://de.wikipedia.org/wiki/Greibach-Normalform" rel="nofollow">Greibach</a> normal form. I couldn\'t understand the need of that. </p>\n\n<p>Why they are important in the theory of languages? All the textbooks I referred to tell about these normal forms but not telling anything about their importance. </p>\n', 'Tags': '<formal-languages><context-free><formal-grammars><normal-forms>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-29T19:33:05.130', 'CommentCount': '1', 'AcceptedAnswerId': '10478', 'CreationDate': '2013-03-12T06:32:28.983', 'Id': '10468''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I wrote the following LL(1) grammar to describe the set of boolean expressions involving <code>AND</code> ,<code>OR</code>  an <code>NOT</code> only. This, as can be seen, also reflects the precedence of the operators (ie., 'AND' is done before 'OR', etc).</p>\n\n<p>Is it correct? </p>\n\n<pre><code>    1.  E   ::=  T E\u2019\n    2.  E\u2019  ::= OR T E\u2019\n    3.  E\u2019  ::=  \u03b5\n    4.  T   ::=  F T\u2019\n    5.  T\u2019  ::= AND F T\u2019\n    6.  T\u2019  ::= \u03b5\n    7.  F   ::= NF'\n    8.  N   ::= NOT\n    9.  N   ::= \u03b5\n   10.  F'  ::= (E)\n   11.  F'  ::= id\n</code></pre>\n", 'ViewCount': '1035', 'Title': 'Grammar for describing boolean expressions with AND, OR and NOT', 'LastEditorUserId': '6447', 'LastActivityDate': '2013-04-18T19:07:17.890', 'LastEditDate': '2013-03-19T02:05:26.163', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'user14170', 'PostTypeId': '1', 'Tags': '<formal-grammars><context-free>', 'CreationDate': '2013-03-13T05:00:04.140', 'Id': '10558''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>This is a question from the Dragon book (I apologize for translation mistakes, I don\xb4t have the English version on hand):</p>\n\n<blockquote>\n  <p>What language is generated by this grammar?</p>\n  \n  <p>$S \\rightarrow a S b S \\mid b S a S  \\mid \\epsilon$</p>\n</blockquote>\n\n<p>I don\'t know what I\'m supposed to do here. The definition in the book about languages says this (and that\'s pretty much it in the chapter): </p>\n\n<blockquote>\n  <p>a language is the set of all words that can be produced by any parse\n  tree.</p>\n</blockquote>\n\n<p>So, if I want to make "any" parse tree out of this grammar, I can recursively keep building it, using just the first two rules. I searched a bit and got the impression that every rule has to be used once, but I\'m not sure. It would be very helpful if someone were able to provide some tips on solving these sorts of problems.</p>\n', 'ViewCount': '1096', 'Title': 'Finding the language generated by a context-free grammar', 'LastEditorUserId': '31', 'LastActivityDate': '2013-03-19T12:05:36.463', 'LastEditDate': '2013-03-19T12:05:36.463', 'AnswerCount': '2', 'CommentCount': '7', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '6520', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-03-18T21:49:48.777', 'Id': '10605''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '160', 'Title': 'Is $L= \\{ a^ib^j \\mid j\\neq i \\ and \\ j\\neq2i \\ \\} $ context free?', 'LastEditDate': '2013-03-20T05:31:10.373', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4980', 'FavoriteCount': '1', 'Body': "<p>$L = \\{ a^ib^j \\mid j\\neq i \\ and \\ j\\neq2i \\ \\} $</p>\n\n<p>Is this language a context free language?\nIf yes give a PDA. If no, give a proof.</p>\n\n<p>The pumping lemma for context free languages doesn't seem to work here.</p>\n\n<p>Let $p&gt;1$ be the pumping length. Let the string be divided into five parts according to pumping lemma as $w = uvxyz$.</p>\n\n<p>For any string of the form $a^ib^j \\ s.t.$: </p>\n\n<ol>\n<li><p>$ j\\lt i-1$ choose $v=a, \\ x=\\epsilon, \\ y=\\epsilon$</p></li>\n<li><p>$ j\\gt 2i+1$ choose $v=\\epsilon, \\ x=\\epsilon, \\ y=b$</p></li>\n<li><p>$ j = i-1$ choose $v=a, \\ x=\\epsilon, \\ y=b$</p></li>\n<li><p>$ j =  2i+1$ choose $v=a, \\ x=\\epsilon, \\ y=b$</p></li>\n<li><p>$ j\\gt i,\\ j\\lt 2i $ choose $v=a, \\ x=\\epsilon, \\ y=b$</p></li>\n</ol>\n", 'Tags': '<formal-languages><context-free><pushdown-automata>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-03-20T05:31:10.373', 'CommentCount': '1', 'AcceptedAnswerId': '10638', 'CreationDate': '2013-03-20T04:55:41.533', 'Id': '10635''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Why is $A(L) = \\{x \\in L \\mid x = x^R \\}$ context-free if $L$ is a regular language? </p>\n\n<p>Trying to understand the approach to determining whether a regular language is context-free.</p>\n', 'ViewCount': '128', 'Title': 'Why is the subset of palindromes of a regular language context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-21T10:30:15.167', 'LastEditDate': '2013-03-21T10:28:57.977', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '10677', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6980', 'Tags': '<formal-languages><regular-languages><context-free><closure-properties>', 'CreationDate': '2013-03-21T02:15:36.403', 'Id': '10675''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '135', 'Title': 'How do you apply Context-Free Pumping Lemma to these problems, and how do the approaches differ?', 'LastEditDate': '2013-03-22T14:22:56.263', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '6980', 'Body': '<p>How are these Context-Free Pumping Lemma Approaches differ?\nMaybe this might help understand pumping lemma better</p>\n\n<p>$(a^{i}b^{i}c^{j}d^{j} \\mid i, j \\geq 0$}</p>\n\n<p>$(a^{i}b^{j}c^{i}d^{j} \\mid i, j \\geq 0$}</p>\n\n<p>$(a^{i}b^{j}c^{j}d^{i} \\mid i, j \\geq 0$}</p>\n\n<p>I understand we use contradiction with these conditions</p>\n\n<ol>\n<li>$|vwx| \\leq p$</li>\n<li>$|vx| \\geq 1$</li>\n<li>for every $i \\geq 0$, $uv^{i}wx^{i}y \\in L$.</li>\n</ol>\n', 'ClosedDate': '2013-03-22T14:00:42.243', 'Tags': '<context-free><pumping-lemma>', 'LastEditorUserId': '6980', 'LastActivityDate': '2013-03-22T14:22:56.263', 'CommentCount': '3', 'AcceptedAnswerId': '10695', 'CreationDate': '2013-03-22T11:01:32.487', 'Id': '10694''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let me know the first and follow sets of the following grammar, also the explanation to it</p>\n\n<p>$A \\to Ba \\mid Aa \\mid c$<br>\n$B \\to Bb \\mid Ab \\mid d$</p>\n\n<p>Non-terminals: $\\{A,B\\}$<br>\nTerminals: $\\{a,b,c,d\\}$</p>\n', 'ViewCount': '657', 'ClosedDate': '2014-02-27T15:10:50.473', 'Title': 'A problem on first and follow sets of a grammar', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-27T02:19:16.383', 'LastEditDate': '2013-03-27T12:17:29.440', 'AnswerCount': '3', 'CommentCount': '2', 'Score': '-4', 'PostTypeId': '1', 'OwnerUserId': '4865', 'Tags': '<context-free><parsing>', 'CreationDate': '2013-03-27T11:29:37.490', 'Id': '10824''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am supposed to write a Context free grammar that generates the language:</p>\n\n<p>$\\qquad L(G) = \\{0^{3n}1^{2n}0^{m}1^{m} : n \\ge 1, m \\ge 1\\}$</p>\n\n<p>I have the rules:</p>\n\n<p>$$S \\rightarrow 000S$$\n$$S \\rightarrow S11T$$\n$$T \\rightarrow 0T$$\n$$T \\rightarrow T1$$</p>\n\n<p>This looks correct in terms of the structure of the grammar but I am not sure how to denote how to tell the grammar to terminate at the correct time given the conditions $n \\geq 1$ and $m \\geq 1$.</p>\n', 'ViewCount': '110', 'Title': 'How to write Context Free Grammar with numerical restrictions', 'LastEditorUserId': '98', 'LastActivityDate': '2013-03-28T10:07:30.730', 'LastEditDate': '2013-03-28T10:07:30.730', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7172', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2013-03-27T18:56:54.803', 'Id': '10846''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I was looking at the pumping lemma for CFG. I came across the first problem $a^nb^nc^n$ and understood the answer. Then I thought of the problem $a^nb^n$. I know that this is context free and thought of applying it. I came across a weired situation. Someone please tell me where I went wrong. </p>\n\n<p>So our language is $a^nb^n$. Let $m$ be the pumping length. Pumping lemma says that any sufficiently long string can be divided in $uvxyz$, where $v$ and $y$ can be pumped.</p>\n\n<p>we take our string to be $a^mb^m$ and we can split it into $uxvyz$. Also we know that $|vxy|\\le m$. Also $u$ can be $\\epsilon$. In that case $vxy$ consists only of $a$, since $|vxy|\\le m$ and there are $m$, $a$'s. So when we pump $v$ and $y$, the resulting string wont be in the language!</p>\n\n<p>So where I got wrong? Is it wrong to take $u$ is $\\epsilon$ and proceed from there? </p>\n", 'ViewCount': '398', 'Title': 'Pumping lemma for CFG doubt', 'LastActivityDate': '2013-03-31T06:57:10.293', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '10926', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<context-free><automata><pumping-lemma>', 'CreationDate': '2013-03-28T13:51:46.030', 'FavoriteCount': '1', 'Id': '10873''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I could find that different texts follow different steps in the conversion of CFG to Chomsky Normal Form. I couldn't find any presumptions they made in the conversion steps. I have some questions regarding the conversion.</p>\n\n<ol>\n<li><p>Most text books tell us about only two rules $A \\rightarrow BC$ and $A \\rightarrow a$. But some texts say that starting productions should not be in the right hand side. Why some stress on that rule and others not?</p></li>\n<li><p>When talking about the rules some don't stress much on the condition of removing useless symbols. Is this condition mandatory or not?</p></li>\n<li><p>Which is the best rule? Remove useless production, remove $\\epsilon$ production, remove unit production, adjust the resulting productions so as to reflect the CNF rules. </p></li>\n<li><p>Converting a grammar to Greibach normal form requires first converting the productions to Chomsky Normal Form?</p></li>\n</ol>\n", 'ViewCount': '268', 'Title': 'CFG to CNF conversion steps', 'LastActivityDate': '2013-03-28T16:53:43.800', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<context-free><automata>', 'CreationDate': '2013-03-28T16:53:43.800', 'Id': '10876''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>My problem with CFG is, I am to generally create ones that don't have requirements such as:</p>\n\n<p>$\\qquad \\{a^m b^n \\mid m \\le n \\le 2m \\}$</p>\n\n<p>I have no clue where to begin, and how to approach it. I was wondering if you can provide some hints for such daunting problems, along with how to solve that problem.</p>\n\n<p>This is not homework, this is merely me trying to learn it. I solved many problems that did not have such requirements, but those problem are the ones where I am forced to look at the solution.</p>\n", 'ViewCount': '116', 'Title': 'Context free grammar construction', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-02T07:53:53.193', 'LastEditDate': '2013-04-02T07:53:53.193', 'AnswerCount': '2', 'CommentCount': '5', 'Score': '3', 'OwnerDisplayName': 'CSTHEORY', 'PostTypeId': '1', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-03-31T00:16:38.500', 'Id': '10928''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '419', 'Title': 'A pumping lemma for deterministic context-free languages?', 'LastEditDate': '2013-04-12T23:06:52.350', 'AnswerCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2131', 'FavoriteCount': '1', 'Body': "<p>The pumping lemma for regular languages can be used to prove that certain languages are not regular, and the pumping lemma for context-free languages (along with Ogden's lemma) can be used to prove that certain languages are not context-free.</p>\n\n<p>Is there a pumping lemma for <em>deterministic</em> context-free languages?  That is, is there a lemma akin to the pumping lemma that can be used to show that a language is not a DCFL?  I'm curious because almost all of the proof techniques I know to show that a language is not a DCFL are really complicated, and I was hoping that there was an easier technique.</p>\n", 'Tags': '<context-free><proof-techniques><pumping-lemma>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-12T23:06:52.350', 'CommentCount': '3', 'AcceptedAnswerId': '11274', 'CreationDate': '2013-04-02T15:24:14.170', 'Id': '10974''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>This was given as a homework problem but I have already submitted the assignment.  I'd like to resolve it at this point for my own satisfaction.</p>\n\n<p>Given that $L_1$ is a linear language and $L_2$ is a regular language, show that $L=L_1L_2$ is a linear language.</p>\n\n<p>Recall that a linear grammar $G=(\\Sigma, V, P, \\sigma)$ has productions $A\\to yBz$ for some $y,z \\in \\Sigma^*$ and $A,B \\in V$.</p>\n\n<p>I use the theorem that every regular language can be represented by a right linear grammar.</p>\n\n<p>Then I use the theorem that every right linear grammar is the reverse of a left linear grammar (being a little careful about what I mean by reverse)... $L(rev(G))=rev(L(G))$...</p>\n\n<p>Next each left linear grammar is the reverse of a regular language, but the reverse of a regular language is regular, so left linear grammars also represent regular languages.</p>\n\n<p>So our productions in $L_2$ are of the form $x \\to Ca \\mid a$ for some $C \\in V_{L_2}$ and $a \\in \\Sigma_{L_2}$.</p>\n\n<p>Now on to the show...</p>\n\n<p>What we are looking for is $L = L_1.L_2$, $L$ is linear (to show).</p>\n\n<p>So this has the form $S \\to yBzCa \\mid yBzaa$</p>\n\n<p>So far so good, the second production is linear and within our expectations for set inclusion.</p>\n\n<p>I'm having a devil of a time reducing $yBzCa$ however ...</p>\n\n<p>If I introduce $V\\to BzC$ that linearizes $S$ but $V$ is not linear ... </p>\n\n<p>If I give $T\\to z$ to get $V\\to BTC$ I'm not much better off </p>\n\n<p>If I use $V_1\\to Bz$ (ok linear!) but then $V\\to V_1C$ (not linear)</p>\n\n<p>What is the piece of the puzzle I'm missing?</p>\n\n<p>I have a suspicion that my woes are because I failed to have a production that is $B\\implies^*a$ for some terminal $a \\in \\Sigma_{L_1}$ but I haven't observed that in the definitions thus far... and further unless B only goes to a terminal I'm in the same mess (if $B\\to t$ where $t \\in \\Sigma_{L_2} \\bigcup {\\epsilon} $ then I think I'm finished but how do I justify it?</p>\n", 'ViewCount': '99', 'Title': 'How can I show a linear languages are closed against concatenating with regular ones?', 'LastEditorUserId': '6551', 'LastActivityDate': '2013-04-04T10:55:25.213', 'LastEditDate': '2013-04-03T18:51:26.803', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '10988', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6551', 'Tags': '<formal-languages><context-free><closure-properties><check-my-proof>', 'CreationDate': '2013-04-03T02:16:07.357', 'Id': '10985''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I need to give a PDA and CFG for a language that contains all binary strings that start and end with the same symbol. I\'ve created the CFG with no problem, but I\'m stuck with the PDA and don\'t quite know how to accomplish it.</p>\n\n<p>The best I can figure is that I need to use non-determinism, but I don\'t quite know how to apply it in this circumstance.</p>\n\n<p>Here\'s the CFG that I came up with:</p>\n\n<p>\\begin{align*}\nA &amp;\\to 1B1 \\mid 0B0 \\mid \\epsilon\\\\\nB &amp;\\to 1B \\mid 0B\\mid \\epsilon\n\\end{align*}</p>\n\n<p>The PDA, insofar as I managed to come up with:</p>\n\n<p><img src="http://i.stack.imgur.com/sjkIy.jpg" alt="enter image description here"></p>\n\n<p>The notation here, just in case it\'s not universal: $a,b \\to c$ means "When you see symbol $a$, pop symbol $b$ off the stack and push symbol $c$ onto the stack."</p>\n\n<p>Any pointers on how to accomplish this?</p>\n', 'ViewCount': '426', 'Title': 'Give CFG and PDA for the words that start and end with the same symbol', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-04T12:02:49.387', 'LastEditDate': '2013-04-04T06:41:56.223', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11006', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '6569', 'Tags': '<formal-languages><context-free><pushdown-automata>', 'CreationDate': '2013-04-04T01:15:46.140', 'Id': '11004''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In college we have been learning about theory of computation in general and Turing machines more specifically. One of the great theoretical results is that at the cost of a potentially large alphabet (symbols), you can reduce the number of states down to only 2.</p>\n\n<p>I was looking for examples of different Turing Machines and a common example presented is the Parenthesis matcher/checker. Essentially it checks if a string of parentheses, e.g (()()()))()()() is balanced (the previous example would return 0 for unbalanced). </p>\n\n<p>Try as I may I can only get this to be a three state machine. I would love to know if anyone can reduce this down to the theoretical minimum of 2 and what their approach/states/symbols was!</p>\n\n<p>Just to clarify, the parentheses are "sandwiched" between blank tape so in the above example\n- - - - - - - (()()()))()()() - - - - - - - would be the input on the tape. The alphabet would include (,),1,0,-, and the <em>halt</em> state does not count as a state.</p>\n\n<p>For reference the three state approach I have is as follows:\nDescription of states:</p>\n\n<pre><code> State s1: Looks for Closing parenthesis\n\n State s2: Looks for Open parenthesis\n\n State s3: Checks the tape to ensure everything is matched\n</code></pre>\n\n<p>Symbols: ),(,X\nTransitions Listed as:</p>\n\n<p>Action: State Symbol NewState WriteSymbol Motion</p>\n\n<p>// Termination behavior</p>\n\n<p>Action: s2 - <em>halt</em> 0  -</p>\n\n<p>Action: s1 -  s3    -  r</p>\n\n<p>//Transitions of TM</p>\n\n<p>Action: s1 (  s1  (   l</p>\n\n<p>Action: s1 )  s2  X  r</p>\n\n<p>Action: s1 X  s1  X  l</p>\n\n<p>Action: s2 ( s1 X  l</p>\n\n<p>Action: s2 X  s2 X r</p>\n\n<p>Action: s3 (  <em>halt</em> 0 -</p>\n\n<p>Action: s3 X  s3     X r</p>\n\n<p>Action: s3 -  <em>halt</em> 1 -</p>\n\n<p>Forgive the informal way of writing all this down. I am still learning the theoretical constructs behind this.</p>\n', 'ViewCount': '1114', 'Title': 'Two-State Turing Machine for Parenthesis Matching', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-04-06T21:27:16.633', 'LastEditDate': '2013-04-06T21:27:16.633', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '4', 'OwnerDisplayName': 'Four_FUN', 'PostTypeId': '1', 'OwnerUserId': '7590', 'Tags': '<context-free><turing-machines><parsing>', 'CreationDate': '2013-04-05T06:57:23.333', 'Id': '11044''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '181', 'Title': 'CFG for $\\{a^i b^j : 2 i<j\\}$', 'LastEditDate': '2013-04-06T18:48:36.090', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7613', 'Body': '<p>So I have a question:</p>\n\n<p>Give a CFG for $\\{a^i b^j : 2 i&lt;j\\}$</p>\n\n<p>And this is my approach:</p>\n\n<p>$S\\to AB$</p>\n\n<p>$A\\to aAb\\mid \\varepsilon$</p>\n\n<p>$B\\to b \\mid bB$</p>\n\n<p>A confirmation, or correction, along with how you tested(and tips for testing future of my problems) will be greatly appreciated thanks.</p>\n', 'ClosedDate': '2013-04-06T20:35:05.590', 'Tags': '<context-free><formal-grammars><check-my-answer>', 'LastEditorUserId': '157', 'LastActivityDate': '2013-04-06T20:09:40.777', 'CommentCount': '6', 'AcceptedAnswerId': '11079', 'CreationDate': '2013-04-06T17:55:39.617', 'Id': '11076''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>$L = \\{a^n b^m | m \\not= n^2 \\}$ \nI guess I need to use Pumping Lemma for CFL in order to prove this. But I'm stuck.</p>\n\n<p>Assuming that $ a^n b^m = uvxyz$, we know that $v$ or $y$ can not have both $a$ and $b$ symbols in them. Otherwise pumping would generate strings not of the form $a^i b^j$.</p>\n\n<p>Hence both $v$ and $y$ must consist only of one kind of symbol each.\nBeyond this I wonder what string in $L$ has to be chosen in order to pump and obtain something of the form $a^n b^{n^2}$.</p>\n\n<p><em><strong>Alternative idea :</em></strong> Assuming that $L$ is context-free, then I must have a PDA accepting it by final state. Can I say that this PDA can be adjusted* to accept $L'$ i.e., all $a^n b^{n^2}$ ? However I know that $L'$ is not a CFL. Hence, contradiction ?</p>\n\n<p>*Adjusted = Make the non-final state on reading $a^n b^{n^2}$ as final and the rest as all non-final.</p>\n", 'ViewCount': '223', 'Title': 'Why is the following language not context-free?', 'LastEditorUserId': '7620', 'LastActivityDate': '2013-04-10T11:05:56.600', 'LastEditDate': '2013-04-08T15:54:42.337', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '7620', 'Tags': '<formal-languages><context-free><automata><finite-automata><pumping-lemma>', 'CreationDate': '2013-04-07T18:09:51.310', 'Id': '11106''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>The context-free languages are <em>not</em> closed under complement, we know that.</p>\n\n<p>As far as I understand, context-free languages that are a subset of $a^*b^*$ for some letters $a,b$ are closed under complement(!?)</p>\n\n<p>Here is my argument. Each CF language $L$ has a semi-linear Parikh image $\\pi(L) = \\{ (m,n) \\mid a^mb^n \\in L \\}$. Semilinear sets are closed under complement. The set of vectors that represent the semi-linear set can easily be transformed into a linear grammar.</p>\n\n<p><strong>Question.</strong> Is there an easily accessible reference to this fact?</p>\n\n<p>Technically these languages are called <em>bounded</em>, i.e., a subset of $w_1^* \\dots w_k^*$ for some words $w_1,\\dots,w_k$.</p>\n\n<p>My motivation for this question is from a recent <a href="http://cs.stackexchange.com/questions/11106/why-is-the-following-language-not-context-free">question</a> on the context-freeness of $\\{ a^nb^m \\mid n^2 \\neq m \\}$. Its complement within $a^*b^*$ seems easier to handle.</p>\n', 'ViewCount': '277', 'Title': 'Are context-free languages in $a^*b^*$ closed under complement?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-08T19:08:24.873', 'LastEditDate': '2013-04-07T20:00:05.160', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11142', 'Score': '10', 'PostTypeId': '1', 'OwnerUserId': '4287', 'Tags': '<formal-languages><reference-request><context-free><closure-properties>', 'CreationDate': '2013-04-07T19:05:16.153', 'Id': '11110''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Some sets of ordered binary trees can be represented as a CFG with rules of the form</p>\n\n<pre><code>A -&gt; aBC\nA -&gt; b\n</code></pre>\n\n<p>Where <code>A,B,C</code> are nonterminals and <code>a</code> and <code>b</code> are terminals representing internal nodes and leaf nodes respectively. The tree can be recovered from any word in the language by a preorder traversal.</p>\n\n<p>The set of all such grammars forms a class of languages which is a subset of context free languages but isomorphic to a superset of regular languages (by unary encoding the alphabet and adding a dummy terminal for the second nonterminal in every production). It is obviously closed under union as you can simply concatenate the lists of productions to get a new tree grammar.</p>\n\n<p>My question is whether this class is closed under intersection. I have been unable to prove that is either closed or not closed, and I figured I should see if anyone else can see how to do this. </p>\n', 'ViewCount': '166', 'Title': 'Closure under intersection of context free binary trees', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-07T22:23:35.630', 'LastEditDate': '2013-04-07T22:05:19.403', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11115', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '2511', 'Tags': '<context-free><formal-grammars><closure-properties>', 'CreationDate': '2013-04-07T21:12:07.577', 'Id': '11114''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '1883', 'Title': 'Convert CFG to PDA', 'LastEditDate': '2013-04-10T08:39:30.413', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7405', 'FavoriteCount': '2', 'Body': '<p>Is there any set of rules or methods to convert any context free grammar to a push down automata? </p>\n\n<p>I already found <a href="http://infolab.stanford.edu/~ullman/ialc/spr10/slides/pda2.pdf" rel="nofollow">some slides online</a> but I wasn\'t able to understand them.</p>\n\n<p>In slide 10 he speaks about some rules could anyone explain that?</p>\n', 'Tags': '<context-free><formal-grammars><pushdown-automata><simulation>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-10T08:39:30.413', 'CommentCount': '2', 'AcceptedAnswerId': '11186', 'CreationDate': '2013-04-10T03:00:30.087', 'Id': '11182''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Please help me understand, and if possible, tips, to determine a pumping length $p$. </p>\n\n<p>Suppose I have the example :</p>\n\n<p>Let $G$ be a Context-Free-Grammar with a set of variables $\\{S,A,B,C\\}$, set of terminals $\\{0,1\\}$, start variable $S$, and rules</p>\n\n<p>$S \\to ABA \\mid SS$<br>\n$A \\to S0 \\mid 1C1$<br>\n$B \\to S1 \\mid  0$<br>\n$C \\to 0$</p>\n\n<p>Now given the above, how do I find the pumping length $p$?<br>\nPlease explain how you actually got it from the grammar.</p>\n', 'ViewCount': '587', 'Title': 'How to find the pumping length of a context-free language?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-12T13:13:54.443', 'LastEditDate': '2013-04-10T09:01:09.590', 'AnswerCount': '1', 'CommentCount': '6', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7613', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-04-10T03:14:51.387', 'Id': '11183''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have laid out the various cases that would make this not a context free language already and proved all but one for this  set:</p>\n\n<p>\\begin{equation} \nA = \\{a^f b^g    \\mid      f = g^2\\}\n\\end{equation}</p>\n\n<p>I am having trouble trying to explain how if v was a's and x was b's for this problem.  Exactly how would I prove that using this case is it not a context free language.  Steps and explanation would help. </p>\n\n<p>Thank you!</p>\n", 'ViewCount': '20', 'ClosedDate': '2013-04-11T09:30:30.890', 'Title': 'Pumping Lemma on CFL Problem', 'LastActivityDate': '2013-04-11T07:49:56.227', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7233', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-04-11T07:49:56.227', 'Id': '11219''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Is the language $ L = \\{0^n 1^m \\mid n \\text{ and } m \\text{ are co-prime}\\}$ context-free ?</p>\n\n<p>I guess that it's not context free because it seems too complicated for a PDA to decided whether 2 numbers are co-prime or not.</p>\n\n<p>I tried using the pumping lemma to no avail.</p>\n\n<p>Any help would be gladly appreciated.</p>\n\n<p>Edit:</p>\n\n<p>Here is one of my failed attempts with the pumping lemma:</p>\n\n<p>Let $N$ be a constant. Take a prime $p$ such that $p &gt; N!$ and then take the word $z = 0^p 1^{p+N!} \\in L$. Let $ z = uvwxy $ be a decomposition of $z$ satisfying the conditions in the pumping lemma.</p>\n\n<p>If $ vx $ contains only zeros then $ |vx| = k $ is an integer between $1$ and $N$. Define $m$ as $m = N!/k$. For $i = m+1$ the word $ uv^iwx^iy = 0^{p+N!}1^{p+N!} \\not\\in L $</p>\n\n<p>However, I've failed to find such an integer $i$ for the other decomposition cases.</p>\n", 'ViewCount': '283', 'Title': 'Is the language $\\{0^n 1^m \\mid n \\text{ and } m \\text{ are co-prime}\\}$ context-free?', 'LastEditorUserId': '7068', 'LastActivityDate': '2013-04-12T20:05:43.350', 'LastEditDate': '2013-04-12T10:49:52.740', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '8', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-04-11T18:04:33.373', 'FavoriteCount': '3', 'Id': '11237''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have this problem:</p>\n\n<blockquote>\n  <p>Let $L_1$ and $L_2$ be two regular languages.  Show that $L_3 = \\{xx^r : x \\in L_1, x^r \\in L_2 \\}$ is a context-free language.</p>\n</blockquote>\n\n<p>I am unsure how to prove that some language is context-free. Could someone please provide the steps?</p>\n', 'ViewCount': '90', 'Title': 'Proving $\\{xx^R \\mid x\\in L_1, x^R\\in L_2\\}$ is context-free', 'LastEditorUserId': '157', 'LastActivityDate': '2013-04-12T07:21:14.713', 'LastEditDate': '2013-04-12T02:45:42.930', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '11242', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7172', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2013-04-11T20:45:46.487', 'Id': '11240''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I understand that any CFL can be accepted by a PDA by final state or empty store but I have been rather stumped by this question.\nThe question states that the PDA has at most 2 states. Clearly 1 will be the start state while the other will be the final state (they cannot be the same since otherwise the empty string will be accepted). My initial idea was to take a grammar for $L$ in GNF (Greibach Normal Form) (refer to Ran's answer below for details on how a CFG in GNF can be converted to a PDA having 1 state and no $\\epsilon$-transitions that accepts by empty store) and then give a PDA for this that meets the specification. But the problem is that I cannot find a way to do this without having an $\\epsilon$-move at the final step when I have to move to the final state after the stack is empty. Any help would be greatly appreciated.</p>\n\n<p>The PDA can be specified as $M = (K, \\Sigma,\\delta, q_0, Z_0, \\{q_f\\} )$ where\n$q_0$ is the initial state, $Z_0$ is the initial stack symbol and $q_f$ is the final state. The exact question is</p>\n\n<blockquote>\n  <p>Show that if $L$ is a CFL and $\\epsilon$ does not belong to $L$, then there is a PDA $M$ accepting $L$ by final state such that $M$ has at most 2 states and makes no $\\epsilon$-moves.</p>\n</blockquote>\n\n<p>Thus, the PDA should</p>\n\n<ol>\n<li>accept by final state</li>\n<li>have at most 2 states</li>\n<li>make no $\\epsilon$-moves</li>\n</ol>\n", 'ViewCount': '357', 'Title': 'Designing a PDA w/o $\\epsilon$-moves and $\\leq 2$ states to accept an $\\epsilon$-free CFL by final state', 'LastEditorUserId': '7731', 'LastActivityDate': '2013-04-23T19:03:27.153', 'LastEditDate': '2013-04-16T03:57:47.927', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11335', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7731', 'Tags': '<formal-languages><context-free><automata><pushdown-automata>', 'CreationDate': '2013-04-15T01:15:08.810', 'Id': '11321''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Given a context-free language $L$, define the language $p(L)$ as containing all permutations of strings in $L$ (i.e. all strings in $L$ such that the order of symbols is not important). Is $p(L)$ context-free?</p>\n\n<p>I found two papers dealing with similar, but not identical, questions:</p>\n\n<ul>\n<li><p><a href="http://www.sciencedirect.com/science/article/pii/S0304397505008571" rel="nofollow">Generating all permutations by context-free grammars in Chomsky normal form</a> by Asveld (2003) deals with finite languages.</p></li>\n<li><p><a href="http://www.sciencedirect.com/science/article/pii/0020019082901090" rel="nofollow">Permutations are not context-free: An application of the interchange lemma</a> by Main (1982) deals with "permutation languages", i.e. sets of strings of the form $w x p(x) z$, where $p(x)$ is a any permutation of $x$. Also, the result is limited to alphabets with 16 symbols.</p></li>\n</ul>\n', 'ViewCount': '240', 'Title': 'Are permutations of context-free languages context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-15T14:34:16.553', 'LastEditDate': '2013-04-15T12:28:57.093', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '11332', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<formal-languages><context-free><closure-properties><permutations>', 'CreationDate': '2013-04-15T12:09:49.237', 'Id': '11329''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p><a href="http://www.cs.utexas.edu/~ml/nldata/geoquery.html" rel="nofollow">GeoQuery</a> is a dataset used for benchmarking semantic parsers. It contains 880 queries about USA geography. The queries are in Prolog format, for example:</p>\n\n<blockquote>\n  <p>answer(A,longest(A,(river(A),traverse(A,B),const(B,countryid(usa)))))</p>\n</blockquote>\n\n<p>(this represents a question for the longest river that passes through the us).</p>\n\n<p>I have read <a href="http://www.citeulike.org/user/erelsegal-halevi/tag/geoquery" rel="nofollow">several papers about the GeoQuery</a>, but they don\'t seem to give a formal definition of the grammar underlying the dataset. The email address in the dataset page seem to be dysfunctional. So, my question (addressed primarily to researchers who have worked with the GeoQuery dataset before) is twofold:</p>\n\n<ul>\n<li>Is there a formal definition of the GeoQuery language?</li>\n<li>Is this language context-free?</li>\n</ul>\n\n<p>EDIT:</p>\n\n<p>It seems that, if the number of variables (A, B, C...) is unlimited, then GeoQuery is not context-free, because a CFG cannot make sure that two variables in different places are identical (this is similar to the {ww} language, which is not context-free).</p>\n\n<p>But what if we limit ourselves to A, B and C?</p>\n', 'ViewCount': '51', 'Title': 'The grammar of the GeoQuery language', 'LastEditorUserId': '1342', 'LastActivityDate': '2013-04-16T10:02:47.367', 'LastEditDate': '2013-04-16T10:02:47.367', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '1342', 'Tags': '<formal-languages><context-free><semantics><natural-lang-processing>', 'CreationDate': '2013-04-15T13:22:36.020', 'Id': '11331''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In <a href="http://cs.stackexchange.com/a/7741/4689">the answer to this question</a>, I\'m not understanding how the string is derived for a given $l$.</p>\n\n<p>For example,</p>\n\n<blockquote>\n  <p>Case 1: $vx = a^i$ where $i &gt; 0$. Choose $l = 2$ to get $a^{n+i} b^{n+1} c^{n+1} d^n \\notin L$.</p>\n</blockquote>\n\n<p>Why is $l = 2$ chosen and how is $a^{n+i}b^{n+1}c^{n+1}d^n$ derived from $l = 2$?</p>\n\n<p>Also, how can $vx$ be chosen instead of $vwx$ as the OP chose? What do we do about $w$? Is it the empty string?</p>\n', 'ViewCount': '47', 'Title': 'Questions about an answer to a pumping lemma question for CFLs', 'LastActivityDate': '2013-04-16T17:32:15.463', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11359', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4689', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-04-16T16:51:27.737', 'Id': '11358''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '408', 'Title': 'Is the intersection of two context free languages recursively enumerable?', 'LastEditDate': '2013-04-21T14:01:43.797', 'AnswerCount': '1', 'Score': '1', 'OwnerDisplayName': 'Stephen', 'PostTypeId': '1', 'OwnerUserId': '6551', 'Body': '<p>I read a quotation attributed to Sheila Greibach that says that the intersection of two context free grammars is recursively enumerable.</p>\n\n<p>I could not, however, find a citation for this quotation (and searching has failed to turn up a restatement of this result somewhere else).</p>\n\n<p>Can anyone provide a proof or a citation to the original proof for this result?  Can anyone state that it is false?</p>\n', 'Tags': '<formal-languages><computability><context-free>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T14:01:43.797', 'CommentCount': '2', 'AcceptedAnswerId': '11394', 'CreationDate': '2013-04-16T23:24:53.927', 'Id': '11393''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is the language $L = \\{ a^ib^j \\mid i\\ \\nmid\\ j \\ \\} $ context free ?</p>\n\n<p>If we fix $n \\in N$ then we know that the language $L = \\{ a^ib^j \\mid \\ \\forall \\ 1 \\le k \\le n \\ , \\ \\  j\\neq ki \\} $ is context free (as it can be presented as a finite union of context free languages in a similar way to the example here: <a href="http://cs.stackexchange.com/questions/10635/is-l-aibj-mid-j-neq-i-and-j-neq2i-context-free?rq=1">Is $L= \\{ a^ib^j \\mid j\\neq i \\ and \\ j\\neq2i \\ \\} $ context free?</a>)</p>\n\n<p>I think that it\'s not context free but have failed to prove it.\nBy reading other questions on this site I noticed this interesting observation: CFL\'s in $a^*b^*$ are closed under complement as can be seen here: <a href="http://cs.stackexchange.com/questions/11110/are-context-free-languages-in-ab-closed-under-complement">Are context-free languages in $a^*b^*$ closed under complement?</a> </p>\n\n<p>So our language $L$ is context free if and only if $ \\bar L = \\{ a^ib^j \\mid \\ \\ i\\ \\mid\\ j \\ \\} $ is context free. I tried using the pumping lemma but  to no avail.</p>\n\n<p>Thanks in advance</p>\n', 'ViewCount': '241', 'Title': 'Is the language $L = \\{ a^ib^j \\mid i\\ \\nmid\\ j \\ \\} $ context free?', 'LastActivityDate': '2013-11-21T01:06:06.003', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11634', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-04-19T10:08:37.820', 'FavoriteCount': '2', 'Id': '11405''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have the following CFG,</p>\n\n<p>$S \\rightarrow CB$<br>\n$C \\rightarrow aCa \\text{ }|\\text{ } bCb \\text{ }|\\text{ } \\text{#}B$<br>\n$B \\rightarrow AB \\text{ }|\\text{ } \\varepsilon$<br>\n$A \\rightarrow a\\text{ }|\\text{ }b$</p>\n\n<p>This is the CFG for the following language:</p>\n\n<p>$$L= \\left\\{w \\text{#} x\\mid w^R \\text{ is a substring of }\\ x \\text{, where }  x,w\\in \\{a, b\\}^*\\right \\}$$</p>\n\n<p>I have a problem with constructing PDA for this CFG.</p>\n\n<p><strong>My attempt</strong></p>\n\n<p>My idea was to store characters in stack until "#" character, then as soon as the sequence of reversed characters go, pop from the stack. If at the end of input stack is empty, then we are done.</p>\n\n<p>The problem is that for the following string, for example:</p>\n\n<p>abbaa#aabbbbbbb(aabba)bbbbbb</p>\n\n<p>when we read characters after "#", PDA will pop 4 characters, the it will see that the sequence is not valid and proceed with input. How can I return these 4 characters back so that I can check sequence again because I need full stack to proceed with accepted reversed substring that I have showed in brackets?</p>\n', 'ViewCount': '406', 'Title': 'Converting CFG to PDA', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-21T14:39:44.393', 'LastEditDate': '2013-04-21T14:39:44.393', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '11447', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7809', 'Tags': '<context-free><formal-grammars><pushdown-automata>', 'CreationDate': '2013-04-20T20:26:38.457', 'Id': '11441''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Prove that context free languages aren't closed under this operation: $ A(L) = \\{ zyx \\mid x,y,z \\in \\{0,1 \\}^*, xyz \\in L \\} $</p>\n\n<p>Obviously, we need to find a context free language $L$ such that $A(L)$ isn't context free. Here are some of my failed attempts:</p>\n\n<p>Take the language $ L = \\{\\ 0^n1^n \\mid n \\in N \\} $ and then (since the intersection of a context free language with a regular language is context free) we get: $ A(L) \\cap 1^*0^*1^*0^*  = \\{\\ 1^{m}0^{n-k}1^{n-m}0^{k} \\mid n,k,m \\in N, m,k\\le n \\} $ which might look promising at first, but unfortunately this language is context free...</p>\n\n<p>I also tried my luck with the following languages:<br>\n$ L = \\{\\ 0^n1^m0^m1^n \\mid n,m \\in N \\} $<br>\n$ L = \\{\\ ww^R \\mid w \\in \\{0,1 \\}^* \\} $  </p>\n\n<p>but these languages didn't help me either...</p>\n", 'ViewCount': '160', 'Title': 'Prove that context free languages are not closed under swapping prefixes and suffixes', 'LastEditorUserId': '98', 'LastActivityDate': '2013-04-24T06:23:56.547', 'LastEditDate': '2013-04-24T06:23:56.547', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '11526', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><closure-properties><pumping-lemma>', 'CreationDate': '2013-04-23T18:47:53.523', 'Id': '11525''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Is the following language context free: $L = \\{ uxvy \\mid u,v,x,y \\in \\{ 0,1 \\}^+, |u| = |v|, u \\neq v, |x| = |y|, x \\neq y\\} $ ?</p>\n\n<p>I think that it's not context free but I'm having a hard time proving it. I tried intersecting this language with a regular language (like  $ \\ 0^*1^*0^*1^* $ for example) then use the pumping lemma and \\ or homomorphisms but I always get a language that is too complicated to characterize and write down. </p>\n", 'ViewCount': '797', 'Title': 'Is this strange language context free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-20T18:37:10.130', 'LastEditDate': '2013-06-13T05:51:03.333', 'AnswerCount': '3', 'CommentCount': '16', 'Score': '20', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-04-26T17:56:00.657', 'FavoriteCount': '10', 'Id': '11585''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '255', 'Title': 'prove no DPDA accepts language of even-lengthed palindromes', 'LastEditDate': '2013-04-27T08:02:10.887', 'AnswerCount': '1', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '7410', 'FavoriteCount': '1', 'Body': '<p>How do you prove that the language of even-lengthed palindromes, i.e.,\n$L=\\left\\{ ww^R \\mid w\\in \\left\\lbrace 0,1 \\right\\}^* \\right\\}$, can not be accepted by a determinsitc Push-Down-Automaton?</p>\n\n<p>Is there any general way to prove that a context-free language can not be accepted by a deterministic PDA? I mean something like pumping lemma maybe?</p>\n', 'Tags': '<context-free><pushdown-automata>', 'LastEditorUserId': '2205', 'LastActivityDate': '2013-04-27T20:01:26.740', 'CommentCount': '1', 'AcceptedAnswerId': '11608', 'CreationDate': '2013-04-27T06:52:11.577', 'Id': '11598''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>How can I prove that $\\{0^n 1^{n^2} \\mid n \\in \\mathbb{N}\\}$ is not a context free language?</p>\n\n<p>I tried to prove it using the pumping lemma, but I don't know how to deal with the case when $vxy$ contains both $0$ and $1$.</p>\n", 'ViewCount': '114', 'Title': 'Proving that $\\{0^n 1^{n^2} \\mid n \\in \\mathbb{N}\\}$ is not context-free', 'LastEditorUserId': '31', 'LastActivityDate': '2013-04-28T19:24:35.537', 'LastEditDate': '2013-04-28T19:24:35.537', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '7935', 'Tags': '<context-free>', 'CreationDate': '2013-04-27T20:27:35.433', 'Id': '11609''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p>Is $L=\\{ xyx \\mid x,y \\in \\{a,b\\}^* \\text {and } |x| \\ge 1 \\}$ context-free?</p>\n  \n  <p>If yes, please explain how we can write grammar or create a PDA for it. If not a CFL, then prove it through pumping lemma.</p>\n</blockquote>\n\n<p>I have tried to apply the pumping lemma with $w = a^nb^naba^nb^n$ as the word in $L$, but without success.</p>\n', 'ViewCount': '161', 'Title': u'Is {xyx | |x|\u22651} context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-12T10:15:37.917', 'LastEditDate': '2013-05-12T10:15:37.917', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7943', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2013-04-28T09:08:31.110', 'Id': '11629''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm stuck on this question about context-free languages and was hoping for some clarification.</p>\n\n<blockquote>\n  <p>$\\qquad L = \\{a^i b^j c^k \\mid  i=j, i=k\\}$ </p>\n  \n  <p>is <em>not</em> context-free. Show that its complement <em>is</em> context-free.</p>\n</blockquote>\n\n<p>I understand that the complement basically means everything not in $L$, that is $A^* \\setminus L$. However, I have no  idea how to actually take a complement for a language like  this.</p>\n", 'ViewCount': '1075', 'Title': 'How to take complement of a language?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-01T10:54:01.700', 'LastEditDate': '2013-04-30T21:56:57.737', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '0', 'OwnerDisplayName': 'user2063561', 'PostTypeId': '1', 'Tags': '<formal-languages><terminology><context-free>', 'CreationDate': '2013-04-30T07:58:49.617', 'Id': '11672''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am studying parsing, i.e. bottom-up parsing. it is said that there some rules which are used by weak precedence grammar. What does weak precedence grammar mean? What about precedence relation?</p>\n\n<p>Any help will be appreciated. If it is possible, could you give an example. Thanks</p>\n', 'ViewCount': '59', 'Title': 'Weak Precedence Grammar and Parsing', 'LastActivityDate': '2013-05-29T22:21:32.073', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '11753', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7957', 'Tags': '<formal-languages><terminology><context-free><parsers>', 'CreationDate': '2013-05-02T11:42:03.387', 'Id': '11730''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I want to show that non-emptiness of context free language is P-complete. So, I am trying to reduce CVP to this problem by generating grammar from circuit. I consider all type of gates in circuit and I make right production in grammar. </p>\n\n<p>I hope that it is good way to prove that it is P-complete, but I have a problem with showing that it is log-space reduction. I think that if I have this circuit, I need only one pointer to the structure, because I can directly write the production. Howerver, I need also have information how the non-terminal symbol is named. Of course, I can use binary numbers for variable names (and it is log-space), but it seems to me that I need know all names to produce grammar production. I have no idea how to go in this graph (circuit) and give a names of next non-terminals and use only log-space.</p>\n\n<p>Could anyone explain me how to prove that it is log-space reduction? </p>\n', 'ViewCount': '55', 'Title': 'Reduction CVP to CFG problem', 'LastActivityDate': '2013-05-02T13:46:54.640', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8009', 'Tags': '<context-free><reductions>', 'CreationDate': '2013-05-02T13:46:54.640', 'Id': '11732''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>When I see a problem like "Write a grammar for a language $L$ if $L = \\{..\\}$" for me is a matter of "instinct" the way that one can define productions. For example given the following exercise:</p>\n\n<blockquote>\n  <p>Let $L$ a language which alphabet is $\\{x,y,z\\}$ and accepts strings\n  $w$ where there aren\'t consecutive $x$\'s nor consecutive $y$\'s nor\n  consecutive $z$\'s.</p>\n</blockquote>\n\n<p>My first aproaching was to stablish that $x$, $y$ and $z$ each one are in $L$, that is:</p>\n\n<p>$$S \\rightarrow x \\mid y \\mid z$$</p>\n\n<p>If the string has an $x$, there can be a consecutive $y$ or $z$, similarly for the other symbols. I assume that there are productions $A$, $B$ and $C$ that make the work, so the start production is:</p>\n\n<p>$$S \\rightarrow xA\\mid yB\\mid zC\\mid x\\mid y\\mid z$$</p>\n\n<p>Therefore $S$ can be splitted to define $A$, $B$ and $C$:</p>\n\n<p>$\\begin{eqnarray*}S &amp;\\rightarrow&amp; A \\mid  B \\mid  C \\\\A &amp;\\rightarrow&amp;  yB \\mid  zC \\mid  y \\mid  z \\\\ B &amp;\\rightarrow&amp;  xA \\mid  zC \\mid  x \\mid  z\\\\ C &amp;\\rightarrow&amp;  xA \\mid  yB \\mid  x \\mid  y \\end{eqnarray*}$</p>\n\n<p>But as you all can see this is just my version, I started with base strings accepted by $L$ and then I followed my own thought of how to build the grammar. Is there a easy way to do this? or some advice for similar languages? (like those which have different number of symbols).</p>\n', 'ViewCount': '169', 'Title': 'Easiest way to write a grammar?', 'LastEditorUserId': '31', 'LastActivityDate': '2013-05-05T23:08:41.513', 'LastEditDate': '2013-05-05T18:59:00.350', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '11812', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7492', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2013-05-05T18:39:32.883', 'Id': '11810''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have the following CFG $G$:\n$$ \\begin{align}\nS &amp;\\rightarrow aAbb \\mid aaBb \\\\\nA &amp;\\rightarrow aAbb \\mid \\epsilon \\\\\nB &amp;\\rightarrow aaBb \\mid \\epsilon \\\\\n\\end{align} $$</p>\n\n<p>I have to create a PDA (pushdown automaton) to recognize this language however I am unsure on how to do it. So far I have this(revised based on feedback from user Hendrik Jan) :</p>\n\n<p><img src="http://i.stack.imgur.com/e9gfG.png" alt="enter image description here"></p>\n\n<p>I understand that it should accept the last one ($aaaabb$) however it does not for the current version.</p>\n', 'ViewCount': '192', 'Title': 'PDA for this context-free grammar', 'LastEditorUserId': '7216', 'LastActivityDate': '2013-06-07T15:33:12.757', 'LastEditDate': '2013-05-08T11:50:48.963', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7216', 'Tags': '<context-free><automata><pushdown-automata>', 'CreationDate': '2013-05-07T19:32:21.060', 'Id': '11864''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p>Consider formal language $L$ over finite alphabet $\\Sigma$ consisting of all words over $\\Sigma$ that have non-trivial period (non empty prefix that is also a suffix). Is $L$ always context free?</p>\n</blockquote>\n\n<p>Maybe pumping lemma will do? I was advised to try with a word $a^Nb^Na^Nb^N$ but if I pump only second block of $a$ then this word still is in $L$, because it has non empty prefix $a^Nb^N$ that is also a suffix.</p>\n', 'ViewCount': '72', 'Title': 'Is $L$ always context free?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-12T10:11:19.127', 'LastEditDate': '2013-05-12T10:08:58.070', 'AnswerCount': '1', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8041', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-05-10T09:54:06.687', 'Id': '11929''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '712', 'Title': 'Example of a non-context free language that nonetheless CAN be pumped?', 'LastEditDate': '2013-05-17T06:43:11.733', 'AnswerCount': '3', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '8197', 'FavoriteCount': '2', 'Body': "<p>So basically L satisfies the conditions of the pumping lemma for CFL's but is not a CFL (that is possible according to the definition of the lemma).</p>\n", 'Tags': '<formal-languages><context-free><pumping-lemma>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-05-17T06:43:11.733', 'CommentCount': '3', 'AcceptedAnswerId': '12044', 'CreationDate': '2013-05-15T16:01:57.900', 'Id': '12041''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>How can I deal with recursive terminals in CFG when converting it to CNF? For example,</p>\n\n<p>S -> MN</p>\n\n<p>M -> AM | A</p>\n\n<p>N -> BN | B</p>\n\n<p>A -> a</p>\n\n<p>B -> b</p>\n\n<p>How can I reduce terminals M and N?</p>\n', 'ViewCount': '95', 'Title': 'CNF: Recursion in CFG', 'LastActivityDate': '2013-05-23T11:33:44.703', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7809', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-05-22T23:30:34.303', 'Id': '12221''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '163', 'Title': 'Is $L = \\{a^jb^ia^{j-i}\\mid i,j \\ge 0\\ , j > i\\}$ context-free?', 'LastEditDate': '2013-05-31T17:13:01.660', 'AnswerCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7917', 'FavoriteCount': '1', 'Body': "<p>I'm exercising for an upcoming exam and I find this exercise:</p>\n\n<blockquote>\n  <p>Say whether or not the language \n  $$L = \\{a^jb^ia^{j-i}\\mid i,j \\ge 0\\ , j &gt; i\\}$$\n  is a context-free language. Justify your answer.</p>\n</blockquote>\n\n<p>I have already tried (using the pumping lemma for CFL) with two different words:\n$$w1 = \\  a^pb^{p-1}a$$\n$$w2 = \\  a^{2p}b^pa^p$$</p>\n\n<p>but I'm stuck when the case is that $vwx$ (considering $uvwxy = w$) take letters from both the first group of $\\bf{a}$ and the group of $\\bf{b}$.<br>\nHave I chosen a wrong format for the word or am I simple missing some trivial condition?</p>\n", 'Tags': '<formal-languages><context-free><pumping-lemma>', 'LastEditorUserId': '6716', 'LastActivityDate': '2013-06-01T15:22:31.090', 'CommentCount': '2', 'AcceptedAnswerId': '12375', 'CreationDate': '2013-05-30T09:06:03.837', 'Id': '12370''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I\'m working on old MC-Questions about decidability und don\'t have the answers to the following ones:</p>\n\n<p>1.) $L_1$ and $L_2$ are not decidable $\\Rightarrow$ No superset of $L_1 \\cup L_2$ is decidable</p>\n\n<p>2.) For Turing-acceptable languages L is "L = $\\emptyset$" a non-trivial property.</p>\n\n<p>3.) There are context-free languages $L_1$ and $L_2$ so that $L_1 \\cap L_2$ is not decidable.</p>\n\n<p>4.) $L$ is decidable $\\Leftrightarrow$ $L \\le \\{0\\}^* \\cdot \\{1\\}^*$</p>\n\n<p>I think 1.) is false, because $\\Sigma^*$ as a superset of many undecidable languages for example is decidable and 2.) is true, because there are Turing-acceptable languages with (exactly one) and without the property. I have no idea at 3.) and 4.). </p>\n', 'ViewCount': '233', 'Title': 'Multiple-Choice Questions about decidability', 'LastActivityDate': '2013-06-08T12:44:09.483', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8480', 'Tags': '<turing-machines><context-free><reductions><undecidability>', 'CreationDate': '2013-06-08T12:30:17.683', 'Id': '12527''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>This is a question from <a href="http://cs.anu.edu.au/courses/COMP3630/comp3630exams.pdf" rel="nofollow">a 2007 exam paper for a course I\'m studying</a>, question 2 on page 2.</p>\n\n<blockquote>\n  <p>Theorem: Let $L$ be a context-free language. Let $L_{even}$ be the subset of $L$ consisting of all the strings in $L$ that have even length. Then $L_{even}$ is context-free.</p>\n</blockquote>\n\n<p>The question is to prove this theorem using two of three different methods: using grammars, PDAs, or a theorem about language intersections.</p>\n\n<p>I can very easily find a proof using PDAs (maintain your current odd/even status using the stack), and intersections (intersect with $\\Sigma^*_{even}$, which is regular) - but I can\'t think of how to do it using properties of grammars. I suspect either Chomsky or Greibach Normal Forms comes in handy here but I\'m not sure how.</p>\n', 'ViewCount': '89', 'Title': 'Proving that CFLs are closed under even-ness using grammars', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-10T10:36:08.340', 'LastEditDate': '2013-06-10T10:33:55.813', 'AnswerCount': '2', 'CommentCount': '6', 'AcceptedAnswerId': '12557', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8591', 'Tags': '<formal-languages><context-free><formal-grammars><closure-properties>', 'CreationDate': '2013-06-09T02:53:21.853', 'Id': '12554''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let $L$ be a language such that $\\overline{L}^R$ (the reversal of the complement of $L$) is context-free. Is then also $\\overline{(L^R)} \\in \\mathrm{CFL}$?</p>\n', 'ViewCount': '59', 'Title': 'Is CFL closed against exchanging complementation and reversal?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-06-15T15:22:42.030', 'LastEditDate': '2013-06-15T15:22:42.030', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'OwnerDisplayName': 'Guy', 'PostTypeId': '1', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2013-06-11T18:02:04.590', 'Id': '12631''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '124', 'Title': 'Myhill-Nerode style characterization of CFL?', 'LastEditDate': '2013-11-02T13:57:51.987', 'AnswerCount': '2', 'Score': '6', 'PostTypeId': '1', 'OwnerUserId': '5323', 'FavoriteCount': '2', 'Body': '<p>Define the <em>Nerode equivalence</em> over a language $L \\subseteq \\Sigma^{*}$ as $u \\sim_L v$ iff $uw \\in L \\Leftrightarrow vw \\in L$ for every $w \\in \\Sigma^{*}$.</p>\n\n<p>The Nerode equivalence ${\\sim}_L$ has finitely many equivalence classes precisely when $L$ can be recognized by a finite-state automaton.  This is the <a href="http://en.wikipedia.org/wiki/Myhill%E2%80%93Nerode_theorem" rel="nofollow">Myhill-Nerode theorem</a>.</p>\n\n<blockquote>\n  <p>Is there a similar characterization of context-free languages?</p>\n</blockquote>\n\n<hr>\n\n<h1>Motivation:</h1>\n\n<p>The Nerode equivalence classes each correspond to a distinct state in any automaton that recognizes $L$.  Each CFL can be recognized by an NPDA, which has a finite number of states but also a potentially unbounded stack of alphabet symbols.  The stack keeps track of one possible way that a string can be parsed.  The number of equivalence classes may be infinite since the stack can store an unbounded number of symbols.</p>\n\n<p>I am asking: is there always a way to clump together equivalence classes so that each clump represents one state of the PDA, with each class within the clump representing equivalent states of the stack for that PDA state?</p>\n\n<p>For instance, the language of properly nested parentheses only needs states to handle <code>pop</code> and <code>push</code>, as the stack will keep track of the current nesting depth.  If such clumping can always be done, then whether the number of clumps is finite determines whether the language is context-free.</p>\n\n<hr>\n\n<p>As pointed out by @sdcvvc in a comment, a form of this question was asked as <a href="http://math.stackexchange.com/questions/118362">http://math.stackexchange.com/questions/118362</a> although Yuval Filmus\'s answer to the related question at <a href="http://cs.stackexchange.com/questions/12041/example-of-a-non-context-free-language-that-nonetheless-can-be-pumped/12044#12044">Example of a non-context free language that nonetheless CAN be pumped?</a> is more relevant.</p>\n', 'Tags': '<formal-languages><context-free><pushdown-automata>', 'LastEditorUserId': '5323', 'LastActivityDate': '2013-11-02T13:57:51.987', 'CommentCount': '1', 'AcceptedAnswerId': '12645', 'CreationDate': '2013-06-12T21:49:16.247', 'Id': '12643''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Productions of the form A-> A are removed immediately, but what if the production is of the form A -> AA? </p>\n\n<p>example: \nA -> AA | a</p>\n', 'ViewCount': '236', 'Title': 'Removing identical variables in CFG Unit Productions', 'LastActivityDate': '2013-06-18T18:46:38.790', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '12748', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8739', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-06-18T18:26:15.943', 'Id': '12746''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I\'m looking for an algorithm to construct a grammar which, given a set of words which can have multiple identical symbols, represents a compressed version of this set, that is, I can generate only the words of the set but the grammar will take less memory than the set himself.</p>\n\n<p>Besides, I\'m looking for an algorithm which can update the grammar when I want to remove a word of the set.</p>\n\n<p>What type of algorithm is able to do that ?</p>\n\n<p>I give a concrete example:</p>\n\n<p>Consider a string S="abcdefghij", and then consider the finite set of words "cdhij", acdef", "fghi", "bcfgij", "defi".</p>\n\n<p>I would like to construct a grammar which generates only this set of words (words which can be viewed as concatenation of various substrings of any length from the original string S).</p>\n\n<p>Finally I would like to remove a word in the set and update subsequently the grammar.</p>\n\n<p>Thank you.</p>\n', 'ViewCount': '62', 'Title': "I'm lookin for a method to construct a particular grammar?", 'LastEditorUserId': '8767', 'LastActivityDate': '2013-07-21T22:29:26.490', 'LastEditDate': '2013-06-21T08:44:21.090', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8767', 'Tags': '<context-free><formal-grammars><tree-grammars>', 'CreationDate': '2013-06-20T08:04:48.473', 'Id': '12782''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am not entirely sure if the title is the correct way to phrase what is occurring. There is a recurring process which I decided to attempt to model using production rules similar to those used in a context-free grammar.</p>\n\n<p>The real world process is a production line. It takes 1 unit, after 2 weeks, produces 1 unit, after 4 weeks, that unit will produce another unit - and also 2 of the starting units. After 4 weeks the "another unit" will produce "that unit" - and also 3 of the starting units. This continues semi indefinitely, but the range I am looking at is roughly 52 weeks.</p>\n\n<p>I came up with this model of production rules</p>\n\n<p>$S\\rightarrow A$</p>\n\n<p>$A\\rightarrow S^2B$</p>\n\n<p>$B\\rightarrow S^3A$</p>\n\n<p>I attempted to expand this so that I could formulate a generating function and solve for n=52 (52 being the 1 year mark).</p>\n\n<p>$S$,$A$,$S^2B$,$S^5A$,$S^7B$, ...</p>\n\n<p>However, I was unable to determine if I was taking the correct approach to solving this situation. I believe that an error here lies in the fact that the duration of time is ignored. Namely that from $S\\rightarrow A$ 2 weeks elapse, from $A\\rightarrow S^2B$ 4 weeks elapse, and from $B\\rightarrow S^3A$ 4 weeks elapse.</p>\n\n<p>In order to better understand this situation, I decided to code an example so I could at least see the totals. However, it did not lend itself to producing a summation function.</p>\n\n<p>So, given all this, how is it possible to come up with a summation function instead of having to manually iterate through it like this c# approach does? Or, is there a similar/alternate approach to modeling this which will allow an easier summation process?</p>\n\n<p>Please feel free to correct any misunderstandings I may have.</p>\n\n<p><strong>edits</strong></p>\n\n<p>For example:</p>\n\n<p>Week 1: We have 1 unit (S). It sits for 2 weeks until it is ready to become 1 of the next type(A).</p>\n\n<p>Week 3: The first unit is now here. It sits for 4 weeks until it is ready to become 1 of the next type(A). At that time, it also becomes 2 of the first type(S).</p>\n\n<p>Week 7: The unit from Week 3 has now become 2 of the first type of unit(S). It also created 1 of the second type(A). The 2 units of type S will now sit for 2 weeks until they make 2 units of type A. The 1 unit of type A will now sit for 4 weeks until it makes 1 unit of type B and 2 units of type S.</p>\n\n<p>Week 9: The 2 units of type S from week 7 have now sat for 2 weeks. Now they have become 2 units of type A. These two units of type A will sit for 4 weeks and produce 4 units of type S and 2 units of type B.</p>\n\n<p>Week 11: The 1 unit of type A from week 7 has now sat for 4 weeks and has now made 1 unit of type B and 2 units of type S. The 1 unit of type B will sit for 4 weeks and then make 1 unit of type A and 3 units of type S. The 2 units of type S will now sit for 2 weeks and make 2 units of type A.</p>\n\n<p>Also, the 2 units of type S from week 9 have now sat for 2 weeks and become 2 units of type A. These two units will sit for 4 weeks and become 2 units of type B and will also become 6 units of type S.</p>\n\n<p>etc.</p>\n\n<p>This can perhaps be represented by a series of recurring relations</p>\n\n<p>$s(n) = a(n) + b(n) + c(n)$</p>\n\n<p>$a(n) = 2*b(n-4) + 3*c(n-4)$</p>\n\n<p>$b(n) = a(n-2) + c(n-4)$</p>\n\n<p>$c(n) = b(n-4)$</p>\n\n<p>where</p>\n\n<p>$s(n) = a(n) = b(n) = c(n) = 0$ for $n &lt; 1$</p>\n\n<p>$a(1) = 1$</p>\n', 'ViewCount': '86', 'Title': 'How can I produce a summation function from this set of production rules for a grammar?', 'LastEditorUserId': '9118', 'LastActivityDate': '2013-07-30T13:33:51.537', 'LastEditDate': '2013-07-11T18:54:36.783', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '13216', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9118', 'Tags': '<context-free><formal-grammars><combinatorics>', 'CreationDate': '2013-07-10T19:39:52.290', 'Id': '13213''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I just not sure does empty set have a context-free grammar in Chomsky normal form?</p>\n\n<p>That is, for $B=\\emptyset$, then a context-free grammar is $S \\to S$, I think which doesn't have a Chomsky normal form. I am not sure. Can some one explain?</p>\n", 'ViewCount': '227', 'Title': 'Does the empty language have a CFG in CNF?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-12T10:58:36.480', 'LastEditDate': '2013-07-12T10:52:16.447', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'OwnerDisplayName': 'user67584', 'PostTypeId': '1', 'OwnerUserId': '8601', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-07-10T03:51:41.247', 'Id': '13235''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Is $L = \\{A^n B^n C^n \\mid n \\in \\mathbb{N}\\}$ a context-free language, e.g. $AAAABBBBCCCC \\in L$</p>\n\n<p>If so, what's that context-free grammar that produces it?</p>\n", 'ViewCount': '783', 'ClosedDate': '2013-07-22T13:58:52.000', 'Title': 'Context Free Grammar for $\\{A^nB^nC^n | n \\in \\mathbb{N}\\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2013-07-22T13:59:24.893', 'LastEditDate': '2013-07-22T13:59:24.893', 'AnswerCount': '0', 'CommentCount': '8', 'Score': '0', 'OwnerDisplayName': 'Nick Mpora', 'PostTypeId': '1', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-07-21T23:54:55.160', 'Id': '13383''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>For a language L we define:  </p>\n\n<p>$\\qquad A(L) = \\{ x \\in L \\mid \\text{ no proper prefix of x is in L} \\} $</p>\n\n<p>Are regular / context free languages closed under this operation ?</p>\n\n<p>For regular languages I thought about taking the DFA that accepts the language L and create a new NFA by making all accepting states sinks (so the only way of being accepted by the automata is that when reading the last letter we reach an accepting state for the first time).</p>\n\n<p>Can't we make the same thing with a pushdown automata for context free languages ?</p>\n\n<p>Edit (as Raphael pointed out, the example below is wrong):</p>\n\n<p>But here is a strange language that I think implies the opposite:<br>\n$L = \\{ 0^{i}1^{j}2^{n} \\mid i \\le n \\ \\text{ or }\\ j \\le n \\} $<br>\n$A(L) = \\{ 0^{i}1^{j}2^{n} \\mid n = \\min(i,j) \\} $</p>\n\n<p>$L$ is context free but $A(L)$ isn't. Obviously, at least one of the things I wrote above is wrong. Anyone have any clue what is going on here ?</p>\n", 'ViewCount': '404', 'Title': 'Are regular and context free languages closed against making them prefix-free?', 'LastEditorUserId': '7068', 'LastActivityDate': '2013-07-22T19:55:09.470', 'LastEditDate': '2013-07-22T18:20:01.553', 'AnswerCount': '2', 'CommentCount': '7', 'AcceptedAnswerId': '13389', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7068', 'Tags': '<formal-languages><regular-languages><context-free><closure-properties>', 'CreationDate': '2013-07-22T13:54:58.530', 'Id': '13388''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Given two context-free languages $L_1$ and $L_2$, the language given by the difference of the two languages, $L_1 - L_2$, is (in general) not context-free. Is it possible to prove this without using pumping lemma? </p>\n', 'ViewCount': '426', 'Title': 'Prove Context Free languages not closed under difference?', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-08-14T20:10:39.333', 'LastEditDate': '2013-08-12T06:36:37.980', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '8533', 'Tags': '<context-free><closure-properties>', 'CreationDate': '2013-08-10T11:08:36.113', 'Id': '13701''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I'm reading the book: <em>Formal Syntax and Semantics of Programming Languages</em>. I don't understand this exercise:</p>\n\n<blockquote>\n  <p>Consider the following two grammars, each of which generates strings of correctly balanced parentheses and brackets. Determine if either or both is ambiguous. The Greek letter \u03b5 represents an empty string.</p>\n\n<pre><code>&lt;string&gt; ::= &lt;string&gt; &lt;string&gt; | ( &lt;string&gt; ) | [ &lt;string&gt; ] | \u03b5\n&lt;string&gt; ::= ( &lt;string&gt; ) &lt;string&gt; | [ &lt;string&gt; ] &lt;string&gt; | \u03b5\n</code></pre>\n</blockquote>\n", 'ViewCount': '135', 'Title': 'Determine if two grammars for the same language are ambiguous', 'LastEditorUserId': '4249', 'LastActivityDate': '2013-08-12T08:46:36.553', 'LastEditDate': '2013-08-11T19:28:59.790', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '13718', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9615', 'Tags': '<context-free><formal-grammars><ambiguity>', 'CreationDate': '2013-08-11T19:12:20.367', 'Id': '13711''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>If the set of regular languages is closed under the concatenation operation and is also closed under the reverse operation ($x^R$ is the reverse of $x$) then is the language generated by $$\\{ww^R|w\\in\\Sigma^*\\}$$ for some input alphabet $\\Sigma$, also regular? If not, why not?</p>\n\n<p>I've been trying to find a proof for this using the pumping lemma, but it seems that selecting any substring towards the middle of the string being pumped could also be of the form $\\{ww^R|w\\in\\Sigma^*\\}$, causing the original string to remain in its original form.</p>\n\n<p>Here's a try:</p>\n\n<p>$\\textbf{Theorem:}$ The language, $A$, generated by $\\{ww^R|w\\in\\Sigma^*\\}$ is not regular.</p>\n\n<p>$\\textbf{Proof:}$ Assume $A$ is regular (We will use the Pumping Lemma for Regular Languages to show a contradiction). Let the input string $s$ be $ww^R$ and let $p = |w|$.</p>\n\n<p>When splitting $s$ into substrings $x, y, z$ such that $s=xyz$ we see that $xy$ must be a substring of $w$ by the third condition of the Pumping Lemma ($|xy|\\le p$).</p>\n\n<p>By the first condition of the Pumping Lemma, we see that all strings of the form $xy^iz$ must be in $A$ for all $i \\ge 0$. Taking $i$ to be zero, we obtain the string $xw^R$. $|x| &lt; |w^R|$ so $xy^0z \\notin A$.</p>\n\n<p>QED? What if $xw^R$ can still be split so that for some substring $k$, $kk^R = xw^R$?</p>\n\n<p>I think I may be overthinking this but it's really bugging me.</p>\n", 'ViewCount': '629', 'Title': 'Is the language that accepts strings concatenated with their reverse regular?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-18T20:59:40.083', 'LastEditDate': '2013-08-22T14:52:13.693', 'AnswerCount': '3', 'CommentCount': '4', 'AcceptedAnswerId': '13806', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '9727', 'Tags': '<formal-languages><regular-languages><context-free><pumping-lemma>', 'CreationDate': '2013-08-18T21:36:02.120', 'Id': '13804''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have been studying the book <em>Introduction to Computation</em> by Michael Sipser on my own, and I'm stuck on this exercise from the chapter on Pushdown Automato and Context-Free Languages. The exercise is to show that  $$A=\\{x\\#y\\,|\\, x \\neq y\\}$$ is a context-free language. </p>\n\n<p>I'm having a hard time proving this because of the second string not reversed. I've tried both making a context-free grammar and a pushdown automata, but in both cases I can't figure out how to make/check that the initial characters of both $x$ and $y$ are the same.</p>\n\n<p>I would appreciate any hints that could help me get to the answer.</p>\n", 'ViewCount': '103', 'Title': 'Constructing a Context Free Grammar for checking non-equality of strings', 'LastActivityDate': '2013-08-22T12:20:47.063', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9778', 'Tags': '<context-free><pushdown-automata>', 'CreationDate': '2013-08-22T12:20:47.063', 'Id': '13866''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Having:</p>\n\n<p>$\\qquad \\begin{align}\n    S &amp;\\to aT \\\\\n    T &amp;\\to a \\mid UTV \\\\\n    U &amp;\\to ab \\mid ba \\\\\n    V &amp;\\to ac \\mid ca\n\\end{align}$</p>\n\n<p>What language would be generated by this? </p>\n\n<p>How can I obtain an $LL(1)$ grammar using factorisation?</p>\n\n<p>I've tried a number of combinations but do not get how to represent the UTV part:</p>\n\n<p>Something like a|ab|ba|ac|ca|aa|a(ab|ba)^n a(ac|ca)^n</p>\n", 'ViewCount': '68', 'Title': 'Grammar to Language', 'LastEditorUserId': '39', 'LastActivityDate': '2013-08-26T05:26:24.020', 'LastEditDate': '2013-08-24T08:32:35.643', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9801', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2013-08-23T15:57:02.367', 'Id': '13890''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I need help with deciding if $L$ is context-free.</p>\n\n<p>$$L = \\{a^pb^{q+r}c^sd^{q+t}e^{p+r} \\mid p, q, r, s \\ge 0\\ , s &gt; t\\}$$</p>\n\n<p>Can be rewritten into:</p>\n\n<p>$$L = \\{a^pb^qb^rc^sd^qd^te^pe^r \\mid p, q, r, s \\ge 0\\ , s &gt; t\\}$$</p>\n\n<p>When we see the first occurrence of $c$, we push the $c$:s onto the stack. But we can't make difference between $d^q$ and $d^t$,  so comparing $s &lt; t$ is impossible when popping the $d$:s. </p>\n\n<p>Hence $L$ is not Context-Free.</p>\n\n<p>Is my reasoning right ?</p>\n", 'ViewCount': '109', 'Title': 'Deciding if language is Context-Free', 'LastEditorUserId': '1636', 'LastActivityDate': '2013-08-28T10:32:22.617', 'LastEditDate': '2013-08-28T01:33:18.760', 'AnswerCount': '3', 'CommentCount': '0', 'AcceptedAnswerId': '13982', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-08-28T00:05:59.243', 'Id': '13981''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I am trying to figure out the result of the concatenation among different language types (regular, context free, ...). I think the result strongly depends on the nature of the languages which will be concatenated, but I have some doubts on determining the category the result belongs to. Maybe troughout an example it will be easier to solve all my doubts and let you understand better the nature of my question. For instance, let $L = \\left \\{ 0^{n}\\cdot 1^{n} \\mid n \\geq 0 \\right \\}$ and $L^{R} = \\left \\{ 1^{n}\\cdot 0^{n} \\mid n \\geq 0 \\right \\}$</p>\n\n<p>Those two languages are obviosly not regular (it's easy to apply the Pumping Lemma here)\nbut what happens if I define this result language $L{}' = L \\cdot \\left \\{ 0, 1 \\right \\}^{*} \\cdot L^{R}$</p>\n\n<p>I think it should be still not regular, since we can apply again the pumping lemma by letting be $p$ the length of the pumping and $w=0^{p}1^{2p}0^{p}$, w is in $L'$. The contination is easily.</p>\n\n<p>But is it good to consider that w of $L'$? </p>\n", 'ViewCount': '56', 'Title': 'Concatenation among different language types', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-06T09:50:31.623', 'LastEditDate': '2013-09-06T08:52:51.910', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9989', 'Tags': '<formal-languages><regular-languages><context-free><pumping-lemma>', 'CreationDate': '2013-09-05T11:29:43.487', 'Id': '14145''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>This is very much clear to me that an FSM has limited memory (sufficient to store present state). How do I prove that (intutively or otherwise) that a CFL has more memory than a DFA or NFA (thus making a CFL more powerful than FA) ?   </p>\n', 'ViewCount': '96', 'ClosedDate': '2013-09-09T12:44:25.257', 'Title': 'How do I prove that Context Free languages have more memory than FSM', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-09T12:42:27.433', 'LastEditDate': '2013-09-09T12:42:27.433', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '6466', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-09-09T09:10:17.783', 'Id': '14230''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Here is a question that I encountered in one of my exams:</p>\n\n<blockquote>\n  <p>Find one context-free grammar that recognizes the language:\n  $\\qquad L = \\{a^n(b^mc^m)^pd^n \\mid m, n, p \\geq 0\\} $</p>\n</blockquote>\n\n<p>Can you find such a grammar? I even doubt its existence, but I have not been able to prove that. </p>\n', 'ViewCount': '208', 'Title': 'Does this language have a context-free grammar?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-09-16T08:07:16.830', 'LastEditDate': '2013-09-16T08:06:35.013', 'AnswerCount': '2', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10135', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-09-14T12:32:22.343', 'Id': '14305''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>Given languages X, Y and Z, each with alphabet, define X/Y/Z \n as:</p>\n\n<pre><code>     X/Y/Z = { w \u2208 \u03a3* | \u2203u \u2208 Y and \u2203v \u2208 Z; such that wuv \u2208 X }.\n</code></pre>\n\n<p>Prove that if X is context-free, and Y and Z are regular, then X/Y/Z\nis context-free.</p>\n', 'ViewCount': '140', 'Title': 'Prove that X/Y/Z is context-free', 'LastActivityDate': '2013-09-16T15:40:05.847', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '10145', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2013-09-15T12:23:15.787', 'FavoriteCount': '0', 'Id': '14333''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>Given languages A,B and C, each with alphabet \u03a3, define A/B/C as</p>\n\n<p>A/B/C = { w\u2208\u03a3* | \u2203u \u2208 B and \u2203v \u2208 C; such that wuv \u2208 A }.\nProve that if A is context-free, and B and C are regular, then A/B/C is context-free.</p>\n', 'ViewCount': '24', 'ClosedDate': '2013-09-15T18:58:54.907', 'Title': u'Given languages A,B and C, each with alphabet \u03a3, define A/B/C as:', 'LastActivityDate': '2013-09-15T18:54:25.717', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '0', 'OwnerDisplayName': 'user561298', 'PostTypeId': '1', 'OwnerUserId': '10145', 'Tags': '<context-free>', 'CreationDate': '2013-09-15T05:58:50.250', 'FavoriteCount': '0', 'Id': '14336''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<ul>\n<li>Given any <em>Context-Free-Grammar, $G$</em>, and another in <em>Chomsky Normal Form, $G_c$</em>, how can we check if both $G$ and $G_c$ generate the same language?</li>\n</ul>\n\n<p>One of the trivial ways I know of is to convert $G$ into a CNF form. which motivates my second question,</p>\n\n<ul>\n<li>Can two different <em>Context-Free-Grammars</em> in CNF, $G_c$ and $G_c^\\prime$, generate the same language? (I would appreciate a proof of it)</li>\n</ul>\n', 'ViewCount': '77', 'Title': 'Equivalence of Context-Free-Grammar and Context-Free-Grammar in CNF', 'LastActivityDate': '2013-09-22T11:13:46.963', 'AnswerCount': '2', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9736', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-09-22T09:22:18.547', 'FavoriteCount': '1', 'Id': '14513''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Show that L = $\\{0^{2^n}| n\\geq 0\\}$ is not a context free language.</p>\n\n<p>Let string $s = 0^{2^p}$. Then we know we can write $s$ as $s = uvxyz$. I know that |vy| > 0 and $|vxy| \\leq p$. </p>\n\n<p>So how do I show that $uv^2xy^2z$ is not in $L$.</p>\n', 'ViewCount': '525', 'Title': 'Use pumping lemma to show L is not context free', 'LastEditorUserId': '9819', 'LastActivityDate': '2013-10-22T23:00:00.967', 'LastEditDate': '2013-09-22T22:09:07.183', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<context-free><pushdown-automata>', 'CreationDate': '2013-09-22T19:06:38.340', 'Id': '14521''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>(1) $L_1 = \\{a^ib^{i+j}c^j|i,j\\geq 0\\} $</p>\n\n<p>(2) $L_2 = \\{xy | x,y \\in \\{0,1\\}^*, x \\neq y, |x| = |y| \\}$</p>\n\n<p>I doubt that $L_1$ is CFL. I've been trying to go with the string $s$ = $a^pb^{2p}c^p$. Thus, we can write $s$ as $uvxyz$. Now I'm trying to show $uv^2xy^2z$ is not in $L_1$. </p>\n\n<p>I really have no idea how to approach (2). And if it is context free, how in the world would you draw a pda?</p>\n", 'ViewCount': '87', 'Title': 'Determine whether two languages are context free', 'LastActivityDate': '2013-10-02T23:17:32.233', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '14531', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<context-free><pushdown-automata>', 'CreationDate': '2013-09-22T22:08:26.540', 'Id': '14527''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Let L be language of balanced parentheses.</p>\n\n<p>(a) Prove If there are equal number of ('s and )'s and every prefix of w contains at least as many ('s as )'s, then w is in L.</p>\n\n<p>(b) Prove If w is in L, then there are equal number of ('s and )'s and every prefix of w contains at least as many ('s as )'s.</p>\n\n<p>After much thought, I don't seek what I'm supposed to be doing. All I know is that I'm supposed to be using induction.</p>\n\n<p>Here is the grammar that generates L: $S\\to SS|(S)|\\epsilon$</p>\n", 'ViewCount': '320', 'Title': 'Language of balanced parentheses; Biconditional proof about parentheses', 'LastEditorUserId': '9819', 'LastActivityDate': '2013-09-23T20:10:26.890', 'LastEditDate': '2013-09-23T20:10:26.890', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<formal-languages><context-free><induction>', 'CreationDate': '2013-09-23T16:09:40.090', 'Id': '14557''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>$L = \\{0^i1^j0^i1^j|i,j \\geq 0\\}$</p>\n\n<p>I've tried letting $s = 0^p1^p0^p1^p$. But not sure where to go from here. Help would be appreciated.</p>\n", 'ViewCount': '216', 'Title': 'Prove L to not context free using pumping lemma on language L', 'LastEditorUserId': '9819', 'LastActivityDate': '2013-09-24T14:51:29.913', 'LastEditDate': '2013-09-23T20:42:43.907', 'AnswerCount': '2', 'CommentCount': '9', 'AcceptedAnswerId': '14581', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '9819', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-09-23T17:11:30.067', 'Id': '14559''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '165', 'Title': 'How is non-ambuiguity different from determinism?', 'LastEditDate': '2013-09-26T09:15:33.267', 'AnswerCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10314', 'FavoriteCount': '1', 'Body': '<p>I am trying to understand what is meant by "deterministic" in expressions such as "deterministic context-free grammar". (There are more deterministic "things" in this field). I would appreciate an example more then the most elaborate explanation! If possible.</p>\n\n<p>My primary source of confusion is from not being able to tell how this property of a grammar is different from (non-)ambiguity.</p>\n\n<p>The closest I got to finding what it means is this quote from the paper by D. Knuth <em>On the Translation of Languages from Left to Right</em>:</p>\n\n<blockquote>\n  <p>Ginsburg and Greibach (1965) have defined the notion of a\n  deterministic language; we show in Section V that these are precisely\n  the languages for which there exists an L R ( k ) grammar</p>\n</blockquote>\n\n<p>which becomes circular as soon you get to the <code>Section V</code>, because there it says that what LR(k) parser can parse is the deterministic language...</p>\n\n<hr>\n\n<p>Below is an example that I could find to help me understand what "ambigous" means, please take a look:</p>\n\n<pre><code>onewartwoearewe\n</code></pre>\n\n<p>Which can be parsed as <code>one war two ear ewe</code> or <code>o new art woe are we</code> - if a grammar allows that (say it has all the words I just listed).</p>\n\n<p>What would I need to do to make this example language (non-)deterministic? (I could, for example, remove the word <code>o</code> from the grammar, to make the grammar not ambiguous).</p>\n\n<p>Is the above language deterministic?</p>\n\n<p><em>PS. The example is from the book Godel, Esher, Bach: Eternal Golden Braid.</em></p>\n\n<hr>\n\n<p>Let\'s say, we define the grammar for the example language like so:</p>\n\n<pre><code>S -&gt; A \'we\' | A \'ewe\'\nA -&gt; B | BA\nB -&gt; \'o\' | \'new\' | \'art\' | \'woe\' | \'are\' | \'one\' | \'war\' | \'two\' | \'ear\'\n</code></pre>\n\n<p>By the argument about having to parse the whole string, does this grammar make the language non-deterministic?</p>\n\n<hr>\n\n\n\n<pre><code>let explode s =\n  let rec exp i l =\n    if i &lt; 0 then l else exp (i - 1) (s.[i] :: l) in\n  exp (String.length s - 1) [];;\n\nlet rec woe_parser s =\n  match s with\n  | \'w\' :: \'e\' :: [] -&gt; true\n  | \'e\' :: \'w\' :: \'e\' :: [] -&gt; true\n  | \'o\' :: x -&gt; woe_parser x\n  | \'n\' :: \'e\' :: \'w\' :: x -&gt; woe_parser x\n  | \'a\' :: \'r\' :: \'t\' :: x -&gt; woe_parser x\n  | \'w\' :: \'o\' :: \'e\' :: x -&gt; woe_parser x\n  | \'a\' :: \'r\' :: \'e\' :: x -&gt; woe_parser x\n  (* this line will trigger an error, because it creates \n     ambiguous grammar *)\n  | \'o\' :: \'n\' :: \'e\' :: x -&gt; woe_parser x\n  | \'w\' :: \'a\' :: \'r\' :: x -&gt; woe_parser x\n  | \'t\' :: \'w\' :: \'o\' :: x -&gt; woe_parser x\n  | \'e\' :: \'a\' :: \'r\' :: x -&gt; woe_parser x\n  | _ -&gt; false;;\n\nwoe_parser (explode "onewartwoearewe");;\n- : bool = true\n</code></pre>\n\n<hr>\n\n<pre><code>| Label   | Pattern      |\n|---------+--------------|\n| rule-01 | S -&gt; A \'we\'  |\n| rule-02 | S -&gt; A \'ewe\' |\n| rule-03 | A -&gt; B       |\n| rule-04 | A -&gt; BA      |\n| rule-05 | B -&gt; \'o\'     |\n| rule-06 | B -&gt; \'new\'   |\n| rule-07 | B -&gt; \'art\'   |\n| rule-08 | B -&gt; \'woe\'   |\n| rule-09 | B -&gt; \'are\'   |\n| rule-10 | B -&gt; \'one\'   |\n| rule-11 | B -&gt; \'war\'   |\n| rule-12 | B -&gt; \'two\'   |\n| rule-13 | B -&gt; \'ear\'   |\n#+TBLFM: @2$1..@&gt;$1=\'(format "rule-%02d" (1- @#));L\n\nGenerating =onewartwoearewe=\n\nFirst way to generate:\n\n| Input             | Rule    | Product           |\n|-------------------+---------+-------------------|\n| \'\'                | rule-01 | A\'we\'             |\n| A\'we\'             | rule-04 | BA\'we\'            |\n| BA\'we\'            | rule-05 | \'o\'A\'we\'          |\n| \'o\'A\'we\'          | rule-04 | \'o\'BA\'we\'         |\n| \'o\'BA\'we\'         | rule-06 | \'onew\'A\'we\'       |\n| \'onew\'A\'we\'       | rule-04 | \'onew\'BA\'we\'      |\n| \'onew\'BA\'we\'      | rule-07 | \'onewart\'A\'we\'    |\n| \'onewart\'A\'we\'    | rule-04 | \'onewart\'BA\'we\'   |\n| \'onewart\'BA\'we\'   | rule-08 | \'onewartwoe\'A\'we\' |\n| \'onewartwoe\'A\'we\' | rule-03 | \'onewartwoe\'B\'we\' |\n| \'onewartwoe\'B\'we\' | rule-09 | \'onewartwoearewe\' |\n|-------------------+---------+-------------------|\n|                   |         | \'onewartwoearewe\' |\n\nSecond way to generate:\n\n| Input             | Rule    | Product           |\n|-------------------+---------+-------------------|\n| \'\'                | rule-02 | A\'ewe\'            |\n| A\'ewe\'            | rule-04 | BA\'ewe\'           |\n| BA\'ewe\'           | rule-10 | \'one\'A\'ewe\'       |\n| \'one\'A\'ewe\'       | rule-04 | \'one\'BA\'ewe\'      |\n| \'one\'BA\'ewe\'      | rule-11 | \'onewar\'A\'ewe\'    |\n| \'onewar\'A\'ewe\'    | rule-04 | \'onewar\'BA\'ewe\'   |\n| \'onewar\'BA\'ewe\'   | rule-12 | \'onewartwo\'A\'ewe\' |\n| \'onewartwo\'A\'ewe\' | rule-03 | \'onewartwo\'B\'ewe\' |\n| \'onewartwo\'B\'ewe\' | rule-13 | \'onewartwoearewe\' |\n|-------------------+---------+-------------------|\n|                   |         | \'onewartwoearewe\' |\n</code></pre>\n', 'Tags': '<context-free><formal-grammars><parsers>', 'LastEditorUserId': '10314', 'LastActivityDate': '2013-09-26T09:15:33.267', 'CommentCount': '14', 'AcceptedAnswerId': '14585', 'CreationDate': '2013-09-24T20:35:01.163', 'Id': '14583''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am having challenges (in two phases) with creating a CFG.</p>\n\n<ol>\n<li>Derive the CFG for the following language </li>\n<li>Show parse trees for the strings <em>cacab</em> and <em>aacabbb</em> obtained from the grammar designed above.</li>\n</ol>\n\n<p>I am getting a bit mixed up by the exercise especially because my CFG appears not to produce a parse tree.</p>\n\n<p>Here is the language:</p>\n\n<p>$$\n    L = \\{a^n (ca)^m b^{n+1} \\mid m \\ge 0 , n \\ge 0 \\}\n$$</p>\n\n<p>So far my grammar looks as follows:</p>\n\n<p>$$ \\begin{align}\n    S &amp;\\to Ab \\mid Bb \\mid Cb \\mid b \\\\\n    A &amp;\\to aA \\mid \\epsilon \\\\\n    B &amp;\\to caB \\mid \\epsilon \\\\\n    C &amp;\\to bC \\mid \\epsilon \\\\\n\\end{align} $$</p>\n', 'ViewCount': '158', 'Title': 'Derive a Context Free Grammar from a language', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-08T11:10:34.703', 'LastEditDate': '2013-10-08T11:10:34.703', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '14903', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10569', 'Tags': '<context-free><formal-grammars><tree-grammars>', 'CreationDate': '2013-10-08T09:15:40.340', 'Id': '14900''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Assume two languages $L_1$ and $L_2$, both of which are non-context-free.</p>\n\n<p>Let $L = L_1 \\cap L_2$. Could $L$ be context-free?</p>\n', 'ViewCount': '72', 'Title': 'Would it be possible that the intersection of two non-context-free languages is context-free?', 'LastEditorUserId': '683', 'LastActivityDate': '2013-10-09T22:27:45.240', 'LastEditDate': '2013-10-09T22:27:45.240', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10617', 'Tags': '<context-free>', 'CreationDate': '2013-10-09T22:21:47.280', 'Id': '14965''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p>Give a context free grammar for the following language over $\\Sigma = \\{0,1\\}$:<br>\n  $ L = L_1^* $\n  where $ L_1 = \\{0^n1^n : n \\geq 0\\}$.</p>\n</blockquote>\n\n<p>Not really sure where to start with this one. Any help is appreciated</p>\n', 'ViewCount': '156', 'Title': 'Context Free Grammar for $\\{0^n1^n \\mid n \\geq 0\\}^*$', 'LastEditorUserId': '69', 'LastActivityDate': '2013-10-11T17:28:48.707', 'LastEditDate': '2013-10-11T17:28:48.707', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10625', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2013-10-10T00:18:24.160', 'Id': '14968''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I am writing somthing about Ppumping Lemma. I know that the language $L = \\{ a^nb^n| n \u2265 0 \\}$ is context-free. But I don't understand how this language satisfies the conditions of pumping lemma (for context-free languages) ?</p>\n\n<p>if we pick the string $s = a^pb^p, |s| &gt; p , |vxy| &lt; p \\land |vy| &gt; 0$.</p>\n\n<p>it seems it will be out of the language when we pump it (pump up or down) or there is something I'm missing.</p>\n\n<p>Any explanation would help.</p>\n\n<p>Edit: I am applying pumping lemma to a^nb^n and it fails to stay in the language for all cases. So, why is it Context free?</p>\n", 'ViewCount': '128', 'Title': 'why does ${a^nb^n}$ fit the pumping lemma for context-free languages?', 'LastEditorUserId': '78', 'LastActivityDate': '2013-10-10T21:30:03.117', 'LastEditDate': '2013-10-10T21:30:03.117', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '14995', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10644', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-10-10T19:56:47.913', 'Id': '14994''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>For my homework assignment, I have to come up with a non-cfl that is pumpable. I came up with the following: \n$$ C = \\{a^n b^n c^n d^m \\mid n \\ge 1 \\text{ and } m \\ge 1 \\} $$</p>\n\n<p>I'm not sure whether this works. For the pumping lemma, let $p$ being the pumping length. If I generate a string with $p$ $a$'s, $b$'s, and $c$'s, and only one $d$, my only choice for $vxy$ would be $d$. Pumping this down to $v^0xy^0$ gives $a^p b^p c^p$, thus escaping the language. However, if I let $m$ be greater than or equal to zero, if I choose a string with no $d$'s, then I am forced to put either $a$'s, $b$'s or $c$'s in my $vxy$ string. </p>\n", 'ViewCount': '191', 'ClosedDate': '2013-11-11T13:49:22.987', 'Title': 'Non context free language that is pumpable?', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-13T11:23:16.300', 'LastEditDate': '2013-10-12T22:34:56.997', 'AnswerCount': '1', 'CommentCount': '7', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10686', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-10-12T22:13:12.923', 'Id': '15026''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>In class, it was alluded to that a language: \\begin{equation*}\n\\{s_0 w s_1 : s_0s_1\\in L_1, w\\in L_2 \\}\n\\end{equation*} would be context free, if $L_1$ and $L_2$ are context free.</p>\n\n<p>Intuitively, that doesn't make sense to me. I tried doing my own research and attempted a proof using the pumping lemma, but didn't get anywhere. Maybe I misunderstood? If that is correct, how could I prove it (or convince myself). </p>\n", 'ViewCount': '75', 'Title': 'Is $\\{s_0 w s_1 : s_0s_1\\in L_1, w\\in L_2 \\}$ context free if $L_1$ and $L_2$ are?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-10-14T22:13:02.620', 'LastEditDate': '2013-10-14T08:53:30.113', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '16054', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '10410', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2013-10-13T18:47:16.867', 'Id': '16048''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '47', 'Title': 'Deciding the class of certain languages', 'LastEditDate': '2013-10-14T20:20:11.933', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '4658', 'Body': "<p>I am preparing for my exam in Formal languages and Automata theory and I'm looking at some old exam questions right now. I need help with the following question: </p>\n\n<blockquote>\n  <p>For each of the following languages answer whether it is regular, context-free but not regular, or not context-free. A brief, informal explanation is sufficient.</p>\n  \n  <p>$$\n  L_3 = \\left\\{ w \\in \\{a,b,c,d\\}^* \\Bigg| \\begin{array}{l}\n      \\text{\\(w\\) does not have a substring \\(aba\\),} \\\\\n      \\text{each \\(a\\) in \\(w\\) is immediately followed by \\(b\\),} \\\\\n      \\text{and \\(\\#c(w)\\) is odd}\n    \\end{array} \\right\\}\n$$\n  $$ \\begin{align}\n  L_4 &amp;= \\{ a^ib^jc^ka^ib^l \\mid j \\gt l \\text{ and } i,l,k \\gt 0 \\} \\\\\n  L_5 &amp; \\text{ is the image of \\(L_4\\) under the homomorphism }\n  h:\\{a,b,c,d\\}^* \\to \\{0,1,2\\}^* \\\\ &amp; \\text{ such that }\n  h(a) = h(b) = 10 \\text{ and } h(c) = 210 \\text{ and } h(d) = \\epsilon \\\\\n  L_6 &amp; \\text{ is the image of \\(L_4\\) under the homomorphism }\n  h:\\{a,b,c,d\\}^* \\to \\{0,1,2\\}^* \\\\ &amp; \\text{ such that } \n  h(a) = h(b) = 210 \\text{ and } h(c) = h(d) = \\epsilon \\\\\n\\end{align} $$</p>\n</blockquote>\n\n<p>Here is my attempt:</p>\n\n<p>$L_3$ is regular. It's the intersection between 3 regular languages. Regular languages are closed under intersection, so the resulting language is regular. The language where $w$ does not have a substring $aba$ is just the complement of the language $aba$, regular languages are closed under complement, so the resulting language is regular. The language with an odd number of $c$ is regular. Hence the resulting language when taking the intersection between these languages is regular.</p>\n\n<p>$L_4$ is not context-free. When reading the first $a$'s we will push the $a$'s onto the stack. Then we will read the first $b$'s and push them onto the stack. Then we will read the $c$'s. When we now read a second group of $a$'s, we will not be able to compare the number with the first $a$'s, because $b$'s are on the top of the stack and if we pop them then we will not be able to compare the number $b$'s in the beginning and the end. Hence, $L_4$ is not context-free. </p>\n\n<p>$L_5$ is context-free but not regular. The language in question looks like this:\n$$ 10^{i+j} 210^k10^{i+l} \\text{ where } j \\gt l \\text{ and } i,l, k \\gt 0 $$\nA grammar can be constructed which generates at least one more $10$ in the beginning of the string than $10$ after $210$.</p>\n\n<p>$L_6$ is regular because it's given by the regular expression:\n$$ 210^{2i + j + l} \\text{ where } 2i+j+l \\text{ is any number } \\gt 0$$</p>\n\n<p>Is this correct? Note that informal explanations is sufficient in the answer and that no grammars has to be given.</p>\n", 'ClosedDate': '2013-10-30T10:12:35.357', 'Tags': '<formal-languages><context-free><automata>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-14T20:20:11.933', 'CommentCount': '1', 'AcceptedAnswerId': '16075', 'CreationDate': '2013-10-14T14:29:02.520', 'Id': '16074''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm not very comfortable with pumping lemma for context-free grammar. I understand the sufficient conditions that must hold but proving it gets me everytime. For example, I need to prove whether $L = \\{0^{n^3} \\mid n\\in\\mathbb{N}\\}$ is context-free or not. </p>\n\n<p>Based on my intuition, it won't be.  There is no pattern of $0$'s that can be recreated by a pushdown automata but alas I need to prove this. I know you start off assuming it is by being able to create a substring $uvxyz$ where $v$ and $y$ are raised to the $i$th power where $i \\ge 0$. I'm having trouble from there, any help in this and the understanding would be greatly appreciated.</p>\n", 'ViewCount': '169', 'Title': u'Prove that {0^{n^3} | n\u22650} is not context free', 'LastEditorUserId': '39', 'LastActivityDate': '2013-10-16T00:20:58.653', 'LastEditDate': '2013-10-15T23:41:01.340', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10773', 'Tags': '<context-free><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-10-15T22:45:46.927', 'Id': '16113''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Let $L$ be the language $\\{w: w$ has equal numbers of $a$'s, $b$'s and $c$'s$\\}$. Prove that $\\overline{L}$ is context free.</p>\n", 'ViewCount': '95', 'ClosedDate': '2013-10-28T08:02:29.550', 'Title': "The Complement of $\\{w: w$ has equal numbers of $a$'s, $b$'s and $c$'s$\\}$ is Context Free", 'LastActivityDate': '2013-10-22T13:58:20.703', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10285', 'Tags': '<context-free><language>', 'CreationDate': '2013-10-21T14:18:58.103', 'Id': '16291''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Show that every context-free language over a unary alphabet is regular.</p>\n', 'ViewCount': '162', 'Title': 'Unary Context Free Languages are Regular', 'LastActivityDate': '2013-10-21T16:34:43.723', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10285', 'Tags': '<regular-languages><context-free>', 'CreationDate': '2013-10-21T14:30:01.653', 'Id': '16293''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>The grammar is</p>\n\n<p>$$ S\\to aSb\\ |\\ bSa\\ |\\ SS\\ |\\ \\epsilon. $$</p>\n\n<p>I think this generates the set of strings with equal numbers of $a$'s and $b$'s based on examples I've done. Is this correct?</p>\n", 'ViewCount': '109', 'Title': 'What does this context-free grammar generate?', 'LastEditorUserId': '2887', 'LastActivityDate': '2013-10-25T15:44:59.537', 'LastEditDate': '2013-10-25T15:44:59.537', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '16425', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10713', 'Tags': '<context-free>', 'CreationDate': '2013-10-24T23:30:15.567', 'Id': '16415''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I think the Question is self sufficient. Is the syntax of C Language completely defined through Context Free Grammars or do we have Language Constructs which may require non-Context Free definitions in the course of parsing?</p>\n\n<p>An example of non CFL construct i thought was the declaration of variables before their use. But in Compilers(Aho Ullman Sethi), it is stated that the C Language does not distinguish between identifiers on the basis of their names. All the identifiers are tokenized as 'id' by the Lexical Analyzer. If C is not completely defined by CFGs, please can anyone give an example of Non CFL construct in C?</p>\n", 'ViewCount': '98', 'Title': 'Is the Syntax of C Language completely defined by CFGs?', 'LastEditorUserId': '39', 'LastActivityDate': '2014-03-24T14:18:04.997', 'LastEditDate': '2014-03-24T14:18:04.997', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '4', 'PostTypeId': '1', 'OwnerUserId': '10717', 'Tags': '<context-free><programming-languages><compilers><parsing><c>', 'CreationDate': '2013-10-25T17:05:06.557', 'Id': '16426''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Having the grammar <code>G = (V,P,S)</code> with variable <code>V = {S,A}</code> over the alphabet <code>{a,b}</code> with the rules:</p>\n\n<blockquote>\n  <p>S->aA </p>\n  \n  <p>A->Sbb|b</p>\n</blockquote>\n\n<p>How can i recognize which kind of grammar is this? I think that\'s not "regular expression" because in the second rule there are 2 letters (bb) instead of one, so i think it\'s a "context free" grammar. Am i right?</p>\n', 'ViewCount': '45', 'Title': 'Which grammar is this?', 'LastEditorUserId': '7955', 'LastActivityDate': '2013-10-26T14:03:25.130', 'LastEditDate': '2013-10-26T13:35:09.680', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16444', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7955', 'Tags': '<regular-languages><context-free><regular-expressions>', 'CreationDate': '2013-10-26T13:15:25.583', 'Id': '16443''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Construct a context-sensitive grammar that generates L:</p>\n\n<pre><code>L = {a^n b^m c^k|k&gt;n, k&gt;m}\n</code></pre>\n\n<p>I believe my productions should go along this lines:</p>\n\n<pre><code>S-&gt; ABCC\nA-&gt; a|aBC|BC\nB-&gt; b|bBC\nC-&gt; c|Cc\nCB-&gt;BC\n</code></pre>\n\n<p>The idea is to start with 2 c and keep always one more c, and then with C->c|Cc ad as much c as i want. \nHow can my production for C remember the numbers of m and n.</p>\n', 'ViewCount': '56', 'Title': 'Grammar generating specific language', 'LastEditorUserId': '7955', 'LastActivityDate': '2013-12-27T15:40:00.330', 'LastEditDate': '2013-10-26T17:47:10.667', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '7955', 'Tags': '<context-free><formal-grammars><context-sensitive>', 'CreationDate': '2013-10-26T17:09:58.687', 'Id': '16448''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let L be the language of all arithmetic expressions written in Reverse Polish Notation, containing only binary operators. $\\Sigma(L) = \\{n, o\\}$, n := number, o := operator.</p>\n\n<p>Is there an LL grammar G so that L(G) = L?</p>\n', 'ViewCount': '98', 'Title': 'Does Reverse Polish Notation have an LL grammar?', 'LastEditorUserId': '11070', 'LastActivityDate': '2013-10-30T18:06:51.060', 'LastEditDate': '2013-10-30T16:10:54.707', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '16589', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11070', 'Tags': '<context-free>', 'CreationDate': '2013-10-30T11:06:49.523', 'Id': '16575''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>The question is to design a CFG for the language of words that have as many c's as the difference of numbers of a's and b's, that is</p>\n\n<p>$\\qquad\\displaystyle L = \\{(a^l)(b^m)(c^n) \\mid l, m \\in \\mathbb{N}; n = |l-m|\\}$.</p>\n\n<p>I have so far go to create the cfg for $(a^l)(b^m)$ but don't know how to do the one for $(c^n)$. It looks complicated as to find the value of n, we need to take the abs value for the difference between l and m. Can someone help?</p>\n\n<p>And, here is the cfg I got so far for $(a^l)(b^m)$.</p>\n\n<p>$S \\to aS \\mid bT|\\epsilon $</p>\n\n<p>$T \\to bT \\mid \\epsilon$</p>\n\n<p>I hope this is correct.</p>\n", 'ViewCount': '127', 'Title': "Designing a CFG that produces as many c's as the difference of numbers of a's and b's", 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-02T10:03:20.963', 'LastEditDate': '2013-11-02T09:57:25.863', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '16624', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11110', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-10-31T22:27:49.183', 'Id': '16608''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I've been trying to get a CFG for the language of all words with unequal numbers of a and b, i.e.</p>\n\n<p>$\\qquad \\displaystyle \\{u \\in \\{a, b\\}^* \\mid \\text{number of occurrences of $a$ and $b$ in $u$ are unequal} \\}$,</p>\n\n<p>but it seems that I keep getting specific cases instead of the general case.</p>\n\n<p>Here are some that I have tried:</p>\n\n<p>(S being the start Variable)</p>\n\n<pre><code>S -&gt; A | a | b\nA -&gt; aV | bT\nV -&gt; aV | bL\nL -&gt; aV\nT -&gt; bT | aM\nM -&gt; aT\n</code></pre>\n\n<p>This one's problem is that you can't create 2 of the same string if it's the lesser amount of alphabet.</p>\n\n<p>So I've tried</p>\n\n<pre><code>S-&gt; A | B\nA -&gt; aV | a\nV -&gt; aV | aVb | bVa\nB -&gt; bT | b\nT -&gt; bT | aTb | bTa\n</code></pre>\n\n<p>This one also has problem because if you have a you need to have b on the opposite end.</p>\n\n<p>Additionally, I know this is one of the huge problem in my process is that you start with 'a' or 'b' and use that as a flag for if there is more 'a' or there is more 'b'... </p>\n\n<p>I've been trying to think the way where you can input an alphabet (i.e <code>S -&gt; aV | bV</code>) so that I can start with any variable and I use cases or condition to go to different variable, but I end up with infinite variable situation.</p>\n", 'ViewCount': '241', 'Title': 'Context-free grammar for language with unequal numbers of a and b', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-02T09:52:27.167', 'LastEditDate': '2013-11-02T09:52:27.167', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '6695', 'Tags': '<formal-languages><context-free><automata>', 'CreationDate': '2013-11-02T06:30:01.203', 'Id': '16642''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In the <a href="https://class.coursera.org/compilers/lecture/index" rel="nofollow">compiler course by Alex Aiken on Coursera</a>, more specifically lecture <a href="https://class.coursera.org/compilers/lecture/20" rel="nofollow">05-02 Context Free Grammars</a>,  the professor says that CFGs give answers of the type yes/no, i.e. whether the given string of tokens is valid or not. He adds that it is also desirable to know <em>how</em> a particular string of tokens is in the language; for this purpose he introduces parse trees.</p>\n\n<p>Why is the "how" part important?      </p>\n', 'ViewCount': '328', 'Title': "What information do we get from a compiler's parse tree?", 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-03T09:22:35.317', 'LastEditDate': '2013-11-02T15:49:25.097', 'AnswerCount': '4', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '6466', 'Tags': '<context-free><compilers><parsers>', 'CreationDate': '2013-11-02T10:34:57.683', 'Id': '16647''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>In my homework we're given the following problem:\nDetermine whether the context-free language described by the following grammar is regular, showing all the reasoning steps:</p>\n\n<p>S -> T T | U</p>\n\n<p>T -> 0 T | T 0 | #</p>\n\n<p>U -> 0 U 0 0 | #.</p>\n\n<p>My teacher says the pound sign (#) is just a delimiter that is in the alphabet and not epsilon.</p>\n\n<p>I understand the order of operations here is to go from CFG --> CFL --> RL (if possible).<br>\nMy problem is that I don't know how to provide a CFL given a CFG, and further, determine whether a CFL is regular.</p>\n\n<p>So to ask the questions: </p>\n\n<p>how do you provide a context-free language (CFL) given a context-free grammar (CFG)?</p>\n\n<p>how do you determine if a context-free language (CFL) is also a regular language (RL)?</p>\n", 'ViewCount': '194', 'Title': 'Determining whether a context-free language (CFL) described by a given grammar is regular (RL)', 'LastActivityDate': '2013-11-03T10:46:39.410', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11142', 'Tags': '<regular-languages><context-free>', 'CreationDate': '2013-11-03T07:35:17.580', 'Id': '16666''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I am stuck and having a hard time with this question. I want to construct a CFG for the language $$L = \\{{a^lb^mc^n | l,m\\in N, n=|l-m|\\}}$$\nI know that the language consists of strings where:\n<br>1. number of a's = number of b's, so c=0\n<br>2. number of a's more than number of b's, c=l-m\n<br>3. number of a's less than number of b's, c=-(l-m)\n<br>\nI started with\n$$S-&gt;ab$$\n$$S-&gt;aSb$$\nThis generates all of case one, where number of a's = number of b's and c=0. I know that I could increment a's and c's by having aSc but I cant put that in the second line because it could generate a(aSc)b which is not in the language. </p>\n", 'ViewCount': '288', 'ClosedDate': '2013-11-03T22:53:27.903', 'Title': 'Constructing Context Free Grammar', 'LastActivityDate': '2013-11-03T20:53:04.023', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16679', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11155', 'Tags': '<formal-languages><computability><context-free>', 'CreationDate': '2013-11-03T19:19:09.937', 'Id': '16678''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I want to be able to describe the idea behind the pushdown automaton (no tables or diagrams). </p>\n\n<p>So, I already know that $L = \\{ ww \\mid w \\text{ in } (0,1)^*\\}$ is not context free. Since CFL are not closed under complement its complement $L'$ is a CFL. \nI also read somewhere that any odd word is part of $L'$ (what about even length words?). So a pushdown automaton description could be: read one letter and put into stack, then read next letter and remove previous letter from stack. Do this until the end. If one letter is left in the stack at the end then word is odd length thus accept, else reject?</p>\n", 'ViewCount': '423', 'Title': 'Pushdown automaton for complement of $L = \\{ ww \\mid w \\text{ in } (0,1)^*\\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-08T22:45:29.333', 'LastEditDate': '2013-11-08T11:45:37.150', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '16755', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '10713', 'Tags': '<formal-languages><context-free><automata><pushdown-automata>', 'CreationDate': '2013-11-05T23:35:45.853', 'Id': '16753''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have the following grammar G:\n$$\n\\begin{align*}\n&amp;S \\to aB|bA \\\\\n&amp;A \\to a|aS|bAA \\\\\n&amp;B \\to b|bS|aBB\n\\end{align*}\n$$</p>\n\n<p>I am going to prove that this language L(G) consists of words with the same number of a's and b's by strong induction.</p>\n\n<p><strong>Inductive hypothesis</strong>: $S$ produces $m$ $a$'s and $m$ $b$'s, $A$ produces $m+1$ $a$'s and $m$ $b$'s, $B$ produces $m$ $a$'s and $m+1$ $b$'s for some integer $m$. </p>\n\n<p><strong>Base</strong>: The smallest string produced by $S$ is $ab$ or $ba$. The smallest string produced by $A$ and $B$ is $a$ and $b$ respectively. All three satisfy the IH. </p>\n\n<p><strong>Induction</strong>: Assume the inductive hypothesis is satisfied for all strings of length $k$ or less. </p>\n\n<p>For strings of length $k+1$:</p>\n\n<p><strong>(1)</strong>. $A\\to aS$; then $S$ inductively derived a string of length $k-1$ with same number of $a$'s as $b$'s. Since $A$ is initiated by $S\\to bA$, we concatenate that $b$ plus the $a$ in $aS$ and we get a string of length $k+1$ with same number of $a$'s as $b$'s.</p>\n\n<p><strong>(2)</strong>. $A\\to bAA$; then each $A$ on the right hand side has one more $a$ than $b$. Since $A$ is initiated by $S\\to bA$, we concatenate that $b$ plus the $b$ in $bAA$ and we get a string of length $k+1$ with the same number of $a$'s as $b$'s.  </p>\n\n<p>Can I continue for $B\\to bS$ and $B\\to aBB$? Am I totally wrong here? </p>\n", 'ViewCount': '104', 'Title': "Is my proof for a context free language correct? Same number of a's as b's", 'LastEditorUserId': '11155', 'LastActivityDate': '2013-11-07T05:05:43.043', 'LastEditDate': '2013-11-07T05:05:43.043', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11155', 'Tags': '<formal-languages><context-free><formal-grammars><proof-techniques>', 'CreationDate': '2013-11-07T02:26:03.960', 'Id': '16787''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>My task is to convert the following grammar to CNF: $S \\to SS \\mid (S) \\mid \\lambda$</p>\n\n<p>after removing lambda productions: $S\\to SS,  S\\to (S),  S\\to(), S\\to S$</p>\n\n<p>after removing unit productions: $S\\to SS, S\\to (S), S\\to()$</p>\n\n<p>I got upto this point. Do not know how this grammar will be in CNF coz I am not sure if using () makes the grammar illegal. Need help how to proceed and make this grammar in CNF?</p>\n', 'ViewCount': '66', 'Title': 'conversion of this grammar to CNF', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-09T15:22:10.437', 'LastEditDate': '2013-11-09T15:22:10.437', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11169', 'Tags': '<context-free><formal-grammars><normal-forms>', 'CreationDate': '2013-11-09T12:03:41.860', 'Id': '16843''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '66', 'Title': 'Do these languages both have DPDA?', 'LastEditDate': '2013-11-09T15:24:56.840', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '10030', 'Body': "<p>We have these languages:\n$$L_1 = \\{a^nb^na^mb^m \\ | n \\ge 0, m \\ge 1\\}$$\n$$L_2 = \\{a^nb^na^mb^{2m} \\ | n \\ge 0, m \\ge 1\\}$$</p>\n\n<p>are both these languages NCFG?</p>\n\n<p>I guess that both of them are NCFG because of $n \\ge 0$ ,at start we can't distinguish whether it is $a$ for the first part or the second part and hence we should act non deterministic.</p>\n", 'ClosedDate': '2013-11-11T13:54:24.870', 'Tags': '<formal-languages><context-free><automata><nondeterminism>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-09T15:24:56.840', 'CommentCount': '5', 'AcceptedAnswerId': '16849', 'CreationDate': '2013-11-09T12:50:19.650', 'Id': '16846''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>I missed a question about a CFG on an assignment, but the grader wouldn't explain what was wrong with my answer and instead provided me the answer from the book.</p>\n\n<p>Here is the language: </p>\n\n<p>$\\qquad\\displaystyle L = \\{a^n b^m c^k : n = m \\lor m \\neq k\\}$</p>\n\n<p>And my CFG. </p>\n\n<pre><code>S \u2192 AB|CD|CE\nA \u2192 aAb|\u03bb\nB \u2192 Bc|\u03bb\nC \u2192 aC|\u03bb\nD \u2192 bDc|Dc|c\nE \u2192 bEc|bE|b\n</code></pre>\n\n<p>Can somebody explain why this grammar doesn't work for the given language?</p>\n", 'ViewCount': '55', 'Title': 'Does this CFG produce this language?', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-09T20:33:53.077', 'LastEditDate': '2013-11-09T19:58:29.333', 'AnswerCount': '0', 'CommentCount': '6', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11285', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-11-09T19:08:29.113', 'Id': '17853''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm trying to show that $L=\\left\\{w^rww^r:w \\in \\{0,1\\}^*\\right\\}$ is not context free using the pumping lemma.</p>\n\n<p>I thought picking the string, $0^p0^p0^p$, would be a good candidate for this, but someone told me I might want to consider another string. Why is this? Any way in which I divide the string and then pump the string results in the balances between the $w^r$on either side of the string being thrown off, no?</p>\n", 'ViewCount': '58', 'Title': 'Can the String, $0^p 0^p 0^p$, be Used with the Pumping Lemma to Show that $w^r w w^r$ is Not Context Free?', 'LastEditorUserId': '9950', 'LastActivityDate': '2013-11-10T23:51:11.160', 'LastEditDate': '2013-11-10T23:16:31.673', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '17894', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7151', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-11-10T22:03:17.933', 'Id': '17887''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is there an algorithm/systematic procedure to test whether a language is context-free?</p>\n\n<p>In other words, given a language specified in algebraic form (think of something like $L=\\{a^n b^n a^n : n \\in \\mathbb{N}\\}$), test whether the language is context-free or not.  Imagine we are writing a web service to help students with all their homeworks; you specify the language, and the web service outputs "context-free" or "not context-free".  Is there any good approach to automating this?</p>\n\n<p>There are of course techniques for manual proof, such as the pumping lemma, Ogden\'s lemma, Parikh\'s lemma, the Interchange lemma, and <a href="http://cs.stackexchange.com/q/265/755">more here</a>.  However, they each require manual insight at some point, so it\'s not clear how to turn any of them into something algorithmic.</p>\n\n<p>I see <a href="http://cs.stackexchange.com/a/282/755">Kaveh has written elsewhere</a> that the set of non-context-free languages is not recursively enumerable, so it seems there is no hope for any algorithm to work on all possible languages.  Therefore, I suppose the web service would need to be able to output "context-free", "not context-free", or "I can\'t tell".  Is there any algorithm that would often be able to provide an answer other than "I can\'t tell", on many of the languages one is likely to see in textbooks?  How would you build such a web service?</p>\n\n<hr>\n\n<p>To make this question well-posed, we need to decide how the user will specify  the language.  I\'m open to suggestions, but I\'m thinking something like this:</p>\n\n<p>$$L = \\{E : S\\}$$</p>\n\n<p>where $E$ is a word-expressions and $S$ is a system of linear inequalities over the length-variables, with the following definitions:</p>\n\n<ul>\n<li><p>Each of $x,y,z,\\dots$ is a word-expression.  (These represent variables that can hold any word in $\\Sigma^*$.)</p></li>\n<li><p>Each of $a,b,c,\\dots$ is a word-expression.  (Implicitly, $\\Sigma=\\{a,b,c,\\dots\\}$, so $a,b,c,\\dots$ represent a single symbol in the underlying alphabet.)</p></li>\n<li><p>Each of $a^\\eta,b^\\eta,c^\\eta,\\dots$ is a word-expression, if $\\eta$ is a length-variable.</p></li>\n<li><p>The concatenation of word-expressions is a word-expression.</p></li>\n<li><p>Each of $m,n,p,q,\\dots$ is a length-variable.  (These represent variables that can hold any natural number.)</p></li>\n<li><p>Each of $|x|,|y|,|z|,\\dots$ is a length-variable.  (These represent the length of a corresponding word.)</p></li>\n</ul>\n\n<p>This seems broad enough to handle many of the cases we see in textbook exercises.  Of course, you can substitute any other textual method of specifying a language in algebraic form, if you like.</p>\n', 'ViewCount': '119', 'Title': 'Algorithm to test whether a language is context-free', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-12T14:39:17.787', 'LastEditDate': '2013-11-12T14:39:17.787', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '9', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<algorithms><formal-languages><context-free><decision-problem>', 'CreationDate': '2013-11-11T19:42:12.637', 'FavoriteCount': '3', 'Id': '17921''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have seen this question: <a href="http://cs.stackexchange.com/questions/2713/are-regular-expressions-lrk">Are regular expressions $LR(k)$?</a> and my question is slightly related.</p>\n\n<p>Suppose I have a regular expression:\nRE=(a*a*)?(a*a*)</p>\n\n<p>and I convert it to a grammar:\nG ::= A B\nA ::= C | (empty)\nC ::= D D\nD ::= aD | empty\nB ::= D D</p>\n\n<p>Can an LALR(1) parser such as Bison generate matches such that I can perform actions such as recording captures, etc... If so, is the cost linear in the size of the input?</p>\n\n<p>If not, is the lower bound on this operation the cost of simulating an NFA generated by the regular expression? I know that DFAs can\'t perform sub-match captures.</p>\n', 'ViewCount': '21', 'Title': 'Can regular expression captures be matched by a CFG being simulated by an $LR(k)$ parser?', 'LastActivityDate': '2013-11-14T05:00:11.847', 'AnswerCount': '0', 'CommentCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '5331', 'Tags': '<regular-languages><context-free><regular-expressions><parsers>', 'CreationDate': '2013-11-14T05:00:11.847', 'Id': '18005''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm writing a context-free grammar that I hope will be in Chomsky Normal Form, and I have two questions:</p>\n\n<ol>\n<li><p>Can I use a single variable (a non-terminal) on the left-hand side of multiple rules?</p></li>\n<li><p>Can I use a single variable (a non-terminal) twice on the right-hand side of a single rule?</p></li>\n</ol>\n\n<p>For instance, is the following grammar properly in Chomsky Normal Form?  Is it OK that I have two rules with $S$ on the left-hand side?  Is it OK that I have $X$ twice on the right-hand side of the second rule?</p>\n\n<p>$$S_0 \\to S$$\n$$S \\to XX$$\n$$S \\to XZ$$\n$$\\vdots$$</p>\n", 'ViewCount': '105', 'Title': 'Rules regarding Chomsky Normal Form (CNF) grammars', 'LastEditorUserId': '755', 'LastActivityDate': '2013-11-16T06:50:35.410', 'LastEditDate': '2013-11-15T22:18:02.883', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '18064', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '2778', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2013-11-15T16:15:10.703', 'Id': '18052''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '186', 'Title': 'CFG for $\\{a^ib^jc^k \\mid i \\neq j+k\\}$', 'LastEditDate': '2013-11-18T21:33:21.273', 'AnswerCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11155', 'FavoriteCount': '1', 'Body': "<p>I am trying to design a context-free grammar for the language $L = \\{a^ib^jc^k \\mid i\\neq j+k\\}$ over the alphabet $\\Sigma = \\{a,b,c\\}$.</p>\n\n<p>I know that I can split this up into the union of two cfg's $S_1$ and $S_2$,\n<br>where $S_1$ is the case where $\\#_a \\lt \\#_b + \\#_c$, \n<br>and $S_2$ is the case where $\\#_a \\gt \\#_b + \\#_c$.</p>\n\n<p>I keep producing the grammar that generates this language <strong>but</strong> not in the correct order, that is I am having a hard time keeping the $a$'s on the left, $b$'s in the middle, and $c$'s to the right. Is this even context free?</p>\n", 'Tags': '<formal-languages><context-free><formal-grammars>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-11-18T21:40:01.583', 'CommentCount': '1', 'AcceptedAnswerId': '18129', 'CreationDate': '2013-11-18T20:40:51.630', 'Id': '18126''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Im in a functional languages computer science class and I have a question on the use of the kleene star and the Union in a context free grammar.</p>\n\n<p>for the kleene star I have an idea of how I might do it.\n    for example </p>\n\n<pre><code> {0^n 1^n | n in the set of natural numbers} \n</code></pre>\n\n<p>I think it would look something like this.</p>\n\n<pre><code> S-&gt; 0S1 | A\n A-&gt; S | lambda\n</code></pre>\n\n<p>where lambda would mark closing or ending the string. Is this right?</p>\n\n<p>as for how the union would I dont understand at all how it would work. wer were given an example that looks like this </p>\n\n<pre><code> {0^n1^n | n in the set of natural nubmer} U \n {0^n1^2n | n in the set of natural numbers}\n</code></pre>\n\n<p>I know how I would make a context free grammar for either of these alone but I dont know how the union comes into play with this.</p>\n', 'ViewCount': '152', 'Title': 'How does the kleene star and union work in a context free grammar?', 'LastActivityDate': '2013-11-19T14:32:29.540', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11470', 'Tags': '<context-free>', 'CreationDate': '2013-11-19T04:39:33.747', 'Id': '18139''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>When using the pumping lemma for a context free language, if I write any w in L as uvxyz, is my goal to show that a string will not pump for ANY arrangement of uvxyz that I choose, or is my goal to show that THERE EXISTS some arrangement of uvxyz over w that will pump.</p>\n', 'ViewCount': '56', 'Title': 'Using pumping lemma to prove a language is not context free', 'LastActivityDate': '2013-11-21T20:07:47.857', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '11540', 'Tags': '<context-free><pumping-lemma><language>', 'CreationDate': '2013-11-21T18:30:02.600', 'Id': '18231''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<pre><code>Let L = { x in {a,b}* | the number of a are less or equal the number of b^2}\n</code></pre>\n\n<p>I know this is a NOT context free language. \nHow can i choose the correct z=uvwxy and try to apply the Pumping Lemma?</p>\n\n<p>I think that z=(a^n b)^n it's wrong, cause it's part of the language only if n=0,1 </p>\n\n<pre><code>z=(ab^n)^n \n</code></pre>\n\n<p>should be fine.</p>\n\n<p>Then the relatives substring vwx should be:</p>\n\n<pre><code>vwx=ab\nvwx=b^k\nvwx=ab^k\n</code></pre>\n\n<p>Where am I going wrong? How can I proceed?</p>\n", 'ViewCount': '50', 'Title': 'Context-free Language: deciding z string', 'LastEditorUserId': '7955', 'LastActivityDate': '2013-12-25T06:33:46.573', 'LastEditDate': '2013-11-25T05:35:25.843', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '7955', 'Tags': '<context-free><pumping-lemma>', 'CreationDate': '2013-11-25T03:17:21.403', 'Id': '18315''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Im having some problems with a qeuestion regarding converting a context free grammar to chomsky normal form.</p>\n\n<p>I have \n        S -> abC | babS | de\n        C -> aCa |b</p>\n\n<p>I know what to do with the case of aCa and de and b but im not sure how to handle the abC case or the babS case. I believe that chomsky normal form is supposed to have outputs of only 2 characters. so with something like aCa you make and output aa and have A->a and create another nonterminal? X -> SA but I dont know how im supposed to handle the abC case or the babS case.</p>\n', 'ViewCount': '48', 'Title': 'Converting to Chomsky normal form', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-24T10:37:55.103', 'LastEditDate': '2014-03-24T10:37:55.103', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11470', 'Tags': '<context-free><formal-grammars><normal-forms>', 'CreationDate': '2013-11-25T03:37:11.367', 'FavoriteCount': '1', 'Id': '18316''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Given the language $L_1 = \\{a^i b^j c^k \\mid i \\neq j \\vee i \\neq k\\}$, I need to determine whether it is context-free by using the pumping lemma. I must do the same for the complement of this language.</p>\n\n<p>I started off by breaking $L_1$ into two parts, $L_1 = L_2 \\cup L_3$, where $L_2 = \\{a^i b^j c^k \\mid i \\neq j\\}$ and $L_3 = \\{a^i b^j c^k \\mid i \\neq k\\}$, and I proved that both the languages are not context free, hence the union which is $L_1$ is also not context-free. Is this approach of mine correct? </p>\n\n<p>Also would the complement of $L_1$ be $L_1' = \\{a^i b^j c^k \\mid i = j \\wedge i = k\\}$ and break down $L_1'$ into two parts $L_2'$ and $L_3'$ and by the closed under intersection rule for context-free languages we know $L_1' = L_2' \\cap L_3'$ is not context free. </p>\n\n<p>This how I approached both the parts, and I would like to know if my approach is correct or wrong. Help would be really appreciated.</p>\n", 'ViewCount': '104', 'Title': 'Context free language and the complement of it', 'LastEditorUserId': '69', 'LastActivityDate': '2013-11-26T00:20:07.597', 'LastEditDate': '2013-11-25T22:49:06.590', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '18341', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11110', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2013-11-25T22:30:27.523', 'Id': '18337''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>Suppose that G is a context-free grammar. How can I show that \u201cIs L(G) regular?\u201d is undecidable. Also, prove that L is always context-free but is regular if and only if L(G) = \u03a3\u2217. </p>\n\n<p>This is what I have so far</p>\n\n<p>Let N be some language that is known to be context-free but not regular (for example, {a^nb^n | n \u2265 0}). Consider the language L = N#\u03a3\u2217 \u222a \u03a3\u2217#L(G), where # is some symbol that is not in L(G) or N. </p>\n\n<p>Where to? I just know my prof is going to put this on my exam :s.</p>\n', 'ViewCount': '159', 'Title': u'Showing Context Free Grammars that are regular if and only if L(G) = \u03a3\u2217.', 'LastActivityDate': '2013-11-26T17:32:23.990', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11632', 'Tags': '<regular-languages><context-free>', 'CreationDate': '2013-11-26T09:55:58.867', 'Id': '18370''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have this nondeterministic pda:\n$$\\Sigma=  \\{a,b,c\\}$$</p>\n\n<p>and </p>\n\n<p>$$\nL=\\{\\omega\\  \\epsilon\\ \\Sigma^*\\ |\\ \\omega\\ = \\alpha\\beta\\beta^R\\gamma\\ and\\ \\alpha,\\beta,\\gamma\\ \\epsilon\\ \\Sigma^*\\ and\\ |\\beta|\\ &gt;3 \\}\n$$</p>\n\n<p>So once i have create the NPDA, i have to calculate the probability of accepting a correct word, i know it depends on the size of $\\alpha$ and the "free" jumps ($\\varepsilon,\\varepsilon-&gt;\\varepsilon$).\nMy problem is that i can\'t find the exact function of probability can someone explain me how to do it?</p>\n\n<p>Thanks.</p>\n', 'ViewCount': '90', 'Title': 'help with the probability of acceptance of a Nondeterministic Pushdown automata', 'LastActivityDate': '2013-11-29T22:57:27.457', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '18468', 'Score': '-2', 'PostTypeId': '1', 'OwnerUserId': '11695', 'Tags': '<context-free><probability-theory><pushdown-automata><nondeterminism>', 'CreationDate': '2013-11-29T11:15:00.567', 'Id': '18464''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>So I've been given the following language on an assignment.  It is the only question I have left of 10, and I've been racking my brains out trying to solve it for hours.  </p>\n\n<p>$$L=\\{w:w\\in(a+b+c)^*, n_a(w) &gt; n_b(w)&gt;n_c(w)\\}$$</p>\n\n<p>where $n_x(w)$ represents the number of character $x$ found in $w$.  The problem statement is: <strong>prove or disprove that the language is context-free</strong>.  Context-free grammars or pushdown automata are acceptable proofs.  Use pumping lemma to disprove.</p>\n\n<p>I've extensively explored both possibilities and I'm fairly certain that it is context-free.  </p>\n\n<p>The approach I've taken in finding a context-free grammar for the language involves using rules which preserve the constraint $n_a(w) &gt; n_b(w) &gt; n_c(w)$ (ie. whenever a $b$ is added, add an $a$; whenever a $c$ is added, add a $b$).  Then, I've attempted to enforce that there are at least two $a$s and at least one $b$ (base case for the constraint).</p>\n\n<p>The grammar I've used is:</p>\n\n<p>$S\\implies XaXaXbX | XaXbXaX | XbXaXaX$</p>\n\n<p>$X \\implies XX| A | B | C | \\lambda$</p>\n\n<p>$A \\implies a$</p>\n\n<p>$B \\implies ab | ba$</p>\n\n<p>$C \\implies abc | acb | bac | bca | cab | cba$</p>\n\n<p>(where $\\lambda$ is the empty string)</p>\n\n<p>My grammar fails for strings like $cccaaaaabbbb$.</p>\n\n<p>I'm confused as to where to go from here.  </p>\n\n<p><strong>I would really like a push in the right direction, not an answer.</strong>\n Any help is greatly appreciated!</p>\n", 'ViewCount': '87', 'Title': 'Is $\\{w:w\\in(a+b+c)^*, n_a(w) > n_b(w)>n_c(w)\\}$ context-free?', 'LastEditorUserId': '9612', 'LastActivityDate': '2014-01-29T22:37:10.603', 'LastEditDate': '2013-12-30T11:42:33.360', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '10400', 'Tags': '<context-free><formal-grammars><pumping-lemma><pushdown-automata>', 'CreationDate': '2013-11-29T17:48:42.330', 'FavoriteCount': '1', 'Id': '18470''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>How would I find an LL(1) grammar for the language:</p>\n\n<blockquote>\n  <p>L=a<sup>m</sup> b<sup>n</sup> c<sup>m+n</sup></p>\n</blockquote>\n\n<p>Where m and n are elements of the naturals? My context-free grammar is:</p>\n\n<blockquote>\n  <p>S &rarr; aSc | B</p>\n  \n  <p>B &rarr; bBc | A</p>\n  \n  <p>A &rarr; bc</p>\n</blockquote>\n\n<p>Is my grammar LL(1) parsable?</p>\n', 'ViewCount': '99', 'ClosedDate': '2014-02-02T11:19:15.587', 'Title': 'Finding an LL(1) grammar?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-30T16:06:25.357', 'LastEditDate': '2013-12-02T12:09:50.653', 'AnswerCount': '3', 'CommentCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11752', 'Tags': '<formal-languages><context-free><formal-grammars><parsers>', 'CreationDate': '2013-12-02T03:37:45.623', 'Id': '18523''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>There are <a href="http://cs.stackexchange.com/q/265/755">many techniques</a> to prove that a language is <em>not</em> context-free, but how do I prove that a language <em>is</em> context-free?</p>\n\n<p>What techniques are there to prove this?  Obviously, one way is to exhibit a context-free grammar for the language.  Are there any systematic techniques to find a context-free grammar for a given language?</p>\n\n<p>For regular languages, there <em>are</em> <a href="http://cs.stackexchange.com/q/1331/755">systematic ways</a> to derive a regular grammar / finite-state automaton: for instance, the Myhill-Nerode theorem provides one way.  Is there any corresponding technique for context-free languages?</p>\n\n<hr>\n\n<p>My motivation here is to (hopefully) build up a reference question that contains a list of techniques that are often helpful, when trying to prove that a given language is context-free.  Since we have many questions here that are special cases of this, it would be nice if we could document the general approach or general techniques that one can use when facing this sort of problem.</p>\n', 'ViewCount': '156', 'Title': 'How to prove that a language is context-free?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-18T19:22:09.170', 'LastEditDate': '2014-01-17T22:55:11.557', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<formal-languages><context-free><formal-grammars><proof-techniques><reference-question>', 'CreationDate': '2013-12-02T04:18:45.460', 'FavoriteCount': '1', 'Id': '18524''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>So I recently had a problem where I had to create a regular language. After consulting my professor on my solution he told me it was close to correct but to check my definition of a regular language. I am somewhat lost on why my solution is not regular?</p>\n\n<p><img src="http://i.stack.imgur.com/CTosd.png" alt="solution"></p>\n\n<p>From my understanding it meets the requirements of being a right regular language since there is only one non-terminal on the right side of the expression and the non-terminal is the rightmost symbol on the right side of the expression. Are pipe symbols not allowed?</p>\n', 'ViewCount': '79', 'Title': 'Why is this not a regular language', 'LastEditorUserId': '11820', 'LastActivityDate': '2013-12-05T10:04:41.513', 'LastEditDate': '2013-12-05T01:45:19.807', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '18627', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11820', 'Tags': '<regular-languages><context-free><automata>', 'CreationDate': '2013-12-05T01:09:19.733', 'Id': '18624''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Given the following:</p>\n\n<p>$$\\{ w\\#x \\mid w^R \\text{ is a substring of $x$, with $x$ and $w \\in \\Sigma^*$} \\}$$</p>\n\n<p>What does $w\\#x$ denote?</p>\n', 'ViewCount': '115', 'Title': 'What does the symbol # mean when it comes to languages', 'LastEditorUserId': '9612', 'LastActivityDate': '2013-12-07T10:37:19.277', 'LastEditDate': '2013-12-07T10:37:19.277', 'AnswerCount': '2', 'CommentCount': '0', 'AcceptedAnswerId': '18631', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11616', 'Tags': '<formal-languages><terminology><context-free><automata>', 'CreationDate': '2013-12-05T06:38:57.007', 'Id': '18630''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>The intersection of a context free language L with a regular language M, is said  to be always context free. I understood the cross product construction proof, but I still don't get why it is context free but not regular.</p>\n\n<p>The language generated by such an intersection has strings that are accepted both by a PDA <em>and</em> a DFA. Since it is accepted by a DFA, shouldn't it be a regular language? Plus, if the intersection is regular, it also implies context free, since all regular languages are also context free.</p>\n\n<p>Can someone explain to me why the language obtained by such an intersection is not regular?</p>\n\n<p>Thanks.</p>\n", 'ViewCount': '273', 'Title': 'Intersection of context free with regular languages', 'LastActivityDate': '2013-12-05T15:20:51.903', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '18645', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11837', 'Tags': '<context-free><finite-automata><formal-grammars>', 'CreationDate': '2013-12-05T14:24:39.063', 'FavoriteCount': '2', 'Id': '18642''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In my opinion it is not since if we want to know the inequality of $w_1$ and $w_2$ we must be aware of their equality and that is not a $CFG$.</p>\n', 'ViewCount': '39', 'Title': 'is $L = \\{w_1cw_2 : w_1, w_2 \\in \\{a, b\\}^* , w_1 \\neq w_2 \\}$ a CFL?', 'LastEditorUserId': '10252', 'LastActivityDate': '2013-12-09T14:19:33.777', 'LastEditDate': '2013-12-09T14:08:51.467', 'AnswerCount': '1', 'CommentCount': '5', 'AcceptedAnswerId': '18777', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '10252', 'Tags': '<context-free><context-sensitive>', 'CreationDate': '2013-12-09T12:40:13.930', 'Id': '18774''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Let $L$ be a given Context Free Language over the alphabet $\\{a,b\\}$. Now consider $$L_1=L-\\{xyx\\ |\\ x,y\\in\\{a,b\\}^*\\}$$\nI know that $\\{xyx\\ |\\ x,y\\in\\{a,b\\}^*\\}$ is not Context Free (by using pumping lemma).</p>\n\n<p>Based on that can we affirmatively say that $L_1$ will <strong>NEVER</strong> be Context Free (can't use closure property here, as $\\{xyx\\ |\\ x,y\\in\\{a,b\\}^*\\}$ is neither <em>CFL</em> not <em>Regular</em>)?</p>\n\n<p>Or shall $L_1$ ALWAYS be Context Free ?</p>\n", 'ViewCount': '51', 'Title': 'Relative complement of a Non CFL to CFL', 'LastActivityDate': '2013-12-10T19:10:17.103', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '18836', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11949', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-12-10T13:57:09.853', 'Id': '18831''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I want to derive a context free grammar for the following language on alphabet $\\Sigma=\\{a,b\\}$:</p>\n\n<p>$\\qquad\\displaystyle \\{ xax'yby'z \\mid x,y,z\\in\\Sigma ^*, |x|=|x'|, |y|=|y'|, |z|=|x|+|y|\\}$</p>\n\n<p>I am convinced that this language is context-free because this is part of my proof to a theorem given in textbook, but haven't yet seen a context-free grammar for it.</p>\n", 'ViewCount': '80', 'Title': 'Looking for a contex-free grammar for the following language', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-16T12:51:50.140', 'LastEditDate': '2013-12-16T12:51:50.140', 'AnswerCount': '1', 'CommentCount': '9', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11589', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2013-12-16T10:33:03.267', 'Id': '19035''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Define the language $L$ as $L = \\{a, b\\}^* - \\{ww\\mid w \\in \\{a, b\\}^*\\}$.  In other words, $L$ contains the words that cannot be expressed as some word repeated twice.  Is $L$ context-free or not?</p>\n\n<p>I've tried to intersect $L$ with $a^*b^*a^*b^*$, but I still can't prove anything. I also looked at Parikh's theorem, but it doesn't help.</p>\n", 'ViewCount': '220', 'Title': 'Is $\\{a, b\\}^* \\setminus \\{ww \\mid w \\in \\{a,b\\}^*\\}$ context-free?', 'LastEditorUserId': '683', 'LastActivityDate': '2013-12-23T09:37:00.473', 'LastEditDate': '2013-12-23T09:37:00.473', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '12256', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-12-20T10:32:51.057', 'Id': '19151''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '145', 'Title': 'Pumping lemma for {w | w = ddd}', 'LastEditDate': '2013-12-27T11:10:35.367', 'AnswerCount': '1', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '11702', 'FavoriteCount': '1', 'Body': '<p>I want to use the pumping lemma to show that the following language is not context free:\n$$\n  L = \\{w \\in \\{a,b\\}^* \\mid \\exists d \\in \\{a,b\\}^*, w=ddd \\}\n$$</p>\n\n<p>We suppose that $L$ is context-free. Then from the pumping lemma there is a pumping length $p$. Which word $s$ do I have to use, that belongs to $L$ and such that dividing that in $uvxyz$, we can show that the pumping lemma is not satisfied? Could you give me a hint?</p>\n', 'Tags': '<context-free><pumping-lemma>', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-27T18:21:53.377', 'CommentCount': '10', 'AcceptedAnswerId': '19330', 'CreationDate': '2013-12-20T16:09:37.637', 'Id': '19159''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have the following CFG which I suspect cannot be rewritten to one which is LL(1):</p>\n\n<p>$S \\rightarrow \\epsilon\\ |\\ aSbS\\ |\\ bSaS\\ |\\ cSdS\\ |\\ dScS$</p>\n\n<p>I\'ve thought about it for a while, and can\'t seem to make any progress. I know that <a href="http://stackoverflow.com/questions/15161636/making-a-grammar-ll1">the simpler grammar here</a> can be rewritten into LL(1), but it seems like there is something different about the above grammar which prevents a rewriting in a similar style. Is it possible? If not, is there an easy way to prove that this is the case?</p>\n', 'ViewCount': '109', 'Title': 'Can this CFG be written into an equivalent LL(1) grammar?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-06T10:56:54.060', 'LastEditDate': '2014-01-06T09:24:40.650', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '12290', 'Tags': '<formal-languages><context-free><formal-grammars><parsing>', 'CreationDate': '2013-12-21T19:21:26.410', 'Id': '19178''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let $L = \\{ww \\mid w \\in \\{a,b\\}^*\\}$.  In other words, each word of $L$ is some string repeated twice (some string concatenated with itself).</p>\n\n<p>Is the language $L$ context-free?</p>\n', 'ViewCount': '128', 'ClosedDate': '2014-03-19T08:21:47.193', 'Title': 'Is L= $\\{ww \\mid w \\in \\{a,b\\}^*\\}$ context-free?', 'LastEditorUserId': '12863', 'LastActivityDate': '2014-03-19T06:26:02.637', 'LastEditDate': '2014-03-19T06:26:02.637', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '755', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2013-12-23T19:38:09.190', 'Id': '19218''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '373', 'Title': 'Examples of context-free languages with a non-context-free complements', 'LastEditDate': '2013-12-29T17:22:50.333', 'AnswerCount': '2', 'Score': '4', 'OwnerDisplayName': 'K. Stm.', 'PostTypeId': '1', 'OwnerUserId': '10872', 'Body': '<p>Context-free languages are not closed under complementation. In the lectures we have been given the same argument as <a href="https://en.wikipedia.org/wiki/Context_free_language#Nonclosure_under_intersection_and_complement" rel="nofollow">here on Wikipedia</a>. But this only shows that one of the three languages $A$, $B$, and $\\overline A \\cup \\overline B$ is a context-free language with a non-context-free complement, not for which one of these this is true. So what is it?</p>\n\n<p>Also, is there a minimal and elegant example of a context-free language witch a non-context-free complement, maybe over a binary alphabet?</p>\n', 'Tags': '<formal-languages><context-free>', 'LastEditorUserId': '98', 'LastActivityDate': '2013-12-29T17:22:50.333', 'CommentCount': '0', 'AcceptedAnswerId': '19267', 'CreationDate': '2013-12-04T13:58:59.267', 'Id': '19266''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm trying to find a formal proof of the following fact:</p>\n\n<blockquote>\n  <p>Given a context-free language $L_1$ and a context-sensitive language $L_2$, it is NOT decidable if their intersection is empty ($L_1 \\cap L_2 = \\varnothing$).</p>\n</blockquote>\n\n<p>I want to be able to prove it by contradiction, knowing the fact that it's undecidable to say if a given context sensitive grammar is empty.</p>\n\n<p>I know that the intersection of two context-free languages is undecidable, but I have to make a formal proof by contradiction. Taking $L_1$ as $\\Sigma^*$ ends up with a CS intersection, ok that's fine but I would like to make a better and more formal proof, without recurring to take specific languages, in a more general way... </p>\n", 'ViewCount': '76', 'Title': 'Intersection between context-free and context-sensitive language decidability', 'LastEditorUserId': '39', 'LastActivityDate': '2013-12-28T16:25:05.513', 'LastEditDate': '2013-12-28T16:25:05.513', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12405', 'Tags': '<computability><context-free><automata><undecidability><context-sensitive>', 'CreationDate': '2013-12-27T14:51:43.293', 'Id': '19326''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am working on CFG grammars, LL grammars in particular and I encountered the following theorem in the slides of presentations written by my professor:</p>\n\n<blockquote>\n  <p>A CFG grammar cannot be left-factored if all elements in the FIRST-set of one factorizable rule belong to the FIRST-set of the alternative rule. </p>\n</blockquote>\n\n<p>Mathematically speaking:</p>\n\n<p>$$\nA \\rightarrow \\alpha\\beta_1 | \\alpha\\beta_2 , \\forall x \\in \\text{FIRST}(\\alpha\\beta_1)\n\\wedge x \\in \\text{FIRST}(\\alpha\\beta_2) \\implies \\text{Cannot left-factorize}\n$$</p>\n\n<p>Is it correct? I think it is not!</p>\n\n<p>Consider grammar rules $A \\rightarrow aB | a C$ This thing can be left-factorized in: $A \\rightarrow aD; D \\rightarrow B|C$. But considering the theorem such a grammar is not supposed to be left-factorizable because $\\text{FIRST}(aB) =\\text{FIRST}(aC) = {a}$.</p>\n\n<p>Which one is the correct version of this theorem? Thankyou</p>\n', 'ViewCount': '32', 'Title': 'Is this theorem about left-factored grammars correct?', 'LastActivityDate': '2013-12-31T18:41:05.803', 'AnswerCount': '0', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12499', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2013-12-31T18:41:05.803', 'Id': '19417''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>The classic example of a context-free grammar is $a^nb^n$. That is, $n$ occurrences of $a$ followed by an equal number of occurrences of $b$.</p>\n\n<p>Do such forms occur in the real world? Can you provide an example of a real-world case where there must be $n$ occurrences of something followed an equal number of occurrences of something else?</p>\n\n<p>Let me give an example: if I run an on-line store, then for each purchase made to my store, there must be a corresponding delivery of the purchased item. That might be modeled as $n$ purchases followed by $n$ deliveries:</p>\n\n<blockquote>\n  <p>purchase purchase purchase delivery delivery delivery</p>\n</blockquote>\n\n<p>However, that is not a good data model since each delivery should legitimately be paired to a purchase:</p>\n\n<blockquote>\n  <p>purchase delivery purchase delivery purchase delivery</p>\n</blockquote>\n\n<p>So I am left wondering if there are <em>any</em> real-world examples where data would be (legitimately) modeled as a sequence of $n$ items of one type followed by $n$ items of another type. Can you provide a real-world example please?</p>\n\n<p>Hendrik Jan provided this good example (see it in the comments below): <em>This weekend I visited my mother. Three flights up, and three flights down when I left.</em> </p>\n\n<p>Neat example! Can you think of others?</p>\n\n<p>A colleague just informed me of another example. In the KML specification it says that a &lt;Track> element must contain N &lt;when> elements followed by N &lt;gx:Coord> elements:</p>\n\n<p><a href="https://developers.google.com/kml/documentation/kmlreference#gxtrack" rel="nofollow">https://developers.google.com/kml/documentation/kmlreference#gxtrack</a></p>\n\n<p>Another excellent example. What are other examples?</p>\n\n<p>Another colleague sent me an article about columnar databases. It is often more efficient to store data in columns rather than rows. For example, we may have a column of person\'s ages followed by a column of person\'s heights. Or, a list of N integers (ages) followed by a list of N decimals (heights). This enables efficient calculation of sums or averages. Here\'s the article:</p>\n\n<p><a href="http://www.postgresql.org/message-id/52C59858.9090500@garret.ru" rel="nofollow">http://www.postgresql.org/message-id/52C59858.9090500@garret.ru</a></p>\n\n<p><strong>More examples please! I would like for us to create a nice collection of compelling examples.</strong></p>\n', 'ViewCount': '306', 'Title': 'Is $a^n b^n$ an artificial language or does it occur in the real world?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-06T10:16:16.683', 'LastEditDate': '2014-01-06T10:16:16.683', 'AnswerCount': '2', 'CommentCount': '8', 'OwnerUserId': '9907', 'Score': '4', 'PostTypeId': '1', 'CommunityOwnedDate': '2014-01-06T10:16:16.683', 'Tags': '<formal-languages><context-free><modelling>', 'CreationDate': '2014-01-03T13:12:13.693', 'Id': '19485''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>In a recent test, I was asked to recognize if the below language is context  free:</p>\n\n<p>$\\qquad\\displaystyle L = \\{0^{n+m}1^{n+m}0^m \\mid n,m \\geq 0\\}$ </p>\n\n<p>I think it is context free, and can be accepted by below context free grammar, where $S$ is the start symbol and $Y$ is a non-terminal:</p>\n\n<p>$\\qquad S \\to S0 \\mid Y$</p>\n\n<p>$\\qquad Y \\to 0Y1 \\mid \\epsilon$</p>\n\n<p>However, my answer was considered wrong and that the language $L$  is not context free.</p>\n\n<p>I'm confident about my answer, but the response has got me confused. Is my understanding correct? Please let me know if I've missed something.</p>\n", 'ViewCount': '131', 'Title': 'Is this language context free?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-23T01:19:12.187', 'LastEditDate': '2014-01-13T13:03:19.593', 'AnswerCount': '1', 'CommentCount': '4', 'AcceptedAnswerId': '19906', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11837', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-01-13T12:22:13.227', 'Id': '19690''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is $L=\\{a^nb^m|m\\geq2^n\\}$ a context-free language?</p>\n', 'ViewCount': '48', 'Title': 'Is the following language context-free? $L= \\{a^nb^m| m\\geq2^n\\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-18T19:44:31.820', 'LastEditDate': '2014-01-18T19:44:31.820', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '19809', 'Score': '1', 'OwnerDisplayName': 'user12941', 'PostTypeId': '1', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2014-01-18T14:27:09.293', 'Id': '19807''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I've seen in previous exams that professors marked the theory as correct:</p>\n\n<blockquote>\n  <p>If $L$ is CFL and $\\overline{L}$ is CFL, then L is regular.</p>\n</blockquote>\n\n<p>I just don't see how this would work. How would we prove such a thing? I also can't come up with contradicting languages.</p>\n", 'ViewCount': '102', 'Title': 'If $L$ is CFL and $\\overline{L}$ is CFL, then is L regular?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-20T08:50:22.907', 'LastEditDate': '2014-01-20T08:43:52.727', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '19836', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11424', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2014-01-19T20:00:18.470', 'Id': '19834''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm following the algorithm for left recursion elimination from a grammar. It says remove the epsilon production if there is any.</p>\n\n<p>I have the grammar</p>\n\n<p>$\\qquad S \\to Aa \\mid b$<br>\n$\\qquad A \\to Ac \\mid Sd \\mid \\varepsilon$</p>\n\n<p>I can see after removing the epsilon productions the grammer becomes</p>\n\n<p>$\\qquad S \\to Aa \\mid a \\mid b$<br>\n$\\qquad A \\to Ac \\mid Sd \\mid c \\mid d$ </p>\n\n<p>I'm confused where the $a \\mid b$ for $S$ and $c \\mid d$ for $A$ come from.\nCan someone explain this?</p>\n", 'ViewCount': '38', 'Title': 'Eliminating $\\varepsilon$-productions during elimination of left recursion', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-23T20:51:58.290', 'LastEditDate': '2014-01-23T17:14:14.097', 'AnswerCount': '1', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '12993', 'Tags': '<context-free><formal-grammars><compilers><left-recursion>', 'CreationDate': '2014-01-23T15:28:15.480', 'Id': '19913''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I'm studying for my Computing languages test and there's one idea I'm having problems wrapping my head around, as far as I know for any Context Free Grammar (CFG), we can design a 2-state Pushdown Automaton (PDA). I am however a little bit confused that why this is possible.</p>\n", 'ViewCount': '165', 'Title': 'How to get 2-state PDA for CFG?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-26T14:37:05.360', 'LastEditDate': '2014-01-26T14:37:05.360', 'AnswerCount': '2', 'CommentCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '13108', 'Tags': '<formal-languages><context-free><formal-grammars><pushdown-automata>', 'CreationDate': '2014-01-24T18:53:40.317', 'FavoriteCount': '4', 'Id': '19946''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have this question about closure of a context free grammar, and if someone can check my answer and see if it makes sense, and if not, what is missing, I would be very grateful.</p>\n\n<blockquote>\n  <p>Give an counter-example to show that the following contruction fails in to proof that class of languages free of context is closed under the operation star. By A a language free of context that it is generated by the GLC G = {V,,R,S}. Add the new rule S -> SS e call the resulting grammar G\'. That grammar is expected to generate a*"</p>\n</blockquote>\n\n<p>I have only a superficial comprehension, I believe it is necessary that Rg\', the set of production rules of G\' must be equal to Rg united with {Sg\'->SgSg\'|e} or in another words Rg\': Rg U {Sg\'->SgSg\'|e}. Even if that it is correct I don\'t understand why {Sg\'->SgSg\'|e} is necessary</p>\n', 'ViewCount': '65', 'Title': 'Kleene star closure of a context free grammar', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-25T16:26:21.240', 'LastEditDate': '2014-01-25T16:26:21.240', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13113', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2014-01-24T23:59:34.787', 'Id': '19955''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<blockquote>\n  <p>Let $A/B$ = $\\{ w \\mid wx \\in A$ for some $x \\in B \\}$.  Show that if A is context free and B is regular, then $A/B$ is context free.</p>\n</blockquote>\n\n<p>My interpretation of this is is that we need to show that if a string $wx$ is accepted by a CFG, and we know that $x$ is accepted by a regular language (and therefore is also accepted by a context-free language), then $w$ must also be accepted by a CFG. </p>\n\n<p>My initial thought on how to solve this would be a proof by contradiction in which we assume that $A$ is context free, $B$ is regular, and then assume that $A/B$ is not context-free.  Since $A$ is context free, we can construct an equivalent PDA that accepts $A$.</p>\n\n<p>From here, my thought was to take an arbitrary $wx$ that is accepted by $A$, such that $x \\in B$.  We can then construct another PDA based on the first that only accepts $wx$.  We could then break the PDA into two pieces: one that accepts $w$ and one that accepts $x$ (with the two pieces concatenated together).  Since there then would exist a PDA that accepts just $w$, and $w$ is arbitrary insofar as $wx$ was arbitrary, $A/B$ must therefore be context-free after all (contradiction). </p>\n\n<p>Will this approach work? (Is this a good general approach?)  If so, how would I go about breaking the PDA that accepts $wx$ into chunks formally? </p>\n', 'ViewCount': '160', 'Title': 'Closure of CFL against right-quotient with regular languages', 'LastEditorUserId': '98', 'LastActivityDate': '2014-01-30T12:07:40.013', 'LastEditDate': '2014-01-30T11:02:17.620', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '20091', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '13232', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2014-01-29T23:16:32.513', 'Id': '20090''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is $L = \\{ W_1W_2 \\mid W_1,W_2 \\in (a+b)^* , N_a(W_1) = N_b(W_2)\\}$ context free? Can we construct an NPDA for the language? </p>\n\n<p>There is a book here that claims $L$ is not CF (without any elaboration), but I think we can construct a NPDA that accepts the language. My guess is we can construct the language with an NPDA where after reading some $a$ and $b$ and pushing $A$ for each $a$ into the stack, makes a guess to jump to a new state and consumes the pushed $A$ with each $b$.</p>\n', 'ViewCount': '46', 'Title': "Is the language of words with as many a's in the first as b's in the second part context-free?", 'LastEditorUserId': '39', 'LastActivityDate': '2014-02-01T13:58:44.903', 'LastEditDate': '2014-02-01T13:58:44.717', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '12173', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2014-01-31T15:49:09.507', 'FavoriteCount': '1', 'Id': '20159''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I was reading through Context Free Grammar, and I came across ambiguous grammar. If the language produced by CFG has more then 1 parse tree, then CFG is an ambiguous grammar. Is there any way by which I can find out or prove that the grammar is Unambiguous. In general I can test some language produced by CFG and check whether more than 1 parse tree is generated from that language, to show that grammar is ambiguous. But how do I check or prove that give CFG is unambiguous?</p>\n', 'ViewCount': '13', 'ClosedDate': '2014-02-02T13:21:21.190', 'Title': 'Unambiguous Context free Grammar', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-02T13:21:32.037', 'LastEditDate': '2014-02-02T13:21:32.037', 'AnswerCount': '0', 'CommentCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '13042', 'Tags': '<formal-languages><context-free><formal-grammars><ambiguity>', 'CreationDate': '2014-02-02T08:51:12.323', 'Id': '20205''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Language:</p>\n\n<p>$ L = a^{n+m}b^{n}c^{m} $</p>\n\n<p>As per a recent test I gave, this language is not context free.</p>\n\n<p>However, I think it is.</p>\n\n<p><strong>Corresponding Grammar:</strong></p>\n\n<p>$ X \\rightarrow aXY \\space |\\space \\epsilon $</p>\n\n<p>$ Y \\rightarrow b \\space | \\space c $</p>\n\n<p><strong>Pushdown Automata:</strong></p>\n\n<p>Keeping pushing all $a$ to the stack, until a $b$ is scanned. Keeping popping  $a$ from stack for each character scanned, until end of input.</p>\n\n<p>If, after the end of input the stack is empty accept the string. Else, go to non-accepting state.</p>\n\n<p>Please let me know if I'm thinking along the right lines or if I've missed something..</p>\n", 'ViewCount': '78', 'Title': 'Is $a^{n+m}b^{n}c^{m}$ context free?', 'LastActivityDate': '2014-02-03T16:18:44.520', 'AnswerCount': '2', 'CommentCount': '5', 'AcceptedAnswerId': '20252', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '11837', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-02-03T14:28:28.637', 'FavoriteCount': '1', 'Id': '20249''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>CFG can specify structure of sentences but Regular grammar can only specify strings sequentially. Is it because DFA has only one bit memory?</p>\n', 'ViewCount': '63', 'ClosedDate': '2014-02-05T08:02:49.107', 'Title': 'Why CFG can specify structure of sentence but Regular grammar cannot?', 'LastEditorUserId': '8321', 'LastActivityDate': '2014-03-06T16:05:53.983', 'LastEditDate': '2014-03-06T16:05:53.983', 'AnswerCount': '0', 'CommentCount': '5', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '947', 'Tags': '<regular-languages><context-free><formal-grammars><strings>', 'CreationDate': '2014-02-05T01:52:36.737', 'Id': '21306''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>There are two languages,</p>\n\n<p>$\\qquad L_1 = \\{w\\in\\{a,b\\}^*: N_a\\leq N_b\\}$ and<br>\n$\\qquad L_2=\\{w\\in\\{a,b\\}^*: N_b\\leq 2N_a\\}$ </p>\n\n<p>where $N_a$ means the number of occurrences of $a$ in the string $w$. Same for $N_b$.</p>\n\n<p>I've proved that $L_1$ has a DPDA (hope this is right). </p>\n\n<p>Now I want to know whether $L=L_1\\cap L_2$ has a DPDA or not. </p>\n\n<p>I applied the Pumping lemma but it seems like there is no contradiction. I tried to draw the DPDA but failed. Maybe $L$ has a nondeterministic PDA but not a DPDA. However I cannot prove this.</p>\n\n<p>Could anyone give me some hints?</p>\n", 'ViewCount': '79', 'Title': 'How to find a Deterministic PDA for an intersection of languages', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-05T20:49:59.820', 'LastEditDate': '2014-02-05T08:34:26.133', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '21328', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '14400', 'Tags': '<formal-languages><context-free><automata><pushdown-automata>', 'CreationDate': '2014-02-05T04:09:47.847', 'Id': '21309''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '107', 'Title': 'Determining if a context-free grammar produces even-length strings', 'LastEditDate': '2014-02-06T21:11:48.003', 'AnswerCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14447', 'Body': '<p>Given a context-free grammar, is there an algorithm to determine if the CFG will ever produce an even length string? Or is this undecidable?</p>\n', 'ClosedDate': '2014-02-15T04:33:24.287', 'Tags': '<computability><context-free><formal-grammars><undecidability>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-06T21:11:48.003', 'CommentCount': '1', 'AcceptedAnswerId': '21396', 'CreationDate': '2014-02-06T17:46:33.243', 'Id': '21390''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>Is there a way to figure out what the following CFG accepts?</p>\n\n<p>$\\qquad\\begin{align}\n  S &amp;\\to S \\vee T \\mid T \\\\\n  T &amp;\\to T \\wedge F \\mid F \\\\ \n  F &amp;\\to p \\mid\\; \\thicksim p\n\\end{align}$</p>\n\n<p>I'm confused by the boolean algebra symbols. I know the first is S or T, the second is T and F and the third is not p but I'm not sure how they affect the grammar itself.</p>\n", 'ViewCount': '113', 'Title': 'What Do Logical Operators In a Grammar Mean?', 'LastEditorUserId': '13257', 'LastActivityDate': '2014-02-13T22:57:53.400', 'LastEditDate': '2014-02-12T21:58:19.707', 'AnswerCount': '2', 'CommentCount': '3', 'AcceptedAnswerId': '21540', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '13257', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2014-02-11T21:42:08.620', 'Id': '21539''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have the following context-free language:</p>\n\n<pre><code>S -&gt; ASa | b\nA -&gt; aA | a\n</code></pre>\n\n<p>I don't understand why this is not regular. I first said that it's generated by the regular expression <code>a+ba+</code>. The following is regular however</p>\n\n<pre><code>S -&gt; ASa | b\nA -&gt; aA | e\n</code></pre>\n\n<p>e stands for the empty string. I don't understand their differences.</p>\n", 'ViewCount': '67', 'Title': 'Context-free language and regular expressions', 'LastActivityDate': '2014-02-14T12:23:00.497', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '5', 'PostTypeId': '1', 'OwnerUserId': '12066', 'Tags': '<regular-languages><context-free><regular-expressions>', 'CreationDate': '2014-02-14T09:43:23.857', 'Id': '21629''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I know that each regular language can be generated by a CFG.\nThis makes, in one sense at least: context-free languages more general than regular languages.</p>\n\n<p>Are there known results about the 'complexity' of regular languages in the CFG context? For example, is it true that every regular language can be generated by an unambiguous LL(1) grammar?  Or is something similar true?</p>\n\n<p>The general question above comes from the attempts I made to build a 'simple' grammar generating $L=\\{(ab)^i|(ba)^i : i\\geq 0\\}$.\nNone of the grammars I could build were 'simple'.</p>\n", 'ViewCount': '75', 'Title': 'Complexity of CFG grammar for a regular language', 'LastEditorUserId': '755', 'LastActivityDate': '2014-02-16T07:57:05.730', 'LastEditDate': '2014-02-16T07:57:05.730', 'AnswerCount': '2', 'CommentCount': '0', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14695', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2014-02-15T13:36:39.660', 'Id': '21663''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>It makes me wonder that despite of (CFL) being a subset of Turing Decidable languages, Turing Decidable is closed under intersection while CFL is not.</p>\n\n<p>Does not Turing Decidable engulf all CFLs?</p>\n', 'ViewCount': '44', 'Title': 'CFL not closed under intersection while Turing Decidable are', 'LastEditorUserId': '98', 'LastActivityDate': '2014-02-19T23:03:12.623', 'LastEditDate': '2014-02-19T23:03:12.623', 'AnswerCount': '1', 'CommentCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '9576', 'Tags': '<formal-languages><context-free><turing-machines><closure-properties><decision-problem>', 'CreationDate': '2014-02-19T19:14:27.437', 'Id': '21821''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Context-free grammars, as well as other types of grammars, can naturally\nassociate structure with the strings of the defined language, for\nexample tree structures in the case of context-free language.</p>\n\n<p>What kind of structural features can be thus described by regular grammars,\nand associated with the strings of the language.</p>\n\n<p>One answer is of course that it can associate a non-terminals with\neach prefix (or suffix) of the string. That sorts the prefixes (or\nsuffixes) into sets that may intersect, depending on the grammar.\nBut what else would you see?</p>\n\n<p>related question : <a href="http://cs.stackexchange.com/questions/21306">Why CFG can specify structure of sentence but Regular grammar cannot?</a></p>\n', 'ViewCount': '38', 'Title': 'What kind of structural features of strings can be described by regular grammars?', 'LastActivityDate': '2014-02-20T16:22:49.207', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '8321', 'Tags': '<formal-languages><regular-languages><context-free><formal-grammars><syntax-trees>', 'CreationDate': '2014-02-20T16:22:49.207', 'Id': '21852''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Recently i was studying removal of useless symbols in productions given in Ullman Hopcroft.</p>\n\n<p>The grammar goes as follows</p>\n\n<p>S-> aAa | aBC</p>\n\n<p>A -> aS | bD</p>\n\n<p>B - > aBa | b</p>\n\n<p>C-> abb | DD</p>\n\n<p>D -> aDa</p>\n\n<p>In the explanation that follows, we eliminate D obviously, but the removal of C still baffles me. As D is non generating, but C is both generating and reachable. So why delete C?</p>\n\n<p>The resultant grammar is shown as </p>\n\n<p>S->aAa</p>\n\n<p>A->aS</p>\n\n<p>B->aBa | b</p>\n\n<p>Here is the link to the photo of the page in the book just in case</p>\n\n<p>Page 240: </p>\n\n<p><a href="http://tinypic.com/r/17wcw4/8" rel="nofollow">http://tinypic.com/r/17wcw4/8</a></p>\n\n<p>Page 241:</p>\n\n<p><a href="http://tinypic.com/r/29w1i82/8" rel="nofollow">http://tinypic.com/r/29w1i82/8</a></p>\n', 'ViewCount': '108', 'Title': 'Simplification of CFG', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-23T13:59:00.583', 'LastEditDate': '2014-02-22T09:45:25.000', 'AnswerCount': '1', 'CommentCount': '15', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '11927', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2014-02-22T01:18:48.460', 'Id': '21913''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I want to find a context-free grammar for $L = \\{a^n : n\\leq2^{20}\\}$. There's one for sure. I approached it by two ways and both seemed dead end. One was to set a limit during the production of the new strings. But I don't think there's such a thing in CFGs. Second approach was to produce the strings of the language top-down. Starting from the last string $a^{2^{20}}$ and removing an $a$ each time till epsilon but I don't think that's achievable either. Any ideas?</p>\n", 'ViewCount': '86', 'Title': 'Context-free grammar for $L = \\{a^n : n\\leq2^{20}\\}$', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-10T08:58:13.090', 'LastEditDate': '2014-03-10T08:58:13.090', 'AnswerCount': '1', 'CommentCount': '8', 'AcceptedAnswerId': '22403', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15424', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2014-03-08T16:36:44.420', 'Id': '22402''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '36', 'Title': 'Proving a language is not a regular language but a context free language', 'LastEditDate': '2014-03-17T23:09:15.107', 'AnswerCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15798', 'FavoriteCount': '1', 'Body': "<p>I have the languages $L_1$ and $L_2$ such that $L_1 = \\{a^nba^n :n \\in N\\}$ and $L_2 =\\{a,b\\}^*\\setminus L_1$.</p>\n\n<p>I want to prove that $L_2$ is not a regular language. I know that to prove that $L_2$ is not a regular language I can use the pumping lemma but I'm unsure about the details.</p>\n\n<p>I also want to prove that $L_2$ is a context free language. Do I need a Push Down Automaton that accepts the language to prove that $L_2$ is a context free language? If so, what would this Push-Down Automaton look like?</p>\n", 'ClosedDate': '2014-03-18T07:47:52.957', 'Tags': '<formal-languages><regular-languages><context-free><pushdown-automata>', 'LastEditorUserId': '13022', 'LastActivityDate': '2014-03-17T23:28:09.877', 'CommentCount': '1', 'AcceptedAnswerId': '22731', 'CreationDate': '2014-03-17T22:36:34.083', 'Id': '22727''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '85', 'Title': 'Defining a context-free grammar for $\\{w \\in \\{0, 1\\}^* : \\#_0(w) = \\#_1(w)\\}$', 'LastEditDate': '2014-03-18T08:14:27.077', 'AnswerCount': '2', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15798', 'FavoriteCount': '1', 'Body': "<p>I have a language where each string in the language has even amount of $0$'s as $1$'s (e.g., $0101$, $1010$, $1100$, $0011$, $10$ are all in the language). I was hoping to define a context-free grammar that describes this language. After defining a context-free grammar I want to formally prove that this context-free grammar describes this language.</p>\n\n<p>I've came up with the context-free grammar production rules:\n$$\n\\begin{align*}\n&amp;S\\to0S1S \\\\\n&amp;S\\to1S0S \\\\\n&amp;S\\to\\epsilon\n\\end{align*}\n$$\nIs this the correct context free grammar to define this language?</p>\n\n<p>Im kind of stumped for the proving part. I'm guessing I will need some sort of induction?</p>\n", 'ClosedDate': '2014-03-18T08:16:09.753', 'Tags': '<formal-languages><context-free><formal-grammars>', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-18T08:14:27.077', 'CommentCount': '1', 'AcceptedAnswerId': '22730', 'CreationDate': '2014-03-17T22:42:45.907', 'Id': '22729''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '56', 'Title': 'Complexity of Languages', 'LastEditDate': '2014-03-25T04:27:11.867', 'AnswerCount': '0', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15798', 'FavoriteCount': '1', 'Body': '<p>1) Find language $L_1 \\subseteq L_2 \\subseteq L_3$ such that both $L_1$ and $L_3$ are not context-free languages, but $L_2$ is a regular language.</p>\n\n<p>2) Find language $L_1 \\subseteq L_2 \\subseteq L_3$ such that both $L_1$ and $L_3$ are regular languages but $L_2$ is not context-free.</p>\n\n<p>I understand that context-free grammars are strictly more powerful than regular expressions and any language that can be generated using regular expressions can be generated by a context-free grammar. I am also aware that there are languages that can be generated by a context-free grammar that cannot be generated by any regular expression. </p>\n', 'ClosedDate': '2014-03-18T08:13:19.247', 'Tags': '<formal-languages><regular-languages><context-free>', 'LastEditorUserId': '15798', 'LastActivityDate': '2014-03-25T04:27:11.867', 'CommentCount': '8', 'CreationDate': '2014-03-18T04:58:43.450', 'Id': '22747''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>If I have a DCFG G for some language over {0,1}* and a DCFG H for its complement, with disjoint non-terminals, and a (perhaps partially reduced) string, can they both have a handle for the string? So the right hand sides of these rules would consist of only terminals and one would be a (maybe proper) prefix of the other. I think it's possible but I'm not certain and can't quite show it. </p>\n", 'ViewCount': '37', 'Title': 'Complement DCFGs and handles', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-19T00:03:39.367', 'LastEditDate': '2014-03-19T00:03:39.367', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22778', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15486', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2014-03-18T15:33:08.417', 'Id': '22759''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '47', 'Title': 'If neither $L_1$ nor $L_2$ are context free then is $L_1 \\cup L_2$ also not a context free language?', 'LastEditDate': '2014-03-18T21:37:36.353', 'AnswerCount': '1', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15798', 'FavoriteCount': '1', 'Body': '<p>If two regular languages $L_1$ and $L_2$ are both <strong>not</strong> context free languages then is $L_1 \\cup L_2$ also <strong>not</strong> a context free?</p>\n\n<p>I am aware that if $L_1$ and $L_2$ are context free languages then the language $L_1 \\cap L_2$ is also context free but cannot quite connect the dots. If someone could help out that would be great.</p>\n', 'ClosedDate': '2014-03-19T00:05:02.747', 'Tags': '<formal-languages><regular-languages><context-free>', 'LastEditorUserId': '15798', 'LastActivityDate': '2014-03-18T23:07:04.487', 'CommentCount': '2', 'AcceptedAnswerId': '22774', 'CreationDate': '2014-03-18T21:09:11.070', 'Id': '22772''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have been starting to learn about CFGs and PDAs and have gotten familiar with the simple stuff. I have been able to construct CFGs for simple languages but this question is more specific:</p>\n\n<p>$\\lbrace 0^a1^b2^c3^d4^e5^f |a,b,c,d,e,f \\geq 0$ and $a+b=d+e\\rbrace$.</p>\n\n<p>My thought process has only gone so far. I see that if you add a 0 you must add a 3 or 4, the same is if you add a 1. And for adding a 3 or 4 the case is very similar. My biggest troubles are due to the characters that lay between the pairs of 0s,1s,3s and 4s. I haven't been able to produce a serious attempt yet, but will post it as an edit if I do. Any help would be appreciated.</p>\n\n<p><strong>Edit:</strong> Here is a possible solution I have come to:</p>\n\n<p>$S\\rightarrow AB$</p>\n\n<p>$A\\rightarrow 0A4|C|D$</p>\n\n<p>$B\\rightarrow B5|\\epsilon $</p>\n\n<p>$C\\rightarrow 0C3|E$</p>\n\n<p>$D\\rightarrow 1D4|E$</p>\n\n<p>$E\\rightarrow 1E3|F$</p>\n\n<p>$F\\rightarrow 2F|\\epsilon$.</p>\n", 'ViewCount': '25', 'Title': 'Construct context free grammar from language', 'LastEditorUserId': '15512', 'LastActivityDate': '2014-03-20T00:55:54.307', 'LastEditDate': '2014-03-20T00:55:54.307', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22833', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '15512', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-03-20T00:04:23.550', 'Id': '22832''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '65', 'Title': 'Proving that context-free languages are closed under inserting symbols', 'LastEditDate': '2014-03-20T15:55:52.117', 'AnswerCount': '2', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14596', 'FavoriteCount': '1', 'Body': '<p>This is a theoretical computer science question, regarding the proof of whether or not context-free languages are closed under an operation.  This means basically that any context-free language which undergoes this operation would still be context-free.</p>\n\n<blockquote>\n  <p>For a language $A$ which is a subset $\\Sigma^*$, define the language $A_+$ as</p>\n  \n  <p>$\\qquad\\displaystyle A_+ = \\{xyz | y\\in \\Sigma \\wedge xz \\in A\\}$.</p>\n  \n  <p>Prove that the set of context-free languages is closed under the $+$ operator.</p>\n</blockquote>\n\n<p>So $A_+$ contains all strings that can be obtained by inserting one symbol into a string in $A$.\nShow that the class of context-free languages is closed under the operation $+$ (i.e.,     show that\nif $A$ is context free, then $A_+$ is also context free).</p>\n\n<p>Note that this is not a homework question.  Examples of closure proofs are sparse online and in my textbook.  </p>\n\n<p>First, let\'s think about the different ways to prove closure of CFLs:  </p>\n\n<ol>\n<li><p>Constructing a "template" Push Down Automata that can incorporate any other Push Down Automata and add on a part to the beginning, middle, or end of the PDA and still be able to accept the language accepted by the original CFL, with the new operation on it.  Basically, if for any given PDA P, if a PDA P\' can be created which accepts the language of P with the new operation (in our case, the "+" operator) performed on it, then that operation must be under closure.  </p>\n\n<p>Solving the problem in this manner is quite simple to think about.  Imagine a PDA P which accepts strings from the CFL L.  In application to our problem, this would be a PDA which can successfully read in the string \'xz\', where x and z are simply any string conforming to our alphabet.  The PDA P\' would similarly have the ability to read xz, but each state of the PDA could have an additional self loop which reads the character in the string y.</p></li>\n</ol>\n\n<p>I have selected the answer which I find to be most appropriate for this question.  It simply involves using the "tempate PDA" strategy which I outline above; however, my construction did not achieve the goals of the new language (think about why before looking at the answer below).</p>\n', 'ClosedDate': '2014-03-20T11:52:14.493', 'Tags': '<formal-languages><context-free><closure-properties>', 'LastEditorUserId': '14596', 'LastActivityDate': '2014-03-20T15:55:52.117', 'CommentCount': '5', 'AcceptedAnswerId': '22844', 'CreationDate': '2014-03-20T00:24:22.407', 'Id': '22834''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '32', 'Title': 'Develop the context free grammar to match this language (puzzle)', 'LastEditDate': '2014-03-20T03:51:35.757', 'AnswerCount': '2', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14596', 'FavoriteCount': '1', 'Body': '<p>This is a puzzle type question which asks to create a context-free grammar to match this language:</p>\n\n<pre><code>{ x#w | x,w are in {a,b}*, and w contains the reversal of x as a substring }\n</code></pre>\n\n<p>So some example strings to try:\n    #, a#a, b#b, ab#ba, ab#aaabbba</p>\n\n<p>Does anyone have any advice on how to get better at these types of problems?  I am generally a good problem solver, but have trouble developing grammars for languages for some reason.  I am completely stuck on this question.  Here is my attempt:</p>\n\n<pre><code>S --&gt; TR\nT --&gt; aTa | bTb | #R\nR --&gt; RR | 0 | 1 | empty\n</code></pre>\n\n<p>My guess is that we want to define the left side of the string in terms of the right side of the string.  </p>\n\n<p>Edit:  As far as I can tell, the above answer seems to be correct now.  Only took me an hour to figure out!</p>\n', 'Tags': '<context-free>', 'LastEditorUserId': '14596', 'LastActivityDate': '2014-03-20T04:29:11.577', 'CommentCount': '0', 'AcceptedAnswerId': '22852', 'CreationDate': '2014-03-20T02:38:21.573', 'Id': '22846''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I was wondering if this language is context-free:</p>\n\n<p>$L = \\{ x \\in \\{ 0, 1 \\}^* : |x| = 2^n $ for some natural number n $\\}$ </p>\n\n<p>I know that this language is not regular because it fails the pumping lemma for regular languages but that does not necessarily mean it is not context-free. I'm not sure whether to use the pumping lemma for context-free languages to show that this is not context free or to provide context-free grammar to show that it is context free.</p>\n\n<p>I've tried creating a context-free grammar to generate this language but ran into trouble which makes me believe that this language is not context-free, but I am still unsure.</p>\n\n<p>If someone could point me in the right direction that would be greatly appreciated.</p>\n", 'ViewCount': '48', 'Title': 'Is $L = \\{ x \\in \\{ 0, 1 \\}^* : |x| = 2^n $ for some natural number n $\\}$ context free?', 'LastEditorUserId': '15798', 'LastActivityDate': '2014-03-20T04:21:16.400', 'LastEditDate': '2014-03-20T04:11:22.023', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22851', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15798', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2014-03-20T03:57:01.143', 'Id': '22850''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p><img src="http://i.stack.imgur.com/V79cK.png" alt="enter image description here"></p>\n\n<p>for this problem, it asks to prove that A and B are context free, however the CFL pumping lemma doesn\'t prove that. It proves when languages are not context free. Would the easiest way to prove these are context free is by coming up with a grammar for each one?</p>\n', 'ViewCount': '33', 'ClosedDate': '2014-03-20T22:42:30.083', 'Title': 'Prove a language is context-free', 'LastActivityDate': '2014-03-20T18:17:03.567', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '14864', 'Tags': '<context-free><formal-grammars>', 'CreationDate': '2014-03-20T18:17:03.567', 'FavoriteCount': '1', 'Id': '22875''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>from Sipster's definition: Any language that can be generated by some context-free grammar (call it $G$) is called a context-free language (CFL). However, can $G$ generate strings that are not in the the language that recognizes $G$?</p>\n", 'ViewCount': '49', 'Title': 'Can a context free grammar for $L$, generate a string not in $L$?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-21T08:37:28.153', 'LastEditDate': '2014-03-21T08:37:28.153', 'AnswerCount': '1', 'CommentCount': '0', 'AcceptedAnswerId': '22883', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14864', 'Tags': '<terminology><context-free><formal-grammars>', 'CreationDate': '2014-03-20T20:49:23.283', 'Id': '22880''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>The question is simple: </p>\n\n<blockquote>\n  <p>$\\qquad \\operatorname{DropMiddle}(L)=\\{xy\\in\\Sigma^* \\mid |x|=|y| \\land \\exists a\\in\\Sigma\\colon xay\\in L\\}$. </p>\n  \n  <p>Prove that CFL's aren't closed under $\\operatorname{DropMiddle}$.</p>\n</blockquote>\n\n<p>I should probably be looking for a counter example, but I'm coming up short. I know that the language $ww$ ($w$ is a word in some CFL) isn't a CFL, but I can't figure out if I'm on the right track at all.</p>\n", 'ViewCount': '106', 'Title': "Prove that context free languages aren't closed under DropMiddle", 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-21T22:36:11.570', 'LastEditDate': '2014-03-21T22:16:58.467', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '22915', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15977', 'Tags': '<formal-languages><context-free><closure-properties>', 'CreationDate': '2014-03-21T15:33:06.103', 'Id': '22905''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'ViewCount': '59', 'Title': 'If $L_1$ is regular and $L_1 \\cap L_2$ context-free, is $L_2$ always context-free?', 'LastEditDate': '2014-03-24T11:49:13.320', 'AnswerCount': '0', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '15798', 'FavoriteCount': '1', 'Body': '<p>If $L_1$ is a regular language and $L_1 \\cap L_2$ is a context-free language, does it mean that $L_2$ is a context-free language too?</p>\n\n<p>I attempted to prove that $L_2$ was not required to be context-free by the following: If $L_1 = \\{ a^n \\}$ and $L_2 = \\{ a^nb^nc^n \\} $ then $L_1 \\cap L_2 = \\{ a^n \\}$ which is context-free. </p>\n\n<p>Is this a counterexample to show that $L_2$ is not required to be context-free? If not, then do you have any suggestions?</p>\n', 'ClosedDate': '2014-03-25T18:31:23.090', 'Tags': '<formal-languages><regular-languages><context-free><closure-properties>', 'LastEditorUserId': '31', 'LastActivityDate': '2014-03-24T11:49:13.320', 'CommentCount': '3', 'CreationDate': '2014-03-24T09:23:43.800', 'Id': '22991''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>When converting a CFG to a PDA I know that you get three main states, Qstart, Qloop and Qaccept. But Qloops will need a various amount of states, and my question is how many? Is there a way to find out the "worst case scenario" of how many states there can potentially be? I don\'t mean for one particular CFG, but in general. I\'m having difficulties trying to figure out how I can calculate this... </p>\n', 'ViewCount': '62', 'Title': 'How many states when converting CFG to PDA', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-24T14:40:54.410', 'LastEditDate': '2014-03-24T10:49:04.057', 'AnswerCount': '2', 'CommentCount': '2', 'AcceptedAnswerId': '22994', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14436', 'Tags': '<context-free><automata><formal-grammars><pushdown-automata><simulation>', 'CreationDate': '2014-03-24T09:24:37.833', 'Id': '22992''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I want to show that for any language $L \\subseteq \\{ a \\}^* $, $L$ satisfies the pumping lemma for context free languages if and only if it satisfies the pumping lemma for regular languages.</p>\n\n<p>I know that every regular language is also a context free language so I tried to show that direction of the proof first but ran into some difficulties. </p>\n\n<p>Is there a more logical approach to this? Would I have to show that the conditions for both the pumping lemma for regular languages and the pumping lemma for context free grammars are equivalent for this language? </p>\n', 'ViewCount': '62', 'Title': 'Show that the pumping lemmas for context-free and regular languages are equivalent for unary languages', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-26T17:35:18.490', 'LastEditDate': '2014-03-26T08:47:34.693', 'AnswerCount': '1', 'CommentCount': '3', 'AcceptedAnswerId': '23091', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '15798', 'Tags': '<formal-languages><regular-languages><context-free><pumping-lemma>', 'CreationDate': '2014-03-26T06:50:32.380', 'Id': '23064''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I need to find a context-free grammar for the following language which uses the alphabet $\\{a, b\\}$\n$$L=\\{a^nb^m\\mid 2n&lt;m&lt;3n\\}$$</p>\n', 'ViewCount': '115', 'ClosedDate': '2014-03-28T13:28:44.503', 'Title': 'Find a context-free grammar for the language $L=\\{a^nb^m\\mid 2n<m<3n\\}$', 'LastEditorUserId': '8321', 'LastActivityDate': '2014-03-28T13:26:47.350', 'LastEditDate': '2014-03-28T13:17:52.803', 'AnswerCount': '2', 'CommentCount': '9', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16233', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-03-28T13:00:10.153', 'Id': '23174''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I am trying to prove this following theorem, can someone help please?</p>\n\n<p>Let $L$ be a language over the alphabet $\\Sigma = \\{ a,b \\}$.\nIf $L' = \\{ w\\$w^R \\mid w \\in L\\}$ is context-free, then $L$ is regular.</p>\n", 'ViewCount': '92', 'ClosedDate': '2014-03-29T11:31:50.210', 'Title': 'proving that if $\\{w\\$w^R | w \\in L\\}$ is context-free then $L$ is regular', 'LastEditorUserId': '683', 'LastActivityDate': '2014-03-29T15:19:39.593', 'LastEditDate': '2014-03-29T02:08:37.950', 'AnswerCount': '2', 'CommentCount': '4', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16256', 'Tags': '<formal-languages><context-free>', 'CreationDate': '2014-03-28T22:32:54.437', 'Id': '23197''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>For example,</p>\n\n<p>Let the Grammar be:</p>\n\n<pre><code>S-&gt;Sa|B\n</code></pre>\n\n<p>Thus, <code>S-&gt;Sa-&gt;Saa-&gt;...-&gt;Saa...aaa-&gt;Baa...aaa</code></p>\n\n<p>What's wrong with this?</p>\n\n<p>Why is right recursion a solution to the problem?</p>\n\n<pre><code>S-&gt;BS'\nS-&gt;aS'|e\n</code></pre>\n", 'ViewCount': '35', 'ClosedDate': '2014-03-29T11:54:23.990', 'Title': 'Why does left recursion have to be eliminated?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-03-29T11:54:13.160', 'LastEditDate': '2014-03-29T11:54:13.160', 'AnswerCount': '1', 'CommentCount': '1', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '11684', 'Tags': '<context-free><formal-grammars><compilers><parsing><left-recursion>', 'CreationDate': '2014-03-29T05:06:57.450', 'Id': '23210''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Let $P$ be a deterministic PDA recognizing a deterministic CFL with a binary alphabet. Modify $P$ to identify its <em>reading states</em> (denote this subset of states by $R$) in accordance with the construction in Theorem 2.42 in Sipser (3$^{rd}$ edition only) for complementing DPDA. The final states of $P$ are $F\\subset R$, and $\\overline{P}$ recognizing the complement language is given by the same DPDA, but with final states $R-F$. </p>\n\n<p>Combine this with the construction in Lemma 2.59 showing that every DPDA recognizing an end-marked language has an equivalent DCFG. Modify $P$ to have a new accept state $q_\\mbox{accept}$. If $P$ enters a state in $F$ after reading the endmarker, it empties its stack and goes to $q_\\mbox{accept}$. Now do the same with $R-F$ and a new sink state $q_\\mbox{reject}$. </p>\n\n<p>In the grammar $G$ we have a start variable $A_{q_0q_\\mbox{accept}}$ which generates every string that takes $P$ from $q_0$ to $q_\\mbox{accept}$ with empty stack. Let $\\overline{G}$ be a copy of $G$, without renaming the variables, but replace the start state with $A_{q_0q_\\mbox{reject}}$. Then these grammars are both deterministic, and generate complement languages with respect to the portion of the string preceding the endmarker.</p>\n\n<p>Why do this? I think we can show DCFLs with binary alphabets are closed under substitution with an endmarked language and its complement using such a grammar. I think this is not in general the case as otherwise the resulting grammar with substitutions may have a forced handle in the production rules of both substituted grammars. Consider for example the language $\\{w\\mid w\\in\\{0,1\\}^*,\\#_0(w)=\\#_1(w)\\}$. Every string in this language can be extended to one in the complement and vice versa, so there must be strings for which both grammars would be able to match a handle based on just some initial portion of the string. Using the grammar construction described above, there will never be more than one forced handle, and every string will resolve to one of the start symbols. </p>\n\n<p>If this is a legitimate way to construct the complementary grammars, the very restricted closure result follows easily from the determinism of the grammars involved. Can anyone poke some holes in this?   </p>\n', 'ViewCount': '35', 'Title': 'A construction to show a very restricted substitution closure result for DCFLs', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-01T07:42:25.793', 'LastEditDate': '2014-04-01T07:42:25.793', 'AnswerCount': '0', 'CommentCount': '3', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '15486', 'Tags': '<formal-languages><context-free><formal-grammars><closure-properties><pushdown-automata>', 'CreationDate': '2014-03-31T08:17:43.793', 'Id': '23288''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I have this context-free grammar and I want to find out whether its language is finite or infinite.</p>\n\n<pre><code>S -&gt; XY|bb  Step 1\nX -&gt; XY|SS  Step 2\nY -&gt; XY|SS  Step 3\n</code></pre>\n\n<p>So I would do</p>\n\n<pre><code>S -&gt; XY            From step 1\nS -&gt; YYY           From step 2\nS -&gt; SSYY          From step 3\nS -&gt; SSSSY         From step 3\nS -&gt; SSSSSS        From step 3\nS -&gt; bbSSSSS       From step 1\nS -&gt; bbbbSSS       From step 1\nS -&gt; bbbbbbSSS     From step 1\nS -&gt; bbbbbbbbSS    From step 1\nS -&gt; bbbbbbbbbbS   From step 1\nS -&gt; bbbbbbbbbbbb  From step 1\n\nbbbbbbbbbbbb \n</code></pre>\n\n<p>So I know how to generate words like this but how to find out whether the language is finite or infinite?</p>\n', 'ViewCount': '159', 'Title': "How to find whether a grammar's language is finite or infinite?", 'LastEditorUserId': '8321', 'LastActivityDate': '2014-04-03T14:05:21.387', 'LastEditDate': '2014-04-03T09:22:59.747', 'AnswerCount': '3', 'CommentCount': '1', 'AcceptedAnswerId': '23368', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '14495', 'Tags': '<formal-languages><context-free><formal-grammars><proof-techniques><induction>', 'CreationDate': '2014-04-02T20:30:27.960', 'Id': '23367''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I need a regular language $ L\\subseteq \\{0,1\\}^{*} $ so that $unary(L)$ is not context free.</p>\n\n<p>unary of $L$ is defined by:\n$$unary(L) = \\{0^{1x}  : x \\in L  \\}$$</p>\n\n<p>Example $L = \\{0, 11\\} $ $\\rightarrow  unary(L) = \\{00, 0000000\\}$ </p>\n\n<p>Any help would be great.</p>\n', 'ViewCount': '45', 'ClosedDate': '2014-04-07T06:08:51.163', 'Title': 'a regular language so that $unary(L) \\notin $Context Free Languages', 'LastActivityDate': '2014-04-06T21:26:39.920', 'AnswerCount': '1', 'CommentCount': '1', 'AcceptedAnswerId': '23486', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16502', 'Tags': '<formal-languages><regular-languages><context-free>', 'CreationDate': '2014-04-06T20:06:32.793', 'Id': '23484''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u'<p>Does anyone know any good introductions to Formal Language theory and Formal Grammar, that cover the mathematical basis of Syntax and things like context free grammars and pushdown automata. In particular, I\'d like to be able to understand:</p>\n\n<p>-Parikh\u2019s theorem</p>\n\n<p>-Pentus\' proof that Lambek-calculus grammars define only context-free stringsets</p>\n\n<p>-the theorem of Chandra, Kozen and Stockmeyer</p>\n\n<p>-B\xfbchi\u2019s theorem and Doner\u2019s theorem</p>\n\n<p>Geoffrey Pullum\'s review <a href="http://www.lel.ed.ac.uk/~gpullum/Rev_Kracht.pdf" rel="nofollow">http://www.lel.ed.ac.uk/~gpullum/Rev_Kracht.pdf</a> has put me off reading a book called "The Mathematics of Language" by Markus Kracht, since I am not sure I have the required level of mathematical maturity. He writes:</p>\n\n<p>"Readers of The Mathematical Intelligencer will probably get on with it well enough, but others should be warned that Kracht assumes a lot of mathematical sophistication: graduate students whose first degree is in humanities or social science may experience symbol shock. Kracht does not pamper those who crave intuitive presentations. He will not explain that a finite automaton accepts exactly those strings on which there is a run beginning in the start state and ending in a final state; he will expect you to see that immediately when he tells you (on p.96) that $L(A) = \\{x \\colon~ \\delta(\\{i_0\\},x)\\cap F \\neq \\emptyset\\}$."</p>\n\n<p>The review has also put me off several other introductions:</p>\n\n<p>"W. J. M. Levelt\u2019s truly excellent 3-volume 1974 textbook [6] had remarkably wide coverage (Lev- elt\u2019s psycholinguistic interests lead him to cover work on \u2018learnability\u2019, also known as grammar induction, which Kracht does not touch on), but sadly has long been out of print. And the standard text by Partee, ter Meulen and Wall [9] is now more than fifteen years behind the leading edge of research, especially with respect to grammars and automata. (Though it was published in 1990, the Partee el al. volume reports as open the question of whether the complement of a context-sensitive stringset is always context-sensitive, which was settled in the affirmative in 1987, at Partee\u2019s insti- tution!) Though strong on formal semantics, it completely misses important topics in other areas (parsing and computational complexity, for example), and it looks positively fusty beside Kracht\u2019s much more up-to-date and considerably more mathematical book."</p>\n\n<p>So I\'d be grateful to hear if there are any introductions to this field which people can recommend.</p>\n', 'ViewCount': '62', 'Title': 'Good introductions to Formal Language Theory and Formal Grammars', 'LastEditorUserId': '13022', 'LastActivityDate': '2014-04-08T23:10:13.477', 'LastEditDate': '2014-04-08T23:10:13.477', 'AnswerCount': '0', 'CommentCount': '4', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '16562', 'Tags': '<formal-languages><context-free><formal-grammars><pushdown-automata>', 'CreationDate': '2014-04-08T18:09:27.717', 'Id': '23557''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am familiar with describing Regular Expressions but when it comes to describing CFG I get confused. Do you describe it in words like you would regular expressions or do you do something like this ?</p>\n\n<p>this is the CFG I am trying to describe</p>\n\n<pre><code>S -&gt; SS \nS -&gt; XXX \nX -&gt; aX| Xa| b\n</code></pre>\n\n<p>I was thinking something like this</p>\n\n<pre><code>S-&gt; SS\n  -&gt;XXXS\n  -&gt;aXXXs\n  -&gt;abXXS\n  -&gt;abXXS\n  -&gt;abXAXS\n  -&gt;abbaXS\n  -&gt;abbabS\n  -&gt;abbabS\n  -&gt;abbabXXX\n  -&gt;abbabbXX\n  -&gt;abbabbbX\n  -&gt;abbabbbb\n  -&gt;abbabbbb\n</code></pre>\n', 'ViewCount': '40', 'ClosedDate': '2014-04-08T22:51:30.063', 'Title': 'How do you describe a language that is generated by Context Free Grammer', 'LastActivityDate': '2014-04-08T23:51:13.680', 'AnswerCount': '1', 'CommentCount': '7', 'AcceptedAnswerId': '23571', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '14495', 'Tags': '<context-free>', 'CreationDate': '2014-04-08T21:19:58.620', 'Id': '23565''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I saw the answer in one of the solutions and I cannot figure out how they got the answer. The question is asked if the word is in the language or not for CNF...</p>\n\n<p>How did they get the answer so that ab is in the language and aaaa is not in the language here ?</p>\n\n<pre><code>S -&gt; aSb |ab\n\nab     Yes\naaaa   No\naabb   Yes\n</code></pre>\n\n<p>edit:\nis <code>aaaa No</code> because it has b in <code>aSb</code> and <code>ab</code> is yes because obviously <code>ab</code> is there in <code>aSb |ab</code></p>\n\n<p>also <code>aabb</code> is in the language because of <code>aSb</code> cause you would add same amount of <code>a's</code> and <code>b's</code> to both sides</p>\n", 'ViewCount': '223', 'Title': 'Proving that a word is *not* generated by a context-free grammar', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-09T23:06:13.337', 'LastEditDate': '2014-04-09T22:54:02.310', 'AnswerCount': '2', 'CommentCount': '6', 'Score': '3', 'PostTypeId': '1', 'OwnerUserId': '14495', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-04-09T21:55:24.510', 'Id': '23609''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>I am trying to use the pumping lemma to show this language is not context free:\n$L = a^nb^{n+1}c^{2n} : n \\ge 0$</p>\n\n<p>So I took $z = a^mb^{m+1}c^{2m}$ where $|z| = 4m+1 &gt; m$. We can decompose $z = a^mb^{m+1}c^{2m}$ to $z = uvwxy$ for $|vwx| \\le m$ and $|vx| \\ge 1$.</p>\n\n<p>I am confused about what cases to consider to show this is not context free? </p>\n', 'ViewCount': '38', 'Title': 'Show L is not context free using the CFL pumping lemma', 'LastActivityDate': '2014-04-10T04:42:57.707', 'AnswerCount': '1', 'CommentCount': '2', 'Score': '-1', 'PostTypeId': '1', 'OwnerUserId': '16610', 'Tags': '<context-free><formal-grammars><pumping-lemma>', 'CreationDate': '2014-04-10T01:51:42.690', 'Id': '23618''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>In an assignment I\'ve been asked to find a CFG for $a^x b^y a^z b^w$, where, $x,y,z,w \\in \\mathbb{N}^+$, $y &gt; x$, $z &gt; w$, and $x+z = y+w$. A hint was given, think of the language as $(a^p b^p)(b^q a^q)(a^r b^r)$.</p>\n\n<p>I\'ve had a go at it, and have come up with </p>\n\n<ul>\n<li>S -> A </li>\n<li>A -> aAbB | ab  </li>\n<li>B -> bBaC | ba </li>\n<li>C -> aCb | ab</li>\n</ul>\n\n<p>This language will give me equal $a$\'s and $b$\'s. The reason I\'ve chained the productions together is that since $x,y,z,w$ can\'t be 0, when one production is done, the others must be done as well (that was my thinking). However, I can\'t help but be worried about order. Even the smallest production won\'t come out as in the order "abab". Is it possible to construct a CFG that imposes order and memory? Or do I have to go to a PDA then CFG? Or is it irrelevant?</p>\n', 'ViewCount': '54', 'Title': 'Find a CFG for a language', 'LastEditorUserId': '13022', 'LastActivityDate': '2014-04-10T11:44:40.630', 'LastEditDate': '2014-04-10T11:09:17.643', 'AnswerCount': '2', 'CommentCount': '1', 'AcceptedAnswerId': '23632', 'Score': '0', 'PostTypeId': '1', 'OwnerUserId': '16625', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-04-10T09:38:39.543', 'Id': '23631''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': u"<p>Giving the following Grammar:<br></p>\n\n<pre><code>S \u2192 ^ | SaSMSM |  SMSaSM | SMSMSa   \nM \u2192 b | c\n</code></pre>\n\n<p><br>\n^ means eopsilon.</p>\n\n<p>How can i check whether its ambgious or not?\nMy intuition is that its not: every time you derive,the a is placed in different places between the M's.</p>\n\n<p>Can you give me a clue to get a better prove? Or give an example for its ambiguity?<br>\n<br>\nIn other words,Can i have to different derevation trees for a same string in this grammar?\n<br>\nThank you.</p>\n", 'ViewCount': '39', 'Title': 'How to check ambiguity of a specific grammar', 'LastEditorUserId': '16678', 'LastActivityDate': '2014-04-11T11:27:38.387', 'LastEditDate': '2014-04-11T11:01:26.010', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '23670', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '16678', 'Tags': '<formal-languages><context-free><formal-grammars>', 'CreationDate': '2014-04-11T10:49:03.413', 'Id': '23669''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>I have pretty simple question, but still can't find an answer just googling it.</p>\n\n<p>I'm trying to understand Chomsky Normal Form (CNF). There are three production rules:</p>\n\n<ol>\n<li>$A \\to BC$</li>\n<li>$A \\to \\alpha$</li>\n<li>$S \\to \\epsilon$</li>\n</ol>\n\n<p>First two I understand. But last one $\\epsilon$ doesn't makes sense for me. Why do we need this rule? What is use of having this?</p>\n", 'ViewCount': '36', 'Title': 'Chomsky normal form: epsilon rule', 'LastActivityDate': '2014-04-22T02:25:37.930', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '24014', 'Score': '2', 'OwnerDisplayName': 'Igor Konoplyanko', 'PostTypeId': '1', 'OwnerUserId': '16976', 'Tags': '<formal-grammars><context-free>', 'CreationDate': '2014-04-21T23:11:20.297', 'Id': '24012''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': "<p>How can we prove that:</p>\n\n<p>$$\nL = \\{ w_1\\#w_2 \\mid w_1 \\in w_2;\\; |w_2| &gt; |w_1|;\\; w_1 , w_2 \\in \\{0, 1\\}^*\\}\n$$</p>\n\n<p>is not context-free? </p>\n\n<p>The language defines $w_1$ as a sub-string of $w_2$, and they are separated by a $\\#$. This is easy with the CFG pumping-lemma for a slightly different language with $|w_2| \\ge |w_1|$ by using the special case of $|w_2| = |w_1|$ (i.e. $w_1 = w_2$). </p>\n\n<p>But here, $w_1$ is a proper sub-string of $w_2$ so I can't do the same. I fail to push the string out since we can always pump, for example the first symbol of $w_2$.</p>\n", 'ViewCount': '51', 'Title': 'Prove not context free', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-25T14:20:46.833', 'LastEditDate': '2014-04-25T12:55:52.150', 'AnswerCount': '1', 'CommentCount': '6', 'AcceptedAnswerId': '24104', 'Score': '1', 'PostTypeId': '1', 'OwnerUserId': '8805', 'Tags': '<formal-languages><context-free><proof-techniques><pumping-lemma>', 'CreationDate': '2014-04-25T12:28:16.643', 'Id': '24100''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}{'Body': '<p>Is there a <code>Context-free grammar</code> for the following language:</p>\n\n<p>$L=\\{ x\\#1^m|x \\in \\{0,1\\}^* \\space and \\space the \\space m^{th} \\space char \\space in \\space x \\space is \\space 1 \\}$</p>\n\n<p>If so what is it? Because i couldn\'t find any. I also tried to prove there isn\'t (by the <a href="http://en.wikipedia.org/wiki/Pumping_lemma_for_context-free_languages" rel="nofollow">Pumping lemma for context-free languages</a>), but it\'s given that a <code>Context-free grammar</code> does exist and I found an error in my "proof".</p>\n\n<p>So what would be the grammar?</p>\n\n<hr>\n\n<p>Here\'s the big picture of my proof:</p>\n\n<p>Let\'s choose $m=n_0$ and take the word $w=0^{n_0}1\\#1^{n_0+1}$ (so that $x$ is what\'s on the left side of $\\#$) .</p>\n\n<p>According to the lemma, $w$ can be written as $uvxyz$ and some conditions hold...</p>\n\n<p>$|vxy| \\leq n_0$</p>\n\n<p>therefor, $vxy$ include only zeros ($0$\'s).</p>\n\n<p>Now let\'s choose <code>k=2</code> and pump it up:</p>\n\n<p>we get: $w_2=uv^2xy^2z$</p>\n\n<p>which means, the number of $0$\'s is now:</p>\n\n<p>$n_0 + |v| + |y| \\geq n_0 + 1$</p>\n\n<p>(since $|vy| \\geq 1$) .</p>\n\n<p>Hence, the $m$th number (the $n_0$th in our case) is not $1$. It\'s actually $0$.</p>\n\n<p>Hence, $w_2$ doesn\'t belong to $L$. Contradiction.</p>\n\n<p>Hence, $L$ isn\'t <code>Context-free</code>.</p>\n\n<hr>\n\n<p>I think i know where\'s my mistake in the proof:</p>\n\n<p>$vxy$ isn\'t necessarily only $0$\'s. It could have the last $n_0-1$ zero\'s and a $1$.</p>\n', 'ViewCount': '45', 'Title': 'Is there a Context-free grammar for this language?', 'LastEditorUserId': '98', 'LastActivityDate': '2014-04-27T11:26:19.710', 'LastEditDate': '2014-04-27T11:26:19.710', 'AnswerCount': '1', 'CommentCount': '2', 'AcceptedAnswerId': '24144', 'Score': '2', 'PostTypeId': '1', 'OwnerUserId': '7931', 'Tags': '<formal-languages><context-free><pumping-lemma>', 'CreationDate': '2014-04-26T20:58:30.470', 'Id': '24140''color':getRandomColor(),'shape':'dot','label':'Strings', 'size': 60, 'isExploded':false, "precedence": 2}